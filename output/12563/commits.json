[
  {
    "sha": "a6240e2841a6f7737502727304bf75a6ffa78632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjI0MGUyODQxYTZmNzczNzUwMjcyNzMwNGJmNzVhNmZmYTc4NjMy",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T10:21:29Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T10:21:29Z"
      },
      "message": "add addrindex func",
      "tree": {
        "sha": "2c9b90fab7d5d5086dc3030f917e622441cf93fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c9b90fab7d5d5086dc3030f917e622441cf93fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6240e2841a6f7737502727304bf75a6ffa78632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6240e2841a6f7737502727304bf75a6ffa78632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6240e2841a6f7737502727304bf75a6ffa78632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6240e2841a6f7737502727304bf75a6ffa78632/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab4ee6e692427b372dc9acb887c46849b324cd40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab4ee6e692427b372dc9acb887c46849b324cd40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab4ee6e692427b372dc9acb887c46849b324cd40"
      }
    ],
    "stats": {
      "total": 1573,
      "additions": 1573,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9e734b84dcdcaa7581674d0ba8644a6df5e178a2",
        "filename": "src/addressindex.h",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/addressindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/addressindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addressindex.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRESSINDEX_H\n+#define BITCOIN_ADDRESSINDEX_H\n+\n+#include \"uint256.h\"\n+#include \"amount.h\"\n+\n+struct CMempoolAddressDelta\n+{\n+    int64_t time;\n+    CAmount amount;\n+    uint256 prevhash;\n+    unsigned int prevout;\n+\n+    CMempoolAddressDelta(int64_t t, CAmount a, uint256 hash, unsigned int out) {\n+        time = t;\n+        amount = a;\n+        prevhash = hash;\n+        prevout = out;\n+    }\n+\n+    CMempoolAddressDelta(int64_t t, CAmount a) {\n+        time = t;\n+        amount = a;\n+        prevhash.SetNull();\n+        prevout = 0;\n+    }\n+};\n+\n+struct CMempoolAddressDeltaKey\n+{\n+    int type;\n+    uint160 addressBytes;\n+    uint256 txhash;\n+    unsigned int index;\n+    int spending;\n+\n+    CMempoolAddressDeltaKey(int addressType, uint160 addressHash, uint256 hash, unsigned int i, int s) {\n+        type = addressType;\n+        addressBytes = addressHash;\n+        txhash = hash;\n+        index = i;\n+        spending = s;\n+    }\n+\n+    CMempoolAddressDeltaKey(int addressType, uint160 addressHash) {\n+        type = addressType;\n+        addressBytes = addressHash;\n+        txhash.SetNull();\n+        index = 0;\n+        spending = 0;\n+    }\n+};\n+\n+struct CMempoolAddressDeltaKeyCompare\n+{\n+    bool operator()(const CMempoolAddressDeltaKey& a, const CMempoolAddressDeltaKey& b) const {\n+        if (a.type == b.type) {\n+            if (a.addressBytes == b.addressBytes) {\n+                if (a.txhash == b.txhash) {\n+                    if (a.index == b.index) {\n+                        return a.spending < b.spending;\n+                    } else {\n+                        return a.index < b.index;\n+                    }\n+                } else {\n+                    return a.txhash < b.txhash;\n+                }\n+            } else {\n+                return a.addressBytes < b.addressBytes;\n+            }\n+        } else {\n+            return a.type < b.type;\n+        }\n+    }\n+};\n+\n+#endif // BITCOIN_ADDRESSINDEX_H"
      },
      {
        "sha": "8cd44c8b57896658e0b257736989bb719d99bc7d",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -322,6 +322,24 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     return CNoDestination();\n }\n } // namespace\n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n+{\n+    if (!IsValid()) {\n+        return false;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 1;\n+        return true;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 2;\n+        return true;\n+    }\n+\n+    return false;\n+}\n+// ->AddressIndex-l\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {"
      },
      {
        "sha": "81b0a91b39743bded9d13b71d6191948f52347d1",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -94,6 +94,33 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n+/** base58-encoded Bitcoin addresses.\n+ * Public-key-hash-addresses have version 0 (or 111 testnet).\n+ * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+ * Script-hash-addresses have version 5 (or 196 testnet).\n+ * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+ */\n+class CBitcoinAddress : public CBase58Data {\n+public:\n+    bool Set(const CKeyID &id);\n+    bool Set(const CScriptID &id, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n+    bool Set(const CTxDestination &dest, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n+    bool IsValid() const;\n+    bool IsValid(const CChainParams &params) const;\n+\n+    CBitcoinAddress() {}\n+    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n+    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n+    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n+\n+    CTxDestination Get() const;\n+\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n+\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n+\t// ->AddressIndex-l\n+    bool GetKeyID(CKeyID &keyID) const;\n+    bool IsScript() const;\n+};\n+\n /**\n  * A base58-encoded secret key\n  */"
      },
      {
        "sha": "19c8c8229917caeb280f2be5d66675e7e74b047e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 435,
        "deletions": 0,
        "changes": 435,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -623,6 +623,433 @@ UniValue echo(const JSONRPCRequest& request)\n     return request.params;\n }\n \n+// address index --added by lbc @ 20180126\n+bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &address)\n+{\n+    if (type == 2) {\n+        address = CBitcoinAddress(CScriptID(hash)).ToString();\n+    } else if (type == 1) {\n+        address = CBitcoinAddress(CKeyID(hash)).ToString();\n+    } else {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint160, int> > &addresses)\n+{\n+    if (params[0].isStr()) {\n+        CBitcoinAddress address(params[0].get_str());\n+        uint160 hashBytes;\n+        int type = 0;\n+        if (!address.GetIndexKey(hashBytes, type)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+        }\n+        addresses.push_back(std::make_pair(hashBytes, type));\n+    } else if (params[0].isObject()) {\n+\n+        UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n+        if (!addressValues.isArray()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Addresses is expected to be an array\");\n+        }\n+\n+        std::vector<UniValue> values = addressValues.getValues();\n+\n+        for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n+\n+            CBitcoinAddress address(it->get_str());\n+            uint160 hashBytes;\n+            int type = 0;\n+            if (!address.GetIndexKey(hashBytes, type)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n+            addresses.push_back(std::make_pair(hashBytes, type));\n+        }\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    return true;\n+}\n+\n+bool heightSort(std::pair<CAddressUnspentKey, CAddressUnspentValue> a,\n+                std::pair<CAddressUnspentKey, CAddressUnspentValue> b) {\n+    return a.second.blockHeight < b.second.blockHeight;\n+}\n+\n+bool timestampSort(std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> a,\n+                   std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> b) {\n+    return a.second.time < b.second.time;\n+}\n+\n+\n+UniValue getaddressmempool(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressmempool\\n\"\n+            \"\\nReturns all mempool deltas for an address (requires addressindex to be enabled).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"{\\n\"\n+            \"  \\\"addresses\\\"\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"}\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"    \\\"txid\\\"  (string) The related txid\\n\"\n+            \"    \\\"index\\\"  (number) The related input or output index\\n\"\n+            \"    \\\"satoshis\\\"  (number) The difference of duffs\\n\"\n+            \"    \\\"timestamp\\\"  (number) The time the transaction entered the mempool (seconds)\\n\"\n+            \"    \\\"prevtxid\\\"  (string) The previous txid (if spending)\\n\"\n+            \"    \\\"prevout\\\"  (string) The previous transaction output index (if spending)\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressmempool\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+            + HelpExampleRpc(\"getaddressmempool\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+        );\n+\n+    std::vector<std::pair<uint160, int> > addresses;\n+\n+    if (!getAddressesFromParams(request.params, addresses)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::vector<std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> > indexes;\n+\n+    if (!mempool.getAddressIndex(addresses, indexes)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+    }\n+\n+    std::sort(indexes.begin(), indexes.end(), timestampSort);\n+\n+    UniValue result(UniValue::VARR);\n+\n+    for (std::vector<std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> >::iterator it = indexes.begin();\n+         it != indexes.end(); it++) {\n+\n+        std::string address;\n+        if (!getAddressFromIndex(it->first.type, it->first.addressBytes, address)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown address type\");\n+        }\n+\n+        UniValue delta(UniValue::VOBJ);\n+        delta.push_back(Pair(\"address\", address));\n+        delta.push_back(Pair(\"txid\", it->first.txhash.GetHex()));\n+        delta.push_back(Pair(\"index\", (int)it->first.index));\n+        delta.push_back(Pair(\"satoshis\", it->second.amount));\n+        delta.push_back(Pair(\"timestamp\", it->second.time));\n+        if (it->second.amount < 0) {\n+            delta.push_back(Pair(\"prevtxid\", it->second.prevhash.GetHex()));\n+            delta.push_back(Pair(\"prevout\", (int)it->second.prevout));\n+        }\n+        result.push_back(delta);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue getaddressutxos(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressutxos\\n\"\n+            \"\\nReturns all unspent outputs for an address (requires addressindex to be enabled).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"{\\n\"\n+            \"  \\\"addresses\\\"\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"}\\n\"\n+            \"\\nResult\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\"  (string) The address base58check encoded\\n\"\n+            \"    \\\"txid\\\"  (string) The output txid\\n\"\n+            \"    \\\"outputIndex\\\"  (number) The output index\\n\"\n+            \"    \\\"script\\\"  (string) The script hex encoded\\n\"\n+            \"    \\\"satoshis\\\"  (number) The number of duffs of the output\\n\"\n+            \"    \\\"height\\\"  (number) The block height\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressutxos\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+            + HelpExampleRpc(\"getaddressutxos\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+        );\n+\n+    std::vector<std::pair<uint160, int> > addresses;\n+\n+    if (!getAddressesFromParams(request.params, addresses)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > unspentOutputs;\n+\n+    for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n+        if (!GetAddressUnspent((*it).first, (*it).second, unspentOutputs)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+        }\n+    }\n+\n+    std::sort(unspentOutputs.begin(), unspentOutputs.end(), heightSort);\n+\n+    UniValue result(UniValue::VARR);\n+\n+    for (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> >::const_iterator it=unspentOutputs.begin(); it!=unspentOutputs.end(); it++) {\n+        UniValue output(UniValue::VOBJ);\n+        std::string address;\n+        if (!getAddressFromIndex(it->first.type, it->first.hashBytes, address)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown address type\");\n+        }\n+\n+        output.push_back(Pair(\"address\", address));\n+        output.push_back(Pair(\"txid\", it->first.txhash.GetHex()));\n+        output.push_back(Pair(\"outputIndex\", (int)it->first.index));\n+        output.push_back(Pair(\"script\", HexStr(it->second.script.begin(), it->second.script.end())));\n+        output.push_back(Pair(\"satoshis\", it->second.satoshis));\n+        output.push_back(Pair(\"height\", it->second.blockHeight));\n+        result.push_back(output);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue getaddressdeltas(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1/* || !request.params[0].isObject()*/)\n+        throw std::runtime_error(\n+            \"getaddressdeltas\\n\"\n+            \"\\nReturns all changes for an address (requires addressindex to be enabled).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"{\\n\"\n+            \"  \\\"addresses\\\"\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"start\\\" (number) The start block height\\n\"\n+            \"  \\\"end\\\" (number) The end block height\\n\"\n+            \"}\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"satoshis\\\"  (number) The difference of duffs\\n\"\n+            \"    \\\"txid\\\"  (string) The related txid\\n\"\n+            \"    \\\"index\\\"  (number) The related input or output index\\n\"\n+            \"    \\\"blockindex\\\"  (number) The related block index\\n\"\n+            \"    \\\"height\\\"  (number) The block height\\n\"\n+            \"    \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressdeltas\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+            + HelpExampleRpc(\"getaddressdeltas\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+        );\n+\n+    int start = 0;\n+    int end = 0;\n+\n+    if (request.params[0].isObject()) {\n+        UniValue startValue = find_value(request.params[0].get_obj(), \"start\");\n+        UniValue endValue = find_value(request.params[0].get_obj(), \"end\");\n+        if (startValue.isNum() && endValue.isNum()) {\n+            start = startValue.get_int();\n+            end = endValue.get_int();\n+            if (end < start) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"End value is expected to be greater than start\");\n+            }\n+        }\n+    }\n+\n+    std::vector<std::pair<uint160, int> > addresses;\n+\n+    if (!getAddressesFromParams(request.params, addresses)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+\n+    for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n+        if (start > 0 && end > 0) {\n+            if (!GetAddressIndex((*it).first, (*it).second, addressIndex, start, end)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+            }\n+        } else {\n+            if (!GetAddressIndex((*it).first, (*it).second, addressIndex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+            }\n+        }\n+    }\n+\n+    UniValue result(UniValue::VARR);\n+\n+    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=addressIndex.begin(); it!=addressIndex.end(); it++) {\n+        std::string address;\n+        if (!getAddressFromIndex(it->first.type, it->first.hashBytes, address)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown address type\");\n+        }\n+\n+        UniValue delta(UniValue::VOBJ);\n+        delta.push_back(Pair(\"satoshis\", it->second));\n+        delta.push_back(Pair(\"txid\", it->first.txhash.GetHex()));\n+        delta.push_back(Pair(\"index\", (int)it->first.index));\n+        delta.push_back(Pair(\"blockindex\", (int)it->first.txindex));\n+        delta.push_back(Pair(\"height\", it->first.blockHeight));\n+        delta.push_back(Pair(\"address\", address));\n+        result.push_back(delta);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue getaddresstxids(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddresstxids\\n\"\n+            \"\\nReturns the txids for an address(es) (requires addressindex to be enabled).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"{\\n\"\n+            \"  \\\"addresses\\\"\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"start\\\" (number) The start block height\\n\"\n+            \"  \\\"end\\\" (number) The end block height\\n\"\n+            \"}\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  \\\"transactionid\\\"  (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddresstxids\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+            + HelpExampleRpc(\"getaddresstxids\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+        );\n+\n+    std::vector<std::pair<uint160, int> > addresses;\n+\n+    if (!getAddressesFromParams(request.params, addresses)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    int start = 0;\n+    int end = 0;\n+    if (request.params[0].isObject()) {\n+        UniValue startValue = find_value(request.params[0].get_obj(), \"start\");\n+        UniValue endValue = find_value(request.params[0].get_obj(), \"end\");\n+        if (startValue.isNum() && endValue.isNum()) {\n+            start = startValue.get_int();\n+            end = endValue.get_int();\n+        }\n+    }\n+\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+\n+    for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n+        if (start > 0 && end > 0) {\n+            if (!GetAddressIndex((*it).first, (*it).second, addressIndex, start, end)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+            }\n+        } else {\n+            if (!GetAddressIndex((*it).first, (*it).second, addressIndex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+            }\n+        }\n+    }\n+\n+    std::set<std::pair<int, std::string> > txids;\n+    UniValue result(UniValue::VARR);\n+\n+    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=addressIndex.begin(); it!=addressIndex.end(); it++) {\n+        int height = it->first.blockHeight;\n+        std::string txid = it->first.txhash.GetHex();\n+\n+        if (addresses.size() > 1) {\n+            txids.insert(std::make_pair(height, txid));\n+        } else {\n+            if (txids.insert(std::make_pair(height, txid)).second) {\n+                result.push_back(txid);\n+            }\n+        }\n+    }\n+\n+    if (addresses.size() > 1) {\n+        for (std::set<std::pair<int, std::string> >::const_iterator it=txids.begin(); it!=txids.end(); it++) {\n+            result.push_back(it->second);\n+        }\n+    }\n+\n+    return result;\n+\n+}\n+\n+UniValue getaddressbalance(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressbalance\\n\"\n+            \"\\nReturns the balance for an address(es) (requires addressindex to be enabled).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"{\\n\"\n+            \"  \\\"addresses\\\"\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"  (string) The base58check encoded address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"}\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"balance\\\"  (string) The current balance in duffs\\n\"\n+            \"  \\\"received\\\"  (string) The total number of duffs received (including change)\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressbalance\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+            + HelpExampleRpc(\"getaddressbalance\", \"\\\"LER4HnAEFwYHbmGxCfP2po1nPrUeiK8KM2\\\"\")\n+        );\n+\n+    std::vector<std::pair<uint160, int> > addresses;\n+\n+    if (!getAddressesFromParams(request.params, addresses)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+\n+    for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n+\t\tprintf(\"address hash=(%s), type=%d\\n\", it->first.ToString().c_str(), it->second);\n+\t\t//dbaddrs.push_back(std::make_pair(it->first, it->second));\n+        if (!GetAddressIndex((*it).first, (*it).second, addressIndex)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");\n+        }\n+    }\n+\n+    CAmount balance = 0;\n+    CAmount received = 0;\n+\n+    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=addressIndex.begin(); it!=addressIndex.end(); it++) {\n+        if (it->second > 0) {\n+            received += it->second;\n+        }\n+        balance += it->second;\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"balance\", balance));\n+    result.push_back(Pair(\"received\", received));\n+\n+    return result;\n+\n+}\n+\n static UniValue getinfo_deprecated(const JSONRPCRequest& request)\n {\n     throw JSONRPCError(RPC_METHOD_NOT_FOUND,\n@@ -645,6 +1072,14 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n \n+  \t/* Address index --added by lbc @ 20180126*/\n+    { \"addressindex\",       \"getaddressmempool\",      &getaddressmempool,      true, {\"address\"} },\n+    { \"addressindex\",       \"getaddressutxos\",        &getaddressutxos,        true, {\"address\"} },\n+    { \"addressindex\",       \"getaddressdeltas\",       &getaddressdeltas,       true, {\"address\"} },\n+    { \"addressindex\",       \"getaddresstxids\",        &getaddresstxids,        true, {\"address\"} },\n+    { \"addressindex\",       \"getaddressbalance\",      &getaddressbalance,      true, {\"address\"} },\n+    /*add end*/\n+\n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},"
      },
      {
        "sha": "a0e1a129c8f07f2190940efe6bd99c472cc0026c",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -199,6 +199,20 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+bool CScript::IsPayToPublicKeyHash() const\n+{\n+    // Extra-fast test for pay-to-pubkey-hash CScripts:\n+    return (this->size() == 25 &&\n+            (*this)[0] == OP_DUP &&\n+            (*this)[1] == OP_HASH160 &&\n+            (*this)[2] == 0x14 &&\n+            (*this)[23] == OP_EQUALVERIFY &&\n+            (*this)[24] == OP_CHECKSIG);\n+}\n+// ->AddressIndex-l\n+\n+\n bool CScript::IsPayToScriptHash() const\n {\n     // Extra-fast test for pay-to-script-hash CScripts:"
      },
      {
        "sha": "39709f198f1bb8342c9d2eaf90350ee75bb82c23",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -640,6 +640,9 @@ class CScript : public CScriptBase\n      */\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n+\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n+\tbool IsPayToPublicKeyHash() const;\n+\t// ->AddressIndex-l\n     bool IsPayToScriptHash() const;\n     bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;"
      },
      {
        "sha": "71683555af08048b0d0400721bf20caff989a074",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -82,6 +82,19 @@ template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n     obj = htole64(obj);\n     s.write((char*)&obj, 8);\n }\n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)\n+{\n+    obj = htobe32(obj);\n+    s.write((char*)&obj, 4);\n+}\n+template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return be32toh(obj);\n+}\n+// ->AddressIndex-l\n template<typename Stream> inline uint8_t ser_readdata8(Stream &s)\n {\n     uint8_t obj;"
      },
      {
        "sha": "d90a13de9661b95a08051d95f946d8330f83b540",
        "filename": "src/spentindex.h",
        "status": "added",
        "additions": 375,
        "deletions": 0,
        "changes": 375,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/spentindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/spentindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/spentindex.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -0,0 +1,375 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SPENTINDEX_H\n+#define BITCOIN_SPENTINDEX_H\n+\n+#include \"uint256.h\"\n+#include \"amount.h\"\n+#include \"script/script.h\"\n+#include \"serialize.h\"\n+#include \"clientversion.h\"\n+\n+struct CSpentIndexKey {\n+    uint256 txid;\n+    unsigned int outputIndex;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action/*, int nType = SER_DISK, int nVersion = CLIENT_VERSION*/) {\n+        READWRITE(txid);\n+        READWRITE(outputIndex);\n+    }\n+\n+    CSpentIndexKey(uint256 t, unsigned int i) {\n+        txid = t;\n+        outputIndex = i;\n+    }\n+\n+    CSpentIndexKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        txid.SetNull();\n+        outputIndex = 0;\n+    }\n+\n+};\n+\n+struct CSpentIndexValue {\n+    uint256 txid;\n+    unsigned int inputIndex;\n+    int blockHeight;\n+    CAmount satoshis;\n+    int addressType;\n+    uint160 addressHash;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action/*, int nType, int nVersion*/) {\n+        READWRITE(txid);\n+        READWRITE(inputIndex);\n+        READWRITE(blockHeight);\n+        READWRITE(satoshis);\n+        READWRITE(addressType);\n+        READWRITE(addressHash);\n+    }\n+\n+    CSpentIndexValue(uint256 t, unsigned int i, int h, CAmount s, int type, uint160 a) {\n+        txid = t;\n+        inputIndex = i;\n+        blockHeight = h;\n+        satoshis = s;\n+        addressType = type;\n+        addressHash = a;\n+    }\n+\n+    CSpentIndexValue() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        txid.SetNull();\n+        inputIndex = 0;\n+        blockHeight = 0;\n+        satoshis = 0;\n+        addressType = 0;\n+        addressHash.SetNull();\n+    }\n+\n+    bool IsNull() const {\n+        return txid.IsNull();\n+    }\n+};\n+\n+struct CSpentIndexKeyCompare\n+{\n+    bool operator()(const CSpentIndexKey& a, const CSpentIndexKey& b) const {\n+        if (a.txid == b.txid) {\n+            return a.outputIndex < b.outputIndex;\n+        } else {\n+            return a.txid < b.txid;\n+        }\n+    }\n+};\n+\n+struct CTimestampIndexIteratorKey {\n+    unsigned int timestamp;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 4;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata32be(s, timestamp);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        timestamp = ser_readdata32be(s);\n+    }\n+\n+    CTimestampIndexIteratorKey(unsigned int time) {\n+        timestamp = time;\n+    }\n+\n+    CTimestampIndexIteratorKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        timestamp = 0;\n+    }\n+};\n+\n+struct CTimestampIndexKey {\n+    unsigned int timestamp;\n+    uint256 blockHash;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 36;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata32be(s, timestamp);\n+        blockHash.Serialize(s/*, nType, nVersion*/);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        timestamp = ser_readdata32be(s);\n+        blockHash.Unserialize(s/*, nType, nVersion*/);\n+    }\n+\n+    CTimestampIndexKey(unsigned int time, uint256 hash) {\n+        timestamp = time;\n+        blockHash = hash;\n+    }\n+\n+    CTimestampIndexKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        timestamp = 0;\n+        blockHash.SetNull();\n+    }\n+};\n+\n+struct CAddressUnspentKey {\n+    unsigned int type;\n+    uint160 hashBytes;\n+    uint256 txhash;\n+    size_t index;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 57;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata8(s, type);\n+        hashBytes.Serialize(s/*, nType, nVersion*/);\n+        txhash.Serialize(s/*, nType, nVersion*/);\n+        ser_writedata32(s, index);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        type = ser_readdata8(s);\n+        hashBytes.Unserialize(s/*, nType, nVersion*/);\n+        txhash.Unserialize(s/*, nType, nVersion*/);\n+        index = ser_readdata32(s);\n+    }\n+\n+    CAddressUnspentKey(unsigned int addressType, uint160 addressHash, uint256 txid, size_t indexValue) {\n+        type = addressType;\n+        hashBytes = addressHash;\n+        txhash = txid;\n+        index = indexValue;\n+    }\n+\n+    CAddressUnspentKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        type = 0;\n+        hashBytes.SetNull();\n+        txhash.SetNull();\n+        index = 0;\n+    }\n+};\n+\n+struct CAddressUnspentValue {\n+    CAmount satoshis;\n+    CScript script;\n+    int blockHeight;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action/*, int nType, int nVersion*/) {\n+        READWRITE(satoshis);\n+        READWRITE(*(CScriptBase*)(&script));\n+        READWRITE(blockHeight);\n+    }\n+\n+    CAddressUnspentValue(CAmount sats, CScript scriptPubKey, int height) {\n+        satoshis = sats;\n+        script = scriptPubKey;\n+        blockHeight = height;\n+    }\n+\n+    CAddressUnspentValue() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        satoshis = -1;\n+        script.clear();\n+        blockHeight = 0;\n+    }\n+\n+    bool IsNull() const {\n+        return (satoshis == -1);\n+    }\n+};\n+\n+struct CAddressIndexKey {\n+    unsigned int type;\n+    uint160 hashBytes;\n+    int blockHeight;\n+    unsigned int txindex;\n+    uint256 txhash;\n+    size_t index;\n+    bool spending;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 66;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata8(s, type);\n+        hashBytes.Serialize(s/*, nType, nVersion*/);\n+        // Heights are stored big-endian for key sorting in LevelDB\n+        ser_writedata32be(s, blockHeight);\n+        ser_writedata32be(s, txindex);\n+        txhash.Serialize(s/*, nType, nVersion*/);\n+        ser_writedata32(s, index);\n+        char f = spending;\n+        ser_writedata8(s, f);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        type = ser_readdata8(s);\n+        hashBytes.Unserialize(s/*, nType, nVersion*/);\n+        blockHeight = ser_readdata32be(s);\n+        txindex = ser_readdata32be(s);\n+        txhash.Unserialize(s/*, nType, nVersion*/);\n+        index = ser_readdata32(s);\n+        char f = ser_readdata8(s);\n+        spending = f;\n+    }\n+\n+    CAddressIndexKey(unsigned int addressType, uint160 addressHash, int height, int blockindex,\n+                     uint256 txid, size_t indexValue, bool isSpending) {\n+        type = addressType;\n+        hashBytes = addressHash;\n+        blockHeight = height;\n+        txindex = blockindex;\n+        txhash = txid;\n+        index = indexValue;\n+        spending = isSpending;\n+    }\n+\n+    CAddressIndexKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        type = 0;\n+        hashBytes.SetNull();\n+        blockHeight = 0;\n+        txindex = 0;\n+        txhash.SetNull();\n+        index = 0;\n+        spending = false;\n+    }\n+\n+};\n+\n+struct CAddressIndexIteratorKey {\n+    unsigned int type;\n+    uint160 hashBytes;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 21;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata8(s, type);\n+        hashBytes.Serialize(s/*, nType, nVersion*/);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        type = ser_readdata8(s);\n+        hashBytes.Unserialize(s/*, nType, nVersion*/);\n+    }\n+\n+    CAddressIndexIteratorKey(unsigned int addressType, uint160 addressHash) {\n+        type = addressType;\n+        hashBytes = addressHash;\n+    }\n+\n+    CAddressIndexIteratorKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        type = 0;\n+        hashBytes.SetNull();\n+    }\n+};\n+\n+struct CAddressIndexIteratorHeightKey {\n+    unsigned int type;\n+    uint160 hashBytes;\n+    int blockHeight;\n+\n+    size_t GetSerializeSize(/*int nType, int nVersion*/) const {\n+        return 25;\n+    }\n+    template<typename Stream>\n+    void Serialize(Stream& s/*, int nType, int nVersion*/) const {\n+        ser_writedata8(s, type);\n+        hashBytes.Serialize(s/*, nType, nVersion*/);\n+        ser_writedata32be(s, blockHeight);\n+    }\n+    template<typename Stream>\n+    void Unserialize(Stream& s/*, int nType, int nVersion*/) {\n+        type = ser_readdata8(s);\n+        hashBytes.Unserialize(s/*, nType, nVersion*/);\n+        blockHeight = ser_readdata32be(s);\n+    }\n+\n+    CAddressIndexIteratorHeightKey(unsigned int addressType, uint160 addressHash, int height) {\n+        type = addressType;\n+        hashBytes = addressHash;\n+        blockHeight = height;\n+    }\n+\n+    CAddressIndexIteratorHeightKey() {\n+        SetNull();\n+    }\n+\n+    void SetNull() {\n+        type = 0;\n+        hashBytes.SetNull();\n+        blockHeight = 0;\n+    }\n+};\n+\n+\n+#endif // BITCOIN_SPENTINDEX_H"
      },
      {
        "sha": "fa3bc9a261f7819d374a35272d6fd2141c55b8aa",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -22,6 +22,12 @@ static const char DB_COIN = 'C';\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n+/*address index start*/\n+static const char DB_ADDRESSINDEX = 'a';\n+static const char DB_ADDRESSUNSPENTINDEX = 'u';\n+static const char DB_TIMESTAMPINDEX = 's';\n+static const char DB_SPENTINDEX = 'p';\n+/*address index end*/\n static const char DB_BLOCK_INDEX = 'b';\n \n static const char DB_BEST_BLOCK = 'B';\n@@ -247,6 +253,140 @@ bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>\n     return WriteBatch(batch);\n }\n \n+/*add for address index**************************************************************************************/\n+bool CBlockTreeDB::ReadSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value) {\n+    return Read(std::make_pair(DB_SPENTINDEX, key), value);\n+}\n+\n+bool CBlockTreeDB::UpdateSpentIndex(const std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> >&vect) {\n+    CDBBatch batch(*this);\n+    for (std::vector<std::pair<CSpentIndexKey,CSpentIndexValue> >::const_iterator it=vect.begin(); it!=vect.end(); it++) {\n+        if (it->second.IsNull()) {\n+            batch.Erase(std::make_pair(DB_SPENTINDEX, it->first));\n+        } else {\n+            batch.Write(std::make_pair(DB_SPENTINDEX, it->first), it->second);\n+        }\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::UpdateAddressUnspentIndex(const std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue > >&vect) {\n+    CDBBatch batch(*this);\n+    for (std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> >::const_iterator it=vect.begin(); it!=vect.end(); it++) {\n+        if (it->second.IsNull()) {\n+            batch.Erase(std::make_pair(DB_ADDRESSUNSPENTINDEX, it->first));\n+        } else {\n+            batch.Write(std::make_pair(DB_ADDRESSUNSPENTINDEX, it->first), it->second);\n+        }\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::ReadAddressUnspentIndex(uint160 addressHash, int type,\n+                                           std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > &unspentOutputs) {\n+\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n+\n+    pcursor->Seek(std::make_pair(DB_ADDRESSUNSPENTINDEX, CAddressIndexIteratorKey(type, addressHash)));\n+\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<char,CAddressUnspentKey> key;\n+        if (pcursor->GetKey(key) && key.first == DB_ADDRESSUNSPENTINDEX && key.second.hashBytes == addressHash) {\n+            CAddressUnspentValue nValue;\n+            if (pcursor->GetValue(nValue)) {\n+                unspentOutputs.push_back(std::make_pair(key.second, nValue));\n+                pcursor->Next();\n+            } else {\n+                return error(\"failed to get address unspent value\");\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+\n+bool CBlockTreeDB::WriteAddressIndex(const std::vector<std::pair<CAddressIndexKey, CAmount > >&vect) {\n+    CDBBatch batch(*this);\n+    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+    {\n+        batch.Write(std::make_pair(DB_ADDRESSINDEX, it->first), it->second);\n+    }\n+    //mylogfile->Close();\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::EraseAddressIndex(const std::vector<std::pair<CAddressIndexKey, CAmount > >&vect) {\n+    CDBBatch batch(*this);\n+    for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+        batch.Erase(std::make_pair(DB_ADDRESSINDEX, it->first));\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n+                                    std::vector<std::pair<CAddressIndexKey, CAmount> > &addressIndex,\n+                                    int start, int end) {\n+\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n+\n+    if (start > 0 && end > 0) {\n+        pcursor->Seek(std::make_pair(DB_ADDRESSINDEX, CAddressIndexIteratorHeightKey(type, addressHash, start)));\n+    } else {\n+        pcursor->Seek(std::make_pair(DB_ADDRESSINDEX, CAddressIndexIteratorKey(type, addressHash)));\n+    }\n+\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<char,CAddressIndexKey> key;\n+        if (pcursor->GetKey(key) && key.first == DB_ADDRESSINDEX && key.second.hashBytes == addressHash) {\n+            if (end > 0 && key.second.blockHeight > end) {\n+                break;\n+            }\n+            CAmount nValue;\n+            if (pcursor->GetValue(nValue)) {\n+                addressIndex.push_back(std::make_pair(key.second, nValue));\n+\t\t\t\t//printf(\"**readindex**,height=%d, hash=(%s), amount=%lld\\n\", key.second.blockHeight, key.second.hashBytes.ToString().c_str(), nValue);\n+                pcursor->Next();\n+            } else {\n+                return error(\"failed to get address index value\");\n+            }\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool CBlockTreeDB::WriteTimestampIndex(const CTimestampIndexKey &timestampIndex) {\n+    CDBBatch batch(*this);\n+    batch.Write(std::make_pair(DB_TIMESTAMPINDEX, timestampIndex), 0);\n+    return WriteBatch(batch);\n+}\n+\n+bool CBlockTreeDB::ReadTimestampIndex(const unsigned int &high, const unsigned int &low, std::vector<uint256> &hashes) {\n+\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n+\n+    pcursor->Seek(std::make_pair(DB_TIMESTAMPINDEX, CTimestampIndexIteratorKey(low)));\n+\n+    while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n+        std::pair<char, CTimestampIndexKey> key;\n+        if (pcursor->GetKey(key) && key.first == DB_TIMESTAMPINDEX && key.second.timestamp <= high) {\n+            hashes.push_back(key.second.blockHash);\n+            pcursor->Next();\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    return true;\n+}\n+/*address index end********************************************************************************/\n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n     return Write(std::make_pair(DB_FLAG, name), fValue ? '1' : '0');\n }"
      },
      {
        "sha": "72945c7a3a9409440a0b61e4afeb2a6548008fc0",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -9,6 +9,9 @@\n #include <coins.h>\n #include <dbwrapper.h>\n #include <chain.h>\n+/*address index start*/\n+#include \"spentindex.h\"\n+/*address index end*/\n \n #include <map>\n #include <string>\n@@ -121,6 +124,20 @@ class CBlockTreeDB : public CDBWrapper\n     bool ReadReindexing(bool &fReindexing);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n     bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &vect);\n+\t/*add for address index*/\n+\tbool ReadSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value);\n+    bool UpdateSpentIndex(const std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> >&vect);\n+    bool UpdateAddressUnspentIndex(const std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue > >&vect);\n+    bool ReadAddressUnspentIndex(uint160 addressHash, int type,\n+                                 std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > &vect);\n+    bool WriteAddressIndex(const std::vector<std::pair<CAddressIndexKey, CAmount> > &vect);\n+    bool EraseAddressIndex(const std::vector<std::pair<CAddressIndexKey, CAmount> > &vect);\n+    bool ReadAddressIndex(uint160 addressHash, int type,\n+                          std::vector<std::pair<CAddressIndexKey, CAmount> > &addressIndex,\n+                          int start = 0, int end = 0);\n+    bool WriteTimestampIndex(const CTimestampIndexKey &timestampIndex);\n+    bool ReadTimestampIndex(const unsigned int &high, const unsigned int &low, std::vector<uint256> &vect);\n+\t/*address index end*/\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);"
      },
      {
        "sha": "2252422b3f087a6ff8119c3261e09939f4777a6c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -441,6 +441,150 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}\n }\n \n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+void CTxMemPool::addAddressIndex(const CTxMemPoolEntry &entry, const CCoinsViewCache &view)\n+{\n+    LOCK(cs);\n+    const CTransaction& tx = entry.GetTx();\n+    std::vector<CMempoolAddressDeltaKey> inserted;\n+\n+    uint256 txhash = tx.GetHash();\n+    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n+        const CTxIn input = tx.vin[j];\n+        const Coin& coin = view.AccessCoin(input.prevout);\n+        const CTxOut &prevout = coin.out;\n+        if (prevout.scriptPubKey.IsPayToScriptHash()) {\n+            std::vector<unsigned char> hashBytes(prevout.scriptPubKey.begin()+2, prevout.scriptPubKey.begin()+22);\n+            CMempoolAddressDeltaKey key(2, uint160(hashBytes), txhash, j, 1);\n+            CMempoolAddressDelta delta(entry.GetTime(), prevout.nValue * -1, input.prevout.hash, input.prevout.n);\n+            mapAddress.insert(std::make_pair(key, delta));\n+            inserted.push_back(key);\n+        } else if (prevout.scriptPubKey.IsPayToPublicKeyHash()) {\n+            std::vector<unsigned char> hashBytes(prevout.scriptPubKey.begin()+3, prevout.scriptPubKey.begin()+23);\n+            CMempoolAddressDeltaKey key(1, uint160(hashBytes), txhash, j, 1);\n+            CMempoolAddressDelta delta(entry.GetTime(), prevout.nValue * -1, input.prevout.hash, input.prevout.n);\n+            mapAddress.insert(std::make_pair(key, delta));\n+            inserted.push_back(key);\n+        }\n+    }\n+\n+    for (unsigned int k = 0; k < tx.vout.size(); k++) {\n+        const CTxOut &out = tx.vout[k];\n+        if (out.scriptPubKey.IsPayToScriptHash()) {\n+            std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+2, out.scriptPubKey.begin()+22);\n+            CMempoolAddressDeltaKey key(2, uint160(hashBytes), txhash, k, 0);\n+            mapAddress.insert(std::make_pair(key, CMempoolAddressDelta(entry.GetTime(), out.nValue)));\n+            inserted.push_back(key);\n+        } else if (out.scriptPubKey.IsPayToPublicKeyHash()) {\n+            std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+3, out.scriptPubKey.begin()+23);\n+            std::pair<addressDeltaMap::iterator,bool> ret;\n+            CMempoolAddressDeltaKey key(1, uint160(hashBytes), txhash, k, 0);\n+            mapAddress.insert(std::make_pair(key, CMempoolAddressDelta(entry.GetTime(), out.nValue)));\n+            inserted.push_back(key);\n+        }\n+    }\n+\n+    mapAddressInserted.insert(std::make_pair(txhash, inserted));\n+}\n+\n+bool CTxMemPool::getAddressIndex(std::vector<std::pair<uint160, int> > &addresses,\n+                                 std::vector<std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> > &results)\n+{\n+    LOCK(cs);\n+    for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n+        addressDeltaMap::iterator ait = mapAddress.lower_bound(CMempoolAddressDeltaKey((*it).second, (*it).first));\n+        while (ait != mapAddress.end() && (*ait).first.addressBytes == (*it).first && (*ait).first.type == (*it).second) {\n+            results.push_back(*ait);\n+            ait++;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CTxMemPool::removeAddressIndex(const uint256 txhash)\n+{\n+    LOCK(cs);\n+    addressDeltaMapInserted::iterator it = mapAddressInserted.find(txhash);\n+\n+    if (it != mapAddressInserted.end()) {\n+        std::vector<CMempoolAddressDeltaKey> keys = (*it).second;\n+        for (std::vector<CMempoolAddressDeltaKey>::iterator mit = keys.begin(); mit != keys.end(); mit++) {\n+            mapAddress.erase(*mit);\n+        }\n+        mapAddressInserted.erase(it);\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::addSpentIndex(const CTxMemPoolEntry &entry, const CCoinsViewCache &view)\n+{\n+    LOCK(cs);\n+\n+    const CTransaction& tx = entry.GetTx();\n+    std::vector<CSpentIndexKey> inserted;\n+\n+    uint256 txhash = tx.GetHash();\n+    for (unsigned int j = 0; j < tx.vin.size(); j++) {\n+        const CTxIn input = tx.vin[j];\n+        const Coin& coin = view.AccessCoin(input.prevout);\n+        const CTxOut &prevout = coin.out;\n+        uint160 addressHash;\n+        int addressType;\n+\n+        if (prevout.scriptPubKey.IsPayToScriptHash()) {\n+            addressHash = uint160(std::vector<unsigned char> (prevout.scriptPubKey.begin()+2, prevout.scriptPubKey.begin()+22));\n+            addressType = 2;\n+        } else if (prevout.scriptPubKey.IsPayToPublicKeyHash()) {\n+            addressHash = uint160(std::vector<unsigned char> (prevout.scriptPubKey.begin()+3, prevout.scriptPubKey.begin()+23));\n+            addressType = 1;\n+        } else {\n+            addressHash.SetNull();\n+            addressType = 0;\n+        }\n+\n+        CSpentIndexKey key = CSpentIndexKey(input.prevout.hash, input.prevout.n);\n+        CSpentIndexValue value = CSpentIndexValue(txhash, j, -1, prevout.nValue, addressType, addressHash);\n+\n+        mapSpent.insert(std::make_pair(key, value));\n+        inserted.push_back(key);\n+\n+    }\n+\n+    mapSpentInserted.insert(std::make_pair(txhash, inserted));\n+}\n+\n+bool CTxMemPool::getSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value)\n+{\n+    LOCK(cs);\n+    mapSpentIndex::iterator it;\n+\n+    it = mapSpent.find(key);\n+    if (it != mapSpent.end()) {\n+        value = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CTxMemPool::removeSpentIndex(const uint256 txhash)\n+{\n+    LOCK(cs);\n+    mapSpentIndexInserted::iterator it = mapSpentInserted.find(txhash);\n+\n+    if (it != mapSpentInserted.end()) {\n+        std::vector<CSpentIndexKey> keys = (*it).second;\n+        for (std::vector<CSpentIndexKey>::iterator mit = keys.begin(); mit != keys.end(); mit++) {\n+            mapSpent.erase(*mit);\n+        }\n+        mapSpentInserted.erase(it);\n+    }\n+\n+    return true;\n+}\n+// ->AddressIndex-l\n+\n+\n // Calculates descendants of entry that are not already in setDescendants, and adds to\n // setDescendants. Assumes entryit is already a tx in the mempool and setMemPoolChildren\n // is correct for tx and all descendants."
      },
      {
        "sha": "04a4cfe1c1f1dbaea82cb675d9ef6e9696401047",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -20,6 +20,10 @@\n #include <primitives/transaction.h>\n #include <sync.h>\n #include <random.h>\n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+#include \"addressindex.h\"\n+#include \"spentindex.h\"\n+// ->AddressIndex-l\n \n #include <boost/multi_index_container.hpp>\n #include <boost/multi_index/hashed_index.hpp>\n@@ -505,6 +509,20 @@ class CTxMemPool\n     typedef std::map<txiter, TxLinks, CompareIteratorByHash> txlinksMap;\n     txlinksMap mapLinks;\n \n+\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n+\ttypedef std::map<CMempoolAddressDeltaKey, CMempoolAddressDelta, CMempoolAddressDeltaKeyCompare> addressDeltaMap;\n+    addressDeltaMap mapAddress;\n+\n+    typedef std::map<uint256, std::vector<CMempoolAddressDeltaKey> > addressDeltaMapInserted;\n+    addressDeltaMapInserted mapAddressInserted;\n+\n+    typedef std::map<CSpentIndexKey, CSpentIndexValue, CSpentIndexKeyCompare> mapSpentIndex;\n+    mapSpentIndex mapSpent;\n+\n+    typedef std::map<uint256, std::vector<CSpentIndexKey> > mapSpentIndexInserted;\n+    mapSpentIndexInserted mapSpentInserted;\n+\t// ->AddressIndex-l\n+\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n@@ -537,6 +555,17 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool validFeeEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n+\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n+\tvoid addAddressIndex(const CTxMemPoolEntry &entry, const CCoinsViewCache &view);\n+    bool getAddressIndex(std::vector<std::pair<uint160, int> > &addresses,\n+                         std::vector<std::pair<CMempoolAddressDeltaKey, CMempoolAddressDelta> > &results);\n+    bool removeAddressIndex(const uint256 txhash);\n+\n+    void addSpentIndex(const CTxMemPoolEntry &entry, const CCoinsViewCache &view);\n+    bool getSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value);\n+    bool removeSpentIndex(const uint256 txhash);\n+\t// ->AddressIndex-l\n+\t\n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n     void removeConflicts(const CTransaction &tx);"
      },
      {
        "sha": "ee5c74fd578bb287862045d693bc6e58a8887c55",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 260,
        "deletions": 0,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -208,6 +208,11 @@ int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n bool fTxIndex = false;\n+/*add for address index*/\n+bool fAddressIndex = true;\n+bool fTimestampIndex = true;\n+bool fSpentIndex = true;\n+/*address index end*/\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n@@ -946,6 +951,21 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 plTxnReplaced->push_back(it->GetSharedTx());\n         }\n         pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+\t\t\n+// <-AddressIndex-l-2018/01/31-modified for address index func.\n+        // Store transaction in memory\n+        pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n+\n+        // Add memory address index\n+        if (fAddressIndex) {\n+            pool.addAddressIndex(entry, view);\n+        }\n+\n+        // Add memory spent index\n+        if (fSpentIndex) {\n+            pool.addSpentIndex(entry, view);\n+        }\n+// ->AddressIndex-l\n \n         // This transaction should only count for fee estimation if:\n         // - it isn't a BIP 125 replacement transaction (may not be widely supported)\n@@ -995,6 +1015,56 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee);\n }\n \n+// <-AddressIndex-l-2018/01/31-modified for address index func.\n+bool GetTimestampIndex(const unsigned int &high, const unsigned int &low, std::vector<uint256> &hashes)\n+{\n+    if (!fTimestampIndex)\n+        return error(\"Timestamp index not enabled\");\n+\n+    if (!pblocktree->ReadTimestampIndex(high, low, hashes))\n+        return error(\"Unable to get hashes for timestamps\");\n+\n+    return true;\n+}\n+\n+bool GetSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value)\n+{\n+    if (!fSpentIndex)\n+        return false;\n+\n+    if (mempool.getSpentIndex(key, value))\n+        return true;\n+\n+    if (!pblocktree->ReadSpentIndex(key, value))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool GetAddressIndex(uint160 addressHash, int type,\n+                     std::vector<std::pair<CAddressIndexKey, CAmount> > &addressIndex, int start, int end)\n+{\n+    if (!fAddressIndex)\n+        return error(\"address index not enabled\");\n+\n+    if (!pblocktree->ReadAddressIndex(addressHash, type, addressIndex, start, end))\n+        return error(\"unable to get txids for address\");\n+\n+    return true;\n+}\n+\n+bool GetAddressUnspent(uint160 addressHash, int type,\n+                       std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > &unspentOutputs)\n+{\n+    if (!fAddressIndex)\n+        return error(\"address index not enabled\");\n+\n+    if (!pblocktree->ReadAddressUnspentIndex(addressHash, type, unspentOutputs))\n+        return error(\"unable to get txids for address\");\n+\n+    return true;\n+}\n+// ->AddressIndex-l\n /**\n  * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n  * If blockIndex is provided, the transaction is fetched from the corresponding block.\n@@ -1561,11 +1631,49 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n         return DISCONNECT_FAILED;\n     }\n \n+\t// <-AddressIndex-l-2018/01/31-modified for address index func.\n+\tstd::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+\t// ->AddressIndex-l\n+\n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n         const CTransaction &tx = *(block.vtx[i]);\n         uint256 hash = tx.GetHash();\n         bool is_coinbase = tx.IsCoinBase();\n+\t\t// <-AddressIndex-l-2018/01/31-modified for address index func.\n+\t\tif (fAddressIndex) {\n+\n+            for (unsigned int k = tx.vout.size(); k-- > 0;) {\n+                const CTxOut &out = tx.vout[k];\n+\n+                if (out.scriptPubKey.IsPayToScriptHash()) {\n+                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+2, out.scriptPubKey.begin()+22);\n+\n+                    // undo receiving activity\n+                    addressIndex.push_back(std::make_pair(CAddressIndexKey(2, uint160(hashBytes), pindex->nHeight, i, hash, k, false), out.nValue));\n+\n+                    // undo unspent index\n+                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(2, uint160(hashBytes), hash, k), CAddressUnspentValue()));\n+\n+                } else if (out.scriptPubKey.IsPayToPublicKeyHash()) {\n+                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+3, out.scriptPubKey.begin()+23);\n+\n+                    // undo receiving activity\n+                    addressIndex.push_back(std::make_pair(CAddressIndexKey(1, uint160(hashBytes), pindex->nHeight, i, hash, k, false), out.nValue));\n+\n+                    // undo unspent index\n+                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(1, uint160(hashBytes), hash, k), CAddressUnspentValue()));\n+\n+                } else {\n+                    continue;\n+                }\n+\n+            }\n+\n+        }\n+\t\t// ->AddressIndex-l\n \n         // Check that all outputs are available and match the outputs in the block itself\n         // exactly.\n@@ -1589,9 +1697,48 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n             }\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n+\t\t\t\t// <-AddressIndex-l-2018/01/31-modified for address index func.\n+\t\t\t\tint undoHeight = txundo.vprevout[j].nHeight;\n+\t\t\t\t// ->AddressIndex-l\n                 int res = ApplyTxInUndo(std::move(txundo.vprevout[j]), view, out);\n                 if (res == DISCONNECT_FAILED) return DISCONNECT_FAILED;\n                 fClean = fClean && res != DISCONNECT_UNCLEAN;\n+\n+\t\t\t\t// <-AddressIndex-l-2018/01/31-modified for address index func.\n+\t\t\t\tconst CTxIn input = tx.vin[j];\n+\n+                if (fSpentIndex) {\n+                    // undo and delete the spent index\n+                    spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue()));\n+                }\n+\n+                if (fAddressIndex) {\n+                    const Coin &coin = view.AccessCoin(tx.vin[j].prevout);\n+                    const CTxOut &prevout = coin.out;\n+                    if (prevout.scriptPubKey.IsPayToScriptHash()) {\n+                        std::vector<unsigned char> hashBytes(prevout.scriptPubKey.begin()+2, prevout.scriptPubKey.begin()+22);\n+\n+                        // undo spending activity\n+                        addressIndex.push_back(std::make_pair(CAddressIndexKey(2, uint160(hashBytes), pindex->nHeight, i, hash, j, true), prevout.nValue * -1));\n+\n+                        // restore unspent index\n+                        addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(2, uint160(hashBytes), input.prevout.hash, input.prevout.n), CAddressUnspentValue(prevout.nValue, prevout.scriptPubKey, undoHeight)));\n+\n+\n+                    } else if (prevout.scriptPubKey.IsPayToPublicKeyHash()) {\n+                        std::vector<unsigned char> hashBytes(prevout.scriptPubKey.begin()+3, prevout.scriptPubKey.begin()+23);\n+\n+                        // undo spending activity\n+                        addressIndex.push_back(std::make_pair(CAddressIndexKey(1, uint160(hashBytes), pindex->nHeight, i, hash, j, true), prevout.nValue * -1));\n+\n+                        // restore unspent index\n+                        addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(1, uint160(hashBytes), input.prevout.hash, input.prevout.n), CAddressUnspentValue(prevout.nValue, prevout.scriptPubKey, undoHeight)));\n+\n+                    } else {\n+                        continue;\n+                    }\n+                }\n+\t\t\t\t// ->AddressIndex-l\n             }\n             // At this point, all of txundo.vprevout should have been moved out.\n         }\n@@ -1600,6 +1747,19 @@ DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockI\n     // move best block pointer to prevout block\n     view.SetBestBlock(pindex->pprev->GetBlockHash());\n \n+\t// <-AddressIndex-l-2018/01/31-modified for address index func.\n+\tif (fAddressIndex) {\n+        if (!pblocktree->EraseAddressIndex(addressIndex)) {\n+            AbortNode(\"error\", \"Failed to delete address index\");\n+            return DISCONNECT_FAILED;\n+        }\n+        if (!pblocktree->UpdateAddressUnspentIndex(addressUnspentIndex)) {\n+            AbortNode(\"error\", \"Failed to write address unspent index\");\n+            return DISCONNECT_FAILED;\n+        }\n+    }\n+\t// ->AddressIndex-l\n+\n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;\n }\n \n@@ -1897,9 +2057,19 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n+    \n+// <-AddressIndex-l-2018/01/30-modified for address index func.\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+// ->AddressIndex-l\n+\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = *(block.vtx[i]);\n+\t\t// <-AddressIndex-l-2018/01/30-modified for address index func.\n+\t\tconst uint256 txhash = tx.GetHash();\n+\t\t// ->AddressIndex-l\n \n         nInputs += tx.vin.size();\n \n@@ -1927,8 +2097,78 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n+\t\t\t\n+// <-AddressIndex-l-2018/01/30-modified for address index func.\n+            if (fAddressIndex || fSpentIndex)\n+            {\n+                for (size_t j = 0; j < tx.vin.size(); j++) {\n+                    const CTxIn input = tx.vin[j];\n+                    const Coin& coin = view.AccessCoin(tx.vin[j].prevout);\n+                    const CTxOut &prevout = coin.out;\n+                    uint160 hashBytes;\n+                    int addressType;\n+\n+                    if (prevout.scriptPubKey.IsPayToScriptHash()) {\n+                        hashBytes = uint160(std::vector <unsigned char>(prevout.scriptPubKey.begin()+2, prevout.scriptPubKey.begin()+22));\n+                        addressType = 2;\n+                    } else if (prevout.scriptPubKey.IsPayToPublicKeyHash()) {\n+                        hashBytes = uint160(std::vector <unsigned char>(prevout.scriptPubKey.begin()+3, prevout.scriptPubKey.begin()+23));\n+                        addressType = 1;\n+                    } else {\n+                        hashBytes.SetNull();\n+                        addressType = 0;\n+                    }\n+\n+                    if (fAddressIndex && addressType > 0) {\n+                        // record spending activity\n+                        addressIndex.push_back(std::make_pair(CAddressIndexKey(addressType, hashBytes, pindex->nHeight, i, txhash, j, true), prevout.nValue * -1));\n+\n+                        // remove address from unspent index\n+                        addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(addressType, hashBytes, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n+                    }\n+\n+                    if (fSpentIndex) {\n+                        // add the spent index to determine the txid and input that spent an output\n+                        // and to find the amount and address from an input\n+                        spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n+                    }\n+                }\n+\n+            }\n+// ->AddressIndex-l\n         }\n \n+// <-AddressIndex-l-2018/01/30-modified for address index func.\n+        if (fAddressIndex) {\n+            for (unsigned int k = 0; k < tx.vout.size(); k++) {\n+                const CTxOut &out = tx.vout[k];\n+\n+                if (out.scriptPubKey.IsPayToScriptHash()) {\n+                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+2, out.scriptPubKey.begin()+22);\n+\n+                    // record receiving activity\n+                    addressIndex.push_back(std::make_pair(CAddressIndexKey(2, uint160(hashBytes), pindex->nHeight, i, txhash, k, false), out.nValue));\n+\n+                    // record unspent output\n+                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(2, uint160(hashBytes), txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n+\n+                } else if (out.scriptPubKey.IsPayToPublicKeyHash()) {\n+                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+3, out.scriptPubKey.begin()+23);\n+\n+                    // record receiving activity\n+                    addressIndex.push_back(std::make_pair(CAddressIndexKey(1, uint160(hashBytes), pindex->nHeight, i, txhash, k, false), out.nValue));\n+\n+                    // record unspent output\n+                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(1, uint160(hashBytes), txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n+\n+                } else {\n+                    continue;\n+                }\n+\n+            }\n+        }\n+// ->AddressIndex-l\n+\n         // GetTransactionSigOpCost counts 3 types of sigops:\n         // * legacy (always)\n         // * p2sh (when P2SH enabled in flags and excludes coinbase)\n@@ -1985,6 +2225,26 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         return false;\n \n     assert(pindex->phashBlock);\n+// <-AddressIndex-l-2018/01/30-modified for address index func.\n+    if (fAddressIndex) {\n+        if (!pblocktree->WriteAddressIndex(addressIndex)) {\n+            return AbortNode(state, \"Failed to write address index\");\n+        }\n+\n+        if (!pblocktree->UpdateAddressUnspentIndex(addressUnspentIndex)) {\n+            return AbortNode(state, \"Failed to write address unspent index\");\n+        }\n+    }\n+\n+    if (fSpentIndex)\n+        if (!pblocktree->UpdateSpentIndex(spentIndex))\n+            return AbortNode(state, \"Failed to write transaction index\");\n+\n+    if (fTimestampIndex)\n+        if (!pblocktree->WriteTimestampIndex(CTimestampIndexKey(pindex->nTime, pindex->GetBlockHash())))\n+            return AbortNode(state, \"Failed to write timestamp index\");\n+// ->AddressIndex-l\n+\n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n "
      },
      {
        "sha": "50797b54c433721665860d5f3c0eda8b6680e352",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6240e2841a6f7737502727304bf75a6ffa78632/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6240e2841a6f7737502727304bf75a6ffa78632/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a6240e2841a6f7737502727304bf75a6ffa78632",
        "patch": "@@ -18,6 +18,7 @@\n #include <script/script_error.h>\n #include <sync.h>\n #include <versionbits.h>\n+#include \"spentindex.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -130,6 +131,11 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+// <-AddressIndex-l-2018/01/31-modified for address index func.\n+static const bool DEFAULT_ADDRESSINDEX = true;\n+static const bool DEFAULT_TIMESTAMPINDEX = true;\n+static const bool DEFAULT_SPENTINDEX = true;\n+// ->AddressIndex-l\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n@@ -392,6 +398,16 @@ class CScriptCheck\n /** Initializes the script-execution cache */\n void InitScriptExecutionCache();\n \n+// <-AddressIndex-l-2018/01/31-modified for address index func.\n+bool GetTimestampIndex(const unsigned int &high, const unsigned int &low, std::vector<uint256> &hashes);\n+bool GetSpentIndex(CSpentIndexKey &key, CSpentIndexValue &value);\n+bool GetAddressIndex(uint160 addressHash, int type,\n+                     std::vector<std::pair<CAddressIndexKey, CAmount> > &addressIndex,\n+                     int start = 0, int end = 0);\n+bool GetAddressUnspent(uint160 addressHash, int type,\n+                       std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > &unspentOutputs);\n+// ->AddressIndex-l\n+\n \n /** Functions for disk access for blocks */\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);"
      }
    ]
  },
  {
    "sha": "fb875846a3fdf3b062846d6756b421338b95357a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjg3NTg0NmEzZmRmM2IwNjI4NDZkNjc1NmI0MjEzMzhiOTUzNTdh",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T10:37:01Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T10:37:01Z"
      },
      "message": "1",
      "tree": {
        "sha": "ce6e1d2c42602a6ccbd7a4b81f0e15720f70950a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce6e1d2c42602a6ccbd7a4b81f0e15720f70950a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb875846a3fdf3b062846d6756b421338b95357a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb875846a3fdf3b062846d6756b421338b95357a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb875846a3fdf3b062846d6756b421338b95357a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb875846a3fdf3b062846d6756b421338b95357a/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6240e2841a6f7737502727304bf75a6ffa78632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6240e2841a6f7737502727304bf75a6ffa78632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6240e2841a6f7737502727304bf75a6ffa78632"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 79,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c8ff6693d1a59fb5cb8f3fe7f620ccd6922a28c0",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb875846a3fdf3b062846d6756b421338b95357a/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb875846a3fdf3b062846d6756b421338b95357a/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=fb875846a3fdf3b062846d6756b421338b95357a",
        "patch": "@@ -323,6 +323,50 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n }\n } // namespace\n // <-AddressIndex-l-2018/02/01-modified for address index func.\n+bool CBitcoinAddress::Set(const CKeyID& id)\n+{\n+    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CScriptID& id)\n+{\n+    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n+}\n+\n+bool CBitcoinAddress::IsValid() const\n+{\n+    return IsValid(Params());\n+}\n+\n+bool CBitcoinAddress::IsValid(const CChainParams& params) const\n+{\n+    bool fCorrectSize = vchData.size() == 20;\n+    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+    return fCorrectSize && fKnownVersion;\n+}\n+\n+CTxDestination CBitcoinAddress::Get() const\n+{\n+    if (!IsValid())\n+        return CNoDestination();\n+    uint160 id;\n+    memcpy(&id, &vchData[0], 20);\n+    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return CKeyID(id);\n+    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n+        return CScriptID(id);\n+    else\n+        return CNoDestination();\n+}\n+\n bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n {\n     if (!IsValid()) {\n@@ -339,6 +383,22 @@ bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n \n     return false;\n }\n+\n+bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n+{\n+    if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return false;\n+    uint160 id;\n+    memcpy(&id, &vchData[0], 20);\n+    keyID = CKeyID(id);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::IsScript() const\n+{\n+    return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+}\n+\n // ->AddressIndex-l\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)"
      },
      {
        "sha": "648b797d6c47b262bfe082cef0eb3971aa9c171d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb875846a3fdf3b062846d6756b421338b95357a/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb875846a3fdf3b062846d6756b421338b95357a/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=fb875846a3fdf3b062846d6756b421338b95357a",
        "patch": "@@ -100,26 +100,25 @@ class CBase58Data\n  * Script-hash-addresses have version 5 (or 196 testnet).\n  * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n  */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n-    bool Set(const CTxDestination &dest, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n-\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n-\t// ->AddressIndex-l\n-    bool GetKeyID(CKeyID &keyID) const;\n-    bool IsScript() const;\n-};\n+\tclass CBitcoinAddress : public CBase58Data {\n+\tpublic:\n+\t\tbool Set(const CKeyID &id);\n+\t\tbool Set(const CScriptID &id);\n+\t\tbool Set(const CTxDestination &dest);\n+\t\tbool IsValid() const;\n+\t\tbool IsValid(const CChainParams &params) const;\n+\t\n+\t\tCBitcoinAddress() {}\n+\t\tCBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n+\t\tCBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n+\t\tCBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n+\t\n+\t\tCTxDestination Get() const;\n+\t\tbool GetKeyID(CKeyID &keyID) const;\n+\t\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n+\t\tbool IsScript() const;\n+\t};\n+\n \n /**\n  * A base58-encoded secret key"
      }
    ]
  },
  {
    "sha": "8ec82bfe014e691d32f3b28763959629b284504f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWM4MmJmZTAxNGU2OTFkMzJmM2IyODc2Mzk1OTYyOWIyODQ1MDRm",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:07:05Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:07:05Z"
      },
      "message": "1",
      "tree": {
        "sha": "39b182d99142c39d5bc804ceb8c664a01b4e8add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b182d99142c39d5bc804ceb8c664a01b4e8add"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ec82bfe014e691d32f3b28763959629b284504f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ec82bfe014e691d32f3b28763959629b284504f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ec82bfe014e691d32f3b28763959629b284504f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ec82bfe014e691d32f3b28763959629b284504f/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb875846a3fdf3b062846d6756b421338b95357a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb875846a3fdf3b062846d6756b421338b95357a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb875846a3fdf3b062846d6756b421338b95357a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "170e8bb229709882c7e350bf6793a99b03045826",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ec82bfe014e691d32f3b28763959629b284504f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ec82bfe014e691d32f3b28763959629b284504f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8ec82bfe014e691d32f3b28763959629b284504f",
        "patch": "@@ -10,6 +10,8 @@\n #include <crypto/ripemd160.h>\n #include <init.h>\n #include <validation.h>\n+#include \"txmempool.h\"\n+\n #include <httpserver.h>\n #include <net.h>\n #include <netbase.h>"
      }
    ]
  },
  {
    "sha": "c7fed7d8dc29990867b628817c226daba052db74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2ZlZDdkOGRjMjk5OTA4NjdiNjI4ODE3YzIyNmRhYmEwNTJkYjc0",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:08:15Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:08:15Z"
      },
      "message": "1",
      "tree": {
        "sha": "cdbb3a6a5d43ed59e2ecb52f98200311ed62e8da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdbb3a6a5d43ed59e2ecb52f98200311ed62e8da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7fed7d8dc29990867b628817c226daba052db74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fed7d8dc29990867b628817c226daba052db74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7fed7d8dc29990867b628817c226daba052db74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fed7d8dc29990867b628817c226daba052db74/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ec82bfe014e691d32f3b28763959629b284504f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ec82bfe014e691d32f3b28763959629b284504f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ec82bfe014e691d32f3b28763959629b284504f"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "512e256c0ea60742017eda068725951fff512e4c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7fed7d8dc29990867b628817c226daba052db74/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7fed7d8dc29990867b628817c226daba052db74/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c7fed7d8dc29990867b628817c226daba052db74",
        "patch": "@@ -1075,11 +1075,11 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n \n   \t/* Address index --added by lbc @ 20180126*/\n-    { \"addressindex\",       \"getaddressmempool\",      &getaddressmempool,      true, {\"address\"} },\n-    { \"addressindex\",       \"getaddressutxos\",        &getaddressutxos,        true, {\"address\"} },\n-    { \"addressindex\",       \"getaddressdeltas\",       &getaddressdeltas,       true, {\"address\"} },\n-    { \"addressindex\",       \"getaddresstxids\",        &getaddresstxids,        true, {\"address\"} },\n-    { \"addressindex\",       \"getaddressbalance\",      &getaddressbalance,      true, {\"address\"} },\n+    { \"addressindex\",       \"getaddressmempool\",      &getaddressmempool,      {\"address\"} },\n+    { \"addressindex\",       \"getaddressutxos\",        &getaddressutxos,        {\"address\"} },\n+    { \"addressindex\",       \"getaddressdeltas\",       &getaddressdeltas,       {\"address\"} },\n+    { \"addressindex\",       \"getaddresstxids\",        &getaddresstxids,        {\"address\"} },\n+    { \"addressindex\",       \"getaddressbalance\",      &getaddressbalance,      {\"address\"} },\n     /*add end*/\n \n     /* Not shown in help */"
      }
    ]
  },
  {
    "sha": "c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2RiYzEzYjA2ZGU5MmYzODExMmYyZjBjZjU2ZmEzYzVlZTYxYmE2",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:13:38Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:13:38Z"
      },
      "message": "1",
      "tree": {
        "sha": "5e1c7232bceac8a81826b6d57c66830e11561e03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e1c7232bceac8a81826b6d57c66830e11561e03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7fed7d8dc29990867b628817c226daba052db74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7fed7d8dc29990867b628817c226daba052db74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7fed7d8dc29990867b628817c226daba052db74"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "573afe835207b1dd1cc3acc0cf98e09d760262d9",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
        "patch": "@@ -323,6 +323,23 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n }\n } // namespace\n // <-AddressIndex-l-2018/02/01-modified for address index func.\n+namespace\n+{\n+class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CBitcoinAddress* addr;\n+\n+public:\n+    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n+\n+    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n+    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n+    bool operator()(const CNoDestination& no) const { return false; }\n+};\n+\n+} // anon namespace\n+\n bool CBitcoinAddress::Set(const CKeyID& id)\n {\n     SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);"
      }
    ]
  },
  {
    "sha": "caab4663986fdb49489f85992e68b99cd5265f63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWFiNDY2Mzk4NmZkYjQ5NDg5Zjg1OTkyZTY4Yjk5Y2Q1MjY1ZjYz",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:34:01Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:34:01Z"
      },
      "message": "1",
      "tree": {
        "sha": "ffb808a4380d4ed28eceb25966673132f16241df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb808a4380d4ed28eceb25966673132f16241df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caab4663986fdb49489f85992e68b99cd5265f63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caab4663986fdb49489f85992e68b99cd5265f63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caab4663986fdb49489f85992e68b99cd5265f63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caab4663986fdb49489f85992e68b99cd5265f63/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7dbc13b06de92f38112f2f0cf56fa3c5ee61ba6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ba9fb56315ce111a4dc6fea1ab13a986e0bd5daa",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caab4663986fdb49489f85992e68b99cd5265f63/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caab4663986fdb49489f85992e68b99cd5265f63/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=caab4663986fdb49489f85992e68b99cd5265f63",
        "patch": "@@ -352,10 +352,10 @@ bool CBitcoinAddress::Set(const CScriptID& id)\n     return true;\n }\n \n-bool CBitcoinAddress::Set(const CTxDestination& dest)\n+/*bool CBitcoinAddress::Set(const CTxDestination& dest)\n {\n     return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}\n+}*/\n \n bool CBitcoinAddress::IsValid() const\n {"
      }
    ]
  },
  {
    "sha": "03d547295decb82f4bad2179d83064e443848120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2Q1NDcyOTVkZWNiODJmNGJhZDIxNzlkODMwNjRlNDQzODQ4MTIw",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:39:25Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T11:39:25Z"
      },
      "message": "1",
      "tree": {
        "sha": "b121a295a672f8c58917462abea0656cc8d68cce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b121a295a672f8c58917462abea0656cc8d68cce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03d547295decb82f4bad2179d83064e443848120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03d547295decb82f4bad2179d83064e443848120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03d547295decb82f4bad2179d83064e443848120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03d547295decb82f4bad2179d83064e443848120/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caab4663986fdb49489f85992e68b99cd5265f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caab4663986fdb49489f85992e68b99cd5265f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caab4663986fdb49489f85992e68b99cd5265f63"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "23c06cf044a876611c6494e24d81e1a6b8c66d48",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03d547295decb82f4bad2179d83064e443848120/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03d547295decb82f4bad2179d83064e443848120/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=03d547295decb82f4bad2179d83064e443848120",
        "patch": "@@ -104,7 +104,7 @@ class CBase58Data\n \tpublic:\n \t\tbool Set(const CKeyID &id);\n \t\tbool Set(const CScriptID &id);\n-\t\tbool Set(const CTxDestination &dest);\n+\t\t//bool Set(const CTxDestination &dest);\n \t\tbool IsValid() const;\n \t\tbool IsValid(const CChainParams &params) const;\n \t"
      }
    ]
  },
  {
    "sha": "6b50732d04496b6c8ccae4f782cb76fbc80c6802",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjUwNzMyZDA0NDk2YjZjOGNjYWU0Zjc4MmNiNzZmYmM4MGM2ODAy",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T12:57:04Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T12:57:04Z"
      },
      "message": "1",
      "tree": {
        "sha": "9bc44d22d9e9df7dcb99683ea6962f30e274bc29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bc44d22d9e9df7dcb99683ea6962f30e274bc29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b50732d04496b6c8ccae4f782cb76fbc80c6802",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b50732d04496b6c8ccae4f782cb76fbc80c6802",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b50732d04496b6c8ccae4f782cb76fbc80c6802",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b50732d04496b6c8ccae4f782cb76fbc80c6802/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03d547295decb82f4bad2179d83064e443848120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03d547295decb82f4bad2179d83064e443848120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03d547295decb82f4bad2179d83064e443848120"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 7,
      "deletions": 128
    },
    "files": [
      {
        "sha": "499afbe3822f610e6ad889c1989ea40bacf822df",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 95,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=6b50732d04496b6c8ccae4f782cb76fbc80c6802",
        "patch": "@@ -322,101 +322,6 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     return CNoDestination();\n }\n } // namespace\n-// <-AddressIndex-l-2018/02/01-modified for address index func.\n-namespace\n-{\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CBitcoinAddress* addr;\n-\n-public:\n-    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-};\n-\n-} // anon namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-/*bool CBitcoinAddress::Set(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-}*/\n-\n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n-\n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    return fCorrectSize && fKnownVersion;\n-}\n-\n-CTxDestination CBitcoinAddress::Get() const\n-{\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n-}\n-\n-bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n-{\n-    if (!IsValid()) {\n-        return false;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 1;\n-        return true;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 2;\n-        return true;\n-    }\n-\n-    return false;\n-}\n-\n-bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n-{\n-    if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return false;\n-    uint160 id;\n-    memcpy(&id, &vchData[0], 20);\n-    keyID = CKeyID(id);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::IsScript() const\n-{\n-    return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-}\n-\n-// ->AddressIndex-l\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {"
      },
      {
        "sha": "39eb4eacc2cb917e9b6fc03f0fb66980359b9201",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6b50732d04496b6c8ccae4f782cb76fbc80c6802",
        "patch": "@@ -94,32 +94,6 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-\tclass CBitcoinAddress : public CBase58Data {\n-\tpublic:\n-\t\tbool Set(const CKeyID &id);\n-\t\tbool Set(const CScriptID &id);\n-\t\t//bool Set(const CTxDestination &dest);\n-\t\tbool IsValid() const;\n-\t\tbool IsValid(const CChainParams &params) const;\n-\t\n-\t\tCBitcoinAddress() {}\n-\t\tCBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-\t\tCBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-\t\tCBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\t\n-\t\tCTxDestination Get() const;\n-\t\tbool GetKeyID(CKeyID &keyID) const;\n-\t\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n-\t\tbool IsScript() const;\n-\t};\n-\n-\n /**\n  * A base58-encoded secret key\n  */"
      },
      {
        "sha": "d505e5cc61c7fa9d8a6ae7939007019ceb2ca6c7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b50732d04496b6c8ccae4f782cb76fbc80c6802/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=6b50732d04496b6c8ccae4f782cb76fbc80c6802",
        "patch": "@@ -629,9 +629,9 @@ UniValue echo(const JSONRPCRequest& request)\n bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &address)\n {\n     if (type == 2) {\n-        address = CBitcoinAddress(CScriptID(hash)).ToString();\n+        //address = CBitcoinAddress(CScriptID(hash)).ToString();\n     } else if (type == 1) {\n-        address = CBitcoinAddress(CKeyID(hash)).ToString();\n+        //address = CBitcoinAddress(CKeyID(hash)).ToString();\n     } else {\n         return false;\n     }\n@@ -641,16 +641,16 @@ bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &addr\n bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint160, int> > &addresses)\n {\n     if (params[0].isStr()) {\n-        CBitcoinAddress address(params[0].get_str());\n+        /*CBitcoinAddress address(params[0].get_str());\n         uint160 hashBytes;\n         int type = 0;\n         if (!address.GetIndexKey(hashBytes, type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n         }\n-        addresses.push_back(std::make_pair(hashBytes, type));\n+        addresses.push_back(std::make_pair(hashBytes, type));*/\n     } else if (params[0].isObject()) {\n \n-        UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n+        /*UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n         if (!addressValues.isArray()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Addresses is expected to be an array\");\n         }\n@@ -666,9 +666,9 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n             }\n             addresses.push_back(std::make_pair(hashBytes, type));\n-        }\n+        }*/\n     } else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+        //throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "7bf39573efd1057ac1e1a856557b2ca2119da238",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmYzOTU3M2VmZDEwNTdhYzFlMWE4NTY1NTdiMmNhMjExOWRhMjM4",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T13:07:50Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T13:07:50Z"
      },
      "message": "1",
      "tree": {
        "sha": "e8f3e6e74571bf51a10c8988dafcf1a8a626ef9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8f3e6e74571bf51a10c8988dafcf1a8a626ef9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf39573efd1057ac1e1a856557b2ca2119da238",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf39573efd1057ac1e1a856557b2ca2119da238",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf39573efd1057ac1e1a856557b2ca2119da238",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf39573efd1057ac1e1a856557b2ca2119da238/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b50732d04496b6c8ccae4f782cb76fbc80c6802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b50732d04496b6c8ccae4f782cb76fbc80c6802",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b50732d04496b6c8ccae4f782cb76fbc80c6802"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fd1212b36305c68b706c56cff0a35ce909d44bee",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf39573efd1057ac1e1a856557b2ca2119da238/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf39573efd1057ac1e1a856557b2ca2119da238/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=7bf39573efd1057ac1e1a856557b2ca2119da238",
        "patch": "@@ -648,9 +648,18 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n         }\n         addresses.push_back(std::make_pair(hashBytes, type));*/\n+        uint160 hashBytes;\n+        int type = 0;\n+        CTxDestination dest = DecodeDestination(params[0].get_str());\n+\t\t//get hash&byte here\n+\t\taddresses.push_back(std::make_pair(hashBytes, type));\n+\t\tif(!IsValidDestination(dest))\n+\t\t{\n+\t\t\tthrow JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+\t\t}\n     } else if (params[0].isObject()) {\n \n-        /*UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n+        UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n         if (!addressValues.isArray()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Addresses is expected to be an array\");\n         }\n@@ -659,16 +668,20 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n \n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n \n-            CBitcoinAddress address(it->get_str());\n+            /*CBitcoinAddress address(it->get_str());\n             uint160 hashBytes;\n             int type = 0;\n             if (!address.GetIndexKey(hashBytes, type)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n+            }*/\n+            CTxDestination dest = DecodeDestination(it->get_str());\n+            uint160 hashBytes;\n+            int type = 0;\n+\t\t\t//get hash&byte here\n             addresses.push_back(std::make_pair(hashBytes, type));\n-        }*/\n+        }\n     } else {\n-        //throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "bc75f71b26d55bb5d406831d9c47b3b7fb712438",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzc1ZjcxYjI2ZDU1YmI1ZDQwNjgzMWQ5YzQ3YjNiN2ZiNzEyNDM4",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T13:13:29Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-08T13:13:29Z"
      },
      "message": "1",
      "tree": {
        "sha": "9d86cc1e49b1738ce76c122c55b585ee79ee1f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d86cc1e49b1738ce76c122c55b585ee79ee1f4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc75f71b26d55bb5d406831d9c47b3b7fb712438",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc75f71b26d55bb5d406831d9c47b3b7fb712438",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc75f71b26d55bb5d406831d9c47b3b7fb712438",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc75f71b26d55bb5d406831d9c47b3b7fb712438/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf39573efd1057ac1e1a856557b2ca2119da238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf39573efd1057ac1e1a856557b2ca2119da238",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf39573efd1057ac1e1a856557b2ca2119da238"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 0,
      "deletions": 14
    },
    "files": [
      {
        "sha": "24661f7461b54794d1b4a47f472d196e7ae8b71a",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc75f71b26d55bb5d406831d9c47b3b7fb712438/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc75f71b26d55bb5d406831d9c47b3b7fb712438/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=bc75f71b26d55bb5d406831d9c47b3b7fb712438",
        "patch": "@@ -641,13 +641,6 @@ bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &addr\n bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint160, int> > &addresses)\n {\n     if (params[0].isStr()) {\n-        /*CBitcoinAddress address(params[0].get_str());\n-        uint160 hashBytes;\n-        int type = 0;\n-        if (!address.GetIndexKey(hashBytes, type)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-        }\n-        addresses.push_back(std::make_pair(hashBytes, type));*/\n         uint160 hashBytes;\n         int type = 0;\n         CTxDestination dest = DecodeDestination(params[0].get_str());\n@@ -667,13 +660,6 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n         std::vector<UniValue> values = addressValues.getValues();\n \n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n-\n-            /*CBitcoinAddress address(it->get_str());\n-            uint160 hashBytes;\n-            int type = 0;\n-            if (!address.GetIndexKey(hashBytes, type)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }*/\n             CTxDestination dest = DecodeDestination(it->get_str());\n             uint160 hashBytes;\n             int type = 0;"
      }
    ]
  },
  {
    "sha": "d71289058b646b5f1e3bfb8863238b9e4b876565",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzEyODkwNThiNjQ2YjVmMWUzYmZiODg2MzIzOGI5ZTRiODc2NTY1",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T01:51:59Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T01:51:59Z"
      },
      "message": "1",
      "tree": {
        "sha": "d682281dd8b67e8a3fb083ca1ea1d95e5a6f6293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d682281dd8b67e8a3fb083ca1ea1d95e5a6f6293"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d71289058b646b5f1e3bfb8863238b9e4b876565",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71289058b646b5f1e3bfb8863238b9e4b876565",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d71289058b646b5f1e3bfb8863238b9e4b876565",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71289058b646b5f1e3bfb8863238b9e4b876565/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc75f71b26d55bb5d406831d9c47b3b7fb712438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc75f71b26d55bb5d406831d9c47b3b7fb712438",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc75f71b26d55bb5d406831d9c47b3b7fb712438"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2affc9576412e023b0e20c3c354af1efe9c85ba5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d71289058b646b5f1e3bfb8863238b9e4b876565/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d71289058b646b5f1e3bfb8863238b9e4b876565/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d71289058b646b5f1e3bfb8863238b9e4b876565",
        "patch": "@@ -645,6 +645,10 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n         int type = 0;\n         CTxDestination dest = DecodeDestination(params[0].get_str());\n \t\t//get hash&byte here\n+\t\tif (auto id = boost::get<CKeyID>(&dest)) {\n+        \thashBytes = *id;\n+\t\t\ttype = 1;\n+    \t}\n \t\taddresses.push_back(std::make_pair(hashBytes, type));\n \t\tif(!IsValidDestination(dest))\n \t\t{"
      }
    ]
  },
  {
    "sha": "00c232679d4968071a90c1fe7dcfe6364b7486f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGMyMzI2NzlkNDk2ODA3MWE5MGMxZmU3ZGNmZTYzNjRiNzQ4NmY4",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T02:25:28Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T02:25:28Z"
      },
      "message": "1",
      "tree": {
        "sha": "5744aa88f8c109bec6346467aa07ef24f581e53f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5744aa88f8c109bec6346467aa07ef24f581e53f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00c232679d4968071a90c1fe7dcfe6364b7486f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c232679d4968071a90c1fe7dcfe6364b7486f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00c232679d4968071a90c1fe7dcfe6364b7486f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c232679d4968071a90c1fe7dcfe6364b7486f8/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d71289058b646b5f1e3bfb8863238b9e4b876565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71289058b646b5f1e3bfb8863238b9e4b876565",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d71289058b646b5f1e3bfb8863238b9e4b876565"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 62,
      "deletions": 12
    },
    "files": [
      {
        "sha": "88695de3ef1e9de325a201be0618cdbf143d390f",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "patch": "@@ -213,6 +213,39 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n     return 0;\n }\n \n+bool CBase58Data::IsValid() const\n+{\n+    return IsValid(Params());\n+}\n+\n+bool CBase58Data::IsValid(const CChainParams& params) const\n+{\n+    bool fCorrectSize = vchData.size() == 20;\n+    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n+                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS2);\n+    return fCorrectSize && fKnownVersion;\n+}\n+\n+bool CBase58Data::GetIndexKey(uint160& hashBytes, int& type) const\n+{\n+    if (!IsValid()) {\n+        return false;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 1;\n+        return true;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 2;\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+\n+\n namespace\n {\n class DestinationEncoder : public boost::static_visitor<std::string>"
      },
      {
        "sha": "8963422ebbaa62e05c03d30448237c5c0aa2e627",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "patch": "@@ -87,6 +87,10 @@ class CBase58Data\n     std::string ToString() const;\n     int CompareTo(const CBase58Data& b58) const;\n \n+\tbool IsValid() const;\n+    bool IsValid(const CChainParams &params) const;\n+\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n+\n     bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n     bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n     bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }"
      },
      {
        "sha": "199b3db6c9d25936e248803afd0f5aa6cbc7d24e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "patch": "@@ -47,6 +47,7 @@ class CChainParams\n         SECRET_KEY,\n         EXT_PUBLIC_KEY,\n         EXT_SECRET_KEY,\n+        SCRIPT_ADDRESS2,\n \n         MAX_BASE58_TYPES\n     };"
      },
      {
        "sha": "685c1f19605be8a2cdd48b512b1ddc77f04b554e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00c232679d4968071a90c1fe7dcfe6364b7486f8/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "patch": "@@ -630,8 +630,15 @@ bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &addr\n {\n     if (type == 2) {\n         //address = CBitcoinAddress(CScriptID(hash)).ToString();\n+        CBase58Data addr;\n+\t\tassert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n+\t\taddr.SetData(Params().Base58Prefix(type), &CScriptID(hash), 20);\n+\t\taddress = addr.ToString();\n     } else if (type == 1) {\n         //address = CBitcoinAddress(CKeyID(hash)).ToString();\n+        CBase58Data addr;\n+\t\taddr.SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &CKeyID(hash), 20);\n+        address = addr.ToString();\n     } else {\n         return false;\n     }\n@@ -640,20 +647,21 @@ bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &addr\n \n bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint160, int> > &addresses)\n {\n-    if (params[0].isStr()) {\n-        uint160 hashBytes;\n-        int type = 0;\n-        CTxDestination dest = DecodeDestination(params[0].get_str());\n+        /*CTxDestination dest = DecodeDestination(params[0].get_str());\n \t\t//get hash&byte here\n \t\tif (auto id = boost::get<CKeyID>(&dest)) {\n         \thashBytes = *id;\n \t\t\ttype = 1;\n-    \t}\n-\t\taddresses.push_back(std::make_pair(hashBytes, type));\n-\t\tif(!IsValidDestination(dest))\n-\t\t{\n-\t\t\tthrow JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-\t\t}\n+    \t}*/\n+\tif (params[0].isStr()) {\n+        CBase58Data address;\n+\t\taddress.SetString(params[0].get_str());\n+        uint160 hashBytes;\n+        int type = 0;\n+        if (!address.GetIndexKey(hashBytes, type)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+        }\n+        addresses.push_back(std::make_pair(hashBytes, type));\n     } else if (params[0].isObject()) {\n \n         UniValue addressValues = find_value(params[0].get_obj(), \"addresses\");\n@@ -664,10 +672,14 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n         std::vector<UniValue> values = addressValues.getValues();\n \n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n-            CTxDestination dest = DecodeDestination(it->get_str());\n+\n+            CBase58Data address;\n+\t\t\taddress.SetString(params[0].get_str());\n             uint160 hashBytes;\n             int type = 0;\n-\t\t\t//get hash&byte here\n+            if (!address.GetIndexKey(hashBytes, type)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             addresses.push_back(std::make_pair(hashBytes, type));\n         }\n     } else {"
      }
    ]
  },
  {
    "sha": "fd02ac839f34c019efdf0c4d657681d05246d7e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDAyYWM4MzlmMzRjMDE5ZWZkZjBjNGQ2NTc2ODFkMDUyNDZkN2Ux",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T02:57:32Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T02:57:32Z"
      },
      "message": "1",
      "tree": {
        "sha": "e27d53e48f9aa2011642daab8410ddc79598b0e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e27d53e48f9aa2011642daab8410ddc79598b0e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd02ac839f34c019efdf0c4d657681d05246d7e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd02ac839f34c019efdf0c4d657681d05246d7e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd02ac839f34c019efdf0c4d657681d05246d7e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd02ac839f34c019efdf0c4d657681d05246d7e1/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c232679d4968071a90c1fe7dcfe6364b7486f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00c232679d4968071a90c1fe7dcfe6364b7486f8"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 140,
      "deletions": 50
    },
    "files": [
      {
        "sha": "3466de16117f12f4994e57c14e0cf720607612e3",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 108,
        "deletions": 33,
        "changes": 141,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=fd02ac839f34c019efdf0c4d657681d05246d7e1",
        "patch": "@@ -213,39 +213,6 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const\n     return 0;\n }\n \n-bool CBase58Data::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n-\n-bool CBase58Data::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS2);\n-    return fCorrectSize && fKnownVersion;\n-}\n-\n-bool CBase58Data::GetIndexKey(uint160& hashBytes, int& type) const\n-{\n-    if (!IsValid()) {\n-        return false;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 1;\n-        return true;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 2;\n-        return true;\n-    }\n-\n-    return false;\n-}\n-\n-\n-\n namespace\n {\n class DestinationEncoder : public boost::static_visitor<std::string>\n@@ -356,6 +323,114 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n }\n } // namespace\n \n+namespace\n+{\n+class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CBitcoinAddress* addr;\n+    CChainParams::Base58Type script_type_;\n+\n+public:\n+    CBitcoinAddressVisitor(CBitcoinAddress* addrIn, CChainParams::Base58Type script_type) \n+      : addr(addrIn), script_type_(script_type) \n+    {\n+        assert(script_type == CChainParams::SCRIPT_ADDRESS || \n+               script_type == CChainParams::SCRIPT_ADDRESS2);\n+    }\n+\n+    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n+    bool operator()(const CScriptID& id) const { return addr->Set(id, script_type_); }\n+    bool operator()(const CNoDestination& no) const { return false; }\n+};\n+\n+} // namespace\n+\n+bool CBitcoinAddress::Set(const CKeyID& id)\n+{\n+    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CScriptID& id, CChainParams::Base58Type type)\n+{\n+    assert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n+    SetData(Params().Base58Prefix(type), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CTxDestination& dest, CChainParams::Base58Type type)\n+{\n+    assert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n+    return boost::apply_visitor(CBitcoinAddressVisitor(this, type), dest);\n+}\n+\n+bool CBitcoinAddress::IsValid() const\n+{\n+    return IsValid(Params());\n+}\n+\n+bool CBitcoinAddress::IsValid(const CChainParams& params) const\n+{\n+    bool fCorrectSize = vchData.size() == 20;\n+    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n+                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS2);\n+    return fCorrectSize && fKnownVersion;\n+}\n+\n+CTxDestination CBitcoinAddress::Get() const\n+{\n+    if (!IsValid())\n+        return CNoDestination();\n+    uint160 id;\n+    memcpy(&id, vchData.data(), 20);\n+    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return CKeyID(id);\n+    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n+             vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS2))\n+        return CScriptID(id);\n+    else\n+        return CNoDestination();\n+}\n+\n+// <-AddressIndex-l-2018/02/01-modified for address index func.\n+bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n+{\n+    if (!IsValid()) {\n+        return false;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 1;\n+        return true;\n+    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n+        memcpy(&hashBytes, &vchData[0], 20);\n+        type = 2;\n+        return true;\n+    }\n+\n+    return false;\n+}\n+// ->AddressIndex-l\n+\n+\n+bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n+{\n+    if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return false;\n+    uint160 id;\n+    memcpy(&id, vchData.data(), 20);\n+    keyID = CKeyID(id);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::IsScript() const\n+{\n+    return IsValid() && (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n+                         vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS2));\n+}\n+\n+\n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {\n     assert(vchSecret.IsValid());"
      },
      {
        "sha": "97d37a4da7599c2abe729a18dd4348d2c7914651",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=fd02ac839f34c019efdf0c4d657681d05246d7e1",
        "patch": "@@ -87,17 +87,41 @@ class CBase58Data\n     std::string ToString() const;\n     int CompareTo(const CBase58Data& b58) const;\n \n-\tbool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n-\n     bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n     bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n     bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n     bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n+/** base58-encoded Bitcoin addresses.\n+ * Public-key-hash-addresses have version 0 (or 111 testnet).\n+ * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+ * Script-hash-addresses have version 5 (or 196 testnet).\n+ * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+ */\n+class CBitcoinAddress : public CBase58Data {\n+public:\n+    bool Set(const CKeyID &id);\n+    bool Set(const CScriptID &id, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n+    bool Set(const CTxDestination &dest, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n+    bool IsValid() const;\n+    bool IsValid(const CChainParams &params) const;\n+\n+    CBitcoinAddress() {}\n+    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n+    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n+    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n+\n+    CTxDestination Get() const;\n+\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n+\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n+\t// ->AddressIndex-l\n+    bool GetKeyID(CKeyID &keyID) const;\n+    bool IsScript() const;\n+};\n+\n+\n /**\n  * A base58-encoded secret key\n  */"
      },
      {
        "sha": "0a4ee3d282b1cf036312d71fc7c5bbc2acf41e8d",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd02ac839f34c019efdf0c4d657681d05246d7e1/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fd02ac839f34c019efdf0c4d657681d05246d7e1",
        "patch": "@@ -629,16 +629,9 @@ UniValue echo(const JSONRPCRequest& request)\n bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &address)\n {\n     if (type == 2) {\n-        //address = CBitcoinAddress(CScriptID(hash)).ToString();\n-        CBase58Data addr;\n-\t\tassert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n-\t\taddr.SetData(Params().Base58Prefix(type), &CScriptID(hash), 20);\n-\t\taddress = addr.ToString();\n+        address = CBitcoinAddress(CScriptID(hash)).ToString();\n     } else if (type == 1) {\n-        //address = CBitcoinAddress(CKeyID(hash)).ToString();\n-        CBase58Data addr;\n-\t\taddr.SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &CKeyID(hash), 20);\n-        address = addr.ToString();\n+        address = CBitcoinAddress(CKeyID(hash)).ToString();\n     } else {\n         return false;\n     }\n@@ -654,8 +647,7 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n \t\t\ttype = 1;\n     \t}*/\n \tif (params[0].isStr()) {\n-        CBase58Data address;\n-\t\taddress.SetString(params[0].get_str());\n+        CBitcoinAddress address(params[0].get_str());\n         uint160 hashBytes;\n         int type = 0;\n         if (!address.GetIndexKey(hashBytes, type)) {\n@@ -673,8 +665,7 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n \n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n \n-            CBase58Data address;\n-\t\t\taddress.SetString(params[0].get_str());\n+            CBitcoinAddress address(params[0].get_str());\n             uint160 hashBytes;\n             int type = 0;\n             if (!address.GetIndexKey(hashBytes, type)) {"
      }
    ]
  },
  {
    "sha": "ec7a34f269b47cffe21258b24f8172b9c88117e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzdhMzRmMjY5YjQ3Y2ZmZTIxMjU4YjI0ZjgxNzJiOWM4ODExN2Uw",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T03:13:04Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T03:13:04Z"
      },
      "message": "1",
      "tree": {
        "sha": "b5826cbd8d9bc37b3e0890b0f673f6d23da41b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5826cbd8d9bc37b3e0890b0f673f6d23da41b05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec7a34f269b47cffe21258b24f8172b9c88117e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7a34f269b47cffe21258b24f8172b9c88117e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7a34f269b47cffe21258b24f8172b9c88117e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7a34f269b47cffe21258b24f8172b9c88117e0/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd02ac839f34c019efdf0c4d657681d05246d7e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd02ac839f34c019efdf0c4d657681d05246d7e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd02ac839f34c019efdf0c4d657681d05246d7e1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f19bc899b7b08702d74c141b0ec280d3efa1b83a",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec7a34f269b47cffe21258b24f8172b9c88117e0/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec7a34f269b47cffe21258b24f8172b9c88117e0/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=ec7a34f269b47cffe21258b24f8172b9c88117e0",
        "patch": "@@ -342,6 +342,8 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n     bool operator()(const CKeyID& id) const { return addr->Set(id); }\n     bool operator()(const CScriptID& id) const { return addr->Set(id, script_type_); }\n     bool operator()(const CNoDestination& no) const { return false; }\n+\tbool operator()(const WitnessV0ScriptHash& no) const { return false; }\n+\tbool operator()(const WitnessUnknown& no) const { return false; }\n };\n \n } // namespace"
      }
    ]
  },
  {
    "sha": "c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGFjOWMxYWY4NTI4OGMyYjAzNTQ5Y2E4YTVlNmQ1YjlkMWUwZjQx",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T03:13:57Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T03:13:57Z"
      },
      "message": "1",
      "tree": {
        "sha": "22cff769d473a0a646e45a45ea5a3cdc09206f21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22cff769d473a0a646e45a45ea5a3cdc09206f21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec7a34f269b47cffe21258b24f8172b9c88117e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec7a34f269b47cffe21258b24f8172b9c88117e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec7a34f269b47cffe21258b24f8172b9c88117e0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8e16f4aff741ee0951fd87d21191b084ac2a2685",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
        "patch": "@@ -343,6 +343,7 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n     bool operator()(const CScriptID& id) const { return addr->Set(id, script_type_); }\n     bool operator()(const CNoDestination& no) const { return false; }\n \tbool operator()(const WitnessV0ScriptHash& no) const { return false; }\n+\tbool operator()(const WitnessV0KeyHash& no) const { return false; }\n \tbool operator()(const WitnessUnknown& no) const { return false; }\n };\n "
      }
    ]
  },
  {
    "sha": "06b78e2448bcf2f086844527b01de6694258e65d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmI3OGUyNDQ4YmNmMmYwODY4NDQ1MjdiMDFkZTY2OTQyNThlNjVk",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T05:55:46Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T05:55:46Z"
      },
      "message": "1",
      "tree": {
        "sha": "f93f7bbbf331f83a31e0a2d2af0b89d33554ca27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f93f7bbbf331f83a31e0a2d2af0b89d33554ca27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06b78e2448bcf2f086844527b01de6694258e65d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b78e2448bcf2f086844527b01de6694258e65d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06b78e2448bcf2f086844527b01de6694258e65d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b78e2448bcf2f086844527b01de6694258e65d/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0ac9c1af85288c2b03549ca8a5e6d5b9d1e0f41"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 40,
      "deletions": 143
    },
    "files": [
      {
        "sha": "d0358a23066da39aa6562b4c24a02fb71aa5d6fb",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 107,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b78e2448bcf2f086844527b01de6694258e65d/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b78e2448bcf2f086844527b01de6694258e65d/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=06b78e2448bcf2f086844527b01de6694258e65d",
        "patch": "@@ -321,118 +321,36 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     }\n     return CNoDestination();\n }\n-} // namespace\n \n-namespace\n-{\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+uint160 DecodeAddrDest(const std::string& str, const CChainParams& params, int & type)\n {\n-private:\n-    CBitcoinAddress* addr;\n-    CChainParams::Base58Type script_type_;\n-\n-public:\n-    CBitcoinAddressVisitor(CBitcoinAddress* addrIn, CChainParams::Base58Type script_type) \n-      : addr(addrIn), script_type_(script_type) \n-    {\n-        assert(script_type == CChainParams::SCRIPT_ADDRESS || \n-               script_type == CChainParams::SCRIPT_ADDRESS2);\n-    }\n-\n-    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n-    bool operator()(const CScriptID& id) const { return addr->Set(id, script_type_); }\n-    bool operator()(const CNoDestination& no) const { return false; }\n-\tbool operator()(const WitnessV0ScriptHash& no) const { return false; }\n-\tbool operator()(const WitnessV0KeyHash& no) const { return false; }\n-\tbool operator()(const WitnessUnknown& no) const { return false; }\n-};\n-\n-} // namespace\n-\n-bool CBitcoinAddress::Set(const CKeyID& id)\n-{\n-    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CScriptID& id, CChainParams::Base58Type type)\n-{\n-    assert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n-    SetData(Params().Base58Prefix(type), &id, 20);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::Set(const CTxDestination& dest, CChainParams::Base58Type type)\n-{\n-    assert(type == CChainParams::SCRIPT_ADDRESS || type == CChainParams::SCRIPT_ADDRESS2);\n-    return boost::apply_visitor(CBitcoinAddressVisitor(this, type), dest);\n-}\n-\n-bool CBitcoinAddress::IsValid() const\n-{\n-    return IsValid(Params());\n-}\n-\n-bool CBitcoinAddress::IsValid(const CChainParams& params) const\n-{\n-    bool fCorrectSize = vchData.size() == 20;\n-    bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n-                         vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS2);\n-    return fCorrectSize && fKnownVersion;\n-}\n-\n-CTxDestination CBitcoinAddress::Get() const\n-{\n-    if (!IsValid())\n-        return CNoDestination();\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return CKeyID(id);\n-    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n-             vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS2))\n-        return CScriptID(id);\n-    else\n-        return CNoDestination();\n-}\n-\n-// <-AddressIndex-l-2018/02/01-modified for address index func.\n-bool CBitcoinAddress::GetIndexKey(uint160& hashBytes, int& type) const\n-{\n-    if (!IsValid()) {\n-        return false;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 1;\n-        return true;\n-    } else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS)) {\n-        memcpy(&hashBytes, &vchData[0], 20);\n-        type = 2;\n-        return true;\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+\ttype = 0;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+\t\t\ttype = 1;\n+            return hash;\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            //dest = CScriptID(hash);\n+\t\t\ttype = 2;\n+\t\t\treturn hash;\n+        }\n     }\n-\n-    return false;\n-}\n-// ->AddressIndex-l\n-\n-\n-bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n-{\n-    if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-        return false;\n-    uint160 id;\n-    memcpy(&id, vchData.data(), 20);\n-    keyID = CKeyID(id);\n-    return true;\n-}\n-\n-bool CBitcoinAddress::IsScript() const\n-{\n-    return IsValid() && (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS) ||\n-                         vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS2));\n+\treturn hash;\n }\n \n+} // namespace\n \n void CBitcoinSecret::SetKey(const CKey& vchSecret)\n {\n@@ -477,6 +395,11 @@ CTxDestination DecodeDestination(const std::string& str)\n     return DecodeDestination(str, Params());\n }\n \n+uint160 DecodeAddrDest(const std::string& str, int & type)\n+{\n+\treturn DecodeAddrDest(str, Params(), type);\n+}\n+\n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n     return IsValidDestination(DecodeDestination(str, params));"
      },
      {
        "sha": "dce297e87e3469029b42ce43ddac0269aa806814",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b78e2448bcf2f086844527b01de6694258e65d/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b78e2448bcf2f086844527b01de6694258e65d/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=06b78e2448bcf2f086844527b01de6694258e65d",
        "patch": "@@ -94,34 +94,6 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-/** base58-encoded Bitcoin addresses.\n- * Public-key-hash-addresses have version 0 (or 111 testnet).\n- * The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n- * Script-hash-addresses have version 5 (or 196 testnet).\n- * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n- */\n-class CBitcoinAddress : public CBase58Data {\n-public:\n-    bool Set(const CKeyID &id);\n-    bool Set(const CScriptID &id, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n-    bool Set(const CTxDestination &dest, CChainParams::Base58Type type=CChainParams::SCRIPT_ADDRESS2);\n-    bool IsValid() const;\n-    bool IsValid(const CChainParams &params) const;\n-\n-    CBitcoinAddress() {}\n-    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n-    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n-    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n-\n-    CTxDestination Get() const;\n-\t// <-AddressIndex-l-2018/02/01-modified for address index func.\n-\tbool GetIndexKey(uint160& hashBytes, int& type) const;\n-\t// ->AddressIndex-l\n-    bool GetKeyID(CKeyID &keyID) const;\n-    bool IsScript() const;\n-};\n-\n-\n /**\n  * A base58-encoded secret key\n  */\n@@ -172,6 +144,7 @@ typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBL\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);\n+uint160 DecodeAddrDest(const std::string& str, int & type);\n bool IsValidDestinationString(const std::string& str);\n bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n "
      },
      {
        "sha": "d1f758acbb41e4d4a093c3936cb565cf2356e270",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06b78e2448bcf2f086844527b01de6694258e65d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06b78e2448bcf2f086844527b01de6694258e65d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=06b78e2448bcf2f086844527b01de6694258e65d",
        "patch": "@@ -629,9 +629,9 @@ UniValue echo(const JSONRPCRequest& request)\n bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &address)\n {\n     if (type == 2) {\n-        address = CBitcoinAddress(CScriptID(hash)).ToString();\n+\t\taddress = EncodeDestination(CScriptID(hash));\n     } else if (type == 1) {\n-        address = CBitcoinAddress(CKeyID(hash)).ToString();\n+\t\taddress = EncodeDestination(CKeyID(hash));\n     } else {\n         return false;\n     }\n@@ -647,10 +647,11 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n \t\t\ttype = 1;\n     \t}*/\n \tif (params[0].isStr()) {\n-        CBitcoinAddress address(params[0].get_str());\n-        uint160 hashBytes;\n-        int type = 0;\n-        if (!address.GetIndexKey(hashBytes, type)) {\n+        /*CTxDestination dest = DecodeDestination(params[0].get_str())*/;\n+\t\tint type = 0;\n+        uint160 hashBytes = DecodeAddrDest(params[0].get_str(), type);\n+\t\t//DecodeAddrDest(params[0].get_str(), dest, type);\n+        if (!IsValidDestination(CTxDestination(hashBytes))) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n         }\n         addresses.push_back(std::make_pair(hashBytes, type));\n@@ -665,10 +666,10 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n \n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n \n-            CBitcoinAddress address(params[0].get_str());\n             uint160 hashBytes;\n             int type = 0;\n-            if (!address.GetIndexKey(hashBytes, type)) {\n+\t\t\thashBytes = DecodeAddrDest(params[0].get_str(), type);\n+            if (!IsValidDestination(CTxDestination(hashBytes))) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n             }\n             addresses.push_back(std::make_pair(hashBytes, type));"
      }
    ]
  },
  {
    "sha": "47e4638a405ab56951ba4756c7f81c41ec0f244c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2U0NjM4YTQwNWFiNTY5NTFiYTQ3NTZjN2Y4MWM0MWVjMGYyNDRj",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:09:34Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:09:34Z"
      },
      "message": "1",
      "tree": {
        "sha": "5c685414378d435cc18963fc93171489e8696904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c685414378d435cc18963fc93171489e8696904"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47e4638a405ab56951ba4756c7f81c41ec0f244c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47e4638a405ab56951ba4756c7f81c41ec0f244c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47e4638a405ab56951ba4756c7f81c41ec0f244c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47e4638a405ab56951ba4756c7f81c41ec0f244c/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06b78e2448bcf2f086844527b01de6694258e65d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06b78e2448bcf2f086844527b01de6694258e65d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06b78e2448bcf2f086844527b01de6694258e65d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "2acc0171f3c2adc523af5d90be921f5db57ea9d9",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=47e4638a405ab56951ba4756c7f81c41ec0f244c",
        "patch": "@@ -322,10 +322,10 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     return CNoDestination();\n }\n \n-uint160 DecodeAddrDest(const std::string& str, const CChainParams& params, int & type)\n+bool DecodeAddrDest(const std::string& str, const CChainParams& params, uint160& hash, int & type)\n {\n     std::vector<unsigned char> data;\n-    uint160 hash;\n+    //uint160 hash;\n \ttype = 0;\n     if (DecodeBase58Check(str, data)) {\n         // base58-encoded Bitcoin addresses.\n@@ -335,7 +335,7 @@ uint160 DecodeAddrDest(const std::string& str, const CChainParams& params, int &\n         if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n             std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n \t\t\ttype = 1;\n-            return hash;\n+            return true;\n         }\n         // Script-hash-addresses have version 5 (or 196 testnet).\n         // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n@@ -344,10 +344,10 @@ uint160 DecodeAddrDest(const std::string& str, const CChainParams& params, int &\n             std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n             //dest = CScriptID(hash);\n \t\t\ttype = 2;\n-\t\t\treturn hash;\n+\t\t\treturn true;\n         }\n     }\n-\treturn hash;\n+\treturn false;\n }\n \n } // namespace\n@@ -395,9 +395,9 @@ CTxDestination DecodeDestination(const std::string& str)\n     return DecodeDestination(str, Params());\n }\n \n-uint160 DecodeAddrDest(const std::string& str, int & type)\n+bool DecodeAddrDest(const std::string& str, uint160& hash, int & type)\n {\n-\treturn DecodeAddrDest(str, Params(), type);\n+\treturn DecodeAddrDest(str, Params(), hash, type);\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)"
      },
      {
        "sha": "b95eac7575ee55e94436d2ad9ca3ef3c10888f23",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=47e4638a405ab56951ba4756c7f81c41ec0f244c",
        "patch": "@@ -144,7 +144,7 @@ typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBL\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);\n-uint160 DecodeAddrDest(const std::string& str, int & type);\n+bool DecodeAddrDest(const std::string& str, uint160& hash, int & type);\n bool IsValidDestinationString(const std::string& str);\n bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n "
      },
      {
        "sha": "0ecdb91a55492574756ce70ea341b87bb7cb3cfe",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47e4638a405ab56951ba4756c7f81c41ec0f244c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=47e4638a405ab56951ba4756c7f81c41ec0f244c",
        "patch": "@@ -648,10 +648,11 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n     \t}*/\n \tif (params[0].isStr()) {\n         /*CTxDestination dest = DecodeDestination(params[0].get_str())*/;\n+\t\tuint160 hashBytes;\n \t\tint type = 0;\n-        uint160 hashBytes = DecodeAddrDest(params[0].get_str(), type);\n+        //uint160 hashBytes = DecodeAddrDest(params[0].get_str(), type);\n \t\t//DecodeAddrDest(params[0].get_str(), dest, type);\n-        if (!IsValidDestination(CTxDestination(hashBytes))) {\n+        if (!DecodeAddrDest(params[0].get_str(),hashBytes, type)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n         }\n         addresses.push_back(std::make_pair(hashBytes, type));\n@@ -667,9 +668,8 @@ bool getAddressesFromParams(const UniValue& params, std::vector<std::pair<uint16\n         for (std::vector<UniValue>::iterator it = values.begin(); it != values.end(); ++it) {\n \n             uint160 hashBytes;\n-            int type = 0;\n-\t\t\thashBytes = DecodeAddrDest(params[0].get_str(), type);\n-            if (!IsValidDestination(CTxDestination(hashBytes))) {\n+            int type = 0;\t\t\n+            if (!DecodeAddrDest(it->get_str(),hashBytes, type)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n             }\n             addresses.push_back(std::make_pair(hashBytes, type));"
      }
    ]
  },
  {
    "sha": "3c95344487e62e95948dfe2211aba07e93bb5b5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzk1MzQ0NDg3ZTYyZTk1OTQ4ZGZlMjIxMWFiYTA3ZTkzYmI1YjVh",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:45:46Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:45:46Z"
      },
      "message": "debug",
      "tree": {
        "sha": "1439874c6e16088383ba05bc7d262bb8d07f7c83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1439874c6e16088383ba05bc7d262bb8d07f7c83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c95344487e62e95948dfe2211aba07e93bb5b5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95344487e62e95948dfe2211aba07e93bb5b5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c95344487e62e95948dfe2211aba07e93bb5b5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95344487e62e95948dfe2211aba07e93bb5b5a/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47e4638a405ab56951ba4756c7f81c41ec0f244c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47e4638a405ab56951ba4756c7f81c41ec0f244c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47e4638a405ab56951ba4756c7f81c41ec0f244c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "13775d49d399cab40b1d77a41aa2be4a00856383",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c95344487e62e95948dfe2211aba07e93bb5b5a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c95344487e62e95948dfe2211aba07e93bb5b5a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3c95344487e62e95948dfe2211aba07e93bb5b5a",
        "patch": "@@ -1034,7 +1034,7 @@ UniValue getaddressbalance(const JSONRPCRequest& request)\n     std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n \n     for (std::vector<std::pair<uint160, int> >::iterator it = addresses.begin(); it != addresses.end(); it++) {\n-\t\tprintf(\"address hash=(%s), type=%d\\n\", it->first.ToString().c_str(), it->second);\n+\t\tprintf(\"\\naddress hash=(%s), type=%d\\n\", it->first.ToString().c_str(), it->second);\n \t\t//dbaddrs.push_back(std::make_pair(it->first, it->second));\n         if (!GetAddressIndex((*it).first, (*it).second, addressIndex)) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No information available for address\");"
      },
      {
        "sha": "0443d23ccadd5facd44d8c26330fffbcf403a9a2",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c95344487e62e95948dfe2211aba07e93bb5b5a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c95344487e62e95948dfe2211aba07e93bb5b5a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3c95344487e62e95948dfe2211aba07e93bb5b5a",
        "patch": "@@ -354,6 +354,7 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n                 return error(\"failed to get address index value\");\n             }\n         } else {\n+\t        cout << \"\\npcursor info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\"\n             break;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "a8ef199f72e15777bd3d544bf0770a761d151659",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGVmMTk5ZjcyZTE1Nzc3YmQzZDU0NGJmMDc3MGE3NjFkMTUxNjU5",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:47:00Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:47:00Z"
      },
      "message": "1",
      "tree": {
        "sha": "5b432549cce6ef6d1292f0a1865b85329859a0a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b432549cce6ef6d1292f0a1865b85329859a0a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8ef199f72e15777bd3d544bf0770a761d151659",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ef199f72e15777bd3d544bf0770a761d151659",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ef199f72e15777bd3d544bf0770a761d151659",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ef199f72e15777bd3d544bf0770a761d151659/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c95344487e62e95948dfe2211aba07e93bb5b5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c95344487e62e95948dfe2211aba07e93bb5b5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c95344487e62e95948dfe2211aba07e93bb5b5a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8c064b3754bd824f2fd5387986cbdfbd2e1cdcc4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8ef199f72e15777bd3d544bf0770a761d151659/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8ef199f72e15777bd3d544bf0770a761d151659/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a8ef199f72e15777bd3d544bf0770a761d151659",
        "patch": "@@ -354,7 +354,7 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n                 return error(\"failed to get address index value\");\n             }\n         } else {\n-\t        cout << \"\\npcursor info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\"\n+\t        std::cout << \"\\npcursor info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\"\n             break;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhjMjQzYzgwZGI1N2FiOGZjNWUwYmExNDE4NTZkNmM1MjQyZjFh",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:48:59Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:48:59Z"
      },
      "message": "1",
      "tree": {
        "sha": "22db4189bf82c8f1de7a62824091c8da58d76ab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22db4189bf82c8f1de7a62824091c8da58d76ab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8ef199f72e15777bd3d544bf0770a761d151659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8ef199f72e15777bd3d544bf0770a761d151659",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ef199f72e15777bd3d544bf0770a761d151659"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dd2556798f0c40dce21174ce6eb22f21a88970bc",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
        "patch": "@@ -354,7 +354,7 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n                 return error(\"failed to get address index value\");\n             }\n         } else {\n-\t        std::cout << \"\\npcursor info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\"\n+\t        std::cout << \"\\npcursor info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\";\n             break;\n         }\n     }"
      }
    ]
  },
  {
    "sha": "6665a1e0361e30699b82938dd15ea9a50c491068",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjY1YTFlMDM2MWUzMDY5OWI4MjkzOGRkMTVlYTlhNTBjNDkxMDY4",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:53:04Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T06:53:04Z"
      },
      "message": "1",
      "tree": {
        "sha": "4b672908c8cf60d4dc288bbc9dc544febb488e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b672908c8cf60d4dc288bbc9dc544febb488e60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6665a1e0361e30699b82938dd15ea9a50c491068",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6665a1e0361e30699b82938dd15ea9a50c491068",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6665a1e0361e30699b82938dd15ea9a50c491068",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6665a1e0361e30699b82938dd15ea9a50c491068/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8c243c80db57ab8fc5e0ba141856d6c5242f1a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "051d26a8ee995fb3ea98c55eed1f7b296c1bfbd3",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6665a1e0361e30699b82938dd15ea9a50c491068/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6665a1e0361e30699b82938dd15ea9a50c491068/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=6665a1e0361e30699b82938dd15ea9a50c491068",
        "patch": "@@ -343,12 +343,13 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n         std::pair<char,CAddressIndexKey> key;\n         if (pcursor->GetKey(key) && key.first == DB_ADDRESSINDEX && key.second.hashBytes == addressHash) {\n             if (end > 0 && key.second.blockHeight > end) {\n+\t\t\t\tstd::cout << \"\\break info: blockHeight = \" << key.second.blockHeight << \" hash = \" << key.second.hashBytes.ToString().c_str() << \"\\n\";\n                 break;\n             }\n             CAmount nValue;\n             if (pcursor->GetValue(nValue)) {\n                 addressIndex.push_back(std::make_pair(key.second, nValue));\n-\t\t\t\t//printf(\"**readindex**,height=%d, hash=(%s), amount=%lld\\n\", key.second.blockHeight, key.second.hashBytes.ToString().c_str(), nValue);\n+\t\t\t\tprintf(\"**readindex**,height=%d, hash=(%s), amount=%lld\\n\", key.second.blockHeight, key.second.hashBytes.ToString().c_str(), nValue);\n                 pcursor->Next();\n             } else {\n                 return error(\"failed to get address index value\");"
      }
    ]
  },
  {
    "sha": "a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGZkMzM3MjFkYjMzZmJmMGJhNDlmNTAzNGJhMTQ5ZDk3NTVhM2Mw",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:01:14Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:01:14Z"
      },
      "message": "1",
      "tree": {
        "sha": "fc6b6408afdce87454e55cb8136b1a9dfd8a5f87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc6b6408afdce87454e55cb8136b1a9dfd8a5f87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0fd33721db33fbf0ba49f5034ba149d9755a3c0/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6665a1e0361e30699b82938dd15ea9a50c491068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6665a1e0361e30699b82938dd15ea9a50c491068",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6665a1e0361e30699b82938dd15ea9a50c491068"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "941d65a44c59241398a36c02139e32a93c514cc1",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0fd33721db33fbf0ba49f5034ba149d9755a3c0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0fd33721db33fbf0ba49f5034ba149d9755a3c0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
        "patch": "@@ -338,6 +338,10 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n         pcursor->Seek(std::make_pair(DB_ADDRESSINDEX, CAddressIndexIteratorKey(type, addressHash)));\n     }\n \n+\tstd::pair<char,CAddressIndexKey> key1;\n+\tbool btmp =\tpcursor->GetKey(key1);\n+\tstd::cout << \"\\nIsfind=\" << btmp << \" hash= \" << key1.second.hashBytes.ToString().c_str() << \" height =\" << key.second.blockHeight << '\\n';\n+\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         std::pair<char,CAddressIndexKey> key;\n@@ -349,7 +353,8 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n             CAmount nValue;\n             if (pcursor->GetValue(nValue)) {\n                 addressIndex.push_back(std::make_pair(key.second, nValue));\n-\t\t\t\tprintf(\"**readindex**,height=%d, hash=(%s), amount=%lld\\n\", key.second.blockHeight, key.second.hashBytes.ToString().c_str(), nValue);\n+\t\t\t\t//printf(\"**readindex**,height=%d, hash=(%s), amount=%lld\\n\", key.second.blockHeight, key.second.hashBytes.ToString().c_str(), nValue);\n+\t\t\t\tstd::cout << \"\\nfindindex,height=\" << key.second.blockHeight << \"hash=(\" << key.second.hashBytes.ToString().c_str() << \") amount=\" << nValue << '\\n';\n                 pcursor->Next();\n             } else {\n                 return error(\"failed to get address index value\");"
      }
    ]
  },
  {
    "sha": "cee3af4bf5d9be1741497949aef6658f54cf85d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWUzYWY0YmY1ZDliZTE3NDE0OTc5NDlhZWY2NjU4ZjU0Y2Y4NWQ0",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:02:04Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:02:04Z"
      },
      "message": "1",
      "tree": {
        "sha": "ac7151e150b088febe4a1bac6dfce2fd5da97fe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac7151e150b088febe4a1bac6dfce2fd5da97fe8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cee3af4bf5d9be1741497949aef6658f54cf85d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee3af4bf5d9be1741497949aef6658f54cf85d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cee3af4bf5d9be1741497949aef6658f54cf85d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee3af4bf5d9be1741497949aef6658f54cf85d4/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0fd33721db33fbf0ba49f5034ba149d9755a3c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0fd33721db33fbf0ba49f5034ba149d9755a3c0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1f7cdf480ed1b78359ac9b9c394e09d7eab7fd83",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cee3af4bf5d9be1741497949aef6658f54cf85d4/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cee3af4bf5d9be1741497949aef6658f54cf85d4/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=cee3af4bf5d9be1741497949aef6658f54cf85d4",
        "patch": "@@ -340,7 +340,7 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n \n \tstd::pair<char,CAddressIndexKey> key1;\n \tbool btmp =\tpcursor->GetKey(key1);\n-\tstd::cout << \"\\nIsfind=\" << btmp << \" hash= \" << key1.second.hashBytes.ToString().c_str() << \" height =\" << key.second.blockHeight << '\\n';\n+\tstd::cout << \"\\nIsfind=\" << btmp << \" hash= \" << key1.second.hashBytes.ToString().c_str() << \" height =\" << key1.second.blockHeight << '\\n';\n \n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();"
      }
    ]
  },
  {
    "sha": "170daa59e9159b22e9c30327009ef2ea774f9733",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzBkYWE1OWU5MTU5YjIyZTljMzAzMjcwMDllZjJlYTc3NGY5NzMz",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:07:12Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-09T07:07:12Z"
      },
      "message": "1",
      "tree": {
        "sha": "307e6df95859684e7188cb9b6daf807fd64f3704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/307e6df95859684e7188cb9b6daf807fd64f3704"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/170daa59e9159b22e9c30327009ef2ea774f9733",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/170daa59e9159b22e9c30327009ef2ea774f9733",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/170daa59e9159b22e9c30327009ef2ea774f9733",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/170daa59e9159b22e9c30327009ef2ea774f9733/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cee3af4bf5d9be1741497949aef6658f54cf85d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cee3af4bf5d9be1741497949aef6658f54cf85d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cee3af4bf5d9be1741497949aef6658f54cf85d4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a106a36f5c5436c480c7993d4c7f5b146f5ba168",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/170daa59e9159b22e9c30327009ef2ea774f9733/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/170daa59e9159b22e9c30327009ef2ea774f9733/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=170daa59e9159b22e9c30327009ef2ea774f9733",
        "patch": "@@ -338,9 +338,7 @@ bool CBlockTreeDB::ReadAddressIndex(uint160 addressHash, int type,\n         pcursor->Seek(std::make_pair(DB_ADDRESSINDEX, CAddressIndexIteratorKey(type, addressHash)));\n     }\n \n-\tstd::pair<char,CAddressIndexKey> key1;\n-\tbool btmp =\tpcursor->GetKey(key1);\n-\tstd::cout << \"\\nIsfind=\" << btmp << \" hash= \" << key1.second.hashBytes.ToString().c_str() << \" height =\" << key1.second.blockHeight << '\\n';\n+\tstd::cout << \"???????\" << '\\n';\n \n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();"
      }
    ]
  },
  {
    "sha": "37799e7bfb5c64f018a8f69cc4d248efac6a321e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzc5OWU3YmZiNWM2NGYwMThhOGY2OWNjNGQyNDhlZmFjNmEzMjFl",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T00:47:55Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T00:47:55Z"
      },
      "message": "1",
      "tree": {
        "sha": "022d390bdc1338c5496cee5a38030d83fb25c8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/022d390bdc1338c5496cee5a38030d83fb25c8c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37799e7bfb5c64f018a8f69cc4d248efac6a321e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37799e7bfb5c64f018a8f69cc4d248efac6a321e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37799e7bfb5c64f018a8f69cc4d248efac6a321e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37799e7bfb5c64f018a8f69cc4d248efac6a321e/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "170daa59e9159b22e9c30327009ef2ea774f9733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/170daa59e9159b22e9c30327009ef2ea774f9733",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/170daa59e9159b22e9c30327009ef2ea774f9733"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "099564efc5da5cced0c4543c05b27fae7302f4c8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "patch": "@@ -1427,6 +1427,8 @@ bool AppInitMain()\n                 pcoinscatcher.reset();\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n+\t\t\t\tmylogfile = new MyLog(\"writeAddrAmount.txt\");\n+\n                 if (fReset) {\n                     pblocktree->WriteReindexing(true);\n                     //If we're reindexing in prune mode, wipe away unusable block files and all undo data files"
      },
      {
        "sha": "a7536ad0309fcb7159c495a648fb55cfe22cfea9",
        "filename": "src/mylog.h",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/mylog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/mylog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mylog.h?ref=37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "patch": "@@ -0,0 +1,40 @@\n+#ifndef MYLOG_H\n+#define MYLOG_H\n+#include <fstream>\n+\n+//using namespaces std;\n+\n+class MyLog\n+{\n+public:\n+\tMyLog(std::string filepath)\n+\t{\n+\t\tpath = filepath;\n+\t\tSaveFile.open(path.c_str());\n+\t}\n+\t~MyLog()\n+\t{\n+\t\tSaveFile.close();\n+\t}\n+\tvoid Write(std::string str)\n+\t{\n+\t\tSaveFile << str << std::endl;\n+\t}\n+\n+\tvoid Open()\n+\t{\n+\t\tSaveFile.open(path.c_str(), std::ios::app);\n+\t}\n+\tvoid Close()\n+\t{\n+\t\tSaveFile.close();\n+\t}\n+public:\n+\tstd::ofstream SaveFile;\n+private:\n+\tstd::string path;\n+\n+};\n+\n+\n+#endif"
      },
      {
        "sha": "36c6b5b9c2428984ad122be8390a0af5812b669c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "patch": "@@ -27,6 +27,8 @@ static const char DB_ADDRESSINDEX = 'a';\n static const char DB_ADDRESSUNSPENTINDEX = 'u';\n static const char DB_TIMESTAMPINDEX = 's';\n static const char DB_SPENTINDEX = 'p';\n+\n+MyLog * mylogfile;\n /*address index end*/\n static const char DB_BLOCK_INDEX = 'b';\n \n@@ -308,14 +310,34 @@ bool CBlockTreeDB::ReadAddressUnspentIndex(uint160 addressHash, int type,\n     return true;\n }\n \n-\n+extern bool getAddressFromIndex(const int &type, const uint160 &hash, std::string &address);\n bool CBlockTreeDB::WriteAddressIndex(const std::vector<std::pair<CAddressIndexKey, CAmount > >&vect) {\n     CDBBatch batch(*this);\n+\tif(mylogfile!=NULL)\n+\t{\n+\t\tif(!mylogfile->SaveFile.is_open())\n+\t\t{\n+\t\t\tmylogfile->Open();\n+\t\t}\n+\t\tmylogfile->SaveFile << \"address records \" << vect.size() << '\\n';\n+\t}\n     for (std::vector<std::pair<CAddressIndexKey, CAmount> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n     {\n         batch.Write(std::make_pair(DB_ADDRESSINDEX, it->first), it->second);\n+\t\tif(mylogfile!=NULL)\n+        {\n+            if(mylogfile->SaveFile.is_open())\n+            {\n+                std::string addr;\n+                getAddressFromIndex(it->first.type, it->first.hashBytes, addr);\n+                mylogfile->SaveFile << \"height \" << it->first.blockHeight << \"type \" << it->first.type << \" hash \" << it->first.hashBytes.ToString().c_str() << \" addr \" << addr << \" amount \" << it->second << '\\n';\n+            }\n+        }\n     }\n-    //mylogfile->Close();\n+    if(mylogfile!=NULL)\n+\t{\n+\t\tmylogfile->Close();\n+\t}\n     return WriteBatch(batch);\n }\n "
      },
      {
        "sha": "59a987d22e52137574951ade27f8260778a3b7d1",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37799e7bfb5c64f018a8f69cc4d248efac6a321e/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "patch": "@@ -11,6 +11,8 @@\n #include <chain.h>\n /*address index start*/\n #include \"spentindex.h\"\n+#include \"mylog.h\"\n+extern MyLog * mylogfile;\n /*address index end*/\n \n #include <map>"
      }
    ]
  },
  {
    "sha": "4724b90fe4674209660cd9502898ee9d8d1840e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzI0YjkwZmU0Njc0MjA5NjYwY2Q5NTAyODk4ZWU5ZDhkMTg0MGU2",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:00:12Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:00:12Z"
      },
      "message": "1",
      "tree": {
        "sha": "406bbd7e59d1f2de26f89307bc7a285fae9bf4d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/406bbd7e59d1f2de26f89307bc7a285fae9bf4d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4724b90fe4674209660cd9502898ee9d8d1840e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724b90fe4674209660cd9502898ee9d8d1840e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4724b90fe4674209660cd9502898ee9d8d1840e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724b90fe4674209660cd9502898ee9d8d1840e6/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37799e7bfb5c64f018a8f69cc4d248efac6a321e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37799e7bfb5c64f018a8f69cc4d248efac6a321e"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 106,
      "deletions": 8
    },
    "files": [
      {
        "sha": "0d3d8132106d351f6c7b5833ad353c1703e83d7f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 8,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4724b90fe4674209660cd9502898ee9d8d1840e6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4724b90fe4674209660cd9502898ee9d8d1840e6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4724b90fe4674209660cd9502898ee9d8d1840e6",
        "patch": "@@ -1924,6 +1924,103 @@ static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n+void WritetxIn(CTxIn & input, uint256 txhash, CCoinsViewCache& view, int nHeight)\n+{\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+\n+    //const CTxIn input = tx.vin[j];\n+    #if 1\n+    const Coin* coin = view.AccessCoin(input.prevout);\n+\tconst CTxOut &prevout = coin->out;\n+\t#elif\n+    const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n+\t#endif\n+    uint160 hashBytes;\n+    int addrType;\n+    uint160 addrhash;\n+    std::vector<valtype> vSolutions;\n+    txnouttype addressType;\n+    if (!Solver(prevout.scriptPubKey, addressType, vSolutions))\n+    {               \n+        continue;           \n+    }               \n+    else            \n+    {               \n+        /*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n+        if(addressType !=TX_SCRIPTHASH && addressType !=TX_PUBKEY &&addressType !=TX_PUBKEYHASH)\n+            continue;\n+        if(addressType== TX_SCRIPTHASH )\n+        {\n+            addrType=2 ;\n+            addrhash=uint160(vSolutions[0]);\n+        }\n+        if(addressType==TX_PUBKEYHASH )\n+        {\n+            addrType=1 ;\n+            addrhash=uint160(vSolutions[0]);\n+        }\n+        if(addressType== TX_PUBKEY)\n+        {\n+            addrType=1 ;\n+            addrhash= Hash160(vSolutions[0]);\n+        }\n+\n+        // record receiving activity\n+        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, i, txhash, j, true), prevout.nValue * -1));\n+        // record unspent output\n+        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n+    } \n+    if (fSpentIndex) {\n+        // add the spent index to determine the txid and input that spent an output\n+        // and to find the amount and address from an input\n+        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, nHeight, prevout.nValue, addressType, hashBytes)));\n+    }\n+}\n+\n+void WritetxOut(CTxOut &out, int nHeight, int txindex, int outindex, uint256 txhash)\n+{\n+\tstd::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+\tstd::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+\t//std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+\t//const CTxOut &out = tx.vout[k];\n+    int addrType;\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType;\n+    uint160  addrhash;\n+    if (!Solver(out.scriptPubKey, whichType, vSolutions))\n+    {\n+            continue;\n+    }\n+    else\n+    {\n+        //if(\ttype == TX_SCRIPTHASH ||type == TX_PUBKEY ||type ==TX_PUBKEYHASH );\n+        /*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n+        if(whichType !=TX_SCRIPTHASH && whichType !=TX_PUBKEY &&whichType !=TX_PUBKEYHASH)\n+            continue;\n+        if(whichType == TX_SCRIPTHASH )\n+        {\n+            addrType=2 ;\n+            addrhash=uint160(vSolutions[0]); \n+        }\n+        if(whichType ==TX_PUBKEYHASH )\n+        {\n+            addrType=1 ;\n+            addrhash=uint160(vSolutions[0]); \n+        }\n+        if(whichType == TX_PUBKEY)\n+        {\n+            addrType=1 ;\n+            addrhash= Hash160(vSolutions[0]);\t\t\n+        }\n+        // record receiving activity\n+        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, txindex, txhash, outindex, false), out.nValue));\n+        // record unspent output\n+        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, txhash, outindex), CAddressUnspentValue(out.nValue, out.scriptPubKey, nHeight)));\n+    }\n+}\n+\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n@@ -2059,9 +2156,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n     \n // <-AddressIndex-l-2018/01/30-modified for address index func.\n-    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n-    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n-    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+    //std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+    //std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+    //std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n // ->AddressIndex-l\n \n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n@@ -2102,7 +2199,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             if (fAddressIndex || fSpentIndex)\n             {\n                 for (size_t j = 0; j < tx.vin.size(); j++) {\n-                    const CTxIn input = tx.vin[j];\n+                    /*const CTxIn input = tx.vin[j];\n                     const Coin& coin = view.AccessCoin(tx.vin[j].prevout);\n                     const CTxOut &prevout = coin.out;\n                     uint160 hashBytes;\n@@ -2131,7 +2228,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                         // add the spent index to determine the txid and input that spent an output\n                         // and to find the amount and address from an input\n                         spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n-                    }\n+                    }*/\n+                    WritetxIn(tx.vin[j], txhash, view ,pindex->nHeight);\n                 }\n \n             }\n@@ -2141,7 +2239,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n // <-AddressIndex-l-2018/01/30-modified for address index func.\n         if (fAddressIndex) {\n             for (unsigned int k = 0; k < tx.vout.size(); k++) {\n-                const CTxOut &out = tx.vout[k];\n+                /*const CTxOut &out = tx.vout[k];\n \n                 if (out.scriptPubKey.IsPayToScriptHash()) {\n                     std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+2, out.scriptPubKey.begin()+22);\n@@ -2163,8 +2261,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \n                 } else {\n                     continue;\n-                }\n-\n+                }*/\n+\t\t\t\tWritetxOut(tx.vout[k], pindex->nHeight, i, k, txhash);\n             }\n         }\n // ->AddressIndex-l"
      }
    ]
  },
  {
    "sha": "d42a7e025354bebcdb47b1be0f5786888677f443",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDJhN2UwMjUzNTRiZWJjZGI0N2IxYmUwZjU3ODY4ODg2NzdmNDQz",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:07:39Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:07:39Z"
      },
      "message": "1",
      "tree": {
        "sha": "56c00f4b88eef8efa33923728469b543c13a36e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56c00f4b88eef8efa33923728469b543c13a36e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d42a7e025354bebcdb47b1be0f5786888677f443",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42a7e025354bebcdb47b1be0f5786888677f443",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d42a7e025354bebcdb47b1be0f5786888677f443",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42a7e025354bebcdb47b1be0f5786888677f443/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4724b90fe4674209660cd9502898ee9d8d1840e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4724b90fe4674209660cd9502898ee9d8d1840e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4724b90fe4674209660cd9502898ee9d8d1840e6"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "92b278117bafc718d6d398fbf6124d1f452d0d44",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d42a7e025354bebcdb47b1be0f5786888677f443/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d42a7e025354bebcdb47b1be0f5786888677f443/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d42a7e025354bebcdb47b1be0f5786888677f443",
        "patch": "@@ -1924,15 +1924,16 @@ static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n-void WritetxIn(CTxIn & input, uint256 txhash, CCoinsViewCache& view, int nHeight)\n+typedef vector<unsigned char> valtype;\n+void WritetxIn(CTxIn & input, uint256 txhash, int txindex, int inindex, CCoinsViewCache& view, int nHeight)\n {\n     std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n     std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n     std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n \n     //const CTxIn input = tx.vin[j];\n     #if 1\n-    const Coin* coin = view.AccessCoin(input.prevout);\n+    const Coin* coin = &(view.AccessCoin(input.prevout));\n \tconst CTxOut &prevout = coin->out;\n \t#elif\n     const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n@@ -1968,14 +1969,14 @@ void WritetxIn(CTxIn & input, uint256 txhash, CCoinsViewCache& view, int nHeight\n         }\n \n         // record receiving activity\n-        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, i, txhash, j, true), prevout.nValue * -1));\n+        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, txindex, txhash, inindex, true), prevout.nValue * -1));\n         // record unspent output\n         addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n     } \n     if (fSpentIndex) {\n         // add the spent index to determine the txid and input that spent an output\n         // and to find the amount and address from an input\n-        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, nHeight, prevout.nValue, addressType, hashBytes)));\n+        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, inindex, nHeight, prevout.nValue, addressType, hashBytes)));\n     }\n }\n \n@@ -2229,7 +2230,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                         // and to find the amount and address from an input\n                         spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n                     }*/\n-                    WritetxIn(tx.vin[j], txhash, view ,pindex->nHeight);\n+                    WritetxIn(tx.vin[j], txhash, i, j, view ,pindex->nHeight);\n                 }\n \n             }"
      }
    ]
  },
  {
    "sha": "7872bf2735743bf99351a0d58ea16adcd64824c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODcyYmYyNzM1NzQzYmY5OTM1MWEwZDU4ZWExNmFkY2Q2NDgyNGM3",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:09:01Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:09:01Z"
      },
      "message": "1",
      "tree": {
        "sha": "3556002a7c71dd96ea57829102da2db525a4b048",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3556002a7c71dd96ea57829102da2db525a4b048"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7872bf2735743bf99351a0d58ea16adcd64824c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7872bf2735743bf99351a0d58ea16adcd64824c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7872bf2735743bf99351a0d58ea16adcd64824c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7872bf2735743bf99351a0d58ea16adcd64824c7/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d42a7e025354bebcdb47b1be0f5786888677f443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d42a7e025354bebcdb47b1be0f5786888677f443",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d42a7e025354bebcdb47b1be0f5786888677f443"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "79830907c1a1d3d61c28e995492ffe5bb8dfee93",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7872bf2735743bf99351a0d58ea16adcd64824c7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7872bf2735743bf99351a0d58ea16adcd64824c7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7872bf2735743bf99351a0d58ea16adcd64824c7",
        "patch": "@@ -1924,7 +1924,7 @@ static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n-typedef vector<unsigned char> valtype;\n+typedef std::vector<unsigned char> valtype;\n void WritetxIn(CTxIn & input, uint256 txhash, int txindex, int inindex, CCoinsViewCache& view, int nHeight)\n {\n     std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;"
      }
    ]
  },
  {
    "sha": "ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzU4NGMxYmFhYTg1YjVjZDMyODU1YzFlYTdkNmJmNmZjODI5NzUy",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:24:07Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:24:07Z"
      },
      "message": "1",
      "tree": {
        "sha": "19804a3d1de41d72fe30ef89ffd8c8025d93df30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19804a3d1de41d72fe30ef89ffd8c8025d93df30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7872bf2735743bf99351a0d58ea16adcd64824c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7872bf2735743bf99351a0d58ea16adcd64824c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7872bf2735743bf99351a0d58ea16adcd64824c7"
      }
    ],
    "stats": {
      "total": 229,
      "additions": 80,
      "deletions": 149
    },
    "files": [
      {
        "sha": "f8b95744039c7944121b78c41000caf515057364",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 149,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
        "patch": "@@ -1925,103 +1925,6 @@ static int64_t nTimeTotal = 0;\n static int64_t nBlocksTotal = 0;\n \n typedef std::vector<unsigned char> valtype;\n-void WritetxIn(CTxIn & input, uint256 txhash, int txindex, int inindex, CCoinsViewCache& view, int nHeight)\n-{\n-    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n-    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n-    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n-\n-    //const CTxIn input = tx.vin[j];\n-    #if 1\n-    const Coin* coin = &(view.AccessCoin(input.prevout));\n-\tconst CTxOut &prevout = coin->out;\n-\t#elif\n-    const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n-\t#endif\n-    uint160 hashBytes;\n-    int addrType;\n-    uint160 addrhash;\n-    std::vector<valtype> vSolutions;\n-    txnouttype addressType;\n-    if (!Solver(prevout.scriptPubKey, addressType, vSolutions))\n-    {               \n-        continue;           \n-    }               \n-    else            \n-    {               \n-        /*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n-        if(addressType !=TX_SCRIPTHASH && addressType !=TX_PUBKEY &&addressType !=TX_PUBKEYHASH)\n-            continue;\n-        if(addressType== TX_SCRIPTHASH )\n-        {\n-            addrType=2 ;\n-            addrhash=uint160(vSolutions[0]);\n-        }\n-        if(addressType==TX_PUBKEYHASH )\n-        {\n-            addrType=1 ;\n-            addrhash=uint160(vSolutions[0]);\n-        }\n-        if(addressType== TX_PUBKEY)\n-        {\n-            addrType=1 ;\n-            addrhash= Hash160(vSolutions[0]);\n-        }\n-\n-        // record receiving activity\n-        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, txindex, txhash, inindex, true), prevout.nValue * -1));\n-        // record unspent output\n-        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n-    } \n-    if (fSpentIndex) {\n-        // add the spent index to determine the txid and input that spent an output\n-        // and to find the amount and address from an input\n-        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, inindex, nHeight, prevout.nValue, addressType, hashBytes)));\n-    }\n-}\n-\n-void WritetxOut(CTxOut &out, int nHeight, int txindex, int outindex, uint256 txhash)\n-{\n-\tstd::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n-\tstd::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n-\t//std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n-\t//const CTxOut &out = tx.vout[k];\n-    int addrType;\n-    std::vector<valtype> vSolutions;\n-    txnouttype whichType;\n-    uint160  addrhash;\n-    if (!Solver(out.scriptPubKey, whichType, vSolutions))\n-    {\n-            continue;\n-    }\n-    else\n-    {\n-        //if(\ttype == TX_SCRIPTHASH ||type == TX_PUBKEY ||type ==TX_PUBKEYHASH );\n-        /*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n-        if(whichType !=TX_SCRIPTHASH && whichType !=TX_PUBKEY &&whichType !=TX_PUBKEYHASH)\n-            continue;\n-        if(whichType == TX_SCRIPTHASH )\n-        {\n-            addrType=2 ;\n-            addrhash=uint160(vSolutions[0]); \n-        }\n-        if(whichType ==TX_PUBKEYHASH )\n-        {\n-            addrType=1 ;\n-            addrhash=uint160(vSolutions[0]); \n-        }\n-        if(whichType == TX_PUBKEY)\n-        {\n-            addrType=1 ;\n-            addrhash= Hash160(vSolutions[0]);\t\t\n-        }\n-        // record receiving activity\n-        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, nHeight, txindex, txhash, outindex, false), out.nValue));\n-        // record unspent output\n-        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, txhash, outindex), CAddressUnspentValue(out.nValue, out.scriptPubKey, nHeight)));\n-    }\n-}\n-\n /** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n@@ -2157,9 +2060,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n     \n // <-AddressIndex-l-2018/01/30-modified for address index func.\n-    //std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n-    //std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n-    //std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n+    std::vector<std::pair<CAddressIndexKey, CAmount> > addressIndex;\n+    std::vector<std::pair<CAddressUnspentKey, CAddressUnspentValue> > addressUnspentIndex;\n+    std::vector<std::pair<CSpentIndexKey, CSpentIndexValue> > spentIndex;\n // ->AddressIndex-l\n \n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n@@ -2200,37 +2103,54 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n             if (fAddressIndex || fSpentIndex)\n             {\n                 for (size_t j = 0; j < tx.vin.size(); j++) {\n-                    /*const CTxIn input = tx.vin[j];\n-                    const Coin& coin = view.AccessCoin(tx.vin[j].prevout);\n-                    const CTxOut &prevout = coin.out;\n+                    const CTxIn input = tx.vin[j];\n+\t\t\t\t\t#if 1\n+\t\t\t\t\tconst Coin* coin = &(view.AccessCoin(input.prevout.hash));\n+\t\t\t\t    const CTxOut &prevout = coin->out;\n+\t\t\t\t\t#elif\n+                    const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n+\t\t\t\t\t#endif\n                     uint160 hashBytes;\n-                    int addressType;\n-\n-                    if (prevout.scriptPubKey.IsPayToScriptHash()) {\n-                        hashBytes = uint160(std::vector <unsigned char>(prevout.scriptPubKey.begin()+2, prevout.scriptPubKey.begin()+22));\n-                        addressType = 2;\n-                    } else if (prevout.scriptPubKey.IsPayToPublicKeyHash()) {\n-                        hashBytes = uint160(std::vector <unsigned char>(prevout.scriptPubKey.begin()+3, prevout.scriptPubKey.begin()+23));\n-                        addressType = 1;\n-                    } else {\n-                        hashBytes.SetNull();\n-                        addressType = 0;\n-                    }\n-\n-                    if (fAddressIndex && addressType > 0) {\n-                        // record spending activity\n-                        addressIndex.push_back(std::make_pair(CAddressIndexKey(addressType, hashBytes, pindex->nHeight, i, txhash, j, true), prevout.nValue * -1));\n-\n-                        // remove address from unspent index\n-                        addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(addressType, hashBytes, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n-                    }\n-\n+                    int addrType;\n+                    uint160 addrhash;\n+                    //txnouttype type;\n+                    std::vector<valtype> vSolutions;\n+                    txnouttype addressType;\n+                    if (!Solver(prevout.scriptPubKey, addressType, vSolutions))\n+                    {               \n+                        continue;           \n+                    }               \n+                    else            \n+                    {               \n+        \t\t\t\t/*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n+\t\t\t\t    \tif(addressType !=TX_SCRIPTHASH && addressType !=TX_PUBKEY &&addressType !=TX_PUBKEYHASH)\n+\t\t\t    \t\t\tcontinue;\n+                        if(addressType== TX_SCRIPTHASH )\n+                        {\n+                           addrType=2 ;\n+                           addrhash=uint160(vSolutions[0]);\n+                        }\n+                        if(addressType==TX_PUBKEYHASH )\n+                        {\n+                           addrType=1 ;\n+                           addrhash=uint160(vSolutions[0]);\n+                        }\n+                        if(addressType== TX_PUBKEY)\n+                        {\n+                          addrType=1 ;\n+                          addrhash= Hash160(vSolutions[0]);\n+                        }\n+\t\n+                        // record receiving activity\n+                        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, j, true), prevout.nValue * -1));\n+                    \t// record unspent output\n+                        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n+                    } \n                     if (fSpentIndex) {\n                         // add the spent index to determine the txid and input that spent an output\n                         // and to find the amount and address from an input\n-                        spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n-                    }*/\n-                    WritetxIn(tx.vin[j], txhash, i, j, view ,pindex->nHeight);\n+                        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n+                    }\n                 }\n \n             }\n@@ -2240,30 +2160,41 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n // <-AddressIndex-l-2018/01/30-modified for address index func.\n         if (fAddressIndex) {\n             for (unsigned int k = 0; k < tx.vout.size(); k++) {\n-                /*const CTxOut &out = tx.vout[k];\n-\n-                if (out.scriptPubKey.IsPayToScriptHash()) {\n-                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+2, out.scriptPubKey.begin()+22);\n-\n-                    // record receiving activity\n-                    addressIndex.push_back(std::make_pair(CAddressIndexKey(2, uint160(hashBytes), pindex->nHeight, i, txhash, k, false), out.nValue));\n-\n-                    // record unspent output\n-                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(2, uint160(hashBytes), txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n-\n-                } else if (out.scriptPubKey.IsPayToPublicKeyHash()) {\n-                    std::vector<unsigned char> hashBytes(out.scriptPubKey.begin()+3, out.scriptPubKey.begin()+23);\n-\n+                const CTxOut &out = tx.vout[k];\n+\t\t        int addrType;\n+ \t\t\t\tstd::vector<valtype> vSolutions;\n+\t\t\t    txnouttype whichType;\n+                uint160  addrhash;\n+\t\t\t\tif (!Solver(out.scriptPubKey, whichType, vSolutions))\n+\t\t\t\t{\n+\t\t   \t\t\t continue;\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t//if(\ttype == TX_SCRIPTHASH ||type == TX_PUBKEY ||type ==TX_PUBKEYHASH );\n+         \t\t\t/*PUBKEY_ADDRESS, ==1        SCRIPT_ADDRESS, ==2*/\n+\t\t\t\t\tif(whichType !=TX_SCRIPTHASH && whichType !=TX_PUBKEY &&whichType !=TX_PUBKEYHASH)\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\tif(whichType == TX_SCRIPTHASH )\n+                    {\n+\t\t\t\t\t   addrType=2 ;\n+                       addrhash=uint160(vSolutions[0]); \n+                    }\n+\t\t\t\t\tif(whichType ==TX_PUBKEYHASH )\n+                    {\n+\t\t\t\t\t   addrType=1 ;\n+                       addrhash=uint160(vSolutions[0]); \n+                    }\n+                    if(whichType == TX_PUBKEY)\n+                    {\n+\t\t\t\t\t   addrType=1 ;\n+\t\t\t\t       addrhash= Hash160(vSolutions[0]);\t\t\n+                    }\n                     // record receiving activity\n-                    addressIndex.push_back(std::make_pair(CAddressIndexKey(1, uint160(hashBytes), pindex->nHeight, i, txhash, k, false), out.nValue));\n-\n+                    addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, k, false), out.nValue));\n                     // record unspent output\n-                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(1, uint160(hashBytes), txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n-\n-                } else {\n-                    continue;\n-                }*/\n-\t\t\t\tWritetxOut(tx.vout[k], pindex->nHeight, i, k, txhash);\n+                    addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n+\t\t\t\t}\n             }\n         }\n // ->AddressIndex-l"
      }
    ]
  },
  {
    "sha": "0554dabe5234fcf1731679ec33262dd498a3ec84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTU0ZGFiZTUyMzRmY2YxNzMxNjc5ZWMzMzI2MmRkNDk4YTNlYzg0",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:26:03Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:26:03Z"
      },
      "message": "1",
      "tree": {
        "sha": "4b8d28037e56804f6b9f081826f390e248b91363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b8d28037e56804f6b9f081826f390e248b91363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0554dabe5234fcf1731679ec33262dd498a3ec84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0554dabe5234fcf1731679ec33262dd498a3ec84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0554dabe5234fcf1731679ec33262dd498a3ec84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0554dabe5234fcf1731679ec33262dd498a3ec84/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec584c1baaa85b5cd32855c1ea7d6bf6fc829752"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "bfdfa1a240eebe034b272e61ffb36ccd6af66e5d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0554dabe5234fcf1731679ec33262dd498a3ec84/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0554dabe5234fcf1731679ec33262dd498a3ec84/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0554dabe5234fcf1731679ec33262dd498a3ec84",
        "patch": "@@ -2105,7 +2105,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                 for (size_t j = 0; j < tx.vin.size(); j++) {\n                     const CTxIn input = tx.vin[j];\n \t\t\t\t\t#if 1\n-\t\t\t\t\tconst Coin* coin = &(view.AccessCoin(input.prevout.hash));\n+\t\t\t\t\tconst Coin* coin = &(view.AccessCoin(input.prevout));\n \t\t\t\t    const CTxOut &prevout = coin->out;\n \t\t\t\t\t#elif\n                     const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n@@ -2142,14 +2142,14 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                         }\n \t\n                         // record receiving activity\n-                        addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, j, true), prevout.nValue * -1));\n+                        addressIndex.push_back(std::make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, j, true), prevout.nValue * -1));\n                     \t// record unspent output\n-                        addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n+                        addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(addrType,addrhash, input.prevout.hash, input.prevout.n), CAddressUnspentValue()));\n                     } \n                     if (fSpentIndex) {\n                         // add the spent index to determine the txid and input that spent an output\n                         // and to find the amount and address from an input\n-                        spentIndex.push_back(make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n+                        spentIndex.push_back(std::make_pair(CSpentIndexKey(input.prevout.hash, input.prevout.n), CSpentIndexValue(txhash, j, pindex->nHeight, prevout.nValue, addressType, hashBytes)));\n                     }\n                 }\n \n@@ -2191,9 +2191,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \t\t\t\t       addrhash= Hash160(vSolutions[0]);\t\t\n                     }\n                     // record receiving activity\n-                    addressIndex.push_back(make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, k, false), out.nValue));\n+                    addressIndex.push_back(std::make_pair(CAddressIndexKey(addrType, addrhash, pindex->nHeight, i, txhash, k, false), out.nValue));\n                     // record unspent output\n-                    addressUnspentIndex.push_back(make_pair(CAddressUnspentKey(addrType,addrhash, txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n+                    addressUnspentIndex.push_back(std::make_pair(CAddressUnspentKey(addrType,addrhash, txhash, k), CAddressUnspentValue(out.nValue, out.scriptPubKey, pindex->nHeight)));\n \t\t\t\t}\n             }\n         }"
      }
    ]
  },
  {
    "sha": "65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWVmNDE3MWJjNTVkZTU3ZjJmYmU2ODk1YzAzY2Y0ZjhjNjcxYmU5",
    "commit": {
      "author": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:34:17Z"
      },
      "committer": {
        "name": "bicliu",
        "email": "klins@163.com",
        "date": "2018-02-11T06:34:17Z"
      },
      "message": "1",
      "tree": {
        "sha": "33ecca556681259548bd28f5defa1ab34490556a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33ecca556681259548bd28f5defa1ab34490556a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef4171bc55de57f2fbe6895c03cf4f8c671be9/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0554dabe5234fcf1731679ec33262dd498a3ec84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0554dabe5234fcf1731679ec33262dd498a3ec84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0554dabe5234fcf1731679ec33262dd498a3ec84"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "55107fd522deab66ef93e1ed0a4b1dff89e724ca",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ef4171bc55de57f2fbe6895c03cf4f8c671be9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ef4171bc55de57f2fbe6895c03cf4f8c671be9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
        "patch": "@@ -2111,7 +2111,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                     const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n \t\t\t\t\t#endif\n                     uint160 hashBytes;\n-                    int addrType;\n+                    int addrType = 0;\n                     uint160 addrhash;\n                     //txnouttype type;\n                     std::vector<valtype> vSolutions;\n@@ -2161,7 +2161,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         if (fAddressIndex) {\n             for (unsigned int k = 0; k < tx.vout.size(); k++) {\n                 const CTxOut &out = tx.vout[k];\n-\t\t        int addrType;\n+\t\t        int addrType = 0;\n  \t\t\t\tstd::vector<valtype> vSolutions;\n \t\t\t    txnouttype whichType;\n                 uint160  addrhash;"
      }
    ]
  },
  {
    "sha": "b265fc69f3fe54502fab0f9105b5f3da5a96d8c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjY1ZmM2OWYzZmU1NDUwMmZhYjBmOTEwNWI1ZjNkYTVhOTZkOGMw",
    "commit": {
      "author": {
        "name": "Bic Liu",
        "email": "30335141+bicliu@users.noreply.github.com",
        "date": "2018-02-11T08:21:44Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-02-11T08:21:44Z"
      },
      "message": "Update validation.cpp\n\n1",
      "tree": {
        "sha": "54b3fc80bf43e1447ccc2fa4c62dcd5860847f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54b3fc80bf43e1447ccc2fa4c62dcd5860847f5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaf/0YCRBK7hj4Ov3rIwAAdHIIAHpKXMj8hTEo3VbARB5H63Yq\n+5EBx9yyd48VAYWcAD+nwo6xEW6sJ/S6Aj0maGKM2SzSMubDCYnVTlB8q15ZQMxz\n8iwuH3QlSWCru6WNo1lFPyKf7OUZ6oxakLVsRgSXZW7iigsiRYTvioe8JmNVeVyW\neQh99NGDNEKrm7QlzAszT912qq6xguQez7wciolGgWprrSXFfjkxUwuARIvPS64U\nVzBwIrLeajxcy+tMrN6xvN0ZxbGeC7Wf/m5FEXWihEW9rCuIVdcWJtV42c9Nyx4j\nGSMdQrHk+dgyq964i9khScF2bd3Xg7R0r09LP+WuBAlTAHjLHaB6lgYFW8xEHmY=\n=uFL2\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 54b3fc80bf43e1447ccc2fa4c62dcd5860847f5b\nparent 65ef4171bc55de57f2fbe6895c03cf4f8c671be9\nauthor Bic Liu <30335141+bicliu@users.noreply.github.com> 1518337304 +0800\ncommitter GitHub <noreply@github.com> 1518337304 +0800\n\nUpdate validation.cpp\n\n1"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0/comments",
    "author": {
      "login": "llbec",
      "id": 30335141,
      "node_id": "MDQ6VXNlcjMwMzM1MTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30335141?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/llbec",
      "html_url": "https://github.com/llbec",
      "followers_url": "https://api.github.com/users/llbec/followers",
      "following_url": "https://api.github.com/users/llbec/following{/other_user}",
      "gists_url": "https://api.github.com/users/llbec/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/llbec/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/llbec/subscriptions",
      "organizations_url": "https://api.github.com/users/llbec/orgs",
      "repos_url": "https://api.github.com/users/llbec/repos",
      "events_url": "https://api.github.com/users/llbec/events{/privacy}",
      "received_events_url": "https://api.github.com/users/llbec/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef4171bc55de57f2fbe6895c03cf4f8c671be9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef4171bc55de57f2fbe6895c03cf4f8c671be9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a1fde604a284fbba75a0bfb243202dc08315815e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b265fc69f3fe54502fab0f9105b5f3da5a96d8c0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b265fc69f3fe54502fab0f9105b5f3da5a96d8c0",
        "patch": "@@ -2107,7 +2107,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n \t\t\t\t\t#if 1\n \t\t\t\t\tconst Coin* coin = &(view.AccessCoin(input.prevout));\n \t\t\t\t    const CTxOut &prevout = coin->out;\n-\t\t\t\t\t#elif\n+\t\t\t\t\t#else\n                     const CTxOut &prevout = view.GetOutputFor(tx.vin[j]);\n \t\t\t\t\t#endif\n                     uint160 hashBytes;"
      }
    ]
  }
]