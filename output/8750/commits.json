[
  {
    "sha": "dddd04f979392a8c69cc11f5c54d817702eeed3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRkMDRmOTc5MzkyYThjNjljYzExZjVjNTRkODE3NzAyZWVlZDNl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-17T09:47:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-17T09:49:43Z"
      },
      "message": "[qa] Refactor RPCTestHandler to prevent TimeoutExpired",
      "tree": {
        "sha": "8b73d4fd56fb99b617f760e914bade8e2a1e8915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b73d4fd56fb99b617f760e914bade8e2a1e8915"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dddd04f979392a8c69cc11f5c54d817702eeed3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd04f979392a8c69cc11f5c54d817702eeed3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd04f979392a8c69cc11f5c54d817702eeed3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd04f979392a8c69cc11f5c54d817702eeed3e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e5799c52535a3fc20e885916f1e7ed33ecc7f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e5799c52535a3fc20e885916f1e7ed33ecc7f46"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9e187b019bc8e21f471d39f3dff15d36a9028d0c",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd04f979392a8c69cc11f5c54d817702eeed3e/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd04f979392a8c69cc11f5c54d817702eeed3e/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=dddd04f979392a8c69cc11f5c54d817702eeed3e",
        "patch": "@@ -251,21 +251,27 @@ def get_next(self):\n             self.num_running += 1\n             t = self.test_list.pop(0)\n             port_seed = [\"--portseed=%s\" % len(self.test_list)]\n+            log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n+            log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n                               subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n-                                               stdout=subprocess.PIPE,\n-                                               stderr=subprocess.PIPE)))\n+                                               stdout=log_stdout,\n+                                               stderr=log_stderr),\n+                              log_stdout,\n+                              log_stderr))\n         if not self.jobs:\n             raise IndexError('pop from empty list')\n         while True:\n             # Return first proc that finishes\n             time.sleep(.5)\n             for j in self.jobs:\n-                (name, time0, proc) = j\n+                (name, time0, proc, log_out, log_err) = j\n                 if proc.poll() is not None:\n-                    (stdout, stderr) = proc.communicate(timeout=3)\n+                    log_out.seek(0), log_err.seek(0)\n+                    [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n+                    log_out.close(), log_err.close()\n                     passed = stderr == \"\" and proc.returncode == 0\n                     self.num_running -= 1\n                     self.jobs.remove(j)"
      }
    ]
  }
]