[
  {
    "sha": "c5d37873677551caac34752214dd491f5278c8d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWQzNzg3MzY3NzU1MWNhYWMzNDc1MjIxNGRkNDkxZjUyNzhjOGQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-15T19:33:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-29T15:50:24Z"
      },
      "message": "Allow createwallet to take empty passwords to make unencrypted wallets\n\nAllow createwallet to take the empty string as a password and interpret that\nas leaving the wallet unencrypted. Also warn when that happens.",
      "tree": {
        "sha": "a528b049022acf6cb5fb98b0509d14b2d49d18e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a528b049022acf6cb5fb98b0509d14b2d49d18e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5d37873677551caac34752214dd491f5278c8d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d37873677551caac34752214dd491f5278c8d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5d37873677551caac34752214dd491f5278c8d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5d37873677551caac34752214dd491f5278c8d5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b21acab82fe9ccc73b40179b8d3538f5b4cfa73f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b21acab82fe9ccc73b40179b8d3538f5b4cfa73f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b21acab82fe9ccc73b40179b8d3538f5b4cfa73f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 27,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f09cba4b6d55fea1b551aba2a3820d93f9291acd",
        "filename": "doc/release-notes-16394.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d37873677551caac34752214dd491f5278c8d5/doc/release-notes-16394.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d37873677551caac34752214dd491f5278c8d5/doc/release-notes-16394.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16394.md?ref=c5d37873677551caac34752214dd491f5278c8d5",
        "patch": "@@ -0,0 +1,4 @@\n+RPC changes\n+-----------\n+`createwallet` now returns a warning if an empty string is used as an encryption password, and does not encrypt the wallet, instead of raising an error.\n+This makes it easier to disable encryption but also specify other options when using the `bitcoin-cli` tool."
      },
      {
        "sha": "053e760515278f73fb72f0a7539503071f50be32",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d37873677551caac34752214dd491f5278c8d5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d37873677551caac34752214dd491f5278c8d5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c5d37873677551caac34752214dd491f5278c8d5",
        "patch": "@@ -2676,11 +2676,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n     SecureString passphrase;\n     passphrase.reserve(100);\n+    std::string warning;\n     if (!request.params[3].isNull()) {\n         passphrase = request.params[3].get_str().c_str();\n         if (passphrase.empty()) {\n-            // Empty string is invalid\n-            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Cannot encrypt a wallet with a blank password\");\n+            // Empty string means unencrypted\n+            warning = \"Empty string given as passphrase, wallet will not be encrypted.\";\n         }\n     }\n \n@@ -2689,9 +2690,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n \n     std::string error;\n-    std::string warning;\n+    std::string create_warning;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, warning, wallet);\n+    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, create_warning, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);\n@@ -2702,6 +2703,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // no default case, so the compiler can warn about missing cases\n     }\n \n+    if (warning.empty()) {\n+        warning = create_warning;\n+    } else if (!warning.empty() && !create_warning.empty()){\n+        warning += \"; \" + create_warning;\n+    }\n+\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", warning);"
      },
      {
        "sha": "e302e499f46e2a1898d485fd8bad72fe21b7e489",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5d37873677551caac34752214dd491f5278c8d5/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5d37873677551caac34752214dd491f5278c8d5/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=c5d37873677551caac34752214dd491f5278c8d5",
        "patch": "@@ -116,11 +116,20 @@ def run_test(self):\n         walletinfo = w6.getwalletinfo()\n         assert_equal(walletinfo['keypoolsize'], 1)\n         assert_equal(walletinfo['keypoolsize_hd_internal'], 1)\n-        # Empty passphrase, error\n-        assert_raises_rpc_error(-16, 'Cannot encrypt a wallet with a blank password', self.nodes[0].createwallet, 'w7', False, False, '')\n+        # Allow empty passphrase, but there should be a warning\n+        resp = self.nodes[0].createwallet(wallet_name='w7', disable_private_keys=False, blank=False, passphrase='')\n+        assert_equal(resp['warning'], 'Empty string given as passphrase, wallet will not be encrypted.')\n+        w7 = node.get_wallet_rpc('w7')\n+        assert_raises_rpc_error(-15, 'Error: running with an unencrypted wallet, but walletpassphrase was called.', w7.walletpassphrase, '', 10)\n+\n+        self.log.info('Test making a wallet with avoid reuse flag')\n+        self.nodes[0].createwallet('w8', False, False, '', True) # Use positional arguments to check for bug where avoid_reuse could not be set for wallets without needing them to be encrypted\n+        w8 = node.get_wallet_rpc('w8')\n+        assert_raises_rpc_error(-15, 'Error: running with an unencrypted wallet, but walletpassphrase was called.', w7.walletpassphrase, '', 10)\n+        assert_equal(w8.getwalletinfo()[\"avoid_reuse\"], True)\n \n         self.log.info('Using a passphrase with private keys disabled returns error')\n-        assert_raises_rpc_error(-4, 'Passphrase provided but private keys are disabled. A passphrase is only used to encrypt private keys, so cannot be used for wallets with private keys disabled.', self.nodes[0].createwallet, wallet_name='w8', disable_private_keys=True, passphrase='thisisapassphrase')\n+        assert_raises_rpc_error(-4, 'Passphrase provided but private keys are disabled. A passphrase is only used to encrypt private keys, so cannot be used for wallets with private keys disabled.', self.nodes[0].createwallet, wallet_name='w9', disable_private_keys=True, passphrase='thisisapassphrase')\n \n if __name__ == '__main__':\n     CreateWalletTest().main()"
      }
    ]
  }
]