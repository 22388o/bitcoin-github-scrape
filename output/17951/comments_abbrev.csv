DrahtBot,2020-01-17 17:28:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17477](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17477.html) (Remove the mempool's NotifyEntryAdded and N",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-575720638,575720638,
sipa,2020-01-19 15:52:50,"Is clearing when disconnecting necessary? The disconnected transactions are at least considered for re-inclusing into the mempool, so even if they don't make it in, wouldn't it make sense to keep considering them ""known""?\n\nI agree that clearing when disconnecting is the safe bet if we're not entirely sure about this.",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-576018447,576018447,
MarcoFalke,2020-01-19 16:37:02,"A reorg might change MTP and some mempool checks might depend on that time. So if the reorg changes MTP and ""forgets"" to include a tx that was previously included in a block, it is now neither in the chain, nor in the mempool, nor can it be relayed.",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-576022423,576022423,
sdaftuar,2020-01-19 17:08:46,"@sipa Yes I think something like @MarcoFalke's example is right, or even for a simple example of something that is added back to the mempool as part of the reorg but then evicted when the mempool is trimmed (due to feerate).  Unlike the recentRejects filter which is cleared every block, the recent_confirmed_transactions is (otherwise) never cleared, so something that gets inadvertently stuck in it",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-576025217,576025217,
sdaftuar,2020-01-22 13:51:55,"Discussed this a bit with @marcofalke yesterday, and after further thought, I think the false positive rate for this filter should be fine.  The only use case that I think could be somewhat materially impacted would be if you have a bitcoind node acting as a gateway to the network, and a wallet behind it that is broadcasting transactions through it, then it's possible that a false positive in this",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-577190960,577190960,
gmaxwell,2020-01-26 20:44:58,"These low FP rate bloom filters are pretty slow, how much does this slow down block acceptance?\n\nMight it just be better to keep a limited map of txids recently removed entirely from the txout set?",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-578541366,578541366,
jamesob,2020-01-27 15:15:22,"> how much does this slow down block acceptance?\n\nShouldn't slow down block acceptance at all since this is being run on the validation interface thread.",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-578796182,578796182,
sdaftuar,2020-01-27 15:48:23,"> These low FP rate bloom filters are pretty slow, how much does this slow down block acceptance?\n\n@gmaxwell My thought was that the speed shouldn't be a big deal because the `BlockConnected` callback happens in a background thread, out of the critical path of block acceptance.\n\n> Might it just be better to keep a limited map of txids recently removed entirely from the txout set?\n\nPoss",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-578811507,578811507,
sdaftuar,2020-01-27 18:48:35,"Pushed a fixup commit to address the comment nits (and a second commit to fix the naming nit, which I missed the first time).",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-578894659,578894659,
sdaftuar,2020-01-29 14:40:24,"Squashed the nit commits.  I'm inclined to leave the resetting of the filter on a reorg alone, as I think what is proposed here should be fine; please let me know if there's anything else I should address (particularly if the bloom filter approach seems problematic overall for some reason?).",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-579785582,579785582,
MarcoFalke,2020-01-29 19:13:35,"Will try to test this a bit in the next week or so.\n\nre-ACK a029e18c2b only stylistic and comment fixups üç¥\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK a029e18c2b only stylistic and comment fixups üç¥\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYEACg",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-579913422,579913422,
JeremyRubin,2020-01-30 21:46:29,"General concept ACK.\n\nTo address concerns with the RollingBloomFilter:\n\nIt would take up a bit more space, but this can also be a good place to reuse the cuckoocache. \n\nThe original uses ((ceil(-1.0 * 20 * (24000/2*3) / log(1.0 - exp(log(0.000001) / 20))) +63)>>6)<<1 = 32350 bytes\n\nCuckoocache would need:\n6*4000*32.25/(32350) = 24x more space, but still under a megabyte.\n\nUsi",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580475601,580475601,
gmaxwell,2020-01-31 00:27:12,"@sdaftuar okay, if its not on a critical path for mining a subsequent block my concern is withdrawn. I spent a half hour trying to figure out if it was but wasn't able to trace all the indirect control flow well enough to be confident.\n\n@JeremyRubin why not instantiate the the cuckoo filter with a more similar FP rate? then the memory overhead would be less and the other advantages would remai",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580525541,580525541,
sipa,2020-01-31 00:29:37,utACK a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b,https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580526195,580526195,
JeremyRubin,2020-01-31 00:57:19,"@gmaxwell \n\nGood point. The cuckoo cache only does *at most* 8 memory accesses to read (and it's biased a bit towards it being less -- let's say EV is 2 or 3 rather than 4, v.s. 20 for the bloom. That seems like a win.\n\nTurning up the False Positive is not possible for the cuckoocache as a true response is always true. There isn't an obvious way to add false positives to the current design",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580532366,580532366,
gmaxwell,2020-01-31 01:49:32,"@JeremyRubin use a shorter hash, if it collides you have a FP.  You can also turn down the number of parallel memory access for this case, as there isn't so much need to run the table at 90% full esp if the entries are short. 32 bit cells should still give a massifly lower FP rate...",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580545582,580545582,
JeremyRubin,2020-01-31 04:07:32,"Good point, didn't occur to me to use collisions in the input hash.\n\nIn this case I would recommend taking 4 chunks of 16 bits (from siphash or from truncated sha256) and storing that per element.\n\n16 bits is sufficient for 6 blocks worth of 4000 transactions (by sufficient I mean it can address a table of up to 65536 elements)\n\nYou then have 4 hash locations any element can be at, and",https://github.com/bitcoin/bitcoin/pull/17951#issuecomment-580572095,580572095,
TheBlueMatt,2020-01-17 18:36:30,nit: I presume this makes some kind of doc tools unhappy cause they will add docs to the cs and not the var.,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r368078174,368078174,src/net_processing.cpp
paymog,2020-01-18 20:30:01,should the parameters to the bloom filter be tunnable with commandline args?,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r368246927,368246927,src/net_processing.cpp
sdaftuar,2020-01-19 00:01:52,"I can't imagine why anyone would need to customize this parameter (it's not like we offered the ability to customize how many outputs we'd check in the cache, or the ability to customize the recentRejects filter).",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r368255598,368255598,src/net_processing.cpp
MarcoFalke,2020-01-19 02:10:34,nit: Globals should start with `g_` otherwise it might incorrectly look like they live on the stack (as opposed to the heap),https://github.com/bitcoin/bitcoin/pull/17951#discussion_r368259951,368259951,src/net_processing.cpp
ariard,2020-01-21 22:53:35,"To avoid the same false positive hitting most of the network at once, why not randomly clear `recent_confirmed_transactions` ? Or this should happen more or less with current rate of 1-block reorgs?",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r369287532,369287532,src/net_processing.cpp
sdaftuar,2020-01-22 13:55:16,"The goal is to not clear this filter, so that we have the last N (6-12?) blocks' worth of transactions in the filter, to avoid wasting bandwidth.\n\nFalse positives should already not be synchronized across the network because every filter is seeded with randomness, so no two nodes have the same filter calculations.",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r369571564,369571564,src/net_processing.cpp
sipa,2020-01-26 20:21:31,"Yeah, if you want to make a non-doxygen generic comment, use ""/*"" rather than ""/**"".",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371026761,371026761,src/net_processing.cpp
sipa,2020-01-26 20:25:02,"It seems possible to instead of wiping the filter entirely, there could be a way to ""eagerly"" delete the disconnected block's transactions from the filter (where eagerly implies that it will randomly delete too much - but that's still better than wiping entirely).\n\nI'm slightly uncomfortable still with reorgs having the ability to blow this cache away entirely, but don't see a way to use it in",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371026944,371026944,src/net_processing.cpp
sipa,2020-01-26 20:27:26,Add some comments to explain the parameter selection?,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371027081,371027081,src/net_processing.cpp
sdaftuar,2020-01-27 15:07:51,"Hm, I was trying to think what this might mean -- for a filter with N elements, I suppose one approach would be to just re-add the last (say) 1.5N transactions that appear in the most recent blocks leading to the tip back to the filter, in order to wipe the reorged block(s) out of the filter, without making the filter useless?\n\nIt'd be a bit annoying to do that, since only the last block is in",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371294027,371294027,src/net_processing.cpp
sipa,2020-01-27 17:08:29,"I mean going through the disconnected block's transaction, and setting all their bits to 0 in the filter.",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371367704,371367704,src/net_processing.cpp
sdaftuar,2020-01-27 18:48:08,Done.,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371416581,371416581,src/net_processing.cpp
sdaftuar,2020-01-27 18:49:07,Done.,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371417051,371417051,src/net_processing.cpp
gmaxwell,2020-01-28 00:23:34,"You can do the thing where you store rank.s When you insert you increase the rank of each bit to the current. When you query you ignore bits whos rank is too low. When the rank counter wraps, you make a pass over to adjust the ranks. E.g. say your counter is 8 bits and you want to remember the last 10 blocks. You start with all the data zeros. You start on rank 11, so every value has too low a ran",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r371555566,371555566,src/net_processing.cpp
JeremyRubin,2020-01-30 21:35:07,"This computes to a size that is above the max filter size FYI (maybe we should have a typesafe CRollingBloomFilter that compile time checks this, or allow passing in a custom max).",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r373205735,373205735,src/net_processing.cpp
sipa,2020-01-30 21:43:14,What max filter size are you talking about?,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r373209225,373209225,src/net_processing.cpp
JeremyRubin,2020-01-30 22:17:18,`static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes`,https://github.com/bitcoin/bitcoin/pull/17951#discussion_r373223850,373223850,src/net_processing.cpp
JeremyRubin,2020-01-30 22:20:11,"ooops, I based my review on CBloomFilter... need to go back and re-check the right class",https://github.com/bitcoin/bitcoin/pull/17951#discussion_r373225011,373225011,src/net_processing.cpp
