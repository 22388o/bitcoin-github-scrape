[
  {
    "sha": "a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDI5ZTE4YzJiZjY3ZGQwMDU1MmIwZjRiYmM4NWZhMmZhNWI5NzNi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-17T16:43:11Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-01-29T14:37:21Z"
      },
      "message": "Use rolling bloom filter of recent block tx's for AlreadyHave() check\n\nIn order to determine whether to download or process a relayed transaction, we\ntry to determine if we already have the transaction, either in the mempool, in\nour recently rejected filter, in our orphan pool, or already confirmed in the\nchain itself.\n\nPrior to this commit, the heuristic for checking the chain is based on whether\nthere's an output corresponding to the 0- or 1-index vout in our coin cache.\nWhile that is a quick check, it is very imprecise (say if those outputs were\nalready spent in a block) -- we can do better by just keeping a rolling bloom\nfilter of the transactions in recent blocks, which will capture the case of a\ntransaction which has been confirmed and then fully spent already.\n\nTo avoid relay problems for transactions which have been included in a recent\nblock but then reorged out of the chain, we clear the bloom filter whenever a\nblock is disconnected.",
      "tree": {
        "sha": "813c7746c6795e0bae89ca162ebaac6fca80a6be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/813c7746c6795e0bae89ca162ebaac6fca80a6be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0deba680646fc5c2bd4ead59933605970ae80995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0deba680646fc5c2bd4ead59933605970ae80995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0deba680646fc5c2bd4ead59933605970ae80995"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 69,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f00f9a70f0f541016a53e837acedfb9ea8511520",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 25,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
        "patch": "@@ -148,6 +148,14 @@ namespace {\n     std::unique_ptr<CRollingBloomFilter> recentRejects GUARDED_BY(cs_main);\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n+    /*\n+     * Filter for transactions that have been recently confirmed.\n+     * We use this to avoid requesting transactions that have already been\n+     * confirnmed.\n+     */\n+    RecursiveMutex g_cs_recent_confirmed_transactions;\n+    std::unique_ptr<CRollingBloomFilter> g_recent_confirmed_transactions GUARDED_BY(g_cs_recent_confirmed_transactions);\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -1116,6 +1124,16 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n+    // Blocks don't typically have more than 4000 transactions, so this should\n+    // be at least six blocks (~1 hr) worth of transactions that we can store.\n+    // If the number of transactions appearing in a block goes up, or if we are\n+    // seeing getdata requests more than an hour after initial announcement, we\n+    // can increase this number.\n+    // The false positive rate of 1/1M should come out to less than 1\n+    // transaction per day that would be inadvertently ignored (which is the\n+    // same probability that we have in the reject filter).\n+    g_recent_confirmed_transactions.reset(new CRollingBloomFilter(24000, 0.000001));\n+\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Stale tip checking and peer eviction are on two different timers, but we\n     // don't want them to get out of sync due to drift in the scheduler, so we\n@@ -1129,36 +1147,59 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n  * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n  * block. Also save the time of the last tip update.\n  */\n-void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n-    LOCK(g_cs_orphans);\n+void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted)\n+{\n+    {\n+        LOCK(g_cs_orphans);\n \n-    std::vector<uint256> vOrphanErase;\n+        std::vector<uint256> vOrphanErase;\n \n-    for (const CTransactionRef& ptx : pblock->vtx) {\n-        const CTransaction& tx = *ptx;\n+        for (const CTransactionRef& ptx : pblock->vtx) {\n+            const CTransaction& tx = *ptx;\n \n-        // Which orphan pool entries must we evict?\n-        for (const auto& txin : tx.vin) {\n-            auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n-            if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n-            for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-                const CTransaction& orphanTx = *(*mi)->second.tx;\n-                const uint256& orphanHash = orphanTx.GetHash();\n-                vOrphanErase.push_back(orphanHash);\n+            // Which orphan pool entries must we evict?\n+            for (const auto& txin : tx.vin) {\n+                auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n+                if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+                for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                    const CTransaction& orphanTx = *(*mi)->second.tx;\n+                    const uint256& orphanHash = orphanTx.GetHash();\n+                    vOrphanErase.push_back(orphanHash);\n+                }\n             }\n         }\n-    }\n \n-    // Erase orphan transactions included or precluded by this block\n-    if (vOrphanErase.size()) {\n-        int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n-            nErased += EraseOrphanTx(orphanHash);\n+        // Erase orphan transactions included or precluded by this block\n+        if (vOrphanErase.size()) {\n+            int nErased = 0;\n+            for (const uint256& orphanHash : vOrphanErase) {\n+                nErased += EraseOrphanTx(orphanHash);\n+            }\n+            LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n+        }\n+\n+        g_last_tip_update = GetTime();\n+    }\n+    {\n+        LOCK(g_cs_recent_confirmed_transactions);\n+        for (const auto ptx : pblock->vtx) {\n+            g_recent_confirmed_transactions->insert(ptx->GetHash());\n         }\n-        LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n+}\n \n-    g_last_tip_update = GetTime();\n+void PeerLogicValidation::BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex)\n+{\n+    // To avoid relay problems with transactions that were previously\n+    // confirmed, clear our filter of recently confirmed transactions whenever\n+    // there's a reorg.\n+    // This means that in a 1-block reorg (where 1 block is disconnected and\n+    // then another block reconnected), our filter will drop to having only one\n+    // block's worth of transactions in it, but that should be fine, since\n+    // presumably the most common case of relaying a confirmed transaction\n+    // should be just after a new block containing it is found.\n+    LOCK(g_cs_recent_confirmed_transactions);\n+    g_recent_confirmed_transactions->reset();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -1311,12 +1352,14 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n                 LOCK(g_cs_orphans);\n                 if (mapOrphanTransactions.count(inv.hash)) return true;\n             }\n-            const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n+\n+            {\n+                LOCK(g_cs_recent_confirmed_transactions);\n+                if (g_recent_confirmed_transactions->contains(inv.hash)) return true;\n+            }\n \n             return recentRejects->contains(inv.hash) ||\n-                   mempool.exists(inv.hash) ||\n-                   coins_cache.HaveCoinInCache(COutPoint(inv.hash, 0)) || // Best effort: only try output 0 and 1\n-                   coins_cache.HaveCoinInCache(COutPoint(inv.hash, 1));\n+                   mempool.exists(inv.hash);\n         }\n     case MSG_BLOCK:\n     case MSG_WITNESS_BLOCK:"
      },
      {
        "sha": "6f26abc209ee8183eb21b1a4f60ff1ffabcb06a3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a029e18c2bf67dd00552b0f4bbc85fa2fa5b973b",
        "patch": "@@ -33,6 +33,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n      * Overridden from CValidationInterface.\n      */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n     /**\n      * Overridden from CValidationInterface.\n      */"
      }
    ]
  }
]