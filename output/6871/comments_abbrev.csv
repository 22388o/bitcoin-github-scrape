gmaxwell,2015-10-22T22:13:46Z,"Feedback I heard from wallet vendors previously was that FSS was burdensome (needed extra txins, and so less useful).\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150370804,150370804,
petertodd,2015-10-22T22:16:07Z,@gmaxwell Same feedback I've heard too.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150371262,150371262,
TheBlueMatt,2015-10-22T22:37:23Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150375556,150375556,
btcdrak,2015-10-22T22:48:16Z,Concept ACK. \n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377435,150377435,
dcousens,2015-10-22T22:50:02Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377726,150377726,
dcousens,2015-10-22T22:50:57Z,"How does this work with CPFP, and descendent transactions (e.g a chained transaction that could have its based replaced?)\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377871,150377871,
petertodd,2015-10-22T22:59:34Z,"@dcousens What do you mean ""how does this work"" with CPFP? CPFP isn't implemented in Bitcoin Core, so there's nothing to affect.\n\nNow, when replacing a tx with children, the fees and size of all children are taken into account before deciding to replace or not.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379108,150379108,
dcousens,2015-10-22T23:02:39Z,"> @dcousens What do you mean ""how does this work"" with CPFP? CPFP isn't implemented in Bitcoin Core, so there's nothing to affect.\n\nI meant conceptually, sorry.  CPFP is something that was on the roadmap AFAIK?\n\n> all children are taken into account before deciding to replace or not.\n\nBy taken into account, do you mean that you have to have a higher fee than all subsequent children to replac",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379560,150379560,
petertodd,2015-10-22T23:05:22Z,"> By taken into account, do you mean that you have to have a higher fee than all subsequent children?\n\nYes.\n\nOnly extremely sophisticated CPFP that does relaying of whole packages of transactions based on fees paid by children is affected by RBF, and no-one has any plans to actually implement that yet.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379993,150379993,
greenaddress,2015-10-23T06:51:13Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150491410,150491410,
rubensayshi,2015-10-23T09:24:01Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150526220,150526220,
jtimon,2015-10-23T11:28:39Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150548182,150548182,
instagibbs,2015-10-26T13:17:56Z,Concept ACK. FSS is a pain.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-151130336,151130336,
petertodd,2015-11-04T18:52:27Z,Added @sdaftuar's changes from https://github.com/petertodd/bitcoin/pull/4#issuecomment-152636458\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-153828785,153828785,
dcousens,2015-11-05T00:36:49Z,"Great work @sdaftuar on the added tests, once-over ACK\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-153916023,153916023,
btcdrak,2015-11-05T17:19:29Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-154127386,154127386,
laanwj,2015-11-10T16:50:50Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155483936,155483936,
jgarzik,2015-11-10T16:56:06Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155485328,155485328,
petertodd,2015-11-10T19:15:29Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155535756,155535756,
petertodd,2015-11-10T19:18:26Z,"Main question I have right now, is do we want to go with @sdaftuar's somewhat more complex, but more correct, code? (https://github.com/petertodd/bitcoin/commit/20367d831fe0fdb92678d03552866c266aabbd83) Or keep it simple?\n\nI'm happy with either way, and the code is written and looks good to me. Just a matter of risk tolerance.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155536453,155536453,
petertodd,2015-11-10T19:46:05Z,"Also, regarding the duplicated tests, I'm inclined to leave my ones in git history for historical reference in case questions come up later, but delete them from from the codebase soon in favor of @sdaftuar's. (possibly even in this pull-req) They're relatively ""battle-tested"" tests. :)\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155545632,155545632,
petertodd,2015-11-10T23:01:45Z,Fixed test failure due to not having pool.cs lock held.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155595438,155595438,
sipa,2015-11-11T07:32:56Z,This will enable replacement for BIP68 transactions?\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155693011,155693011,
petertodd,2015-11-11T10:39:28Z,@sipa Yup!\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155730787,155730787,
petertodd,2015-11-11T22:10:22Z,Incremental sendmany demo: https://github.com/petertodd/replace-by-fee-tools#incremental-send-many\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-155925679,155925679,
laanwj,2015-11-12T15:34:47Z,Code review ACK\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-156139953,156139953,
sdaftuar,2015-11-13T16:25:23Z,"After further thought I think we can hold the mempool lock for a bit less time.  I don't think it's possible for transactions to be added or removed from the mempool without holding `cs_main`, and ATMP holds `cs_main` the whole time.  So I think all we need to do so that the mempool shows a consistent view to any RPC calls that only grab the mempool lock is acquire the lock before calling `RemoveS",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-156479123,156479123,
petertodd,2015-11-13T18:57:33Z,"@sdaftuar That's a good point, though I think changing that should be done in a separate pull-req after this is merged.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-156523788,156523788,
btcdrak,2015-11-13T19:38:04Z,Upgraded to utACK.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-156537226,156537226,
dgenr8,2015-11-17T20:10:18Z,"Concept ACK, so far is this goes.  It can only help to allow spenders to declare their intention not to double-spend, or to keep the option open.\n\nIt will be unfortunate if wallets _silently_ make ""replaceable"" the default for new transactions.  This setting should be exposed and visible, although there are different ways it could be labeled.\n\ncc @jonasschnelli\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157491460,157491460,
luke-jr,2015-11-17T20:20:16Z,"In response to @dgenr8 's comment, I do think we need to make it very clear that there is still no such thing as technically ""declaring an intention not to double-spend"". Strongly prefer adding a full RBF option, even if unwise for miners to deploy today.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157495164,157495164,
petertodd,2015-11-17T21:30:53Z,"@dgenr8 The nSequence for opt-in is one that no wallets today use by default.\n\nIn any case, indicating an intention not to double-spend isn't something wallets should really be doing today, given their poor track record of not double-spending; there are many failure modes where wallets today will double-spend a transaction inadvertently, something you can easily see if you watch double-spend log",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157513575,157513575,
dgenr8,2015-11-17T22:04:16Z,"I think I can phrase my point better.  Allowing spenders to declare their intention to double-spend, if they should later so desire, is helpful to 0-conf-accepting receivers because they can be sure not to rely on the transaction before confirmation.\n\nThe 72-hour expiration that will soon be policy is also helpful because it gives a better option to those who have stuck transactions (even those ",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157523647,157523647,
jtimon,2015-11-17T22:14:51Z,"Well, with this you don't have to wait anything. You can pay more fees at any point to ""try again"", that's kind of the whole point of RBF.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157526464,157526464,
petertodd,2015-11-18T01:47:29Z,"@dgenr8 Does the advice ""wait 72 hours and try again"" even work right now in Bitcoin Core? IIRC we don't delete transactions from the wallet itself on that timeout.\n\nAnyway, while this pull-req doesn't change any wallet behavior, subsequent pull-reqs of course can of course add the required wallet code to unstick stuck transactions.\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157570808,157570808,
dgenr8,2015-11-18T14:58:50Z,@petertodd Opt-in and expiration both suggest new wallet functions:\n\nOn new tx:\n- [ ] Mark transaction as replaceable (receiver must wait for confirmation)\n\nOn replaceable or expired unconfirmed tx:\n- Send new version with higher fees\n- Send new version that pays myself instead  (permanently cancels original)\n- Forget [release inputs]\n\nOn forgotten transactions with inputs still unspent:,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157740068,157740068,
jtimon,2015-11-18T15:59:34Z,"@dgenr8 That analysis seems about right. I would personally prefer that the replaceable option was always true (on non-raw transactions, obviously) for Bitcoin Core. But those are changes to the wallet that as explained by @petertodd are out of the scope of this PR. \n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157758745,157758745,
CodeShark,2015-11-19T02:48:35Z,"concept ACK, haven't had time for code review\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-157932605,157932605,
jonasschnelli,2015-11-19T20:32:59Z,CodeReview ACK.\n(sidenote: it's always nice to review well documented PRs!)\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-158189462,158189462,
petertodd,2015-11-20T20:06:58Z,"@jonasschnelli Thanks! Yeah, apparently my life long dream was actually to become a technical writer, not a programmer. :)\n",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-158511352,158511352,
dcousens,2015-11-26T01:13:23Z,Is a higher sequence number still preferred?\nIn the case of a fee tie?\n\n> specifically both a higher fee per KB and a higher absolute fee\n\nOr only the higher fee?\n\nWhat is the behaviour if a transaction is broadcast with the sequence number `0xffffffff` after a transaction was already found that was 'opt-in'?\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-159772336,159772336,
petertodd,2015-11-26T01:16:54Z,"@dcousens Just higher fee. Ties get rejected to avoid them being used as a way to waste bandwidth.\n\nIf a nSequence > maxint-2 transaction is broadcast it is subject to the same rules as any other replacement; it won't get accepted without paying a (sufficiently) higher fee. That said, if it is accepted further replacements will be rejected. The replacement behavior is stateless, acting only on w",https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-159772689,159772689,
dcousens,2015-11-26T01:54:54Z,Thanks for clarifying that @petertodd :+1: \n\n@kristovatlas I wonder if the 'default' sequence number when opting into RBF should just be `0` then? \nJust thinking of the privacy implications.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-159778915,159778915,
petertodd,2015-11-26T02:00:45Z,@dcousens nSequence=0 makes sense from the perspective of https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki too.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-159780063,159780063,
kristovatlas,2015-11-27T22:31:45Z,@dcousens defaulting to nSequence=0 for the purpose of reducing wallet client fingerprintability makes sense to me.\n,https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-160222244,160222244,
sdaftuar,2015-10-23T20:55:39Z,"I'm not sure this comparison makes sense. The existence of a low-fee-rate descendant doesn't make a transaction worse for miners, but it would cause the feerate to look worse in this comparison.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42913338,42913338,src/main.cpp
petertodd,2015-10-23T23:03:07Z,"So, you mean the scenario where we have a high fee-rate transaction that is spent by one or more low fee-rate transactions? For instance suppose we have two transactions in our mempool: tx1a, 1KB w/ 1mBTC fee, which is spent by tx2, 10KB w/ 1mBTC fee. We get tx1b, 10KB w/ 2.1mBTC fee. Since the overall feerate of tx1b is higher than tx1a+tx2, it'll be accepted, even though a miner might have rathe",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42923364,42923364,src/main.cpp
sdaftuar,2015-10-26T17:25:03Z,"When I check out the commit referenced in the README and run the test, I get an error:\n`AttributeError: 'Proxy' object has no attribute 'generate'`\n\nI think this function is not defined in the Proxy class?  Adding it in the appropriate place in python-bitcoinlib seems to fix it.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43024249,43024249,qa/replace-by-fee/rbf-tests.py
sdaftuar,2015-10-26T17:25:13Z,"Any reason not to make this `const CTxIn &txin`, here and at line 832 below? \n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43024293,43024293,src/main.cpp
sdaftuar,2015-10-26T17:26:24Z,This could also be `const uint256 &hashAncestor`.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43024496,43024496,src/main.cpp
instagibbs,2015-10-26T17:30:34Z,"It's not included, no. You can just do a ""call"" instead. \n\n> proxy.call(""generate"", 1)\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43025108,43025108,qa/replace-by-fee/rbf-tests.py
sdaftuar,2015-10-26T17:34:32Z,"I think this logic needlessly overcounts the descendants.  Why not just call CalculateDescendants on the entries in setConflicts, and then loop over all of them?\n\nAssuming the replacing transaction is successful, you don't end up wasting any time, because you can pass the descendant set directly into RemoveStaged later.\n\nIf the replacing transaction were to fail, and we're worried about the am",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43025671,43025671,src/main.cpp
sdaftuar,2015-10-26T17:40:39Z,"nit: ""descendants""\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43026591,43026591,src/main.cpp
sdaftuar,2015-10-26T18:18:30Z,"Right, the distinction between ancestor and descendant package is what I was getting at.\n\nDescendant packages are I think the right thing to use for mempool limiting.  I don't follow what you're saying about a limiting algorithm that uses fee with ancestors -- it's entirely possible that the worst thing under that sort would have descendants in the mempool.\n\n(FYI I have a branch that implement",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43031583,43031583,src/main.cpp
sdaftuar,2015-10-26T18:28:13Z,"Just to add on to my comment above -- if you call `CalculateDescendants` above and use `RemoveStaged` here, then we don't have to copy all these transactions...\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43032924,43032924,src/main.cpp
petertodd,2015-10-30T01:51:05Z,Fixed.\n\nI forgot to add generate() when python-bitcoinlib dropped support for calling RPC commands implicitly; replaced with .call() so as to continue to use the official v0.5.0 release rather than git master.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465297,43465297,qa/replace-by-fee/rbf-tests.py
petertodd,2015-10-30T01:53:55Z,Good point! Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465406,43465406,src/main.cpp
petertodd,2015-10-30T01:54:00Z,Also fixed.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465409,43465409,src/main.cpp
petertodd,2015-10-30T02:00:08Z,"Well, I'm trying to keep this pull as simple as possible, while writing it in a way that isn't likely to lead to any DoS attacks; a previous version of this patch did do exactly what you suggest, but given that descendant tracking exists I figured I'd use it. (after all, I'm writing this patch pro bono)\n\nAs for your example where it would matter, that'd require wallets that attempted to both get",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465634,43465634,src/main.cpp
petertodd,2015-10-30T02:01:19Z,Fixed\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465684,43465684,src/main.cpp
petertodd,2015-10-30T02:02:05Z,"Agreed. Although again, I'm not worried about the case where the transactions do end up replaced; I'm worried about the possible DoS attack case where they aren't.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43465707,43465707,src/main.cpp
petertodd,2015-10-30T04:07:53Z,"Fixed both these issues.\n\nI decided not to do the max() version of this, as I think the requirement that the new fees > total-replaced-fees is sufficient; might help to get txs unstuck in some cases, and non-CPFP miners aren't evaluating that anyway.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r43470275,43470275,src/main.cpp
laanwj,2015-11-12T14:13:16Z,"I don't like hard-coding a commit ID here. It will go out of date very soon. If this requires v0.5.x, Can we do something like:\n\n```\ngit clone --branch 0.5 https://github.com/petertodd/python-bitcoinlib\n```\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r44660476,44660476,qa/replace-by-fee/README.md
petertodd,2015-11-12T19:03:54Z,"My thinking re: hard-coding is reproducability; if we're out of date, we should explicitly update it rather than implicitly.\n\nAlso, this set of tests will likely get removed fairly soon, and kept just for historical reference now that they've been mostly rewritten.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r44699335,44699335,qa/replace-by-fee/README.md
jtimon,2015-11-18T16:08:38Z,"Can't all this new code (1003 to 1140) be a new function?\nEDIT: since it uses the mempool, it's probably better that this doesn't move to policy.cpp yet. In main.cpp is fine, just apart from AcceptToMemoryPool().\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45219187,45219187,src/main.cpp
jonasschnelli,2015-11-19T20:30:43Z,(maybe out of scope for this PR)\n\nDo we need a new signal here? How can the wallet detect removed (or replaced) transactions? Maybe the signal needs to be emitted from `void CTxMemPool::RemoveStaged(setEntries &stage)` (or nearby) to also include the mempool limiting behavior.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45396057,45396057,src/main.cpp
MarcoFalke,2015-11-20T14:29:56Z,Agree with @jtimon . It's hard to read a function spanning over 400 lines not knowing which parts belong together.\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45473643,45473643,src/main.cpp
petertodd,2015-11-20T19:49:10Z,"We probably do. But yeah, I think adding that can wait for another pull-req; belongs as a wallet code change IMO, so might as well let whomever ends up writing that decide what they need.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45510187,45510187,src/main.cpp
petertodd,2015-11-20T20:05:16Z,"@jtimon Yeah, it's tricky though, because we reuse allConflicting later in the removal code for performance, and that in turn requires us to hold a lock; the way the code works isn't really modularized yet. That said compared to my previous patch we do at least take advantage of other mempool-related code, CalculateDescendants(), so we're a bit ahead.\n\nI'd be inclined to leave it as-is right now",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45512199,45512199,src/main.cpp
jtimon,2015-11-23T10:02:19Z,"I don't see how is tricky, if you need something inside the new function and in the caller, just pass it as reference. If you were holding the lock, well keep holding it, etc...It should be basically cut the code I said and paste it out as a (for now static) function, and adapt the parameters until it compiles, I think.\nOf course we can always leave refactors for later, but they often become hard",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45586305,45586305,src/main.cpp
jtimon,2015-11-23T12:16:49Z,"Wouldn't it be better to put the new code (from L987) after this check instead of before?\nIt would avoid doing further mempool validations for transactions that are going to be rejected by this check anyway.\nI know there can be transactions that would pass this check but be rejected as a replacement, but this check already has the inputs of the transaction cached, so it seems cheaper than the RB",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45597053,45597053,src/main.cpp
jtimon,2015-11-23T12:48:24Z,I was talking about something like this: https://github.com/jtimon/bitcoin/commit/f10b5317d21eea21375bb0da718dc98ee4e37452 but as said  I'm completely fine with not creating the new function yet (although now it would be almost free diff-wise).\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45599341,45599341,src/main.cpp
petertodd,2015-11-25T17:58:03Z,"You mean after the CheckInputs() line? The RBF code is just a bunch of pointer following of in-memory data, with limited depth and breadth, so it shouldn't be expensive code to run - remember that the mempool has tx fee and size data in the CTxMemPool structs.\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45898813,45898813,src/main.cpp
jtimon,2015-11-25T18:03:39Z,"Never mind, I misread this line for AreInputsStandard().\n",https://github.com/bitcoin/bitcoin/pull/6871#discussion_r45899404,45899404,src/main.cpp
rebroad,2016-08-25T08:08:57Z,The following was later removed by #7594\n,https://github.com/bitcoin/bitcoin/pull/6871#discussion_r76198016,76198016,src/main.cpp
