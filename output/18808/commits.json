[
  {
    "sha": "047ceac142246b5d51056a51dbf4645b31802be4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDdjZWFjMTQyMjQ2YjVkNTEwNTZhNTFkYmY0NjQ1YjMxODAyYmU0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T20:59:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T14:54:48Z"
      },
      "message": "[net processing] ignore tx GETDATA from blocks-only peers\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "841c241377b2b120b74f75a04dac6b2a8b49e3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/841c241377b2b120b74f75a04dac6b2a8b49e3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/047ceac142246b5d51056a51dbf4645b31802be4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047ceac142246b5d51056a51dbf4645b31802be4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/047ceac142246b5d51056a51dbf4645b31802be4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047ceac142246b5d51056a51dbf4645b31802be4/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eef90c14ed0f559e3f6e187341009270b84f45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eef90c14ed0f559e3f6e187341009270b84f45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eef90c14ed0f559e3f6e187341009270b84f45cb"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7561e269e3706cef055982bb6aeb7f79da88c9bf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/047ceac142246b5d51056a51dbf4645b31802be4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/047ceac142246b5d51056a51dbf4645b31802be4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=047ceac142246b5d51056a51dbf4645b31802be4",
        "patch": "@@ -1595,15 +1595,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    // Note that if we receive a getdata for a MSG_TX or MSG_WITNESS_TX from a\n-    // block-relay-only outbound peer, we will stop processing further getdata\n-    // messages from this peer (likely resulting in our peer eventually\n-    // disconnecting us).\n-    if (pfrom->m_tx_relay != nullptr) {\n-        // mempool entries added before this time have likely expired from mapRelay\n-        const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n-        const std::chrono::seconds mempool_req = pfrom->m_tx_relay->m_last_mempool_req.load();\n+    // mempool entries added before this time have likely expired from mapRelay\n+    const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n+    // Get last mempool request time\n+    const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n+                                                                          : std::chrono::seconds::min();\n \n+    {\n         LOCK(cs_main);\n \n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n@@ -1613,8 +1611,12 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (pfrom->fPauseSend)\n                 break;\n \n-            const CInv &inv = *it;\n-            it++;\n+            const CInv &inv = *it++;\n+\n+            if (pfrom->m_tx_relay == nullptr) {\n+                // Ignore GETDATA requests for transactions from blocks-only peers.\n+                continue;\n+            }\n \n             // Send stream from relay memory\n             bool push = false;"
      }
    ]
  },
  {
    "sha": "e257cf71c851e25e1a533bf1d4296f6b55c81332",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjU3Y2Y3MWM4NTFlMjVlMWE1MzNiZjFkNDI5NmY2YjU1YzgxMzMy",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T21:00:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T14:54:55Z"
      },
      "message": "[net processing] ignore unknown INV types in GETDATA messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "f1af2ca9f28e204aa0f874b89f89255162d58e76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1af2ca9f28e204aa0f874b89f89255162d58e76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e257cf71c851e25e1a533bf1d4296f6b55c81332",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257cf71c851e25e1a533bf1d4296f6b55c81332",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e257cf71c851e25e1a533bf1d4296f6b55c81332",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257cf71c851e25e1a533bf1d4296f6b55c81332/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "047ceac142246b5d51056a51dbf4645b31802be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/047ceac142246b5d51056a51dbf4645b31802be4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/047ceac142246b5d51056a51dbf4645b31802be4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "533966a07c23ad6555bae88e6540e459c5859877",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e257cf71c851e25e1a533bf1d4296f6b55c81332/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e257cf71c851e25e1a533bf1d4296f6b55c81332/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e257cf71c851e25e1a533bf1d4296f6b55c81332",
        "patch": "@@ -1645,18 +1645,14 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     } // release cs_main\n \n     if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n-        const CInv &inv = *it;\n+        const CInv &inv = *it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n-            it++;\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n         }\n+        // else: If the first item on the queue is an unknown type, we erase it\n+        // and continue processing the queue on the next call.\n     }\n \n-    // Unknown types in the GetData stay in vRecvGetData and block any future\n-    // message from this peer, see vRecvGetData check in ProcessMessages().\n-    // Depending on future p2p changes, we might either drop unknown getdata on\n-    // the floor or disconnect the peer.\n-\n     pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n \n     if (!vNotFound.empty()) {"
      }
    ]
  },
  {
    "sha": "2f032556e08a04807c71eb02104ca9589eaadf1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjAzMjU1NmUwOGEwNDgwN2M3MWViMDIxMDRjYTk1ODllYWFkZjFi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T21:52:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T23:34:01Z"
      },
      "message": "[test] test that an invalid GETDATA doesn't prevent processing of future messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>",
      "tree": {
        "sha": "f2a0a0994c1136b3f43031a910acb617731434b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2a0a0994c1136b3f43031a910acb617731434b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f032556e08a04807c71eb02104ca9589eaadf1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f032556e08a04807c71eb02104ca9589eaadf1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f032556e08a04807c71eb02104ca9589eaadf1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f032556e08a04807c71eb02104ca9589eaadf1b/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e257cf71c851e25e1a533bf1d4296f6b55c81332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257cf71c851e25e1a533bf1d4296f6b55c81332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e257cf71c851e25e1a533bf1d4296f6b55c81332"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd94a09d80269ac47bd705fa40cda256f33292c1",
        "filename": "test/functional/p2p_getdata.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f032556e08a04807c71eb02104ca9589eaadf1b/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f032556e08a04807c71eb02104ca9589eaadf1b/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=2f032556e08a04807c71eb02104ca9589eaadf1b",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test GETDATA processing behavior\"\"\"\n+from collections import defaultdict\n+\n+from test_framework.messages import (\n+    CInv,\n+    msg_getdata,\n+)\n+from test_framework.mininode import (\n+    mininode_lock,\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import wait_until\n+\n+class P2PStoreBlock(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.blocks = defaultdict(int)\n+\n+    def on_block(self, message):\n+        message.block.calc_sha256()\n+        self.blocks[message.block.sha256] += 1\n+\n+class GetdataTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PStoreBlock())\n+\n+        self.log.info(\"test that an invalid GETDATA doesn't prevent processing of future messages\")\n+\n+        # Send invalid message and verify that node responds to later ping\n+        invalid_getdata = msg_getdata()\n+        invalid_getdata.inv.append(CInv(t=0, h=0))  # INV type 0 is invalid.\n+        self.nodes[0].p2ps[0].send_and_ping(invalid_getdata)\n+\n+        # Check getdata still works by fetching tip block\n+        best_block = int(self.nodes[0].getbestblockhash(), 16)\n+        good_getdata = msg_getdata()\n+        good_getdata.inv.append(CInv(t=2, h=best_block))\n+        self.nodes[0].p2ps[0].send_and_ping(good_getdata)\n+        wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1, timeout=30, lock=mininode_lock)\n+\n+if __name__ == '__main__':\n+    GetdataTest().main()"
      },
      {
        "sha": "c60bc3761d2f72a5bd59d2a50a0477a030b3dcd9",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f032556e08a04807c71eb02104ca9589eaadf1b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f032556e08a04807c71eb02104ca9589eaadf1b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2f032556e08a04807c71eb02104ca9589eaadf1b",
        "patch": "@@ -151,6 +151,7 @@\n     'rpc_deprecated.py',\n     'wallet_disable.py',\n     'p2p_addr_relay.py',\n+    'p2p_getdata.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'wallet_keypool.py --descriptors',"
      }
    ]
  },
  {
    "sha": "9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODQ3ZTIwNWJmN2VkY2FjNGMzMGNlNGI2ZDYyZjQ4MmFhN2JjMWI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T00:28:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T23:34:01Z"
      },
      "message": "[docs] Improve commenting in ProcessGetData()",
      "tree": {
        "sha": "a7697064d028fb3e663ec879812b19226dfbcf62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7697064d028fb3e663ec879812b19226dfbcf62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f032556e08a04807c71eb02104ca9589eaadf1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f032556e08a04807c71eb02104ca9589eaadf1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f032556e08a04807c71eb02104ca9589eaadf1b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fbd2ccfd4246409d73fe22eca9354b799b2987e9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
        "patch": "@@ -1604,10 +1604,14 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     {\n         LOCK(cs_main);\n \n+        // Process as many TX items from the front of the getdata queue as\n+        // possible, since they're common and it's efficient to batch process\n+        // them.\n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n             if (interruptMsgProc)\n                 return;\n-            // Don't bother if send buffer is too full to respond anyway\n+            // The send buffer provides backpressure. If there's no space in\n+            // the buffer, pause processing until the next call.\n             if (pfrom->fPauseSend)\n                 break;\n \n@@ -1644,6 +1648,8 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n         }\n     } // release cs_main\n \n+    // Only process one BLOCK item per call, since they're uncommon and can be\n+    // expensive to process.\n     if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {"
      }
    ]
  }
]