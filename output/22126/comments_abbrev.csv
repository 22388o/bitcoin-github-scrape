dgoncharov,2021-06-02 12:20:16,Tested on linux.,https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-852979882,852979882,
dgoncharov,2021-06-02 12:31:48,"With this change applied the output of make -d in regards to target 'all' is the following.\n\nConsidering target file 'all'.\n File 'all' does not exist.\n Looking for an implicit rule for 'all'.\n No implicit rule found for 'all'.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-852987362,852987362,
amadeuszpawlik,2021-06-02 13:17:10,"> Because this build system does not use make builtin rules or suffixes\n\nWhat about the dependencies?",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853019413,853019413,
fanquake,2021-06-02 13:23:41,"> What about the dependencies?\n\nIndeed. This wont work for at least miniupnpc:\n```bash\nBuilding miniupnpc...\nmake[1]: Entering directory '/tmp/cirrus-ci-build/depends/work/build/x86_64-apple-darwin18/miniupnpc/2.2.2-19f39f7d911'\n/bin/sh updateminiupnpcstrings.sh\nmake[1]: *** No rule to make target 'addr_is_reserved.o', needed by 'libminiupnpc.a'.  Stop.\nmake[1]: *** Waiting for unf",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853024257,853024257,
dgoncharov,2021-06-02 13:53:35,"Indeed.\nWill add unexport.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853047677,853047677,
dgoncharov,2021-06-02 14:16:43,"One thing to consider about unexport of MAKEFLAGS is that it will prevent any flag to be propagated.\nWe'll need to have something like the following\n```\nsaved_makeflags:=$(MAKEFLAGS)\nMAKEFLAGS+=-r\nunexport MAKEFLAGS\n\n$($(1)_built): | $($(1)_configured)\n    $(AT)echo Building $(1)...\n    $(AT)mkdir -p $$(@D)\n    $(AT)+cd $$(@D); MAKEFLAGS=$(saved_makeflags) $($(1)_build_env) $(c",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853066729,853066729,
MarcoFalke,2021-06-03 07:25:33,Is this related to #22134?,https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853642799,853642799,
laanwj,2021-06-03 14:47:17,"Sorry, but I'm not convinced this is a worthwhile change. It adds extra settings for a very small gain. Can you at least quantify the performance win? I would not expect much of the build time to be spent in `make` itself.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-853927313,853927313,
dongcarl,2021-06-08 18:25:20,"> Sorry, but I'm not convinced this is a worthwhile change. It adds extra settings for a very small gain. Can you at least quantify the performance win? I would not expect much of the build time to be spent in `make` itself.\n\nI think the potential win here is not w/re performance, but w/re explicitness. I remember struggling with builtin variables and target definitions while working on https:",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-856995540,856995540,
dgoncharov,2021-06-09 01:46:01,"Performance wise -r helps when there is nothing to be built and your program needs to link a lot of libraries. -r helps each library a little bit.\nFor depends subsystem, -r won't affect performance much, especially given #22134.\n\n-r helps troubleshooting a lot.\n\nE.g. this is the difference in debugging output.\n```\n$ ls -l depends/packages/*.mk |wc\n     29     261    2398\n$ cat d.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-857307345,857307345,
dgoncharov,2021-06-09 01:48:08,"> Is this related to #22134?\n\nNot related.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-857308047,857308047,
DrahtBot,2021-06-09 07:27:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22811](https://github.com/bitcoin/bitcoin/pull/22811) (build: Fix depends build system when working with subtargets by h",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-857457180,857457180,
luke-jr,2021-06-12 18:19:06,"GNU Make says ```make will provide information necessary for accessing the jobserver through the environment to its children, in the MAKEFLAGS environment variable.```\n\nWon't this break that?",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-860090349,860090349,
dgoncharov,2021-06-13 21:06:57,"Options specified by the user on the command line are all exported to make's children.\nIncluding -j and --jobserver-auth.\nThis change only prevents the -r flag, set in this very makefile, from being exported.\nIf the user specifies -r on the command line, then -r is exported.",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-860270177,860270177,
dongcarl,2021-06-16 16:09:35,"Concept ACK\n- Our `depends/` system in itself (not including the sub-makes it calls) does not (and likely _should_ not) use any of the built-in rules/definitions, and the current changeset limits the effect of the `-r` to only depends itself and not its sub-makes (this is why miniupnpc still builds)\n- All UNIX make implementations (GNU and BSD) support the `-r` flag (apparently there is no bus",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-862511088,862511088,
dgoncharov,2021-06-18 13:15:21,"i added a test package here https://github.com/dgoncharov/bitcoin/tree/test_package.\nIf you checkout this branch, you can see the value of MAKEFLAGS, that make passes to its children.\nE.g.\n\n\n```\n$ TEST=1 make test_configured -k -j2 --no-print-directory \nExtracting test...\nPreprocessing test...\nConfiguring test...\nin print_makeflags.mk MAKEFLAGS=k --no-print-directory\nin print",https://github.com/bitcoin/bitcoin/pull/22126#issuecomment-864030987,864030987,
