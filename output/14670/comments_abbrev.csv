jnewbery,2018-11-06T15:07:20Z,@promag can you explain how this is different from #13501 and what the reasoning was for closing that PR?,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436285128,436285128,
MarcoFalke,2018-11-06T15:08:57Z,This is now the trillionth attempt in fixing the issue. Could you provide some rationale how this is different from the other approaches and why it should be preferred over the other ones?,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436285740,436285740,
ryanofsky,2018-11-06T15:38:28Z,"This is simpler than #13501, and if it works I think it is preferable. Instead of trying to wait for all reply data to be sent before stopping the event loop and calling `evhttp_free`, it lets `evhttp_free` worry about this and stop the event loop itself. Assuming `http_free` does the right thing, this is a cleaner and less invasive.\n\nI am curious what exactly the behavior of `evhttp_free` is.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436296906,436296906,
ryanofsky,2018-11-06T16:07:37Z,"It seems like `evhttp_free` just immediately calls `shutdown` and `close` on all open connections, so I would expect this change not to always fix #11777. \n\nhttps://github.com/libevent/libevent/blob/9afe7a6c12c112a6cbc49cf1bd684781275b2579/http.c#L1243\nhttps://github.com/libevent/libevent/blob/9afe7a6c12c112a6cbc49cf1bd684781275b2579/http.c#L3721\n\nBut maybe the `WriteHeader(""Connection"",",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436308425,436308425,
DrahtBot,2018-11-06T17:57:15Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14726](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14726.html) (Use RPCHelpMan for all RPCs by MarcoFalke)\",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436347520,436347520,
promag,2018-11-07T03:19:02Z,"@ryanofsky right, can't call `evhttp_free` with ongoing requests.\n\nUpdated code and PR description, should be more clear of the current problem and the approach used.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436490876,436490876,
promag,2018-11-07T09:33:08Z,"Split in multiple commits for easy review.\n\nIt can be arguable to remove the timeout but IMO it's safe because:\n - if an HTTP worker is with a long task then calling `event_base_loopbreak` is no good\n - active connections will timeout and close if no request/response happens (30 seconds by default).\n\nThis can be observed by:\n```\nbitcoind -regtest\ntime nc localhost 18443\nbitcoin",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436561767,436561767,
ryanofsky,2018-11-07T15:12:24Z,"Can you update the PR description to describe the change in external *behavior* instead of diving immediately into details of the code?\n\nIt would also help if each individual commit stated how it changes behavior, and why the change makes sense by itself or in conjunction with other changes.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436656246,436656246,
promag,2018-11-07T16:56:17Z,"> describe the change in external _behavior_\n\n@ryanofsky sorry I don't understand what you mean with external behavior.\n\n> and why the change makes sense by itself or in conjunction with other changes\n\nI think I did?\n\n> It would also help if each individual commit stated how it changes behavior\n\nWill do.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436696150,436696150,
MarcoFalke,2018-11-07T17:00:20Z,I think external behaviour means the behaviour users or json-rpc-wrapper libraries see.,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436697708,436697708,
ryanofsky,2018-11-07T17:26:27Z,"What will happen if bitcoin is in the middle of sending a large response to a slow client and it gets shutdown? Will it try to send as much as of the reply as possible but give up after a timeout? Will it stop sending immediately? Will it wait forever? Previous versions of this PR have done a bunch of different things, so what externally observable changes is this PR is intending to make? I think ",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436706974,436706974,
promag,2018-11-07T22:52:42Z,"@ryanofsky still testing but I believe it waits until HTTP request finishes or timeouts due to inactivity on the connection. In detail this means:\n - completes reading the request headers and body\n - worker computes full response and adds event to send the response\n - the response is sent and then the connection is finally closed\n - at this point, if it's the last connection, the event loo",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-436807513,436807513,
laanwj,2018-11-20T09:24:30Z,"> Can you update the PR description to describe the change in external behavior instead of diving immediately into details of the code?\n\nAlso, can we please add a test that fails without this, but passes with it? That's the best way to ""prove"" that this fixes something.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-440202291,440202291,
promag,2018-11-20T18:16:04Z,"- [x] ef7c54c1e - rpc: Add wait argument to stop\n- [ ] 8589891ea - http: Send ""Connection: close"" header if shutdown is requested\n- [ ] e10898267 - http: Unlisten sockets after all workers quit\n- [ ] b1f241a0f - http: Remove unnecessary event_base_loopexit call\n- [ ] a72fbc8aa - http: Remove timeout to exit event loop\n- [x] c76cde3c9 - qa: Test shutdown\n\n@laanwj if you build only the",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-440377679,440377679,
promag,2018-11-21T09:40:05Z,"Thanks @ken2812221, I was going to try something along that after inspecting `stop_node` implementation.\n\n@laanwj in order to properly test the fix, and to trigger the ""race to exit the event loop"", I had to add `wait` argument to `stop` RPC as explained in https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-398219913.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-440598767,440598767,
laanwj,2018-11-21T10:17:10Z,"@promag Makes sense, thanks for adding a test!\n",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-440610114,440610114,
promag,2018-11-22T10:18:11Z,"Sorry @ken2812221, just pushed what @laanwj suggested. I'll squash later.",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-440981902,440981902,
promag,2018-11-23T12:00:48Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-441223886,441223886,
laanwj,2018-12-06T16:39:00Z,utACK 28479f926f21f2a91bec5a06671c60e5b0c55532,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-444938721,444938721,
laanwj,2018-12-06T16:42:50Z,utACK 28479f926f21f2a91bec5a06671c60e5b0c55532,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-444940312,444940312,
ken2812221,2018-12-14T08:41:03Z,"Is this another HTTP server bug?\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/467883032\n\n```\nstdout:\n2018-12-14T08:34:22.452000Z TestFramework (INFO): Initializing test directory /tmp/test_runner_‚Çø_üèÉ_20181214_082355/feature_shutdown_0\n2018-12-14T08:34:24.197000Z TestFramework (INFO): Stopping nodes\n2018-12-14T08:34:24.197000Z TestFramework (INFO): Cleaning up /tmp/test_runner_‚Çø_üèÉ_20181",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-447255352,447255352,
promag,2018-12-14T08:57:50Z,At least it doesn't look. Looks more a race between the thread that runs `test_long_call` and `stop_node` ‚Äî if `stop_node` runs before then RPC would be unavailable. It seems unlikely because of the 1 second wait but it should be possible considering the probable load.,https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-447259562,447259562,
promag,2018-12-14T12:00:03Z,"Tested the change:\n```diff\ndiff --git a/test/functional/feature_shutdown.py b/test/functional/feature_shutdown.py\nindex 5a0c88546..b0df81736 100755\n--- a/test/functional/feature_shutdown.py\n+++ b/test/functional/feature_shutdown.py\n@@ -7,8 +7,11 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, get_rpc_proxy\n from th",https://github.com/bitcoin/bitcoin/pull/14670#issuecomment-447304513,447304513,
ken2812221,2018-11-07T13:19:06Z,I think you could have a flag and set it in `InterruptHTTPServer()`. Then you can detect the flag here.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231499618,231499618,src/httpserver.cpp
promag,2018-11-07T13:23:56Z,Why create redundancy?,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231501113,231501113,src/httpserver.cpp
ken2812221,2018-11-07T13:51:06Z,To keep consistency and have lesser dependencies. Logically this should happen after http server interrupted.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231509894,231509894,src/httpserver.cpp
promag,2018-11-07T16:54:27Z,"Ah I see, I'll do it.",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231589057,231589057,src/httpserver.cpp
promag,2018-11-08T00:43:25Z,"Actually I can't do that because that way the RPC `stop` reply won't get the `Connection: close` header ‚Äî between `StartShutdown()` and `InterruptHTTPServer()` can go around 200ms:\nhttps://github.com/bitcoin/bitcoin/blob/11e1ac3ae08535cefbd8235a8deb6cd100bcb2b1/src/bitcoind.cpp#L46-L54",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231731620,231731620,src/httpserver.cpp
ken2812221,2018-11-08T05:04:15Z,Ok. Let's use ShutdownRequested for now. Then we can switch to the flag if #13211 merged.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r231765943,231765943,src/httpserver.cpp
promag,2018-11-12T14:06:15Z,I don't think that helps in this case.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r232668544,232668544,src/httpserver.cpp
DrahtBot,2018-11-20T23:55:49Z,"nit: Could explicitly pass a timeout to waitfornewblock and inline as lambda:\n\n\n```py\nt = Thread(target=lambda: self.nodes[0].waitfornewblock(timeout=             ))",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235212277,235212277,test/functional/feature_shutdown.py
promag,2018-11-21T09:41:40Z,"Thanks, I've changed a bit the code and now I don't think this applies, please check again.",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235314007,235314007,test/functional/feature_shutdown.py
laanwj,2018-11-21T10:18:00Z,maybe mention that this is for testing purposes (unless there are other reasons this can be useful to users but can't really think of one),https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235327512,235327512,src/rpc/server.cpp
promag,2018-11-22T10:16:25Z,I also don't see a reason to use this argument.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235669138,235669138,src/rpc/server.cpp
MarcoFalke,2018-11-23T16:27:36Z,"Maybe don't put it in the help if it is only for testing? Also note that this has been a boolean argument in the past (first comment line in this function).\n\nSo just like we hide testing RPCs altogether, this argument should be hidden as well.\n\nCould append a line to the comment further up to mention that this is now a testing-only argument...",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235986719,235986719,src/rpc/server.cpp
promag,2018-11-23T16:33:48Z,"I see, thanks.",https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235987992,235987992,src/rpc/server.cpp
promag,2018-11-23T16:58:33Z,Done.,https://github.com/bitcoin/bitcoin/pull/14670#discussion_r235992872,235992872,src/rpc/server.cpp
