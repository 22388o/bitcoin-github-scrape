[
  {
    "sha": "08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGRkMWI3YmUxNzJmN2VhNTgwZGM5YmRmMjBhYzE1ZWE5YTJlZDMx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-22T19:27:24Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-24T13:43:55Z"
      },
      "message": "Qt: move paymentACK handling to paymentserver\n\n- add new slot handlePaymentACK() to paymentserver, which handles\n  paymentACK messages (currently we just display them)\n- make paymentACK message a modal information dialog\n- change some QObject::tr() to just tr()\n- clarify the processPaymentRequest() error, when IsDust()\n- small string change to prevent a tripple + usage with QString",
      "tree": {
        "sha": "3bb0eca41e4ba5928c56050f6ff097b611f633e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bb0eca41e4ba5928c56050f6ff097b611f633e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "faf923f06ad721846c35bcc76a7ed51cf03c318f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf923f06ad721846c35bcc76a7ed51cf03c318f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf923f06ad721846c35bcc76a7ed51cf03c318f"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "09f2a53680a998c589c156883b59ae9ac76bbd16",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
        "patch": "@@ -331,8 +331,6 @@ int main(int argc, char *argv[])\n                                  &window, SLOT(handlePaymentRequest(SendCoinsRecipient)));\n                 QObject::connect(&walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n                                  paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n-                QObject::connect(paymentServer, SIGNAL(receivedPaymentACK(QString)),\n-                                 &window, SLOT(showPaymentACK(QString)));\n                 QObject::connect(paymentServer, SIGNAL(message(QString,QString,unsigned int)),\n                                  guiref, SLOT(message(QString,QString,unsigned int)));\n                 QTimer::singleShot(100, paymentServer, SLOT(uiReady()));"
      },
      {
        "sha": "08ac37155647c1f3a3ba25b8a670bfd372580ec0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
        "patch": "@@ -763,11 +763,6 @@ void BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)\n     walletFrame->handlePaymentRequest(recipient);\n }\n \n-void BitcoinGUI::showPaymentACK(const QString& msg)\n-{\n-    message(tr(\"Payment acknowledged\"), GUIUtil::HtmlEscape(msg), CClientUIInterface::MODAL);\n-}\n-\n void BitcoinGUI::setEncryptionStatus(int status)\n {\n     switch(status)"
      },
      {
        "sha": "843d5aa76848aac2320bfe6eeb4442a2f7adf7cd",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
        "patch": "@@ -135,6 +135,7 @@ public slots:\n        @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n     */\n     void message(const QString &title, const QString &message, unsigned int style, bool *ret = NULL);\n+\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used.\n@@ -146,7 +147,6 @@ public slots:\n     void askFee(qint64 nFeeRequired, bool *payFee);\n \n     void handlePaymentRequest(const SendCoinsRecipient& recipient);\n-    void showPaymentACK(const QString& msg);\n \n     /** Show incoming transaction notification for new transactions. */\n     void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);"
      },
      {
        "sha": "fc8d9ad142d3a6d6eb7269bbfd6e95be9196c06b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
        "patch": "@@ -258,7 +258,7 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) : QObject(p\n \n     // Install global event filter to catch QFileOpenEvents\n     // on Mac: sent when you click bitcoin: links\n-    // other OSes: helpful when dealing with payment-request files (in the future)\n+    // other OSes: helpful when dealing with payment request files (in the future)\n     if (parent)\n         parent->installEventFilter(this);\n \n@@ -273,8 +273,10 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) : QObject(p\n \n         if (!uriServer->listen(name))\n             qDebug() << \"PaymentServer::PaymentServer : Cannot start bitcoin: click-to-pay handler\";\n-        else\n+        else {\n             connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n+            connect(this, SIGNAL(receivedPaymentACK(QString)), this, SLOT(handlePaymentACK(QString)));\n+        }\n     }\n \n     // netManager is null until uiReady() is called\n@@ -316,7 +318,7 @@ void PaymentServer::initNetManager()\n     // netManager is used to fetch paymentrequests given in bitcoin: URIs\n     netManager = new QNetworkAccessManager(this);\n \n-    // Use proxy settings from optionsModel:\n+    // Use proxy settings from optionsModel\n     QString proxyIP;\n     quint16 proxyPort;\n     if (optionsModel->getProxySettings(proxyIP, proxyPort))\n@@ -452,7 +454,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n     foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n-            QString msg = QObject::tr(\"Requested payment amount (%1) too small\")\n+            QString msg = tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second));\n \n             qDebug() << \"PaymentServer::processPaymentRequest : \" << msg;\n@@ -532,7 +534,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     payment.add_transactions(transaction.data(), transaction.size());\n \n     // Create a new refund address, or re-use:\n-    QString account = tr(\"Refund from\") + QString(\" \") + recipient.authenticatedMerchant;\n+    QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n     set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n@@ -574,9 +576,10 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n     reply->deleteLater();\n     if (reply->error() != QNetworkReply::NoError)\n     {\n-        QString msg = QObject::tr(\"Error communicating with %1: %2\")\n+        QString msg = tr(\"Error communicating with %1: %2\")\n             .arg(reply->request().url().toString())\n             .arg(reply->errorString());\n+\n         qDebug() << \"PaymentServer::netRequestFinished : \" << msg;\n         emit message(tr(\"Network request error\"), msg, CClientUIInterface::MSG_ERROR);\n         return;\n@@ -590,26 +593,28 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         PaymentRequestPlus request;\n         QList<SendCoinsRecipient> recipients;\n         if (request.parse(data) && processPaymentRequest(request, recipients)) {\n-            foreach (const SendCoinsRecipient& recipient, recipients){\n+            foreach (const SendCoinsRecipient& recipient, recipients) {\n                 emit receivedPaymentRequest(recipient);\n             }\n         }\n         else\n             qDebug() << \"PaymentServer::netRequestFinished : Error processing payment request\";\n+\n         return;\n     }\n     else if (requestType == \"PaymentACK\")\n     {\n         payments::PaymentACK paymentACK;\n         if (!paymentACK.ParseFromArray(data.data(), data.size()))\n         {\n-            QString msg = QObject::tr(\"Bad response from server %1\")\n+            QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n+\n             qDebug() << \"PaymentServer::netRequestFinished : \" << msg;\n             emit message(tr(\"Network request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else {\n-            emit receivedPaymentACK(QString::fromStdString(paymentACK.memo()));\n+            emit receivedPaymentACK(GUIUtil::HtmlEscape(paymentACK.memo()));\n         }\n     }\n }\n@@ -630,3 +635,9 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n {\n     this->optionsModel = optionsModel;\n }\n+\n+void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n+{\n+    // currently we don't futher process or store the paymentACK message\n+    emit message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n+}"
      },
      {
        "sha": "9f43571edcdbda411526b8275a735657e1e44e04",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=08dd1b7be172f7ea580dc9bdf20ac15ea9a2ed31",
        "patch": "@@ -88,7 +88,7 @@ class PaymentServer : public QObject\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n     // Fired when a valid PaymentACK is received\n-    void receivedPaymentACK(QString);\n+    void receivedPaymentACK(const QString &paymentACKMsg);\n \n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n@@ -105,6 +105,7 @@ private slots:\n     void handleURIConnection();\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);\n+    void handlePaymentACK(const QString& paymentACKMsg);\n \n private:\n     static bool readPaymentRequest(const QString& filename, PaymentRequestPlus& request);"
      }
    ]
  }
]