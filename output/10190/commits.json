[
  {
    "sha": "32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmNmZmU2YmVmODk3NGRiNmJmMTUzNmEyNGJjZThjMmIyMzA0YzUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:03:03Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Fix import order in getblocktemplate test",
      "tree": {
        "sha": "5c7264e0e18c3539939337ab14dfd753f8bf755a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c7264e0e18c3539939337ab14dfd753f8bf755a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c87a9c748be7121a240d81f9a5c6c988be6ffcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c87a9c748be7121a240d81f9a5c6c988be6ffcf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "304eaa20e97a584edca578e2241b09c77f021cc7",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32cffe6bef8974db6bf1536a24bce8c2b2304c52/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32cffe6bef8974db6bf1536a24bce8c2b2304c52/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "patch": "@@ -4,13 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n from binascii import a2b_hex, b2a_hex\n from hashlib import sha256\n from struct import pack\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n "
      }
    ]
  },
  {
    "sha": "0a3a5ff454643d148e5a68c12393fa4e187af157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTNhNWZmNDU0NjQzZDE0OGU1YTY4YzEyMzkzZmE0ZTE4N2FmMTU3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:05:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Fix flake8 warnings in getblocktemplate tests",
      "tree": {
        "sha": "1c45507a325ef4e5cef78bb42357286a2c39ab7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c45507a325ef4e5cef78bb42357286a2c39ab7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a3a5ff454643d148e5a68c12393fa4e187af157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32cffe6bef8974db6bf1536a24bce8c2b2304c52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32cffe6bef8974db6bf1536a24bce8c2b2304c52"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "51b4dc33e368590519269ed1000d8e803e052956",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a3a5ff454643d148e5a68c12393fa4e187af157/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a3a5ff454643d148e5a68c12393fa4e187af157/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=0a3a5ff454643d148e5a68c12393fa4e187af157",
        "patch": "@@ -43,7 +43,7 @@ def genmrklroot(leaflist):\n         if len(cur) & 1:\n             cur.append(cur[-1])\n         for i in range(0, len(cur), 2):\n-            n.append(dblsha(cur[i] + cur[i+1]))\n+            n.append(dblsha(cur[i] + cur[i + 1]))\n         cur = n\n     return cur[0]\n \n@@ -62,7 +62,7 @@ def template_to_hex(tmpl, txlist):\n     return b2x(template_to_bytearray(tmpl, txlist))\n \n def assert_template(node, tmpl, txlist, expect):\n-    rsp = node.getblocktemplate({'data':template_to_hex(tmpl, txlist),'mode':'proposal'})\n+    rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n     if rsp != expect:\n         raise AssertionError('unexpected: %s' % (rsp,))\n \n@@ -75,7 +75,8 @@ def __init__(self):\n \n     def run_test(self):\n         node = self.nodes[0]\n-        node.generate(1) # Mine a block to leave initial block download\n+        # Mine a block to leave initial block download\n+        node.generate(1)\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])\n@@ -88,16 +89,10 @@ def run_test(self):\n         # Test 0: Capability advertised\n         assert('proposal' in tmpl['capabilities'])\n \n-        # NOTE: This test currently FAILS (regtest mode doesn't enforce block height in coinbase)\n-        ## Test 1: Bad height in coinbase\n-        #txlist[0][4+1+36+1+1] += 1\n-        #assert_template(node, tmpl, txlist, 'FIXME')\n-        #txlist[0][4+1+36+1+1] -= 1\n-\n         # Test 2: Bad input hash for gen tx\n-        txlist[0][4+1] += 1\n+        txlist[0][4 + 1] += 1\n         assert_template(node, tmpl, txlist, 'bad-cb-missing')\n-        txlist[0][4+1] -= 1\n+        txlist[0][4 + 1] -= 1\n \n         # Test 3: Truncated final tx\n         lastbyte = txlist[-1].pop()\n@@ -111,7 +106,7 @@ def run_test(self):\n \n         # Test 5: Add an invalid tx to the end (non-duplicate)\n         txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4+1] = 0xff\n+        txlist[-1][4 + 1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n \n@@ -133,8 +128,8 @@ def run_test(self):\n \n         # Test 9: Bad merkle root\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n-        rawtmpl[4+32] = (rawtmpl[4+32] + 1) % 0x100\n-        rsp = node.getblocktemplate({'data':b2x(rawtmpl),'mode':'proposal'})\n+        rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n+        rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n         if rsp != 'bad-txnmrklroot':\n             raise AssertionError('unexpected: %s' % (rsp,))\n "
      }
    ]
  },
  {
    "sha": "38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGIzOGNkMmQxYThkYjhkNGJmNWJkODhlMWNiZDE0ZDY0MGM3M2M3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T17:10:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] getblocktemplate_proposals.py: add logging",
      "tree": {
        "sha": "794ce5261cd4fb524a6d12117d97c509f2af8cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/794ce5261cd4fb524a6d12117d97c509f2af8cd8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a3a5ff454643d148e5a68c12393fa4e187af157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a3a5ff454643d148e5a68c12393fa4e187af157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a3a5ff454643d148e5a68c12393fa4e187af157"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6fd5279b8e82ffc3754ea494d469a1c268911e58",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "patch": "@@ -86,65 +86,65 @@ def run_test(self):\n             tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n         txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n \n-        # Test 0: Capability advertised\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert('proposal' in tmpl['capabilities'])\n \n-        # Test 2: Bad input hash for gen tx\n+        self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         txlist[0][4 + 1] += 1\n         assert_template(node, tmpl, txlist, 'bad-cb-missing')\n         txlist[0][4 + 1] -= 1\n \n-        # Test 3: Truncated final tx\n+        self.log.info(\"getblocktemplate: Test truncated final transaction\")\n         lastbyte = txlist[-1].pop()\n         assert_raises_jsonrpc(-22, \"Block decode failed\", assert_template, node, tmpl, txlist, 'n/a')\n         txlist[-1].append(lastbyte)\n \n-        # Test 4: Add an invalid tx to the end (duplicate of gen tx)\n+        self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         txlist.append(txlist[0])\n         assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n         txlist.pop()\n \n-        # Test 5: Add an invalid tx to the end (non-duplicate)\n+        self.log.info(\"getblocktemplate: Test invalid transaction\")\n         txlist.append(bytearray(txlist[0]))\n         txlist[-1][4 + 1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n \n-        # Test 6: Future tx lock time\n+        self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n         txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n         assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n         txlist[0][-4:] = b'\\0\\0\\0\\0'\n \n-        # Test 7: Bad tx count\n+        self.log.info(\"getblocktemplate: Test bad tx count\")\n         txlist.append(b'')\n         assert_raises_jsonrpc(-22, 'Block decode failed', assert_template, node, tmpl, txlist, 'n/a')\n         txlist.pop()\n \n-        # Test 8: Bad bits\n+        self.log.info(\"getblocktemplate: Test bad bits\")\n         realbits = tmpl['bits']\n         tmpl['bits'] = '1c0000ff'  # impossible in the real world\n         assert_template(node, tmpl, txlist, 'bad-diffbits')\n         tmpl['bits'] = realbits\n \n-        # Test 9: Bad merkle root\n+        self.log.info(\"getblocktemplate: Test bad merkle root\")\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n         if rsp != 'bad-txnmrklroot':\n             raise AssertionError('unexpected: %s' % (rsp,))\n \n-        # Test 10: Bad timestamps\n+        self.log.info(\"getblocktemplate: Test bad timestamps\")\n         realtime = tmpl['curtime']\n         tmpl['curtime'] = 0x7fffffff\n         assert_template(node, tmpl, txlist, 'time-too-new')\n         tmpl['curtime'] = 0\n         assert_template(node, tmpl, txlist, 'time-too-old')\n         tmpl['curtime'] = realtime\n \n-        # Test 11: Valid block\n+        self.log.info(\"getblocktemplate: Test valid block\")\n         assert_template(node, tmpl, txlist, None)\n \n-        # Test 12: Orphan block\n+        self.log.info(\"getblocktemplate: Test not best block\")\n         tmpl['previousblockhash'] = 'ff00' * 16\n         assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')\n "
      }
    ]
  },
  {
    "sha": "66c570a38eb21153599f0478adc5a17ca9821a52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmM1NzBhMzhlYjIxMTUzNTk5ZjA0NzhhZGM1YTE3Y2E5ODIxYTUy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T19:09:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] Don't build the coinbase manually in getblocktemplate test",
      "tree": {
        "sha": "b670e8162e38b8b7d1fe2b8c2db22a9d38ddc113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b670e8162e38b8b7d1fe2b8c2db22a9d38ddc113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66c570a38eb21153599f0478adc5a17ca9821a52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38b38cd2d1a8db8d4bf5bd88e1cbd14d640c73c7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "82a82d01f221264ccba24212f30ccf9e6522ec6a",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c570a38eb21153599f0478adc5a17ca9821a52/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c570a38eb21153599f0478adc5a17ca9821a52/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=66c570a38eb21153599f0478adc5a17ca9821a52",
        "patch": "@@ -8,6 +8,7 @@\n from hashlib import sha256\n from struct import pack\n \n+from test_framework.blocktools import create_coinbase\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -78,13 +79,13 @@ def run_test(self):\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()\n-        if 'coinbasetxn' not in tmpl:\n-            rawcoinbase = encodeUNum(tmpl['height'])\n-            rawcoinbase += b'\\x01-'\n-            hexcoinbase = b2x(rawcoinbase)\n-            hexoutval = b2x(pack('<Q', tmpl['coinbasevalue']))\n-            tmpl['coinbasetxn'] = {'data': '01000000' + '01' + '0000000000000000000000000000000000000000000000000000000000000000ffffffff' + ('%02x' % (len(rawcoinbase),)) + hexcoinbase + 'fffffffe' + '01' + hexoutval + '00' + '00000000'}\n-        txlist = list(bytearray(a2b_hex(a['data'])) for a in (tmpl['coinbasetxn'],) + tuple(tmpl['transactions']))\n+        assert 'coinbasetxn' not in tmpl\n+\n+        coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n+        # sequence numbers must not be max for nLockTime to have effect\n+        coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n+        tmpl['coinbasetxn'] = {'data': coinbase_tx.serialize()}\n+        txlist = [bytearray(coinbase_tx.serialize())]\n \n         self.log.info(\"getblocktemplate: Test capability advertised\")\n         assert('proposal' in tmpl['capabilities'])"
      }
    ]
  },
  {
    "sha": "f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODJjNzA5ZmJlOWQxZTdhZTY0NmE2ZDNiNTM2OTcxYjQxMWM5MDZk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T19:13:09Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] clarify assertions in getblocktemplate test",
      "tree": {
        "sha": "ad36199d4451369d40bc1ed30b5d23486cae6bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad36199d4451369d40bc1ed30b5d23486cae6bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66c570a38eb21153599f0478adc5a17ca9821a52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c570a38eb21153599f0478adc5a17ca9821a52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66c570a38eb21153599f0478adc5a17ca9821a52"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "788e3ce2594b39901531c961618ce9343bd91611",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f82c709fbe9d1e7ae646a6d3b536971b411c906d/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f82c709fbe9d1e7ae646a6d3b536971b411c906d/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "patch": "@@ -64,8 +64,7 @@ def template_to_hex(tmpl, txlist):\n \n def assert_template(node, tmpl, txlist, expect):\n     rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n-    if rsp != expect:\n-        raise AssertionError('unexpected: %s' % (rsp,))\n+    assert_equal(rsp, expect)\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n@@ -88,7 +87,7 @@ def run_test(self):\n         txlist = [bytearray(coinbase_tx.serialize())]\n \n         self.log.info(\"getblocktemplate: Test capability advertised\")\n-        assert('proposal' in tmpl['capabilities'])\n+        assert 'proposal' in tmpl['capabilities']\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         txlist[0][4 + 1] += 1\n@@ -131,8 +130,7 @@ def run_test(self):\n         rawtmpl = template_to_bytearray(tmpl, txlist)\n         rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n         rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n-        if rsp != 'bad-txnmrklroot':\n-            raise AssertionError('unexpected: %s' % (rsp,))\n+        assert_equal(rsp, 'bad-txnmrklroot')\n \n         self.log.info(\"getblocktemplate: Test bad timestamps\")\n         realtime = tmpl['curtime']"
      }
    ]
  },
  {
    "sha": "82dc59706e3cf0184083ddc10a25674608235f48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmRjNTk3MDZlM2NmMDE4NDA4M2RkYzEwYTI1Njc0NjA4MjM1ZjQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:42:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] don't build blocks manually in getblocktemplate test",
      "tree": {
        "sha": "85794f65b918c23cd8c96f4d9ac3d0f2499dd720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85794f65b918c23cd8c96f4d9ac3d0f2499dd720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82dc59706e3cf0184083ddc10a25674608235f48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc59706e3cf0184083ddc10a25674608235f48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82c709fbe9d1e7ae646a6d3b536971b411c906d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f82c709fbe9d1e7ae646a6d3b536971b411c906d"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 57,
      "deletions": 92
    },
    "files": [
      {
        "sha": "a65d14ce064b0bff45dcf6cfdaa516b2ec5021ae",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 57,
        "deletions": 92,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82dc59706e3cf0184083ddc10a25674608235f48/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82dc59706e3cf0184083ddc10a25674608235f48/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=82dc59706e3cf0184083ddc10a25674608235f48",
        "patch": "@@ -4,66 +4,21 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n-from binascii import a2b_hex, b2a_hex\n-from hashlib import sha256\n-from struct import pack\n+from binascii import b2a_hex\n+import copy\n \n from test_framework.blocktools import create_coinbase\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import CBlock\n from test_framework.util import *\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n \n-# NOTE: This does not work for signed numbers (set the high bit) or zero (use b'\\0')\n-def encodeUNum(n):\n-    s = bytearray(b'\\1')\n-    while n > 127:\n-        s[0] += 1\n-        s.append(n % 256)\n-        n //= 256\n-    s.append(n)\n-    return bytes(s)\n-\n-def varlenEncode(n):\n-    if n < 0xfd:\n-        return pack('<B', n)\n-    if n <= 0xffff:\n-        return b'\\xfd' + pack('<H', n)\n-    if n <= 0xffffffff:\n-        return b'\\xfe' + pack('<L', n)\n-    return b'\\xff' + pack('<Q', n)\n-\n-def dblsha(b):\n-    return sha256(sha256(b).digest()).digest()\n-\n-def genmrklroot(leaflist):\n-    cur = leaflist\n-    while len(cur) > 1:\n-        n = []\n-        if len(cur) & 1:\n-            cur.append(cur[-1])\n-        for i in range(0, len(cur), 2):\n-            n.append(dblsha(cur[i] + cur[i + 1]))\n-        cur = n\n-    return cur[0]\n-\n-def template_to_bytearray(tmpl, txlist):\n-    blkver = pack('<L', tmpl['version'])\n-    mrklroot = genmrklroot(list(dblsha(a) for a in txlist))\n-    timestamp = pack('<L', tmpl['curtime'])\n-    nonce = b'\\0\\0\\0\\0'\n-    blk = blkver + a2b_hex(tmpl['previousblockhash'])[::-1] + mrklroot + timestamp + a2b_hex(tmpl['bits'])[::-1] + nonce\n-    blk += varlenEncode(len(txlist))\n-    for tx in txlist:\n-        blk += tx\n-    return bytearray(blk)\n-\n-def template_to_hex(tmpl, txlist):\n-    return b2x(template_to_bytearray(tmpl, txlist))\n-\n-def assert_template(node, tmpl, txlist, expect):\n-    rsp = node.getblocktemplate({'data': template_to_hex(tmpl, txlist), 'mode': 'proposal'})\n+def assert_template(node, block, expect, rehash=True):\n+    if rehash:\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+    rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n     assert_equal(rsp, expect)\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n@@ -78,74 +33,84 @@ def run_test(self):\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()\n+        self.log.info(\"getblocktemplate: Test capability advertised\")\n+        assert 'proposal' in tmpl['capabilities']\n         assert 'coinbasetxn' not in tmpl\n \n         coinbase_tx = create_coinbase(height=int(tmpl[\"height\"]) + 1)\n         # sequence numbers must not be max for nLockTime to have effect\n         coinbase_tx.vin[0].nSequence = 2 ** 32 - 2\n-        tmpl['coinbasetxn'] = {'data': coinbase_tx.serialize()}\n-        txlist = [bytearray(coinbase_tx.serialize())]\n+        coinbase_tx.rehash()\n \n-        self.log.info(\"getblocktemplate: Test capability advertised\")\n-        assert 'proposal' in tmpl['capabilities']\n+        block = CBlock()\n+        block.nVersion = tmpl[\"version\"]\n+        block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n+        block.nTime = tmpl[\"curtime\"]\n+        block.nBits = int(tmpl[\"bits\"], 16)\n+        block.nNonce = 0\n+        block.vtx = [coinbase_tx]\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n-        txlist[0][4 + 1] += 1\n-        assert_template(node, tmpl, txlist, 'bad-cb-missing')\n-        txlist[0][4 + 1] -= 1\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].vin[0].prevout.hash += 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-cb-missing')\n+\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        lastbyte = txlist[-1].pop()\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", assert_template, node, tmpl, txlist, 'n/a')\n-        txlist[-1].append(lastbyte)\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n-        txlist.append(txlist[0])\n-        assert_template(node, tmpl, txlist, 'bad-txns-duplicate')\n-        txlist.pop()\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx.append(bad_block.vtx[0])\n+        assert_template(node, bad_block, 'bad-txns-duplicate')\n \n         self.log.info(\"getblocktemplate: Test invalid transaction\")\n-        txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4 + 1] = 0xff\n-        assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n-        txlist.pop()\n+        bad_block = copy.deepcopy(block)\n+        bad_tx = copy.deepcopy(bad_block.vtx[0])\n+        bad_tx.vin[0].prevout.hash = 255\n+        bad_tx.rehash()\n+        bad_block.vtx.append(bad_tx)\n+        assert_template(node, bad_block, 'bad-txns-inputs-missingorspent')\n \n         self.log.info(\"getblocktemplate: Test nonfinal transaction\")\n-        txlist[0][-4:] = b'\\xff\\xff\\xff\\xff'\n-        assert_template(node, tmpl, txlist, 'bad-txns-nonfinal')\n-        txlist[0][-4:] = b'\\0\\0\\0\\0'\n+        bad_block = copy.deepcopy(block)\n+        bad_block.vtx[0].nLockTime = 2 ** 32 - 1\n+        bad_block.vtx[0].rehash()\n+        assert_template(node, bad_block, 'bad-txns-nonfinal')\n \n         self.log.info(\"getblocktemplate: Test bad tx count\")\n-        txlist.append(b'')\n-        assert_raises_jsonrpc(-22, 'Block decode failed', assert_template, node, tmpl, txlist, 'n/a')\n-        txlist.pop()\n+        # The tx count is immediately after the block header\n+        TX_COUNT_OFFSET = 80\n+        bad_block_sn = bytearray(block.serialize())\n+        assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n+        bad_block_sn[TX_COUNT_OFFSET] += 1\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n-        realbits = tmpl['bits']\n-        tmpl['bits'] = '1c0000ff'  # impossible in the real world\n-        assert_template(node, tmpl, txlist, 'bad-diffbits')\n-        tmpl['bits'] = realbits\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nBits = 469762303  # impossible in the real world\n+        assert_template(node, bad_block, 'bad-diffbits')\n \n         self.log.info(\"getblocktemplate: Test bad merkle root\")\n-        rawtmpl = template_to_bytearray(tmpl, txlist)\n-        rawtmpl[4 + 32] = (rawtmpl[4 + 32] + 1) % 0x100\n-        rsp = node.getblocktemplate({'data': b2x(rawtmpl), 'mode': 'proposal'})\n-        assert_equal(rsp, 'bad-txnmrklroot')\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashMerkleRoot += 1\n+        assert_template(node, bad_block, 'bad-txnmrklroot', False)\n \n         self.log.info(\"getblocktemplate: Test bad timestamps\")\n-        realtime = tmpl['curtime']\n-        tmpl['curtime'] = 0x7fffffff\n-        assert_template(node, tmpl, txlist, 'time-too-new')\n-        tmpl['curtime'] = 0\n-        assert_template(node, tmpl, txlist, 'time-too-old')\n-        tmpl['curtime'] = realtime\n+        bad_block = copy.deepcopy(block)\n+        bad_block.nTime = 2 ** 31 - 1\n+        assert_template(node, bad_block, 'time-too-new')\n+        bad_block.nTime = 0\n+        assert_template(node, bad_block, 'time-too-old')\n \n         self.log.info(\"getblocktemplate: Test valid block\")\n-        assert_template(node, tmpl, txlist, None)\n+        assert_template(node, block, None)\n \n         self.log.info(\"getblocktemplate: Test not best block\")\n-        tmpl['previousblockhash'] = 'ff00' * 16\n-        assert_template(node, tmpl, txlist, 'inconclusive-not-best-prevblk')\n+        bad_block = copy.deepcopy(block)\n+        bad_block.hashPrevBlock = 123\n+        assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n \n if __name__ == '__main__':\n     GetBlockTemplateProposalTest().main()"
      }
    ]
  },
  {
    "sha": "9bf0d80ab07ede52629960b2478beff55401a51b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmYwZDgwYWIwN2VkZTUyNjI5OTYwYjI0NzhiZWZmNTU0MDFhNTFi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:39:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] run successful test in getblocktemplate first",
      "tree": {
        "sha": "d1b7d719b5491ed4a97d45174e894bbce38cf8a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1b7d719b5491ed4a97d45174e894bbce38cf8a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf0d80ab07ede52629960b2478beff55401a51b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82dc59706e3cf0184083ddc10a25674608235f48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82dc59706e3cf0184083ddc10a25674608235f48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82dc59706e3cf0184083ddc10a25674608235f48"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "777b20212cd5380b4375fbe475b43697c1f99d09",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf0d80ab07ede52629960b2478beff55401a51b/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf0d80ab07ede52629960b2478beff55401a51b/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=9bf0d80ab07ede52629960b2478beff55401a51b",
        "patch": "@@ -50,6 +50,9 @@ def run_test(self):\n         block.nNonce = 0\n         block.vtx = [coinbase_tx]\n \n+        self.log.info(\"getblocktemplate: Test valid block\")\n+        assert_template(node, block, None)\n+\n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx[0].vin[0].prevout.hash += 1\n@@ -104,9 +107,6 @@ def run_test(self):\n         bad_block.nTime = 0\n         assert_template(node, bad_block, 'time-too-old')\n \n-        self.log.info(\"getblocktemplate: Test valid block\")\n-        assert_template(node, block, None)\n-\n         self.log.info(\"getblocktemplate: Test not best block\")\n         bad_block = copy.deepcopy(block)\n         bad_block.hashPrevBlock = 123"
      }
    ]
  },
  {
    "sha": "b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjlkZDQxZjBmODQ4MmZiNmRiYWE0ZjlmYTQ2OGFjNjYwNjlmMjA3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:42:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T14:51:37Z"
      },
      "message": "[tests] add test for submit block",
      "tree": {
        "sha": "12df4f089aeaa571be73c37b66f8e40126ddf03c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12df4f089aeaa571be73c37b66f8e40126ddf03c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bf0d80ab07ede52629960b2478beff55401a51b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf0d80ab07ede52629960b2478beff55401a51b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf0d80ab07ede52629960b2478beff55401a51b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "311d9197acaccd37a0f2b37c51cd3e2527a6a592",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "patch": "@@ -53,12 +53,17 @@ def run_test(self):\n         self.log.info(\"getblocktemplate: Test valid block\")\n         assert_template(node, block, None)\n \n+        self.log.info(\"submitblock: Test block decode failure\")\n+        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+\n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n         bad_block.vtx[0].vin[0].prevout.hash += 1\n         bad_block.vtx[0].rehash()\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n+        self.log.info(\"submitblock: Test invalid coinbase transaction\")\n+        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n         assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})"
      }
    ]
  },
  {
    "sha": "11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWJhOGU5Y2RkMjY1MjgzNWM2NTBiOWY3MmQ4NDIxZWExMGY0MTE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-11T20:47:10Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-27T15:02:18Z"
      },
      "message": "[tests] rename getblocktemplate_proposals.py to mining.py",
      "tree": {
        "sha": "45c61206020a215aaa5099d29fc3fd872d957987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c61206020a215aaa5099d29fc3fd872d957987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11ba8e9cdd2652835c650b9f72d8421ea10f4116",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11ba8e9cdd2652835c650b9f72d8421ea10f4116/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b29dd41f0f8482fb6dbaa4f9fa468ac66069f207"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "dbd4e29ecae80cb92f40b1964eee2a2863b69b4d",
        "filename": "test/functional/mining.py",
        "status": "renamed",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "patch": "@@ -2,7 +2,10 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test block proposals with getblocktemplate.\"\"\"\n+\"\"\"Test mining RPCs\n+\n+- getblocktemplate proposal mode\n+- submitblock\"\"\"\n \n from binascii import b2a_hex\n import copy\n@@ -21,7 +24,7 @@ def assert_template(node, block, expect, rehash=True):\n     rsp = node.getblocktemplate({'data': b2x(block.serialize()), 'mode': 'proposal'})\n     assert_equal(rsp, expect)\n \n-class GetBlockTemplateProposalTest(BitcoinTestFramework):\n+class MiningTest(BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n@@ -118,4 +121,4 @@ def run_test(self):\n         assert_template(node, bad_block, 'inconclusive-not-best-prevblk')\n \n if __name__ == '__main__':\n-    GetBlockTemplateProposalTest().main()\n+    MiningTest().main()",
        "previous_filename": "test/functional/getblocktemplate_proposals.py"
      },
      {
        "sha": "d411534ca2faa4d89d8acddd4454e76e4de69939",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11ba8e9cdd2652835c650b9f72d8421ea10f4116/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=11ba8e9cdd2652835c650b9f72d8421ea10f4116",
        "patch": "@@ -108,6 +108,7 @@\n     'signmessages.py',\n     'nulldummy.py',\n     'import-rescan.py',\n+    'mining.py',\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n@@ -140,7 +141,6 @@\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'example_test.py',\n-    'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n     'forknotify.py',"
      }
    ]
  }
]