[
  {
    "sha": "629d75faac84bc0a00533d01dd291a4e6394a51f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjlkNzVmYWFjODRiYzBhMDA1MzNkMDFkZDI5MWE0ZTYzOTRhNTFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-02T19:21:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T12:24:52Z"
      },
      "message": "Combine CCoinsViewCache's HaveCoins and const GetCoins into AccessCoins.\n\nThe efficient version of CCoinsViewCache::GetCoins only works for known-to-exist\ncache entries, requiring a separate HaveCoins call beforehand. This is\ninefficient as both perform a hashtable lookup.\n\nReplace the non-mutable GetCoins with AccessCoins, which returns a potentially-NULL\npointer. This also decreases the overloading of GetCoins.\n\nAlso replace some copying (inefficient) GetCoins calls with equivalent AccessCoins,\ndecreasing the copying.",
      "tree": {
        "sha": "b855afa03cefc473be513288880dbc1da34d8d1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b855afa03cefc473be513288880dbc1da34d8d1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/629d75faac84bc0a00533d01dd291a4e6394a51f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629d75faac84bc0a00533d01dd291a4e6394a51f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/629d75faac84bc0a00533d01dd291a4e6394a51f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629d75faac84bc0a00533d01dd291a4e6394a51f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8d92236f61699846f67d8ce6cb55458a46f9de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8d92236f61699846f67d8ce6cb55458a46f9de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8d92236f61699846f67d8ce6cb55458a46f9de1"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 54,
      "deletions": 51
    },
    "files": [
      {
        "sha": "c8cd9edfa45bce3e82b4ab5977f71bb2909e9c84",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -418,12 +418,12 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n         CTxIn& txin = mergedTx.vin[i];\n-        CCoins coins;\n-        if (!view.GetCoins(txin.prevout.hash, coins) || !coins.IsAvailable(txin.prevout.n)) {\n+        const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n+        if (!coins || !coins->IsAvailable(txin.prevout.n)) {\n             fComplete = false;\n             continue;\n         }\n-        const CScript& prevPubKey = coins.vout[txin.prevout.n].scriptPubKey;\n+        const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:"
      },
      {
        "sha": "34485db2bd298a1f377543080dbfa820a6f52500",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 20,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -110,9 +110,13 @@ CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n     return it->second;\n }\n \n-const CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) const {\n-    /* Avoid redundant implementation with the const-cast.  */\n-    return const_cast<CCoinsViewCache*>(this)->GetCoins(txid);\n+const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it == cacheCoins.end()) {\n+        return NULL;\n+    } else {\n+        return &it->second;\n+    }\n }\n \n bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n@@ -162,9 +166,9 @@ unsigned int CCoinsViewCache::GetCacheSize() const {\n \n const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n {\n-    const CCoins &coins = GetCoins(input.prevout.hash);\n-    assert(coins.IsAvailable(input.prevout.n));\n-    return coins.vout[input.prevout.n];\n+    const CCoins* coins = AccessCoins(input.prevout.hash);\n+    assert(coins && coins->IsAvailable(input.prevout.n));\n+    return coins->vout[input.prevout.n];\n }\n \n int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n@@ -182,19 +186,12 @@ int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n {\n     if (!tx.IsCoinBase()) {\n-        // first check whether information about the prevout hash is available\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n             const COutPoint &prevout = tx.vin[i].prevout;\n-            if (!HaveCoins(prevout.hash))\n-                return false;\n-        }\n-\n-        // then check whether the actual outputs are available\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins &coins = GetCoins(prevout.hash);\n-            if (!coins.IsAvailable(prevout.n))\n+            const CCoins* coins = AccessCoins(prevout.hash);\n+            if (!coins || !coins->IsAvailable(prevout.n)) {\n                 return false;\n+            }\n         }\n     }\n     return true;\n@@ -207,10 +204,11 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     double dResult = 0.0;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n-        const CCoins &coins = GetCoins(txin.prevout.hash);\n-        if (!coins.IsAvailable(txin.prevout.n)) continue;\n-        if (coins.nHeight < nHeight) {\n-            dResult += coins.vout[txin.prevout.n].nValue * (nHeight-coins.nHeight);\n+        const CCoins* coins = AccessCoins(txin.prevout.hash);\n+        assert(coins);\n+        if (!coins->IsAvailable(txin.prevout.n)) continue;\n+        if (coins->nHeight < nHeight) {\n+            dResult += coins->vout[txin.prevout.n].nValue * (nHeight-coins->nHeight);\n         }\n     }\n     return tx.ComputePriority(dResult);"
      },
      {
        "sha": "c25393f1e04cbbedf7d9d7006208130c02a2609b",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -344,11 +344,13 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n+    // Return a pointer to CCoins in the cache, or NULL if not found. This is\n+    // more efficient than GetCoins. Modifications to other cache entries are\n+    // allowed while accessing the returned pointer.\n+    const CCoins* AccessCoins(const uint256 &txid) const;\n+\n     // Return a modifiable reference to a CCoins. Check HaveCoins first.\n-    // Many methods explicitly require a CCoinsViewCache because of this method, to reduce\n-    // copying.\n     CCoins &GetCoins(const uint256 &txid);\n-    const CCoins &GetCoins(const uint256 &txid) const;\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten."
      },
      {
        "sha": "bea01ab7c974d494c27bb1af4fc88637df98997a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -1017,9 +1017,9 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n             int nHeight = -1;\n             {\n                 CCoinsViewCache &view = *pcoinsTip;\n-                CCoins coins;\n-                if (view.GetCoins(hash, coins))\n-                    nHeight = coins.nHeight;\n+                const CCoins* coins = view.AccessCoins(hash);\n+                if (coins)\n+                    nHeight = coins->nHeight;\n             }\n             if (nHeight > 0)\n                 pindexSlow = chainActive[nHeight];\n@@ -1371,19 +1371,20 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins &coins = inputs.GetCoins(prevout.hash);\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n \n             // If prev is coinbase, check that it's matured\n-            if (coins.IsCoinBase()) {\n-                if (nSpendHeight - coins.nHeight < COINBASE_MATURITY)\n+            if (coins->IsCoinBase()) {\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins.nHeight),\n+                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n-            nValueIn += coins.vout[prevout.n].nValue;\n-            if (!MoneyRange(coins.vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n                 return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n@@ -1413,10 +1414,11 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n-                const CCoins &coins = inputs.GetCoins(prevout.hash);\n+                const CCoins* coins = inputs.AccessCoins(prevout.hash);\n+                assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(coins, tx, i, flags, 0);\n+                CScriptCheck check(*coins, tx, i, flags, 0);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1428,7 +1430,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n-                        CScriptCheck check(coins, tx, i,\n+                        CScriptCheck check(*coins, tx, i,\n                                 flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, 0);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n@@ -1614,8 +1616,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-            const uint256& hash = tx.GetHash();\n-            if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n+            const CCoins* coins = view.AccessCoins(tx.GetHash());\n+            if (coins && !coins->IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }"
      },
      {
        "sha": "d05ddbeb1f8b39150e468eec088ffe6e43e43d0a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -167,12 +167,13 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                     nTotalIn += mempool.mapTx[txin.prevout.hash].GetTx().vout[txin.prevout.n].nValue;\n                     continue;\n                 }\n-                const CCoins &coins = view.GetCoins(txin.prevout.hash);\n+                const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n+                assert(coins);\n \n-                int64_t nValueIn = coins.vout[txin.prevout.n].nValue;\n+                int64_t nValueIn = coins->vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n-                int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n+                int nConf = pindexPrev->nHeight - coins->nHeight + 1;\n \n                 dPriority += (double)nValueIn * nConf;\n             }"
      },
      {
        "sha": "dc75caeabce42785f13080a3045befa0dc29157e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -565,7 +565,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n             const uint256& prevHash = txin.prevout.hash;\n             CCoins coins;\n-            view.GetCoins(prevHash, coins); // this is certainly allowed to fail\n+            view.AccessCoins(prevHash); // this is certainly allowed to fail\n         }\n \n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n@@ -669,12 +669,12 @@ Value signrawtransaction(const Array& params, bool fHelp)\n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n         CTxIn& txin = mergedTx.vin[i];\n-        CCoins coins;\n-        if (!view.GetCoins(txin.prevout.hash, coins) || !coins.IsAvailable(txin.prevout.n)) {\n+        const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n+        if (coins == NULL || !coins->IsAvailable(txin.prevout.n)) {\n             fComplete = false;\n             continue;\n         }\n-        const CScript& prevPubKey = coins.vout[txin.prevout.n].scriptPubKey;\n+        const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n \n         txin.scriptSig.clear();\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n@@ -732,9 +732,9 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         fOverrideFees = params[1].get_bool();\n \n     CCoinsViewCache &view = *pcoinsTip;\n-    CCoins existingCoins;\n+    const CCoins* existingCoins = view.AccessCoins(hashTx);\n     bool fHaveMempool = mempool.exists(hashTx);\n-    bool fHaveChain = view.GetCoins(hashTx, existingCoins) && existingCoins.nHeight < 1000000000;\n+    bool fHaveChain = existingCoins && existingCoins->nHeight < 1000000000;\n     if (!fHaveMempool && !fHaveChain) {\n         // push to local node and sync with wallets\n         CValidationState state;"
      },
      {
        "sha": "f059e69ac78bb38386eedfa4cc9f8e451bc2dd5e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/629d75faac84bc0a00533d01dd291a4e6394a51f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/629d75faac84bc0a00533d01dd291a4e6394a51f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=629d75faac84bc0a00533d01dd291a4e6394a51f",
        "patch": "@@ -509,8 +509,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n-                const CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n-                assert(coins.IsAvailable(txin.prevout.n));\n+                const CCoins* coins = pcoins->AccessCoins(txin.prevout.hash);\n+                assert(coins && coins->IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx.\n             std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);"
      }
    ]
  }
]