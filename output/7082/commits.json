[
  {
    "sha": "023bd5bced0ba2e3b702238136ca753e8bebc290",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjNiZDViY2VkMGJhMmUzYjcwMjIzODEzNmNhNzUzZThiZWJjMjkw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T03:48:54Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-24T10:00:23Z"
      },
      "message": "Do not absolutely protect local peers; decide group ties based on time.\n\nWith automatic tor HS support in place we should probably not be providing\n absolute protection for local peers, since HS inbound could be used to\n attack pretty easily.  Instead, this counts on the latency metric inside\n AttemptToEvictConnection to privilege actually local peers.\n\nThis makes sure that in the case of tying group size to select the group\n with the newest member, since newest time is the final selection\n criteria.",
      "tree": {
        "sha": "aeced0e03a8667ce86162b266e1c3a441ada3465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeced0e03a8667ce86162b266e1c3a441ada3465"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/023bd5bced0ba2e3b702238136ca753e8bebc290",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023bd5bced0ba2e3b702238136ca753e8bebc290",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/023bd5bced0ba2e3b702238136ca753e8bebc290",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023bd5bced0ba2e3b702238136ca753e8bebc290/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b0fc179ab8795463e0a0f07e989ec6f592a1f90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b0fc179ab8795463e0a0f07e989ec6f592a1f90"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ff9a1d2f4b552be0b9bc7083451454a77eaa862a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023bd5bced0ba2e3b702238136ca753e8bebc290/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023bd5bced0ba2e3b702238136ca753e8bebc290/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=023bd5bced0ba2e3b702238136ca753e8bebc290",
        "patch": "@@ -883,8 +883,6 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            if (node->addr.IsLocal())\n-                continue;\n             vEvictionCandidates.push_back(CNodeRef(node));\n         }\n     }\n@@ -915,30 +913,34 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Identify the network group with the most connections\n+    // Identify the network group with the most connections and youngest member.\n+    // (vEvictionCandidates is already sorted by reverse connect time)\n     std::vector<unsigned char> naMostConnections;\n     unsigned int nMostConnections = 0;\n+    int64_t nMostConnectionsTime = 0;\n     std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n     BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n         mapAddrCounts[node->addr.GetGroup()].push_back(node);\n+        int64_t grouptime = mapAddrCounts[node->addr.GetGroup()][0]->nTimeConnected;\n+        size_t groupsize = mapAddrCounts[node->addr.GetGroup()].size();\n \n-        if (mapAddrCounts[node->addr.GetGroup()].size() > nMostConnections) {\n-            nMostConnections = mapAddrCounts[node->addr.GetGroup()].size();\n+        if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n+            nMostConnections = groupsize;\n+            nMostConnectionsTime = grouptime;\n             naMostConnections = node->addr.GetGroup();\n         }\n     }\n \n     // Reduce to the network group with the most connections\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n-    // Do not disconnect peers if there is only 1 connection from their network group\n+    // Do not disconnect peers if there is only one unprotected connection from their network group.\n     if (vEvictionCandidates.size() <= 1)\n         // unless we prefer the new connection (for whitelisted peers)\n         if (!fPreferNewConnection)\n             return false;\n \n-    // Disconnect the most recent connection from the network group with the most connections\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    // Disconnect from the network group with the most connections\n     vEvictionCandidates[0]->fDisconnect = true;\n \n     return true;"
      }
    ]
  },
  {
    "sha": "db3f9560cc7b644b5a1dbed958f50b3d45140a12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjNmOTU2MGNjN2I2NDRiNWExZGJlZDk1OGY1MGIzZDQ1MTQwYTEy",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T08:05:01Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-24T10:01:03Z"
      },
      "message": "Make eviction more aggressive.\n\nThis makes eviction generally more aggressive by making it willing\n to evict the last unprotected peer in a netgroup if the new\n connection comes from a netgroup where we have no unprotected peers.",
      "tree": {
        "sha": "6fe187dc799a412518c5d4eb0700b5cdc3e090f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fe187dc799a412518c5d4eb0700b5cdc3e090f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db3f9560cc7b644b5a1dbed958f50b3d45140a12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3f9560cc7b644b5a1dbed958f50b3d45140a12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db3f9560cc7b644b5a1dbed958f50b3d45140a12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3f9560cc7b644b5a1dbed958f50b3d45140a12/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "023bd5bced0ba2e3b702238136ca753e8bebc290",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023bd5bced0ba2e3b702238136ca753e8bebc290",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/023bd5bced0ba2e3b702238136ca753e8bebc290"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5aefd5be8aea1d82786ee68ef54fd1c8524b423a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db3f9560cc7b644b5a1dbed958f50b3d45140a12/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db3f9560cc7b644b5a1dbed958f50b3d45140a12/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=db3f9560cc7b644b5a1dbed958f50b3d45140a12",
        "patch": "@@ -871,7 +871,7 @@ class CompareNetGroupKeyed\n     }\n };\n \n-static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n+static bool AttemptToEvictConnection(CNetAddr newaddr, bool fPreferNewConnection) {\n     std::vector<CNodeRef> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n@@ -934,8 +934,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Reduce to the network group with the most connections\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n-    // Do not disconnect peers if there is only one unprotected connection from their network group.\n-    if (vEvictionCandidates.size() <= 1)\n+    // Do not disconnect a peer if doing so would reduce the number of unprotected netgroups connected.\n+    if (vEvictionCandidates.size() <= 1 && mapAddrCounts.find(newaddr.GetGroup()) != mapAddrCounts.end())\n         // unless we prefer the new connection (for whitelisted peers)\n         if (!fPreferNewConnection)\n             return false;\n@@ -999,7 +999,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (nInbound >= nMaxInbound)\n     {\n-        if (!AttemptToEvictConnection(whitelisted)) {\n+        if (!AttemptToEvictConnection(addr, whitelisted)) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n             CloseSocket(hSocket);"
      }
    ]
  },
  {
    "sha": "fda09c838a2dad7d952f0312f927688f8c58da94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGEwOWM4MzhhMmRhZDdkOTUyZjAzMTJmOTI3Njg4ZjhjNThkYTk0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-23T09:39:16Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-12-03T19:09:52Z"
      },
      "message": "Make recently accepted transactions an anti-eviction criteria.\n\nThis protects four peers that most recently sent us a valid transaction\n to our memory pool.  This metric is costly for attackers to control\n since it requires sending acceptable transactions, and an attacker\n which is blocking transactions is inherently disadvantaged for this\n criteria.",
      "tree": {
        "sha": "4f73527abc6599e2ead0d6ee99604c1497351d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f73527abc6599e2ead0d6ee99604c1497351d21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fda09c838a2dad7d952f0312f927688f8c58da94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fda09c838a2dad7d952f0312f927688f8c58da94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fda09c838a2dad7d952f0312f927688f8c58da94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fda09c838a2dad7d952f0312f927688f8c58da94/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db3f9560cc7b644b5a1dbed958f50b3d45140a12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db3f9560cc7b644b5a1dbed958f50b3d45140a12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db3f9560cc7b644b5a1dbed958f50b3d45140a12"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 62,
      "deletions": 26
    },
    "files": [
      {
        "sha": "b6b5d380392ff7063b436f66423deb79a83545ac",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 24,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fda09c838a2dad7d952f0312f927688f8c58da94/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fda09c838a2dad7d952f0312f927688f8c58da94/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fda09c838a2dad7d952f0312f927688f8c58da94",
        "patch": "@@ -4414,10 +4414,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n+            LOCK(cs_cNodeStats);\n+            pfrom->nTimeLastTX = GetTime();\n             mempool.check(pcoinsTip);\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n+\n             LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n@@ -4670,9 +4673,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         bool bPingFinished = false;\n         std::string sProblem;\n \n+        LOCK(cs_cNodeStats);\n+\n         if (nAvail >= sizeof(nonce)) {\n             vRecv >> nonce;\n-\n             // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n             if (pfrom->nPingNonceSent != 0) {\n                 if (nonce == pfrom->nPingNonceSent) {\n@@ -4981,32 +4985,34 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: ping\n         //\n-        bool pingSend = false;\n-        if (pto->fPingQueued) {\n-            // RPC ping request by user\n-            pingSend = true;\n-        }\n-        if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n-            // Ping automatically sent as a latency probe & keepalive.\n-            pingSend = true;\n-        }\n-        if (pingSend) {\n-            uint64_t nonce = 0;\n-            while (nonce == 0) {\n-                GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n+        {\n+            LOCK(cs_cNodeStats);\n+            bool pingSend = false;\n+            if (pto->fPingQueued) {\n+                // RPC ping request by user\n+                pingSend = true;\n             }\n-            pto->fPingQueued = false;\n-            pto->nPingUsecStart = GetTimeMicros();\n-            if (pto->nVersion > BIP0031_VERSION) {\n-                pto->nPingNonceSent = nonce;\n-                pto->PushMessage(\"ping\", nonce);\n-            } else {\n-                // Peer is too old to support ping command with nonce, pong will never arrive.\n-                pto->nPingNonceSent = 0;\n-                pto->PushMessage(\"ping\");\n+            if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n+                // Ping automatically sent as a latency probe & keepalive.\n+                pingSend = true;\n+            }\n+            if (pingSend) {\n+                uint64_t nonce = 0;\n+                while (nonce == 0) {\n+                    GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n+                }\n+                pto->fPingQueued = false;\n+                pto->nPingUsecStart = GetTimeMicros();\n+                if (pto->nVersion > BIP0031_VERSION) {\n+                    pto->nPingNonceSent = nonce;\n+                    pto->PushMessage(\"ping\", nonce);\n+                } else {\n+                    // Peer is too old to support ping command with nonce, pong will never arrive.\n+                    pto->nPingNonceSent = 0;\n+                    pto->PushMessage(\"ping\");\n+                }\n             }\n         }\n-\n         TRY_LOCK(cs_main, lockMain); // Acquire cs_main for IsInitialBlockDownload() and CNodeState()\n         if (!lockMain)\n             return true;"
      },
      {
        "sha": "66cb548ab076166fa215838ce4adc1df18643861",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fda09c838a2dad7d952f0312f927688f8c58da94/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fda09c838a2dad7d952f0312f927688f8c58da94/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fda09c838a2dad7d952f0312f927688f8c58da94",
        "patch": "@@ -91,6 +91,7 @@ map<CInv, CDataStream> mapRelay;\n deque<pair<int64_t, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n limitedmap<CInv, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n+CCriticalSection cs_cNodeStats;\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;\n@@ -615,6 +616,7 @@ void CNode::AddWhitelistedRange(const CSubNet &subnet) {\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n {\n+    LOCK(cs_cNodeStats);\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(fRelayTxes);\n@@ -829,6 +831,21 @@ class CNodeRef {\n     CNode *_pnode;\n };\n \n+static bool CompareNodeTxTime(const CNodeRef &a, const CNodeRef &b)\n+{\n+    // Prefer latest TX and on ties (e.g. 0) prefer fRelayTx, fNetworkNode, uptime.\n+    if (a->nTimeLastTX != b->nTimeLastTX)\n+        return a->nTimeLastTX < b->nTimeLastTX;\n+\n+    if (a->fRelayTxes != b->fRelayTxes)\n+        return b->fRelayTxes;\n+\n+    if (a->fNetworkNode != b->fNetworkNode)\n+        return b->fNetworkNode;\n+\n+    return a->nTimeConnected > b->nTimeConnected;\n+}\n+\n static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n {\n     return a->nMinPingUsecTime > b->nMinPingUsecTime;\n@@ -891,6 +908,8 @@ static bool AttemptToEvictConnection(CNetAddr newaddr, bool fPreferNewConnection\n \n     // Protect connections with certain characteristics\n \n+    LOCK(cs_cNodeStats);\n+\n     // Deterministically select 4 peers to protect by netgroup.\n     // An attacker cannot predict which netgroups will be protected.\n     static CompareNetGroupKeyed comparerNetGroupKeyed;\n@@ -906,8 +925,15 @@ static bool AttemptToEvictConnection(CNetAddr newaddr, bool fPreferNewConnection\n \n     if (vEvictionCandidates.empty()) return false;\n \n+    // Protect the 4 nodes which most recently sent us a TX we accepted.\n+    // An attacker cannot manipulate this metric without sending us useful transactions.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNodeTxTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n-    // This replicates the existing implicit behavior.\n+    // An attacker cannot go back in time and begin their attack earlier. This is also the historic node behavior.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n \n@@ -1256,6 +1282,7 @@ void ThreadSocketHandler()\n             int64_t nTime = GetTime();\n             if (nTime - pnode->nTimeConnected > 60)\n             {\n+                LOCK(cs_cNodeStats);\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n                 {\n                     LogPrint(\"net\", \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->id);\n@@ -2356,6 +2383,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nRecvBytes = 0;\n     nTimeConnected = GetTime();\n     nTimeOffset = 0;\n+    nTimeLastTX = 0;\n     addr = addrIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "b0aaed8dc2a8db5412b45ed255fdd8d50142fec3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fda09c838a2dad7d952f0312f927688f8c58da94/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fda09c838a2dad7d952f0312f927688f8c58da94/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fda09c838a2dad7d952f0312f927688f8c58da94",
        "patch": "@@ -153,6 +153,7 @@ extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n+extern CCriticalSection cs_cNodeStats;\n extern std::map<CInv, CDataStream> mapRelay;\n extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n@@ -326,6 +327,7 @@ class CNode\n     int64_t nLastRecv;\n     int64_t nTimeConnected;\n     int64_t nTimeOffset;\n+    int64_t nTimeLastTX; // time we last accepted a transaction into the mempool from this peer. Protected by cs_cNodeStats\n     CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n@@ -384,7 +386,7 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n \n-    // Ping time measurement:\n+    // Ping time measurement: Protected by cs_cNodeStats\n     // The pong reply we're expecting, or 0 if no pong expected.\n     uint64_t nPingNonceSent;\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent."
      }
    ]
  }
]