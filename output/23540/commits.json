[
  {
    "sha": "0d43525c61b09a283bc38b96f3827a95be976aba",
    "node_id": "C_kwDOABII59oAKDBkNDM1MjVjNjFiMDlhMjgzYmMzOGI5NmYzODI3YTk1YmU5NzZhYmE",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T22:26:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T22:26:28Z"
      },
      "message": "test: add logging to rpc_decodescript.py\n\nAlso remove the enumerations (\"1)\", \"2)\"...) from the test\ncases as those potentially hinder maintainability; e.g. if a\nnew case in inserted in-between, all the remaining\nenumerations would need to be adapted.",
      "tree": {
        "sha": "b0040be9a9e20410a83a428923887e3f0d5cde40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0040be9a9e20410a83a428923887e3f0d5cde40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d43525c61b09a283bc38b96f3827a95be976aba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d43525c61b09a283bc38b96f3827a95be976aba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d43525c61b09a283bc38b96f3827a95be976aba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d43525c61b09a283bc38b96f3827a95be976aba/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ef186a1400c1c7f498549dd97c227819456245e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef186a1400c1c7f498549dd97c227819456245e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ef186a1400c1c7f498549dd97c227819456245e"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 26,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e6e4033f43e47e553089f39392c4c7e9eca2947e",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 26,
        "deletions": 19,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d43525c61b09a283bc38b96f3827a95be976aba/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d43525c61b09a283bc38b96f3827a95be976aba/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=0d43525c61b09a283bc38b96f3827a95be976aba",
        "patch": "@@ -27,29 +27,29 @@ def decodescript_script_sig(self):\n \n         # below are test cases for all of the standard transaction types\n \n-        # 1) P2PK scriptSig\n+        self.log.info(\"- P2PK\")\n         # the scriptSig of a public key scriptPubKey simply pushes a signature onto the stack\n         rpc_result = self.nodes[0].decodescript(push_signature)\n         assert_equal(signature, rpc_result['asm'])\n \n-        # 2) P2PKH scriptSig\n+        self.log.info(\"- P2PKH\")\n         rpc_result = self.nodes[0].decodescript(push_signature + push_public_key)\n         assert_equal(signature + ' ' + public_key, rpc_result['asm'])\n \n-        # 3) multisig scriptSig\n+        self.log.info(\"- multisig\")\n         # this also tests the leading portion of a P2SH multisig scriptSig\n         # OP_0 <A sig> <B sig>\n         rpc_result = self.nodes[0].decodescript('00' + push_signature + push_signature)\n         assert_equal('0 ' + signature + ' ' + signature, rpc_result['asm'])\n \n-        # 4) P2SH scriptSig\n+        self.log.info(\"- P2SH\")\n         # an empty P2SH redeemScript is valid and makes for a very simple test case.\n         # thus, such a spending scriptSig would just need to pass the outer redeemScript\n         # hash test and leave true on the top of the stack.\n         rpc_result = self.nodes[0].decodescript('5100')\n         assert_equal('1 0', rpc_result['asm'])\n \n-        # 5) null data scriptSig - no such thing because null data scripts can not be spent.\n+        # null data scriptSig - no such thing because null data scripts can not be spent.\n         # thus, no test case for that standard transaction type is here.\n \n     def decodescript_script_pub_key(self):\n@@ -63,21 +63,21 @@ def decodescript_script_pub_key(self):\n \n         # below are test cases for all of the standard transaction types\n \n-        # 1) P2PK scriptPubKey\n+        self.log.info(\"- P2PK\")\n         # <pubkey> OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n         assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # P2PK is translated to P2WPKH\n         assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n-        # 2) P2PKH scriptPubKey\n+        self.log.info(\"- P2PKH\")\n         # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n         assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n         # P2PKH is translated to P2WPKH\n         assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n-        # 3) multisig scriptPubKey\n+        self.log.info(\"- multisig\")\n         # <m> <A pubkey> <B pubkey> <C pubkey> <n> OP_CHECKMULTISIG\n         # just imagine that the pub keys used below are different.\n         # for our purposes here it does not matter that they are the same even though it is unrealistic.\n@@ -88,7 +88,7 @@ def decodescript_script_pub_key(self):\n         multisig_script_hash = sha256(bytes.fromhex(multisig_script)).hex()\n         assert_equal('0 ' + multisig_script_hash, rpc_result['segwit']['asm'])\n \n-        # 4) P2SH scriptPubKey\n+        self.log.info (\"- P2SH\")\n         # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n         # push_public_key_hash here should actually be the hash of a redeem script.\n         # but this works the same for purposes of this test.\n@@ -97,7 +97,7 @@ def decodescript_script_pub_key(self):\n         # P2SH does not work in segwit secripts. decodescript should not return a result for it.\n         assert 'segwit' not in rpc_result\n \n-        # 5) null data scriptPubKey\n+        self.log.info(\"- null data\")\n         # use a signature look-alike here to make sure that we do not decode random data as a signature.\n         # this matters if/when signature sighash decoding comes along.\n         # would want to make sure that no such decoding takes place in this case.\n@@ -106,7 +106,8 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n         assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n \n-        # 6) a CLTV redeem script. redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n+        self.log.info(\"- CLTV redeem script\")\n+        # redeem scripts are in-effect scriptPubKey scripts, so adding a test here.\n         # OP_NOP2 is also known as OP_CHECKLOCKTIMEVERIFY.\n         # just imagine that the pub keys used below are different.\n         # for our purposes here it does not matter that they are the same even though it is unrealistic.\n@@ -126,15 +127,15 @@ def decodescript_script_pub_key(self):\n         cltv_script_hash = sha256(bytes.fromhex(cltv_script)).hex()\n         assert_equal('0 ' + cltv_script_hash, rpc_result['segwit']['asm'])\n \n-        # 7) P2PK scriptPubKey\n+        self.log.info(\"- P2PK with uncompressed pubkey\")\n         # <pubkey> OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript(push_uncompressed_public_key + 'ac')\n         assert_equal(uncompressed_public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n         # decodescript should not return a P2WPKH equivalent.\n         assert 'segwit' not in rpc_result\n \n-        # 8) multisig scriptPubKey with an uncompressed pubkey\n+        self.log.info(\"- multisig with uncompressed pubkey\")\n         # <m> <A pubkey> <B pubkey> <n> OP_CHECKMULTISIG\n         # just imagine that the pub keys used below are different.\n         # the purpose of this test is to check that a segwit script is not returned for bare multisig scripts\n@@ -145,15 +146,15 @@ def decodescript_script_pub_key(self):\n         # decodescript should not return a P2WPKH equivalent.\n         assert 'segwit' not in rpc_result\n \n-        # 9) P2WPKH scriptpubkey\n+        self.log.info(\"- P2WPKH\")\n         # 0 <PubKeyHash>\n         rpc_result = self.nodes[0].decodescript('00' + push_public_key_hash)\n         assert_equal('0 ' + public_key_hash, rpc_result['asm'])\n         # segwit scripts do not work nested into each other.\n         # a nested segwit script should not be returned in the results.\n         assert 'segwit' not in rpc_result\n \n-        # 10) P2WSH scriptpubkey\n+        self.log.info(\"- P2WSH\")\n         # 0 <ScriptHash>\n         # even though this hash is of a P2PK script which is better used as bare P2WPKH, it should not matter\n         # for the purpose of this test.\n@@ -169,7 +170,8 @@ def decoderawtransaction_asm_sighashtype(self):\n         This test is in with the \"decodescript\" tests because they are testing the same \"asm\" script decodes.\n         \"\"\"\n \n-        # this test case uses a random plain vanilla mainnet transaction with a single P2PKH input and output\n+        self.log.info(\"- various mainnet txs\")\n+        # this test case uses a mainnet transaction that has a P2SH input and both P2PKH and P2SH outputs.\n         tx = '0100000001696a20784a2c70143f634e95227dbdfdf0ecd51647052e70854512235f5986ca010000008a47304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb014104d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536ffffffff0100e1f505000000001976a914eb6c6e0cdb2d256a32d97b8df1fc75d1920d9bca88ac00000000'\n         rpc_result = self.nodes[0].decoderawtransaction(tx)\n         assert_equal('304402207174775824bec6c2700023309a168231ec80b82c6069282f5133e6f11cbb04460220570edc55c7c5da2ca687ebd0372d3546ebc3f810516a002350cac72dfe192dfb[ALL] 04d3f898e6487787910a690410b7a917ef198905c27fb9d3b0a42da12aceae0544fc7088d239d9a48f2828a15a09e84043001f27cc80d162cb95404e1210161536', rpc_result['vin'][0]['scriptSig']['asm'])\n@@ -185,11 +187,13 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = tx_from_hex(tx)\n \n+        self.log.info(\"- tx not passing DER signature checks\")\n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n         rpc_result = self.nodes[0].decoderawtransaction(tx)\n         assert_equal('OP_RETURN 300602010002010001', rpc_result['vout'][0]['scriptPubKey']['asm'])\n \n+        self.log.info(\"- tx passing DER signature checks\")\n         # verify that we have not altered scriptPubKey processing even of a specially crafted P2PKH pubkeyhash and P2SH redeem script hash that is made to pass the der signature checks\n         tx = '01000000018d1f5635abd06e2c7e2ddf58dc85b3de111e4ad6e0ab51bb0dcf5e84126d927300000000fdfe0000483045022100ae3b4e589dfc9d48cb82d41008dc5fa6a86f94d5c54f9935531924602730ab8002202f88cf464414c4ed9fa11b773c5ee944f66e9b05cc1e51d97abc22ce098937ea01483045022100b44883be035600e9328a01b66c7d8439b74db64187e76b99a68f7893b701d5380220225bf286493e4c4adcf928c40f785422572eb232f84a0b83b0dea823c3a19c75014c695221020743d44be989540d27b1b4bbbcfd17721c337cb6bc9af20eb8a32520b393532f2102c0120a1dda9e51a938d39ddd9fe0ebc45ea97e1d27a7cbd671d5431416d3dd87210213820eb3d5f509d7438c9eeecb4157b2f595105e7cd564b3cdbb9ead3da41eed53aeffffffff02611e0000000000001976a914301102070101010101010102060101010101010188acee2a02000000000017a91430110207010101010101010206010101010101018700000000'\n         rpc_result = self.nodes[0].decoderawtransaction(tx)\n@@ -207,7 +211,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         push_signature_2 = '48' + signature_2\n         signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n \n-        # 1) P2PK scriptSig\n+        self.log.info(\"- P2PK scriptSig\")\n         txSave.vin[0].scriptSig = bytes.fromhex(push_signature)\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n@@ -217,20 +221,23 @@ def decoderawtransaction_asm_sighashtype(self):\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n-        # 2) multisig scriptSig\n+        self.log.info(\"- multisig scriptSig\")\n         txSave.vin[0].scriptSig = bytes.fromhex('00' + push_signature + push_signature_2)\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n-        # 3) test a scriptSig that contains more than push operations.\n+        self.log.info(\"- scriptSig that contains more than push operations\")\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n         txSave.vin[0].scriptSig = bytes.fromhex('6a143011020701010101010101020601010101010101')\n         rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n \n     def run_test(self):\n+        self.log.info(\"Test decoding of standard input scripts [scriptSig]\")\n         self.decodescript_script_sig()\n+        self.log.info(\"Test decoding of standard output scripts [scriptPubKey]\")\n         self.decodescript_script_pub_key()\n+        self.log.info(\"Test 'asm' script decoding of transactions\")\n         self.decoderawtransaction_asm_sighashtype()\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "099c6957de4246669b1dddba10561e802f5e8a01",
    "node_id": "C_kwDOABII59oAKDA5OWM2OTU3ZGU0MjQ2NjY5YjFkZGRiYTEwNTYxZTgwMmY1ZThhMDE",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T23:03:29Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T23:11:10Z"
      },
      "message": "test: check for decodescript RPC 'type' results",
      "tree": {
        "sha": "7b6a04d171613d899001460ae14740552d9edf23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b6a04d171613d899001460ae14740552d9edf23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/099c6957de4246669b1dddba10561e802f5e8a01",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/099c6957de4246669b1dddba10561e802f5e8a01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/099c6957de4246669b1dddba10561e802f5e8a01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/099c6957de4246669b1dddba10561e802f5e8a01/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d43525c61b09a283bc38b96f3827a95be976aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d43525c61b09a283bc38b96f3827a95be976aba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d43525c61b09a283bc38b96f3827a95be976aba"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "865febd4631cc2d6be5f001df96792887400d0eb",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/099c6957de4246669b1dddba10561e802f5e8a01/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/099c6957de4246669b1dddba10561e802f5e8a01/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=099c6957de4246669b1dddba10561e802f5e8a01",
        "patch": "@@ -67,14 +67,17 @@ def decodescript_script_pub_key(self):\n         # <pubkey> OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript(push_public_key + 'ac')\n         assert_equal(public_key + ' OP_CHECKSIG', rpc_result['asm'])\n+        assert_equal('pubkey', rpc_result['type'])\n         # P2PK is translated to P2WPKH\n         assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n         self.log.info(\"- P2PKH\")\n         # OP_DUP OP_HASH160 <PubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript('76a9' + push_public_key_hash + '88ac')\n+        assert_equal('pubkeyhash', rpc_result['type'])\n         assert_equal('OP_DUP OP_HASH160 ' + public_key_hash + ' OP_EQUALVERIFY OP_CHECKSIG', rpc_result['asm'])\n         # P2PKH is translated to P2WPKH\n+        assert_equal('witness_v0_keyhash', rpc_result['segwit']['type'])\n         assert_equal('0 ' + public_key_hash, rpc_result['segwit']['asm'])\n \n         self.log.info(\"- multisig\")\n@@ -83,16 +86,19 @@ def decodescript_script_pub_key(self):\n         # for our purposes here it does not matter that they are the same even though it is unrealistic.\n         multisig_script = '52' + push_public_key + push_public_key + push_public_key + '53ae'\n         rpc_result = self.nodes[0].decodescript(multisig_script)\n+        assert_equal('multisig', rpc_result['type'])\n         assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n         # multisig in P2WSH\n         multisig_script_hash = sha256(bytes.fromhex(multisig_script)).hex()\n+        assert_equal('witness_v0_scripthash', rpc_result['segwit']['type'])\n         assert_equal('0 ' + multisig_script_hash, rpc_result['segwit']['asm'])\n \n         self.log.info (\"- P2SH\")\n         # OP_HASH160 <Hash160(redeemScript)> OP_EQUAL.\n         # push_public_key_hash here should actually be the hash of a redeem script.\n         # but this works the same for purposes of this test.\n         rpc_result = self.nodes[0].decodescript('a9' + push_public_key_hash + '87')\n+        assert_equal('scripthash', rpc_result['type'])\n         assert_equal('OP_HASH160 ' + public_key_hash + ' OP_EQUAL', rpc_result['asm'])\n         # P2SH does not work in segwit secripts. decodescript should not return a result for it.\n         assert 'segwit' not in rpc_result\n@@ -104,6 +110,7 @@ def decodescript_script_pub_key(self):\n         signature_imposter = '48304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n         # OP_RETURN <data>\n         rpc_result = self.nodes[0].decodescript('6a' + signature_imposter)\n+        assert_equal('nulldata', rpc_result['type'])\n         assert_equal('OP_RETURN ' + signature_imposter[2:], rpc_result['asm'])\n \n         self.log.info(\"- CLTV redeem script\")\n@@ -122,6 +129,7 @@ def decodescript_script_pub_key(self):\n         # lock until block 500,000\n         cltv_script = '63' + push_public_key + 'ad670320a107b17568' + push_public_key + 'ac'\n         rpc_result = self.nodes[0].decodescript(cltv_script)\n+        assert_equal('nonstandard', rpc_result['type'])\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # CLTV script in P2WSH\n         cltv_script_hash = sha256(bytes.fromhex(cltv_script)).hex()\n@@ -130,6 +138,7 @@ def decodescript_script_pub_key(self):\n         self.log.info(\"- P2PK with uncompressed pubkey\")\n         # <pubkey> OP_CHECKSIG\n         rpc_result = self.nodes[0].decodescript(push_uncompressed_public_key + 'ac')\n+        assert_equal('pubkey', rpc_result['type'])\n         assert_equal(uncompressed_public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n         # decodescript should not return a P2WPKH equivalent.\n@@ -141,6 +150,7 @@ def decodescript_script_pub_key(self):\n         # the purpose of this test is to check that a segwit script is not returned for bare multisig scripts\n         # with an uncompressed pubkey in them.\n         rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_uncompressed_public_key +'52ae')\n+        assert_equal('multisig', rpc_result['type'])\n         assert_equal('2 ' + public_key + ' ' + uncompressed_public_key + ' 2 OP_CHECKMULTISIG', rpc_result['asm'])\n         # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n         # decodescript should not return a P2WPKH equivalent.\n@@ -149,6 +159,7 @@ def decodescript_script_pub_key(self):\n         self.log.info(\"- P2WPKH\")\n         # 0 <PubKeyHash>\n         rpc_result = self.nodes[0].decodescript('00' + push_public_key_hash)\n+        assert_equal('witness_v0_keyhash', rpc_result['type'])\n         assert_equal('0 ' + public_key_hash, rpc_result['asm'])\n         # segwit scripts do not work nested into each other.\n         # a nested segwit script should not be returned in the results.\n@@ -159,6 +170,7 @@ def decodescript_script_pub_key(self):\n         # even though this hash is of a P2PK script which is better used as bare P2WPKH, it should not matter\n         # for the purpose of this test.\n         rpc_result = self.nodes[0].decodescript('0020' + p2wsh_p2pk_script_hash)\n+        assert_equal('witness_v0_scripthash', rpc_result['type'])\n         assert_equal('0 ' + p2wsh_p2pk_script_hash, rpc_result['asm'])\n         # segwit scripts do not work nested into each other.\n         # a nested segwit script should not be returned in the results."
      }
    ]
  },
  {
    "sha": "83f6c0f9ef3a1962be02db479ddf87cb22b8c14b",
    "node_id": "C_kwDOABII59oAKDgzZjZjMGY5ZWYzYTE5NjJiZTAyZGI0NzlkZGY4N2NiMjJiOGMxNGI",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T23:41:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-18T00:07:26Z"
      },
      "message": "test: add decodescript RPC test for P2TR output type",
      "tree": {
        "sha": "9e75a04f3cc1cff41ae04e5ae71c7d44dd16bed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e75a04f3cc1cff41ae04e5ae71c7d44dd16bed0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "099c6957de4246669b1dddba10561e802f5e8a01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/099c6957de4246669b1dddba10561e802f5e8a01",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/099c6957de4246669b1dddba10561e802f5e8a01"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c0f48129a113024bcbeefa80ccf5d913b48bfbf",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f6c0f9ef3a1962be02db479ddf87cb22b8c14b/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=83f6c0f9ef3a1962be02db479ddf87cb22b8c14b",
        "patch": "@@ -176,6 +176,14 @@ def decodescript_script_pub_key(self):\n         # a nested segwit script should not be returned in the results.\n         assert 'segwit' not in rpc_result\n \n+        self.log.info(\"- P2TR\")\n+        # 1 <x-only pubkey>\n+        xonly_public_key = '01'*32  # first ever P2TR output on mainnet\n+        rpc_result = self.nodes[0].decodescript('5120' + xonly_public_key)\n+        assert_equal('witness_v1_taproot', rpc_result['type'])\n+        assert_equal('1 ' + xonly_public_key, rpc_result['asm'])\n+        assert 'segwit' not in rpc_result\n+\n     def decoderawtransaction_asm_sighashtype(self):\n         \"\"\"Test decoding scripts via RPC command \"decoderawtransaction\".\n "
      }
    ]
  }
]