[
  {
    "sha": "c59881eaee61ae7d3b16001a75b9fd9fd09af297",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTk4ODFlYWVlNjFhZTdkM2IxNjAwMWE3NWI5ZmQ5ZmQwOWFmMjk3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-07T18:42:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-16T11:43:06Z"
      },
      "message": "Symbolic names for threads\n\nIntroduce an enum threadId, and use symbolic indices when accessing\nvnThreadsRunning.",
      "tree": {
        "sha": "d2647c529d3798fdfe794df6c5add91312fef092",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2647c529d3798fdfe794df6c5add91312fef092"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c59881eaee61ae7d3b16001a75b9fd9fd09af297",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59881eaee61ae7d3b16001a75b9fd9fd09af297",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c59881eaee61ae7d3b16001a75b9fd9fd09af297",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c59881eaee61ae7d3b16001a75b9fd9fd09af297/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999b4cacaf53189dc9e8d5c6373c1f3da5b8ae4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999b4cacaf53189dc9e8d5c6373c1f3da5b8ae4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999b4cacaf53189dc9e8d5c6373c1f3da5b8ae4c"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 82,
      "deletions": 70
    },
    "files": [
      {
        "sha": "30a6344b8f25e53b3a4dfd49bcf89dbb92b4b9cc",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=c59881eaee61ae7d3b16001a75b9fd9fd09af297",
        "patch": "@@ -2355,15 +2355,15 @@ void ThreadRPCServer(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadRPCServer(parg));\n     try\n     {\n-        vnThreadsRunning[4]++;\n+        vnThreadsRunning[THREAD_RPCSERVER]++;\n         ThreadRPCServer2(parg);\n-        vnThreadsRunning[4]--;\n+        vnThreadsRunning[THREAD_RPCSERVER]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[4]--;\n+        vnThreadsRunning[THREAD_RPCSERVER]--;\n         PrintException(&e, \"ThreadRPCServer()\");\n     } catch (...) {\n-        vnThreadsRunning[4]--;\n+        vnThreadsRunning[THREAD_RPCSERVER]--;\n         PrintException(NULL, \"ThreadRPCServer()\");\n     }\n     printf(\"ThreadRPCServer exiting\\n\");\n@@ -2443,7 +2443,7 @@ void ThreadRPCServer2(void* parg)\n #endif\n \n         ip::tcp::endpoint peer;\n-        vnThreadsRunning[4]--;\n+        vnThreadsRunning[THREAD_RPCSERVER]--;\n #ifdef USE_SSL\n         acceptor.accept(sslStream.lowest_layer(), peer);\n #else"
      },
      {
        "sha": "54538295c41a984d7363a8c0889f8ac8c8df2de5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c59881eaee61ae7d3b16001a75b9fd9fd09af297",
        "patch": "@@ -3390,7 +3390,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         {\n                             nLogTime = GetTime();\n                             printf(\"%s \", DateTimeStrFormat(\"%x %H:%M\", GetTime()).c_str());\n-                            printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[3], dHashesPerSec/1000.0);\n+                            printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[THREAD_MINER], dHashesPerSec/1000.0);\n                         }\n                     }\n                 }\n@@ -3401,7 +3401,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 return;\n             if (!fGenerateBitcoins)\n                 return;\n-            if (fLimitProcessors && vnThreadsRunning[3] > nLimitProcessors)\n+            if (fLimitProcessors && vnThreadsRunning[THREAD_MINER] > nLimitProcessors)\n                 return;\n             if (vNodes.empty())\n                 break;\n@@ -3424,22 +3424,22 @@ void static ThreadBitcoinMiner(void* parg)\n     CWallet* pwallet = (CWallet*)parg;\n     try\n     {\n-        vnThreadsRunning[3]++;\n+        vnThreadsRunning[THREAD_MINER]++;\n         BitcoinMiner(pwallet);\n-        vnThreadsRunning[3]--;\n+        vnThreadsRunning[THREAD_MINER]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[3]--;\n+        vnThreadsRunning[THREAD_MINER]--;\n         PrintException(&e, \"ThreadBitcoinMiner()\");\n     } catch (...) {\n-        vnThreadsRunning[3]--;\n+        vnThreadsRunning[THREAD_MINER]--;\n         PrintException(NULL, \"ThreadBitcoinMiner()\");\n     }\n     UIThreadCall(boost::bind(CalledSetStatusBar, \"\", 0));\n     nHPSTimerStart = 0;\n-    if (vnThreadsRunning[3] == 0)\n+    if (vnThreadsRunning[THREAD_MINER] == 0)\n         dHashesPerSec = 0;\n-    printf(\"ThreadBitcoinMiner exiting, %d threads remaining\\n\", vnThreadsRunning[3]);\n+    printf(\"ThreadBitcoinMiner exiting, %d threads remaining\\n\", vnThreadsRunning[THREAD_MINER]);\n }\n \n \n@@ -3459,7 +3459,7 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n             nProcessors = 1;\n         if (fLimitProcessors && nProcessors > nLimitProcessors)\n             nProcessors = nLimitProcessors;\n-        int nAddThreads = nProcessors - vnThreadsRunning[3];\n+        int nAddThreads = nProcessors - vnThreadsRunning[THREAD_MINER];\n         printf(\"Starting %d BitcoinMiner threads\\n\", nAddThreads);\n         for (int i = 0; i < nAddThreads; i++)\n         {"
      },
      {
        "sha": "fd488ce671a5f46f67b47c4cf1fc0b1bb5edf7a7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c59881eaee61ae7d3b16001a75b9fd9fd09af297",
        "patch": "@@ -38,8 +38,6 @@ bool OpenNetworkConnection(const CAddress& addrConnect);\n \n \n \n-\n-\n //\n // Global state variables\n //\n@@ -49,7 +47,7 @@ uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n CAddress addrLocalHost(CService(\"0.0.0.0\", 0), nLocalServices);\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n-array<int, 10> vnThreadsRunning;\n+array<int, THREAD_MAX> vnThreadsRunning;\n static SOCKET hListenSocket = INVALID_SOCKET;\n \n vector<CNode*> vNodes;\n@@ -67,7 +65,6 @@ CCriticalSection cs_setservAddNodeAddresses;\n \n \n \n-\n unsigned short GetListenPort()\n {\n     return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n@@ -602,15 +599,15 @@ void ThreadSocketHandler(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadSocketHandler(parg));\n     try\n     {\n-        vnThreadsRunning[0]++;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]++;\n         ThreadSocketHandler2(parg);\n-        vnThreadsRunning[0]--;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[0]--;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n         PrintException(&e, \"ThreadSocketHandler()\");\n     } catch (...) {\n-        vnThreadsRunning[0]--;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n         throw; // support pthread_cancel()\n     }\n     printf(\"ThreadSocketHandler exiting\\n\");\n@@ -712,9 +709,9 @@ void ThreadSocketHandler2(void* parg)\n             }\n         }\n \n-        vnThreadsRunning[0]--;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n         int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        vnThreadsRunning[0]++;\n+        vnThreadsRunning[THREAD_SOCKETHANDLER]++;\n         if (fShutdown)\n             return;\n         if (nSelect == SOCKET_ERROR)\n@@ -927,15 +924,15 @@ void ThreadMapPort(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadMapPort(parg));\n     try\n     {\n-        vnThreadsRunning[5]++;\n+        vnThreadsRunning[THREAD_UPNP]++;\n         ThreadMapPort2(parg);\n-        vnThreadsRunning[5]--;\n+        vnThreadsRunning[THREAD_UPNP]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[5]--;\n+        vnThreadsRunning[THREAD_UPNP]--;\n         PrintException(&e, \"ThreadMapPort()\");\n     } catch (...) {\n-        vnThreadsRunning[5]--;\n+        vnThreadsRunning[THREAD_UPNP]--;\n         PrintException(NULL, \"ThreadMapPort()\");\n     }\n     printf(\"ThreadMapPort exiting\\n\");\n@@ -1056,7 +1053,7 @@ void MapPort(bool fMapPort)\n         fUseUPnP = fMapPort;\n         WriteSetting(\"fUseUPnP\", fUseUPnP);\n     }\n-    if (fUseUPnP && vnThreadsRunning[5] < 1)\n+    if (fUseUPnP && vnThreadsRunning[THREAD_UPNP] < 1)\n     {\n         if (!CreateThread(ThreadMapPort, NULL))\n             printf(\"Error: ThreadMapPort(ThreadMapPort) failed\\n\");\n@@ -1090,15 +1087,15 @@ void ThreadDNSAddressSeed(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadDNSAddressSeed(parg));\n     try\n     {\n-        vnThreadsRunning[6]++;\n+        vnThreadsRunning[THREAD_DNSSEED]++;\n         ThreadDNSAddressSeed2(parg);\n-        vnThreadsRunning[6]--;\n+        vnThreadsRunning[THREAD_DNSSEED]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[6]--;\n+        vnThreadsRunning[THREAD_DNSSEED]--;\n         PrintException(&e, \"ThreadDNSAddressSeed()\");\n     } catch (...) {\n-        vnThreadsRunning[6]--;\n+        vnThreadsRunning[THREAD_DNSSEED]--;\n         throw; // support pthread_cancel()\n     }\n     printf(\"ThreadDNSAddressSeed exiting\\n\");\n@@ -1236,15 +1233,15 @@ void ThreadOpenConnections(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadOpenConnections(parg));\n     try\n     {\n-        vnThreadsRunning[1]++;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n         ThreadOpenConnections2(parg);\n-        vnThreadsRunning[1]--;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[1]--;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         PrintException(&e, \"ThreadOpenConnections()\");\n     } catch (...) {\n-        vnThreadsRunning[1]--;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         PrintException(NULL, \"ThreadOpenConnections()\");\n     }\n     printf(\"ThreadOpenConnections exiting\\n\");\n@@ -1278,9 +1275,9 @@ void ThreadOpenConnections2(void* parg)\n     int64 nStart = GetTime();\n     loop\n     {\n-        vnThreadsRunning[1]--;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         Sleep(500);\n-        vnThreadsRunning[1]++;\n+        vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n         if (fShutdown)\n             return;\n \n@@ -1296,9 +1293,9 @@ void ThreadOpenConnections2(void* parg)\n             nMaxOutboundConnections = min(nMaxOutboundConnections, (int)GetArg(\"-maxconnections\", 125));\n             if (nOutbound < nMaxOutboundConnections)\n                 break;\n-            vnThreadsRunning[1]--;\n+            vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n             Sleep(2000);\n-            vnThreadsRunning[1]++;\n+            vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n             if (fShutdown)\n                 return;\n         }\n@@ -1410,15 +1407,15 @@ void ThreadOpenAddedConnections(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadOpenAddedConnections(parg));\n     try\n     {\n-        vnThreadsRunning[7]++;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         ThreadOpenAddedConnections2(parg);\n-        vnThreadsRunning[7]--;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[7]--;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n         PrintException(&e, \"ThreadOpenAddedConnections()\");\n     } catch (...) {\n-        vnThreadsRunning[7]--;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n         PrintException(NULL, \"ThreadOpenAddedConnections()\");\n     }\n     printf(\"ThreadOpenAddedConnections exiting\\n\");\n@@ -1467,9 +1464,9 @@ void ThreadOpenAddedConnections2(void* parg)\n         }\n         if (fShutdown)\n             return;\n-        vnThreadsRunning[7]--;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n         Sleep(120000); // Retry every 2 minutes\n-        vnThreadsRunning[7]++;\n+        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         if (fShutdown)\n             return;\n     }\n@@ -1486,9 +1483,9 @@ bool OpenNetworkConnection(const CAddress& addrConnect)\n         FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect))\n         return false;\n \n-    vnThreadsRunning[1]--;\n+    vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n     CNode* pnode = ConnectNode(addrConnect);\n-    vnThreadsRunning[1]++;\n+    vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n     if (fShutdown)\n         return false;\n     if (!pnode)\n@@ -1510,15 +1507,15 @@ void ThreadMessageHandler(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadMessageHandler(parg));\n     try\n     {\n-        vnThreadsRunning[2]++;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n         ThreadMessageHandler2(parg);\n-        vnThreadsRunning[2]--;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[2]--;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n         PrintException(&e, \"ThreadMessageHandler()\");\n     } catch (...) {\n-        vnThreadsRunning[2]--;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n         PrintException(NULL, \"ThreadMessageHandler()\");\n     }\n     printf(\"ThreadMessageHandler exiting\\n\");\n@@ -1566,11 +1563,11 @@ void ThreadMessageHandler2(void* parg)\n         // Wait and allow messages to bunch up.\n         // Reduce vnThreadsRunning so StopNode has permission to exit while\n         // we're sleeping, but we must always check fShutdown after doing this.\n-        vnThreadsRunning[2]--;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n         Sleep(100);\n         if (fRequestShutdown)\n             Shutdown(NULL);\n-        vnThreadsRunning[2]++;\n+        vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n         if (fShutdown)\n             return;\n     }\n@@ -1773,23 +1770,26 @@ bool StopNode()\n     fShutdown = true;\n     nTransactionsUpdated++;\n     int64 nStart = GetTime();\n-    while (vnThreadsRunning[0] > 0 || vnThreadsRunning[1] > 0 || vnThreadsRunning[2] > 0 || vnThreadsRunning[3] > 0 || vnThreadsRunning[4] > 0\n-        || (fHaveUPnP && vnThreadsRunning[5] > 0) || vnThreadsRunning[6] > 0 || vnThreadsRunning[7] > 0\n-    )\n+    do\n     {\n+        int nThreadsRunning = 0;\n+        for (int n = 0; n < THREAD_MAX; n++)\n+            nThreadsRunning += vnThreadsRunning[n];\n+        if (nThreadsRunning == 0)\n+            break;\n         if (GetTime() - nStart > 20)\n             break;\n         Sleep(20);\n-    }\n-    if (vnThreadsRunning[0] > 0) printf(\"ThreadSocketHandler still running\\n\");\n-    if (vnThreadsRunning[1] > 0) printf(\"ThreadOpenConnections still running\\n\");\n-    if (vnThreadsRunning[2] > 0) printf(\"ThreadMessageHandler still running\\n\");\n-    if (vnThreadsRunning[3] > 0) printf(\"ThreadBitcoinMiner still running\\n\");\n-    if (vnThreadsRunning[4] > 0) printf(\"ThreadRPCServer still running\\n\");\n-    if (fHaveUPnP && vnThreadsRunning[5] > 0) printf(\"ThreadMapPort still running\\n\");\n-    if (vnThreadsRunning[6] > 0) printf(\"ThreadDNSAddressSeed still running\\n\");\n-    if (vnThreadsRunning[7] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");\n-    while (vnThreadsRunning[2] > 0 || vnThreadsRunning[4] > 0)\n+    } while(true);\n+    if (vnThreadsRunning[THREAD_SOCKETHANDLER] > 0) printf(\"ThreadSocketHandler still running\\n\");\n+    if (vnThreadsRunning[THREAD_OPENCONNECTIONS] > 0) printf(\"ThreadOpenConnections still running\\n\");\n+    if (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0) printf(\"ThreadMessageHandler still running\\n\");\n+    if (vnThreadsRunning[THREAD_MINER] > 0) printf(\"ThreadBitcoinMiner still running\\n\");\n+    if (vnThreadsRunning[THREAD_RPCSERVER] > 0) printf(\"ThreadRPCServer still running\\n\");\n+    if (fHaveUPnP && vnThreadsRunning[THREAD_UPNP] > 0) printf(\"ThreadMapPort still running\\n\");\n+    if (vnThreadsRunning[THREAD_DNSSEED] > 0) printf(\"ThreadDNSAddressSeed still running\\n\");\n+    if (vnThreadsRunning[THREAD_ADDEDCONNECTIONS] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");\n+    while (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0 || vnThreadsRunning[THREAD_RPCSERVER] > 0)\n         Sleep(20);\n     Sleep(50);\n "
      },
      {
        "sha": "0a3cf388ec97d1d0ae07e28cb104a16a577c36b5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c59881eaee61ae7d3b16001a75b9fd9fd09af297/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c59881eaee61ae7d3b16001a75b9fd9fd09af297",
        "patch": "@@ -68,14 +68,26 @@ class CRequestTracker\n \n \n \n-\n+enum threadId\n+{\n+    THREAD_SOCKETHANDLER,\n+    THREAD_OPENCONNECTIONS,\n+    THREAD_MESSAGEHANDLER,\n+    THREAD_MINER,\n+    THREAD_RPCSERVER,\n+    THREAD_UPNP,\n+    THREAD_DNSSEED,\n+    THREAD_ADDEDCONNECTIONS,\n+\n+    THREAD_MAX\n+};\n \n extern bool fClient;\n extern bool fAllowDNS;\n extern uint64 nLocalServices;\n extern CAddress addrLocalHost;\n extern uint64 nLocalHostNonce;\n-extern boost::array<int, 10> vnThreadsRunning;\n+extern boost::array<int, THREAD_MAX> vnThreadsRunning;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;"
      }
    ]
  }
]