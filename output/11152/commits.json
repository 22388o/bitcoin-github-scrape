[
  {
    "sha": "0bf07635ba7637460c47bad2508c85e2d935d5ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmYwNzYzNWJhNzYzNzQ2MGM0N2JhZDI1MDhjODVlMmQ5MzVkNWVl",
    "commit": {
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2017-08-26T01:32:40Z"
      },
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2017-08-26T01:32:50Z"
      },
      "message": "Increase DEFAULT_ANCESTOR_LIMIT and DEFAULT_DESCENDANT_LIMIT to 100",
      "tree": {
        "sha": "695a85c2e32d484175be7006409d4c03604ed218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/695a85c2e32d484175be7006409d4c03604ed218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf07635ba7637460c47bad2508c85e2d935d5ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf07635ba7637460c47bad2508c85e2d935d5ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf07635ba7637460c47bad2508c85e2d935d5ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf07635ba7637460c47bad2508c85e2d935d5ee/comments",
    "author": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07c92b98e2a0a29d19b5ccdbbfa9addc1e80b306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07c92b98e2a0a29d19b5ccdbbfa9addc1e80b306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07c92b98e2a0a29d19b5ccdbbfa9addc1e80b306"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d4715c04231ff13d2d190fec747eb1d2db7d69cc",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf07635ba7637460c47bad2508c85e2d935d5ee/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf07635ba7637460c47bad2508c85e2d935d5ee/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0bf07635ba7637460c47bad2508c85e2d935d5ee",
        "patch": "@@ -58,11 +58,11 @@ static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;\n /** Default for -limitancestorcount, max number of in-mempool ancestors */\n-static const unsigned int DEFAULT_ANCESTOR_LIMIT = 25;\n+static const unsigned int DEFAULT_ANCESTOR_LIMIT = 100;\n /** Default for -limitancestorsize, maximum kilobytes of tx + all in-mempool ancestors */\n static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n /** Default for -limitdescendantcount, max number of in-mempool descendants */\n-static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n+static const unsigned int DEFAULT_DESCENDANT_LIMIT = 100;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n@@ -215,7 +215,7 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** \n+/**\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n@@ -226,7 +226,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n- * \n+ *\n  * Call without cs_main held.\n  *\n  * @param[in]   pblock  The block we want to process.\n@@ -350,7 +350,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = null\n \n /**\n  * Closure representing one script verification\n- * Note that this stores references to the spending transaction \n+ * Note that this stores references to the spending transaction\n  */\n class CScriptCheck\n {"
      },
      {
        "sha": "1bd5386c4a10ead7a58d37ea998e64fad13dfb03",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf07635ba7637460c47bad2508c85e2d935d5ee/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf07635ba7637460c47bad2508c85e2d935d5ee/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=0bf07635ba7637460c47bad2508c85e2d935d5ee",
        "patch": "@@ -8,8 +8,8 @@\n from test_framework.util import *\n from test_framework.mininode import COIN\n \n-MAX_ANCESTORS = 25\n-MAX_DESCENDANTS = 25\n+MAX_ANCESTORS = 100\n+MAX_DESCENDANTS = 100\n \n class MempoolPackagesTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -102,7 +102,7 @@ def run_test(self):\n         for x in chain:\n             ancestor_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n-        \n+\n         # Undo the prioritisetransaction for later tests\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n@@ -234,7 +234,7 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n-        \n+\n         # Now try to disconnect the tip on each node...\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())"
      }
    ]
  }
]