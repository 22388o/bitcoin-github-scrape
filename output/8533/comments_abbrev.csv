dcousens,2016-08-17T22:51:07Z,utACK 24c398f\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-240573316,240573316,
instagibbs,2016-08-23T16:53:21Z,needs 0.13.1 milestone tag?\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-241799188,241799188,
jameshilliard,2016-08-25T18:02:51Z,tACK 26df793c3d94d3e0e9907f4455448e01f86e2dfa on my testnet pool\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-242484577,242484577,
luke-jr,2016-08-27T21:21:57Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-242941583,242941583,
btcdrak,2016-08-28T08:21:25Z,Tested ACK 26df793\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-242962678,242962678,
instagibbs,2016-08-29T17:26:42Z,utACK https://github.com/bitcoin/bitcoin/pull/8533/commits/26df793c3d94d3e0e9907f4455448e01f86e2dfa\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243192549,243192549,
jl2012,2016-08-29T19:03:24Z,Added script tests for some special S values\n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243222022,243222022,
jl2012,2016-08-30T16:15:38Z,"The newly added tests of 70fbd82 revealed some interesting properties of the current implementation of LOW_S. The LOW_S rule is enforced only if R and S are both below `0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141`. Otherwise, the CHECKSIG will return a False to the stack, instead of fail immediately.\n\nYou could find the examples here: https://github.com/jl2012/bips/",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243494049,243494049,
jl2012,2016-08-31T16:49:15Z,The alternative plan is to do NULLDUMMY only : #8636 \n,https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243827156,243827156,
dcousens,2016-09-01T03:11:21Z,"@jl2012 to clarify,  the `CHECKSIG` operation can fail before a `LOW_S` signature is detected?  Why is that an issue?\n\nIs it because a LOW_S signature could get through conceivably if an alternative branch subsequently returns true?\n\nIs that a bad thing?  Or should we only allow canonical signatures to be allowed to be CHECKSIG'd?  Meaning we'd need some kind of ""pre-pass""...\n",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243964172,243964172,
jl2012,2016-09-01T04:33:20Z,"@dcousens the problem is CHECKSIG won't fail immediately due to LOW_S if either R or S is out-of-range.\n\nI think this is how it actually get processed:\n1. secp256k1_scalar_check_overflow checks if R or S is overflow, if yes\n2. ecdsa_signature_parse_der_lax transforms both R and S to 0\n3. secp256k1_scalar_is_high checks if S is high. Since S has become 0 in step 2, it doesn't think it's high s",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243973512,243973512,
jl2012,2016-09-01T04:48:08Z,"Having said that, there won't be any irreversible harm if the softfork had been done without this being discovered. It was still a softfork and it would work as we thought for 99.99999% of transactions on the blockchain. However, if an alternative implementation did not replicate this precisely, they would fork away due to the 0.00001% of transactions.\n",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243975104,243975104,
dcousens,2016-09-01T05:31:31Z,"Thanks for the great explanation @jl2012, excellent point about implementation replication.\n",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-243980238,243980238,
jl2012,2016-09-02T11:41:53Z,"The plan is to do NULLDUMMY only (#8636), and leave LOW_S later, probably at the same time banning non-zero failing signature.\n\nPlease remove 0.13.1 tag\n",https://github.com/bitcoin/bitcoin/pull/8533#issuecomment-244353014,244353014,
instagibbs,2016-08-23T16:58:54Z,Could we get constants for these long hex numbers?\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75907866,75907866,qa/rpc-tests/bip146-p2p.py
instagibbs,2016-08-23T16:59:11Z,Constants for these too?\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75907920,75907920,qa/rpc-tests/test_framework/key.py
instagibbs,2016-08-23T17:37:57Z,A little worried this could allow some prankster to reorg testnet a huge amount. Side-effect of bundling the mainnet activation here.\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75914787,75914787,src/main.cpp
sipa,2016-08-23T17:39:24Z,"An alternative is defining a separate BIP9 rollout for this, using the same\nbit on mainnet as segwit, but a different bit on testnet.\n",https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75915068,75915068,src/main.cpp
instagibbs,2016-08-23T17:41:09Z,"was exactly my thought. Kind of makes me cry for the 2 line SF, but oh well\n",https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75915420,75915420,src/main.cpp
jl2012,2016-08-23T17:48:34Z,There is currently no violating txs on testnet and we could start enforcing this on testnet now.\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r75916827,75916827,src/main.cpp
jl2012,2016-08-24T09:26:11Z,@instagibbs edited\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r76023570,76023570,qa/rpc-tests/test_framework/key.py
btcdrak,2016-08-25T09:06:50Z,"@instagibbs testnet is a testnet and it's being reorged massively all the time. In the last 3 months it's had about 3 major reorgs (>10,000 blocks). We should not be adding complexity for testnet.\n",https://github.com/bitcoin/bitcoin/pull/8533#discussion_r76206428,76206428,src/main.cpp
instagibbs,2016-08-25T11:06:42Z,"@btcdrak it should not be _policy_ to not care about massive reorgs and encourage them. That said, if testnet miners want to make sure none are included by softforking now, I wouldn't complain. \n",https://github.com/bitcoin/bitcoin/pull/8533#discussion_r76223390,76223390,src/main.cpp
btcdrak,2016-08-25T17:48:39Z,Ok the issue is moot now as rules are now enforced on testnet3.\n,https://github.com/bitcoin/bitcoin/pull/8533#discussion_r76291758,76291758,src/main.cpp
