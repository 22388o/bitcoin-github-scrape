[
  {
    "sha": "51c24f86bca4276a0727582c0ca24266efa8f01a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWMyNGY4NmJjYTQyNzZhMDcyNzU4MmMwY2EyNDI2NmVmYThmMDFh",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-24T06:44:17Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-24T06:45:01Z"
      },
      "message": "Make test framework produce lowS signatures",
      "tree": {
        "sha": "9383d5cf288c6ac45eebbe95040aacd36b830518",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9383d5cf288c6ac45eebbe95040aacd36b830518"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51c24f86bca4276a0727582c0ca24266efa8f01a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c24f86bca4276a0727582c0ca24266efa8f01a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51c24f86bca4276a0727582c0ca24266efa8f01a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c24f86bca4276a0727582c0ca24266efa8f01a/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38590729631c0984abf5c1bb26a0f2d21ccd4916"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c63a15c1e0c92bd4a63d2b47bff4499e341cab3a",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51c24f86bca4276a0727582c0ca24266efa8f01a/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51c24f86bca4276a0727582c0ca24266efa8f01a/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=51c24f86bca4276a0727582c0ca24266efa8f01a",
        "patch": "@@ -75,6 +75,9 @@\n # this specifies the curve used with ECDSA.\n NID_secp256k1 = 714 # from openssl/obj_mac.h\n \n+SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n+SECP256K1_ORDER_HALF = SECP256K1_ORDER // 2\n+\n # Thx to Sam Devlin for the ctypes magic 64-bit fix.\n def _check_result(val, func, args):\n     if val == 0:\n@@ -147,7 +150,7 @@ def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n         r = self.get_raw_ecdh_key(other_pubkey)\n         return kdf(r)\n \n-    def sign(self, hash):\n+    def sign(self, hash, low_s = True):\n         # FIXME: need unit tests for below cases\n         if not isinstance(hash, bytes):\n             raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n@@ -159,7 +162,25 @@ def sign(self, hash):\n         mb_sig = ctypes.create_string_buffer(sig_size0.value)\n         result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n         assert 1 == result\n-        return mb_sig.raw[:sig_size0.value]\n+        assert mb_sig.raw[0] == 0x30\n+        assert mb_sig.raw[1] == sig_size0.value - 2\n+        total_size = mb_sig.raw[1]\n+        assert mb_sig.raw[2] == 2\n+        r_size = mb_sig.raw[3]\n+        assert mb_sig.raw[4 + r_size] == 2\n+        s_size = mb_sig.raw[5 + r_size]\n+        s_value = int.from_bytes(mb_sig.raw[6+r_size:6+r_size+s_size], byteorder='big')\n+        if (not low_s) or s_value <= SECP256K1_ORDER_HALF:\n+            return mb_sig.raw[:sig_size0.value]\n+        else:\n+            low_s_value = SECP256K1_ORDER - s_value\n+            low_s_bytes = (low_s_value).to_bytes(33, byteorder='big')\n+            while len(low_s_bytes) > 1 and low_s_bytes[0] == 0 and low_s_bytes[1] < 0x80:\n+                low_s_bytes = low_s_bytes[1:]\n+            new_s_size = len(low_s_bytes)\n+            new_total_size_byte = (total_size + new_s_size - s_size).to_bytes(1,byteorder='big')\n+            new_s_size_byte = (new_s_size).to_bytes(1,byteorder='big')\n+            return b'\\x30' + new_total_size_byte + mb_sig.raw[2:5+r_size] + new_s_size_byte + low_s_bytes\n \n     def verify(self, hash, sig):\n         \"\"\"Verify a DER signature\"\"\""
      }
    ]
  },
  {
    "sha": "26df793c3d94d3e0e9907f4455448e01f86e2dfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmRmNzkzYzNkOTRkM2UwZTk5MDdmNDQ1NTQ0OGUwMWY4NmUyZGZh",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-24T06:44:43Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-24T06:45:15Z"
      },
      "message": "Implement LOW_S and NULLDUMMY softfork (BIP146)",
      "tree": {
        "sha": "6c3bf143597b6f3b58d32bd49bfbc2b840576fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c3bf143597b6f3b58d32bd49bfbc2b840576fce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26df793c3d94d3e0e9907f4455448e01f86e2dfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26df793c3d94d3e0e9907f4455448e01f86e2dfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26df793c3d94d3e0e9907f4455448e01f86e2dfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26df793c3d94d3e0e9907f4455448e01f86e2dfa/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51c24f86bca4276a0727582c0ca24266efa8f01a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51c24f86bca4276a0727582c0ca24266efa8f01a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51c24f86bca4276a0727582c0ca24266efa8f01a"
      }
    ],
    "stats": {
      "total": 241,
      "additions": 240,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4656204b2d070c028dd6d44070ba8540ee318a03",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26df793c3d94d3e0e9907f4455448e01f86e2dfa/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26df793c3d94d3e0e9907f4455448e01f86e2dfa/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=26df793c3d94d3e0e9907f4455448e01f86e2dfa",
        "patch": "@@ -143,6 +143,7 @@\n     'importprunedfunds.py',\n     'signmessages.py',\n     'p2p-compactblocks.py',\n+    'bip146-p2p.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "cdeb82c099d13a0bead35bdeccc4ea5f68094e69",
        "filename": "qa/rpc-tests/bip146-p2p.py",
        "status": "added",
        "additions": 236,
        "deletions": 0,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26df793c3d94d3e0e9907f4455448e01f86e2dfa/qa/rpc-tests/bip146-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26df793c3d94d3e0e9907f4455448e01f86e2dfa/qa/rpc-tests/bip146-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip146-p2p.py?ref=26df793c3d94d3e0e9907f4455448e01f86e2dfa",
        "patch": "@@ -0,0 +1,236 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread, ToHex\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.comptool import TestManager\n+from test_framework.script import CScript\n+from test_framework.key import SECP256K1_ORDER, SECP256K1_ORDER_HALF\n+from io import BytesIO\n+import time\n+\n+LOW_S_ERROR = \"64: non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)\"\n+NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+\n+def trueDummy(tx):\n+    scriptSig = CScript(tx.vin[0].scriptSig)\n+    newscript = []\n+    for i in scriptSig:\n+        if (len(newscript) == 0):\n+            assert(len(i) == 0)\n+            newscript.append(b'\\x51')\n+        else:\n+            newscript.append(i)\n+    tx.vin[0].scriptSig = CScript(newscript)\n+    tx.rehash()\n+\n+def isCanonicalSig(sig):\n+    '''\n+    A canonical signature consists of:\n+    <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n+    '''\n+    if (len(sig) < 9 or len(sig) > 73 or sig[0] != 0x30):\n+        return False\n+    if (sig[1] != len(sig) - 3):\n+        return False\n+    lenR = sig[3]\n+    if (len(sig) < 8 + lenR):\n+        return False\n+    lenS = sig[5 + lenR]\n+    if (len(sig) != lenR + lenS + 7):\n+        return False\n+    if (lenR == 0 or lenR > 33 or sig[2] != 0x02 or sig[4] & 0x80):\n+        return False\n+    if (lenS == 0 or lenS > 33 or sig[4 + lenR] != 0x02 or sig[6 + lenR] & 0x80):\n+        return False\n+    if (lenR > 1 and sig[4] == 0x00 and not sig[5] & 0x80):\n+        return False\n+    if (lenS > 1 and sig[lenS + 6] == 0x00 and not sig[lenS + 7] & 0x80):\n+        return False\n+    return True\n+\n+def highSifyTx(tx):\n+    scriptSig = CScript(tx.vin[0].scriptSig)\n+    newscript = []\n+    for i in scriptSig:\n+        if (isCanonicalSig(i)):\n+            i = highSifySig(i)\n+        newscript.append(i)\n+    tx.vin[0].scriptSig = CScript(newscript)\n+    tx.rehash()\n+\n+def highSifySig(sig):\n+    assert(isCanonicalSig(sig))\n+    rsize = sig[3]\n+    s = int.from_bytes(sig[6+rsize:-1], byteorder='big')\n+    assert(s <= SECP256K1_ORDER_HALF)\n+    s = SECP256K1_ORDER - s\n+    highsbytes = s.to_bytes(33, byteorder='big')\n+    tsizebyte = (rsize + 37).to_bytes(1, byteorder='big')\n+    sig = b'\\x30' + tsizebyte + sig[2:5+rsize] + b'\\x21' + highsbytes + sig[-1:]\n+    return sig\n+\n+\n+'''\n+This test is meant to exercise BIP146.\n+Connect to a single node.\n+Generate 4 blocks (save the coinbases for later).\n+Generate 425 more blocks.\n+[Policy/Consensus] Check that LOW_S and NULLDUMMY compliant transactions are accepted in the 430th block.\n+[Policy] Check that HIGH_S and non-NULLDUMMY transactions are rejected before activation.\n+[Consensus] Check that the new LOW_S and NULLDUMMY rules are not enforced on the 431st block.\n+[Policy/Consensus] Check that the new LOW_S and NULLDUMMY rules are enforced on the 432nd block.\n+'''\n+\n+class BIP146Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-walletprematurewitness']])\n+\n+    def run_test(self):\n+        self.address = self.nodes[0].getnewaddress()\n+        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])\n+        self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n+        self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n+\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.coinbase_blocks = self.nodes[0].generate(4) # Block 4\n+        coinbase_txid = []\n+        for i in self.coinbase_blocks:\n+            coinbase_txid.append(self.nodes[0].getblock(i)['tx'][0])\n+        self.nodes[0].generate(425) # Block 429\n+        self.lastblockhash = self.nodes[0].getbestblockhash()\n+        self.tip = int(\"0x\" + self.lastblockhash, 0)\n+        self.lastblockheight = 429\n+        self.lastblocktime = int(time.time()) + 429\n+\n+        print (\"Test 1: LOW_S and NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n+        test1txs = [self.create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, 49)]\n+        txid1 = self.tx_submit(self.nodes[0], test1txs[0])\n+        test1txs.append(self.create_transaction(self.nodes[0], txid1, self.ms_address, 48))\n+        txid2 = self.tx_submit(self.nodes[0], test1txs[1])\n+        test1txs.append(self.create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, 49))\n+        txid3 = self.tx_submit(self.nodes[0], test1txs[2])\n+        self.block_submit(self.nodes[0], test1txs, False, True)\n+\n+        print (\"Test 2: HIGH_S P2PK transaction should not be accepted to mempool before activation\")\n+        test2tx = self.create_transaction(self.nodes[0], coinbase_txid[2], self.wit_address, 49)\n+        highSifyTx(test2tx)\n+        txid4 = test2tx.hash\n+        self.tx_submit(self.nodes[0], test2tx, LOW_S_ERROR)\n+\n+        print (\"Test 3: non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n+        test3tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 48)\n+        test4tx = CTransaction(test3tx)\n+        trueDummy(test3tx)\n+        self.tx_submit(self.nodes[0], test3tx, NULLDUMMY_ERROR)\n+\n+        print (\"Test 4: HIGH_S base multisig transaction should not be accepted to mempool before activation\")\n+        highSifyTx(test4tx)\n+        self.tx_submit(self.nodes[0], test4tx, LOW_S_ERROR)\n+\n+        print (\"Test 5: HIGH_S and non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n+        highSifyTx(test3tx) # make it both HIGH_S and non-NULLDUMMY\n+        txid5 = test3tx.hash\n+        self.block_submit(self.nodes[0], [test2tx, test3tx], False, True)\n+\n+        print (\"Test 6: HIGH_S P2PK transaction is invalid after activation\")\n+        test6tx = self.create_transaction(self.nodes[0], coinbase_txid[3], self.address, 49)\n+        test12txs = [CTransaction(test6tx)]\n+        highSifyTx(test6tx)\n+        self.tx_submit(self.nodes[0], test6tx, LOW_S_ERROR)\n+        self.block_submit(self.nodes[0], [test6tx])\n+\n+        print (\"Test 7: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n+        test7tx = self.create_transaction(self.nodes[0], txid5, self.address, 47)\n+        test8tx = CTransaction(test7tx)\n+        test12txs.append(CTransaction(test7tx))\n+        trueDummy(test7tx)\n+        self.tx_submit(self.nodes[0], test7tx, NULLDUMMY_ERROR)\n+        self.block_submit(self.nodes[0], [test7tx])\n+\n+        print (\"Test 8: HIGH_S base multisig transaction is invalid after activation\")\n+        highSifyTx(test8tx)\n+        self.tx_submit(self.nodes[0], test8tx, LOW_S_ERROR)\n+        self.block_submit(self.nodes[0], [test8tx])\n+\n+        print (\"Test 9: HIGH_S P2WPKH transaction is invalid after activation\")\n+        test9tx = self.create_transaction(self.nodes[0], txid4, self.address, 48)\n+        test12txs.append(CTransaction(test9tx))\n+        test9tx.wit.vtxinwit[0].scriptWitness.stack[0] = highSifySig(test9tx.wit.vtxinwit[0].scriptWitness.stack[0])\n+        self.tx_submit(self.nodes[0], test9tx, LOW_S_ERROR)\n+        self.block_submit(self.nodes[0], [test9tx], True)\n+\n+        print (\"Test 10: HIGH_S P2WSH multisig transaction is invalid after activation\")\n+        test10tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n+        test11tx = CTransaction(test10tx)\n+        test12txs.append(CTransaction(test10tx))\n+        test10tx.wit.vtxinwit[0].scriptWitness.stack[1] = highSifySig(test10tx.wit.vtxinwit[0].scriptWitness.stack[1])\n+        self.tx_submit(self.nodes[0], test10tx, LOW_S_ERROR)\n+        self.block_submit(self.nodes[0], [test10tx], True)\n+\n+        print (\"Test 11: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n+        test11tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n+        self.tx_submit(self.nodes[0], test11tx, NULLDUMMY_ERROR)\n+        self.block_submit(self.nodes[0], [test11tx], True)\n+\n+        print (\"Test 12: LOW_S and NULLDUMMY compliant base/witness transactions should be accepted to mempool and mined after activation [432]\")\n+        for i in test12txs:\n+            self.tx_submit(self.nodes[0], i)\n+        self.block_submit(self.nodes[0], test12txs, True, True)\n+\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+\n+    def tx_submit(self, node, tx, msg = \"\"):\n+        tx.rehash()\n+        try:\n+            node.sendrawtransaction(bytes_to_hex_str(tx.serialize_with_witness()), True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], msg)\n+        return tx.hash\n+\n+\n+    def block_submit(self, node, txs, witness = False, accept = False):\n+        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1), self.lastblocktime + 1)\n+        block.nVersion = 4\n+        for tx in txs:\n+            tx.rehash()\n+            block.vtx.append(tx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        witness and add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+        if (accept):\n+            assert_equal(node.getbestblockhash(), block.hash)\n+            self.tip = block.sha256\n+            self.lastblockhash = block.hash\n+            self.lastblocktime += 1\n+            self.lastblockheight += 1\n+        else:\n+            assert_equal(node.getbestblockhash(), self.lastblockhash)\n+\n+if __name__ == '__main__':\n+    BIP146Test().main()\n\\ No newline at end of file"
      },
      {
        "sha": "accc559f6b4652b4f6d1bbe7efe7a428d05a3f14",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26df793c3d94d3e0e9907f4455448e01f86e2dfa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26df793c3d94d3e0e9907f4455448e01f86e2dfa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=26df793c3d94d3e0e9907f4455448e01f86e2dfa",
        "patch": "@@ -2384,9 +2384,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n-    // Start enforcing WITNESS rules using versionbits logic.\n+    // Start enforcing WITNESS, NULLDUMMY, and LOW_S rules using versionbits logic.\n     if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n+        flags |= SCRIPT_VERIFY_LOW_S;\n+        flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;"
      }
    ]
  },
  {
    "sha": "70fbd8212b3874ec1c939597cab856c8713f4df5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGZiZDgyMTJiMzg3NGVjMWM5Mzk1OTdjYWI4NTZjODcxM2Y0ZGY1",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-29T19:01:38Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-30T07:38:32Z"
      },
      "message": "Add LOW_S script tests",
      "tree": {
        "sha": "03daa582e7cb395fe459d064047f9258f3b4ca80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03daa582e7cb395fe459d064047f9258f3b4ca80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70fbd8212b3874ec1c939597cab856c8713f4df5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70fbd8212b3874ec1c939597cab856c8713f4df5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70fbd8212b3874ec1c939597cab856c8713f4df5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70fbd8212b3874ec1c939597cab856c8713f4df5/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26df793c3d94d3e0e9907f4455448e01f86e2dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26df793c3d94d3e0e9907f4455448e01f86e2dfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26df793c3d94d3e0e9907f4455448e01f86e2dfa"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 116,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f8efd56f77e21e50eaa74cb6c204acd008794f58",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70fbd8212b3874ec1c939597cab856c8713f4df5/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70fbd8212b3874ec1c939597cab856c8713f4df5/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=70fbd8212b3874ec1c939597cab856c8713f4df5",
        "patch": "@@ -1631,6 +1631,122 @@\n     \"SIG_HIGH_S\",\n     \"P2PK with high S\"\n ],\n+\n+[\"Testing LOW_S with special R and S values using CHECKSIG NOT\"],\n+[\n+    \"0x29 0x3026022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002010101\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"OK\",\n+    \"The lowest valid S value\"\n+],\n+[\n+    \"0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"OK\",\n+    \"The highest valid S value\"\n+],\n+[\n+    \"0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"SIG_HIGH_S\",\n+    \"The lowest invalid S value\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"SIG_HIGH_S\",\n+    \"The highest invalid S value\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414101\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"OK\",\n+    \"LOW_S rule does not apply to out-of-range S value\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001\",\n+    \"0 CHECKSIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"OK\",\n+    \"LOW_S rule does not apply if R is out-of-range\"\n+],\n+[\n+    \"0 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101\",\n+    \"2 0 0 2 CHECKMULTISIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"SIG_HIGH_S\",\n+    \"The top signature is detected as HIGH_S\"\n+],\n+[\n+    \"0 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001\",\n+    \"2 0 0 2 CHECKMULTISIG NOT\",\n+    \"LOW_S,DERSIG\",\n+    \"OK\",\n+    \"The top signature fails so the other signature is not detected as HIGH_S\"\n+],\n+[\"Repeating tests without LOW_S flag\"],\n+[\n+    \"0x29 0x3026022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002010101\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The lowest valid S value\"\n+],\n+[\n+    \"0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The highest valid S value\"\n+],\n+[\n+    \"0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The lowest invalid S value (not fail without LOW_S flag)\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The highest invalid S value (not fail without LOW_S flag)\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414101\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"Out-of-range S value is valid with or without LOW_S flag\"\n+],\n+[\n+    \"0x49 0x3046022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001\",\n+    \"0 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"If R is out-of-range, high S value is valid with or without LOW_S flag\"\n+],\n+[\n+    \"0 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101\",\n+    \"2 0 0 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The top signature has high S (not fail without LOW_S flag)\"\n+],\n+[\n+    \"0 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a101 0x48 0x3045022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414002207fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a001\",\n+    \"2 0 0 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"OK\",\n+    \"The top signature fails so the other signature is not processed anyway\"\n+],\n+\n [\n     \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\","
      }
    ]
  }
]