gavinandresen,2011-06-20T15:03:06Z,"Should be possible to implement this much more cleanly using the MULTISIG opcodes.\n\nAlso, what do escrow transactions look like in the GUI?\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1403240,1403240,
groffer,2011-06-21T06:17:03Z,"> Should be possible to implement this much more cleanly using the MULTISIG\n> opcodes.\n\nI overlooked that MULTISIG allows for less signatures than keys.  I will\ngo ahead and rewrite the script.\n\n> Also, what do escrow transactions look like in the GUI?\n\nMy plan is to make the display look reasonable, but not provide a GUI for\ninitiating escrow.  Escrow requires communicating with another ",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1408254,1408254,
davout,2011-06-21T07:08:03Z,"I personnally don't feel this should go into the main client implementation, but in some sort of extension instead\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1408451,1408451,
gmaxwell,2011-06-23T15:49:16Z,"Davout, care to explain why?\n\nWithout support in the main client implementation we couldn't expect these transactions to be relayed or mined by most miners.  Also an external implementation would require apis for importing/exporting transactions, and wouldn't e.g. have access to the wallet keys and address book. Seems ugly to me.\n\n The api/cli presented in this patch is nice (well, the redeem ",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1426150,1426150,
TheBlueMatt,2011-06-24T17:14:18Z,"I would like to see some rethinking of IsStandard, but IMO that is quite a way down the road.  I would like to see the codebase generally cleaned a ton before that ever happens.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1433736,1433736,
sacarlson,2011-06-29T05:40:13Z,I modified zamgo's  https://github.com/sacarlson/bitcoin-webskin to support and help document  sendescrow and redeemescrow and also incorporated the changes into MultiCoin https://github.com/sacarlson/MultiCoin so that people can start learning how to start using escrow services in the furture.  MultiCoin's escrow features have now been tested on testnet and weedsnet and will also be supported on ,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1464945,1464945,
davout,2011-06-29T09:04:20Z,"@gmaxwell just my personal opinion, it doesn't matter that much, and consensus seems to go the other way :)\n@TheBlueMatt +1\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1465679,1465679,
groffer,2011-06-30T03:22:55Z,"Changed:\n- Rebased on latest head\n- Renamed all instances of ""escrow"" to ""multisign"" because this is not really escrow in the traditional sense\n- Switched to CHECKMULTISIG which did not clean things up that much because of the need to check hash160s\n- Added unit tests\n- Fixed some unit testing issues with the makefile.  No need to compile with GUI, add all the object files and ensure that we ",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1472447,1472447,
groffer,2011-06-30T03:39:12Z,"Oh, I found a bug in CHECKMULTISIG.  It drops one too many items from the stack, so I had to push a dummy value to work around that.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1472505,1472505,
sacarlson,2011-07-04T09:35:00Z,Todays  tests with me and groffer on his bitcoin branch https://github.com/groffer/bitcoin for multisign transactions were a success on commit d260515fba3ee09841701e854eeba7f419c006d6  to see detailed IRC session of tests see http://paste.ubuntu.com/637841/  I also merged this with my bitcoin branch MultiCoin for further testing and updated my branch of bitcoin-webskin to include the new features.,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1496716,1496716,
gmaxwell,2011-07-25T15:51:16Z,"It would be nice if redeem worked even when you had non of the required keys, so someone could request payment from an escrow which they can't sign for by forming a txn and sending it around to people to sign. \n\nThis would also make it easier for escrow parties who keep their escrow keys offline, â€” as they could start the escrow release process from a host with the blockchain but gets signed by ",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1646729,1646729,
groffer,2011-08-03T01:49:07Z,"@gmaxwell - good point, and actually it already works this way.  If you have none of the keys, it will create a tx without any signatures.  To increase visibility into the signature collection process, the latest commit adds the list of addresses that have signed the tx to the output of the RPC call.\n\nThe latest commit also refactors the script Solver function so it can be used to check more com",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1714884,1714884,
groffer,2011-08-03T01:50:18Z,Also added some unit tests for script.cpp.\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1714888,1714888,
gavinandresen,2011-08-21T17:58:56Z,"Can you write up a description of what the values in the TxIn are, and what operations are being done to them in the TxOut to redeem?  My puny brain is having trouble figuring out what the ROLL SIZE NOT OVER HASH.. is accomplishing.\n\nLooking at:  http://blockexplorer.com/testnet/tx/a17b21f52859ed326d1395d8a56d5c7389f5fc83c17b9140a71d7cb86fdf0f5f#i96368\n\n... the TxIn is:\n0 pubkey1 pubkey2 2 si",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1864017,1864017,
groffer,2011-08-22T17:17:26Z,"There's a bit more operand stack detail in comments on line 1575, and a writeup below.\n\nThis is a 2 party out of 3 spend, with one party not participating.\n\nThe scriptSig (TxIn) is (reading from right to left): OP_0 (to work around a bug in OP_CHECKMULTISIG), then two participating signatures, then the number of signatures, followed by the two participating pubkeys, then an empty operand holdi",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1872219,1872219,
gavinandresen,2011-08-23T14:42:41Z,"Unless I'm grossly misunderstanding CHECKMULTISIG, the simplest form of a 2-of-3 CHECKMULTISIG would be:\n\nTxIn:  sig1 sig2\nTxOut:  2 pub1 pub2 pub3 3 CHECKMULTISIG\n\nI've been working on schemes to hash the public keys so that people can use shorter bitcoin addresses...\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1880395,1880395,
gavinandresen,2011-08-23T15:01:52Z,groffer: appreciate comments on:   https://gist.github.com/39158239e36f6af69d6f\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1880594,1880594,
sipa,2011-08-23T16:15:24Z,"An alternative way for handling N-out-of-M multisig with addresses, without CHECKMULTISIG at all:\n\nscriptSig:\n- for each pubkey/signature that is provided: [signature] [pubkey]\n- for each pubkey/signature that is missing: OP_0 OP_0\n\nSo for 2-out-of-3, with the second one missing:\n- [signature3] [pubkey3]\n- OP_0 OP_0\n- [signature1] [pubkey1]\n\nscriptPubKey:\n- for each of the M addresses:",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1881328,1881328,
gavinandresen,2011-08-23T16:43:18Z,"groffer: is sipa's suggestion close to what you started with?\n\nI'm thinking about whether or not I like the ability to create a multisig address if all you know is the hashes of the public keys.  If I'm understanding, use case is:\n- I know 3 bitcoin addresses, create a (say) 2-of-3 address\n- People send to the 2-of-3 address\n- Sometime later, 2 full public keys and signatures are gathered, an",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1881564,1881564,
gavinandresen,2011-08-23T18:18:49Z,"I think this works (somebody check my work) if ""we"" decide that redeem-with-only-m-full-public-keys is important:\n\nTxIn: s1 s2 2 p1 OP_0 p3\nTxOut:\n  3DUP    -- duplicate public keys so we can check hashes\n  HASH160 ... EQUAL TOALTSTACK\n  HASH160 ... EQUAL FROMALTSTACK ADD TOALTSTACK\n  HASH160 ... EQUAL FROMALTSTACK ADD 2 GREATERTHANOREQUAL VERIFY\n  3 CHECKMULTISIG\n\n... and is smaller tha",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1882482,1882482,
groffer,2011-08-24T01:32:54Z,"@sipa - that's actually very similar to what I had before switching to OP_CHECKMULTISIG in dc2dfbab6a0f75070fc3 (search for OP_TUCK).  I can revert to that if it's preferred.\n\n@gavinandresen - yes, otherwise you have to distribute the pubkeys ahead of time.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1885913,1885913,
groffer,2011-08-24T03:51:07Z,"(sorry for the skew - my response was before I saw last comment from @gavinandresen)\n\nYes, CHECKMULTISIG is okay with a malformed pubkey (CheckSig returns false, and the loop moves on to the next pubkey).\n\nBut the last CHECKMULTISIG solution above can be redeemed with just one correct signature, as coblee explains in the gist.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1886527,1886527,
groffer,2011-08-24T04:15:41Z,"I would love to add the case of (a AND b) OR c as mentioned in the gist, and for that matter a generalized disjunctions () OR () OR () .\n\nThis will enable emergency backup signer.  It will also enable contracts based on broadcast information.  For example with sender and receiver keys Ks, Kr, a coin with scriptSig (Ks AND K1) OR (Kr AND K2) could be redeemed by sender if private key for K1 is br",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1886602,1886602,
groffer,2011-08-24T16:31:31Z,coblee's solution from the gist looks optimal:\n\n0\nOVER 2SWAP CHECKSIG SWAP HASH160 {} EQUAL BOOLAND ADD // n times\nm GREATERTHANOREQUAL\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1891500,1891500,
gavinandresen,2011-08-24T18:08:05Z,"groffer:  you willing to take a stab at implementing JUST the new transaction types as a separate patch or patches? It doesn't make sense to roll this out all at once, because the RPC calls won't work unless the transactions are relayed and included into blocks.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1892535,1892535,
groffer,2011-08-24T19:18:04Z,Do you mean just the IsStandard part?  I can do that.  We should make a decision on a couple of questions:\n- Use coblee CHECKSIG solution?\n- Add disjunctions?\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1893352,1893352,
gmaxwell,2011-08-24T20:24:02Z,"On Wed, Aug 24, 2011 at 3:18 PM, groffer\nreply@reply.github.com\nwrote:\n\n> Do you mean just the IsStandard part? Â I can do that. Â We should make a decision on a couple of questions:\n> - Use coblee CHECKSIG solution?\n> - Add disjunctions?\n\nI'd rather do this change once instead of twice.  Unless the\ndisjunction script gives people security fears I'd rather it be\nsupported.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1893921,1893921,
sipa,2011-08-25T09:45:48Z,"As long as each hash160 is used only once, you can write each boolean expression in reverse-polish notation, and use coblee's technique to evaluate it.\n\nFor example: a1 OR (a2 AND a3) OR COUNT(a4,a5,a6)>1\nIn RPN: a1 a2 a3 AND OR a4 a5 ADD a6 ADD 1 GREATER OR\n\nFor each address element, you need to know the number n of elements on the stack that belong to the RPN processing - all those beneath ",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1898521,1898521,
groffer,2011-08-26T01:38:32Z,I would love to implement the more general solution from @sipa if @gavinandresen is on board with that.\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1905906,1905906,
gavinandresen,2011-08-26T02:04:44Z,"What does the code for IsStandard() look like with sipa's generalized case?\nHow does higher-level code figure out what the heck kind of transaction it is dealing with when there's a tangle of TUCKS and GREATERTHAN?\n\nI am NOT on board with implementing sipa's general solution-- can we please start with the cases we know are useful right now, and talk about generalizing when we've got some experi",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1906231,1906231,
groffer,2011-08-26T05:30:22Z,"To implement sipa's suggestion we would need RPL -> Script and Script -> RPL conversion functions.  Higher level code would generate and look for transactions with specific RPL templates.\n\nTo start with, IsStandard would accept RPL code within specific limits (recursion depth and operators).  The next step would be to write API calls that deals simple multisign RPL code cases.  For example: coun",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1909677,1909677,
sipa,2011-08-26T09:21:06Z,"The first step is probably adding some extra specific standard cases to the solver, like 1-of-2, 1-of-3, 2-of-3, a-and-(b-or-c) (anything else that is known to be useful?). This is relatively easy to test, and as IsStandard simpy checks for solutions to an unknown keystore, IsStandard would support them immediately.\n\nTo generalize IsStandard, you indeed just need to split the script into compone",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1911123,1911123,
groffer,2011-08-26T15:48:06Z,"I think it is easier to check the correctness of a relatively general solution than to have a growing set of special cases.  We already have a simple general solution in the current code that does general COUNT(a1..an) > m and is pretty easy to validate.\n\nI will switch to back to a CHECKSIG solution since it is simpler, eliminates the need to pad (for SigOpCount workaround) and more flexible for",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1913726,1913726,
gmaxwell,2011-08-26T15:53:45Z,"At the very minimum, even if we don't go for full RPN support now the transaction encoding for the subset we do support should be in the RPN encoding ordering so that extending the support in the future doesn't result in yet another transaction type.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1913777,1913777,
groffer,2011-08-26T16:41:28Z,@gmaxwell good point.\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1914171,1914171,
gavinandresen,2011-08-26T17:58:57Z,"The right place for this discussion is the bitcoin-dev mailing list.  See Mike Hearn's concerns, and see if you can convince him that supporting arbitrary combinations of keys will be easier.\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1915276,1915276,
sipa,2011-08-26T21:42:16Z,"As far as I understand it, that was about putting arbitrary such expressions in addresses, not about having them pass IsStandard(). Anyway, continuing the discussion there...\n",https://github.com/bitcoin/bitcoin/pull/319#issuecomment-1917178,1917178,
gavinandresen,2011-12-01T01:58:42Z,Anybody mind if I close this?  BIPs 11 12 and 13 (and my OP_EVAL pull request) are the replacement.\n,https://github.com/bitcoin/bitcoin/pull/319#issuecomment-2969807,2969807,
groffer,2011-08-24T04:17:30Z,This will have to be reverted because CheckBlock uses it and we don't want to enable a block chain fork.\n,https://github.com/bitcoin/bitcoin/pull/319#discussion_r100990,100990,src/script.h
