DrahtBot,2019-08-16 05:31:56,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521889708,521889708,
MarcoFalke,2019-08-16 11:50:32,How is this different from  #9102 and why can't signet genesis blocks not be ground for pow?,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521982924,521982924,
kallewoof,2019-08-16 12:01:54,"@MarcoFalke They can, but in order to set up a new signet network, you would need to actually sign and mine the genesis block. There is no readily available tool to do that, but such a tool could be created. It would complicate the initial setup process.\n\nTo clarify, this becomes a bit of a chicken and egg problem: without a signet network you can't sign blocks and without a signed genesis blo",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521985710,521985710,
MarcoFalke,2019-08-16 12:12:43,I'd prefer to write a simple cpp while loop that is compiled into `util_signet` binary or exposed via RPC than to change the consensus rules. I'd argue that this wouldn't complicate the initial setup process.,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521988316,521988316,
kallewoof,2019-08-16 12:25:14,"@MarcoFalke Signet operators would have to include the signature and nonce value for the genesis block, FWIW. Right now all they provide is the script itself (and any potential seed nodes).",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-521991490,521991490,
emilengler,2019-08-16 13:53:00,I will be neutral on this because I think the genesis block should be treated like any other block as much as possible (good for learning purposes as well). Otherwise I like the (tiny) performance increase on it.,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522016484,522016484,
Relaxo143,2019-08-16 19:56:52,"I'm not a Core dev so my opinion probably doesn't mean much, but I think it's better to check PoW. That way we keep consistency. Though hardcoded, the genesis block is still a block and there is no reason why we shouldn't validate its PoW. The performance gains from this change are probably negligible anyway. We only risk introducing bugs.",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522132643,522132643,
emilengler,2019-08-16 20:43:15,"@Relaxo143 \nYou are most welcome :)\n`Anyone may participate in peer review which is expressed by comments in the pull request. ` see CONTRIBUTING.md",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522145227,522145227,
Relaxo143,2019-08-16 22:14:45,@emilengler Thank you! I like how everyone is allowed to express their opinion and thus contribute to this amazing project.,https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522167653,522167653,
kallewoof,2019-08-17 02:00:09,"@Relaxo143 You being a core dev or not is completely irrelevant. The only thing that matters is the content of what you are saying. We regularly have non-developers chime in on developer matters because these things often blend together.\n\nThat being said, my proposal is to remove the proof of work check for the genesis block, *because this will otherwise cause problems when a feature is added ",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522195138,522195138,
Sjors,2019-08-17 11:19:11,"> It looks like I may be moving towards not touching the proof of work checks and finding some way to grind the genesis block for signet, though, so this change will probably not go through.\n\nI have a light preference for that as well, if only to kick this can down the road.\n\nRepeating my inline comment, since that might get burried: the discussion in #9102 suggests - I haven't thought abo",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522228486,522228486,
Relaxo143,2019-08-17 11:34:07,"> @Relaxo143 You being a core dev or not is completely irrelevant. The only thing that matters is the content of what you are saying. We regularly have non-developers chime in on developer matters because these things often blend together.\n> \n> That being said, my proposal is to remove the proof of work check for the genesis block, _because this will otherwise cause problems when a feature is ",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522229376,522229376,
kallewoof,2019-08-19 04:25:16,"Signet was modified to require a POW-valid genesis block, so this change is no longer needed. See #16411.",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-522406582,522406582,
jtimon,2019-09-11 13:38:38,"Sorry for the necromancy, but I missed it at the time. I want to extend on some points brought up in https://github.com/bitcoin/bitcoin/pull/16411#issuecomment-530090019 and I don't want that PR to re-hash the topic one more time.\n\nLet's go through some of the objections this or similar proposals, had:\n\n1) https://github.com/bitcoin/bitcoin/pull/9102#issuecomment-259097238\ntldr: it doesn",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-530384445,530384445,
kallewoof,2019-09-24 08:19:43,"For the record, I would love to get rid of the genesisnonce parameter, but I can see both sides of these arguments.",https://github.com/bitcoin/bitcoin/pull/16630#issuecomment-534448486,534448486,
Sjors,2019-08-16 08:57:35,Let's not skip _all_ header checks (even though `CheckBlockHeader` only checks PoW at the moment).,https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314637675,314637675,src/validation.cpp
Sjors,2019-08-16 09:05:57,"What happens if a node feeds us a nonsense header chain with millions of repeating ""genesis blocks""? Is that caught in an earlier check (e.g. because `hashPrevBlock` points to a non-existing block)? cc @sdaftuar ",https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314640190,314640190,src/txdb.cpp
kallewoof,2019-08-16 11:07:21,Ok. I rewrote code to pass the POW check bool based also on if genesis block or not.,https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314676465,314676465,src/validation.cpp
MarcoFalke,2019-08-16 12:08:59,See #16551 ,https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314693144,314693144,src/txdb.cpp
Sjors,2019-08-16 13:35:09,"Thanks. However, given #9102 it sounds like we actually _should_ skip all checks. If so, then   `CheckBlockHeader` could check if it's the genesis block and skip all checks. The comment here could say: ""Check that the header is valid (particularly PoW, and except for the genesis block)""",https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314722044,314722044,src/validation.cpp
kallewoof,2019-08-17 01:50:05,"I think this problem can be generalized to ""what does Bitcoin Core do if someone sends us the same block header repeatedly"", in which case this change is no longer relevant, as the software *shouldn't* do a bunch of work to validate the same header over and over.",https://github.com/bitcoin/bitcoin/pull/16630#discussion_r314930180,314930180,src/txdb.cpp
