sipa,2017-02-06T21:03:51Z,"I strongly dislike moving validation-specific logic into CTransaction (and into primitives/* in general). Wouldn't it be possible to creating a validation-specific wrapper around CTransaction, and then perhaps change CTransactionRef to point to that wrapper?",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277812660,277812660,
TheBlueMatt,2017-02-06T21:09:25Z,"@sipa I tend to disagree pretty strongly. I know you prefer primitives/* to be very dumb-data-storage objects, but since CTransaction is const, it would be quite a waste to not use that to store any precomputed thing we can in it. @sdaftuar had a previous version of this patch that made CTransactionRef a wrapper around a shared_ptr to the CTransaction as well as the precomputed data, but that, too",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277814148,277814148,
sipa,2017-02-06T21:20:18Z,"Ideally, there should be a BlockValidationContext class or something that can cache all things necessary for validation. I understand that's a non-trivial refactor now, but I do think it should be the goal to even have the hash out of CTransaction...",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277816963,277816963,
TheBlueMatt,2017-02-06T21:24:12Z,"I think that would generate massive layer violations - you would need to use that to pre-compute data in wallet, net, mempool-acceptance, etc.",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277818099,277818099,
sipa,2017-02-06T21:26:09Z,At least let's not make the situation worse with data that is completely specific to validation.,https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277818663,277818663,
TheBlueMatt,2017-02-06T21:28:31Z,"I think you missed my point - I dont believe there is another route to go down (besides, possibly, creating a wrapper around CTransaction[Ref] which is what is actually used everywhere) to get this kind of win.\n\nWe can create a src/validation_primitives/transaction.h, but then literally nothing would use the src/primitives/transaction.h version.",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277819292,277819292,
sipa,2017-02-06T21:30:14Z,"Of course there are alternatives. They may need a lot of refactoring to do cleanly, but it feels so incredibly wrong to burden the data structure with things that only validation cares about. NACK.",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277819778,277819778,
TheBlueMatt,2017-02-06T21:31:12Z,"@sipa An alternative like creating a validation context is probably more layer-violating than this...you need to calculate this data in wallet, and net (ie everywhere), so putting it anywhere else means layer violations like crazy.",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277820053,277820053,
sipa,2017-02-06T21:32:17Z,"Net doesn't need the signature validation data. The wallet can use it, but it hardly matters.",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277820356,277820356,
dcousens,2017-02-07T01:04:00Z,"concept NACK for all the reasons @sipa pointed out.\n\n> I dont believe there is another route to go down (besides, possibly, creating a wrapper around CTransaction[Ref] which is what is actually used everywhere) to get this kind of win.\n\nOut of interest,  what is the magnitude of this *win*?",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-277867058,277867058,
sdaftuar,2017-02-07T15:19:12Z,"@sipa Sorry I missed the discussion yesterday on this; I do have an alternate approach that changes CTransactionRef to point to a wrapper around CTransaction, which I'll go ahead and PR for discussion.  I ran into some issues with that approach that might also make it objectionable, but maybe there are ways to better solve those problems that would make it workable.\n\n@dcousens Regarding the pe",https://github.com/bitcoin/bitcoin/pull/9700#issuecomment-278031003,278031003,
