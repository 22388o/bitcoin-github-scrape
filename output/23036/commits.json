[
  {
    "sha": "b69a106bcd8ddefdb810df6ebb3625c430197e04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjlhMTA2YmNkOGRkZWZkYjgxMGRmNmViYjM2MjVjNDMwMTk3ZTA0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-09-19T12:11:09Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-09-19T12:20:48Z"
      },
      "message": "test: use test_framework.p2p P2P_SERVICES in functional tests",
      "tree": {
        "sha": "c24d087588d9905e1a14ce769326b916019cf3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c24d087588d9905e1a14ce769326b916019cf3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b69a106bcd8ddefdb810df6ebb3625c430197e04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmFHKzcACgkQT1chs9Dj\nkh29dxAAjDMimU68ssa2Rror0Z241prXU8bcb1T8yNWbqc5e268hL3IvAmAVgU3I\n9ynLyvJJwRbj6irsmIfJJ2R56qMArfVhrjqkGO41g1A4Co8nitiyUUlq5ul0BVGt\n8fcsMMut/wRO6/Ae4I9sbHBY+stGBBKvFsTb6WqmuU8AnCpmylw+qw5QYvWACLFA\n40RK+Dw+msV+nkrGB3eIHBzgJPGLX3Ci9kC98FTHZkBNA3LhVbdRkPQ5FsXyR4Rz\nhTsGKMklArMpF4fSbhe8e2BAlQ+MQAzsenVmS7NeMIZaNCpBv8/lk/PsYFYVoLnG\nPIBN50COYE+zndgeI/BT6VRUuGkZze7M3EQA+bGG/Ylh4Y340AvORsUY/eUshjvF\nzxLOAblfexhxG1viwVxXV4FK2+BcFyMr8HPdm0Qt1YI9iffs/rEB+hofkDn49dWT\nGojckrOOJd59nsFz8pmLAXQKkoLHyse3g+B7IZa+tzOOtAhgxwMnU+s6B2JLcRFY\nd6nm3wEFy1/9oAC7GrUax7rZ7+N5eMvf9e/984N7rFYafiR1NbrewA0WwAhxs3Ht\nsZO9/XMWSy8RYSsjVc/I1UTFK9QvfEUHhDQ1wrqNUKH9MrDIIZnc3le0KETSbKt8\nltrrgdhHtRZp5d7b7B2FtxJAGSfK9M/LyE9UfHawP83gQN+7+9M=\n=Sq3G\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPfBfhw/d2o54FOoSMPKsA4OVwmBLUNifwNJEaEB3kuYCP/wEA6dk+DROlXZ\nCfrWmZi2Ou0I8CDnsZYG+DHI/dHLbwP4x+rL5qMeTogQXQ+andV3sqP6YwjwIL9i\nTq3x2o05BC4KgsA65Bmv4AAJwAm4qn0wGU+SSGP0CPEEYUcrOfAI1d7hJeWEFIoA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BAc5HTYSnqOzL8/YITrE/95CPEgI9As1MYAE5LRMMHIQ3I5R4zFtzZN\n2UyT/FtpH1TN3ecI8QRhRys48AjQnAazbjyJpACD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHZ1rq4JspPI8eb2RIHz\neIYI8QRhRys48AhIUwBAC1yB6wCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQp7Mj32OhYjwSdWkBq70zrAjwIFxlwKTQwbdc+gej\nNsWYdtf/Z56VsQEZ54nCkG9jvP0gCPEEYUcrOfAItsNjk//5aHAAg9/jDS75DI4u\nLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c24d087588d9905e1a14ce769326b916019cf3c3\nparent de2af19dc8e8c848afbc4b43b9b4092fe263364f\nauthor Jon Atack <jon@atack.com> 1632053469 +0200\ncommitter Jon Atack <jon@atack.com> 1632054048 +0200\n\ntest: use test_framework.p2p P2P_SERVICES in functional tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69a106bcd8ddefdb810df6ebb3625c430197e04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b69a106bcd8ddefdb810df6ebb3625c430197e04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b69a106bcd8ddefdb810df6ebb3625c430197e04/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de2af19dc8e8c848afbc4b43b9b4092fe263364f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de2af19dc8e8c848afbc4b43b9b4092fe263364f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de2af19dc8e8c848afbc4b43b9b4092fe263364f"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 35,
      "deletions": 28
    },
    "files": [
      {
        "sha": "15b90fa61f50becaed28e6a7a839ac158ebbbc42",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -6,22 +6,22 @@\n Test addr relay\n \"\"\"\n \n+import random\n+import time\n+\n from test_framework.messages import (\n     CAddress,\n-    NODE_NETWORK,\n-    NODE_WITNESS,\n     msg_addr,\n     msg_getaddr,\n-    msg_verack\n+    msg_verack,\n )\n from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock,\n+    P2P_SERVICES,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_greater_than\n-import random\n-import time\n \n \n class AddrReceiver(P2PInterface):\n@@ -96,7 +96,7 @@ def setup_addr_msg(self, num):\n         for i in range(num):\n             addr = CAddress()\n             addr.time = self.mocktime + i\n-            addr.nServices = NODE_NETWORK | NODE_WITNESS\n+            addr.nServices = P2P_SERVICES\n             addr.ip = f\"123.123.123.{self.counter % 256}\"\n             addr.port = 8333 + i\n             addrs.append(addr)\n@@ -111,7 +111,7 @@ def setup_rand_addr_msg(self, num):\n         for i in range(num):\n             addr = CAddress()\n             addr.time = self.mocktime + i\n-            addr.nServices = NODE_NETWORK | NODE_WITNESS\n+            addr.nServices = P2P_SERVICES\n             addr.ip = f\"{random.randrange(128,169)}.{random.randrange(1,255)}.{random.randrange(1,255)}.{random.randrange(1,255)}\"\n             addr.port = 8333\n             addrs.append(addr)"
      },
      {
        "sha": "25efd50040c8eebbd08b10be9996addf38ba07f2",
        "filename": "test/functional/p2p_addrfetch.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addrfetch.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addrfetch.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addrfetch.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -8,14 +8,21 @@\n \n import time\n \n-from test_framework.messages import msg_addr, CAddress, NODE_NETWORK, NODE_WITNESS\n-from test_framework.p2p import P2PInterface, p2p_lock\n+from test_framework.messages import (\n+    CAddress,\n+    msg_addr,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    p2p_lock,\n+    P2P_SERVICES,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n ADDR = CAddress()\n ADDR.time = int(time.time())\n-ADDR.nServices = NODE_NETWORK | NODE_WITNESS\n+ADDR.nServices = P2P_SERVICES\n ADDR.ip = \"192.0.0.8\"\n ADDR.port = 18444\n "
      },
      {
        "sha": "3833c58680c8178144a34a2294519106b559182b",
        "filename": "test/functional/p2p_addrv2_relay.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addrv2_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_addrv2_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addrv2_relay.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -11,10 +11,11 @@\n from test_framework.messages import (\n     CAddress,\n     msg_addrv2,\n-    NODE_NETWORK,\n-    NODE_WITNESS,\n )\n-from test_framework.p2p import P2PInterface\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -24,7 +25,7 @@\n for i in range(10):\n     addr = CAddress()\n     addr.time = int(time.time()) + i\n-    addr.nServices = NODE_NETWORK | NODE_WITNESS\n+    addr.nServices = P2P_SERVICES\n     # Add one I2P address at an arbitrary position.\n     if i == 5:\n         addr.net = addr.NET_I2P"
      },
      {
        "sha": "26f769e646df66acf403abc09c010709f9bdd7a3",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -43,6 +43,7 @@\n from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock,\n+    P2P_SERVICES,\n )\n from test_framework.script import (\n     CScript,\n@@ -224,14 +225,14 @@ def update_witness_block_with_transactions(self, block, tx_list, nonce=0):\n \n     def run_test(self):\n         # Setup the p2p connections\n-        # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK | NODE_WITNESS)\n+        # self.test_node sets P2P_SERVICES, i.e. NODE_WITNESS | NODE_NETWORK\n+        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=P2P_SERVICES)\n         # self.old_node sets only NODE_NETWORK\n         self.old_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK | NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=P2P_SERVICES)\n         # self.std_wtx_node is for testing node1 with wtxid relay\n-        self.std_wtx_node = self.nodes[1].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=NODE_NETWORK | NODE_WITNESS)\n+        self.std_wtx_node = self.nodes[1].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=P2P_SERVICES)\n \n         assert self.test_node.nServices & NODE_WITNESS != 0\n \n@@ -2017,8 +2018,8 @@ def serialize(self):\n     @subtest  # type: ignore\n     def test_wtxid_relay(self):\n         # Use brand new nodes to avoid contamination from earlier tests\n-        self.wtx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=NODE_NETWORK | NODE_WITNESS)\n-        self.tx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=False), services=NODE_NETWORK | NODE_WITNESS)\n+        self.wtx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=True), services=P2P_SERVICES)\n+        self.tx_node = self.nodes[0].add_p2p_connection(TestP2PConn(wtxidrelay=False), services=P2P_SERVICES)\n \n         # Check wtxidrelay feature negotiation message through connecting a new peer\n         def received_wtxidrelay():"
      },
      {
        "sha": "9db8b11b80660435485e4906f1d737cc6db4efcd",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -12,11 +12,10 @@\n import time\n \n from test_framework.blocktools import COINBASE_MATURITY\n-from test_framework.p2p import P2PInterface\n import test_framework.messages\n-from test_framework.messages import (\n-    NODE_NETWORK,\n-    NODE_WITNESS,\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -189,7 +188,6 @@ def test_service_flags(self):\n     def test_getnodeaddresses(self):\n         self.log.info(\"Test getnodeaddresses\")\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        services = NODE_NETWORK | NODE_WITNESS\n \n         # Add an IPv6 address to the address manager.\n         ipv6_addr = \"1233:3432:2434:2343:3234:2345:6546:4534\"\n@@ -217,7 +215,7 @@ def test_getnodeaddresses(self):\n         assert_greater_than(10000, len(node_addresses))\n         for a in node_addresses:\n             assert_greater_than(a[\"time\"], 1527811200)  # 1st June 2018\n-            assert_equal(a[\"services\"], services)\n+            assert_equal(a[\"services\"], P2P_SERVICES)\n             assert a[\"address\"] in imported_addrs\n             assert_equal(a[\"port\"], 8333)\n             assert_equal(a[\"network\"], \"ipv4\")\n@@ -228,7 +226,7 @@ def test_getnodeaddresses(self):\n         assert_equal(res[0][\"address\"], ipv6_addr)\n         assert_equal(res[0][\"network\"], \"ipv6\")\n         assert_equal(res[0][\"port\"], 8333)\n-        assert_equal(res[0][\"services\"], services)\n+        assert_equal(res[0][\"services\"], P2P_SERVICES)\n \n         # Test for the absence of onion and I2P addresses.\n         for network in [\"onion\", \"i2p\"]:"
      },
      {
        "sha": "78c63b57a1bbafec1a1847c7dff4846b7f31f364",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b69a106bcd8ddefdb810df6ebb3625c430197e04/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=b69a106bcd8ddefdb810df6ebb3625c430197e04",
        "patch": "@@ -356,7 +356,7 @@ def peer_connect(self, *args, services=P2P_SERVICES, send_version=True, **kwargs\n \n         return create_conn\n \n-    def peer_accept_connection(self, *args, services=NODE_NETWORK | NODE_WITNESS, **kwargs):\n+    def peer_accept_connection(self, *args, services=P2P_SERVICES, **kwargs):\n         create_conn = super().peer_accept_connection(*args, **kwargs)\n         self.peer_connect_send_version(services)\n "
      }
    ]
  }
]