[
  {
    "sha": "e5629210e24421deb545fe6e490aea38b9031e37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTYyOTIxMGUyNDQyMWRlYjU0NWZlNmU0OTBhZWEzOGI5MDMxZTM3",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2018-12-31T07:32:05Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2019-01-01T16:20:06Z"
      },
      "message": "Pass prevheights by reference",
      "tree": {
        "sha": "cbf70d555a62d1b6970c07892b9e4acdcc1a374d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbf70d555a62d1b6970c07892b9e4acdcc1a374d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5629210e24421deb545fe6e490aea38b9031e37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5629210e24421deb545fe6e490aea38b9031e37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5629210e24421deb545fe6e490aea38b9031e37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5629210e24421deb545fe6e490aea38b9031e37/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2741b2b6f4688ee46caaa48b51c74a110320d50d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "fc1c8d1dc87e38e4082e336790362e2c6ef5f30c",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5629210e24421deb545fe6e490aea38b9031e37/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5629210e24421deb545fe6e490aea38b9031e37/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=e5629210e24421deb545fe6e490aea38b9031e37",
        "patch": "@@ -27,9 +27,9 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int> &prevHeights, const CBlockIndex& block)\n {\n-    assert(prevHeights->size() == tx.vin.size());\n+    assert(prevHeights.size() == tx.vin.size());\n \n     // Will be set to the equivalent height- and time-based nLockTime\n     // values that would be necessary to satisfy all relative lock-\n@@ -59,11 +59,11 @@ std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags\n         // consensus-enforced meaning at this point.\n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n             // The height of this input is not relevant for sequence locks\n-            (*prevHeights)[txinIndex] = 0;\n+            prevHeights[txinIndex] = 0;\n             continue;\n         }\n \n-        int nCoinHeight = (*prevHeights)[txinIndex];\n+        int nCoinHeight = prevHeights[txinIndex];\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n             int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n@@ -99,7 +99,7 @@ bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> loc\n     return true;\n }\n \n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int> &prevHeights, const CBlockIndex& block)\n {\n     return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n }"
      },
      {
        "sha": "498d29d61db5531154a99a2835be6f122e867b6f",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5629210e24421deb545fe6e490aea38b9031e37/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5629210e24421deb545fe6e490aea38b9031e37/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=e5629210e24421deb545fe6e490aea38b9031e37",
        "patch": "@@ -69,13 +69,13 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Also removes from the vector of input heights any entries which did not\n  * correspond to sequence locked inputs as they do not affect the calculation.\n  */\n-std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int> &prevHeights, const CBlockIndex& block);\n \n bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair);\n /**\n  * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n  * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n  */\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int> &prevHeights, const CBlockIndex& block);\n \n #endif // BITCOIN_CONSENSUS_TX_VERIFY_H"
      },
      {
        "sha": "588979db64c8cafba68f76e6b85f6772d1d73368",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5629210e24421deb545fe6e490aea38b9031e37/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5629210e24421deb545fe6e490aea38b9031e37/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e5629210e24421deb545fe6e490aea38b9031e37",
        "patch": "@@ -443,7 +443,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n@@ -456,7 +456,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n "
      },
      {
        "sha": "d681f95cf1458dabb2c4baf8220f8bd88befeec9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5629210e24421deb545fe6e490aea38b9031e37/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5629210e24421deb545fe6e490aea38b9031e37/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e5629210e24421deb545fe6e490aea38b9031e37",
        "patch": "@@ -403,7 +403,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n                 prevheights[txinIndex] = coin.nHeight;\n             }\n         }\n-        lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+        lockPair = CalculateSequenceLocks(tx, flags, prevheights, index);\n         if (lp) {\n             lp->height = lockPair.first;\n             lp->time = lockPair.second;\n@@ -2004,7 +2004,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                 prevheights[j] = view.AccessCoin(tx.vin[j].prevout).nHeight;\n             }\n \n-            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+            if (!SequenceLocks(tx, nLockTimeFlags, prevheights, *pindex)) {\n                 return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }"
      }
    ]
  },
  {
    "sha": "d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNThkNzQyMmE2YTM0NjNhMjRkYWFhYWY2YjIxYWE1NjY3MGVkNWE1",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2018-12-31T10:50:06Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2019-01-01T16:20:06Z"
      },
      "message": "Avoid unnamed struct, which is a GNU extension",
      "tree": {
        "sha": "0f769e43f43b218627759bf64ec71cf0dcb59072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f769e43f43b218627759bf64ec71cf0dcb59072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5629210e24421deb545fe6e490aea38b9031e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5629210e24421deb545fe6e490aea38b9031e37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5629210e24421deb545fe6e490aea38b9031e37"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7fc0f226594bed919b27e2eed5f2a47eb729a984",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
        "patch": "@@ -153,13 +153,13 @@ class prevector {\n         struct {\n             size_type capacity;\n             char* indirect;\n-        };\n+        } indirect_contents;\n     } _union;\n \n     T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n     const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n-    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n-    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n+    T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union. indirect_contents.indirect) + pos; }\n+    const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect_contents.indirect) + pos; }\n     bool is_direct() const { return _size <= N; }\n \n     void change_capacity(size_type new_capacity) {\n@@ -177,17 +177,17 @@ class prevector {\n                 /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\n                     success. These should instead use an allocator or new/delete so that handlers\n                     are called as necessary, but performance would be slightly degraded by doing so. */\n-                _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n-                assert(_union.indirect);\n-                _union.capacity = new_capacity;\n+                _union.indirect_contents.indirect = static_cast<char*>(realloc(_union.indirect_contents.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                assert(_union.indirect_contents.indirect);\n+                _union.indirect_contents.capacity = new_capacity;\n             } else {\n                 char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n                 assert(new_indirect);\n                 T* src = direct_ptr(0);\n                 T* dst = reinterpret_cast<T*>(new_indirect);\n                 memcpy(dst, src, size() * sizeof(T));\n-                _union.indirect = new_indirect;\n-                _union.capacity = new_capacity;\n+                _union.indirect_contents.indirect = new_indirect;\n+                _union.indirect_contents.capacity = new_capacity;\n                 _size += N + 1;\n             }\n         }\n@@ -296,7 +296,7 @@ class prevector {\n         if (is_direct()) {\n             return N;\n         } else {\n-            return _union.capacity;\n+            return _union.indirect_contents.capacity;\n         }\n     }\n \n@@ -443,8 +443,8 @@ class prevector {\n             clear();\n         }\n         if (!is_direct()) {\n-            free(_union.indirect);\n-            _union.indirect = nullptr;\n+            free(_union.indirect_contents.indirect);\n+            _union.indirect_contents.indirect = nullptr;\n         }\n     }\n \n@@ -496,7 +496,7 @@ class prevector {\n         if (is_direct()) {\n             return 0;\n         } else {\n-            return ((size_t)(sizeof(T))) * _union.capacity;\n+            return ((size_t)(sizeof(T))) * _union.indirect_contents.capacity;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "d4e9c2814b02c9350084d0a2b5b20cddd5e93f17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGU5YzI4MTRiMDJjOTM1MDA4NGQwYTJiNWIyMGNkZGQ1ZTkzZjE3",
    "commit": {
      "author": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2018-12-31T19:05:54Z"
      },
      "committer": {
        "name": "DesWurstes",
        "email": "DesWurstes@users.noreply.github.com",
        "date": "2019-01-01T16:20:06Z"
      },
      "message": "Unneeded memset in CMessageHeader",
      "tree": {
        "sha": "de2e99a95279f136e8ce83c200f39593134598df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de2e99a95279f136e8ce83c200f39593134598df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17/comments",
    "author": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DesWurstes",
      "id": 23437045,
      "node_id": "MDQ6VXNlcjIzNDM3MDQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DesWurstes",
      "html_url": "https://github.com/DesWurstes",
      "followers_url": "https://api.github.com/users/DesWurstes/followers",
      "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}",
      "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions",
      "organizations_url": "https://api.github.com/users/DesWurstes/orgs",
      "repos_url": "https://api.github.com/users/DesWurstes/repos",
      "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DesWurstes/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d58d7422a6a3463a24daaaaf6b21aa56670ed5a5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5e9478dac6b2cfb175672348f43bba88d92d8e89",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4e9c2814b02c9350084d0a2b5b20cddd5e93f17/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=d4e9c2814b02c9350084d0a2b5b20cddd5e93f17",
        "patch": "@@ -79,15 +79,14 @@ const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes,\n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n {\n     memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n-    memset(pchCommand, 0, sizeof(pchCommand));\n+    memset(pchCommand, 0, COMMAND_SIZE);\n     nMessageSize = -1;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);\n }\n \n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n {\n     memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n-    memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);"
      }
    ]
  }
]