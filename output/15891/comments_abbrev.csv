gmaxwell,2019-04-25T13:55:26Z,Sounds good to me.,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486683091,486683091,
harding,2019-04-25T13:56:54Z,"Yes, please.",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486683641,486683641,
sdaftuar,2019-04-25T14:12:27Z,"Concept ACK.  \n\nFYI I found the title of the PR and the PR description a bit confusing, because it wasn't clear to me if this was going to make it so that we would be able to configure a regtest node to accept non-standard transactions, or if regtest would be treated the same as mainnet and it would not be allowed at all.",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486689765,486689765,
MarcoFalke,2019-04-25T14:20:17Z,"Adjusted title as requested by @sdaftuar \n\n\n\nAlso, please review commit-by-commit. The first commit is a cleanup of (8d1de43f0c Remove internal miner), the others are explained in the commit subject line.\n",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486692831,486692831,
jnewbery,2019-04-25T14:46:42Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486703922,486703922,
DrahtBot,2019-04-25T16:21:43Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16264](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16264.html) (policy: Add experimental -mempoolreplacemen",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-486741941,486741941,
luke-jr,2019-05-01T06:19:41Z,Concept NACK. Tests affected by policy (other than tests for the policy itself) are broken. Not enforcing policy on such tests helps improve test quality.,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-488218717,488218717,
laanwj,2019-05-06T10:12:31Z,"I don't particularly like re-introducing a chain type enumeration. The introduction of the ChainParams structure was supposed to make the entire chain information data-driven (with a possibility to add custom hybrid chain types for specific testing, for example, in the future), and this seems a step back from this by making it easier to match on ""chain type"" instead of add a bit/parameter to the s",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-489571419,489571419,
luke-jr,2019-05-06T12:28:35Z,Perhaps instead it should be toggled in the test framework's default options?,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-489602678,489602678,
MarcoFalke,2019-05-06T13:10:21Z,"In this case the property really is `IsMainnet`, which does not have a bit allocated in the struct.\n\nPersonally, I don't see why an enumeration can not have an additional type `ChainType::CUSTOM_HYBRID` if needed. But if I am also happy to use string matching on the chain name (could lead to weird run-time behavior) or add a bit to indicate if the params are the mainnet params.",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-489614414,489614414,
MarcoFalke,2019-05-22T18:25:03Z,"Remove the two intermediate `enum class ChainType` refactoring commits (thanks for the review @sipa and @laanwj) and fixed up the release notes in the last commit (thanks for the review @practicalswift, @Sjors and @jnewbery)",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-494912179,494912179,
MarcoFalke,2019-05-22T21:02:41Z,Sorry had to rebase due to silent merge conflicts in the tests,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-494971931,494971931,
jnewbery,2019-05-23T20:52:22Z,utACK cd338016f5663703cd6eb87bd4403a8fcb4f27a9,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-495380764,495380764,
MarcoFalke,2019-05-24T12:15:05Z,@jnewbery Looks like you posted this on the wrong repo?,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-495599057,495599057,
jnewbery,2019-05-24T14:08:18Z,"Oops. Sorry, I rebased this PR on a later master which is how I got the cd33801.. hash.\n\nutACK faa36e1303773bec382600cb70ccd65eb5bbd33b",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-495645362,495645362,
MarcoFalke,2019-06-18T19:42:29Z,Rebased due to conflict in a test file,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-503282544,503282544,
jnewbery,2019-06-20T17:18:06Z,ACK fad77227b2b5df547d59bc226b652663aa8bf185,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-504110110,504110110,
jtimon,2019-06-22T02:13:51Z,utACK beyond nits.,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-504618521,504618521,
ajtowns,2019-06-25T06:42:24Z,ACK fa89badf887dcc01e5bdece248b5e7d234fee227 ,https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-505308690,505308690,
MarcoFalke,2019-06-27T15:46:07Z,"This will be merged next week Wednesday, unless there are objections.",https://github.com/bitcoin/bitcoin/pull/15891#issuecomment-506401737,506401737,
Sjors,2019-04-27T18:56:48Z,Nit: lorum ipsum :-) Or just use a PR specific release note file,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r279164701,279164701,doc/release-notes.md
Sjors,2019-04-27T19:24:54Z,"I can confirm this is needed to pass the test, but I'm confused why.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r279165447,279165447,test/functional/feature_rbf.py
MarcoFalke,2019-04-27T21:16:29Z,"The test spends from anyone-can-spend ""padded"" scriptPubKeys such as `CScript([b'a' * 35])`",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r279168673,279168673,test/functional/feature_rbf.py
practicalswift,2019-05-07T16:18:48Z,"Should be ""violate""? :-)",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r281714175,281714175,doc/release-notes.md
MarcoFalke,2019-05-10T22:16:53Z,"Thx, will fix the typo the next time I touch the release notes or the next time I have to touch this pull (for other reasons)",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r283058097,283058097,doc/release-notes.md
jnewbery,2019-05-16T17:47:44Z,This still needs to be removed,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r284824528,284824528,doc/release-notes.md
jnewbery,2019-05-16T17:48:58Z,Suggest you just remove this. We don't usually specify config in tests where it's the default.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r284825002,284825002,test/functional/feature_bip68_sequence.py
jnewbery,2019-05-16T17:49:51Z,"as above, I suggest you remove `""-acceptnonstdtxn=0""` from here since it's default config",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r284825378,284825378,test/functional/p2p_segwit.py
MarcoFalke,2019-05-16T19:16:50Z,I think it is easier to read due to symmetry,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r284858888,284858888,test/functional/p2p_segwit.py
MarcoFalke,2019-05-16T19:17:09Z,I think it is easier to read due to symmetry,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r284859002,284859002,test/functional/feature_bip68_sequence.py
sipa,2019-05-22T17:12:11Z,I generally dislike having conditions in the code that check for a specific chain. What is wrong with leaving this as `chainparams.RequireStandard()`? AFAICT it does the same thing.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r286596772,286596772,src/init.cpp
MarcoFalke,2019-05-22T17:29:25Z,"No it does not do the same thing. This pull request changes regtest such that txs are required to be standard by default. If I left the check as is, it would be impossible to pass in a different setting on the command line.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r286603448,286603448,src/init.cpp
sipa,2019-05-22T17:34:06Z,Perhaps split it into a `RequireStandard()` and a `DefaultRequireStandard` chainparams flag then?,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r286605265,286605265,src/init.cpp
jnewbery,2019-06-19T21:04:11Z,This needs to be removed,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295523232,295523232,test/functional/feature_rbf.py
MarcoFalke,2019-06-20T11:55:42Z,Ah good catch. Done,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295770794,295770794,test/functional/feature_rbf.py
jnewbery,2019-06-20T14:58:40Z,This isn't true for all the text in the _low-level changes_ section. I suggest you remove this sentence.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295849365,295849365,doc/release-notes.md
luke-jr,2019-06-20T15:19:14Z,Policies are not really chain params...,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295859672,295859672,src/chainparams.h
luke-jr,2019-06-20T15:20:00Z,"Most tests shouldn't care about tx policy (only policy-specific tests should), so this should be set by default in the test framework.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295860011,295860011,test/functional/feature_block.py
MarcoFalke,2019-06-20T15:48:52Z,"This sentence is copied from https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.18.0.md#low-level-changes. Since I am adding this section, I need to add the description as well.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295874004,295874004,doc/release-notes.md
MarcoFalke,2019-06-20T15:50:15Z,Changed wording,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295874704,295874704,doc/release-notes.md
jnewbery,2019-06-20T16:44:32Z,Weird. That text is clearly wrong in the v0.18 release notes.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295897176,295897176,doc/release-notes.md
jnewbery,2019-06-20T16:45:46Z,Text is still not correct. The changes described in the section are not for testing only. Please just remove the sentence.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295897626,295897626,doc/release-notes.md
MarcoFalke,2019-06-20T17:08:46Z,Removed for now,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295907150,295907150,doc/release-notes.md
ajtowns,2019-06-20T20:31:07Z,"+1 on luke's comment -- you can't change chain params, they're a `unique_ptr<const ..>` so the compiler would complain if you even tried...\n\nSeems like it would be better named as `m_allow_non_std_tx` or something, making the later test `if (!chainParams.AllowNonStandardTx() && !fRequireStandard)`. (At least, I don't think it ever makes sense to make `-acceptnonstd=0` an invalid option)",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295982824,295982824,src/chainparams.h
ajtowns,2019-06-20T20:32:52Z,"Disagree with the conclusion here -- most tests should be working with std transactions, so there should be an error reported when a non-std tx is accidently used. Having tests that do use non-std txs declare it explicitly seems right to me.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r295983399,295983399,test/functional/feature_block.py
MarcoFalke,2019-06-20T21:14:23Z,"> you can't change chain params, they're a unique_ptr<const ..> so the compiler would complain if you even tried...\n\nThat sounds like an implementation detail to me. Effectively you can change the chain param: The const `fRequireStandard` in the chain params global serves as default and the global `fRequireStandard` is the effective value. I think having two globals with the same name (in diff",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296016241,296016241,src/chainparams.h
ajtowns,2019-06-20T21:42:48Z,"The name of the variable is also an implementation detail :)\n\nThe way I look at it is ChainParams for mainnet/testnet/regtest is effectively a compile-time constant that includes consensus parameters, various policy defaults, and some constraints on user's ability to change policy (this one, allow_fallback_fee). You can't change any of those things (without recompiling). That you can choose so",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296025292,296025292,src/chainparams.h
MarcoFalke,2019-06-20T21:48:36Z,"Ok makes sense, but I still fail to see why the `m_user_can_change_chain_params` member is wrong. I could call it `m_user_can_override_chain_params` (as opposed to overwrite/change) to make clear that chainparams are the default values, that can potentially be overridden?",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296027193,296027193,src/chainparams.h
ajtowns,2019-06-21T00:53:40Z,"If it let you override any chain param, that name would make sense; but it only lets you override this specific one. I don't think it makes much sense to try to make it more general; if it did, combining `m_fallback_fee_enabled` into it ought to work, but I think just having separate bools enabling the individual features is clearer.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296062928,296062928,src/chainparams.h
luke-jr,2019-06-21T03:10:22Z,My point was only that this isn't a chain param at all. The default value for the policy just happens to reside on the chainparams object as an implementation detail.,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296082000,296082000,src/chainparams.h
luke-jr,2019-06-21T03:11:03Z,Tests should not begin to fail just because the node policy changes (unless those tests are specifically covering policy code).,https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296082102,296082102,test/functional/feature_block.py
MarcoFalke,2019-06-21T20:13:17Z,"My goal is to remove the wallet-specific `m_fallback_fee_enabled` from the chain params later on. I can rename `m_user_can_change_chain_params` to `m_is_test_chain`, which should address both concerns raised in the comments here.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296379439,296379439,src/chainparams.h
jtimon,2019-06-22T01:55:51Z,"Note that #8994 maintains the ```unique_ptr<const ..>``` and the chainparams can never be changed after initialization, not even for custom chains.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296430223,296430223,src/chainparams.h
jtimon,2019-06-22T01:59:32Z,"Not sure why the most newly introduced but redundant one is removed instead of the other way around, but not important.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296430335,296430335,src/chainparams.h
jtimon,2019-06-22T02:09:17Z,"I didn't even know it was forbidden to use -acceptnonstdtxn=1 on mainchain...\nAnyway, I don't like IsTestChain much, it is not descriptive. What about forbid_nonstd?\nOr Leave this at RequireStandard and separate another DefaultRequireStandard or DefaultAcceptNonStd like @sipa suggested?\n",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296430615,296430615,src/init.cpp
MarcoFalke,2019-06-22T12:53:54Z,"Ok, removed the ""user can change chain params"" field.",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296444951,296444951,src/chainparams.h
MarcoFalke,2019-06-22T13:00:11Z,"I am happy to extend the docstring of `IsTestChain` if it is not descriptive enough, but I'd like to keep it unless others agree that it should go.\n\nI think it is useful to have a single boolean param to indicate whether the chain's purpose is test-only. ",https://github.com/bitcoin/bitcoin/pull/15891#discussion_r296445086,296445086,src/init.cpp
