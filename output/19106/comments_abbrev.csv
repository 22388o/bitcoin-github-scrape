hebasto,2020-05-29 14:00:16,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19106#issuecomment-635988032,635988032,
luke-jr,2020-05-29 15:01:41,"You have 3 changes here, but only 1 commit. Each logical change should be a separate commit. So bugfix, refactor/simplification, and then new `serviceFlagsToStr`.\n\nI don't think `serviceFlagsToStr` has any purpose though... both callers need to loop over the vector to transform it.",https://github.com/bitcoin/bitcoin/pull/19106#issuecomment-636022365,636022365,
MarcoFalke,2020-05-29 17:06:28,ACK 189ae0c38b7d4927c5c73b94664e9542b2b06ed9,https://github.com/bitcoin/bitcoin/pull/19106#issuecomment-636082827,636082827,
vasild,2020-05-29 17:07:01,"> You have 3 changes here, but only 1 commit. Each logical change should be a separate commit. So bugfix, refactor/simplification, and then new serviceFlagsToStr.\n\nThe refactor/simplification of changing `serviceFlagToStr()` to take 1 argument instead of 2 is also the bug fix. So we have 2 changes. I split it to two commits even though the second one overwrites parts of the first one.\n\n> I",https://github.com/bitcoin/bitcoin/pull/19106#issuecomment-636083056,636083056,
jonasschnelli,2020-05-29 17:42:50,Tested ACK 189ae0c38b7d4927c5c73b94664e9542b2b06ed9,https://github.com/bitcoin/bitcoin/pull/19106#issuecomment-636099365,636099365,
MarcoFalke,2020-05-29 14:03:28,"Why is this branch needed? 2^7 or similar should read just fine and help with consistency, no?",https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432503696,432503696,src/protocol.cpp
MarcoFalke,2020-05-29 14:04:32,"```suggestion\n    for (const auto& flag : serviceFlagsToStr(uint64_t{mask})) {\n```\n\nnit: this is slightly preferable (assuming it compiles)",https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432504287,432504287,src/qt/guiutil.cpp
MarcoFalke,2020-05-29 14:04:54,Same,https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432504509,432504509,src/rpc/util.cpp
vasild,2020-05-29 14:16:05,"It was like this in the original code and I am trying to limit the amount of changes. Especially this would be user-visible change. Otherwise I agree that for consistency we may just print `2^N`.\n\nI do not know why it was done like that. Maybe with the assumption that e.g. `64` is more human-readable than `2^6`, but `524288` is *not* more human-readable than `2^19`.\n\nIt was introduced in\",https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432512016,432512016,src/protocol.cpp
vasild,2020-05-29 17:04:24,"Thanks for the hint. I wasn't aware that\n\n```cpp\ndouble a = 1.2;\nuint64_t b;\nb = uint64_t{a};\n```\n\nwouldn't compile due to type narrowing (whereas `b = (uint64_t)a` would compile).\n\nIn our case however the typecast is not needed, so I have removed it altogether.",https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432619686,432619686,src/qt/guiutil.cpp
luke-jr,2020-05-29 18:40:36,"No, it predates that commit too.",https://github.com/bitcoin/bitcoin/pull/19106#discussion_r432669013,432669013,src/protocol.cpp
