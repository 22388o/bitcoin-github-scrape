[
  {
    "sha": "fbacad1880341ace31f669530c66d4e322d19235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmFjYWQxODgwMzQxYWNlMzFmNjY5NTMwYzY2ZDRlMzIyZDE5MjM1",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-05-29T16:49:26Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-05-29T16:49:26Z"
      },
      "message": "util: simplify the interface of serviceFlagToStr()\n\nDon't take two redundant arguments in `serviceFlagToStr()`.\n\nAs a side effect this fixes an issue introduced in\nhttps://github.com/bitcoin/bitcoin/pull/18165 due to which the GUI could\nprint something like `UNKNOWN[1033] & UNKNOWN[1033] & UNKNOWN[2^10]`\ninstead of `NETWORK & WITNESS`.",
      "tree": {
        "sha": "39b4b49f13a0899c3232dd6885980f866afa611f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b4b49f13a0899c3232dd6885980f866afa611f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbacad1880341ace31f669530c66d4e322d19235",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl7RPSUACgkQVN8G9ktV\ny78e0iAAmbbVlO0Tv869aB9Mkym/VLDdom7VmZDwgU5Z2tymDxWKasymmilIkSxp\npo7afdLjO3Zvay2oYICRXbRfWoDeaL8wPxx7R1qIjwBLlqcp1EvUi7ZU8Gx8R7dw\n0ekbQPJkho4hG1aCrYkFmmZBLhxcPZqchZ7jTPo5Luf5syFGVzYleyDHXPP7Epsl\n6mCwaDTukb+3MMlc2vxNOGgR1dVqPGyVhrTJpHCLJtMfHAc2xiPnVoyH/o8kpMkc\n2n6Bq3MKPvOVhQA9zYvHCUWANxI2o6+mp47+GONLL+RxBtZDAr0/B9UwK5RCzA28\nRGdJO2xj9v4XGjg7JY+J7mAykXibFMUwJ8NTq8VAzGMWGO/Wvgh7js99Evie6tk/\nCUqLmpfQTlDL1bZPsecHxXi3CVTcQjDVNLSN9ZJ3Ie3MysdZl/204O6BUUWLujM3\nCs4snY0KWrgwfcVVtgGhPPBqr+q/GE8zxb65SOAlolLYRtGa3To93nOK6OUZfvNO\nqR5JkF+7KhdmVJHy54UVIwVtDmMRmMglgacs32tm0e0UQv1f6Enj18i1vWGJgvWC\noVPY8Qa4m8MGY0r9d9f5nieCnnt4AMuv6zxco7QT6LF4gxLGMGqgAk5gyddTpOPG\nfUqpRfSKIwYGcnJ3xCDeWR969+uUiC3g+knb4UtiAsIBEZ8WUJ/YufCMpx1PZn1u\nbtaLsTlrGHlrIXz9L0VAzsY3QHupx2RW/ypKSIlfLKOLolGRPsczl0PTT5wHYqqj\nYEof5h1Luh6wiOhow1Q7zd1BcLBcd5BSsTHJ7ixyH+X9WAgQS0x/eqxC2QfGsTWv\n4UtcuuQtAT/s6bmClyyw54UGhnSukgldNDfqOTo3j62m/oxfg4U7fVL6TUogCa2e\nooRvzi8FhqYQat3zdS0ULDCRD1/UM+EGz+atcOb5wvWjo/DViQOJBHLj/MnTheUh\nlnJVCP1HMJBozxBR5XwzV76VcbDwgqxL02oDzdJUcDoHml6slj9TEPfykrzyDylQ\nA0FWPgN8y8s8yxVdXLb/4nCJtPpld2+jePaAmSzdNhMQVq6VeEJ0KKmZvVJgOGPz\nUx6nX/uD2mHv6g0BCIymFLkclh/J7BmPp689Okd7+95d9/aG0HPdew6uA6bQ0rnn\nOhR9jDxWF/3grGjyCldeeP00muaiEu0umkYXzEK06LezA3MXwrrxMkjMuIMIS/op\nERrWA9iLgtAsWNP/Gco/RYWvdieTqUXNVwTQ3j35spd08BoJ+qhUY7gw+LLE8HDY\nrN0qFGHsi2v6FXYuKjhr+h1fgPFvo4OgAUPDus1EflRhxUTmbDTtTMMV7amT3U5x\nY62rB7ra14CIsvQij9nX1YB+IJ1XOA==\n=i0Lw\n-----END PGP SIGNATURE-----",
        "payload": "tree 39b4b49f13a0899c3232dd6885980f866afa611f\nparent f2e2c5ebcccf8d656b850c28452e6e652934f36b\nauthor Vasil Dimov <vd@FreeBSD.org> 1590770966 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1590770966 +0200\n\nutil: simplify the interface of serviceFlagToStr()\n\nDon't take two redundant arguments in `serviceFlagToStr()`.\n\nAs a side effect this fixes an issue introduced in\nhttps://github.com/bitcoin/bitcoin/pull/18165 due to which the GUI could\nprint something like `UNKNOWN[1033] & UNKNOWN[1033] & UNKNOWN[2^10]`\ninstead of `NETWORK & WITNESS`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbacad1880341ace31f669530c66d4e322d19235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbacad1880341ace31f669530c66d4e322d19235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbacad1880341ace31f669530c66d4e322d19235/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2e2c5ebcccf8d656b850c28452e6e652934f36b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e2c5ebcccf8d656b850c28452e6e652934f36b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e2c5ebcccf8d656b850c28452e6e652934f36b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "56071f4748b104debfe68404ca45200efdfdba48",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbacad1880341ace31f669530c66d4e322d19235/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbacad1880341ace31f669530c66d4e322d19235/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=fbacad1880341ace31f669530c66d4e322d19235",
        "patch": "@@ -195,9 +195,10 @@ const std::vector<std::string> &getAllNetMessageTypes()\n     return allNetMessageTypesVec;\n }\n \n-std::string serviceFlagToStr(const uint64_t mask, const int bit)\n+std::string serviceFlagToStr(size_t bit)\n {\n-    switch (ServiceFlags(mask)) {\n+    const uint64_t service_flag = 1ULL << bit;\n+    switch ((ServiceFlags)service_flag) {\n     case NODE_NONE: abort();  // impossible\n     case NODE_NETWORK:         return \"NETWORK\";\n     case NODE_GETUTXO:         return \"GETUTXO\";\n@@ -211,7 +212,7 @@ std::string serviceFlagToStr(const uint64_t mask, const int bit)\n     stream.imbue(std::locale::classic());\n     stream << \"UNKNOWN[\";\n     if (bit < 8) {\n-        stream << mask;\n+        stream << service_flag;\n     } else {\n         stream << \"2^\" << bit;\n     }"
      },
      {
        "sha": "4fb4594fbb05408a74eb9b5b31c6b5c0eaef20c4",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbacad1880341ace31f669530c66d4e322d19235/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbacad1880341ace31f669530c66d4e322d19235/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=fbacad1880341ace31f669530c66d4e322d19235",
        "patch": "@@ -288,7 +288,12 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n-std::string serviceFlagToStr(uint64_t mask, int bit);\n+/**\n+ * Convert a service flag (NODE_*) to a human readable string.\n+ * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\n+ * @param[in] bit the service flag is calculated as (1 << bit)\n+ */\n+std::string serviceFlagToStr(size_t bit);\n \n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer."
      },
      {
        "sha": "d2892f32c706021be140bf70a965112bad54bf17",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbacad1880341ace31f669530c66d4e322d19235/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbacad1880341ace31f669530c66d4e322d19235/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=fbacad1880341ace31f669530c66d4e322d19235",
        "patch": "@@ -759,7 +759,7 @@ QString formatServicesStr(quint64 mask)\n         uint64_t check = 1ull << i;\n         if (mask & check)\n         {\n-            strList.append(QString::fromStdString(serviceFlagToStr(mask, i)));\n+            strList.append(QString::fromStdString(serviceFlagToStr(i)));\n         }\n     }\n "
      },
      {
        "sha": "6cd4c2664dad5dd02780485a8a0fa6d3b19b7397",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbacad1880341ace31f669530c66d4e322d19235/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbacad1880341ace31f669530c66d4e322d19235/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fbacad1880341ace31f669530c66d4e322d19235",
        "patch": "@@ -847,7 +847,7 @@ UniValue GetServicesNames(ServiceFlags services)\n     for (int i = 0; i < 64; ++i) {\n         const uint64_t mask = 1ull << i;\n         if (services_n & mask) {\n-            servicesNames.push_back(serviceFlagToStr(mask, i));\n+            servicesNames.push_back(serviceFlagToStr(i));\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODlhZTBjMzhiN2Q0OTI3YzVjNzNiOTQ2NjRlOTU0MmIyYjA2ZWQ5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-05-29T16:52:59Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-05-29T16:59:37Z"
      },
      "message": "util: dedup code in callers of serviceFlagToStr()\n\nIntroduce `serviceFlagsToStr()` which hides the internals of the bitmask\nand simplifies callers of `serviceFlagToStr()`.",
      "tree": {
        "sha": "5c2e119d4e08d23351a53f15c558ebc6178a863b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c2e119d4e08d23351a53f15c558ebc6178a863b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl7RP3oACgkQVN8G9ktV\ny7+IsB/9EN/fcJMWiHWGYs9esXR4MF2pVQtjNvdr77vxnO6hp1YwtZPdnB6H3pst\nC6TuhiYyX8+RG/L14aMybo+Gh4EASBIiqo+OOIWUOT2EmvyvMXLbnH7J/WpPwUaz\nFUw12bIKitHJvyXPsH4eJ4XrzzxgaHBODDAJX7zgtrIjjNQKR+wwKewXF0bdWie8\nsvll4uQDArT2pLoTeJ3bFWlZSIuICTv6GND93eSGom2ne1XQi9dpuZszdlF2rI8x\nME0OteFUHzB25y4HVLv/YKCBBEsYQT1QTZ5m26ktGLZg4NPB/6oHwm9U0a/Fchhi\nzg1P1IW1u8FG2z8/PyijkCjXVmSqw1umr8sTHPr71N9dnJw8o9WsdWCb8TAHhhcs\n5E22fjpiuuDurw6wNjs/09KBu4VZzQAiEX40bkxoz9OWY1ID9QN/k4IdC7E7Pf2L\nxEgOY2BTuuqEKN45c4DL7W3u2qKerHJ+9cJdNjuhsoRdf/zuzRvYe1pDwm//VUOU\n7CWtzO6sl5yp6RENaaE6E5Pjx1MHgVJc3gupKXMJwMFnDJhoG+swuIVX+6uqIH0y\n9ozgqd5wqghn5Swu63BqAXl31i7GKg9MfeoPLaqP0OcVqyGo32is4lT8Hwjq4QjM\nqBIMsl/dCY1F9uFWcd1tzyURHsMNA/F5V4U/ElYBuXoVlx1dE6/6d0TxTuAemG6E\njgoaA70pWDqZYAX8WPMO6Y0YSOLLuRB8j66iftqWXoa8OBdH27F6+kC5cGHzO+M9\nn629/9kUIANzneZ5LXKCO0NAvAHowHeuvPsIyIO69ycQjjaeQ++gAEOAM/BWQIhH\nGjgpJgpIB1+CW1Q2gfnwd+PUsggQDleQUnYMXhO5pmVX54k7acZZVQPSxoCQjb0A\nvPkW2P1+TicQMbESCQ4ug4vWLTJgJnlU/OgrPJixAhveRbEqZuwewe/IKtTE/QN4\nlgHotHOQNCryLvjaOd40W/4tRSWeqGn4WCwlnQ1TuhhEaBGpZ2WOIzrXl2uCMkpJ\ntAtv0Od0C1QWpnpsI/htL2WFzNuRR5xNpaDi68D4wpoxCKT8y3s8PnQ7N63g7qMa\naFIylERMor7GHORi3TQ3AP8QmHOZqf2CvABFzK94m7ED8AlbRSUuSbz3fbOsNNI2\nGN+X5Y1rzV+EmXfZc/PEYNMtXKToL4uIBNqbBBLTgyulg5+qIOikFH5ubJwh3rMt\nBUw4WWecBsJ5+bnyvhMwv+x8zNGPRV02u5N0fdXvulxTRi8sHR8ysjTSZsnq4MNc\nf6Ssrc+/9IzLxfpBq8gKJmVDoE6zE9sKMckAAnjKGLrR75UVA1nMvM4/EAOuqNc0\nSsHLCyVHAIZImbITDrzEgApHUS9BTg==\n=MP17\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c2e119d4e08d23351a53f15c558ebc6178a863b\nparent fbacad1880341ace31f669530c66d4e322d19235\nauthor Vasil Dimov <vd@FreeBSD.org> 1590771179 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1590771577 +0200\n\nutil: dedup code in callers of serviceFlagToStr()\n\nIntroduce `serviceFlagsToStr()` which hides the internals of the bitmask\nand simplifies callers of `serviceFlagToStr()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbacad1880341ace31f669530c66d4e322d19235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbacad1880341ace31f669530c66d4e322d19235",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbacad1880341ace31f669530c66d4e322d19235"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 26,
      "deletions": 16
    },
    "files": [
      {
        "sha": "93e76f1f13830237fe74a667c261c2d0025dbee2",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
        "patch": "@@ -195,7 +195,12 @@ const std::vector<std::string> &getAllNetMessageTypes()\n     return allNetMessageTypesVec;\n }\n \n-std::string serviceFlagToStr(size_t bit)\n+/**\n+ * Convert a service flag (NODE_*) to a human readable string.\n+ * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\n+ * @param[in] bit the service flag is calculated as (1 << bit)\n+ */\n+static std::string serviceFlagToStr(size_t bit)\n {\n     const uint64_t service_flag = 1ULL << bit;\n     switch ((ServiceFlags)service_flag) {\n@@ -219,3 +224,16 @@ std::string serviceFlagToStr(size_t bit)\n     stream << \"]\";\n     return stream.str();\n }\n+\n+std::vector<std::string> serviceFlagsToStr(uint64_t flags)\n+{\n+    std::vector<std::string> str_flags;\n+\n+    for (size_t i = 0; i < sizeof(flags) * 8; ++i) {\n+        if (flags & (1ULL << i)) {\n+            str_flags.emplace_back(serviceFlagToStr(i));\n+        }\n+    }\n+\n+    return str_flags;\n+}"
      },
      {
        "sha": "b720a6ce919f370825eef5dd0920a91653fd9d2d",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
        "patch": "@@ -289,11 +289,11 @@ enum ServiceFlags : uint64_t {\n };\n \n /**\n- * Convert a service flag (NODE_*) to a human readable string.\n+ * Convert service flags (a bitmask of NODE_*) to human readable strings.\n  * It supports unknown service flags which will be returned as \"UNKNOWN[...]\".\n- * @param[in] bit the service flag is calculated as (1 << bit)\n+ * @param[in] flags multiple NODE_* bitwise-OR-ed together\n  */\n-std::string serviceFlagToStr(size_t bit);\n+std::vector<std::string> serviceFlagsToStr(uint64_t flags);\n \n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer."
      },
      {
        "sha": "ce44d4f3a5be5087e5d8047ffbce36e98eda8521",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
        "patch": "@@ -755,12 +755,8 @@ QString formatServicesStr(quint64 mask)\n {\n     QStringList strList;\n \n-    for (int i = 0; i < 64; i++) {\n-        uint64_t check = 1ull << i;\n-        if (mask & check)\n-        {\n-            strList.append(QString::fromStdString(serviceFlagToStr(i)));\n-        }\n+    for (const auto& flag : serviceFlagsToStr(mask)) {\n+        strList.append(QString::fromStdString(flag));\n     }\n \n     if (strList.size())"
      },
      {
        "sha": "39bf05fbbddced50c1e17d14c84f1d898dc724f9",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/189ae0c38b7d4927c5c73b94664e9542b2b06ed9/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=189ae0c38b7d4927c5c73b94664e9542b2b06ed9",
        "patch": "@@ -841,14 +841,10 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n \n UniValue GetServicesNames(ServiceFlags services)\n {\n-    const uint64_t services_n = services;\n     UniValue servicesNames(UniValue::VARR);\n \n-    for (int i = 0; i < 64; ++i) {\n-        const uint64_t mask = 1ull << i;\n-        if (services_n & mask) {\n-            servicesNames.push_back(serviceFlagToStr(i));\n-        }\n+    for (const auto& flag : serviceFlagsToStr(services)) {\n+        servicesNames.push_back(flag);\n     }\n \n     return servicesNames;"
      }
    ]
  }
]