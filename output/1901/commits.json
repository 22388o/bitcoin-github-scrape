[
  {
    "sha": "6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDMyZTRmNGU3YzE4OTJhNGUzZjBhMWEyMDA3ZTRjZDBmZTk5OTM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-02T19:36:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-07T12:38:37Z"
      },
      "message": "get rid of strlcpy.h\n\nDon't use hand-rolled string manipulation routine with a fixed\nbuffer in the bitcoin core, instead make use of c++ strings and boost.",
      "tree": {
        "sha": "45117631344c248ef87b7c92b2a832c2810729a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45117631344c248ef87b7c92b2a832c2810729a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee0b64853699c08602fed81cdefc62d7e8dcdce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee0b64853699c08602fed81cdefc62d7e8dcdce2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee0b64853699c08602fed81cdefc62d7e8dcdce2"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 30,
      "deletions": 129
    },
    "files": [
      {
        "sha": "8729de28377e5022e216e1a90b5bca044d3cc4b1",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -125,7 +125,6 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/util.h \\\n     src/uint256.h \\\n     src/serialize.h \\\n-    src/strlcpy.h \\\n     src/main.h \\\n     src/net.h \\\n     src/key.h \\"
      },
      {
        "sha": "0693d535c3244c200608c234ef14e439a1a23698",
        "filename": "doc/assets-attribution.txt",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/doc/assets-attribution.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/doc/assets-attribution.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.txt?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -1,7 +1,3 @@\n-Code: src/strlcpy.h\n-Author: Todd C. Miller <Todd.Miller@courtesan.com>\n-License: ISC\n-\n Icon: src/qt/res/icons/clock*.png, src/qt/res/icons/tx*.png,\n       src/qt/res/src/*.svg\n Designer: Wladimir van der Laan"
      },
      {
        "sha": "17d5ff1a5af7667726fb6263dadbb28d2a17348d",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -5,9 +5,10 @@\n \n #include \"irc.h\"\n #include \"net.h\"\n-#include \"strlcpy.h\"\n #include \"base58.h\"\n \n+#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n+\n using namespace std;\n using namespace boost;\n \n@@ -324,30 +325,27 @@ void ThreadIRCSeed2(void* parg)\n             if (vWords.size() < 2)\n                 continue;\n \n-            char pszName[10000];\n-            pszName[0] = '\\0';\n+            std::string strName;\n \n             if (vWords[1] == \"352\" && vWords.size() >= 8)\n             {\n                 // index 7 is limited to 16 characters\n                 // could get full length name at index 10, but would be different from join messages\n-                strlcpy(pszName, vWords[7].c_str(), sizeof(pszName));\n+                strName = vWords[7].c_str();\n                 printf(\"IRC got who\\n\");\n             }\n \n             if (vWords[1] == \"JOIN\" && vWords[0].size() > 1)\n             {\n                 // :username!username@50000007.F000000B.90000002.IP JOIN :#channelname\n-                strlcpy(pszName, vWords[0].c_str() + 1, sizeof(pszName));\n-                if (strchr(pszName, '!'))\n-                    *strchr(pszName, '!') = '\\0';\n+                strName = vWords[0].substr(1, vWords[0].find('!', 1) - 1);\n                 printf(\"IRC got join\\n\");\n             }\n \n-            if (pszName[0] == 'u')\n+            if (boost::algorithm::starts_with(strName, \"u\"))\n             {\n                 CAddress addr;\n-                if (DecodeAddress(pszName, addr))\n+                if (DecodeAddress(strName, addr))\n                 {\n                     addr.nTime = GetAdjustedTime();\n                     if (addrman.Add(addr, addrConnect, 51 * 60))"
      },
      {
        "sha": "04d3b0d8dc93ca9168f9e6c1bf1232a8a25f5655",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -7,7 +7,6 @@\n #include \"db.h\"\n #include \"net.h\"\n #include \"init.h\"\n-#include \"strlcpy.h\"\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n "
      },
      {
        "sha": "05ae056efb056e3daea566dafdf01eec086de04d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -10,8 +10,8 @@\n #include <sys/fcntl.h>\n #endif\n \n-#include \"strlcpy.h\"\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n \n using namespace std;\n \n@@ -118,18 +118,16 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n \n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n-    if (pszName[0] == 0)\n+    std::string str(pszName);\n+    std::string strHost = str;\n+    if (str.empty())\n         return false;\n-    char psz[256];\n-    char *pszHost = psz;\n-    strlcpy(psz, pszName, sizeof(psz));\n-    if (psz[0] == '[' && psz[strlen(psz)-1] == ']')\n+    if (boost::algorithm::starts_with(str, \"[\") && boost::algorithm::ends_with(str, \"]\"))\n     {\n-        pszHost = psz+1;\n-        psz[strlen(psz)-1] = 0;\n+        strHost = str.substr(1, str.size() - 2);\n     }\n \n-    return LookupIntern(pszHost, vIP, nMaxSolutions, fAllowLookup);\n+    return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n }\n \n bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions)"
      },
      {
        "sha": "2cc786e953084c1e285357a8ac2dd4134d0bf30a",
        "filename": "src/strlcpy.h",
        "status": "removed",
        "additions": 0,
        "deletions": 90,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee0b64853699c08602fed81cdefc62d7e8dcdce2/src/strlcpy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee0b64853699c08602fed81cdefc62d7e8dcdce2/src/strlcpy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/strlcpy.h?ref=ee0b64853699c08602fed81cdefc62d7e8dcdce2",
        "patch": "@@ -1,90 +0,0 @@\n-/*\n- * Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>\n- *\n- * Permission to use, copy, modify, and distribute this software for any\n- * purpose with or without fee is hereby granted, provided that the above\n- * copyright notice and this permission notice appear in all copies.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n- */\n-#ifndef BITCOIN_STRLCPY_H\n-#define BITCOIN_STRLCPY_H\n-\n-#include <stdlib.h>\n-#include <string.h>\n-\n-/*\n- * Copy src to string dst of size siz.  At most siz-1 characters\n- * will be copied.  Always NUL terminates (unless siz == 0).\n- * Returns strlen(src); if retval >= siz, truncation occurred.\n- */\n-inline size_t strlcpy(char *dst, const char *src, size_t siz)\n-{\n-    char *d = dst;\n-    const char *s = src;\n-    size_t n = siz;\n-\n-    /* Copy as many bytes as will fit */\n-    if (n != 0)\n-    {\n-        while (--n != 0)\n-        {\n-            if ((*d++ = *s++) == '\\0')\n-                break;\n-        }\n-    }\n-\n-    /* Not enough room in dst, add NUL and traverse rest of src */\n-    if (n == 0)\n-    {\n-        if (siz != 0)\n-            *d = '\\0';  /* NUL-terminate dst */\n-        while (*s++)\n-            ;\n-    }\n-\n-    return(s - src - 1); /* count does not include NUL */\n-}\n-\n-/*\n- * Appends src to string dst of size siz (unlike strncat, siz is the\n- * full size of dst, not space left).  At most siz-1 characters\n- * will be copied.  Always NUL terminates (unless siz <= strlen(dst)).\n- * Returns strlen(src) + MIN(siz, strlen(initial dst)).\n- * If retval >= siz, truncation occurred.\n- */\n-inline size_t strlcat(char *dst, const char *src, size_t siz)\n-{\n-    char *d = dst;\n-    const char *s = src;\n-    size_t n = siz;\n-    size_t dlen;\n-\n-    /* Find the end of dst and adjust bytes left but don't go past end */\n-    while (n-- != 0 && *d != '\\0')\n-        d++;\n-    dlen = d - dst;\n-    n = siz - dlen;\n-\n-    if (n == 0)\n-        return(dlen + strlen(s));\n-    while (*s != '\\0')\n-    {\n-        if (n != 1)\n-        {\n-            *d++ = *s;\n-            n--;\n-        }\n-        s++;\n-    }\n-    *d = '\\0';\n-\n-    return(dlen + (s - src)); /* count does not include NUL */\n-}\n-#endif"
      },
      {
        "sha": "ad2b8c6601ec884ed8953795ffb33cfdb0a04a16",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6032e4f4e7c1892a4e3f0a1a2007e4cd0fe99937",
        "patch": "@@ -5,10 +5,11 @@\n \n #include \"util.h\"\n #include \"sync.h\"\n-#include \"strlcpy.h\"\n #include \"version.h\"\n #include \"ui_interface.h\"\n #include <boost/algorithm/string/join.hpp>\n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n \n // Work around clang compilation problem in Boost 1.46:\n // /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n@@ -499,24 +500,24 @@ void ParseParameters(int argc, const char* const argv[])\n     mapMultiArgs.clear();\n     for (int i = 1; i < argc; i++)\n     {\n-        char psz[10000];\n-        strlcpy(psz, argv[i], sizeof(psz));\n-        char* pszValue = (char*)\"\";\n-        if (strchr(psz, '='))\n+        std::string str(argv[i]);\n+        std::string strValue;\n+        size_t is_index = str.find('=');\n+        if (is_index != std::string::npos)\n         {\n-            pszValue = strchr(psz, '=');\n-            *pszValue++ = '\\0';\n+            strValue = str.substr(is_index+1);\n+            str = str.substr(0, is_index);\n         }\n-        #ifdef WIN32\n-        _strlwr(psz);\n-        if (psz[0] == '/')\n-            psz[0] = '-';\n-        #endif\n-        if (psz[0] != '-')\n+#ifdef WIN32\n+        boost::to_lower(str);\n+        if (boost::algorithm::starts_with(str, \"/\"))\n+            str = \"-\" + str.substr(1);\n+#endif\n+        if (str[0] != '-')\n             break;\n \n-        mapArgs[psz] = pszValue;\n-        mapMultiArgs[psz].push_back(pszValue);\n+        mapArgs[str] = strValue;\n+        mapMultiArgs[str].push_back(strValue);\n     }\n \n     // New 0.6 features:"
      }
    ]
  }
]