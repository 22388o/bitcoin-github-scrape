[
  {
    "sha": "7cfce5689cb5504cd3ddf17e707c8f209b4f5105",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2ZjZTU2ODljYjU1MDRjZDNkZGYxN2U3MDdjOGYyMDliNGY1MTA1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-12T14:10:27Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-09-12T14:10:27Z"
      },
      "message": "Remove RPC-via-IPv6 support.\n\nThis is the brute-force fix for issue #1819, removing the new\nfeature that is causing problems.",
      "tree": {
        "sha": "b61b63891a4f1eae6159f9abf42c6c3afdfabe00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b61b63891a4f1eae6159f9abf42c6c3afdfabe00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cfce5689cb5504cd3ddf17e707c8f209b4f5105",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cfce5689cb5504cd3ddf17e707c8f209b4f5105",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cfce5689cb5504cd3ddf17e707c8f209b4f5105",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cfce5689cb5504cd3ddf17e707c8f209b4f5105/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b1eb5687df3f01edeaa2724783faa6a3c08aa03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1eb5687df3f01edeaa2724783faa6a3c08aa03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1eb5687df3f01edeaa2724783faa6a3c08aa03"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 6,
      "deletions": 35
    },
    "files": [
      {
        "sha": "eb37d4e1ee6c7c3d43eddb1172447fb77fe6743d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 35,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cfce5689cb5504cd3ddf17e707c8f209b4f5105/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cfce5689cb5504cd3ddf17e707c8f209b4f5105/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=7cfce5689cb5504cd3ddf17e707c8f209b4f5105",
        "patch": "@@ -12,7 +12,6 @@\n \n #undef printf\n #include <boost/asio.hpp>\n-#include <boost/asio/ip/v6_only.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n@@ -485,14 +484,7 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n \n bool ClientAllowed(const boost::asio::ip::address& address)\n {\n-    // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses\n-    if (address.is_v6()\n-     && (address.to_v6().is_v4_compatible()\n-      || address.to_v6().is_v4_mapped()))\n-        return ClientAllowed(address.to_v6().to_v4());\n-\n     if (address == asio::ip::address_v4::loopback()\n-     || address == asio::ip::address_v6::loopback()\n      || (address.is_v4()\n          // Check whether IPv4 addresses match 127.0.0.0/8 (loopback subnet)\n       && (address.to_v4().to_ulong() & 0xff000000) == 0x7f000000))\n@@ -757,9 +749,8 @@ void ThreadRPCServer2(void* parg)\n         SSL_CTX_set_cipher_list(context.impl(), strCiphers.c_str());\n     }\n \n-    // Try a dual IPv6/IPv4 socket, falling back to separate IPv4 and IPv6 sockets\n     const bool loopback = !mapArgs.count(\"-rpcallowip\");\n-    asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n+    asio::ip::address bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();\n     ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", 8332));\n \n     boost::signals2::signal<void ()> StopRequests;\n@@ -770,37 +761,17 @@ void ThreadRPCServer2(void* parg)\n         acceptor->open(endpoint.protocol());\n         acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n \n-        // Try making the socket dual IPv6/IPv4 (if listening on the \"any\" address)\n-        boost::system::error_code v6_only_error;\n-        acceptor->set_option(boost::asio::ip::v6_only(loopback), v6_only_error);\n-\n+        acceptor.reset(new ip::tcp::acceptor(io_service));\n+        acceptor->open(endpoint.protocol());\n+        acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n         acceptor->bind(endpoint);\n         acceptor->listen(socket_base::max_connections);\n \n         RPCListen(acceptor, context, fUseSSL);\n         // Cancel outstanding listen-requests for this acceptor when shutting down\n         StopRequests.connect(signals2::slot<void ()>(\n-                    static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n-                .track(acceptor));\n-\n-        // If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately\n-        if (loopback || v6_only_error)\n-        {\n-            bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();\n-            endpoint.address(bindAddress);\n-\n-            acceptor.reset(new ip::tcp::acceptor(io_service));\n-            acceptor->open(endpoint.protocol());\n-            acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n-            acceptor->bind(endpoint);\n-            acceptor->listen(socket_base::max_connections);\n-\n-            RPCListen(acceptor, context, fUseSSL);\n-            // Cancel outstanding listen-requests for this acceptor when shutting down\n-            StopRequests.connect(signals2::slot<void ()>(\n-                        static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n-                    .track(acceptor));\n-        }\n+                                 static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n+                             .track(acceptor));\n     }\n     catch(boost::system::system_error &e)\n     {"
      }
    ]
  }
]