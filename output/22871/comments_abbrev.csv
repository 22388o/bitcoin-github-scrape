JeremyRubin,2021-09-03 01:08:02,will likely need to rebase on top of https://github.com/bitcoin/bitcoin/pull/22870 and change the failing tests to exempt them from DISCOURAGE_UPGRADABLE_NOPS,https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-912173251,912173251,
JeremyRubin,2021-09-04 16:29:43,Expanded the semantics to reject in transaction standardness as well.,https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913001038,913001038,
JeremyRubin,2021-09-05 02:29:13,"The plot thickens: I've now set the policy transaction level rule to allow 0xffffffff-2 or greater since it seems that 0xffffffff-1 is used to mean ""no RBF; but allow absolute locktimes"" and 0xffffffff -2 is used to mean ""yes RBF;  allow absolute locktimes and no relative locktimes"" in one script test.\n\nSince folks might use the script test value as canon for that use case, we should treat it ",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913073892,913073892,
maaku,2021-09-05 06:23:08,"As the original author of this offending code, I concept-ACK this change **if** it turns out that nobody is currently using `nSequence` for any other purpose. However at the time that `CHECKSEQUENCEVERIFY` was implemented, there were was at least one parasitic protocol (Counterparty? Colored coins? I'm sorry I forget which) using `nSequence` for other purposes, and in production too IIRC. They wan",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913094193,913094193,
maaku,2021-09-05 07:13:29,"Alex Mizrahi confirms it was the EPOBC colored coins protocol which was using nSequence at the time:\n\nhttps://twitter.com/killerstorm/status/1434412779713220610",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913099077,913099077,
JeremyRubin,2021-09-05 16:04:12,"We *could* add support for the values listed in https://en.bitcoin.it/wiki/Colored_Coins which are 0x25 and 0x33 irrespective of if the DISABLED flag is set? That way, either your coins are slow to move or you can set the DISABLED flag. This is compatible with long standing presigned transactions that might be using this...\n\nOTOH it's probably a small enough number that a combination of advert",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913181590,913181590,
JeremyRubin,2021-09-06 03:04:23,"I agree this isn't a simple patch and see given the risks, but note it is *policy*, so transactions can still be valid in consensus and this behavior could be e.g. conf file disabled safely. I think most discussion should be on the mailing list.\n\nI have actually been sitting on a draft email on the full RBF stuff, letting it stew before I stick my nose in that. The basics of my thought process",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913302253,913302253,
maaku,2021-09-06 07:30:04,"To be clear, the original code isn't a mistake. BIP68-disabled nSequence values are very purposefully allowed by the IsStandard rules. nSequence was always intended as a client-interpreted field to be used when merging or updating transactions, and therefore it would be expected to take on unexpected values. However as we all know this original naive idea didn't work and it took a combination of B",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913413578,913413578,
JeremyRubin,2021-09-06 09:53:28,"The original code *is* a mistake IMO since the upgradable semantics issue isn't just in tx relay, but also in the stack values permitted to be passed to CSV. As a brand new opcode, the semantics there can be totally different from the nSeqeuence value in the transaction (e.g., when Disable is set we could add a rule to check a sequence lock in the taproot annex). To underscore that the differing s",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913512686,913512686,
maaku,2021-09-06 10:04:39,"Mistake or no, this again was intentional, if I understand you correctly. Allowing values outside of the checked range to pass to CSV allows for soft-fork upgradeability of the CSV opcode itself. But here the case can be more clearly made to treat such stack values as discouraged-NOPs.",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913520464,913520464,
JeremyRubin,2021-09-06 10:08:19,"Yes -- the allowing outside values to pass consensus was intention, no doubt there. That it wasn't discouraged was a mistake (the discouraging code predates CSV by a bit) because it impacts the ability to actually use new values with CSV in a soft fork. E.g., the lightning folks could be using uninterpreted fields in CSV stack argument for metadata today and then it'd be bricked for upgrades.",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-913523373,913523373,
ariard,2021-09-09 00:04:58,See my answer on the ml for the higher-level points raised w.r.t to policy design/deployment. If you want to start a more generic thread about that and full-rbf up to you.,https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-915653729,915653729,
sipa,2021-09-09 01:31:21,"Is this needed for anything, actually? I saw somewhere a suggestion (can't remember where) to use a new tx version number if/when new  consensus semantics for nSequence are desired. That's already nonstandard, so anything can be carved out from it. Is there any problem with that (which, I guess, if an approach like this PR is not taken, will inevitably how new nSequence semantics would need to be ",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-915689161,915689161,
JeremyRubin,2021-09-09 02:25:59,"This PR covers both nSeqeunce and <arg> CSV which are distinct. It would mean that whatever new script semantics applied to the unused portions of the CSV argument would have to then also require that transaction version 3 is used. However, there's not really a sound way that we can specify which transaction version for CSV semantics we are requiring at output creation time (e.g., v2 or v3) so we ",https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-915709410,915709410,
JeremyRubin,2021-09-09 02:29:14,btw I believe what you saw was the mailing list message [from harding](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019402.html) which I [rebut](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019403.html).,https://github.com/bitcoin/bitcoin/pull/22871#issuecomment-915710487,915710487,
benthecarman,2021-09-03 02:23:12,"probably worth adding a comment like: `// CHECKSEQUENCEVERIFY behaving as NOP, set error appropriately` ",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r701540132,701540132,src/script/interpreter.cpp
benthecarman,2021-09-04 20:56:12,"adding this `extra_fields` check should result in a fork now, no?",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702327593,702327593,src/script/interpreter.cpp
JeremyRubin,2021-09-04 22:02:48,"You're totally right, my bad.\n\nWe need to handle it separately and still pass it to CheckSequence even though the fields are ignored.",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702333392,702333392,src/script/interpreter.cpp
JeremyRubin,2021-09-04 22:19:36,Ok I think the patch i added properly only checks the extra flags during standardness interpreter rules.,https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702334685,702334685,src/script/interpreter.cpp
JeremyRubin,2021-09-04 23:41:08,I was wrong on that; the prior policy.cpp i had was not exempting final sequence. new version should be (hopefully) correct.,https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702340924,702340924,src/script/interpreter.cpp
JeremyRubin,2021-09-05 17:48:44,@sipa can you confirm that changing this test like this is OK -- perhaps you'd prefer to preserve the test as is but  set is_standard_tx to false when appropriate?,https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702455761,702455761,test/functional/feature_taproot.py
ariard,2021-09-06 00:16:42,"I wonder if this second discouraging check is safe w.r.t to propagation of CSV'ed inputs ?\n\nIf the spending wallet has decided to explicitly signal RBF with a range of bits in the uninterpreted fields, this transaction would be rejected as non-standard ? Note, such weird range of bits could be a protocol watermark such as the Lightning obscured commitment number in commitment transactions.\n",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702498024,702498024,src/script/interpreter.cpp
JeremyRubin,2021-09-06 03:08:41,"Well, any time CSV is enabled, RBF is enabled, right? So I'm not sure why they'd add something in the uninterpreted section for that.\n\nI'm not concerned with the future upgrading checks here. We'll simply need to write new policy/standard rules in the appropriate places to permit those sequences to be used. In the future, we don't want any sequence in our mempool we don't understand because th",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r702534899,702534899,src/script/interpreter.cpp
darosior,2021-09-22 08:52:33,"This shift is backward? It should be \n```cpp\ntxin.nSequence << CTxIn::SEQUENCE_ROOT_TYPE_SHIFT\n```\nIf you want to match that the upper 8 bits are `0x80` as specified by BOLT3",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r713732491,713732491,src/policy/policy.cpp
JeremyRubin,2021-09-22 16:47:15,"Hmm?\n```python\nhex(0x80000000 >> 24) == '0x80'\n```",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r714129663,714129663,src/policy/policy.cpp
darosior,2021-09-22 17:02:55,"Sorry, brainfart",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r714141635,714141635,src/policy/policy.cpp
glozow,2021-09-24 13:01:26,"In 1bd2b15d82ebc80b3c30ab247287717a893cb37a\n\nThe approach of using `DISCOURAGE_UPGRADABLE_NOPS` within an already-upgraded NOP also feels very weird.",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r715592859,715592859,src/script/interpreter.cpp
glozow,2021-09-24 13:10:19,"e5b2a824147c342bfbf2c8b1696afc686c2bfda7 \n\nThis isn't ""fixing"" but loosening this unit test. This shows a misapplication of `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` if you need to remove it in order to make these tests pass. A better approach would be to add a `SCRIPT_VERIFY_DISCOURAGE_DISABLE_LOCKTIME_FLAG` for this purpose.",https://github.com/bitcoin/bitcoin/pull/22871#discussion_r715599183,715599183,src/test/data/tx_valid.json
