[
  {
    "sha": "3c6fe920d8235b058eb12b5978f06d7540d8dc53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzZmZTkyMGQ4MjM1YjA1OGViMTJiNTk3OGYwNmQ3NTQwZDhkYzUz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-24T17:52:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-24T17:52:24Z"
      },
      "message": "rpc: Remove dns argument for getaddednodeinfo\n\nIt's hard to imagine a valid use-case for this, and the DNS resolve in rpc\nis quite out of place.",
      "tree": {
        "sha": "ee5c2da0ae0e712d30b80e22c4a4d149ea84c7d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee5c2da0ae0e712d30b80e22c4a4d149ea84c7d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c6fe920d8235b058eb12b5978f06d7540d8dc53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6fe920d8235b058eb12b5978f06d7540d8dc53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c6fe920d8235b058eb12b5978f06d7540d8dc53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c6fe920d8235b058eb12b5978f06d7540d8dc53/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77b49acc85d05eda96b6892db835d79f30314a3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b49acc85d05eda96b6892db835d79f30314a3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77b49acc85d05eda96b6892db835d79f30314a3b"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 11,
      "deletions": 75
    },
    "files": [
      {
        "sha": "27fae8917042ccf175444aca0f5963cb0cba207d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 75,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c6fe920d8235b058eb12b5978f06d7540d8dc53/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c6fe920d8235b058eb12b5978f06d7540d8dc53/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=3c6fe920d8235b058eb12b5978f06d7540d8dc53",
        "patch": "@@ -269,49 +269,36 @@ UniValue disconnectnode(const UniValue& params, bool fHelp)\n \n UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getaddednodeinfo dns ( \\\"node\\\" )\\n\"\n-            \"\\nReturns information about the given added node, or all added nodes\\n\"\n+            \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n+            \"\\nReturns presence of the given added node, or all added nodes\\n\"\n             \"(note that onetry addnodes are not listed here)\\n\"\n-            \"If dns is false, only a list of added nodes will be provided,\\n\"\n-            \"otherwise connected information will also be available.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.\\n\"\n-            \"2. \\\"node\\\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\\n\"\n+            \"2. \\\"node\\\"   (string, optional) If provided, return the presence of this specific node, otherwise all nodes are returned.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"addednode\\\" : \\\"192.168.0.201\\\",   (string) The node ip address\\n\"\n-            \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n-            \"    \\\"addresses\\\" : [\\n\"\n-            \"       {\\n\"\n-            \"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",  (string) The bitcoin server host and port\\n\"\n-            \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"     ]\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true\")\n-            + HelpExampleCli(\"getaddednodeinfo\", \"true \\\"192.168.0.201\\\"\")\n-            + HelpExampleRpc(\"getaddednodeinfo\", \"true, \\\"192.168.0.201\\\"\")\n+            + HelpExampleCli(\"getaddednodeinfo\", \"\")\n+            + HelpExampleCli(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n+            + HelpExampleRpc(\"getaddednodeinfo\", \"\\\"192.168.0.201\\\"\")\n         );\n \n-    bool fDns = params[0].get_bool();\n-\n     list<string> laddedNodes(0);\n-    if (params.size() == 1)\n+    if (params.empty())\n     {\n         LOCK(cs_vAddedNodes);\n         BOOST_FOREACH(const std::string& strAddNode, vAddedNodes)\n             laddedNodes.push_back(strAddNode);\n     }\n     else\n     {\n-        string strNode = params[1].get_str();\n+        string strNode = params[0].get_str();\n         LOCK(cs_vAddedNodes);\n         BOOST_FOREACH(const std::string& strAddNode, vAddedNodes) {\n             if (strAddNode == strNode)\n@@ -325,62 +312,11 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     }\n \n     UniValue ret(UniValue::VARR);\n-    if (!fDns)\n-    {\n-        BOOST_FOREACH (const std::string& strAddNode, laddedNodes) {\n-            UniValue obj(UniValue::VOBJ);\n-            obj.push_back(Pair(\"addednode\", strAddNode));\n-            ret.push_back(obj);\n-        }\n-        return ret;\n-    }\n-\n-    list<pair<string, vector<CService> > > laddedAddreses(0);\n-    BOOST_FOREACH(const std::string& strAddNode, laddedNodes) {\n-        vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n-            laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n-        else\n-        {\n-            UniValue obj(UniValue::VOBJ);\n-            obj.push_back(Pair(\"addednode\", strAddNode));\n-            obj.push_back(Pair(\"connected\", false));\n-            UniValue addresses(UniValue::VARR);\n-            obj.push_back(Pair(\"addresses\", addresses));\n-            ret.push_back(obj);\n-        }\n-    }\n-\n-    LOCK(cs_vNodes);\n-    for (list<pair<string, vector<CService> > >::iterator it = laddedAddreses.begin(); it != laddedAddreses.end(); it++)\n-    {\n+    BOOST_FOREACH (const std::string& strAddNode, laddedNodes) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", it->first));\n-\n-        UniValue addresses(UniValue::VARR);\n-        bool fConnected = false;\n-        BOOST_FOREACH(const CService& addrNode, it->second) {\n-            bool fFound = false;\n-            UniValue node(UniValue::VOBJ);\n-            node.push_back(Pair(\"address\", addrNode.ToString()));\n-            BOOST_FOREACH(CNode* pnode, vNodes) {\n-                if (pnode->addr == addrNode)\n-                {\n-                    fFound = true;\n-                    fConnected = true;\n-                    node.push_back(Pair(\"connected\", pnode->fInbound ? \"inbound\" : \"outbound\"));\n-                    break;\n-                }\n-            }\n-            if (!fFound)\n-                node.push_back(Pair(\"connected\", \"false\"));\n-            addresses.push_back(node);\n-        }\n-        obj.push_back(Pair(\"connected\", fConnected));\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.push_back(Pair(\"addednode\", strAddNode));\n         ret.push_back(obj);\n     }\n-\n     return ret;\n }\n "
      }
    ]
  }
]