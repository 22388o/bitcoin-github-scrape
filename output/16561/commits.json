[
  {
    "sha": "37f2784952cb6f598f82922f9ce71d40c9d74e26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2YyNzg0OTUyY2I2ZjU5OGY4MjkyMmY5Y2U3MWQ0MGM5ZDc0ZTI2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-08-07T08:12:30Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-08-15T09:52:28Z"
      },
      "message": "tests: Use colors and dots in test_runner.py output only if standard output is a terminal -- allows for using the test runner output as input to other programs",
      "tree": {
        "sha": "b2b57c8e550f12ad685501fe37770025bfc98987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2b57c8e550f12ad685501fe37770025bfc98987"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37f2784952cb6f598f82922f9ce71d40c9d74e26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f2784952cb6f598f82922f9ce71d40c9d74e26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37f2784952cb6f598f82922f9ce71d40c9d74e26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f2784952cb6f598f82922f9ce71d40c9d74e26/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "082d006540038ab7064abeff945cc70b88e9a803",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37f2784952cb6f598f82922f9ce71d40c9d74e26/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37f2784952cb6f598f82922f9ce71d40c9d74e26/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=37f2784952cb6f598f82922f9ce71d40c9d74e26",
        "patch": "@@ -227,6 +227,7 @@ def main():\n                                      epilog='''\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--ansi', action='store_true', default=sys.stdout.isatty(), help=\"Use ANSI colors and dots in output (enabled by default when standard output is a TTY)\")\n     parser.add_argument('--combinedlogslen', '-c', type=int, default=0, metavar='n', help='On failure, print a log (of length n lines) to the console, combined from the test framework and all test nodes.')\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--ci', action='store_true', help='Run checks and code that are usually only enabled in a continuous integration environment')\n@@ -239,7 +240,14 @@ def main():\n     parser.add_argument('--tmpdirprefix', '-t', default=tempfile.gettempdir(), help=\"Root directory for datadirs\")\n     parser.add_argument('--failfast', action='store_true', help='stop execution after the first test failure')\n     parser.add_argument('--filter', help='filter scripts to run by regular expression')\n+\n     args, unknown_args = parser.parse_known_args()\n+    if not args.ansi:\n+        global BOLD, GREEN, RED, GREY\n+        BOLD = (\"\", \"\")\n+        GREEN = (\"\", \"\")\n+        RED = (\"\", \"\")\n+        GREY = (\"\", \"\")\n \n     # args to be passed on always start with two dashes; tests are the remaining unknown args\n     tests = [arg for arg in unknown_args if arg[:2] != \"--\"]\n@@ -341,9 +349,10 @@ def main():\n         combined_logs_len=args.combinedlogslen,\n         failfast=args.failfast,\n         runs_ci=args.ci,\n+        use_term_control=args.ansi,\n     )\n \n-def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False, runs_ci):\n+def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=False, args=None, combined_logs_len=0, failfast=False, runs_ci, use_term_control):\n     args = args or []\n \n     # Warn if bitcoind is already running (unix only)\n@@ -385,6 +394,7 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n         test_list=test_list,\n         flags=flags,\n         timeout_duration=40 * 60 if runs_ci else float('inf'),  # in seconds\n+        use_term_control=use_term_control,\n     )\n     start_time = time.time()\n     test_results = []\n@@ -468,7 +478,7 @@ class TestHandler:\n     Trigger the test scripts passed in via the list.\n     \"\"\"\n \n-    def __init__(self, *, num_tests_parallel, tests_dir, tmpdir, test_list, flags, timeout_duration):\n+    def __init__(self, *, num_tests_parallel, tests_dir, tmpdir, test_list, flags, timeout_duration, use_term_control):\n         assert num_tests_parallel >= 1\n         self.num_jobs = num_tests_parallel\n         self.tests_dir = tests_dir\n@@ -478,6 +488,7 @@ def __init__(self, *, num_tests_parallel, tests_dir, tmpdir, test_list, flags, t\n         self.flags = flags\n         self.num_running = 0\n         self.jobs = []\n+        self.use_term_control = use_term_control\n \n     def get_next(self):\n         while self.num_running < self.num_jobs and self.test_list:\n@@ -529,11 +540,13 @@ def get_next(self):\n                         status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(job)\n-                    clearline = '\\r' + (' ' * dot_count) + '\\r'\n-                    print(clearline, end='', flush=True)\n+                    if self.use_term_control:\n+                        clearline = '\\r' + (' ' * dot_count) + '\\r'\n+                        print(clearline, end='', flush=True)\n                     dot_count = 0\n                     return TestResult(name, status, int(time.time() - start_time)), testdir, stdout, stderr\n-            print('.', end='', flush=True)\n+            if self.use_term_control:\n+                print('.', end='', flush=True)\n             dot_count += 1\n \n     def kill_and_join(self):"
      }
    ]
  }
]