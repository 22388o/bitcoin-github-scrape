[
  {
    "sha": "6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmU3ZDE0ZDI0M2VlZWFhZjZiNGI5OGMzMzU5YzNlMTY5NWYyMDQ2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2018-11-17T07:24:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2018-11-17T09:26:49Z"
      },
      "message": "Properly generate salt in rpcauth.py, update tests\n\nPreviously, when iterating over bytes of the generated salt to construct\na hex string, only one character would be outputted when the byte is\nless than 0x10. Meaning that for a 16 byte salt, the hex string might be\nless than 32 characters and collisions would occur.",
      "tree": {
        "sha": "c3909ee2454344e6f1d990287a9ef852e2854721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3909ee2454344e6f1d990287a9ef852e2854721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35739976c1d9ad250ece573980c57e7e7976ae23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35739976c1d9ad250ece573980c57e7e7976ae23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35739976c1d9ad250ece573980c57e7e7976ae23"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cecc6c30a4220312b75218b54ec179a6775e1cdb",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
        "patch": "@@ -5,17 +5,13 @@\n \n import sys\n import os\n-from random import SystemRandom\n import base64\n+from binascii import hexlify\n import hmac\n \n-def generate_salt():\n-    # This uses os.urandom() underneath\n-    cryptogen = SystemRandom()\n-\n-    # Create 16 byte hex salt\n-    salt_sequence = [cryptogen.randrange(256) for _ in range(16)]\n-    return ''.join([format(r, 'x') for r in salt_sequence])\n+def generate_salt(size):\n+    \"\"\"Create size byte hex salt\"\"\"\n+    return hexlify(os.urandom(size)).decode()\n \n def generate_password():\n     \"\"\"Create 32 byte b64 password\"\"\"\n@@ -32,7 +28,8 @@ def main():\n \n     username = sys.argv[1]\n \n-    salt = generate_salt()\n+    # Create 16 byte hex salt\n+    salt = generate_salt(16)\n     if len(sys.argv) > 2:\n         password = sys.argv[2]\n     else:"
      },
      {
        "sha": "53058dc394afff4b732754a3a3d4428520cbee6f",
        "filename": "test/util/rpcauth-test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046/test/util/rpcauth-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6be7d14d243eeeaaf6b4b98c3359c3e1695f2046/test/util/rpcauth-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/rpcauth-test.py?ref=6be7d14d243eeeaaf6b4b98c3359c3e1695f2046",
        "patch": "@@ -24,8 +24,8 @@ def setUp(self):\n         self.rpcauth = importlib.import_module('rpcauth')\n \n     def test_generate_salt(self):\n-        self.assertLessEqual(len(self.rpcauth.generate_salt()), 32)\n-        self.assertGreaterEqual(len(self.rpcauth.generate_salt()), 16)\n+        for i in range(16, 32 + 1):\n+            self.assertEqual(len(self.rpcauth.generate_salt(i)), i * 2)\n \n     def test_generate_password(self):\n         password = self.rpcauth.generate_password()\n@@ -34,7 +34,7 @@ def test_generate_password(self):\n         self.assertEqual(expected_password, password)\n \n     def test_check_password_hmac(self):\n-        salt = self.rpcauth.generate_salt()\n+        salt = self.rpcauth.generate_salt(16)\n         password = self.rpcauth.generate_password()\n         password_hmac = self.rpcauth.password_to_hmac(salt, password)\n "
      }
    ]
  }
]