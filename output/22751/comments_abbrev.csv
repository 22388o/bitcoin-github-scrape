meshcollider,2021-08-21 00:00:12,"Concept ACK, but I don't think the RPC name represents the functionality. Analyze implies some sort of in-depth breakdown of information. Perhaps `nettransactionbalance` or something to represent the balance-specific use?",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903013607,903013607,
prayank23,2021-08-21 04:05:07,"> but I don't think the RPC name represents the functionality. Analyze implies some sort of in-depth breakdown of information. \n\nAgree. We already have RPC with similar name: `analyzepsbt` which returns lot of things that would be helpful for someone using PSBT. Although I am still confused between `decodepsbt` and `analyzepsbt`.\n\n> Perhaps nettransactionbalance or something to represent t",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903052080,903052080,
kallewoof,2021-08-21 07:45:23,"I have no strong feelings about keeping `analyze` but I think `<verb>rawtransaction` is a good name (edit: because it is sticking to the convention), where `<verb>` somehow indicates looking at each input and output and determining whether they belong to the wallet, and if so to add/subtract the appropriate amount.\n\nEdit: adding to results of existing RPC sounds good to me too, but not sure wh",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903076896,903076896,
prayank23,2021-08-21 11:45:01,"> adding to results of existing RPC sounds good to me too, but not sure which that would be.\n\nCan we add this to [`getbalance`](https://bitcoincore.org/en/doc/0.21.0/rpc/wallet/getbalance/)? Will need one argument `include_tx` so the command would look like this:\n\n```\n$ bitcoin-cli -named getbalance include_tx=hex\n\nResult:\n{                   \n  ""balance"" : n    (numeric) The tot",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903104233,903104233,
kallewoof,2021-08-22 07:38:23,"@prayank23 \n\n> Can we add this to [`getbalance`](https://bitcoincore.org/en/doc/0.21.0/rpc/wallet/getbalance/)?\n\nAdding to `getbalance` sounds reasonable to me.\n\n@jonatack \n\n> Concept ACK. Maybe add to decoderawtransaction? (Ignore me if that's dumb, and feel free to ignore the more detailed review comments below until the direction is set.)\n\nThis requires the wallet so `decode",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903227551,903227551,
jonatack,2021-08-22 07:45:01,(getbalances is the replacement for getbalance).,https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903228160,903228160,
kristapsk,2021-08-22 12:23:08,"I think it would be better to return JSON instead of numeric, that would allow adding possible other analysis in the future without breaking backwards compatibility.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903260884,903260884,
kallewoof,2021-08-23 03:58:42,"Thanks for all the feedback. I'm rewriting this as a separate pull request that adds the feature to `getbalances`. I'll potentially keep updating this PR as well, in case somebody prefers this variant.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903422148,903422148,
kallewoof,2021-08-23 04:20:40,Opened alternative #22776 and updated this PR.,https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903431067,903431067,
DrahtBot,2021-08-23 14:13:21,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23532](https://github.com/bitcoin/bitcoin/pull/23532) (test: add functional test for -startupnotify by brunoerg)\n* [#22",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-903811963,903811963,
meshcollider,2021-08-25 04:32:19,@kallewoof do you mind adding mention of #22776 to the OP so people looking at this are clear of the alternative,https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-905174885,905174885,
kallewoof,2021-08-25 10:12:43,"> @kallewoof do you mind adding mention of #22776 to the OP so people looking at this are clear of the alternative\n\nGood point, done.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-905367425,905367425,
kallewoof,2021-08-25 10:13:25,"~Apologies, I switched to a constant CWallet so had to re-push.~\n\nReverted change.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-905367905,905367905,
achow101,2021-08-25 23:49:43,"This seems useful, but I would like to see its functionality be a bit broader, and the name changed.\n\nOn the topic of functionality, I do see how it would be useful to see what changes a transaction would make without actually broadcasting it. We currently have `testmempoolaccept` which simulates `sendrawtransaction`. What if we had this RPC be `testwalletaccept` where we can not only observe ",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-905950000,905950000,
kallewoof,2021-08-26 03:15:09,"@achow101\n\nThanks for the feedback. Great suggestions!\n\nI think it's agreed that this should be renamed if we do not go with the alternative proposal to add this to `getbalances` (see #22776); I'll rename to `simulaterawtransaction` for now. It seems like your additional functionality may come as follow-up PR(s), too.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-906059704,906059704,
kallewoof,2021-08-26 08:05:36,Updated to take array of transactions instead of just one.,https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-906187435,906187435,
laanwj,2021-09-16 18:18:47,"Concept ACK, interesting feature",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-921136915,921136915,
kallewoof,2021-09-21 10:53:08,"* added `include_watchonly` option\n* updated tests to use one node with two wallets\n* added `include_watchonly` tests",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-923865580,923865580,
prayank23,2021-09-21 14:57:42,"Approach NACK\n\nI prefer https://github.com/bitcoin/bitcoin/pull/22776\n\nReasons: \n\n1. No need to create another RPC and remember another RPC.\n2. Other PR keeps things simple. This is basically returning balances but based on some conditions. It makes sense to add conditions (transactions in this case) as an argument in `getbalances`.\n3. Same approach can be followed in future for ot",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-924071463,924071463,
kallewoof,2021-09-22 04:29:50,"FWIW, @apoelstra suggests this is modified to take PSBT(s) instead of raw transactions, stating that the latter is more or less made obsolete by the former, and in multi-party transactions people will most likely be using PSBT.",https://github.com/bitcoin/bitcoin/pull/22751#issuecomment-924574194,924574194,
fanquake,2021-08-20 06:40:00,`test/functional/wallet_analyzerawtx.py:60:9: F841 local variable 'analysis' is assigned to but never used`,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r692703814,692703814,test/functional/wallet_analyzerawtx.py
kallewoof,2021-08-20 07:04:56,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r692716520,692716520,test/functional/wallet_analyzerawtx.py
jonatack,2021-08-21 16:14:58,"<details><summary>Some suggestions for the test</summary><p>\n\n```diff\n--- a/test/functional/wallet_analyzerawtx.py\n+++ b/test/functional/wallet_analyzerawtx.py\n@@ -5,12 +5,14 @@\n """"""Test analyzerawtransaction.\n """"""\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n   ",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693372773,693372773,test/functional/wallet_analyzerawtx.py
jonatack,2021-08-21 16:28:25,"<details><summary>Some suggestions for the rpc</summary><p>\n\n```diff\n--- a/src/wallet/rpcwallet.cpp\n+++ b/src/wallet/rpcwallet.cpp\n@@ -4647,13 +4647,16 @@ static RPCHelpMan upgradewallet()\n RPCHelpMan analyzerawtransaction()\n {\n     return RPCHelpMan{""analyzerawtransaction"",\n-        ""\nCalculate the balance change resulting in the signing and broadcasting of the given transactio",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693374190,693374190,src/wallet/rpcwallet.cpp
kiminuo,2021-08-22 15:18:03,"Nit: Consider please:\n```suggestion\n    if (!DecodeHexTx(mtx, request.params[0].get_str(), /* try_no_witness */ true, /* try_witness */ true)) {\n```",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693516957,693516957,src/wallet/rpcwallet.cpp
kiminuo,2021-08-22 15:20:06,"Nit: People typically place `const`s before types in this codebase, AFAIK. If I'm wrong, please correct me.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693517224,693517224,src/wallet/rpcwallet.cpp
kiminuo,2021-08-22 15:23:59,Would it be more idiomatic to use `for (CTxIn& txin : mtx.vin) {`?,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693517767,693517767,src/wallet/rpcwallet.cpp
kiminuo,2021-08-22 15:30:30,"```suggestion\n    RPCTypeCheck(request.params, {UniValue::VSTR}, /* fAllowNull */ true);\n```",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693518657,693518657,src/wallet/rpcwallet.cpp
kiminuo,2021-08-22 15:32:02,"If you allow `null`, then L4598 will lead to a crash, would it not?",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693518874,693518874,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 04:19:45,"The RPCHelpMan framework will not execute the code, since the first param is non-optional.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693641733,693641733,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 04:25:14,Done.,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693643260,693643260,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 04:25:57,"Looking around in the code, the way I wrote it seems to be the way it's written elsewhere, so keeping as is.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693643427,693643427,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 04:27:26,"Thanks, addressed all. See also alt PR.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693643835,693643835,src/wallet/rpcwallet.cpp
kiminuo,2021-08-23 10:32:30,"Two lines above the `const` modifier is before type. Anyway, it's not important so I don't want to waste your time on this any further.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693854537,693854537,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 11:10:21,"That would actually make the shared pointer a constant, which points to a non-constant CWallet instance.\n\nSee e.g. https://stackoverflow.com/questions/7526152/easy-rule-to-read-complicated-const-declarations",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693877296,693877296,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 11:12:47,"Also try modifying my PR to this, and try compiling:\n```C++\n    const std::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n    wallet->ResendWalletTransactions(); // <- this is not const\n```\n(it works, even though ResendWalletTransactions() is NOT const-declared)",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693878759,693878759,src/wallet/rpcwallet.cpp
kallewoof,2021-08-23 11:33:56,"Actually, I'm mistaken, and the two versions are identical. (ResendWalletTransactions() compiles for both cases.)\nI actually think this is a mistake, and could just as well be\n```C++\nstd::shared_ptr<CWallet> wallet = GetWalletForJSONRPCRequest(request);\n```\nbut I'm just going to keep the const where it is, as that's the case for other RPC calls. Sorry for the misinformation!\n\nTo clar",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r693891440,693891440,src/wallet/rpcwallet.cpp
kallewoof,2021-08-24 04:29:18,I opened a separate pull request on this subject. Thanks for the nudge. https://github.com/bitcoin/bitcoin/pull/22787,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r694482649,694482649,src/wallet/rpcwallet.cpp
kiminuo,2021-08-24 13:51:22,"Would `RPCTypeCheck(request.params, {UniValue::VSTR})` work too then?",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r694870990,694870990,src/wallet/rpcwallet.cpp
kiminuo,2021-08-24 13:51:58,Would it be better to use `Decimal` here?,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r694871518,694871518,test/functional/wallet_analyzerawtx.py
kallewoof,2021-08-25 10:11:20,"Could, but would be another import just for this one place, and the code should be fine (i.e. no rounding errors) due to the `assert_approx`.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r695604933,695604933,test/functional/wallet_analyzerawtx.py
achow101,2021-09-16 18:56:33,"In 4d6c1a01532fa189c44714fae31916d758f3a574 ""rpc/wallet: add simulaterawtransaction RPC""\n\nThe isminetype here needs to match the isminetype below as otherwise we could get incorrect balance calculations. This either needs to be changed to `ISMINE_ALL` or the calculation in the outputs needs to check `ISMINE_SPENDABLE` too.\n\nI think it would be better to use `ISMINE_ALL` so that the balance",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r710393087,710393087,src/wallet/rpcwallet.cpp
achow101,2021-09-16 19:02:00,"In 4d6c1a01532fa189c44714fae31916d758f3a574 ""rpc/wallet: add simulaterawtransaction RPC""\n\nI would prefer using one node with 2 wallets. Having multiple nodes, with one wallet on each, is how we used to do things before multiwallet. Given that the test already makes testing wallets (one on each node), it's unnecessary to have multiple nodes.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r710397947,710397947,test/functional/wallet_simulaterawtx.py
kallewoof,2021-09-21 04:58:14,Sounds good - adding an `include_watchonly` option.,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r712694853,712694853,src/wallet/rpcwallet.cpp
kallewoof,2021-09-21 07:22:02,"That is obviously the right way to do it. Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r712767909,712767909,test/functional/wallet_simulaterawtx.py
achow101,2021-09-24 20:25:04,"In 40944a573a21c225662ce0c8ba7f64a8427ca22d ""rpc/wallet: add simulaterawtransaction RPC""\n\nThis is unnecessary since no key access is needed.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r715884509,715884509,src/wallet/rpcwallet.cpp
kallewoof,2021-09-25 05:18:49,Do the vin/vout checks not access keys to determine if the wallet owns them?,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r715993468,715993468,src/wallet/rpcwallet.cpp
achow101,2021-09-25 07:02:04,It only uses pubkeys.,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r716003118,716003118,src/wallet/rpcwallet.cpp
kallewoof,2021-09-25 07:12:48,"OK, you're talking about the `EnsureWalletIsUnlocked` line. I thought you were also talking about L4698. Fixed.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r716004123,716004123,src/wallet/rpcwallet.cpp
MarcoFalke,2021-11-09 12:01:43,Needs to use self.gener... after a rebase,https://github.com/bitcoin/bitcoin/pull/22751#discussion_r745550564,745550564,test/functional/wallet_simulaterawtx.py
kallewoof,2021-11-14 11:52:59,"Thanks, updated.",https://github.com/bitcoin/bitcoin/pull/22751#discussion_r748843165,748843165,test/functional/wallet_simulaterawtx.py
