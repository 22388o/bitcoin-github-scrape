[
  {
    "sha": "f2cee8ff75f26b2d1529190e26db0bf172807316",
    "node_id": "C_kwDOABII59oAKGYyY2VlOGZmNzVmMjZiMmQxNTI5MTkwZTI2ZGIwYmYxNzI4MDczMTY",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-08-20T06:09:03Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-11-14T11:52:46Z"
      },
      "message": "rpc/wallet: add simulaterawtransaction RPC\n\nThis command iterates over the inputs and outputs of the given transactions, and tallies up the balance change for the given wallet. This can be useful e.g. when verifying that a coin join like transaction doesn't contain unexpected inputs that the wallet will then sign for unintentionally.",
      "tree": {
        "sha": "2343d9b25f743dfffe759b1c755e5878551ff1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2343d9b25f743dfffe759b1c755e5878551ff1c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2cee8ff75f26b2d1529190e26db0bf172807316",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAmGQ+I4ACgkQV692LbM1\nMyJLrw/+OojQo5eG8cqS7+g4njkayeN+b3Etq4KrcsRCcoS0I4NcD5Ipjs377WoE\ng5crjCqDjADGqIIjOdrtVIZKhTZFMDgp585/CMU0SZc9nz3BNogs3wzSqfYEntpD\nX6aWS+oSYPE9NqJ7XrMpGVS2fk/HDSyfFBD0Ph7u+cvFWZjeaTx+AgufPJSg4HEq\nqtFowPo0wmz1kvu8E3EroIQfK1di3kFaMn2ThtTUDYjbnBlnNUhBi2mZw17j8Epk\nnUmHZTMtl9ZCwBXNF1Hv3Q3T4ymTGlyvf+sJ1LKAx8Tj/CSFPp14J0yzfRGj8xLI\nimnC3pydyA1wxo7gp97w7GlUCbjzijVap55LtEB3I9lHVnX12/fwCEykDq84aQJJ\nT0iAmTfshSUSZ3bxFbmnHisMTt2aKKffe/TykRWfBiUQK8b/eE5aXRzjydmGXz6A\nvrK43Tw3LJwlQG0ltxORI+EFLHUSAQS4rjx+XR9Ileh0nP87R/Bw41VUV/pmveVF\nLF+BPfddrD8SUArmARcMACggu9+q2ivWD72XDYsxL1novrnzyX/nVNATVHHAbuX0\nbpCmIp5vWG89PsB13eVsDjocX9pnfvLJ5Bfp+5FsNJUZQAZCRmdhD+EUTHnQkWSL\nZ5YBoBeWh0vaVDVJaQvbi2TVvZay6vQSScG6vcWTAk/qqkeUOlQ=\n=WMFc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2343d9b25f743dfffe759b1c755e5878551ff1c3\nparent 9d2895157ec0ff6e356f40c5fe84d3007fc991c1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1629439743 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1636890766 +0900\n\nrpc/wallet: add simulaterawtransaction RPC\n\nThis command iterates over the inputs and outputs of the given transactions, and tallies up the balance change for the given wallet. This can be useful e.g. when verifying that a coin join like transaction doesn't contain unexpected inputs that the wallet will then sign for unintentionally.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2cee8ff75f26b2d1529190e26db0bf172807316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2cee8ff75f26b2d1529190e26db0bf172807316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2cee8ff75f26b2d1529190e26db0bf172807316/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d2895157ec0ff6e356f40c5fe84d3007fc991c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d2895157ec0ff6e356f40c5fe84d3007fc991c1"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 189,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bf08287163bcb0c0402624d0f7ea18ee8d468111",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2cee8ff75f26b2d1529190e26db0bf172807316/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2cee8ff75f26b2d1529190e26db0bf172807316/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f2cee8ff75f26b2d1529190e26db0bf172807316",
        "patch": "@@ -136,6 +136,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"send\", 1, \"conf_target\" },\n     { \"send\", 3, \"fee_rate\"},\n     { \"send\", 4, \"options\" },\n+    { \"simulaterawtransaction\", 0, \"rawtxs\" },\n+    { \"simulaterawtransaction\", 1, \"options\" },\n     { \"importprivkey\", 2, \"rescan\" },\n     { \"importaddress\", 2, \"rescan\" },\n     { \"importaddress\", 3, \"p2sh\" },"
      },
      {
        "sha": "729553a2e6632c61dbc4c209d3977bbb112a855e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2cee8ff75f26b2d1529190e26db0bf172807316/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2cee8ff75f26b2d1529190e26db0bf172807316/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f2cee8ff75f26b2d1529190e26db0bf172807316",
        "patch": "@@ -4805,6 +4805,94 @@ static RPCHelpMan upgradewallet()\n     };\n }\n \n+RPCHelpMan simulaterawtransaction()\n+{\n+    return RPCHelpMan{\"simulaterawtransaction\",\n+        \"\\nCalculate the balance change resulting in the signing and broadcasting of the given transaction(s).\\n\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+        {\n+            {\"rawtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"An array of hex strings of raw transactions.\\n\",\n+                {\n+                    {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED_NAMED_ARG, \"Options\",\n+                {\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n+                },\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR_AMOUNT, \"balance_change\", \"The wallet balance change (negative means decrease).\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"simulaterawtransaction\", \"[\\\"myhex\\\"]\")\n+            + HelpExampleRpc(\"simulaterawtransaction\", \"[\\\"myhex\\\"]\")\n+        },\n+    [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<const CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* pwallet = wallet.get();\n+\n+    RPCTypeCheck(request.params, {UniValue::VARR, UniValue::VOBJ}, true);\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CAmount changes{0};\n+    std::set<COutPoint> spent;\n+\n+    isminefilter filter = ISMINE_SPENDABLE;\n+    if (request.params[1].isObject()) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"include_watchonly\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (ParseIncludeWatchonly(options[\"include_watchonly\"], *pwallet)) {\n+            filter |= ISMINE_WATCH_ONLY;\n+        }\n+    }\n+\n+    const auto& txs = request.params[0].get_array();\n+    for (size_t i = 0; i < txs.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, txs[i].get_str(), /* try_no_witness */ true, /* try_witness */ true)) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Transaction hex string decoding failure.\");\n+        }\n+\n+        // Fetch debit; we are *spending* these; if the transaction is signed and\n+        // broadcast, we will lose everything in these\n+        for (const auto& txin : mtx.vin) {\n+            if (spent.count(txin.prevout)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Transaction(s) are spending the same output more than once\");\n+            }\n+            spent.insert(txin.prevout);\n+            changes -= pwallet->GetDebit(txin, filter);\n+        }\n+\n+        // Iterate over outputs; we are *receiving* these, if the wallet considers\n+        // them \"mine\"; if the transaction is signed and broadcast, we will receive\n+        // everything in these\n+        for (const auto& txout : mtx.vout) {\n+            if (0 == (pwallet->IsMine(txout) & filter)) continue;\n+            changes += txout.nValue;\n+        }\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"balance_change\", ValueFromAmount(changes));\n+\n+    return result;\n+}\n+    };\n+}\n+\n #ifdef ENABLE_EXTERNAL_SIGNER\n static RPCHelpMan walletdisplayaddress()\n {\n@@ -4923,6 +5011,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &setwalletflag,                  },\n     { \"wallet\",             &signmessage,                    },\n     { \"wallet\",             &signrawtransactionwithwallet,   },\n+    { \"wallet\",             &simulaterawtransaction,         },\n     { \"wallet\",             &unloadwallet,                   },\n     { \"wallet\",             &upgradewallet,                  },\n     { \"wallet\",             &walletcreatefundedpsbt,         },"
      },
      {
        "sha": "4b5917b7d44137908faa6819001d659979255f50",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2cee8ff75f26b2d1529190e26db0bf172807316/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2cee8ff75f26b2d1529190e26db0bf172807316/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f2cee8ff75f26b2d1529190e26db0bf172807316",
        "patch": "@@ -253,6 +253,7 @@\n     'wallet_bumpfee.py --descriptors',\n     'wallet_implicitsegwit.py --legacy-wallet',\n     'rpc_named_arguments.py',\n+    'wallet_simulaterawtx.py',\n     'wallet_listsinceblock.py --legacy-wallet',\n     'wallet_listsinceblock.py --descriptors',\n     'wallet_listdescriptors.py --descriptors',"
      },
      {
        "sha": "45b5a0f9fe32ab11b6f4d3aacb66d0cced424fd1",
        "filename": "test/functional/wallet_simulaterawtx.py",
        "status": "added",
        "additions": 97,
        "deletions": 0,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2cee8ff75f26b2d1529190e26db0bf172807316/test/functional/wallet_simulaterawtx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2cee8ff75f26b2d1529190e26db0bf172807316/test/functional/wallet_simulaterawtx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_simulaterawtx.py?ref=f2cee8ff75f26b2d1529190e26db0bf172807316",
        "patch": "@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test simulaterawtransaction.\n+\"\"\"\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+class SimulateTxTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def setup_network(self, split=False):\n+        self.setup_nodes()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.generate(node, 1, sync_fun=self.no_op) # Leave IBD\n+\n+        node.createwallet(wallet_name='w0')\n+        node.createwallet(wallet_name='w1')\n+        w0 = node.get_wallet_rpc('w0')\n+        w1 = node.get_wallet_rpc('w1')\n+\n+        self.generatetoaddress(node, COINBASE_MATURITY + 1, w0.getnewaddress())\n+        assert_equal(w0.getbalance(), 50.0)\n+        assert_equal(w1.getbalance(), 0.0)\n+\n+        address1 = w1.getnewaddress()\n+        address2 = w1.getnewaddress()\n+\n+        # Make address1 watch-only in w0\n+        w0.importpubkey(pubkey=w1.getaddressinfo(address1)[\"pubkey\"])\n+        all = {\"include_watchonly\": True}\n+\n+        tx1 = node.createrawtransaction([], [{address1: 5.0}])\n+        tx2 = node.createrawtransaction([], [{address2: 10.0}])\n+\n+        # w0 should be unaffected (include_watchonly=False) or see +5 (include_watchonly=True) for tx1\n+        assert_equal(w0.simulaterawtransaction([tx1])[\"balance_change\"], 0.0)\n+        assert_equal(w0.simulaterawtransaction([tx1], all)[\"balance_change\"], 5.0)\n+\n+        # w1 should see +5 balance for tx1\n+        assert_equal(w1.simulaterawtransaction([tx1])[\"balance_change\"], 5.0)\n+\n+        # w0 should be unaffected (include_watchonly=False) or see +5 (include_watchonly=True) for both transactions\n+        assert_equal(w0.simulaterawtransaction([tx1, tx2])[\"balance_change\"], 0.0)\n+        assert_equal(w0.simulaterawtransaction([tx1, tx2], all)[\"balance_change\"], 5.0)\n+\n+        # w1 should see +15 balance for both transactions\n+        assert_equal(w1.simulaterawtransaction([tx1, tx2])[\"balance_change\"], 15.0)\n+\n+        # w0 funds transaction; it should now see a decrease in (tx fee and payment), and w1 should see the same as above\n+        funding = w0.fundrawtransaction(tx1)\n+        tx1 = funding[\"hex\"]\n+        bitcoin_fee = float(funding[\"fee\"])\n+\n+        # w0 sees fee + 5 btc decrease, or fee only for watchonly case\n+        assert_approx(w0.simulaterawtransaction([tx1])[\"balance_change\"], -(5.0 + bitcoin_fee))\n+        assert_approx(w0.simulaterawtransaction([tx1], all)[\"balance_change\"], -(bitcoin_fee))\n+\n+        # w1 sees same as before\n+        assert_equal(w1.simulaterawtransaction([tx1])[\"balance_change\"], 5.0)\n+\n+        # same inputs (tx) more than once should error\n+        assert_raises_rpc_error(-8, \"Transaction(s) are spending the same output more than once\", w0.simulaterawtransaction, [tx1,tx1])\n+\n+        # send tx1 to avoid reusing same UTXO below\n+        node.sendrawtransaction(w0.signrawtransactionwithwallet(tx1)[\"hex\"])\n+        self.sync_all()\n+\n+        # w0 funds transaction 2; it should now see a decrease in (tx fee and payment), and w1 should see the same as above\n+        funding = w0.fundrawtransaction(tx2)\n+        tx2 = funding[\"hex\"]\n+        bitcoin_fee2 = float(funding[\"fee\"])\n+\n+        # w0 sees fees + 15 btc decrease, or fees + 10 btc decrease for watch only case\n+        assert_approx(w0.simulaterawtransaction([tx1, tx2])[\"balance_change\"], -(5.0 + bitcoin_fee + 10.0 + bitcoin_fee2))\n+        assert_approx(w0.simulaterawtransaction([tx1, tx2], all)[\"balance_change\"], -(bitcoin_fee + 10.0 + bitcoin_fee2))\n+\n+        # w1 sees same as before\n+        assert_equal(w1.simulaterawtransaction([tx1, tx2])[\"balance_change\"], 15.0)\n+\n+if __name__ == '__main__':\n+    SimulateTxTest().main()"
      }
    ]
  }
]