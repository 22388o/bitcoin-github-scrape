gmaxwell,2019-04-18T18:44:57Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-484636149,484636149,
jnewbery,2019-04-18T18:53:46Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-484640077,484640077,
jonasschnelli,2019-04-18T18:58:49Z,"Nice! That was quick.\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-484642339,484642339,
jonasschnelli,2019-04-18T20:14:06Z,"Some rough benchmarks\n\n{\n  ""start_height"": 0,\n  ""stop_height"": 572152\n}\n\nreal	4m23.596s\n\n\nA simple wallet,... filtered out roughly 2900 blocks and scanned them.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-484672833,484672833,
DrahtBot,2019-04-19T22:20:20Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17384.html) (test: Create new test library by MarcoFalke",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485027756,485027756,
instagibbs,2019-04-20T19:06:54Z,"@jimpo  \n\n> Why is the default keypool size so large?\n\nIIRC this makes it much less likely typical usage will hit a case when an encrypted wallet runs out of viable keys and starts to miss funds during a sync(since it currently doesn't pause a sync and ask the user for password).",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485151790,485151790,
instagibbs,2019-04-20T19:07:19Z,and the obligatory concept ACK!,https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485151846,485151846,
gmaxwell,2019-04-20T20:00:30Z,"> Why is the default keypool size so large?\n\nIt isn't. It's small... the whole concept of 'gap' scanning is fairly broken and easily results in funds loss... e.g. when a user hands out multiple addresses to people who haven't used them yet.  The brokenness can be largely addressed by setting the lookahead pretty far.\n\nIn some prelim testing this appears to be slower than just rescanning th",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485160938,485160938,
sipa,2019-04-20T20:36:16Z,@gmaxwell What specialized parser are you comparing to? Does it include the time to match all outputs/inputs to a set of 6000 sPKs?,https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485166805,485166805,
sipa,2019-04-20T20:42:21Z,"@jimpo 2 keypools (external and change), each 1000 keys, each key 3 sPKs (p2pkh, p2sh-p2wpkh, native p2wpkh), so I expect 6000 entries to match against.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-485167872,485167872,
gmaxwell,2019-05-11T19:56:09Z,"@gmaxwell  modified copy of the old scanner from bitcoin talk, doesn't check the inputs.   I think the main issue is that rehashing all addresses for each block sequentially is pegging a single core and limiting the speed.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-491539541,491539541,
Sjors,2019-07-13T15:31:17Z,"Concept ACK. @achow101 how much does this get in the way of #16341?\n\n`scantxoutset` could be a more light-touch place to try this. ",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-511130840,511130840,
achow101,2019-07-13T16:39:35Z,"> Concept ACK. @achow101 how much does this get in the way of #16341?\n\nI don't think it really will. The only wallet change looks to be easily portable to the SPKManager model.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-511136177,511136177,
Sjors,2019-08-06T14:46:15Z,"I'm unable to compile on macOS:\n\n```\ninterfaces/chain.cpp:258:48: error: constexpr variable 'NO_FILTER' must be initialized by a constant expression\n        constexpr static std::pair<bool, bool> NO_FILTER{/* exists */ false, /* matches */ true};\n                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ninterfaces/chain.cpp:258:48: note: non-const",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-518701691,518701691,
MarcoFalke,2019-08-06T17:27:48Z,"I have pulled out the test changes to #16465, so you might want to review that first.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-518766547,518766547,
MarcoFalke,2019-09-24T15:41:40Z,"I wrote some more dev doc and unit tests, but they require #16956, so please review that first.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-534618388,534618388,
Sjors,2019-09-27T20:27:58Z,"Can you make the log mention that it's using the filters? I rescanned a mainnet wallet from genesis. On a 2019 MacBook Pro running macOS 10.14.6, configured without debug, using QT:\n* before: 38 minutes\n* after: 8 minutes 20 seconds\n\nIn case you want to tweak the progress bar, it seems a bit pessimistic in the beginning:\n```\n2019-09-27T19:36:19Z [TestRescan] Rescan started from block 0",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-536085544,536085544,
MarcoFalke,2019-10-11T20:24:48Z,"Thanks, force pushed to add logging",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-541211630,541211630,
MarcoFalke,2019-11-05T13:43:25Z,"Thanks for the review @mzumsande , @luke-jr , @jkczyz . Addressed all your feedback in the latest push",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-549827788,549827788,
jnewbery,2019-11-06T18:53:45Z,"I think as well as fixing the bug here: https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343265997, it'd be useful to add a test that would catch cases like this, where a rescan exhausts the keypool.",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-550450154,550450154,
DrahtBot,2019-11-07T14:28:10Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-551102346,551102346,
jnewbery,2020-05-08T01:04:02Z,"@MarcoFalke - do you mind documenting the problems with this approach, so people who find this PR in future know why you closed it?",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-625572805,625572805,
MarcoFalke,2020-05-08T11:20:02Z,"I don't think there are any problems with this approach, once [this](https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343265997) and [this](https://github.com/bitcoin/bitcoin/pull/15845#discussion_r344843159) is addressed.\n\nAs pointed out [here](https://github.com/bitcoin/bitcoin/pull/15845#discussion_r346321905) multisig should work just fine, but I haven't had the time or interest t",https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-625768563,625768563,
sipa,2019-04-18T18:53:17Z,This will miss P2PKH outputs I think.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r276791064,276791064,src/wallet/wallet.cpp
sipa,2019-04-18T18:54:04Z,Just because we know about a script does not imply we're watching it I believe.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r276791373,276791373,src/wallet/wallet.cpp
MarcoFalke,2019-04-18T18:56:01Z,"Sure, but I'd rather err on the safe side of scanning a block too much than missing a block (and thus lose coins)",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r276792123,276792123,src/wallet/wallet.cpp
MarcoFalke,2019-04-18T18:58:56Z,Could you please elaborate in which code path we import a P2PKH address or a public key without adding it to `setWatchOnly`?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r276793224,276793224,src/wallet/wallet.cpp
jimpo,2019-04-19T23:03:45Z,`result.last_scanned_block` and `result.last_scanned_height` should both be updated even if the filter doesn't match.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277109313,277109313,src/wallet/wallet.cpp
jimpo,2019-04-19T23:10:14Z,"You don't need the lock for the filter lookup, just the block index lookup.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277110073,277110073,src/interfaces/chain.cpp
jimpo,2019-04-19T23:11:46Z,Maybe make the BlockFilterType a parameter here?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277110229,277110229,src/interfaces/chain.cpp
jimpo,2019-04-19T23:12:47Z,I'd note in the comment that it's a basic (type) block filter (in cases an other types are added).,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277110327,277110327,src/wallet/wallet.h
jimpo,2019-04-19T23:24:23Z,"This is problematic for a few reasons.\n\n1) You can turn on the filter index and it will build in the background using the blocks on disk. This wouldn't work in pruned mode. It might be safe though to allow pruning if the block filter index tip is already within chain tip height - MIN_BLOCKS_TO_KEEP. But then we couldn't prune until the block filter index is in sync (it has its own sort of init",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277111477,277111477,src/init.cpp
jimpo,2019-04-19T23:31:28Z,"Oh, there's another optimization possible, which is to not call `filterMatchesAny` if the filter index doesn't exist or doesn't contain any entry for any of the previously queried block hashes. If `filterMatchesAny` indicates whether the filter was found in addition to whether it matches, it would be pretty easy to check this.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277112226,277112226,src/wallet/wallet.cpp
MarcoFalke,2019-04-22T14:00:01Z,"CBlockIndex::nDataPos is protected by cs_main, but we never read that in LookupFilter, so yeah, don't need the lock",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277298317,277298317,src/interfaces/chain.cpp
MarcoFalke,2019-04-22T14:00:31Z,"Indeed, last_scanned_height is reported by rpc as the stop_height, so should be updated.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277298459,277298459,src/wallet/wallet.cpp
MarcoFalke,2019-04-22T14:01:27Z,Will there ever be a filter different from the basic filter?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277298780,277298780,src/interfaces/chain.cpp
MarcoFalke,2019-04-22T14:02:47Z,"Mentioned ""basic""",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277299161,277299161,src/wallet/wallet.h
MarcoFalke,2019-04-22T14:03:13Z,"Hmm, right",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r277299318,277299318,src/init.cpp
MarcoFalke,2019-09-25T12:56:59Z,I was wrong. Fixed.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r328105296,328105296,src/wallet/wallet.cpp
mzumsande,2019-11-04T00:29:32Z,"This gives me a ""redundant redeclaration"" compiler warning.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r341883162,341883162,src/test/util.cpp
mzumsande,2019-11-04T00:30:53Z,just a reminder to remove at some point,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r341883239,341883239,src/wallet/test/wallet_blockfilter_tests.cpp
luke-jr,2019-11-04T13:04:42Z,`Optional<bool>` might make more sense?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342038112,342038112,src/interfaces/chain.h
luke-jr,2019-11-04T13:07:55Z,This doesn't check `filter_result.first`,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342039361,342039361,src/wallet/wallet.cpp
jkczyz,2019-11-04T23:59:24Z,Is `Optional` needed? This function always returns a block.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342328744,342328744,src/test/util.cpp
jkczyz,2019-11-04T23:59:56Z,Could you clarify this comment a bit. In case what?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342328887,342328887,src/test/util.cpp
jkczyz,2019-11-05T00:03:10Z,Could you update the commit message to explain this change?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342329664,342329664,src/test/util.cpp
jkczyz,2019-11-05T00:08:27Z,grammar nit: s/or a more efficient/or for a more efficient,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342330912,342330912,src/index/blockfilterindex.h
jkczyz,2019-11-05T02:05:06Z,"This is quite a complicated interface which asks a lot from the caller. This is an indication that the calling code should be refactored to use better abstractions.\n\nFor instance, a `BlockScanner` abstraction could be used to return blocks and whose implementation may vary depending on whether block filters exist. The logic around filters could be encapsulated there rather than having the deta",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342355120,342355120,src/interfaces/chain.h
MarcoFalke,2019-11-05T13:08:51Z,Thanks. Not sure how that got there. Removed,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342552448,342552448,src/test/util.cpp
MarcoFalke,2019-11-05T13:09:03Z,Removed,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342552519,342552519,src/wallet/test/wallet_blockfilter_tests.cpp
MarcoFalke,2019-11-05T13:19:28Z,Added docs,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342557326,342557326,src/test/util.cpp
MarcoFalke,2019-11-05T13:19:41Z,Added docs. Thx,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342557421,342557421,src/test/util.cpp
MarcoFalke,2019-11-05T13:19:51Z,Added docs,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342557498,342557498,src/test/util.cpp
MarcoFalke,2019-11-05T13:41:10Z,Reworded,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342567525,342567525,src/index/blockfilterindex.h
MarcoFalke,2019-11-05T13:41:39Z,"Thanks, switched to `Optional<>`",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342567768,342567768,src/interfaces/chain.h
MarcoFalke,2019-11-05T13:41:49Z,fixed,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342567849,342567849,src/wallet/wallet.cpp
MarcoFalke,2019-11-05T13:42:31Z,I think this can be done as a follow-up,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r342568179,342568179,src/interfaces/chain.h
jnewbery,2019-11-06T16:37:14Z,Which docs? I still don't understand why you're using an optional here. The TODO implies that you plan to implement something in a later PR. Can you just return a `CTxIn` until then?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343201200,343201200,src/test/util.cpp
jnewbery,2019-11-06T16:38:22Z,"s/coins/coin/\n\nI also don't like the (mis)use of the word coin here, which is generally understood to mean a utxo. These functions return a CTxIn that points to the first coinbase output.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343201892,343201892,src/test/util.h
Talkless,2019-11-06T17:32:41Z,"This could lock even smaller block of code:\n```\n        {\n            LOCK(cs_main);\n            index = LookupBlockIndex(hash);\n        }\n        if (!index) return {};\n```\n\nOr maybe you would care to use `ES.28: Use lambdas for complex initialization, especially of const variables` guideline (note `const` for `index` pointer itself):\n```\nconst CBlockIndex* const index = [&]",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343230189,343230189,src/interfaces/chain.cpp
Talkless,2019-11-06T17:34:05Z,"Looks like the pointer itself could be even const too: \nconst BlockFilterIndex* **const** block_filter_index = ...",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343230849,343230849,src/interfaces/chain.cpp
jnewbery,2019-11-06T18:50:06Z,Setting the filter_set outside the rescan loop means that this doesn't get updated when the keypool is topped up. That means that any payments to an address beyond the first 1000 will be missed on rescan.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r343265997,343265997,src/wallet/wallet.cpp
luke-jr,2019-11-11T16:13:45Z,What about `mapCryptedKeys`? I don't think `mapKeys` is used on encrypted wallets?,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r344788060,344788060,src/wallet/scriptpubkeyman.cpp
ryanofsky,2019-11-11T18:18:05Z,"> What about `mapCryptedKeys`? I don't think `mapKeys` is used on encrypted wallets?\n\nYes, this should just loop over `mapCryptedKeys` as well. `mapKeys` should be empty in encryped wallets.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r344843159,344843159,src/wallet/scriptpubkeyman.cpp
achow101,2019-11-12T02:38:56Z,"This function in general does not match everything that `IsMine` would match.In particular it doesn't enumerate all possible combinations of multisig policies with all combinations of pubkeys or all of the weird nested scripts that are possible. There probably needs to be a release note that if you have some weird and non-standard script stuff, the fast rescan won't see those things.",https://github.com/bitcoin/bitcoin/pull/15845#discussion_r344994878,344994878,src/wallet/scriptpubkeyman.cpp
Sjors,2019-11-14T11:52:14Z,Such a warning makes sense; people with such wallets will presumably understand. And descriptor wallets won't have this problem.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r346270124,346270124,src/wallet/scriptpubkeyman.cpp
luke-jr,2019-11-14T13:52:28Z,`IsMine` itself won't test weird combinations. I don't see why fast rescan shouldn't be able to check for everything `IsMine` does... users shouldn't be exposed to internal implementation details like this.,https://github.com/bitcoin/bitcoin/pull/15845#discussion_r346321905,346321905,src/wallet/scriptpubkeyman.cpp
