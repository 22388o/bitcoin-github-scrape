[
  {
    "sha": "faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY3Y2M4YTQyNzUyNzBmM2Y1NGRmYTllMmNmYjZlMzM2ZTQ1MzY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-18T22:06:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:06:00Z"
      },
      "message": "test: Add blockfilter variant to wallet_import_rescan.py",
      "tree": {
        "sha": "306be97648cce52f600fd84275100acfb33aa648",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/306be97648cce52f600fd84275100acfb33aa648"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgckwwAk2zw1GwGz1l4IDAaTYsDBH9S8iHoJ9H2VUqla45mZ0JvmO8eGB7JidJt\nghxWZ1XfIEsOGAhh3JIhCQ32JhxKlSixGAX7k/UhrD3Vk6KSca2KiHlbCBf8vYPk\nO3iI5vOmdqxvyym3gOidtlNyGPQyjB0mPW58O7VQ9bbHU17jlx82speUCacMjGMn\nZ4Yeo9Y+iaAfwUrDJcuKpvdaSVVGANPlHio4nBkhYQsJFwSJyA1QPwtFGXdHb+xV\n6oTG29gH2DpquxhbD/5Mf7/UUdOOyJJ89xWglRKD7jycmoe6P13i9U+dWCYqdtFp\nuMPqaWXvmdhpgmQ4ZfnjhQgtWowc1GEj6RgzHZ2VADJCTpnCNSOZkE455aZynnGz\ns1/jsf0vnhuVA4jENqQVYWTzSr9qhZNkR/sWY6YZ8dm10TwSshU2qO54cGiAUy3x\nI12RDmOlx4Rn4ShfVDAQVwejLsRu6mZFOTW+IBkTgv5Mfh/z90lRqZSD0DHFzQAE\nFFAKCHLU\n=ah7r\n-----END PGP SIGNATURE-----",
        "payload": "tree 306be97648cce52f600fd84275100acfb33aa648\nparent bc38bb9a6036d73f507e66a2f588547f3f17e4b1\nauthor MarcoFalke <falke.marco@gmail.com> 1555625181 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572959160 -0500\n\ntest: Add blockfilter variant to wallet_import_rescan.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc38bb9a6036d73f507e66a2f588547f3f17e4b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc38bb9a6036d73f507e66a2f588547f3f17e4b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc38bb9a6036d73f507e66a2f588547f3f17e4b1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cfea335c98ed665dd5424561ed0bfbbeddad298d",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
        "patch": "@@ -38,7 +38,7 @@\n Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n-class Variant(collections.namedtuple(\"Variant\", \"call data address_type rescan prune\")):\n+class Variant(collections.namedtuple(\"Variant\", \"call data address_type rescan prune blockfilter\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n     def do_import(self, timestamp):\n@@ -120,16 +120,22 @@ def check(self, txid=None, amount=None, confirmation_height=None):\n \n \n # List of Variants for each way a key or address could be imported.\n-IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, AddressType, Rescan, (False, True))]\n+IMPORT_VARIANTS = [\n+    v for v in [Variant(*variants) for variants in itertools.product(Call, Data, AddressType, Rescan, (False, True), (False, True))]\n+    if not (v.prune and v.blockfilter)  # filter out incompatible options\n+]\n \n # List of nodes to import keys to. Half the nodes will have pruning disabled,\n # half will have it enabled. Different nodes will be used for imports that are\n # expected to cause rescans, and imports that are not expected to cause\n # rescans, in order to prevent rescans during later imports picking up\n # transactions associated with earlier imports. This makes it easier to keep\n # track of expected balances and transactions.\n-ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n-IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune expect_rescan blockfilter\")\n+IMPORT_NODES = [\n+    n for n in [ImportNode(*fields) for fields in itertools.product((False, True), repeat=3)]\n+    if not (n.prune and n.blockfilter)  # filter out incompatible options\n+]\n \n # Rescans start at the earliest block up to 2 hours before the key timestamp.\n TIMESTAMP_WINDOW = 2 * 60 * 60\n@@ -154,6 +160,8 @@ def setup_network(self):\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 self.extra_args[i] += [\"-prune=1\"]\n+            if import_node.blockfilter:\n+                self.extra_args[i] += [\"-blockfilterindex=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n \n@@ -197,7 +205,7 @@ def run_test(self):\n         for variant in IMPORT_VARIANTS:\n             self.log.info('Run import for variant {}'.format(variant))\n             expect_rescan = variant.rescan == Rescan.yes\n-            variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n+            variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan, variant.blockfilter))]\n             variant.do_import(variant.timestamp)\n             if expect_rescan:\n                 variant.expected_balance = variant.initial_amount"
      }
    ]
  },
  {
    "sha": "fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwZDYxYjNlYWQ0MzhiYmM2Y2JlY2RmMjM3OGI1YjZhMzU5OGMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-22T18:43:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:06:59Z"
      },
      "message": "doc: Fixup txindex->index",
      "tree": {
        "sha": "f1322f33f533d2670105cb60effdf69c0c5ba52f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1322f33f533d2670105cb60effdf69c0c5ba52f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgE+gv/Z62i0p88yPvDlXwK+Y5ffeqg54AbspPay1/cQrhFdxyHcckNV7sW9/F7\nPgkFRjsHoaBLvwX9iCHCEqox7ilRoGqfJtEWp5zZGVYBMgkwV0HgHAh0wfdvsc+A\nKAbwIIZC0bmQiIyFGdQyHoy3UBG1AttidxEaeTX9IzTyeJSTVOD0UA2hoQoePopQ\n+I15JWNxWPQEAcNd3yYFf4wlENjznWHl/QSfNB8VGjrAlQc2JtLY+WdxXuXfAEDs\nNw0K71tPR81arQ6ag1JiAnHG5eJJGRU1dMu8QrX5BxhxnlEeP/vN3gnHu5J9nHSH\nOJom9MFt+DpGxSg4qENb4UlqkAjFhJ0wac13ZdQhdd+k7aLNqf5LNF8VjoAn4hTF\nkYo67QBvrvkr06V+m4tuFSgBJDGvtTVXjPAmN7oVy79Rd0bvVVx0Z9nSN7x+0WU1\nNdCkU4J9rL2tZcEIcblLoQWSeSyyUB5aKoFEBYaenxZO/v3Yg46Dwg05hDwybmUj\nLu6w5jEy\n=dl7z\n-----END PGP SIGNATURE-----",
        "payload": "tree f1322f33f533d2670105cb60effdf69c0c5ba52f\nparent faf7cc8a4275270f3f54dfa9e2cfb6e336e45365\nauthor MarcoFalke <falke.marco@gmail.com> 1555958634 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572959219 -0500\n\ndoc: Fixup txindex->index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf7cc8a4275270f3f54dfa9e2cfb6e336e45365"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f255baaea06a4e899ff89305a19f2183eff75d28",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
        "patch": "@@ -27,10 +27,10 @@ class BaseIndex : public CValidationInterface\n         DB(const fs::path& path, size_t n_cache_size,\n            bool f_memory = false, bool f_wipe = false, bool f_obfuscate = false);\n \n-        /// Read block locator of the chain that the txindex is in sync with.\n+        /// Read block locator of the chain that the index is in sync with.\n         bool ReadBestBlock(CBlockLocator& locator) const;\n \n-        /// Write block locator of the chain that the txindex is in sync with.\n+        /// Write block locator of the chain that the index is in sync with.\n         void WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator);\n     };\n "
      },
      {
        "sha": "4d327164d01441ec6002d1417d71e37a74f4e0e2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
        "patch": "@@ -960,7 +960,7 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow indexes\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\").translated);"
      }
    ]
  },
  {
    "sha": "eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVlMGMxYzY1MDAxNmFlMGMwZWY4YWRjZWFmNDQ2OWFiNjQwOTVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-24T15:22:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:07:00Z"
      },
      "message": "test: Add test/util to test_bitcoin",
      "tree": {
        "sha": "2db414d94f1e9936c556569944083a999a928468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2db414d94f1e9936c556569944083a999a928468"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgakQv/Utz5elHw/TQv+y7CQCXuEv+1JSXNrgwlVxQuWVQ50TjCyX1i3EUgexyW\nk2c5JdOJWeBN63rDlpq6LhOeOm87mtveS+zwf3VVbsGfp25Sj63Vp90qOE+X1dA+\nW84N0EpHr8ZUfxkehXvxgkf9BTISlZ7mfumDwykITwNVfmU2194f7hMEITgArLv9\n/ZN9PQAVKC8y/s+tDSDJ1WlbGGv+ljdOqqYTQDEYdsRw/zk1rWpCi7DHZ6GRljIZ\np8mQPTwbEEuJDSAnPw4K8DAR5GgtjDuvSKewlbofJXnfpvdBsckf2neXGRCkQfpE\nh1Dv3ib1UB/IbrkeBeaclbcFP6kB4ehFb+JOYuPy91z31tEsY7q+FPD+nWZdNTDH\niAxwHiwdRjD3rAp+6IVWA3uV/OlCKzYe6mFkgS/8f5LdT7wqoFHeyFTfvwmjRnqW\nQbXwa1Irukx7yOKSqAXOss5iVOKGm32vs4dPwGCTLc5DA2xJ/Ke+eRNl/5ZYnm6y\nT7t2D0v/\n=SOuH\n-----END PGP SIGNATURE-----",
        "payload": "tree 2db414d94f1e9936c556569944083a999a928468\nparent fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0\nauthor MarcoFalke <falke.marco@gmail.com> 1569338579 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572959220 -0500\n\ntest: Add test/util to test_bitcoin\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeee0c1c650016ae0c0ef8adceaf4469ab64095f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80d61b3ead438bbc6cbecdf2378b5b6a3598c0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c494382f68ab700ab3c665e15ac22c416a552138",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee0c1c650016ae0c0ef8adceaf4469ab64095f/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee0c1c650016ae0c0ef8adceaf4469ab64095f/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
        "patch": "@@ -16,6 +16,7 @@\n     <ClCompile Include=\"..\\..\\src\\test\\lib\\*.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\main.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\test\\util.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_fixture.cpp\" />\n   </ItemGroup>\n   <ItemGroup>"
      },
      {
        "sha": "3d5b843d5de73a62efcc3dbd1f76776da0057909",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee0c1c650016ae0c0ef8adceaf4469ab64095f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee0c1c650016ae0c0ef8adceaf4469ab64095f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
        "patch": "@@ -61,6 +61,8 @@ BITCOIN_TEST_SUITE = \\\n   test/lib/transaction_utils.cpp \\\n   test/lib/transaction_utils.h \\\n   test/main.cpp \\\n+  test/util.cpp \\\n+  test/util.h \\\n   test/setup_common.h \\\n   test/setup_common.cpp\n "
      }
    ]
  },
  {
    "sha": "fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk5OTIxODJjNDMxZTUyMGRkOGEyZjhjNTEyMzljZmJmZjlmN2M0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-24T15:20:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:16:42Z"
      },
      "message": "test: Split MineBlock into two parts",
      "tree": {
        "sha": "e05b20d80094566ae131164ce8861d307a67bd25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e05b20d80094566ae131164ce8861d307a67bd25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjFygv/TD33S4LHZVCALNBChGSG3Au+R48B8nRPp3M0+W7x8kf7+zNYBtKgJl1O\nExpDpv+/BDcRcPe+Z9yi64ODy+INHS0GI6G+aI7GDb2rRJ2aMmR03HwxWzIhWodD\nMqMBYLhSRe38KSlOMVJJyRgx8v0LNiVTL5gVw7Y1LHcE2E5sCNsmSLS7lJ/gVLQh\nnEz30Y6Xtkqhr8tqqIOq19Djl1u6ZGAsOWy5rkf1SuGqpHKhdMNOm7+uXdlv/25F\nQR3xYy8eISTJmJyWp4ueR+P5eB+K7ofNeeEeCeLHch5UMeWMGzmFS/QQdp0YIdL3\nkChWJBQO2ElVBS+MEDU7dUlk47N/gzdUsPEAy/RjSC4Ep00+BARdKRhjPzF/fGrv\niqW0Rt9+SpXAf6FPENx/+ISQ9s6TtvRzj4Zr09k1I92Y8D4wK5UEJ+tgArQMkB0+\n00yjQmgJrNZsDikWBueyUZ2Tnw9Ir1HGTxPsSljpZgV294Mdlwj5rY0Lcax8OMDt\nf/mJleZt\n=8L94\n-----END PGP SIGNATURE-----",
        "payload": "tree e05b20d80094566ae131164ce8861d307a67bd25\nparent eeee0c1c650016ae0c0ef8adceaf4469ab64095f\nauthor MarcoFalke <falke.marco@gmail.com> 1569338410 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572959802 -0500\n\ntest: Split MineBlock into two parts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9992182c431e520dd8a2f8c51239cfbff9f7c4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeee0c1c650016ae0c0ef8adceaf4469ab64095f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeee0c1c650016ae0c0ef8adceaf4469ab64095f"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "724045c91f34a1050af530f3167e9e08282dc61b",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9992182c431e520dd8a2f8c51239cfbff9f7c4/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9992182c431e520dd8a2f8c51239cfbff9f7c4/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
        "patch": "@@ -57,6 +57,22 @@ CTxIn generatetoaddress(const std::string& address)\n CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n {\n     auto block = PrepareBlock(coinbase_scriptPubKey);\n+    return *MineBlock(block);\n+}\n+\n+Optional<CTxIn> MineBlock(std::shared_ptr<CBlock>& block)\n+{\n+    const auto idx = GetWitnessCommitmentIndex(*block);\n+    if (idx != -1) {\n+        // Refresh witness commitment, in case a tx has been added or modified\n+        CMutableTransaction tx_cb{*block->vtx[0]};\n+        tx_cb.vout.erase(tx_cb.vout.begin() + idx);\n+        block->vtx[0] = MakeTransactionRef(std::move(tx_cb));\n+        LOCK(cs_main);\n+        GenerateCoinbaseCommitment(*block, ChainActive().Tip()->pprev, Params().GetConsensus());\n+    }\n+    // Refresh merkle root, in case a tx has been added or modified\n+    block->hashMerkleRoot = BlockMerkleRoot(*block);\n \n     while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n         ++block->nNonce;\n@@ -66,6 +82,8 @@ CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n     bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n     assert(processed);\n \n+    // TODO: Return nothing if the block was invalid\n+\n     return CTxIn{block->vtx[0]->GetHash(), 0};\n }\n "
      },
      {
        "sha": "bada558f35d230c9d6d3158e2a20c57b93271c16",
        "filename": "src/test/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9992182c431e520dd8a2f8c51239cfbff9f7c4/src/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9992182c431e520dd8a2f8c51239cfbff9f7c4/src/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.h?ref=fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
        "patch": "@@ -8,6 +8,8 @@\n #include <memory>\n #include <string>\n \n+#include <optional.h>\n+\n class CBlock;\n class CScript;\n class CTxIn;\n@@ -19,8 +21,10 @@ extern const std::string ADDRESS_BCRT1_UNSPENDABLE;\n \n // Lower-level utils //\n \n-/** Returns the generated coin */\n+/** Returns the generated coin (output at index 0 in the coinbase tx) */\n CTxIn MineBlock(const CScript& coinbase_scriptPubKey);\n+/** Returns the generated coins (output at index 0 in the coinbase tx), or nothing if the block was invalid */\n+Optional<CTxIn> MineBlock(std::shared_ptr<CBlock>& block);\n /** Prepare a block to be mined */\n std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey);\n "
      }
    ]
  },
  {
    "sha": "fa99419124402762a32b956e90f992add15436db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk5NDE5MTI0NDAyNzYyYTMyYjk1NmU5MGY5OTJhZGQxNTQzNmRi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-26T12:31:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:24:16Z"
      },
      "message": "wallet: Add method to get element set for blockfilters",
      "tree": {
        "sha": "37e302c0584319e1e0933aa26974d351aa677690",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37e302c0584319e1e0933aa26974d351aa677690"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa99419124402762a32b956e90f992add15436db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiz4gwAmhLcZvwwTATj7gCEBayXuvyCnxc4ScDoJ0XCU+J/8tf7OSNyHYXUkehG\nA9+vvlKXbiJBg0cqwrXhVhrQyIoHBuy3+qxWWr0SwGN1JClBKYq3QfknWW1fv/2d\nNp8xSHcjrs65Xp4ba2n2jjd3mVggwansvWuTNhkJ197vNK8cTTLUI5TodNjsR6xx\nTaqZX+TgWICEu/2APkGlW2i031Who8kguU3AsqHWMiRj68zUDWnJVa42GzCEn66k\nj1Ss+LgWVTpFieJPjannzm/6MfiGypSCFnOCCZy8geKTqTSuFVZR0WeQWx8uG937\nPVzkSUDRKaLG5/Ued2/em1SfCMnT08LQJxDVIEnuOKZSU2Nck+FG8OZK35yuQFof\nnKZ0URnqwngMae/ILRm1v3TbZr/tfOmIfVjhgdzam+m2NDlWxTQ9gJaeuPJrVfgr\nYaRpl3uw6mac4Uz2o4fQGWqSbnwA0shhk3KX3Jvx30I2Z8h/kvRyc052QXleyD5B\nPIRAokHo\n=/jTw\n-----END PGP SIGNATURE-----",
        "payload": "tree 37e302c0584319e1e0933aa26974d351aa677690\nparent fa9992182c431e520dd8a2f8c51239cfbff9f7c4\nauthor MarcoFalke <falke.marco@gmail.com> 1569501093 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572960256 -0500\n\nwallet: Add method to get element set for blockfilters\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa99419124402762a32b956e90f992add15436db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa99419124402762a32b956e90f992add15436db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa99419124402762a32b956e90f992add15436db/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9992182c431e520dd8a2f8c51239cfbff9f7c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9992182c431e520dd8a2f8c51239cfbff9f7c4"
      }
    ],
    "stats": {
      "total": 245,
      "additions": 244,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cd18f20b5e1dfb7f3c79668f3194b70fa7904a9a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa99419124402762a32b956e90f992add15436db/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa99419124402762a32b956e90f992add15436db/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa99419124402762a32b956e90f992add15436db",
        "patch": "@@ -176,6 +176,7 @@ if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/db_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n+  wallet/test/wallet_blockfilter_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\\n   wallet/test/coinselector_tests.cpp \\"
      },
      {
        "sha": "d868b8404b40b666881107203ac692a9b9a7463a",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa99419124402762a32b956e90f992add15436db/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa99419124402762a32b956e90f992add15436db/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=fa99419124402762a32b956e90f992add15436db",
        "patch": "@@ -15,7 +15,7 @@\n  * blocks by height. An index is constructed for each supported filter type with its own database\n  * (ie. filter data for different types are stored in separate databases).\n  *\n- * This index is used to serve BIP 157 net requests.\n+ * This index can be used to serve BIP 157 net requests or to rescan the wallet more efficiently.\n  */\n class BlockFilterIndex final : public BaseIndex\n {"
      },
      {
        "sha": "61dc1e8318b1c16811f58d6b5fa464220f5ff67a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa99419124402762a32b956e90f992add15436db/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa99419124402762a32b956e90f992add15436db/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fa99419124402762a32b956e90f992add15436db",
        "patch": "@@ -820,6 +820,31 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n \n+GCSFilter::ElementSet LegacyScriptPubKeyMan::GetAllRelevantScriptPubKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    GCSFilter::ElementSet ret;\n+    for (const auto& k : mapKeys) {\n+        const CPubKey& pk = k.second.GetPubKey();\n+        const CScript& p2pk = GetScriptForRawPubKey(pk);\n+        ret.emplace(p2pk.begin(), p2pk.end());\n+        const CScript& p2pkh = GetScriptForDestination(PKHash{pk});\n+        ret.emplace(p2pkh.begin(), p2pkh.end());\n+    }\n+    for (const auto& bs : mapScripts) {\n+        // The bare script could be P2WPKH, P2WSH, or a redeem script\n+        const CScript& bare = bs.second;\n+        // Make a P2SH version out of it\n+        const CScript& wrapped = GetScriptForDestination(ScriptHash{bs.first});\n+        ret.emplace(bare.begin(), bare.end());\n+        ret.emplace(wrapped.begin(), wrapped.end());\n+    }\n+    for (const auto& i : setWatchOnly) {\n+        ret.emplace(i.begin(), i.end());\n+    }\n+    return ret;\n+}\n+\n CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));"
      },
      {
        "sha": "b2855a99500cc418ab2cbe2ea9643626790e5f23",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa99419124402762a32b956e90f992add15436db/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa99419124402762a32b956e90f992add15436db/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fa99419124402762a32b956e90f992add15436db",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n #define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n \n+#include <blockfilter.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <wallet/crypter.h>\n@@ -346,6 +347,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Fetches a pubkey from mapWatchKeys if it exists there\n     bool GetWatchPubKey(const CKeyID &address, CPubKey &pubkey_out) const;\n \n+    /** Get all bare scripts, p2sh destinations of redeem scripts and watched scripts to a BIP 157 set */\n+    GCSFilter::ElementSet GetAllRelevantScriptPubKeys() const;\n+\n     /* SigningProvider overrides */\n     bool HaveKey(const CKeyID &address) const override;\n     bool GetKey(const CKeyID &address, CKey& keyOut) const override;"
      },
      {
        "sha": "0863321fb9572f010d59cc5d4f7c7650ab1c2ef4",
        "filename": "src/wallet/test/wallet_blockfilter_tests.cpp",
        "status": "added",
        "additions": 213,
        "deletions": 0,
        "changes": 213,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa99419124402762a32b956e90f992add15436db/src/wallet/test/wallet_blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa99419124402762a32b956e90f992add15436db/src/wallet/test/wallet_blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_blockfilter_tests.cpp?ref=fa99419124402762a32b956e90f992add15436db",
        "patch": "@@ -0,0 +1,213 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/rawtransaction_util.h>\n+#include <test/lib/blockfilter.h>\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+#include <univalue.h>\n+#include <validation.h>\n+#include <wallet/wallet.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+void SignTx(const CWallet& keystore, CMutableTransaction& mtx)\n+{\n+    // Fetch previous transactions (inputs):\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : mtx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    keystore.chain().findCoins(coins);\n+\n+    // sign tx\n+    SignTransaction(mtx, keystore.GetLegacyScriptPubKeyMan(), coins, UniValue{});\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(wallet_blockfilter_tests, RegTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(element_set_matches)\n+{\n+    // Generate an utxo to be used in the test\n+    auto utxo = MineBlock(OP_TRUE);\n+    for (int num_blocks{COINBASE_MATURITY}; num_blocks > 0; --num_blocks) {\n+        MineBlock(OP_FALSE);\n+    }\n+\n+    // Helper to assert a receive and send matches\n+    auto CheckFilterMatches = [&utxo](const CScript& to_scriptPubKey, const CWallet& wallet) {\n+        // the amount we send around\n+        constexpr CAmount PING_PONG_AMOUNT{333};\n+        // receive\n+        auto tx_receive = CMutableTransaction{};\n+        tx_receive.vin.push_back(utxo);\n+        tx_receive.vout.emplace_back(PING_PONG_AMOUNT, to_scriptPubKey);\n+        {\n+            auto block = PrepareBlock(OP_FALSE);\n+            block->vtx.push_back(MakeTransactionRef(tx_receive));\n+            BOOST_REQUIRE(MineBlock(block));\n+\n+            SyncWithValidationInterfaceQueue();\n+            BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_trusted, PING_PONG_AMOUNT);\n+\n+            BlockFilter block_filter;\n+            BOOST_REQUIRE(ComputeFilter(BlockFilterType::BASIC, ChainActive().Tip(), block_filter));\n+            BOOST_CHECK(block_filter.GetFilter().MatchAny(wallet.GetLegacyScriptPubKeyMan()->GetAllRelevantScriptPubKeys()));\n+        }\n+\n+        // send\n+        {\n+            auto block = PrepareBlock(OP_FALSE);\n+            auto tx_send = CMutableTransaction{};\n+            tx_send.vin.emplace_back(tx_receive.GetHash(), 0);\n+            tx_send.vout.emplace_back(PING_PONG_AMOUNT, OP_TRUE);\n+            SignTx(wallet, tx_send);\n+            block->vtx.push_back(MakeTransactionRef(tx_send));\n+            utxo = {tx_send.GetHash(), 0};\n+            BOOST_REQUIRE(MineBlock(block));\n+\n+            SyncWithValidationInterfaceQueue();\n+            BOOST_CHECK_EQUAL(wallet.GetBalance().m_mine_trusted, 0);\n+\n+            BlockFilter block_filter;\n+            BOOST_REQUIRE(ComputeFilter(BlockFilterType::BASIC, ChainActive().Tip(), block_filter));\n+            BOOST_CHECK(block_filter.GetFilter().MatchAny(wallet.GetLegacyScriptPubKeyMan()->GetAllRelevantScriptPubKeys()));\n+        }\n+    };\n+\n+    NodeContext node;\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n+    auto FreshWallet = [&chain]() {\n+        auto ret = MakeUnique<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        ret->handleNotifications(); // To update the balance\n+        return ret;\n+    };\n+\n+    // Run multiple times, because the element set could happen to match due to the false positive rate\n+    for (int num_runs{10}; num_runs > 0; --num_runs) {\n+        CKey keys[2];\n+        for (int i = 0; i < 2; i++) {\n+            keys[i].MakeNewKey(true);\n+        }\n+        CKey uncompressedKey;\n+        uncompressedKey.MakeNewKey(false);\n+\n+        BOOST_TEST_MESSAGE(\"P2PK compressed\");\n+        {\n+            auto keystore = FreshWallet();\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+            }\n+            const CScript scriptPubKey = GetScriptForRawPubKey(keys[0].GetPubKey());\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2PK uncompressed\");\n+        {\n+            auto keystore = FreshWallet();\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+            }\n+            const CScript scriptPubKey = GetScriptForRawPubKey(uncompressedKey.GetPubKey());\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2PKH compressed\");\n+        {\n+            auto keystore = FreshWallet();\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+            }\n+            const CScript scriptPubKey = GetScriptForDestination(PKHash(keys[0].GetPubKey()));\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2PKH uncompressed\");\n+        {\n+            auto keystore = FreshWallet();\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+            }\n+            const CScript scriptPubKey = GetScriptForDestination(PKHash(uncompressedKey.GetPubKey()));\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2SH\");\n+        {\n+            auto keystore = FreshWallet();\n+            const CScript redeemScript = GetScriptForDestination(PKHash(keys[0].GetPubKey()));\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+            }\n+            const CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2WPKH compressed\");\n+        {\n+            auto keystore = FreshWallet();\n+            const CScript scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(PKHash(keys[0].GetPubKey())));\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+            }\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2SH multisig\");\n+        {\n+            auto keystore = FreshWallet();\n+            const CScript redeemScript = GetScriptForMultisig(2, {uncompressedKey.GetPubKey(), keys[1].GetPubKey()});\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(uncompressedKey));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+            }\n+            const CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2WSH multisig with compressed keys\");\n+        {\n+            auto keystore = FreshWallet();\n+            const CScript witnessScript = GetScriptForMultisig(2, {keys[0].GetPubKey(), keys[1].GetPubKey()});\n+            const CScript scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(witnessScript));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(scriptPubKey));\n+            }\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+\n+        BOOST_TEST_MESSAGE(\"P2WSH multisig wrapped in P2SH\");\n+        {\n+            auto keystore = FreshWallet();\n+            const CScript witnessScript = GetScriptForMultisig(2, {keys[0].GetPubKey(), keys[1].GetPubKey()});\n+            const CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n+            {\n+                LOCK(keystore->cs_wallet);\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(redeemScript));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddCScript(witnessScript));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[0]));\n+                BOOST_CHECK(keystore->GetLegacyScriptPubKeyMan()->AddKey(keys[1]));\n+            }\n+            const CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n+            CheckFilterMatches(scriptPubKey, *keystore);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWVlN2I2NTgxZmY1ZTlmYTc3NWUxZTljYmU3NDkxYjYwZjBlNzNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-26T12:26:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-11-05T13:40:09Z"
      },
      "message": "wallet: Rescan with blockfilters",
      "tree": {
        "sha": "67ca8c7d544ac3b5e96adddd4c502fe0e2875521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67ca8c7d544ac3b5e96adddd4c502fe0e2875521"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgvZwwAsVl51YftJHBB4BvXxyId9wn8T6BLso0Qjdo7YUpa47WUN5//2b7tT/xv\n4FkQWXjshvGkE7GRNBY+mWK/NiaBRFoXsurDYgGR6GcOuF6Qkb1IWcoi9wBSvlLg\nS6uXykCqGTMFgMFB+BplwDW5vLGVPi7Uu6kNPOAXRalmf8nX+X1bp1SFh2yyStMH\nrSENOX9iZd4DtWvTKP6yhPwklSwqEyz6wwf5IAhTs1dCTctPAJ3lHIKHKsHICiaF\ng/SUQLFglLM9bdS9r+qcPUF8vD0sbpJ95h9sXA+o51Ema7n7+NmBdsvWk2BieXv9\nYaTQRRACrLg3bPsFNVjPJmzRDxMc17CKRrEwl9e4/s8db5UiZyBK0Yn4ZYHeYRty\n+uDzq2TiaCBpP37Cf4q5DrGMT4syP41lJJsz69wBP+i5C5RYS4BdewQCqInH5NR9\nieh3RN49xBptEaxRUbR2r9GJLYdmxOPloNJrRYoPRYUlSGYJjPcmbeS6EbWLdbSs\nsei6tUvf\n=o6yr\n-----END PGP SIGNATURE-----",
        "payload": "tree 67ca8c7d544ac3b5e96adddd4c502fe0e2875521\nparent fa99419124402762a32b956e90f992add15436db\nauthor MarcoFalke <falke.marco@gmail.com> 1569500785 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1572961209 -0500\n\nwallet: Rescan with blockfilters\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa99419124402762a32b956e90f992add15436db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa99419124402762a32b956e90f992add15436db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa99419124402762a32b956e90f992add15436db"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 36,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c727a43e37c5e128b2e27826cb8765f0bf4f1dfb",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <chain.h>\n #include <chainparams.h>\n+#include <index/blockfilterindex.h>\n #include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n@@ -248,6 +249,20 @@ class ChainImpl : public Chain\n         // LockImpl to Lock pointer\n         return std::move(result);\n     }\n+    Optional<bool> filterMatchesAny(const uint256& hash, const GCSFilter::ElementSet& filter_set) override\n+    {\n+        const BlockFilterIndex* block_filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!block_filter_index) return {};\n+        BlockFilter filter;\n+        const CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            index = LookupBlockIndex(hash);\n+            if (!index) return {};\n+        }\n+        if (!block_filter_index->LookupFilter(index, filter)) return {};\n+        return filter.GetFilter().MatchAny(filter_set);\n+    }\n     bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n     {\n         CBlockIndex* index;"
      },
      {
        "sha": "4c20231740e7d9ba7c368fa8ab65a3489c9857d5",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_INTERFACES_CHAIN_H\n #define BITCOIN_INTERFACES_CHAIN_H\n \n+#include <blockfilter.h>            // For GCSFilter::ElementSet\n #include <optional.h>               // For Optional and nullopt\n #include <primitives/transaction.h> // For CTransactionRef\n \n@@ -129,6 +130,10 @@ class Chain\n     //! unlocked when the returned interface is freed.\n     virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n \n+    //! Returns whether any of the elements match the block via a BIP 157 block filter or nothing if the block filter\n+    //! for this block could be found.\n+    virtual Optional<bool> filterMatchesAny(const uint256& hash, const GCSFilter::ElementSet& filter_set) = 0;\n+\n     //! Return whether node has the block and optionally return block metadata\n     //! or contents.\n     //!"
      },
      {
        "sha": "b464001cc79e72c24627ca2c1f45d0c9ad3ec070",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=faee7b6581ff5e9fa775e1e9cbe7491b60f0e73b",
        "patch": "@@ -1574,14 +1574,14 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n-\n     assert(reserver.isReserved());\n-\n-    uint256 block_hash = start_block;\n     ScanResult result;\n \n     WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n+    uint256 block_hash = start_block;\n+    const auto filter_set = GetLegacyScriptPubKeyMan()->GetAllRelevantScriptPubKeys();\n+    Optional<bool> filter_matches{true}; // Assume the filter index exists\n     fAbortRescan = false;\n     ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n     uint256 tip_hash;\n@@ -1606,11 +1606,22 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n         }\n         if (GetTime() >= nNow + 60) {\n             nNow = GetTime();\n-            WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n+            const std::string using_blockfilters{filter_matches /* exists */ ? \" via blockfilters\" : \"\"};\n+            WalletLogPrintf(\"Still rescanning%s. At block %d. Progress=%f\\n\",\n+                using_blockfilters, *block_height, progress_current);\n         }\n \n+        // Only query the filter index if it exists\n+        if (filter_matches /* exists */) filter_matches = chain().filterMatchesAny(block_hash, filter_set);\n+\n         CBlock block;\n-        if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+        if (filter_matches && !*filter_matches) {\n+            // Filter did not match, pretend we scanned this block successfully\n+            result.last_scanned_block = block_hash;\n+            result.last_scanned_height = *block_height;\n+        }\n+        // Only read block from disk when filter matched\n+        else if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n             auto locked_chain = chain().lock();\n             LOCK(cs_wallet);\n             if (!locked_chain->getBlockHeight(block_hash)) {"
      }
    ]
  }
]