[
  {
    "sha": "d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWNjYTEyOWI0YjViOGU0ODMwZTQ0MmViYWVlNTVkZDA2NjBiNDhh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-10T08:42:11Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-04T15:32:38Z"
      },
      "message": "refactor: Use bilingual_str::empty()",
      "tree": {
        "sha": "e1f7594e0d4702f0ef2f49168dd3124910503af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1f7594e0d4702f0ef2f49168dd3124910503af4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7ZFCMACgkQQQEIES5+\nqB8UMQ//ZwKWDGeyDaiRFj9LJICVYtJeVfqO3WKHs3WlTStu0fvCbaCfCPSbvRk6\nYgz/c+Q2XNdM/19y28tPcHiJWk2XG5e1TIphCy0Hw+rffQ5EzNV6Pe2nq/QR0mkS\nxLqjyrjyQ0uOPmrsKYKn5U5jGXNwtdulKeEownBhZw0uo84zOOMh/sVrdSgsah5h\nvlSrPgWWky8RJREDtpKKmp1IdDbr9pe9USGK3RAGQkH9kvA9oe16VHf0vKgCvd1Z\nkUrPnmYYJqKeo6FiZo17PIQwyYXhGvKfL2lmxeM1cRAz+v3TDRh0K6232MWAveRo\nv9CxVgtpIIw4hxJTSSBTn+M3FaHio2jsK3JkN7/Ab77YrAjCiK4JNe+Tw+kqcVwn\n3vEKdwPeiIrxu+AxA5dGEDVZjYJwZHV/J/X8zXmNOLkQgAHPQKdO7SRMwNCYqRbf\nFmj9sVRDCSbD15O6Itk0li93au2kBVqTkhQIIS1Dq6Mpkrm2KUpNiscMT4Zq4KpE\nIjhK+QK5lQ6dvZE8jUn5VR03VvbOmUHvlpV6z4A5NmB9KrxVDsJQg4vNAr72/N+V\nJ3maVFKp/yHRmPpVxF+cXwE9PROxL8AWazvbhOnjagQ6bZEk0KvX4soq2qt8OAyk\nfrMCq/YHlvz0AYMqMjmfyJPNIGEx5i6jYv+kCEujXXlhj3YOIXk=\n=+4sV\n-----END PGP SIGNATURE-----",
        "payload": "tree e1f7594e0d4702f0ef2f49168dd3124910503af4\nparent 365f1082e1e6ff1c2f53552c3871223e87a9d43f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589100131 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591284758 +0300\n\nrefactor: Use bilingual_str::empty()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cca129b4b5b8e4830e442ebaee55dd0660b48a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "365f1082e1e6ff1c2f53552c3871223e87a9d43f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/365f1082e1e6ff1c2f53552c3871223e87a9d43f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/365f1082e1e6ff1c2f53552c3871223e87a9d43f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ad20da5b360a36ccde786a0e7c59ab5deac47eb2",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1cca129b4b5b8e4830e442ebaee55dd0660b48a/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1cca129b4b5b8e4830e442ebaee55dd0660b48a/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
        "patch": "@@ -245,7 +245,7 @@ void CreateWalletActivity::finish()\n {\n     destroyProgressDialog();\n \n-    if (!m_error_message.original.empty()) {\n+    if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n         QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, Untranslated(\"\\n\")).translated));\n@@ -286,7 +286,7 @@ void OpenWalletActivity::finish()\n {\n     destroyProgressDialog();\n \n-    if (!m_error_message.original.empty()) {\n+    if (!m_error_message.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n         QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, Untranslated(\"\\n\")).translated));"
      }
    ]
  },
  {
    "sha": "083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODNkYWY3ZmJhZjAyZGU2MWY4ZDE5N2VmNmE4ZGY5OGMxYTU3Zjdi",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-10T08:52:02Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-04T15:32:51Z"
      },
      "message": "Pass bilingual_str argument to AbortNode()",
      "tree": {
        "sha": "96302fa144da74ad6fbcc1d1ddb6602a45fec304",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96302fa144da74ad6fbcc1d1ddb6602a45fec304"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7ZFCMACgkQQQEIES5+\nqB8qlRAApFRdikFksGMP0g3sKJQPKHH5MeDpg2tfsLolLbX2uUImieELVcjXkf4m\nj5H4CzQWjBJjzPG6kVpDZcSAgMxwhKzdR+qxS9Tr/g5DaqeOnKgWGeyjzTcnVCdS\nH+lC0AZ6zCX52sU6J8VxncZf9Ff4L2VdSLGbKEOMvKJx7sjgsJbDpYMm3WDnEWHU\ngiPfOrAbwmrlOdGWFvBXXRrFE2bF9FAeAVKz7/YQrWar4zqRkYTpp3ja3pELOm5m\n3UJFhHQBnoqqc0OwyZamZuG/cEGZThI1mG6QR5rb/VJ3zcka1IDrR8BlRDD/bGri\ndXYS/BBziae8xN1hUSFxnFCLcC5Ugf116UYsmn5TJ7co0vqu6Hw2cU9GQnrC7AbV\n/qKJlnx03tglkoQYLsYAdiE+35wwVMQTEENKW1T9ht+nU/LRrHJ7Y1vgp6k3qjrx\nS2Zz81nAkVUZjWS7jX//yldZkDKjyeEhhpsJaLrw1ixNRnh9nIgOXGt6Dfxek4Tq\nviYPQkuTmfI/1FbGr5ssRLODvkbjSl8uOwZTnCIj4GqFhLtwfZeJctQACYg/CLIX\n5NeDE0F5UDK3t92hXwtdaAJfbLojuPdllyqE2Ll/wPZp0xekvIDxMZzAB0amx7e8\nQZRvDiDWSSJOizLiV6sWFXGHXbF05U1DCj3EYhmiN2jSIMiH5J4=\n=NZoC\n-----END PGP SIGNATURE-----",
        "payload": "tree 96302fa144da74ad6fbcc1d1ddb6602a45fec304\nparent d1cca129b4b5b8e4830e442ebaee55dd0660b48a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589100722 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591284771 +0300\n\nPass bilingual_str argument to AbortNode()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cca129b4b5b8e4830e442ebaee55dd0660b48a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1cca129b4b5b8e4830e442ebaee55dd0660b48a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "efe46eb784224609b93e437d9b472ec58be4e435",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
        "patch": "@@ -1655,21 +1655,20 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n }\n \n /** Abort with a message */\n-// TODO: AbortNode() should take bilingual_str userMessage parameter.\n-static bool AbortNode(const std::string& strMessage, const std::string& userMessage = \"\", unsigned int prefix = 0)\n+static bool AbortNode(const std::string& strMessage, const bilingual_str& userMessage = bilingual_str(), unsigned int prefix = 0)\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n     if (!userMessage.empty()) {\n-        uiInterface.ThreadSafeMessageBox(Untranslated(userMessage), \"\", CClientUIInterface::MSG_ERROR | prefix);\n+        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR | prefix);\n     } else {\n         uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n     }\n     StartShutdown();\n     return false;\n }\n \n-static bool AbortNode(BlockValidationState& state, const std::string& strMessage, const std::string& userMessage = \"\", unsigned int prefix = 0)\n+static bool AbortNode(BlockValidationState& state, const std::string& strMessage, const bilingual_str& userMessage = bilingual_str(), unsigned int prefix = 0)\n {\n     AbortNode(strMessage, userMessage, prefix);\n     return state.Error(strMessage);\n@@ -2336,7 +2335,7 @@ bool CChainState::FlushStateToDisk(\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n             if (!CheckDiskSpace(GetBlocksDir())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n             }\n             {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"write block and undo data to disk\", BCLog::BENCH);\n@@ -2384,7 +2383,7 @@ bool CChainState::FlushStateToDisk(\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n             if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * CoinsTip().GetCacheSize())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n             }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!CoinsTip().Flush())\n@@ -3291,7 +3290,7 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n         bool out_of_space;\n         size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n         if (out_of_space) {\n-            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n+            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n         }\n         if (bytes_allocated != 0 && fPruneMode) {\n             fCheckForPruning = true;\n@@ -3315,7 +3314,7 @@ static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos\n     bool out_of_space;\n     size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n     if (out_of_space) {\n-        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\").translated, CClientUIInterface::MSG_NOPREFIX);\n+        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n     }\n     if (bytes_allocated != 0 && fPruneMode) {\n         fCheckForPruning = true;"
      }
    ]
  },
  {
    "sha": "d924f2a596c8f37deb2dd94069c578244823c31f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTI0ZjJhNTk2YzhmMzdkZWIyZGQ5NDA2OWM1NzgyNDQ4MjNjMzFm",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-05-10T09:43:30Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-04T15:32:52Z"
      },
      "message": "Drop MSG_NOPREFIX flag\n\nSince bilingual_str type is fully supported, the MSG_NOPREFIX flag is no\nlonger needed.",
      "tree": {
        "sha": "cff3bcb4ad2cdc8dddbc29f7d0353d4fbe3a6cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cff3bcb4ad2cdc8dddbc29f7d0353d4fbe3a6cd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d924f2a596c8f37deb2dd94069c578244823c31f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7ZFCQACgkQQQEIES5+\nqB+U7BAAuQ+OEMFhf3WFggZ3GLomWqSEsJXs8AHPcsxRdUsDzgHY1Ku9jptYecP8\nKyq5ILiGp3dBUyL3FLsBQ1rGL816xx21T9g5D7rJkfyJMv38NhH0X+qfKCUSZ9L0\nbGhJEmzrbcd/Fg2WwW8hbyx/UipSP7ASOsepKvnyK9zFlrjQc5QAqpisqhRKkJOg\nISKmf8BFgSFbvk28QQM8YF8rYIJ9vFGstREc9/l3t/mHpAr/wU/5yewCoTlGyQvr\nIk1oNc5o76WO+Df5UBdfliBkBLcTBgkjklIhCxiI17b5EGhLjm3k9gM3PFSAriKe\nQdBRmEeA9/O3Z2WMpbWIx9q5XQJ/SS+MQZ4LARej6ZZjk8bRT04bUq4yWXPyAUbp\nttDJT1zKp23qL6MvAyC73L/UgkUy200mEmWbScbqc1HOtrlW+1ded/OqnAS2u3oA\nf9YIAhz+fbQqx+e6+WIIGwhwiA9aRgPff92uw6q78rRlVZxIICa0czjly8UyG3N1\nADWpOexf6ESjEaL97ChPrqIsG1HeuKt12UCfD37YNYPmbxsvzYTk5l16gSYws15E\nmkeEB0uxj5KgnVaec/AF2InYHS7fy4uuJa5r5m95iBTohdmssldu7o6bQQKl4e7w\nxEhqPpd9zRcCv8LeW0P0qyPOSxStOXxZMkgzD3l920eVHYqMbtg=\n=k9Tb\n-----END PGP SIGNATURE-----",
        "payload": "tree cff3bcb4ad2cdc8dddbc29f7d0353d4fbe3a6cd7\nparent 083daf7fbaf02de61f8d197ef6a8df98c1a57f7b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1589103810 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591284772 +0300\n\nDrop MSG_NOPREFIX flag\n\nSince bilingual_str type is fully supported, the MSG_NOPREFIX flag is no\nlonger needed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d924f2a596c8f37deb2dd94069c578244823c31f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d924f2a596c8f37deb2dd94069c578244823c31f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d924f2a596c8f37deb2dd94069c578244823c31f/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/083daf7fbaf02de61f8d197ef6a8df98c1a57f7b"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 23,
      "deletions": 33
    },
    "files": [
      {
        "sha": "821d10e3bcf1a31ece8904e8665022b47531b908",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d924f2a596c8f37deb2dd94069c578244823c31f/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d924f2a596c8f37deb2dd94069c578244823c31f/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=d924f2a596c8f37deb2dd94069c578244823c31f",
        "patch": "@@ -23,24 +23,20 @@ bool noui_ThreadSafeMessageBox(const bilingual_str& message, const std::string&\n {\n     bool fSecure = style & CClientUIInterface::SECURE;\n     style &= ~CClientUIInterface::SECURE;\n-    bool prefix = !(style & CClientUIInterface::MSG_NOPREFIX);\n-    style &= ~CClientUIInterface::MSG_NOPREFIX;\n \n     std::string strCaption;\n-    if (prefix) {\n-        switch (style) {\n-        case CClientUIInterface::MSG_ERROR:\n-            strCaption = \"Error: \";\n-            break;\n-        case CClientUIInterface::MSG_WARNING:\n-            strCaption = \"Warning: \";\n-            break;\n-        case CClientUIInterface::MSG_INFORMATION:\n-            strCaption = \"Information: \";\n-            break;\n-        default:\n-            strCaption = caption + \": \"; // Use supplied caption (can be empty)\n-        }\n+    switch (style) {\n+    case CClientUIInterface::MSG_ERROR:\n+        strCaption = \"Error: \";\n+        break;\n+    case CClientUIInterface::MSG_WARNING:\n+        strCaption = \"Warning: \";\n+        break;\n+    case CClientUIInterface::MSG_INFORMATION:\n+        strCaption = \"Information: \";\n+        break;\n+    default:\n+        strCaption = caption + \": \"; // Use supplied caption (can be empty)\n     }\n \n     if (!fSecure) {"
      },
      {
        "sha": "8a2261336f242e81319aa290fb6bd34140a93f70",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d924f2a596c8f37deb2dd94069c578244823c31f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d924f2a596c8f37deb2dd94069c578244823c31f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d924f2a596c8f37deb2dd94069c578244823c31f",
        "patch": "@@ -1062,21 +1062,18 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n     int nMBoxIcon = QMessageBox::Information;\n     int nNotifyIcon = Notificator::Information;\n \n-    bool prefix = !(style & CClientUIInterface::MSG_NOPREFIX);\n-    style &= ~CClientUIInterface::MSG_NOPREFIX;\n-\n     QString msgType;\n     if (!title.isEmpty()) {\n         msgType = title;\n     } else {\n         switch (style) {\n         case CClientUIInterface::MSG_ERROR:\n             msgType = tr(\"Error\");\n-            if (prefix) message = tr(\"Error: %1\").arg(message);\n+            message = tr(\"Error: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_WARNING:\n             msgType = tr(\"Warning\");\n-            if (prefix) message = tr(\"Warning: %1\").arg(message);\n+            message = tr(\"Warning: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_INFORMATION:\n             msgType = tr(\"Information\");"
      },
      {
        "sha": "9f70d7b35c064e85b1fbcc77e781d930363aa50b",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d924f2a596c8f37deb2dd94069c578244823c31f/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d924f2a596c8f37deb2dd94069c578244823c31f/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=d924f2a596c8f37deb2dd94069c578244823c31f",
        "patch": "@@ -67,9 +67,6 @@ class CClientUIInterface\n         /** Force blocking, modal message box dialog (not just OS notification) */\n         MODAL               = 0x10000000U,\n \n-        /** Do not prepend error/warning prefix */\n-        MSG_NOPREFIX        = 0x20000000U,\n-\n         /** Do not print contents of message to debug log */\n         SECURE              = 0x40000000U,\n "
      },
      {
        "sha": "51e51ecb67a2861b19f732b99a0ca8bb877168a6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d924f2a596c8f37deb2dd94069c578244823c31f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d924f2a596c8f37deb2dd94069c578244823c31f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d924f2a596c8f37deb2dd94069c578244823c31f",
        "patch": "@@ -1655,22 +1655,22 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n }\n \n /** Abort with a message */\n-static bool AbortNode(const std::string& strMessage, const bilingual_str& userMessage = bilingual_str(), unsigned int prefix = 0)\n+static bool AbortNode(const std::string& strMessage, const bilingual_str& userMessage = bilingual_str())\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n     if (!userMessage.empty()) {\n-        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR | prefix);\n+        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR);\n     } else {\n-        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n+        uiInterface.ThreadSafeMessageBox(_(\"A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR);\n     }\n     StartShutdown();\n     return false;\n }\n \n-static bool AbortNode(BlockValidationState& state, const std::string& strMessage, const bilingual_str& userMessage = bilingual_str(), unsigned int prefix = 0)\n+static bool AbortNode(BlockValidationState& state, const std::string& strMessage, const bilingual_str& userMessage = bilingual_str())\n {\n-    AbortNode(strMessage, userMessage, prefix);\n+    AbortNode(strMessage, userMessage);\n     return state.Error(strMessage);\n }\n \n@@ -2335,7 +2335,7 @@ bool CChainState::FlushStateToDisk(\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n             if (!CheckDiskSpace(GetBlocksDir())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Disk space is too low!\"));\n             }\n             {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"write block and undo data to disk\", BCLog::BENCH);\n@@ -2383,7 +2383,7 @@ bool CChainState::FlushStateToDisk(\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n             if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * CoinsTip().GetCacheSize())) {\n-                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Disk space is too low!\"));\n             }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!CoinsTip().Flush())\n@@ -3290,7 +3290,7 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n         bool out_of_space;\n         size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n         if (out_of_space) {\n-            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+            return AbortNode(\"Disk space is too low!\", _(\"Disk space is too low!\"));\n         }\n         if (bytes_allocated != 0 && fPruneMode) {\n             fCheckForPruning = true;\n@@ -3314,7 +3314,7 @@ static bool FindUndoPos(BlockValidationState &state, int nFile, FlatFilePos &pos\n     bool out_of_space;\n     size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n     if (out_of_space) {\n-        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n+        return AbortNode(state, \"Disk space is too low!\", _(\"Disk space is too low!\"));\n     }\n     if (bytes_allocated != 0 && fPruneMode) {\n         fCheckForPruning = true;"
      }
    ]
  },
  {
    "sha": "5527be06277647dffe7cda587c4bbfbec2a5c8ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTI3YmUwNjI3NzY0N2RmZmU3Y2RhNTg3YzRiYmZiZWMyYTVjOGNh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-08T15:35:00Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-06-08T15:35:00Z"
      },
      "message": "refactor: Add AbortError alias",
      "tree": {
        "sha": "101219968bd950db2e001b68a0201438185c9773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/101219968bd950db2e001b68a0201438185c9773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5527be06277647dffe7cda587c4bbfbec2a5c8ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl7eWqQACgkQQQEIES5+\nqB8YUxAAoS1vyvPeAow8F1/3pGv+eu1Lv4pO5BzrJb+iM+LTw+Njuk+pym4iZOPc\nuWoTzJQu4ahUla6bJRKjFHFMnkVsdvKK4tm800oNMIxdu6HUhg7FEoZ7a/TOdYzk\nQjTdjDPQhSp/7COIyJidnzjIVCRRXlEsrcnph+wSxsi9AcPxlw28Xt5WS5Nh2GrQ\nzsK75w3pby9StweWODkFKRnybAbpE1EIMfwWG/YP782ZRPM1HpsbcpzfuglH2NVL\n1rrCRY7i5XPyoXSjf6MOiQytuUCAbPxp7AfptuGMKwl/eXDRzV7eVIa+bjN5fYDZ\nZbY/xPqNSRoF434sFH4lPsr7o6774KWmil+FUmKnwmeVJW9tka+F+mDSxXB/ZyNN\nu1lWx8bD3SvzD/9CRnD0gizdr6uOnyi2c7/X7zFkj0AevAl9dNG3QIWInT2vRknc\ngxNUFs5I0JJFKPrGjt8ETwMLLWn2Qai3j3suAgHxIudQgkn6926FsisBiUHBsrkC\nWzU2NW+9yEDZ8+swiyvZGoB51M+lxyvDcC0l/Fvfu7vC0uKeF3jiS1bZ4kYIe2S8\nKcpBuYG+Lds76s+MRpOXnRyoKUGUvZY4/Uc7xGTRIM/X/b6p5ubDpcKfnWqxmbM4\nZZl4BAcJayTX+3EeXJ4ertRNFjwTM+VIVIQym8KI0bGQU4B48f8=\n=cAqP\n-----END PGP SIGNATURE-----",
        "payload": "tree 101219968bd950db2e001b68a0201438185c9773\nparent d924f2a596c8f37deb2dd94069c578244823c31f\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591630500 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1591630500 +0300\n\nrefactor: Add AbortError alias\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5527be06277647dffe7cda587c4bbfbec2a5c8ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5527be06277647dffe7cda587c4bbfbec2a5c8ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5527be06277647dffe7cda587c4bbfbec2a5c8ca/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d924f2a596c8f37deb2dd94069c578244823c31f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d924f2a596c8f37deb2dd94069c578244823c31f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d924f2a596c8f37deb2dd94069c578244823c31f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "46b96996a75de968c3720aaddca52581e61f76ee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5527be06277647dffe7cda587c4bbfbec2a5c8ca/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5527be06277647dffe7cda587c4bbfbec2a5c8ca/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5527be06277647dffe7cda587c4bbfbec2a5c8ca",
        "patch": "@@ -1654,16 +1654,17 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n     return true;\n }\n \n+constexpr auto AbortError = InitError;\n+\n /** Abort with a message */\n-static bool AbortNode(const std::string& strMessage, const bilingual_str& userMessage = bilingual_str())\n+static bool AbortNode(const std::string& strMessage, bilingual_str user_message = bilingual_str())\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n-    if (!userMessage.empty()) {\n-        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR);\n-    } else {\n-        uiInterface.ThreadSafeMessageBox(_(\"A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR);\n+    if (user_message.empty()) {\n+        user_message = _(\"A fatal internal error occurred, see debug.log for details\");\n     }\n+    AbortError(user_message);\n     StartShutdown();\n     return false;\n }"
      }
    ]
  }
]