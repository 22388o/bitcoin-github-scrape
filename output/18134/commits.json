[
  {
    "sha": "d056df033a1e88554f7cc39dd709a87b17cb49df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDU2ZGYwMzNhMWU4ODU1NGY3Y2MzOWRkNzA5YTg3YjE3Y2I0OWRm",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-02-13T04:01:45Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-03-14T19:23:01Z"
      },
      "message": "Replace std::to_string with locale-independent alternative",
      "tree": {
        "sha": "263b622b86b99015913624e20b40fc317777c3c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/263b622b86b99015913624e20b40fc317777c3c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d056df033a1e88554f7cc39dd709a87b17cb49df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAl5tLxYACgkQTYykuhgE\nCQYRYQ//auX795GF6MYpb/SLrXmW2169+30CY07BRyCZWZN4YtXkjO8FJ7YboLWv\nvrGiLEintL6rGlj/SP4eht3nVg+olNb5/0TAfwx2gtj5T9xGCBajv3tRKS0u4gfU\n8vHKS7E6/Xge7dafsViL0YHIWmbTLoFgoFUyzn5Tx6fq1V7NffNbpYRirVFkhCBX\nRCdgNgsxkreHpeG5/8QLXXiLzS0st/8AecDcRGIUZeZ2JF4zlUIyEnZ4a3HXtEUd\n8qvJsDCOVuI+zfhbwLAp7uJjU9hkJ0a1me1zuxpVgcZPTFd2V2bPTPf99jWBnpwO\nmN8ppDBXob3aumUiI+vTku88oGxl7j6B4XrTxGJpl5CRO4f84gmkO20oZbh1pfV6\nuzSrdCKfoc1VRPLLGkYZHRANQxivR7DhtKDW4v1SYKcJvigORR2FfJwZNHfJvzGc\ndPCYJQR22Q3hp3Wvbl+/Gm8fDrWo6j5HVeP1aMLd1SnRgQnjhBglaIgljnQlC78K\nA70PkfRdfKRN8Tp518bLHDG0dXKywszvtk8v1YPsFt1rRBEpE3N6t1VWVRIlGQf1\n2iJY6aAVRgV1bhCqFueBOK7iKxT+tKaDB47mZ4caYJNSFl0Ds0bgw3YVq+gj5nVJ\nkzbqaO3JrpiOzIl0QpM6hV+9U3TxjoxkNniVkPuumOlu0aoYbm8=\n=Ur5l\n-----END PGP SIGNATURE-----",
        "payload": "tree 263b622b86b99015913624e20b40fc317777c3c7\nparent 58c72880ff70807cf622cdebf1d6273f4041bd2e\nauthor Ben Woosley <ben.woosley@gmail.com> 1581566505 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1584213781 -0700\n\nReplace std::to_string with locale-independent alternative\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d056df033a1e88554f7cc39dd709a87b17cb49df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d056df033a1e88554f7cc39dd709a87b17cb49df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d056df033a1e88554f7cc39dd709a87b17cb49df/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58c72880ff70807cf622cdebf1d6273f4041bd2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c72880ff70807cf622cdebf1d6273f4041bd2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58c72880ff70807cf622cdebf1d6273f4041bd2e"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 71,
      "deletions": 58
    },
    "files": [
      {
        "sha": "b4b2d7ed5212dde0fe9df6e2f427c70b40732441",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -20,6 +20,7 @@\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n \n@@ -357,7 +358,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n \n     if (required < 1 || required > MAX_PUBKEYS_PER_MULTISIG || numkeys < 1 || numkeys > MAX_PUBKEYS_PER_MULTISIG || numkeys < required)\n         throw std::runtime_error(\"multisig parameter mismatch. Required \" \\\n-                            + std::to_string(required) + \" of \" + std::to_string(numkeys) + \"signatures.\");\n+                            + ToString(required) + \" of \" + ToString(numkeys) + \"signatures.\");\n \n     // extract and validate PUBKEYs\n     std::vector<CPubKey> pubkeys;"
      },
      {
        "sha": "58a7591c95dc687d8d1397fe936665a01936d838",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -17,6 +17,7 @@\n #include <net.h>\n #include <netbase.h>\n #include <txdb.h> // for -dbcache defaults\n+#include <util/string.h>\n \n #include <QDebug>\n #include <QSettings>\n@@ -241,7 +242,7 @@ void OptionsModel::SetPruneEnabled(bool prune, bool force)\n     QSettings settings;\n     settings.setValue(\"bPrune\", prune);\n     const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? std::to_string(prune_target_mib) : \"0\";\n+    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n     if (force) {\n         m_node.forceSetArg(\"-prune\", prune_val);\n         return;"
      },
      {
        "sha": "1e54915db96c35876d7c6c992d086262e5b711ad",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -20,6 +20,7 @@\n #include <sync.h>\n #include <timedata.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <validation.h>\n #include <version.h>\n@@ -703,7 +704,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             RPCHelpMan{\"getnodeaddresses\",\n                 \"\\nReturn known addresses which can potentially be used to find new nodes in the network\\n\",\n                 {\n-                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + std::to_string(ADDRMAN_GETADDR_MAX) + \" or \" + std::to_string(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n+                    {\"count\", RPCArg::Type::NUM, /* default */ \"1\", \"How many addresses to return. Limited to the smaller of \" + ToString(ADDRMAN_GETADDR_MAX) + \" or \" + ToString(ADDRMAN_GETADDR_MAX_PCT) + \"% of all known addresses.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"\","
      },
      {
        "sha": "ae3f15cec2d5d09b07209c5cd2af57edf511b15e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -30,6 +30,7 @@\n #include <uint256.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n@@ -960,7 +961,7 @@ static std::string WriteHDKeypath(std::vector<uint32_t>& keypath)\n             num &= ~0x80000000;\n         }\n \n-        keypath_str += std::to_string(num);\n+        keypath_str += ToString(num);\n         if (hardened) {\n             keypath_str += \"'\";\n         }"
      },
      {
        "sha": "43dcccc392e6404bd21475f94a2c801a245ca35a",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -489,7 +489,7 @@ std::string RPCHelpMan::ToString() const\n         if (i == 0) ret += \"\\nArguments:\\n\";\n \n         // Push named argument name and description\n-        sections.m_sections.emplace_back(std::to_string(i + 1) + \". \" + arg.m_name, arg.ToDescriptionString());\n+        sections.m_sections.emplace_back(::ToString(i + 1) + \". \" + arg.m_name, arg.ToDescriptionString());\n         sections.m_max_pad = std::max(sections.m_max_pad, sections.m_sections.back().m_left.size());\n \n         // Recursively push nested args"
      },
      {
        "sha": "dfa8a6df212f5f069cf933548aed85c89b144856",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -6,6 +6,7 @@\n #include <string>\n #include <boost/test/unit_test.hpp>\n #include <util/asmap.h>\n+#include <util/string.h>\n #include <test/data/asmap.raw.h>\n \n #include <hash.h>\n@@ -266,7 +267,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     for (unsigned int i = 1; i < 18; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n \n         //Test: No collision in new table yet.\n@@ -292,7 +293,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     for (unsigned int i = 1; i < 80; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n@@ -425,7 +426,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;\n         int octet2 = i >> 8 % 256;\n-        std::string strAddr = std::to_string(octet1) + \".\" + std::to_string(octet2) + \".1.23\";\n+        std::string strAddr = ToString(octet1) + \".\" + ToString(octet2) + \".1.23\";\n         CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n \n         // Ensure that for all addrs in addrman, isTerrible == false.\n@@ -477,8 +478,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket_legacy)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + ToString(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + ToString(i)));\n         int bucket = infoi.GetTriedBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -489,8 +490,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket_legacy)\n     buckets.clear();\n     for (int j = 0; j < 255; j++) {\n         CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n+            CAddress(ResolveService(\"250.\" + ToString(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + ToString(j) + \".1.1\"));\n         int bucket = infoj.GetTriedBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -531,8 +532,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket_legacy)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + ToString(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + ToString(i)));\n         int bucket = infoi.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -544,7 +545,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket_legacy)\n     for (int j = 0; j < 4 * 255; j++) {\n         CAddrInfo infoj = CAddrInfo(CAddress(\n                                         ResolveService(\n-                                            std::to_string(250 + (j / 255)) + \".\" + std::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+                                            ToString(250 + (j / 255)) + \".\" + ToString(j % 256) + \".1.1\"), NODE_NONE),\n             ResolveIP(\"251.4.1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n@@ -557,7 +558,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket_legacy)\n     for (int p = 0; p < 255; p++) {\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n+            ResolveIP(\"250.\" + ToString(p) + \".1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -610,8 +611,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     std::set<int> buckets;\n     for (int j = 0; j < 255; j++) {\n         CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"101.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"101.\" + std::to_string(j) + \".1.1\"));\n+            CAddress(ResolveService(\"101.\" + ToString(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"101.\" + ToString(j) + \".1.1\"));\n         int bucket = infoj.GetTriedBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -622,8 +623,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     buckets.clear();\n     for (int j = 0; j < 255; j++) {\n         CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n+            CAddress(ResolveService(\"250.\" + ToString(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + ToString(j) + \".1.1\"));\n         int bucket = infoj.GetTriedBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -664,8 +665,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + ToString(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + ToString(i)));\n         int bucket = infoi.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -677,7 +678,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int j = 0; j < 4 * 255; j++) {\n         CAddrInfo infoj = CAddrInfo(CAddress(\n                                         ResolveService(\n-                                            std::to_string(250 + (j / 255)) + \".\" + std::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+                                            ToString(250 + (j / 255)) + \".\" + ToString(j % 256) + \".1.1\"), NODE_NONE),\n             ResolveIP(\"251.4.1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n@@ -690,7 +691,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int p = 0; p < 255; p++) {\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"101.\" + std::to_string(p) + \".1.1\"));\n+            ResolveIP(\"101.\" + ToString(p) + \".1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -702,7 +703,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int p = 0; p < 255; p++) {\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n+            ResolveIP(\"250.\" + ToString(p) + \".1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1, asmap);\n         buckets.insert(bucket);\n     }\n@@ -791,7 +792,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n     // Add twenty two addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n@@ -802,7 +803,7 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n \n     // Ensure Good handles duplicates well.\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         addrman.Good(addr);\n \n         BOOST_CHECK(addrman.size() == 22);\n@@ -818,7 +819,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     // Add twenty two addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n@@ -841,7 +842,7 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n \n     // Lets create two collisions.\n     for (unsigned int i = 24; i < 33; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n \n@@ -879,7 +880,7 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     // Add twenty two addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 23; i++) {\n-        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\"+ToString(i));\n         BOOST_CHECK(addrman.Add(CAddress(addr, NODE_NONE), source));\n         addrman.Good(addr);\n "
      },
      {
        "sha": "aa704642bf8ad09a1b6a3ff340fd057020d85277",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <chain.h>\n #include <rpc/blockchain.h>\n+#include <util/string.h>\n #include <test/util/setup_common.h>\n \n /* Equality between doubles is imprecise. Comparison should be done\n@@ -30,8 +31,8 @@ static CBlockIndex* CreateBlockIndexWithNbits(uint32_t nbits)\n static void RejectDifficultyMismatch(double difficulty, double expected_difficulty) {\n      BOOST_CHECK_MESSAGE(\n         DoubleEquals(difficulty, expected_difficulty, 0.00001),\n-        \"Difficulty was \" + std::to_string(difficulty)\n-            + \" but was expected to be \" + std::to_string(expected_difficulty));\n+        \"Difficulty was \" + ToString(difficulty)\n+            + \" but was expected to be \" + ToString(expected_difficulty));\n }\n \n /* Given a BlockIndex with the provided nbits,"
      },
      {
        "sha": "fa437ffaab50d93da56255be7e37d62c5f0ffd03",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -13,6 +13,7 @@\n #include <script/standard.h>\n #include <serialize.h>\n #include <util/memory.h>\n+#include <util/string.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <validation.h>\n@@ -313,7 +314,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         BOOST_CHECK(peerLogic->SendMessages(&dummyNode1));\n     }\n     BOOST_CHECK(banman->IsBanned(addr1));\n-    gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+    gArgs.ForceSetArg(\"-banscore\", ToString(DEFAULT_BANSCORE_THRESHOLD));\n \n     bool dummy;\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);"
      },
      {
        "sha": "034b7938f90d4488936fee40bd0a8a2fe5107adb",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -8,6 +8,7 @@\n #include <uint256.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <test/util/setup_common.h>\n \n #include <string>\n@@ -176,7 +177,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n     bool found_small = false;\n     for (int i = 0; i < 256; ++i) {\n         sig.clear();\n-        std::string msg = \"A message to be signed\" + std::to_string(i);\n+        std::string msg = \"A message to be signed\" + ToString(i);\n         msg_hash = Hash(msg.begin(), msg.end());\n         BOOST_CHECK(key.Sign(msg_hash, sig));\n         found = sig[3] == 0x20;"
      },
      {
        "sha": "9b5a86fef2cd172795b1c3bf4d2b24785f895549",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -15,6 +15,7 @@\n #include <chainparams.h>\n #include <util/memory.h>\n #include <util/system.h>\n+#include <util/string.h>\n \n #include <memory>\n \n@@ -85,7 +86,7 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n     BOOST_CHECK(port == Params().GetDefaultPort());\n     // test set port\n     unsigned short altPort = 12345;\n-    BOOST_CHECK(gArgs.SoftSetArg(\"-port\", std::to_string(altPort)));\n+    BOOST_CHECK(gArgs.SoftSetArg(\"-port\", ToString(altPort)));\n     port = GetListenPort();\n     BOOST_CHECK(port == altPort);\n }"
      },
      {
        "sha": "10b161aa8050c0e2b34761fb1da830eed828efc9",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -11,6 +11,7 @@\n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <vector>\n \n BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n@@ -114,7 +115,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n                                std::vector<util::SettingsValue>& dest) {\n             if (action == SET || action == SECTION_SET) {\n                 for (int i = 0; i < 2; ++i) {\n-                    dest.push_back(value_prefix + std::to_string(++value_suffix));\n+                    dest.push_back(value_prefix + ToString(++value_suffix));\n                     desc += \" \" + name_prefix + name + \"=\" + dest.back().get_str();\n                 }\n             } else if (action == NEGATE || action == SECTION_NEGATE) {"
      },
      {
        "sha": "29b43e9becd8fe9e8a41a0c79cb58658bc6316e6",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <netaddress.h>\n #include <noui.h>\n+#include <util/string.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n #include <timedata.h>\n@@ -46,7 +47,7 @@ static void MultiAddTimeData(int n, int64_t offset)\n     static int cnt = 0;\n     for (int i = 0; i < n; ++i) {\n         CNetAddr addr;\n-        addr.SetInternal(std::to_string(++cnt));\n+        addr.SetInternal(ToString(++cnt));\n         AddTimeData(addr, offset);\n     }\n }"
      },
      {
        "sha": "3733c90ae124e275a8ff3d8b5034341e25b29583",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -24,6 +24,7 @@\n #include <txdb.h>\n #include <util/memory.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/time.h>\n #include <util/translation.h>\n #include <validation.h>"
      },
      {
        "sha": "0930309c3a66c88e0ca36875ddcddf516cb6a042",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -13,6 +13,7 @@\n #include <random.h>\n #include <scheduler.h>\n #include <txmempool.h>\n+#include <util/string.h>\n \n #include <type_traits>\n "
      },
      {
        "sha": "ab437d12a12e9e3dcf65a5e223be3a89b72838c9",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -894,7 +894,7 @@ struct ArgsMergeTestingSetup : public BasicTestingSetup {\n             if (action == SECTION_SET || action == SECTION_NEGATE) prefix = section + \".\";\n             if (action == SET || action == SECTION_SET) {\n                 for (int i = 0; i < 2; ++i) {\n-                    values.push_back(prefix + name + \"=\" + value_prefix + std::to_string(++suffix));\n+                    values.push_back(prefix + name + \"=\" + value_prefix + ToString(++suffix));\n                 }\n             }\n             if (action == NEGATE || action == SECTION_NEGATE) {"
      },
      {
        "sha": "cee4e0ce3ceaf983ec6accd46dd4354809b75eee",
        "filename": "src/test/util_threadnames_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util_threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/test/util_threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_threadnames_tests.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <util/string.h>\n #include <util/threadnames.h>\n #include <test/util/setup_common.h>\n \n@@ -32,7 +33,7 @@ std::set<std::string> RenameEnMasse(int num_threads)\n     std::mutex lock;\n \n     auto RenameThisThread = [&](int i) {\n-        util::ThreadRename(TEST_THREAD_NAME_BASE + std::to_string(i));\n+        util::ThreadRename(TEST_THREAD_NAME_BASE + ToString(i));\n         std::lock_guard<std::mutex> guard(lock);\n         names.insert(util::ThreadGetInternalName());\n     };\n@@ -65,7 +66,7 @@ BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)\n \n     // Names \"test_thread.[n]\" should exist for n = [0, 99]\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(names.find(TEST_THREAD_NAME_BASE + std::to_string(i)) != names.end());\n+        BOOST_CHECK(names.find(TEST_THREAD_NAME_BASE + ToString(i)) != names.end());\n     }\n \n }"
      },
      {
        "sha": "694f0a1ca42d11f922a2c860abcf2064d3298fcc",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -8,6 +8,8 @@\n #include <attributes.h>\n \n #include <cstring>\n+#include <locale>\n+#include <sstream>\n #include <string>\n #include <vector>\n \n@@ -52,4 +54,16 @@ NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n     return str.size() == strlen(str.c_str());\n }\n \n+/**\n+ * Locale-independent version of std::to_string\n+ */\n+template <typename T>\n+std::string ToString(const T& t)\n+{\n+    std::ostringstream oss;\n+    oss.imbue(std::locale::classic());\n+    oss << t;\n+    return oss.str();\n+}\n+\n #endif // BITCOIN_UTIL_STRENCODINGS_H"
      },
      {
        "sha": "b96cb0aa1a3006a245aec743e153e29c77133f7c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -8,6 +8,7 @@\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n #include <util/translation.h>\n #include <wallet/scriptpubkeyman.h>\n \n@@ -989,15 +990,15 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n         // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n         if (internal) {\n             chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + std::to_string(hdChain.nInternalChainCounter) + \"'\";\n+            metadata.hdKeypath = \"m/0'/1'/\" + ToString(hdChain.nInternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n             hdChain.nInternalChainCounter++;\n         }\n         else {\n             chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdKeypath = \"m/0'/0'/\" + ToString(hdChain.nExternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);"
      },
      {
        "sha": "70410d7405d87f286db53096fabd1207ae50c50b",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d056df033a1e88554f7cc39dd709a87b17cb49df/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d056df033a1e88554f7cc39dd709a87b17cb49df/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=d056df033a1e88554f7cc39dd709a87b17cb49df",
        "patch": "@@ -6,39 +6,23 @@\n export LC_ALL=C\n KNOWN_VIOLATIONS=(\n     \"src/bitcoin-tx.cpp.*stoul\"\n-    \"src/bitcoin-tx.cpp.*std::to_string\"\n     \"src/bitcoin-tx.cpp.*trim_right\"\n     \"src/dbwrapper.cpp.*stoul\"\n     \"src/dbwrapper.cpp:.*vsnprintf\"\n     \"src/httprpc.cpp.*trim\"\n     \"src/init.cpp:.*atoi\"\n-    \"src/qt/optionsmodel.cpp.*std::to_string\"\n     \"src/qt/rpcconsole.cpp:.*atoi\"\n     \"src/rest.cpp:.*strtol\"\n-    \"src/rpc/net.cpp.*std::to_string\"\n-    \"src/rpc/rawtransaction.cpp.*std::to_string\"\n-    \"src/rpc/util.cpp.*std::to_string\"\n-    \"src/test/addrman_tests.cpp.*std::to_string\"\n-    \"src/test/blockchain_tests.cpp.*std::to_string\"\n     \"src/test/dbwrapper_tests.cpp:.*snprintf\"\n-    \"src/test/denialofservice_tests.cpp.*std::to_string\"\n     \"src/test/fuzz/locale.cpp\"\n     \"src/test/fuzz/parse_numbers.cpp:.*atoi\"\n-    \"src/test/key_tests.cpp.*std::to_string\"\n-    \"src/test/net_tests.cpp.*std::to_string\"\n-    \"src/test/settings_tests.cpp.*std::to_string\"\n-    \"src/test/timedata_tests.cpp.*std::to_string\"\n-    \"src/test/util/setup_common.cpp.*std::to_string\"\n-    \"src/test/util_tests.cpp.*std::to_string\"\n-    \"src/test/util_threadnames_tests.cpp.*std::to_string\"\n     \"src/torcontrol.cpp:.*atoi\"\n     \"src/torcontrol.cpp:.*strtol\"\n     \"src/util/strencodings.cpp:.*atoi\"\n     \"src/util/strencodings.cpp:.*strtol\"\n     \"src/util/strencodings.cpp:.*strtoul\"\n     \"src/util/strencodings.h:.*atoi\"\n     \"src/util/system.cpp:.*atoi\"\n-    \"src/wallet/scriptpubkeyman.cpp.*std::to_string\"\n )\n \n REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\""
      }
    ]
  }
]