laanwj,2016-09-20T13:40:15Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-248304125,248304125,
laanwj,2016-09-25T11:40:00Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-249416903,249416903,
jtimon,2016-09-30T16:58:25Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-250796973,250796973,
theuni,2016-10-06T19:25:47Z,"On Oct 6, 2016 1:06 PM, ""Matt Corallo"" notifications@github.com wrote:\n\n> @TheBlueMatt commented on this pull request.\n> \n> Got halfway through a review and realized I just dont know how I feel\n> about this...CNode moving towards a ""I speak to the CConnman and serialize\n> messages for the wire"" seems like a sane design (and seems to be what\n> you're going for here), but it means there is ju",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-252063620,252063620,
TheBlueMatt,2016-10-06T19:47:35Z,"Yea, seems like we're mostly on the same page here... Probably reasonable to give the serialization to net_processing, though I am concerned with how to merge type with P2P encryption, given that it also changes the message hashing, but only after messages are exchanged (I believe? Maybe @jonasschnelli wants to comment). Even more unsure of how to handle that.\n\nAs for this PR, I'm fine with it a",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-252068880,252068880,
laanwj,2016-10-25T10:44:13Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-256001031,256001031,
theuni,2016-10-27T18:47:28Z,"rebased.\n\n@TheBlueMatt I added some commits to handle the version push in InitializeNode. I left the serialization happening in CConnman for now. Agreed that it's a layer violation and have plans for separating it, but I'd prefer not to change the scope here too much unless you hugely object.\n",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-256734266,256734266,
theuni,2016-10-29T20:38:47Z,"Updated for @TheBlueMatt's nits. Since the changes were very small, I went ahead and squashed.\n\nPRs are coming up to address the const issues, as well as fixing the serialization layer violation.\n",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-257114685,257114685,
TheBlueMatt,2016-11-01T21:44:03Z,"Oh totally, didn't mean to imply the sending message should be two prints, just that you changed the text spuriously.\n\nOn November 1, 2016 5:08:13 PM EDT, Cory Fields notifications@github.com wrote:\n\n> theuni commented on this pull request.\n> \n> > -    // Set the checksum\n> > -    uint256 hash = Hash(ssSend.begin() + CMessageHeader::HEADER_SIZE,\n> >   ssSend.end());\n> > -    assert(ssSend",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-257708109,257708109,
laanwj,2016-11-02T20:51:47Z,"How does this overlap with #9039? That pull changes the serialization framework to get rid of nVersion and nType in many places, does that mean some things can be simpllified here?\n",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-257995143,257995143,
sipa,2016-11-02T21:56:49Z,I believe the removal of CNode::Fuzz maybe remove the need for CDataStream::insert or CDataStream::erase.\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258011822,258011822,
sipa,2016-11-02T21:57:47Z,"As for overlap with #9039, I expect it to be trivial: just dropping the nVersion and nType everywhere. I'm happy to rebase #9039 on top of this if it gets merged first.\n",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258012097,258012097,
theuni,2016-11-02T23:07:24Z,Agree with @sipa. Either order is fine by me.\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258026499,258026499,
theuni,2016-11-03T14:15:40Z,Rebased after #9050. The net.cpp diff before/after the rebase:\n\n```\ngit diff 19d3daef936905743ef108aee1ccfe46fd77b283..c7b8effb96726ba5367a7b1c9c7374c4d2cc10e2 -- net.cpp\n```\n\n can be seen here: https://gist.github.com/theuni/cc4eb87f0196ddadb637d1a41c5c5b2e.\n\nIt's just #9050 plus @sipa's simplification suggestion.\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258154174,258154174,
TheBlueMatt,2016-11-03T20:17:55Z,"Looks like it needs rebased again, sorry :/.\n",https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258261454,258261454,
sipa,2016-11-03T21:05:38Z,The rebase is trivial: https://github.com/sipa/bitcoin/commits/pr_8708\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258273697,258273697,
laanwj,2016-11-07T09:37:00Z,Was merged via c8c572f8f1ea0a98ee3e7b3343c766ad52848bef (from sipa's rebased branch https://github.com/sipa/bitcoin/commits/pr_8708)\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258787898,258787898,
theuni,2016-11-07T18:58:17Z,Thanks!\n,https://github.com/bitcoin/bitcoin/pull/8708#issuecomment-258928221,258928221,
TheBlueMatt,2016-10-06T16:54:55Z,"Any idea why we use a different time for inbound vs outbound peers? If anything I'd think we'd announce our real time to inbound peers and our adjusted time to outbound ones, but we do the opposite.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r82234052,82234052,src/main.cpp
TheBlueMatt,2016-10-06T17:00:39Z,"Can we go ahead and move the PushVersion logic into InitializeNode? I think thats the right place since it will move into net_processing.cpp with the rest of the ""node-message-processing"" stuff.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r82235142,82235142,src/net.cpp
TheBlueMatt,2016-10-28T15:14:38Z,GetSendVersion needs a lock (or make it atomic with release/aquire).\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85550766,85550766,src/net.cpp
TheBlueMatt,2016-10-28T15:16:05Z,Can you move this up to cover the MESSAGE_SIZE_OFFSET write two lines up?\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85551047,85551047,src/net.cpp
TheBlueMatt,2016-10-28T15:20:52Z,"strm can be const, I believe? Would be nice to go ahead and do that since I'd like to use this to create a cmpctblock fully-encoded message once and then just call this on each node that wants it.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85552065,85552065,src/net.cpp
TheBlueMatt,2016-10-28T15:46:11Z,nit: I'd kinda prefer we not move PushVersion twice.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85557182,85557182,src/net.cpp
TheBlueMatt,2016-10-28T16:10:11Z,"This is a slight change in behavior - we are now pushing our non-adjusted time to all peers, instead of just outbound peers. Not actually sure if it matters, but taking note here.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85561634,85561634,src/main.cpp
TheBlueMatt,2016-10-28T16:15:12Z,"I think half the functions here need locks or to become atomics to be correct. (unless I'm missing a required lock to call this function, in which case please AssertLockHeld to make it obvious).\n\nMay be easiest to just make half the ints in CNode atomic.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85562449,85562449,src/main.cpp
theuni,2016-10-28T16:21:06Z,See https://github.com/bitcoin/bitcoin/pull/8708/files#diff-1a8b9d1ad0a6fda5e751286c73102fc2R755\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85563508,85563508,src/net.cpp
theuni,2016-10-28T16:21:55Z,ok\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85563670,85563670,src/net.cpp
theuni,2016-10-28T16:23:01Z,This value doesn't change. I have a branch with additional commits that turns a bunch of stuff into const to make it clear that it's threadsafe. I could add those here if you'd like?\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85563886,85563886,src/main.cpp
theuni,2016-10-28T16:23:26Z,"Whoops, good catch. That was not intentional. Will fix.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85563968,85563968,src/main.cpp
TheBlueMatt,2016-10-28T16:33:40Z,This violates C++ spec - nSendVersion must exist non-const somewhere for const_cast to be permitted (I believe).\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85565594,85565594,src/net.h
theuni,2016-10-28T17:31:35Z,"Ok, I'll just change this back to non-const. The const was only to prove that it's not racy, since it can only be set once.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85575157,85575157,src/net.h
theuni,2016-10-28T17:40:39Z,ok\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85576672,85576672,src/net.cpp
theuni,2016-10-28T19:55:34Z,"Er, this isn't intended to be used that way. This is internal and should be private.\n\nThe next set of changes will introduce a CSendMessage which is fully serialized. PushMessage will take that instead. That fixes the current layer violation here, and your issue at the same time I think?\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85599665,85599665,src/net.cpp
TheBlueMatt,2016-10-28T21:17:54Z,"OK, sounds good.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85611924,85611924,src/net.cpp
TheBlueMatt,2016-10-28T21:20:17Z,"I'm ok with this happening in a separate PR, as AFAICT there are already dragons here, but should definitely happen before 0.14.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85612275,85612275,src/main.cpp
TheBlueMatt,2016-10-31T23:22:22Z,This assert needs to move up a line.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85853183,85853183,src/net.cpp
TheBlueMatt,2016-10-31T23:23:37Z,"nit: any reason you changed the text here? It used to read ""sending: %s (%d bytes) peer=%d\n"", SanitizeString(pszCommand, nSize, id) (split across two lines).\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85853325,85853325,src/net.cpp
TheBlueMatt,2016-11-01T00:07:26Z,"I cant see anything wrong with this, but it seems obviously equivalent...what was the reason for nOptimisticBytesSent previously?\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r85857968,85857968,src/net.cpp
theuni,2016-11-01T21:08:04Z,"No, they just ended up combined since the actual data push is all done in one place now.\n\nIs there a reason to prefer having them split? How about adding back the ""sending"" for easy grepping, and the sanitizestring for extra paranoia, but leaving it as a combined message?\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86025323,86025323,src/net.cpp
theuni,2016-11-01T21:15:39Z,"It was a hack. In fact, this PR was originally created to fix this.\n\nIf the node is in charge of pushing data, Connman has no way of knowing if optimistic writes have succeeded. The hackish solution was to cache the periodically check for optimistic written bytes (stored by CNode) and add them to the node's total, but that fails miserably if the optimistic writes succeed most of the time.\n\nNow",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86026899,86026899,src/net.cpp
laanwj,2016-11-02T20:42:43Z,Good to get rid of this repetition.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86237688,86237688,src/net.h
laanwj,2016-11-02T20:45:30Z,"Yeah, I don't think anyone is using these, or has been using these for years.\nWould be nice to get #7940 in at some point, it provides a better fuzzing framework which is not dependent on the network code.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86238256,86238256,src/net.cpp
laanwj,2016-11-02T20:51:19Z,These are not used?\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86239425,86239425,src/net.h
theuni,2016-11-02T21:52:34Z,@laanwj looks like I missed #7940. Agree with doing it at a lower level.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86251045,86251045,src/net.cpp
theuni,2016-11-02T22:03:34Z,"PushMessageWithVersionAndFlag could be private I suppose. It's only used by the others.\n\nPushMessageWithFlag is the same as before.\n\nPushMessageWithVersion is used explicitly before the handshake is complete, before we know what upgraded version to use.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86252941,86252941,src/net.h
theuni,2016-11-02T22:10:23Z,"Note that as next steps, an intermediary and fully serialized ""CSendMessage"" (or so) class will be added, which CConnman accepts rather than bare arguments, and forwards to the network. This makes CConnman mostly oblivious as to what it's pushing (other than the type of message), which further improves encapsulation.\n\nAlso, The sendversion logic will move to CNodeState once the locking situation",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86254156,86254156,src/net.h
sipa,2016-11-03T01:16:58Z,@TheBlueMatt I'm not sure I see the reasoning for either. I'd expect us to use our best guess of time everywhere.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86274670,86274670,src/main.cpp
sipa,2016-11-03T06:41:20Z,"That's pretty hard to read. Can you factor the version logic out, or at least combine as `(nVersion ? nVersion : pnode->GetSendVersion()) | flags`?\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86291466,86291466,src/net.cpp
sipa,2016-11-03T06:47:55Z,"Not for this PR, but we should try to make a CSerializeData move-constructable from a CDataStream, and make PushMessage take a CDataStream&& perhaps. Or is this going away anyway?\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86291785,86291785,src/net.cpp
sipa,2016-11-03T06:54:27Z,Why copy pnode->addr twice?\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86292209,86292209,src/main.cpp
theuni,2016-11-03T13:57:25Z,Will do.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86347321,86347321,src/net.cpp
theuni,2016-11-03T14:02:51Z,"Yea, going away. Instead we'll have a new (very simple) stream type that serializes args for the network, which CConnman will use directly. As it'll construct in-place and be movable, it should eliminate at least 2 copies, I think.\n",https://github.com/bitcoin/bitcoin/pull/8708#discussion_r86348466,86348466,src/net.cpp
rebroad,2016-11-11T12:52:39Z,what does it use in netbase.h?\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r87583613,87583613,src/main.cpp
MarcoFalke,2016-11-11T14:04:07Z,@rebroad An easy way to find out is to remove the line and compile. The compiler will tell you what is used but missing.\n,https://github.com/bitcoin/bitcoin/pull/8708#discussion_r87592031,87592031,src/main.cpp
