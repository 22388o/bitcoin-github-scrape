[
  {
    "sha": "b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjcxOGUzNzNlZDQyNWZhMjQ0MGRkZDhmMWIwNWM3NmI3ODJkYzJi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-21T09:03:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-21T09:03:21Z"
      },
      "message": "tests: Use MakeUnique to construct objects owned by unique_ptrs",
      "tree": {
        "sha": "4e710e94ee3946bac22b1932d3b982102a24155f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e710e94ee3946bac22b1932d3b982102a24155f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f464549c46db2954d7b64d1feb200eb35f2e7e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f464549c46db2954d7b64d1feb200eb35f2e7e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f464549c46db2954d7b64d1feb200eb35f2e7e8"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 20,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bdb8d7dbae24d06b0ffd283347db5802475ba5f6",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -439,6 +439,11 @@ General C++\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n+- Use `MakeUnique()` to construct objects owned by `unique_ptr`s\n+\n+  - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n+    `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n+\n C++ data structures\n --------------------\n "
      },
      {
        "sha": "4fa516cb81779bd98e2acc8c44620d1a4bdf863e",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -82,7 +82,7 @@ int main(int argc, char** argv)\n         return EXIT_FAILURE;\n     }\n \n-    std::unique_ptr<benchmark::Printer> printer(new benchmark::ConsolePrinter());\n+    std::unique_ptr<benchmark::Printer> printer = MakeUnique<benchmark::ConsolePrinter>();\n     std::string printer_arg = gArgs.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n     if (\"plot\" == printer_arg) {\n         printer.reset(new benchmark::PlotlyPrinter("
      },
      {
        "sha": "27c23d6834cb2c793e9c370123a594a0b349275e",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -66,7 +66,7 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     set.emplace_back(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0);\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "c72c062b81e76d14093b673cd75a52b1af70ecc8",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -163,7 +163,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n {\n     // Test over three virtual arenas, of which one will succeed being locked\n-    std::unique_ptr<LockedPageAllocator> x(new TestLockedPageAllocator(3, 1));\n+    std::unique_ptr<LockedPageAllocator> x = MakeUnique<TestLockedPageAllocator>(3, 1);\n     LockedPool pool(std::move(x));\n     BOOST_CHECK(pool.stats().total == 0);\n     BOOST_CHECK(pool.stats().locked == 0);"
      },
      {
        "sha": "f4b416c4caefb64da563c050e6ae64e8c9805ebc",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -148,7 +148,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n  */\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n-    auto small_queue = std::unique_ptr<Correct_Queue>(new Correct_Queue {QUEUE_BATCH_SIZE});\n+    auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n        tg.create_thread([&]{small_queue->Thread();});\n@@ -213,7 +213,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Correct_Random)\n /** Test that failing checks are caught */\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n-    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n     boost::thread_group tg;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n@@ -246,7 +246,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n-    auto fail_queue = std::unique_ptr<Failing_Queue>(new Failing_Queue {QUEUE_BATCH_SIZE});\n+    auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n        tg.create_thread([&]{fail_queue->Thread();});\n@@ -274,7 +274,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n // more than once as well\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n-    auto queue = std::unique_ptr<Unique_Queue>(new Unique_Queue {QUEUE_BATCH_SIZE});\n+    auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n@@ -310,7 +310,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n // time could leave the data hanging across a sequence of blocks.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n-    auto queue = std::unique_ptr<Memory_Queue>(new Memory_Queue {QUEUE_BATCH_SIZE});\n+    auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n        tg.create_thread([&]{queue->Thread();});\n@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n-    auto queue = std::unique_ptr<FrozenCleanup_Queue>(new FrozenCleanup_Queue {QUEUE_BATCH_SIZE});\n+    auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;\n     bool fails = false;\n     for (auto x = 0; x < nScriptCheckThreads; ++x) {\n@@ -384,7 +384,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n /** Test that CCheckQueueControl is threadsafe */\n BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n {\n-    auto queue = std::unique_ptr<Standard_Queue>(new Standard_Queue{QUEUE_BATCH_SIZE});\n+    auto queue = MakeUnique<Standard_Queue>(QUEUE_BATCH_SIZE);\n     {\n         boost::thread_group tg;\n         std::atomic<int> nThreads {0};"
      },
      {
        "sha": "35a143957ec72a95e9407bfef649901efec060bc",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -179,12 +179,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    std::unique_ptr<CNode> pnode1(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn));\n+    std::unique_ptr<CNode> pnode1 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, CAddress(), pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    std::unique_ptr<CNode> pnode2(new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn));\n+    std::unique_ptr<CNode> pnode2 = MakeUnique<CNode>(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, CAddress(), pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      },
      {
        "sha": "766e34e5b57227b52601eba20f0452aeedea258b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -107,7 +107,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n-        g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n+        g_connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n         connman = g_connman.get();\n         peerLogic.reset(new PeerLogicValidation(connman, scheduler, /*enable_bip61=*/true));\n }"
      },
      {
        "sha": "88c082ff664662caad9b37d783a7bd28cb30e30c",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -279,7 +279,7 @@ static int test_one_input(std::vector<uint8_t> buffer) {\n \n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n void initialize() {\n-    globalVerifyHandle = std::unique_ptr<ECCVerifyHandle>(new ECCVerifyHandle());\n+    globalVerifyHandle = MakeUnique<ECCVerifyHandle>();\n }\n \n // This function is used by libFuzzer"
      },
      {
        "sha": "21857df0813c3d7ed534b0962d6b8e9dcb8aded6",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6718e373ed425fa2440ddd8f1b05c76b782dc2b/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=b6718e373ed425fa2440ddd8f1b05c76b782dc2b",
        "patch": "@@ -65,7 +65,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n         wtx->fDebitCached = true;"
      }
    ]
  }
]