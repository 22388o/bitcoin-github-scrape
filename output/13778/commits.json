[
  {
    "sha": "773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzNjOTRlYmZiZWZjNDgzZjc0YmZhMDQ1NmQ2YWFhNGZiMGEyOTgx",
    "commit": {
      "author": {
        "name": "Jan Sarenik",
        "email": "jan@tkos.co.il",
        "date": "2017-11-23T14:52:24Z"
      },
      "committer": {
        "name": "Jan Sarenik",
        "email": "jasan@jasan.tk",
        "date": "2018-07-27T08:16:46Z"
      },
      "message": "Docs: reflow some markdown text files\n\nThough the plain text was pretty good (mostly 80-char lines),\nthis makes it even more readable for terminal monks. The fancy\nHTML5 markdown output on GitHub is the same (checked with rendering\noriginal and changed file with `commonmarker` and normalizing both\nwith HTML `tidy`, the only change being the simplified in-tree doc\npath for Translation Process).\n\nOne more little change is that http://chris.beams.io was changed\nto https as suggested by @fanquake.\n\n    commonmarker CONTRIBUTING.md | tidy > /tmp/aoeui.html\n    git checkout master\n    commonmarker CONTRIBUTING.md | tidy | diff -u - /tmp/aoeui.html\n\n - INSTALL.md: Add monospace markup to file name\n - CONTRIBUTING.md - reflow the text - no change in wording\n - contrib/qos/README.md - fmt (reflow and wrap long lines)\n - reflow release-notes.md\n - README.md reflow\n - depends/packages.md - reflow\n\nRef: https://github.com/ElementsProject/lightning/pull/1137",
      "tree": {
        "sha": "da075da4160c35730b126a20b5b06da44a032258",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da075da4160c35730b126a20b5b06da44a032258"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "89a116dc0b446de0d18a981699a279eeaf6c9ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a116dc0b446de0d18a981699a279eeaf6c9ea9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a116dc0b446de0d18a981699a279eeaf6c9ea9"
      }
    ],
    "stats": {
      "total": 714,
      "additions": 402,
      "deletions": 312
    },
    "files": [
      {
        "sha": "b79eead5485685ebf0570204fb0d6b5415dd6227",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 207,
        "deletions": 163,
        "changes": 370,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,39 +1,45 @@\n Contributing to Bitcoin Core\n ============================\n \n-The Bitcoin Core project operates an open contributor model where anyone is\n-welcome to contribute towards development in the form of peer review, testing\n-and patches. This document explains the practical process and guidelines for\n-contributing.\n+The Bitcoin Core project operates an open contributor model where anyone\n+is welcome to contribute towards development in the form of peer review,\n+testing and patches. This document explains the practical process and\n+guidelines for contributing.\n \n Firstly in terms of structure, there is no particular concept of \"Core\n developers\" in the sense of privileged people. Open source often naturally\n-revolves around meritocracy where longer term contributors gain more trust from\n-the developer community. However, some hierarchy is necessary for practical\n-purposes. As such there are repository \"maintainers\" who are responsible for\n-merging pull requests as well as a \"lead maintainer\" who is responsible for the\n-release cycle, overall merging, moderation and appointment of maintainers.\n+revolves around meritocracy where longer term contributors gain more\n+trust from the developer community. However, some hierarchy is necessary\n+for practical purposes. As such there are repository \"maintainers\" who\n+are responsible for merging pull requests as well as a \"lead maintainer\"\n+who is responsible for the release cycle, overall merging, moderation\n+and appointment of maintainers.\n \n If you're looking for somewhere to start contributing, check out the\n-[good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n-list.\n+[good first issue] list.\n+\n+[good first issue]: https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\n+\n \n Communication Channels\n ----------------------\n \n-Most communication about Bitcoin Core development happens on IRC, in the\n-#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n-with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n-history logs can be found\n-on [botbot.me](https://botbot.me/freenode/bitcoin-core-dev/).\n+Most communication about Bitcoin Core development happens\n+on IRC, in the #bitcoin-core-dev channel on Freenode.\n+The easiest way to participate on IRC is with the web client,\n+[webchat.freenode.net].\n+Chat history logs can be found on [botbot.me].\n+\n+[webchat.freenode.net]: https://webchat.freenode.net/\n+[botbot.me]: https://botbot.me/freenode/bitcoin-core-dev/\n+\n+Discussion about code base improvements happens in GitHub issues and on\n+pull requests.\n \n-Discussion about code base improvements happens in GitHub issues and on pull\n-requests.\n+The developer [mailing list] should be used to discuss complicated or\n+controversial changes before working on a patch set.\n \n-The developer\n-[mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n-should be used to discuss complicated or controversial changes before working on\n-a patch set.\n+[mailing list]: https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n \n \n Contributor Workflow\n@@ -49,32 +55,41 @@ To contribute a patch, the workflow is as follows:\n   1. Create topic branch\n   1. Commit patches\n \n-The project coding conventions in the [developer notes](doc/developer-notes.md)\n-must be adhered to.\n+The project coding conventions in the [developer notes] must\n+be adhered to.\n+\n+[developer notes]: doc/developer-notes.md\n+\n+In general [commits should be atomic][c] and diffs should be easy\n+to read. For this reason do not mix any formatting fixes or code moves\n+with actual code changes.\n+\n+[c]: https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention\n \n-In general [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\n-and diffs should be easy to read. For this reason do not mix any formatting\n-fixes or code moves with actual code changes.\n+Commit messages should be verbose by default consisting of a short\n+subject line (50 chars max), a blank line and detailed explanatory text\n+as separate paragraph(s), unless the title alone is self-explanatory\n+(like \"Corrected typo in init.cpp\") in which case a single title line\n+is sufficient. Commit messages should be helpful to people reading your\n+code in the future, so explain the reasoning for your decisions. Further\n+explanation [here].\n \n-Commit messages should be verbose by default consisting of a short subject line\n-(50 chars max), a blank line and detailed explanatory text as separate\n-paragraph(s), unless the title alone is self-explanatory (like \"Corrected typo\n-in init.cpp\") in which case a single title line is sufficient. Commit messages should be\n-helpful to people reading your code in the future, so explain the reasoning for\n-your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n+[here]: https://chris.beams.io/posts/git-commit/\n \n-If a particular commit references another issue, please add the reference. For\n-example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n-will cause the corresponding issue to be closed when the pull request is merged.\n+If a particular commit references another issue, please add the\n+reference. For example: `refs #1234` or `fixes #4321`. Using the `fixes`\n+or `closes` keywords will cause the corresponding issue to be closed\n+when the pull request is merged.\n \n-Please refer to the [Git manual](https://git-scm.com/doc) for more information\n-about Git.\n+Please refer to the [Git manual] for more information about Git.\n+\n+[Git manual]: https://git-scm.com/doc\n \n   - Push changes to your fork\n   - Create pull request\n \n-The title of the pull request should be prefixed by the component or area that\n-the pull request affects. Valid areas as:\n+The title of the pull request should be prefixed by the component or\n+area that the pull request affects. Valid areas as:\n \n   - *Consensus* for changes to consensus critical code\n   - *Docs* for changes to the documentation\n@@ -102,28 +117,36 @@ Examples:\n     Qt: Add feed bump button\n     Trivial: Fix typo in init.cpp\n \n-Note that translations should not be submitted as pull requests, please see\n-[Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md) \n-for more information on helping with translations.\n+Note that translations should not be submitted as pull requests,\n+please see [Translation Process] for more information on helping with\n+translations.\n+\n+[Translation Process]: doc/translation_process.md\n \n If a pull request is not to be considered for merging (yet), please\n-prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n-in the body of the pull request to indicate tasks are pending.\n+prefix the title with [WIP] or use [Tasks Lists] in the body of the pull\n+request to indicate tasks are pending.\n+\n+[Tasks Lists]: https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists\n \n-The body of the pull request should contain enough description about what the\n-patch does together with any justification/reasoning. You should include\n-references to any discussions (for example other tickets or mailing list\n-discussions).\n+The body of the pull request should contain enough description about what\n+the patch does together with any justification/reasoning. You should\n+include references to any discussions (for example other tickets or\n+mailing list discussions).\n+\n+At this stage one should expect comments and review from other\n+contributors. You can add more commits to your pull request by committing\n+them locally and pushing to your fork until you have satisfied all\n+feedback.\n \n-At this stage one should expect comments and review from other contributors. You\n-can add more commits to your pull request by committing them locally and pushing\n-to your fork until you have satisfied all feedback.\n \n Squashing Commits\n ---------------------------\n-If your pull request is accepted for merging, you may be asked by a maintainer\n-to squash and or [rebase](https://git-scm.com/docs/git-rebase) your commits\n-before it will be merged. The basic squashing workflow is shown below.\n+If your pull request is accepted for merging, you may be asked by a\n+maintainer to squash and or [rebase] your commits before it will be\n+merged. The basic squashing workflow is shown below.\n+\n+[rebase]: https://git-scm.com/docs/git-rebase\n \n     git checkout your_branch_name\n     git rebase -i HEAD~n\n@@ -133,161 +156,181 @@ before it will be merged. The basic squashing workflow is shown below.\n     # Save and quit.\n     git push -f # (force push to GitHub)\n \n-If you have problems with squashing (or other workflows with `git`), you can\n-alternatively enable \"Allow edits from maintainers\" in the right GitHub\n-sidebar and ask for help in the pull request.\n+If you have problems with squashing (or other workflows with `git`),\n+you can alternatively enable \"Allow edits from maintainers\" in the right\n+GitHub sidebar and ask for help in the pull request.\n \n Please refrain from creating several pull requests for the same change.\n-Use the pull request that is already open (or was created earlier) to amend\n-changes. This preserves the discussion and review that happened earlier for\n-the respective change set.\n+Use the pull request that is already open (or was created earlier) to\n+amend changes. This preserves the discussion and review that happened\n+earlier for the respective change set.\n \n-The length of time required for peer review is unpredictable and will vary from\n-pull request to pull request.\n+The length of time required for peer review is unpredictable and will\n+vary from pull request to pull request.\n \n \n Pull Request Philosophy\n -----------------------\n \n-Patchsets should always be focused. For example, a pull request could add a\n-feature, fix a bug, or refactor code; but not a mixture. Please also avoid super\n-pull requests which attempt to do too much, are overly large, or overly complex\n-as this makes review difficult.\n+Patchsets should always be focused. For example, a pull request could\n+add a feature, fix a bug, or refactor code; but not a mixture. Please\n+also avoid super pull requests which attempt to do too much, are overly\n+large, or overly complex as this makes review difficult.\n \n \n ### Features\n \n-When adding a new feature, thought must be given to the long term technical debt\n-and maintenance that feature may require after inclusion. Before proposing a new\n-feature that will require maintenance, please consider if you are willing to\n-maintain it (including bug fixing). If features get orphaned with no maintainer\n-in the future, they may be removed by the Repository Maintainer.\n+When adding a new feature, thought must be given to the long\n+term technical debt and maintenance that feature may require after\n+inclusion. Before proposing a new feature that will require maintenance,\n+please consider if you are willing to maintain it (including bug\n+fixing). If features get orphaned with no maintainer in the future,\n+they may be removed by the Repository Maintainer.\n \n \n ### Refactoring\n \n Refactoring is a necessary part of any software project's evolution. The\n following guidelines cover refactoring pull requests for the project.\n \n-There are three categories of refactoring, code only moves, code style fixes,\n-code refactoring. In general refactoring pull requests should not mix these\n-three kinds of activity in order to make refactoring pull requests easy to\n-review and uncontroversial. In all cases, refactoring PRs must not change the\n-behaviour of code within the pull request (bugs must be preserved as is).\n+There are three categories of refactoring, code only moves, code style\n+fixes, code refactoring. In general refactoring pull requests should\n+not mix these three kinds of activity in order to make refactoring pull\n+requests easy to review and uncontroversial. In all cases, refactoring\n+PRs must not change the behaviour of code within the pull request (bugs\n+must be preserved as is).\n \n-Project maintainers aim for a quick turnaround on refactoring pull requests, so\n-where possible keep them short, uncomplex and easy to verify.\n+Project maintainers aim for a quick turnaround on refactoring pull\n+requests, so where possible keep them short, uncomplex and easy to verify.\n \n-Pull requests that refactor the code should not be made by new contributors. It\n-requires a certain level of experience to know where the code belongs to and to\n-understand the full ramification (including rebase effort of open pull requests).\n+Pull requests that refactor the code should not be made by new\n+contributors. It requires a certain level of experience to know where\n+the code belongs to and to understand the full ramification (including\n+rebase effort of open pull requests).\n \n-Trivial pull requests or pull requests that refactor the code with no clear\n-benefits may be immediately closed by the maintainers to reduce unnecessary\n-workload on reviewing.\n+Trivial pull requests or pull requests that refactor the code with no\n+clear benefits may be immediately closed by the maintainers to reduce\n+unnecessary workload on reviewing.\n \n \n \"Decision Making\" Process\n -------------------------\n \n-The following applies to code changes to the Bitcoin Core project (and related\n-projects such as libsecp256k1), and is not to be confused with overall Bitcoin\n-Network Protocol consensus changes.\n+The following applies to code changes to the Bitcoin Core project (and\n+related projects such as libsecp256k1), and is not to be confused with\n+overall Bitcoin Network Protocol consensus changes.\n \n-Whether a pull request is merged into Bitcoin Core rests with the project merge\n-maintainers and ultimately the project lead.\n+Whether a pull request is merged into Bitcoin Core rests with the project\n+merge maintainers and ultimately the project lead.\n \n-Maintainers will take into consideration if a patch is in line with the general\n-principles of the project; meets the minimum standards for inclusion; and will\n-judge the general consensus of contributors.\n+Maintainers will take into consideration if a patch is in line with\n+the general principles of the project; meets the minimum standards for\n+inclusion; and will judge the general consensus of contributors.\n \n In general, all pull requests must:\n \n-  - Have a clear use case, fix a demonstrable bug or serve the greater good of\n-    the project (for example refactoring for modularisation);\n+  - Have a clear use case, fix a demonstrable bug or serve the greater\n+    good of the project (for example refactoring for modularisation);\n   - Be well peer reviewed;\n   - Have unit tests and functional tests where appropriate;\n-  - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n+  - Follow code style guidelines ([C++], [functional tests]);\n   - Not break the existing test suite;\n   - Where bugs are fixed, where possible, there should be unit tests\n-    demonstrating the bug and also proving the fix. This helps prevent regression.\n+    demonstrating the bug and also proving the fix. This helps prevent\n+    regression.\n+\n+[C++]: doc/developer-notes.md\n+[functional tests]: test/functional/README.md\n \n-Patches that change Bitcoin consensus rules are considerably more involved than\n-normal because they affect the entire ecosystem and so must be preceded by\n-extensive mailing list discussions and have a numbered BIP. While each case will\n-be different, one should be prepared to expend more time and effort than for\n-other kinds of patches because of increased peer review and consensus building\n-requirements.\n+Patches that change Bitcoin consensus rules are considerably more\n+involved than normal because they affect the entire ecosystem and so must\n+be preceded by extensive mailing list discussions and have a numbered\n+BIP. While each case will be different, one should be prepared to expend\n+more time and effort than for other kinds of patches because of increased\n+peer review and consensus building requirements.\n \n \n ### Peer Review\n \n-Anyone may participate in peer review which is expressed by comments in the pull\n-request. Typically reviewers will review the code for obvious errors, as well as\n-test out the patch set and opine on the technical merits of the patch. Project\n-maintainers take into account the peer review when determining if there is\n-consensus to merge a pull request (remember that discussions may have been\n-spread out over GitHub, mailing list and IRC discussions). The following\n-language is used within pull-request comments:\n+Anyone may participate in peer review which is expressed by comments\n+in the pull request. Typically reviewers will review the code for\n+obvious errors, as well as test out the patch set and opine on the\n+technical merits of the patch. Project maintainers take into account\n+the peer review when determining if there is consensus to merge a pull\n+request (remember that discussions may have been spread out over GitHub,\n+mailing list and IRC discussions). The following language is used within\n+pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";\n-  - NACK means \"I disagree this should be merged\", and must be accompanied by\n-    sound technical justification (or in certain cases of copyright/patent/licensing\n-    issues, legal justification). NACKs without accompanying reasoning may be\n-    disregarded;\n-  - utACK means \"I have not tested the code, but I have reviewed it and it looks\n-    OK, I agree it can be merged\";\n-  - Concept ACK means \"I agree in the general principle of this pull request\";\n+  - NACK means \"I disagree this should be merged\", and must be\n+    accompanied by sound technical justification (or in certain cases\n+    of copyright/patent/licensing issues, legal justification). NACKs\n+    without accompanying reasoning may be disregarded;\n+  - utACK means \"I have not tested the code, but I have reviewed it and\n+    it looks OK, I agree it can be merged\";\n+  - Concept ACK means \"I agree in the general principle of this pull\n+    request\";\n   - Nit refers to trivial, often non-blocking issues.\n \n-Reviewers should include the commit hash which they reviewed in their comments.\n+Reviewers should include the commit hash which they reviewed in their\n+comments.\n \n-Project maintainers reserve the right to weigh the opinions of peer reviewers\n-using common sense judgement and also may weight based on meritocracy: Those\n-that have demonstrated a deeper commitment and understanding towards the project\n-(over time) or have clear domain expertise may naturally have more weight, as\n-one would expect in all walks of life.\n+Project maintainers reserve the right to weigh the opinions of peer\n+reviewers using common sense judgement and also may weight based on\n+meritocracy: Those that have demonstrated a deeper commitment and\n+understanding towards the project (over time) or have clear domain\n+expertise may naturally have more weight, as one would expect in all\n+walks of life.\n \n-Where a patch set affects consensus critical code, the bar will be set much\n-higher in terms of discussion and peer review requirements, keeping in mind that\n-mistakes could be very costly to the wider community. This includes refactoring\n-of consensus critical code.\n+Where a patch set affects consensus critical code, the bar will be set\n+much higher in terms of discussion and peer review requirements, keeping\n+in mind that mistakes could be very costly to the wider community. This\n+includes refactoring of consensus critical code.\n \n-Where a patch set proposes to change the Bitcoin consensus, it must have been\n-discussed extensively on the mailing list and IRC, be accompanied by a widely\n-discussed BIP and have a generally widely perceived technical consensus of being\n-a worthwhile change based on the judgement of the maintainers.\n+Where a patch set proposes to change the Bitcoin consensus, it must have\n+been discussed extensively on the mailing list and IRC, be accompanied by\n+a widely discussed BIP and have a generally widely perceived technical\n+consensus of being a worthwhile change based on the judgement of the\n+maintainers.\n \n ### Finding Reviewers\n \n-As most reviewers are themselves developers with their own projects, the review\n-process can be quite lengthy, and some amount of patience is required. If you find\n-that you've been waiting for a pull request to be given attention for several\n-months, there may be a number of reasons for this, some of which you can do something\n-about:\n-\n-  - It may be because of a feature freeze due to an upcoming release. During this time,\n-    only bug fixes are taken into consideration. If your pull request is a new feature,\n-    it will not be prioritized until the release is over. Wait for release.\n-  - It may be because the changes you are suggesting do not appeal to people. Rather than\n-    nits and critique, which require effort and means they care enough to spend time on your\n-    contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n-    (because people don't assume *others* won't actually like the proposal). Don't take\n-    that personally, though! Instead, take another critical look at what you are suggesting\n-    and see if it: changes too much, is too broad, doesn't adhere to the\n-    [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n-    Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n-    their opinion on the concept itself.\n-  - It may be because your code is too complex for all but a few people. And those people\n-    may not have realized your pull request even exists. A great way to find people who\n-    are qualified and care about the code you are touching is the\n-    [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n-    find the person touching the code you are touching before you and see if you can find\n-    them and give them a nudge. Don't be incessant about the nudging though.\n-  - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n-    a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n-    no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n-    when someone else is asking for feedback on their code, and universe balances out.\n+As most reviewers are themselves developers with their own projects,\n+the review process can be quite lengthy, and some amount of patience\n+is required. If you find that you've been waiting for a pull request to\n+be given attention for several months, there may be a number of reasons\n+for this, some of which you can do something about:\n+\n+  - It may be because of a feature freeze due to an upcoming\n+    release. During this time, only bug fixes are taken into\n+    consideration. If your pull request is a new feature, it will not\n+    be prioritized until the release is over. Wait for release.\n+  - It may be because the changes you are suggesting do not appeal\n+    to people. Rather than nits and critique, which require effort\n+    and means they care enough to spend time on your contribution,\n+    thundering silence is a good sign of widespread (mild) dislike of a\n+    given change (because people don't assume *others* won't actually\n+    like the proposal). Don't take that personally, though! Instead,\n+    take another critical look at what you are suggesting and see if it:\n+    changes too much, is too broad, doesn't adhere to the [developer\n+    notes](doc/developer-notes.md), is dangerous or insecure, is messily\n+    written, etc.  Identify and address any of the issues you find. Then\n+    ask e.g. on IRC if someone could give their opinion on the concept\n+    itself.\n+  - It may be because your code is too complex for all but a few\n+    people. And those people may not have realized your pull request\n+    even exists. A great way to find people who are qualified\n+    and care about the code you are touching is the [Git Blame\n+    feature](https://help.github.com/articles/tracing-changes-in-a-file/).\n+    Simply find the person touching the code you are touching before\n+    you and see if you can find them and give them a nudge. Don't be\n+    incessant about the nudging though.\n+  - Finally, if all else fails, ask on IRC or elsewhere for someone to\n+    give your pull request a look. If you think you've been waiting an\n+    unreasonably long amount of time (month+) for no particular reason\n+    (few lines changed, etc), this is totally fine. Try to return the\n+    favor when someone else is asking for feedback on their code, and\n+    universe balances out.\n \n \n Release Policy\n@@ -298,7 +341,8 @@ The project leader is the release manager for each Bitcoin Core release.\n Copyright\n ---------\n \n-By contributing to this repository, you agree to license your work under the \n-MIT license unless specified otherwise in `contrib/debian/copyright` or at \n-the top of the file itself. Any work contributed where you are not the original \n-author must contain its license header with the original author(s) and source.\n+By contributing to this repository, you agree to license your work under\n+the MIT license unless specified otherwise in `contrib/debian/copyright`\n+or at the top of the file itself. Any work contributed where you are not\n+the original author must contain its license header with the original\n+author(s) and source."
      },
      {
        "sha": "6d36b605b643fee261abed997dc9f42ea72eefff",
        "filename": "INSTALL.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,5 +1,5 @@\n Building Bitcoin\n ================\n \n-See doc/build-*.md for instructions on building the various\n+See `doc/build-*.md` for instructions on building the various\n elements of the Bitcoin Core reference implementation of Bitcoin."
      },
      {
        "sha": "06df85da164ca427a7c766700f9cf2586d5e9296",
        "filename": "README.md",
        "status": "modified",
        "additions": 56,
        "deletions": 36,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,76 +1,96 @@\n Bitcoin Core integration/staging tree\n =====================================\n \n-[![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n+[![Build Status][ci-travis-icon]][ci-travis]\n+\n+[ci-travis-icon]: https://travis-ci.org/bitcoin/bitcoin.svg?branch=master\n+[ci-travis]: https://travis-ci.org/bitcoin/bitcoin\n \n https://bitcoincore.org\n \n What is Bitcoin?\n ----------------\n \n-Bitcoin is an experimental digital currency that enables instant payments to\n-anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n-with no central authority: managing transactions and issuing money are carried\n-out collectively by the network. Bitcoin Core is the name of open source\n-software which enables the use of this currency.\n+Bitcoin is an experimental digital currency that enables instant payments\n+to anyone, anywhere in the world.\n+Bitcoin uses peer-to-peer technology to operate with no central authority:\n+managing transactions and issuing money are carried out collectively by\n+the network.\n+Bitcoin Core is the name of open source software which enables the use\n+of this currency.\n \n-For more information, as well as an immediately useable, binary version of\n-the Bitcoin Core software, see https://bitcoincore.org/en/download/, or read the\n-[original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n+For more information, as well as an immediately useable, binary version\n+of the Bitcoin Core software, see https://bitcoincore.org/en/download/,\n+or read the [original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n \n License\n -------\n \n-Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n-information or see https://opensource.org/licenses/MIT.\n+Bitcoin Core is released under the terms of the MIT\n+license. See [COPYING](COPYING) for more information or see\n+https://opensource.org/licenses/MIT.\n \n Development Process\n -------------------\n \n-The `master` branch is regularly built and tested, but is not guaranteed to be\n-completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin Core.\n+The `master` branch is regularly built and tested, but is not guaranteed\n+to be completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags)\n+are created regularly to indicate new official, stable release versions\n+of Bitcoin Core.\n \n-The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n+The contribution workflow is described in\n+[CONTRIBUTING.md](CONTRIBUTING.md).\n \n Testing\n -------\n \n-Testing and code review is the bottleneck for development; we get more pull\n-requests than we can review and test on short notice. Please be patient and help out by testing\n-other people's pull requests, and remember this is a security-critical project where any mistake might cost people\n-lots of money.\n+Testing and code review is the bottleneck for development; we get more\n+pull requests than we can review and test on short notice.\n+Please be patient and help out by testing other people's pull requests,\n+and remember this is a security-critical project where any mistake might\n+cost people lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\n-submit new unit tests for old code. Unit tests can be compiled and run\n-(assuming they weren't disabled in configure) with: `make check`. Further details on running\n-and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n+Developers are strongly encouraged to write [unit\n+tests](src/test/README.md) for new code, and to submit new unit tests\n+for old code.\n+Unit tests can be compiled and run (assuming they weren't disabled in\n+configure) with: `make check`.\n+Further details on running and extending unit tests can be found in\n+[/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/test), written\n in Python, that are run automatically on the build server.\n-These tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n+These tests can be run (if the [test dependencies](/test) are installed)\n+with: `test/functional/test_runner.py`\n \n-The Travis CI system makes sure that every pull request is built for Windows, Linux, and macOS, and that unit/sanity tests are run automatically.\n+The Travis CI system makes sure that every pull request is built\n+for Windows, Linux, and macOS, and that unit/sanity tests are run\n+automatically.\n \n ### Manual Quality Assurance (QA) Testing\n \n-Changes should be tested by somebody other than the developer who wrote the\n-code. This is especially important for large or high-risk changes. It is useful\n-to add a test plan to the pull request description if testing the changes is\n-not straightforward.\n+Changes should be tested by somebody other than the developer who wrote\n+the code. This is especially important for large or high-risk changes.\n+It is useful to add a test plan to the pull request description if testing\n+the changes is not straightforward.\n \n Translations\n ------------\n \n-Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n+Changes to translations as well as new translations\n+can be submitted to [Bitcoin Core's Transifex\n+page](https://www.transifex.com/projects/p/bitcoin/).\n \n-Translations are periodically pulled from Transifex and merged into the git repository. See the\n-[translation process](doc/translation_process.md) for details on how this works.\n+Translations are periodically pulled from Transifex and merged into the\n+git repository.\n+See the [translation process](doc/translation_process.md)\n+for details on how this works.\n \n-**Important**: We do not accept translation changes as GitHub pull requests because the next\n-pull from Transifex would automatically overwrite them again.\n+**Important**: We do not accept translation changes as GitHub pull\n+requests because the next pull from Transifex would automatically\n+overwrite them again.\n \n-Translators should also subscribe to the [mailing list](https://groups.google.com/forum/#!forum/bitcoin-translators).\n+Translators should also subscribe to the [mailing\n+list](https://groups.google.com/forum/#!forum/bitcoin-translators)."
      },
      {
        "sha": "3a48092855b6f8083651991496063c1c0e9e5bd5",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,5 +1,10 @@\n ### QoS (Quality of service) ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n+This is a Linux bash script that will set up tc to limit the outgoing\n+bandwidth for connections to the Bitcoin network. It limits outbound\n+TCP traffic with a source or destination port of 8333, but not if the\n+destination IP is within a LAN.\n \n-This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it.\n+This means one can have an always-on bitcoind instance running, and\n+another local bitcoind/bitcoin-qt instance which connects to this node\n+and receives blocks from it."
      },
      {
        "sha": "06aa32ddcbbb4d4de9bdc73ee87871893174295f",
        "filename": "depends/packages.md",
        "status": "modified",
        "additions": 82,
        "deletions": 70,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/depends/packages.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/depends/packages.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,60 +1,64 @@\n Each recipe consists of 3 main parts: defining identifiers, setting build\n variables, and defining build commands.\n \n-The package \"mylib\" will be used here as an example\n+The package `mylib` will be used here as an example\n \n General tips:\n-- mylib_foo is written as $(package)_foo in order to make recipes more similar.\n+\n+- `mylib_foo` is written as `$(package)_foo` in order to make recipes\n+  more similar.\n \n ## Identifiers\n Each package is required to define at least these variables:\n \n-    $(package)_version:\n-    Version of the upstream library or program. If there is no version, a\n-    placeholder such as 1.0 can be used.\n+### `$(package)_version`\n+Version of the upstream library or program. If there is no version, a\n+placeholder such as 1.0 can be used.\n+\n+### `$(package)_download_path`\n+Location of the upstream source, without the file-name. Usually http or\n+ftp.\n \n-    $(package)_download_path:\n-    Location of the upstream source, without the file-name. Usually http or\n-    ftp.\n+### `$(package)_file_name`\n+The upstream source filename available at the download path.\n \n-    $(package)_file_name:\n-    The upstream source filename available at the download path.\n+### `$(package)_sha256_hash`\n+The sha256 hash of the upstream file\n \n-    $(package)_sha256_hash:\n-    The sha256 hash of the upstream file\n \n-These variables are optional:\n+## Optional Identifiers\n+Following variables are optional:\n \n-    $(package)_build_subdir:\n-    cd to this dir before running configure/build/stage commands.\n+### `$(package)_build_subdir`\n+`cd` to this dir before running `configure/build/stage` commands.\n     \n-    $(package)_download_file:\n-    The file-name of the upstream source if it differs from how it should be\n-    stored locally. This can be used to avoid storing file-names with strange\n-    characters.\n+### `$(package)_download_file`\n+The file-name of the upstream source if it differs from how it should be\n+stored locally. This can be used to avoid storing file-names with strange\n+characters.\n     \n-    $(package)_dependencies:\n-    Names of any other packages that this one depends on.\n+### `$(package)_dependencies`\n+Names of any other packages that this one depends on.\n     \n-    $(package)_patches:\n-    Filenames of any patches needed to build the package\n+### `$(package)_patches`\n+Filenames of any patches needed to build the package\n \n-    $(package)_extra_sources:\n-    Any extra files that will be fetched via $(package)_fetch_cmds. These are\n-    specified so that they can be fetched and verified via 'make download'.\n+### `$(package)_extra_sources`\n+Any extra files that will be fetched via $(package)_fetch_cmds. These are\n+specified so that they can be fetched and verified via 'make download'.\n \n \n ## Build Variables:\n-After defining the main identifiers, build variables may be added or customized\n-before running the build commands. They should be added to a function called\n-$(package)_set_vars. For example:\n+After defining the main identifiers, build variables may be added or\n+customized before running the build commands. They should be added to\n+a function called `$(package)_set_vars`. For example:\n \n     define $(package)_set_vars\n     ...\n     endef\n \n-Most variables can be prefixed with the host, architecture, or both, to make\n-the modifications specific to that case. For example:\n+Most variables can be prefixed with the host, architecture, or both,\n+to make the modifications specific to that case. For example:\n \n     Universal:     $(package)_cc=gcc\n     Linux only:    $(package)_linux_cc=gcc\n@@ -81,66 +85,74 @@ These variables may be set to override or append their default values.\n     $(package)_build_opts\n     $(package)_config_opts\n \n-The *_env variables are used to add environment variables to the respective\n-commands.\n+The `*_env` variables are used to add environment variables to the\n+respective commands.\n \n-Many variables respect a debug/release suffix as well, in order to use them for\n-only the appropriate build config. For example:\n+Many variables respect a `debug/release suffix` as well, in order to\n+use them for only the appropriate build config. For example:\n \n     $(package)_cflags_release = -O3\n     $(package)_cflags_i686_debug = -g\n     $(package)_config_opts_release = --disable-debug\n \n These will be used in addition to the options that do not specify\n-debug/release. All builds are considered to be release unless DEBUG=1 is set by\n-the user. Other variables may be defined as needed.\n+`debug/release`. All builds are considered to be release unless `DEBUG=1`\n+is set by the user. Other variables may be defined as needed.\n \n ## Build commands:\n \n-  For each build, a unique build dir and staging dir are created. For example,\n-  `work/build/mylib/1.0-1adac830f6e` and `work/staging/mylib/1.0-1adac830f6e`.\n+For each build, a unique build dir and staging dir are\n+created. For example, `work/build/mylib/1.0-1adac830f6e` and\n+`work/staging/mylib/1.0-1adac830f6e`.\n+\n+The following build commands are available for each recipe:\n+\n+### `$(package)_fetch_cmds`\n+Runs from: build dir\n+\n+Fetch the source file. If undefined, it will be fetched and verified\n+against its hash.\n+\n+### `$(package)_extract_cmds`\n+Runs from: build dir\n+\n+Verify the source file against its hash and extract it. If undefined, the\n+source is assumed to be a tarball.\n+\n+### `$(package)_preprocess_cmds`\n+Runs from: build dir/$(package)_build_subdir\n \n-  The following build commands are available for each recipe:\n+Preprocess the source as necessary. If undefined, does nothing.\n \n-    $(package)_fetch_cmds:\n-    Runs from: build dir\n-    Fetch the source file. If undefined, it will be fetched and verified\n-    against its hash.\n+### `$(package)_config_cmds`\n+Runs from: build dir/$(package)_build_subdir\n \n-    $(package)_extract_cmds:\n-    Runs from: build dir\n-    Verify the source file against its hash and extract it. If undefined, the\n-    source is assumed to be a tarball.\n+Configure the source. If undefined, does nothing.\n \n-    $(package)_preprocess_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Preprocess the source as necessary. If undefined, does nothing.\n+### `$(package)_build_cmds`\n+Runs from: build dir/$(package)_build_subdir\n \n-    $(package)_config_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Configure the source. If undefined, does nothing.\n+Build the source. If undefined, does nothing.\n \n-    $(package)_build_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Build the source. If undefined, does nothing.\n+### `$(package)_stage_cmds`\n+Runs from: build dir/$(package)_build_subdir\n \n-    $(package)_stage_cmds:\n-    Runs from: build dir/$(package)_build_subdir\n-    Stage the build results. If undefined, does nothing.\n+Stage the build results. If undefined, does nothing.\n \n-  The following variables are available for each recipe:\n+## Build Variables\n+The following variables are available for each recipe:\n     \n-    $(1)_staging_dir: package's destination sysroot path\n-    $(1)_staging_prefix_dir: prefix path inside of the package's staging dir\n-    $(1)_extract_dir: path to the package's extracted sources\n-    $(1)_build_dir: path where configure/build/stage commands will be run\n-    $(1)_patch_dir: path where the package's patches (if any) are found\n+  1. `$(1)_staging_dir`: package's destination sysroot path\n+  1. `$(1)_staging_prefix_dir`: prefix path inside of the package's staging dir\n+  1. `$(1)_extract_dir`: path to the package's extracted sources\n+  1. `$(1)_build_dir`: path where configure/build/stage commands will be run\n+  1. `$(1)_patch_dir`: path where the package's patches (if any) are found\n \n-Notes on build commands:\n+## Notes on build commands:\n \n-For packages built with autotools, $($(package)_autoconf) can be used in the\n-configure step to (usually) correctly configure automatically. Any\n-$($(package)_config_opts) will be appended.\n+For packages built with autotools, `$($(package)_autoconf)` can be used\n+in the configure step to (usually) correctly configure automatically. Any\n+`$($(package)_config_opts)` will be appended.\n \n Most autotools projects can be properly staged using:\n "
      },
      {
        "sha": "bab5483e974374b14555606d73c70b65ac7641ab",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -13,27 +13,32 @@ can be found in the contrib/init folder.\n Service User\n ---------------------------------\n \n-All three Linux startup configurations assume the existence of a \"bitcoin\" user\n-and group.  They must be created before attempting to use these scripts.\n-The macOS configuration assumes bitcoind will be set up for the current user.\n+All three Linux startup configurations assume the existence of a \"bitcoin\"\n+user and group.\n+They must be created before attempting to use these scripts.\n+The macOS configuration assumes bitcoind will be set up for\n+the current user.\n \n Configuration\n ---------------------------------\n \n-At a bare minimum, bitcoind requires that the rpcpassword setting be set\n-when running as a daemon.  If the configuration file does not exist or this\n-setting is not set, bitcoind will shutdown promptly after startup.\n-\n-This password does not have to be remembered or typed as it is mostly used\n-as a fixed token that bitcoind and client programs read from the configuration\n-file, however it is recommended that a strong and secure password be used\n-as this password is security critical to securing the wallet should the\n-wallet be enabled.\n-\n-If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set,\n-it will use a special cookie file for authentication. The cookie is generated with random\n-content when the daemon starts, and deleted when it exits. Read access to this file\n-controls who can access it through RPC.\n+At a bare minimum, bitcoind requires that the rpcpassword setting be\n+set when running as a daemon.\n+If the configuration file does not exist or this setting is not set,\n+bitcoind will shutdown promptly after startup.\n+\n+This password does not have to be remembered or typed as it is mostly\n+used as a fixed token that bitcoind and client programs read from the\n+configuration file, however it is recommended that a strong and secure\n+password be used as this password is security critical to securing the\n+wallet should the wallet be enabled.\n+\n+If bitcoind is run with the \"-server\" flag (set by default),\n+and no rpcpassword is set, it will use a special cookie file for\n+authentication.\n+The cookie is generated with random content when the daemon starts,\n+and deleted when it exits.\n+Read access to this file controls who can access it through RPC.\n \n By default the cookie is stored in the data directory, but it's location can be overridden\n with the option '-rpccookiefile'."
      },
      {
        "sha": "46534ff24efb65fa2a03519c09462e7b2c46bf15",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 27,
        "deletions": 23,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/773c94ebfbefc483f74bfa0456d6aaa4fb0a2981/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=773c94ebfbefc483f74bfa0456d6aaa4fb0a2981",
        "patch": "@@ -1,12 +1,12 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+(note: this is a temporary file, to be added-to by anybody, and moved\n+to release-notes at release time)\n \n Bitcoin Core version *version* is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This is a new major version release, including new features, various\n+bugfixes and performance improvements, as well as updated translations.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -19,27 +19,29 @@ To receive security and update notifications, please subscribe to:\n How to Upgrade\n ==============\n \n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n+If you are running an older version, shut it down. Wait until it\n+has completely shut down (which might take a few minutes for older\n+versions), then run the installer (on Windows) or just copy over\n+`/Applications/Bitcoin-Qt` (on Mac) or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n+The first time you run version 0.15.0, your chainstate database will be\n+converted to a new format, which will take anywhere from a few minutes\n+to half an hour, depending on the speed of your machine.\n \n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n+Note that the block database format also changed in version 0.8.0 and\n+there is no automatic upgrade code from before version 0.8 to version\n+0.15.0. Upgrading directly from 0.7.x and earlier without redownloading\n+the blockchain is not supported.  However, as usual, old wallet versions\n+are still supported.\n \n Downgrading warning\n -------------------\n \n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n+The chainstate database for this release is not compatible with\n+previous releases, so if you run 0.15 and then decide to switch back\n+to any older version, you will need to run the old release with the\n+`-reindex-chainstate` option to rebuild the chainstate data structures\n+in the old format.\n \n If your node has pruning enabled, this will entail re-downloading and\n processing the entire blockchain.\n@@ -48,10 +50,11 @@ Compatibility\n ==============\n \n Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is\n+not supported).\n \n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n+Bitcoin Core should also work on most other Unix-like systems but is\n+not frequently tested on them.\n \n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n@@ -158,4 +161,5 @@ Credits\n Thanks to everyone who directly contributed to this release:\n \n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+As well as everyone that helped translating on\n+[Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  }
]