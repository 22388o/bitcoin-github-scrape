[
  {
    "sha": "87cce04c171800d29df1f13ecf9b36c933262b08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2NjZTA0YzE3MTgwMGQyOWRmMWYxM2VjZjliMzZjOTMzMjYyYjA4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-05-17T10:07:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-06-14T11:37:43Z"
      },
      "message": "Refactor fee rules to make them actually readable.\n\nThis (nearly) doesn't change fee rules at all:\n * To make it into the fee transaction area, the dPriority comparison\n   changed from < to <=\n * We now just ignore transactions > MAX_BLOCK_SIZE/4 instead of\n   doing some calculations to require increasingly large fees as\n   size increases.",
      "tree": {
        "sha": "763dc008f7a63eab53b26bc3f82c0833adb7240e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/763dc008f7a63eab53b26bc3f82c0833adb7240e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87cce04c171800d29df1f13ecf9b36c933262b08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87cce04c171800d29df1f13ecf9b36c933262b08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87cce04c171800d29df1f13ecf9b36c933262b08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87cce04c171800d29df1f13ecf9b36c933262b08/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1020b780a1493c6a709f70756b2af54a7126f40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1020b780a1493c6a709f70756b2af54a7126f40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1020b780a1493c6a709f70756b2af54a7126f40"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 15,
      "deletions": 29
    },
    "files": [
      {
        "sha": "4a68f6eda3aedcd895add0e7ecb10378bd22b97a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 26,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87cce04c171800d29df1f13ecf9b36c933262b08/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87cce04c171800d29df1f13ecf9b36c933262b08/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87cce04c171800d29df1f13ecf9b36c933262b08",
        "patch": "@@ -634,30 +634,23 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize, bool fAllowFree, enum GetMinFee_mode mode)\n+int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode)\n {\n     // Base fee is either nMinTxFee or nMinRelayTxFee\n     int64 nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n \n     unsigned int nBytes = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-    unsigned int nNewBlockSize = nBlockSize + nBytes;\n     int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n \n     if (fAllowFree)\n     {\n-        if (nBlockSize == 1)\n-        {\n-            // Transactions under 10K are free\n-            // (about 4500 BTC if made of 50 BTC inputs)\n-            if (nBytes < 10000)\n-                nMinFee = 0;\n-        }\n-        else\n-        {\n-            // Free transaction area\n-            if (nNewBlockSize < 27000)\n-                nMinFee = 0;\n-        }\n+        // There is a free transaction area in blocks created by most miners,\n+        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+        //   to be considered to fall into this category\n+        // * If we are creating a transaction we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 17000\n+        //   (= 10000) to be considered safe and assume they can likely make it into this section\n+        if (nBytes < (mode == GMF_SEND ? (DEFAULT_BLOCK_PRIORITY_SIZE - 17000) : (DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n+            nMinFee = 0;\n     }\n \n     // To limit dust spam, require base fee if any output is less than 0.01\n@@ -668,14 +661,6 @@ int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize, bool fAllowFree\n                 nMinFee = nBaseFee;\n     }\n \n-    // Raise the price as the block approaches full\n-    if (nBlockSize != 1 && nNewBlockSize >= MAX_BLOCK_SIZE_GEN/2)\n-    {\n-        if (nNewBlockSize >= MAX_BLOCK_SIZE_GEN)\n-            return MAX_MONEY;\n-        nMinFee *= MAX_BLOCK_SIZE_GEN / (MAX_BLOCK_SIZE_GEN - nNewBlockSize);\n-    }\n-\n     if (!MoneyRange(nMinFee))\n         nMinFee = MAX_MONEY;\n     return nMinFee;\n@@ -799,7 +784,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        int64 txMinFee = GetMinFee(tx, 1000, true, GMF_RELAY);\n+        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n             return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n                          hash.ToString().c_str(),\n@@ -4187,7 +4172,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n \n     // How much of the block should be dedicated to high-priority transactions,\n     // included regardless of the fees they pay\n-    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", 27000);\n+    unsigned int nBlockPrioritySize = GetArg(\"-blockprioritysize\", DEFAULT_BLOCK_PRIORITY_SIZE);\n     nBlockPrioritySize = std::min(nBlockMaxSize, nBlockPrioritySize);\n \n     // Minimum block size you want to create; block will be filled with free transactions\n@@ -4315,7 +4300,7 @@ CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n             // Prioritize by fee once past the priority size or we run out of high-priority\n             // transactions:\n             if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || (dPriority < COIN * 144 / 250)))\n+                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n             {\n                 fSortedByFee = true;\n                 comparer = TxPriorityCompare(fSortedByFee);"
      },
      {
        "sha": "c0c7ba8d89fb3e49611fefea742b2751dc4e57c5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87cce04c171800d29df1f13ecf9b36c933262b08/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87cce04c171800d29df1f13ecf9b36c933262b08/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=87cce04c171800d29df1f13ecf9b36c933262b08",
        "patch": "@@ -52,6 +52,8 @@ static const int COINBASE_MATURITY = 100;\n static const unsigned int LOCKTIME_THRESHOLD = 500000000; // Tue Nov  5 00:53:20 1985 UTC\n /** Maximum number of script-checking threads allowed */\n static const int MAX_SCRIPTCHECK_THREADS = 16;\n+/** Default amount of block size reserved for high-priority transactions (in bytes) */\n+static const int DEFAULT_BLOCK_PRIORITY_SIZE = 27000;\n #ifdef USE_UPNP\n static const int fHaveUPnP = true;\n #else\n@@ -262,12 +264,11 @@ struct CDiskTxPos : public CDiskBlockPos\n \n enum GetMinFee_mode\n {\n-    GMF_BLOCK,\n     GMF_RELAY,\n     GMF_SEND,\n };\n \n-int64 GetMinFee(const CTransaction& tx, unsigned int nBlockSize = 1, bool fAllowFree = true, enum GetMinFee_mode mode = GMF_BLOCK);\n+int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode);\n \n //\n // Check transaction inputs, and make sure any"
      },
      {
        "sha": "b1828f471d0f9be8019450f2b449e9b662a6deb6",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87cce04c171800d29df1f13ecf9b36c933262b08/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87cce04c171800d29df1f13ecf9b36c933262b08/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=87cce04c171800d29df1f13ecf9b36c933262b08",
        "patch": "@@ -1301,7 +1301,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n                 bool fAllowFree = AllowFree(dPriority);\n-                int64 nMinFee = GetMinFee(wtxNew, 1, fAllowFree, GMF_SEND);\n+                int64 nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);"
      }
    ]
  }
]