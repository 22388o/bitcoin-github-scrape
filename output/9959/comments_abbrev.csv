sdaftuar,2017-03-09T19:10:29Z,Update OP with a correction and a more relevant statistic.,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-285449398,285449398,
TheBlueMatt,2017-03-09T20:05:44Z,"utACK 03a407662b008fe030d81bb54dfd3b677b248392, didnt bother to benchmark, should be obvious wins, even if minor.",https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-285465536,285465536,
TheBlueMatt,2017-03-24T21:24:54Z,Is this worth backporting (my vote would be weak yes)?,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-289146625,289146625,
sdaftuar,2017-03-26T17:20:03Z,"@thebluematt I don't feel strongly about whether we backport this change, to be honest (though it's simple enough that I don't think there's any downside).  \n\nBut it would be nice to merge this into master if there are no further comments, so I can continue work on additional mining changes (to support excluding recently received transactions if the fee difference from doing so is below some t",https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-289299885,289299885,
sdaftuar,2017-03-29T16:40:03Z,Addressed @JeremyRubin's nits.,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-290148594,290148594,
JeremyRubin,2017-03-29T16:41:24Z,re-utack 4d1eb10,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-290148970,290148970,
sdaftuar,2017-03-29T17:59:46Z,Squashed 4d1eb10 -> 011124a,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-290171987,290171987,
TheBlueMatt,2017-03-29T19:13:59Z,re-utACK 011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0,https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-290195556,290195556,
laanwj,2017-03-31T09:46:27Z,Removing 'needs backport' label as a backport exists (#10127),https://github.com/bitcoin/bitcoin/pull/9959#issuecomment-290668756,290668756,
luke-jr,2017-03-09T19:27:22Z,"Might make more sense to put these on the class, rather than pass by-reference?",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105249723,105249723,src/miner.cpp
luke-jr,2017-03-09T19:29:06Z,The old code used 50 for this. Does 1000 work good enough in practice?,https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105250148,105250148,src/miner.cpp
luke-jr,2017-03-09T19:31:31Z,"Perhaps the additional condition(s) should be before incrementing, or we could end up just aborting immediately as we approach the max block weight even if we could easily fit a few more txs in.",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105250686,105250686,src/miner.cpp
sdaftuar,2017-03-10T13:33:49Z,"I'm working on a refactor of the `BlockAssembler` members separately (as part of a patch to exclude recent transactions from new blocks, when the fee difference is negligible), so I'd prefer to defer the decision of whether to include this in the class until I'm ready to PR that patch.",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105396576,105396576,src/miner.cpp
sdaftuar,2017-03-10T13:34:25Z,"Yes, well I also tried setting this to 100 and the performance was not really distinguishable.",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105396657,105396657,src/miner.cpp
sdaftuar,2017-03-10T13:36:00Z,I'm not following; every time we add a new tx to the block we reset the counter...  Can you clarify?,https://github.com/bitcoin/bitcoin/pull/9959#discussion_r105396891,105396891,src/miner.cpp
JeremyRubin,2017-03-28T20:20:20Z,Can you rename to nDescendantsUpdated to make clear that it should not be initialized to `alreadyAdded.size()`,https://github.com/bitcoin/bitcoin/pull/9959#discussion_r108526783,108526783,src/miner.cpp
JeremyRubin,2017-03-28T20:48:03Z,"This is a really interesting section. I got a bit nerd-sniped so apologies for long writeup.\n\nDoing the following may be more efficient (I can code this up, but I don't want to step on your toes if you're operating here). \n\n```c++\nstd::vector<txiter> diff(descendants.size());\nauto end = std::set_difference(descendants.begin(), descendants.end(),\n     alreadyAdded.begin(), alreadyAdde",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r108533154,108533154,src/miner.cpp
JeremyRubin,2017-03-28T21:51:19Z,"Could you add more of a comment on why resetting is correct behavior here?\n\nIt seems to me at first glance, that if we fail to add something earlier, we should continue to tally those as failures?\nPerhaps:\n```\nAssuming that below a certain threshold `T` of probability\n(i.e.,`T = P(success at M | failure at M-1....0)` where `M = 1000`) \nof adding something to the block we want to give",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r108546226,108546226,src/miner.cpp
sdaftuar,2017-03-29T15:38:51Z,"Thanks, will try some of these out in future optimization efforts.",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r108710551,108710551,src/miner.cpp
sdaftuar,2017-03-29T16:23:54Z,"This is incremented whenever we fail (not just for failures after we're above a certain block weight), so it needs to be reset when adding a new tx.",https://github.com/bitcoin/bitcoin/pull/9959#discussion_r108722176,108722176,src/miner.cpp
