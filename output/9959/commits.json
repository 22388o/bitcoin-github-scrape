[
  {
    "sha": "eed816af6c68c0c67f5fc05472a3927db62f8a18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWQ4MTZhZjZjNjhjMGM2N2Y1ZmMwNTQ3MmEzOTI3ZGI2MmY4YTE4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-06T16:16:06Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-29T17:57:52Z"
      },
      "message": "Mining: return early when block is almost full",
      "tree": {
        "sha": "e356cb6d6aa88d986d22eac90d7810a7c41e2f6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e356cb6d6aa88d986d22eac90d7810a7c41e2f6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eed816af6c68c0c67f5fc05472a3927db62f8a18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed816af6c68c0c67f5fc05472a3927db62f8a18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eed816af6c68c0c67f5fc05472a3927db62f8a18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed816af6c68c0c67f5fc05472a3927db62f8a18/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bfa13b15b84cb372950fb7b25a1080173060b6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bfa13b15b84cb372950fb7b25a1080173060b6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bfa13b15b84cb372950fb7b25a1080173060b6a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "570053a53bee0e3dd2223f7817c153a19de01448",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eed816af6c68c0c67f5fc05472a3927db62f8a18/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eed816af6c68c0c67f5fc05472a3927db62f8a18/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=eed816af6c68c0c67f5fc05472a3927db62f8a18",
        "patch": "@@ -358,6 +358,13 @@ void BlockAssembler::addPackageTxs()\n \n     CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = mempool.mapTx.get<ancestor_score>().begin();\n     CTxMemPool::txiter iter;\n+\n+    // Limit the number of attempts to add transactions to the block when it is\n+    // close to full; this is just a simple heuristic to finish quickly if the\n+    // mempool has a lot of entries.\n+    const int64_t MAX_CONSECUTIVE_FAILURES = 1000;\n+    int64_t nConsecutiveFailed = 0;\n+\n     while (mi != mempool.mapTx.get<ancestor_score>().end() || !mapModifiedTx.empty())\n     {\n         // First try to find a new transaction in mapTx to evaluate.\n@@ -419,6 +426,14 @@ void BlockAssembler::addPackageTxs()\n                 mapModifiedTx.get<ancestor_score>().erase(modit);\n                 failedTx.insert(iter);\n             }\n+\n+            ++nConsecutiveFailed;\n+\n+            if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight >\n+                    nBlockMaxWeight - 4000) {\n+                // Give up if we're close to full and haven't succeeded in a while\n+                break;\n+            }\n             continue;\n         }\n \n@@ -439,6 +454,9 @@ void BlockAssembler::addPackageTxs()\n             continue;\n         }\n \n+        // This transaction will make it in; reset the failed counter.\n+        nConsecutiveFailed = 0;\n+\n         // Package can be added. Sort the entries in a valid order.\n         std::vector<CTxMemPool::txiter> sortedEntries;\n         SortForBlock(ancestors, iter, sortedEntries);"
      }
    ]
  },
  {
    "sha": "42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNkOGM4OTBmYjJkNjUyNzRmMjZlZGY5NWI2ZDUyYWM0MWZjYWI4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-08T15:17:58Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-29T17:57:52Z"
      },
      "message": "Add benchmarking for CreateNewBlock",
      "tree": {
        "sha": "5a1f292600e67c91993bf54003f4b91b3d716f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a1f292600e67c91993bf54003f4b91b3d716f44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cd8c890fb2d65274f26edf95b6d52ac41fcab8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eed816af6c68c0c67f5fc05472a3927db62f8a18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eed816af6c68c0c67f5fc05472a3927db62f8a18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eed816af6c68c0c67f5fc05472a3927db62f8a18"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ffde2ed80346c192d4a3a045f0d16c098da642b6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cd8c890fb2d65274f26edf95b6d52ac41fcab8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cd8c890fb2d65274f26edf95b6d52ac41fcab8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
        "patch": "@@ -139,6 +139,8 @@ void BlockAssembler::resetBlock()\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n+    int64_t nTimeStart = GetTimeMicros();\n+\n     resetBlock();\n \n     pblocktemplate.reset(new CBlockTemplate());\n@@ -179,6 +181,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     addPackageTxs();\n \n+    int64_t nTime1 = GetTimeMicros();\n+\n     nLastBlockTx = nBlockTx;\n     nLastBlockSize = nBlockSize;\n     nLastBlockWeight = nBlockWeight;\n@@ -209,6 +213,9 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n+    int64_t nTime2 = GetTimeMicros();\n+\n+    LogPrint(\"bench\", \"CreateNewBlock() packages: %.2fms, validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n \n     return std::move(pblocktemplate);\n }"
      }
    ]
  },
  {
    "sha": "011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTExMjRhMmIyNzhjNWE2MGJhZDVmMWIwYjRhYmJmN2ViYzk1YWEw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-08T15:56:29Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-03-29T17:57:52Z"
      },
      "message": "Update benchmarking with package statistics",
      "tree": {
        "sha": "2aaa6e1cb9a0f35f021af3c00f5315724f5591ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aaa6e1cb9a0f35f021af3c00f5315724f5591ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cd8c890fb2d65274f26edf95b6d52ac41fcab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42cd8c890fb2d65274f26edf95b6d52ac41fcab8"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2249984381790964658f73ada6d42daf854ae60f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
        "patch": "@@ -179,7 +179,9 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // transaction (which in most cases can be a no-op).\n     fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n \n-    addPackageTxs();\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    addPackageTxs(nPackagesSelected, nDescendantsUpdated);\n \n     int64_t nTime1 = GetTimeMicros();\n \n@@ -215,7 +217,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     }\n     int64_t nTime2 = GetTimeMicros();\n \n-    LogPrint(\"bench\", \"CreateNewBlock() packages: %.2fms, validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n+    LogPrint(\"bench\", \"CreateNewBlock() packages: %.2fms (%d packages, %d updated descendants), validity: %.2fms (total %.2fms)\\n\", 0.001 * (nTime1 - nTimeStart), nPackagesSelected, nDescendantsUpdated, 0.001 * (nTime2 - nTime1), 0.001 * (nTime2 - nTimeStart));\n \n     return std::move(pblocktemplate);\n }\n@@ -289,16 +291,18 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     }\n }\n \n-void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n+int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n+    int nDescendantsUpdated = 0;\n     BOOST_FOREACH(const CTxMemPool::txiter it, alreadyAdded) {\n         CTxMemPool::setEntries descendants;\n         mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         BOOST_FOREACH(CTxMemPool::txiter desc, descendants) {\n             if (alreadyAdded.count(desc))\n                 continue;\n+            ++nDescendantsUpdated;\n             modtxiter mit = mapModifiedTx.find(desc);\n             if (mit == mapModifiedTx.end()) {\n                 CTxMemPoolModifiedEntry modEntry(desc);\n@@ -311,6 +315,7 @@ void BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alread\n             }\n         }\n     }\n+    return nDescendantsUpdated;\n }\n \n // Skip entries in mapTx that are already in a block or are present\n@@ -351,7 +356,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, CTxMemP\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs()\n+void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n {\n     // mapModifiedTx will store sorted packages after they are modified\n     // because some of their txs are already in the block\n@@ -474,8 +479,10 @@ void BlockAssembler::addPackageTxs()\n             mapModifiedTx.erase(sortedEntries[i]);\n         }\n \n+        ++nPackagesSelected;\n+\n         // Update transactions that depend on each of these\n-        UpdatePackagesForAdded(ancestors, mapModifiedTx);\n+        nDescendantsUpdated += UpdatePackagesForAdded(ancestors, mapModifiedTx);\n     }\n }\n "
      },
      {
        "sha": "cd225cabc1d42e28241230b8d4dcd1c4fa183cad",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=011124a2b278c5a60bad5f1b0b4abbf7ebc95aa0",
        "patch": "@@ -180,8 +180,10 @@ class BlockAssembler\n     void AddToBlock(CTxMemPool::txiter iter);\n \n     // Methods for how to add transactions to a block.\n-    /** Add transactions based on feerate including unconfirmed ancestors */\n-    void addPackageTxs();\n+    /** Add transactions based on feerate including unconfirmed ancestors\n+      * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n+      * statistics from the package selection (for logging statistics). */\n+    void addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n@@ -199,8 +201,9 @@ class BlockAssembler\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, CTxMemPool::txiter entry, std::vector<CTxMemPool::txiter>& sortedEntries);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n-      * state updated assuming given transactions are inBlock. */\n-    void UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx);\n+      * state updated assuming given transactions are inBlock. Returns number\n+      * of updated descendants. */\n+    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx);\n };\n \n /** Modify the extranonce in a block */"
      }
    ]
  }
]