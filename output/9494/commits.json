[
  {
    "sha": "f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjk1N2NlNmNkMmM5ZjY3NTgwZjVlMGJhMjUxOWIwZjNjODc5OWQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-05T23:36:47Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-09T19:29:02Z"
      },
      "message": "Util: Create ArgsManager class...\n\n- Introduce ArgsManager::GetArgs()\n- Adapt util_tests.cpp to ArgsManager",
      "tree": {
        "sha": "194c2edd79cdfe91411d37ffea161951d7ea31e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/194c2edd79cdfe91411d37ffea161951d7ea31e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZEhiAAAoJEIhmwY6hyUSiXpwQANRYoNAcMsvpUp+919K69NR7\nbsbuDhSeYQj1+7452JsM1fCcbyuGUzyj/WSG+n89SuiWo7jg6uGrfhPU1D14ME7l\nrmVQEq4VFNCMzIV9cyfpuBD65aByCIRf2wA7HDd4uwuIH+CMjAJ+gSnSooxP22Df\n3CCUyzmcbIErBt8NPi7Q65ZbprCVfP20zOr4xatk6UODYFZw3i6r1clAODs3mS0E\nMAnMihg/417REpof96HjnvYlrUh4yONRIJ+n/DdttWvN2MFQSQZWMnOERAk0sBrU\n7UbmUGfUUpzi3idACtjRIPQQfuM6t2q9p2ozCsjcG0N05A9JcVIllcsa+jDoZlSY\nvOlDahZgAkor4UYcvGzPtP9uSHe6UV00HyfgtkLwKYpRvul4Y02iW7XsZQ5ohwPT\n6tfyoTya3BKPkHVve6BMlQz1RHoJCio3iwEI+spItRKFFw1HYjzrLK9F9wVen+l8\n91FgVyeSuwDb+Xb5ulYT6uEzDeuNWADDY0hMxMQRWydV/TOj3n6Cw03+hYYLZEnX\nMpUnaVWarrMSKLD9Wp06XAGWVOyaJ5c3/EMlwH8DbS4jxZz3mQKvJSDEqAx9zyfK\n0AJLfJFFTBCwfweslk46invgPAciOiJ76oEuRCjxM+P6WSNpJNFFWB53uTT3xyMJ\nm+8m4yCtc+IeqXrdTBeY\n=o2DX\n-----END PGP SIGNATURE-----",
        "payload": "tree 194c2edd79cdfe91411d37ffea161951d7ea31e4\nparent 35da2aeed7d4000dde93957c3b6e048ab83c4f2b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494027407 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494358142 +0200\n\nUtil: Create ArgsManager class...\n\n- Introduce ArgsManager::GetArgs()\n- Adapt util_tests.cpp to ArgsManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 120,
      "deletions": 46
    },
    "files": [
      {
        "sha": "10330c0c23a23139b0ab8c78ce0f98eec6fbdfcc",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 32,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern std::map<std::string, std::string> mapArgs;\n-\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -100,52 +98,67 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+class TestArgsManager : public ArgsManager\n+{\n+public:\n+    std::map<std::string, std::string>& GetMapArgs()\n+    {\n+        return mapArgs;\n+    };\n+    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()\n+    {\n+        return mapMultiArgs;\n+    };\n+};\n+\n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n {\n+    TestArgsManager testArgs;\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n-    ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(0, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n-    ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(mapArgs.empty() && mapMultiArgs.empty());\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n \n-    ParseParameters(5, (char**)argv_test);\n+    testArgs.ParseParameters(5, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(mapArgs.size() == 3 && mapMultiArgs.size() == 3);\n-    BOOST_CHECK(IsArgSet(\"-a\") && IsArgSet(\"-b\") && IsArgSet(\"-ccc\")\n-                && !IsArgSet(\"f\") && !IsArgSet(\"-d\"));\n-    BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n-                && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n-\n-    BOOST_CHECK(mapArgs[\"-a\"] == \"\" && mapArgs[\"-ccc\"] == \"multiple\");\n-    BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n+    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && testArgs.GetMapMultiArgs().size() == 3);\n+    BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n+                && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n+    BOOST_CHECK(testArgs.GetMapMultiArgs().count(\"-a\") && testArgs.GetMapMultiArgs().count(\"-b\") && testArgs.GetMapMultiArgs().count(\"-ccc\")\n+                && !testArgs.GetMapMultiArgs().count(\"f\") && !testArgs.GetMapMultiArgs().count(\"-d\"));\n+\n+    BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n-    mapArgs.clear();\n-    mapArgs[\"strtest1\"] = \"string...\";\n+    TestArgsManager testArgs;\n+    testArgs.GetMapArgs().clear();\n+    testArgs.GetMapArgs()[\"strtest1\"] = \"string...\";\n     // strtest2 undefined on purpose\n-    mapArgs[\"inttest1\"] = \"12345\";\n-    mapArgs[\"inttest2\"] = \"81985529216486895\";\n+    testArgs.GetMapArgs()[\"inttest1\"] = \"12345\";\n+    testArgs.GetMapArgs()[\"inttest2\"] = \"81985529216486895\";\n     // inttest3 undefined on purpose\n-    mapArgs[\"booltest1\"] = \"\";\n+    testArgs.GetMapArgs()[\"booltest1\"] = \"\";\n     // booltest2 undefined on purpose\n-    mapArgs[\"booltest3\"] = \"0\";\n-    mapArgs[\"booltest4\"] = \"1\";\n-\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest1\", \"default\"), \"string...\");\n-    BOOST_CHECK_EQUAL(GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(GetArg(\"inttest3\", -1), -1);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest1\", false), true);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest2\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest3\", false), false);\n-    BOOST_CHECK_EQUAL(GetBoolArg(\"booltest4\", false), true);\n+    testArgs.GetMapArgs()[\"booltest3\"] = \"0\";\n+    testArgs.GetMapArgs()[\"booltest4\"] = \"1\";\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest4\", false), true);\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      },
      {
        "sha": "d8bdd3c69e2997bab1a879cae317d6a8b97c17d1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
        "patch": "@@ -13,7 +13,6 @@\n #include \"fs.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n-#include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n \n@@ -92,8 +91,7 @@\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n-CCriticalSection cs_args;\n-std::map<std::string, std::string> mapArgs;\n+ArgsManager gArgs;\n static std::map<std::string, std::vector<std::string> > _mapMultiArgs;\n const std::map<std::string, std::vector<std::string> >& mapMultiArgs = _mapMultiArgs;\n bool fPrintToConsole = false;\n@@ -384,7 +382,7 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n-void ParseParameters(int argc, const char* const argv[])\n+void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n@@ -420,37 +418,43 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n-bool IsArgSet(const std::string& strArg)\n+std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg)\n+{\n+    LOCK(cs_args);\n+    return mapMultiArgs.at(strArg);\n+}\n+\n+bool ArgsManager::IsArgSet(const std::string& strArg)\n {\n     LOCK(cs_args);\n     return mapArgs.count(strArg);\n }\n \n-std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return mapArgs[strArg];\n     return strDefault;\n }\n \n-int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n     return nDefault;\n }\n \n-bool GetBoolArg(const std::string& strArg, bool fDefault)\n+bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n-bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n@@ -459,15 +463,15 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n     return true;\n }\n \n-bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n     if (fValue)\n         return SoftSetArg(strArg, std::string(\"1\"));\n     else\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n-void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n@@ -589,7 +593,7 @@ fs::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n-void ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n     fs::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())"
      },
      {
        "sha": "d6360a6c4ca95c97c5c90a4bd2d9ae96b74b2db7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 59,
        "deletions": 2,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
        "patch": "@@ -16,6 +16,7 @@\n \n #include \"compat.h\"\n #include \"fs.h\"\n+#include \"sync.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n \n@@ -148,7 +149,6 @@ bool error(const char* fmt, const Args&... args)\n }\n \n void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n-void ParseParameters(int argc, const char*const argv[]);\n void FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n@@ -163,7 +163,6 @@ fs::path GetConfigFile(const std::string& confPath);\n fs::path GetPidFile();\n void CreatePidFile(const fs::path &path, pid_t pid);\n #endif\n-void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n@@ -180,6 +179,15 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+class ArgsManager\n+{\n+protected:\n+    CCriticalSection cs_args;\n+    std::map<std::string, std::string> mapArgs;\n+public:\n+    void ParseParameters(int argc, const char*const argv[]);\n+    void ReadConfigFile(const std::string& confPath);\n+    std::vector<std::string> GetArgs(const std::string& strArg);\n /**\n  * Return true if the given argument has been manually set\n  *\n@@ -235,6 +243,55 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n // Forces a arg setting, used only in testing\n void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+};\n+\n+extern ArgsManager gArgs;\n+\n+// wrappers using the global ArgsManager:\n+static inline void ParseParameters(int argc, const char*const argv[])\n+{\n+    gArgs.ParseParameters(argc, argv);\n+}\n+\n+static inline void ReadConfigFile(const std::string& confPath)\n+{\n+    gArgs.ReadConfigFile(confPath);\n+}\n+\n+static inline bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    return gArgs.SoftSetArg(strArg, strValue);\n+}\n+\n+static inline void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    gArgs.ForceSetArg(strArg, strValue);\n+}\n+\n+static inline bool IsArgSet(const std::string& strArg)\n+{\n+    return gArgs.IsArgSet(strArg);\n+}\n+\n+static inline std::string GetArg(const std::string& strArg, const std::string& strDefault)\n+{\n+    return gArgs.GetArg(strArg, strDefault);\n+}\n+\n+static inline int64_t GetArg(const std::string& strArg, int64_t nDefault)\n+{\n+    return gArgs.GetArg(strArg, nDefault);\n+}\n+\n+static inline bool GetBoolArg(const std::string& strArg, bool fDefault)\n+{\n+    return gArgs.GetBoolArg(strArg, fDefault);\n+}\n+\n+static inline bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n+{\n+    return gArgs.SoftSetBoolArg(strArg, fValue);\n+}\n \n /**\n  * Format a string to be used as group of options in help messages"
      }
    ]
  },
  {
    "sha": "b3cbd554d90815725988f3810929f2450702a717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2NiZDU1NGQ5MDgxNTcyNTk4OGYzODEwOTI5ZjI0NTA3MDJhNzE3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-07T16:54:43Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-09T19:29:05Z"
      },
      "message": "scripted-diff: Util: Encapsulate mapMultiArgs behind gArgs\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/mapMultiArgs.count(/gArgs.IsArgSet(/g' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\nsed -i 's/mapMultiArgs.at(\"/gArgs.GetArgs(\"/g' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "65e089bc1414db8d16c21a22d415e9e70ad49b2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65e089bc1414db8d16c21a22d415e9e70ad49b2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3cbd554d90815725988f3810929f2450702a717",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZEhiBAAoJEIhmwY6hyUSitmkQALL+SIAKI4Nn+66CJ4Lgdod2\n8uOCIEeUI2wKD00ng1pct+5G5CSyIxin3tnCIGwzmOao8eIQ2AVxQLz9Bxp9Isz0\ncNFlHwQM3FUNGhekSRwwa4AE/DdckcUhUPvybhdqmTO2fipdHlijqaTYo8SpAVbn\nZlS0fUAYUosYqr1yBq1diEdb27+PGoFArb9uXt6tImF9OQLDSHAoXAV4nHlqnTJk\n9GkpdYm64eg7IVWU/2qesAxiFPr7frNG19cqgMo5IRH6Glpbe5guwJ/OEjyX7VbV\nDLKhDxmmwteWrCgLuoa75xfNqiebUy4STpaj+1RZvDzTGekS1rzmpxXD1jzN948D\nqa6PnEfst0zN5szawzQitK07/75WazJuvgS2gnpkZ8OpkeY5C6eZZ9rpwMyNq8C/\nGxq7jKZbYJdSEp4dwa01RApvJCYBu/W5RIptp5PRjZg0Hb8yCdsR3kM838VRDSIf\nkg11z1H0Um6OS4bQ4Y/AP7Y/rC8gjA0eApjKj70jTgngx6Er45oy+BX26+3A8xaS\nWKFpc7IQOeDm3tY6kfsTsvpihijQLyNy21Rz2MHKQGA3HZ1fLBeJN1sftelqP9p1\n9YTjOJA6W0HHysVyjJoJg9qtwHpetbuP+Xd5Yl6J8wxDKW7Fzl7OQFrXlIZBXsSo\n+mW7uk/TU1tB+mf5qybi\n=ExFv\n-----END PGP SIGNATURE-----",
        "payload": "tree 65e089bc1414db8d16c21a22d415e9e70ad49b2f\nparent f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494176083 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494358145 +0200\n\nscripted-diff: Util: Encapsulate mapMultiArgs behind gArgs\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/mapMultiArgs.count(/gArgs.IsArgSet(/g' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\nsed -i 's/mapMultiArgs.at(\"/gArgs.GetArgs(\"/g' ./src/*.h ./src/*.cpp ./src/*/*.h ./src/*/*.cpp ./src/*/*/*.h ./src/*/*/*.cpp ;\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cbd554d90815725988f3810929f2450702a717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3cbd554d90815725988f3810929f2450702a717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cbd554d90815725988f3810929f2450702a717/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2957ce6cd2c9f67580f5e0ba2519b0f3c8799d7"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "01013fea7bb9a09857954ac259996c7f4342356e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3cbd554d90815725988f3810929f2450702a717/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3cbd554d90815725988f3810929f2450702a717/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=b3cbd554d90815725988f3810929f2450702a717",
        "patch": "@@ -93,9 +93,9 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+    if (gArgs.IsArgSet(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n+        BOOST_FOREACH(std::string strRPCAuth, gArgs.GetArgs(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "6d1d7ac7745f74aecfbceb5d89246fe2b353d247",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3cbd554d90815725988f3810929f2450702a717/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3cbd554d90815725988f3810929f2450702a717/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=b3cbd554d90815725988f3810929f2450702a717",
        "patch": "@@ -196,8 +196,8 @@ static bool InitHTTPAllowList()\n     LookupHost(\"::1\", localv6, false);\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n-    if (mapMultiArgs.count(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n+    if (gArgs.IsArgSet(\"-rpcallowip\")) {\n+        const std::vector<std::string>& vAllow = gArgs.GetArgs(\"-rpcallowip\");\n         for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n@@ -321,8 +321,8 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         if (IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n+    } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n+        const std::vector<std::string>& vbind = gArgs.GetArgs(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;\n             std::string host;"
      },
      {
        "sha": "ed4af423f99e8dce01d8674e3d1348627d146043",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3cbd554d90815725988f3810929f2450702a717/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3cbd554d90815725988f3810929f2450702a717/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3cbd554d90815725988f3810929f2450702a717",
        "patch": "@@ -741,7 +741,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n+    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -895,8 +895,8 @@ bool AppInitParameterInteraction()\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(\n-                (mapMultiArgs.count(\"-bind\") ? mapMultiArgs.at(\"-bind\").size() : 0) +\n-                (mapMultiArgs.count(\"-whitebind\") ? mapMultiArgs.at(\"-whitebind\").size() : 0), size_t(1));\n+                (gArgs.IsArgSet(\"-bind\") ? gArgs.GetArgs(\"-bind\").size() : 0) +\n+                (gArgs.IsArgSet(\"-whitebind\") ? gArgs.GetArgs(\"-whitebind\").size() : 0), size_t(1));\n     nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n@@ -911,9 +911,9 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-    if (mapMultiArgs.count(\"-debug\") > 0) {\n+    if (gArgs.IsArgSet(\"-debug\") > 0) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n+        const std::vector<std::string>& categories = gArgs.GetArgs(\"-debug\");\n \n         if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n@@ -928,8 +928,8 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (mapMultiArgs.count(\"-debugexclude\") > 0) {\n-        const std::vector<std::string>& excludedCategories = mapMultiArgs.at(\"-debugexclude\");\n+    if (gArgs.IsArgSet(\"-debugexclude\") > 0) {\n+        const std::vector<std::string>& excludedCategories = gArgs.GetArgs(\"-debugexclude\");\n         for (const auto& cat : excludedCategories) {\n             uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n@@ -1100,12 +1100,12 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (mapMultiArgs.count(\"-bip9params\")) {\n+    if (gArgs.IsArgSet(\"-bip9params\")) {\n         // Allow overriding BIP9 parameters for testing\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const std::vector<std::string>& deployments = mapMultiArgs.at(\"-bip9params\");\n+        const std::vector<std::string>& deployments = gArgs.GetArgs(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1254,8 +1254,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n-    if (mapMultiArgs.count(\"-uacomment\")) {\n-        BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n+    if (gArgs.IsArgSet(\"-uacomment\")) {\n+        BOOST_FOREACH(std::string cmt, gArgs.GetArgs(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n@@ -1268,9 +1268,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (mapMultiArgs.count(\"-onlynet\")) {\n+    if (gArgs.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n+        BOOST_FOREACH(const std::string& snet, gArgs.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1283,8 +1283,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n+    if (gArgs.IsArgSet(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, gArgs.GetArgs(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1345,16 +1345,16 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (fListen) {\n         bool fBound = false;\n-        if (mapMultiArgs.count(\"-bind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n+        if (gArgs.IsArgSet(\"-bind\")) {\n+            BOOST_FOREACH(const std::string& strBind, gArgs.GetArgs(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n         }\n-        if (mapMultiArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n+        if (gArgs.IsArgSet(\"-whitebind\")) {\n+            BOOST_FOREACH(const std::string& strBind, gArgs.GetArgs(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1363,7 +1363,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n             }\n         }\n-        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n+        if (!gArgs.IsArgSet(\"-bind\") && !gArgs.IsArgSet(\"-whitebind\")) {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n             fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n@@ -1373,8 +1373,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n     }\n \n-    if (mapMultiArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n+    if (gArgs.IsArgSet(\"-externalip\")) {\n+        BOOST_FOREACH(const std::string& strAddr, gArgs.GetArgs(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1383,8 +1383,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapMultiArgs.count(\"-seednode\")) {\n-        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+    if (gArgs.IsArgSet(\"-seednode\")) {\n+        BOOST_FOREACH(const std::string& strDest, gArgs.GetArgs(\"-seednode\"))\n             connman.AddOneShot(strDest);\n     }\n \n@@ -1610,9 +1610,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n-    if (mapMultiArgs.count(\"-loadblock\"))\n+    if (gArgs.IsArgSet(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n+        BOOST_FOREACH(const std::string& strFile, gArgs.GetArgs(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "cc537e394c3a43b13c9556bcb004233c96f40b19",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3cbd554d90815725988f3810929f2450702a717/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3cbd554d90815725988f3810929f2450702a717/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b3cbd554d90815725988f3810929f2450702a717",
        "patch": "@@ -1670,12 +1670,12 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n+    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-connect\"))\n+            BOOST_FOREACH(const std::string& strAddr, gArgs.GetArgs(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1877,8 +1877,8 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        if (mapMultiArgs.count(\"-addnode\"))\n-            vAddedNodes = mapMultiArgs.at(\"-addnode\");\n+        if (gArgs.IsArgSet(\"-addnode\"))\n+            vAddedNodes = gArgs.GetArgs(\"-addnode\");\n     }\n \n     while (true)\n@@ -2289,7 +2289,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n-    if (!mapMultiArgs.count(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n+    if (!gArgs.IsArgSet(\"-connect\") || gArgs.GetArgs(\"-connect\").size() != 1 || gArgs.GetArgs(\"-connect\")[0] != \"0\")\n         threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages"
      }
    ]
  },
  {
    "sha": "52922456b86b98ea89b1deb672e1b5ac506c1ba3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjkyMjQ1NmI4NmI5OGVhODliMWRlYjY3MmUxYjVhYzUwNmMxYmEz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-06T19:23:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-09T19:37:29Z"
      },
      "message": "Util: Put mapMultiArgs inside ArgsManager\n\n- Set ArgsManager::mapMultiArgs in ArgsManager::SoftSetArg, ForceSetArg, SoftSetBoolArg",
      "tree": {
        "sha": "b38ad887f6aa0b082c02033824b2ca7511171cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b38ad887f6aa0b082c02033824b2ca7511171cf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52922456b86b98ea89b1deb672e1b5ac506c1ba3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZEhp9AAoJEIhmwY6hyUSiNq8P/0bTICj6JmNs350gcQGfHhMh\nrrPoLVc1lAACMXX6r5WfG4iKIrFAU6SCqBbLX/6JEnif5uBslCw7eNQAjJphcubi\n2n7Qb/4uJ2Cnv78Zj+EM4DQ3wRDBbRXCapjIbMa5H7/I8Wpk1ZtXsW/UeKurnKo8\nF8gxko39M9JWAVe6soKNR+znB8Q9y/nufsH9/2QrzbFzo1alWWeGdHjIJ2LTjvM2\nrtL7lIRg3lQQFs7diDQQLeVSzJtFLiABk4FD8sC9NB833XEsyGwxBFzSr6TowCuc\nDcnOaGEtX7sRl5MgcNtMztAr8wXenGEsSQQ5KLradi6uxX+759ifGYwmCoBUCvZH\n1yS9jBZiW0AKSn0dKgbMyloTa1mrGQHvOyVTXvs8UAPkb0HtLJT+xjxeW2aIU4p7\nGOMe0erCcdUACuxLK4N9aekGtIX+NxdkmxeYQow8qskeUqXQjlgSCKOS60xa06aU\n7dWFV2LzAnfSBVuvQP9YrD/Qi8YDsMTtizrxnNav1lzFf0XlzCP2t18DBuw31Kjc\n32QhrDFnrS5mlgYC+ByImy4y67s7K63IeojXhwflBePO8nrQWarw+sYdxpNQHLBp\nhdQeNyquK1khDgNVznaZxR0oW4IuWUQcl+Gt3gDMfDxq8vm++J/M02TMXHblUA0/\nRNWM7nD4SA6z5KTZvTO0\n=LKuZ\n-----END PGP SIGNATURE-----",
        "payload": "tree b38ad887f6aa0b082c02033824b2ca7511171cf2\nparent b3cbd554d90815725988f3810929f2450702a717\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494098601 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494358649 +0200\n\nUtil: Put mapMultiArgs inside ArgsManager\n\n- Set ArgsManager::mapMultiArgs in ArgsManager::SoftSetArg, ForceSetArg, SoftSetBoolArg\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52922456b86b98ea89b1deb672e1b5ac506c1ba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52922456b86b98ea89b1deb672e1b5ac506c1ba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52922456b86b98ea89b1deb672e1b5ac506c1ba3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3cbd554d90815725988f3810929f2450702a717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cbd554d90815725988f3810929f2450702a717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3cbd554d90815725988f3810929f2450702a717"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2f0f846291d155e64575edea5b9282eae6b34290",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52922456b86b98ea89b1deb672e1b5ac506c1ba3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52922456b86b98ea89b1deb672e1b5ac506c1ba3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=52922456b86b98ea89b1deb672e1b5ac506c1ba3",
        "patch": "@@ -92,8 +92,6 @@ const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n-static std::map<std::string, std::vector<std::string> > _mapMultiArgs;\n-const std::map<std::string, std::vector<std::string> >& mapMultiArgs = _mapMultiArgs;\n bool fPrintToConsole = false;\n bool fPrintToDebugLog = true;\n \n@@ -386,7 +384,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     mapArgs.clear();\n-    _mapMultiArgs.clear();\n+    mapMultiArgs.clear();\n \n     for (int i = 1; i < argc; i++)\n     {\n@@ -414,7 +412,7 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n-        _mapMultiArgs[str].push_back(strValue);\n+        mapMultiArgs[str].push_back(strValue);\n     }\n }\n \n@@ -459,7 +457,7 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n     LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return false;\n-    mapArgs[strArg] = strValue;\n+    ForceSetArg(strArg, strValue);\n     return true;\n }\n \n@@ -475,6 +473,7 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n {\n     LOCK(cs_args);\n     mapArgs[strArg] = strValue;\n+    mapMultiArgs[strArg].push_back(strValue);\n }\n \n \n@@ -612,7 +611,7 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n             InterpretNegativeSetting(strKey, strValue);\n             if (mapArgs.count(strKey) == 0)\n                 mapArgs[strKey] = strValue;\n-            _mapMultiArgs[strKey].push_back(strValue);\n+            mapMultiArgs[strKey].push_back(strValue);\n         }\n     }\n     // If datadir is changed in .conf file:"
      },
      {
        "sha": "229478d83533b315acf4873364c67f60619dfd17",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52922456b86b98ea89b1deb672e1b5ac506c1ba3/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52922456b86b98ea89b1deb672e1b5ac506c1ba3/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=52922456b86b98ea89b1deb672e1b5ac506c1ba3",
        "patch": "@@ -42,7 +42,6 @@ class CTranslationInterface\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n };\n \n-extern const std::map<std::string, std::vector<std::string> >& mapMultiArgs;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugLog;\n \n@@ -184,6 +183,7 @@ class ArgsManager\n protected:\n     CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n+    std::map<std::string, std::vector<std::string> > mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);"
      }
    ]
  },
  {
    "sha": "78da882edd54ed62f4a0035590460a97cb9ff282",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGRhODgyZWRkNTRlZDYyZjRhMDAzNTU5MDQ2MGE5N2NiOWZmMjgy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-07T17:37:54Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-05-09T19:37:34Z"
      },
      "message": "Util: Small improvements in gArgs usage\n\n- Don't check gArgs.IsArgSet() is greater than 0\n- Remove unneeded calls and local variables",
      "tree": {
        "sha": "be0f8a6490e4904b8b53ec0694a3da3c26ad2d06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be0f8a6490e4904b8b53ec0694a3da3c26ad2d06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78da882edd54ed62f4a0035590460a97cb9ff282",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZEhp+AAoJEIhmwY6hyUSiHhQP/1ObtOkJb32NtaT1EwtYdVJL\nLTtmd0VUwQeeaILyjYnIAxppehy8gbov3K0HSZJs+FVhYvno2jqiGeObHXQyK5/G\nQicmDh3aff7SdGi/Wob45g9l1J9qP0hg3tt6ckqDwRvB648WeOnDKbZNoIMtpee4\nxrs6cqhO5B4TWC7ar8QU0ljFuZuytoizZJwsj8UZGC7TZplrdcWYkzOPInIqwCy4\nDUYLG2fO9XIMG3uDGK21eyFph4tKwtDtlJRcHbekWpYme/UWIjrLdS42NSoDyOdB\nVhA4rDJo7h2eHxWKkyqcx49I9wqTkBY26bGNwbnTHXZ4X/nxFkcdvq7IPefKJpjP\nmBkPZe1pdyyd1zWtnk5SEReviLVv/9sXqE5ou3uDQbJCur/5AbkUOqvBnZHNpFP9\nWN98Z/iUKdqhVuVoNr4aNUJGcwN7xPWPeGdYXEDlKxkwf9+2iZPDhFVeLHokl99p\nVvkiEDY1XTQCcZcZ4xBembrRKao+hu8Bb8K6WPeB8C2eitiRlg7qjSAXBCM0gZS5\nGEBLDF+0j77ozeOI0mev0KJ5V5Eltwb6Nadco6aVMvmRxnKZ6eY7BWUDyfpt8qKl\nHt9VRVoJ1wAsmJWuXo4Ml9WswqQAnmEXV3tzeIhsbHnPJSaC9K+Tqd+7StQkk5WU\nTOky1qHwzzLmgFS17rS1\n=s3l2\n-----END PGP SIGNATURE-----",
        "payload": "tree be0f8a6490e4904b8b53ec0694a3da3c26ad2d06\nparent 52922456b86b98ea89b1deb672e1b5ac506c1ba3\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494178674 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1494358654 +0200\n\nUtil: Small improvements in gArgs usage\n\n- Don't check gArgs.IsArgSet() is greater than 0\n- Remove unneeded calls and local variables\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78da882edd54ed62f4a0035590460a97cb9ff282",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78da882edd54ed62f4a0035590460a97cb9ff282",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78da882edd54ed62f4a0035590460a97cb9ff282/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52922456b86b98ea89b1deb672e1b5ac506c1ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52922456b86b98ea89b1deb672e1b5ac506c1ba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52922456b86b98ea89b1deb672e1b5ac506c1ba3"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 11,
      "deletions": 15
    },
    "files": [
      {
        "sha": "18a9819edd03647d2deba2b0d1d23558c27898d0",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78da882edd54ed62f4a0035590460a97cb9ff282/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78da882edd54ed62f4a0035590460a97cb9ff282/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=78da882edd54ed62f4a0035590460a97cb9ff282",
        "patch": "@@ -93,7 +93,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n     std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n \n-    if (gArgs.IsArgSet(\"-rpcauth\") > 0) {\n+    if (gArgs.IsArgSet(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n         BOOST_FOREACH(std::string strRPCAuth, gArgs.GetArgs(\"-rpcauth\"))\n         {"
      },
      {
        "sha": "0d1cba3fd2bddb728475cfedc873c09b7a8655f2",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78da882edd54ed62f4a0035590460a97cb9ff282/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78da882edd54ed62f4a0035590460a97cb9ff282/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=78da882edd54ed62f4a0035590460a97cb9ff282",
        "patch": "@@ -197,8 +197,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     if (gArgs.IsArgSet(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = gArgs.GetArgs(\"-rpcallowip\");\n-        for (std::string strAllow : vAllow) {\n+        for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n             if (!subnet.IsValid()) {\n@@ -322,11 +321,10 @@ static bool HTTPBindAddresses(struct evhttp* http)\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = gArgs.GetArgs(\"-rpcbind\");\n-        for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+        for (const std::string& strRPCBind : gArgs.GetArgs(\"-rpcbind\")) {\n             int port = defaultPort;\n             std::string host;\n-            SplitHostPort(*i, port, host);\n+            SplitHostPort(strRPCBind, port, host);\n             endpoints.push_back(std::make_pair(host, port));\n         }\n     } else { // No specific bind address specified, bind to any"
      },
      {
        "sha": "7678261d4394b6db5664d52b61c475b1041a489f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78da882edd54ed62f4a0035590460a97cb9ff282/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78da882edd54ed62f4a0035590460a97cb9ff282/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=78da882edd54ed62f4a0035590460a97cb9ff282",
        "patch": "@@ -741,7 +741,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (gArgs.IsArgSet(\"-connect\") && gArgs.GetArgs(\"-connect\").size() > 0) {\n+    if (gArgs.IsArgSet(\"-connect\")) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -911,9 +911,9 @@ bool AppInitParameterInteraction()\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n-    if (gArgs.IsArgSet(\"-debug\") > 0) {\n+    if (gArgs.IsArgSet(\"-debug\")) {\n         // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-        const std::vector<std::string>& categories = gArgs.GetArgs(\"-debug\");\n+        const std::vector<std::string> categories = gArgs.GetArgs(\"-debug\");\n \n         if (find(categories.begin(), categories.end(), std::string(\"0\")) == categories.end()) {\n             for (const auto& cat : categories) {\n@@ -928,9 +928,8 @@ bool AppInitParameterInteraction()\n     }\n \n     // Now remove the logging categories which were explicitly excluded\n-    if (gArgs.IsArgSet(\"-debugexclude\") > 0) {\n-        const std::vector<std::string>& excludedCategories = gArgs.GetArgs(\"-debugexclude\");\n-        for (const auto& cat : excludedCategories) {\n+    if (gArgs.IsArgSet(\"-debugexclude\")) {\n+        for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n             uint32_t flag = 0;\n             if (!GetLogCategory(&flag, &cat)) {\n                 InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n@@ -1105,10 +1104,9 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const std::vector<std::string>& deployments = gArgs.GetArgs(\"-bip9params\");\n-        for (auto i : deployments) {\n+        for (const std::string& strDeployment : gArgs.GetArgs(\"-bip9params\")) {\n             std::vector<std::string> vDeploymentParams;\n-            boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n+            boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n             if (vDeploymentParams.size() != 3) {\n                 return InitError(\"BIP9 parameters malformed, expecting deployment:start:end\");\n             }"
      }
    ]
  }
]