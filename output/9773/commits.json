[
  {
    "sha": "e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmUyZjRjODU2MzYzYmJiMGUzYjViYTRkZjIyNWYzNzU0YzNkYjM5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T15:49:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-17T19:12:31Z"
      },
      "message": "Return errors from importmulti if complete rescans are not successful",
      "tree": {
        "sha": "9e695fd32f65b1596f3ff613b96ec756bb2f1d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e695fd32f65b1596f3ff613b96ec756bb2f1d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 114,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbb42ab8c428e71efd8b0c084ea21cb184180ea0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -3331,7 +3331,7 @@ void PruneOneBlockFile(const int fileNumber)\n }\n \n \n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n@@ -4163,6 +4163,11 @@ std::string CBlockFileInfo::ToString() const\n     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n }\n \n+CBlockFileInfo* GetBlockFileInfo(size_t n)\n+{\n+    return &vinfoBlockFile.at(n);\n+}\n+\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "9c606f2419409f7ec35bd50544bdd3d006e16e27",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -299,10 +299,15 @@ double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n  */\n void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n+/**\n+ *  Mark one block file as pruned.\n+ */\n+void PruneOneBlockFile(const int fileNumber);\n+\n /**\n  *  Actually unlink the specified files\n  */\n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -562,6 +567,9 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+/** Get block file info entry for one block file */\n+CBlockFileInfo* GetBlockFileInfo(size_t n);\n+\n /** Dump the mempool to disk. */\n void DumpMempool();\n "
      },
      {
        "sha": "68049dcef78d097852346486ec37c65f114dda86",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -1074,11 +1074,32 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n-\n+        CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n-            pwalletMain->ScanForWalletTransactions(pindex, true);\n+            scannedRange = pwalletMain->ScanForWalletTransactions(pindex, true);\n             pwalletMain->ReacceptWalletTransactions();\n         }\n+\n+        if (!scannedRange || scannedRange->nHeight > pindex->nHeight) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+            size_t i = 0;\n+            for (const UniValue& request : requests.getValues()) {\n+                // If key creation date is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (GetImportTimestamp(request, now) - 7200 >= scannedRange->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, strprintf(\"Failed to rescan before time %d, transactions may be missing.\", scannedRange->GetBlockTimeMax())));\n+                    response.push_back(std::move(result));\n+                }\n+            }\n+        }\n     }\n \n     return response;"
      },
      {
        "sha": "d32e8ba06adb04c3e422c892060bd9afe5ec213e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -9,10 +9,16 @@\n #include <utility>\n #include <vector>\n \n+#include \"rpc/server.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"validation.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+\n+extern UniValue importmulti(const JSONRPCRequest& request);\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100\n@@ -355,4 +361,58 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    // Cap last block file size, and mine new block in a new block file.\n+    CBlockIndex* oldTip = chainActive.Tip();\n+    GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n+    CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    CBlockIndex* newTip = chainActive.Tip();\n+\n+    // Verify ScanForWalletTransactions picks up transactions in both the old\n+    // and new block files.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n+    }\n+\n+    // Prune the older block file.\n+    PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+    UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n+\n+    // Verify ScanForWalletTransactions only picks transactions in the new block\n+    // file.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(newTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n+    }\n+\n+    {\n+        CWallet wallet;\n+        ::pwalletMain = &wallet;\n+        UniValue key;\n+        key.setObject();\n+        key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(coinbaseKey.GetPubKey())));\n+        key.pushKV(\"timestamp\", 0);\n+        key.pushKV(\"internal\", UniValue(true));\n+        UniValue keys;\n+        keys.setArray();\n+        keys.push_back(key);\n+        JSONRPCRequest request;\n+        request.params.setArray();\n+        request.params.push_back(keys);\n+\n+        UniValue response = importmulti(request);\n+        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1b59c3cd80c15d764cf8a45c8ca20daa3b55c59f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -1545,10 +1545,14 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n+ *\n+ * Returns pointer to the first block in the last contiguous range that was\n+ * successfully scanned.\n+ *\n  */\n-int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n-    int ret = 0;\n+    CBlockIndex* ret = nullptr;\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n@@ -1570,12 +1574,15 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n-            ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n-            int posInBlock;\n-            for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n-            {\n-                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n-                    ret++;\n+            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+                for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n+                    AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                }\n+                if (!ret) {\n+                    ret = pindex;\n+                }\n+            } else {\n+                ret = nullptr;\n             }\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {"
      },
      {
        "sha": "98e4fb87b91073381079b735fcda381ac5f0e4a8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);"
      }
    ]
  }
]