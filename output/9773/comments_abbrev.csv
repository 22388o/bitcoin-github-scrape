morcos,2017-02-15T22:48:21Z,"Concept ACK\nThis looks like a reasonable approach to me.  \n\nDon't forget that you may want to include the grace period in detecting whether it scanned enough.\nAlso you might want to skip the rest of the loop if ReadBlockFromDisk is false.\n\n",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280166003,280166003,
laanwj,2017-02-16T12:09:53Z,"Concept ACK.\n\n> The code has not been tested at all, and I'm actually not sure how I'm going to go about writing a unit test because there doesn't seem to be an easy way to target individual blocks for pruning inside RPC tests.\n\nThere's `pruneblockchain` but yes pruning works on a per-file, not a per-block basis, so it would need some extra effort on regtest to generate full blocks instead",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280314289,280314289,
gmaxwell,2017-02-16T12:16:10Z,Concept ACK. Will test/review further.,https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280315455,280315455,
morcos,2017-02-16T15:42:42Z,Please rebase on #9761 so we can verify the grace period works properly,https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280366522,280366522,
ryanofsky,2017-02-16T15:53:59Z,Rebased,https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280370118,280370118,
ryanofsky,2017-02-16T20:13:23Z,Previously squashed e3d4f257ce0202811464d3b6860db87ba147aa24 -> 455b8f7cb2a1889053a006055e9dcad923c77029 ([multicheck.2](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.2) -> [multicheck.3](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.3)),https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280445536,280445536,
ryanofsky,2017-02-16T20:19:30Z,"Added C++ test for new importmulti RPC code in e64cdfba4a7e8a670e76c7bf770c248dc6b78c3d\n\nSquashed e64cdfba4a7e8a670e76c7bf770c248dc6b78c3d -> b73252de549984a06aae294252d0d055aca43a4a ([multicheck.4](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.4) -> [multicheck.5](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.5))\n",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280447203,280447203,
sipa,2017-02-16T20:29:07Z,"Note that our strprintf is a wrapper around tfm::format, and doesn't need type specs at all.",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280450005,280450005,
morcos,2017-02-16T20:30:04Z,"lightly tested ACK b73252d\nOnly reviewed/tested code, not the tests.",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280450259,280450259,
ryanofsky,2017-02-17T12:12:34Z,"Rebased b73252de549984a06aae294252d0d055aca43a4a -> 90671ee7e77c17c18f5ea82ea041962ef5d53f8a ([multicheck.5](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.5) -> [multicheck.6](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.6))\n",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280633863,280633863,
ryanofsky,2017-02-17T12:24:57Z,"Squashed aaaf65a90b87c18889d177ff3f0ab8a868f849f3 -> 1425c727863b335bf98bb4b17b575e59552d38e9 ([multicheck.7](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.7) -> [multicheck.8](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.8))\n",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280636020,280636020,
MarcoFalke,2017-02-17T14:36:48Z,"Somehow travis didn't like your commit.\n\nOn Fri, Feb 17, 2017 at 1:25 PM, Russell Yanofsky <notifications@github.com>\nwrote:\n\n> Squashed aaaf65a\n> <https://github.com/bitcoin/bitcoin/commit/aaaf65a90b87c18889d177ff3f0ab8a868f849f3>\n> -> 1425c72\n> <https://github.com/bitcoin/bitcoin/commit/1425c727863b335bf98bb4b17b575e59552d38e9>\n> (multicheck.7\n> <https://github.com/ryanofsky/bitcoin/co",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280666300,280666300,
ryanofsky,2017-02-17T15:43:03Z,"> Somehow travis didn't like your commit.\n\nAppears to be a spurious error. The travis run for b72521dd7f570b0c557439d534f7523a5be52999 which is aaaf65a90b87c18889d177ff3f0ab8a868f849f3 merged into 9828f9a9962c1bee5c343847030b9cfd87a40a5e succeeded: https://travis-ci.org/bitcoin/bitcoin/builds/202600321\n\nOnly the travis run for 64072b74ebbf7b5585b39f6c117c6ffa9dc820f0 which is 1425c727863b3",https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280684263,280684263,
ryanofsky,2017-02-17T15:48:26Z,Touched CommitDate to rerun travis 1425c727863b335bf98bb4b17b575e59552d38e9 -> e2e2f4c856363bbb0e3b5ba4df225f3754c3db39 ([multicheck.8](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.8) -> [multicheck.12](https://github.com/ryanofsky/bitcoin/commits/pr/multicheck.12)),https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280685819,280685819,
jtimon,2017-02-18T23:21:14Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9773#issuecomment-280882746,280882746,
morcos,2017-02-16T18:53:18Z,I think this loop should also be skipped if ReadBlockFromDisk fails,https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101597690,101597690,src/wallet/wallet.cpp
ryanofsky,2017-02-16T18:59:52Z,Skipped in d6f6a23c7092aa21110cc77ebeb018492bacae28,https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101599153,101599153,src/wallet/wallet.cpp
jonasschnelli,2017-02-16T19:23:06Z,just curious: Is there an advantage using `PRId64` over `%ul` (rest of the code uses this)?,https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101604508,101604508,src/wallet/rpcdump.cpp
ryanofsky,2017-02-16T19:33:57Z,"Actually I need to change this to either remove PRId64 or the (long long) cast.\n\nYou're supposed to use PRId64 whenever you pass an int64_t type to printf. %ld or %lld aren't always correct because longs and long longs just have minimum widths in standard c++, not fixed widths that are the same on all systems.\n",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101606956,101606956,src/wallet/rpcdump.cpp
ryanofsky,2017-02-16T20:16:52Z,Removed cast in e49f0394f07a95e6cc5cdabe32f2c6b8f53c40fb.,https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101616525,101616525,src/wallet/rpcdump.cpp
laanwj,2017-02-17T11:56:39Z,"Please remove the PRI64d here. It gives problems with some platforms, and as @sipa says don't need it.",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101742389,101742389,src/wallet/rpcdump.cpp
ryanofsky,2017-02-17T12:08:52Z,"Ok will change, but what are the problems with some platforms?",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101744091,101744091,src/wallet/rpcdump.cpp
ryanofsky,2017-02-17T12:24:37Z,"Removed in aaaf65a90b87c18889d177ff3f0ab8a868f849f3.\n\nReason I am asking about the problem you're seeing is that not using PRI64d for int64_t would prevent us from using compile time format string checking (as suggested in https://github.com/bitcoin/bitcoin/issues/9423#issuecomment-269480805) which would be much better than the runtime checking we currently use.",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r101746093,101746093,src/wallet/rpcdump.cpp
laanwj,2017-02-22T11:37:40Z,"> Ok will change, but what are the problems with some platforms?\n\nThe conceptual problem is that PRI64d can evaluate to anything depending on the platform, e.g. ""%ponyfood"". `tinyformat.h` cannot know about all these platform-dependent escape sequences, so might produce garbled output or even raise an exception. We had a lot of problems with this back in the day with windows and mingw. It is w",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r102442438,102442438,src/wallet/rpcdump.cpp
paveljanik,2017-02-22T17:07:05Z,"This brings a few Wshadow warnings:\n\n```\nWshadow statistics: \n   1 wallet/test/wallet_tests.cpp:377:17: warning: declaration shadows a variable in namespace 'wallet_tests' [-Wshadow]\n   1 wallet/test/wallet_tests.cpp:391:17: warning: declaration shadows a variable in namespace 'wallet_tests' [-Wshadow]\n   1 wallet/test/wallet_tests.cpp:399:17: warning: declaration shadows a variable in",https://github.com/bitcoin/bitcoin/pull/9773#discussion_r102517029,102517029,src/wallet/test/wallet_tests.cpp
