[
  {
    "sha": "5fc6e71d1994d58c25edebd8063555998752349a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmM2ZTcxZDE5OTRkNThjMjVlZGViZDgwNjM1NTU5OTg3NTIzNDlh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T15:50:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:16:44Z"
      },
      "message": "[tests] Add network_thread_ utility functions.\n\nAdd network thread_start(), network_thread_running() and\nnetwork_thread_join() utility functions in mininode.py and use\nnetwork_thread_running() in network thread assertions.",
      "tree": {
        "sha": "8cee595bacfc27036769d25258b191e1e0fcdbbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cee595bacfc27036769d25258b191e1e0fcdbbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fc6e71d1994d58c25edebd8063555998752349a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fc6e71d1994d58c25edebd8063555998752349a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60b4ad57912b78a96af08046a503f7905610a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b4ad57912b78a96af08046a503f7905610a8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b4ad57912b78a96af08046a503f7905610a8c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a00fc3d43c9702ad31120510657f0338c93f7be7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fc6e71d1994d58c25edebd8063555998752349a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fc6e71d1994d58c25edebd8063555998752349a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5fc6e71d1994d58c25edebd8063555998752349a",
        "patch": "@@ -18,7 +18,7 @@\n import socket\n import struct\n import sys\n-from threading import RLock, Thread\n+import threading\n \n from test_framework.messages import *\n from test_framework.util import wait_until\n@@ -397,9 +397,12 @@ def sync_with_ping(self, timeout=60):\n # and whenever adding anything to the send buffer (in send_message()).  This\n # lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = RLock()\n+mininode_lock = threading.RLock()\n+\n+class NetworkThread(threading.Thread):\n+    def __init__(self):\n+        super().__init__(name=\"NetworkThread\")\n \n-class NetworkThread(Thread):\n     def run(self):\n         while mininode_socket_map:\n             # We check for whether to disconnect outside of the asyncore\n@@ -412,3 +415,21 @@ def run(self):\n             [obj.handle_close() for obj in disconnected]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n         logger.debug(\"Network thread closing\")\n+\n+def network_thread_start():\n+    \"\"\"Start the network thread.\"\"\"\n+    NetworkThread().start()\n+\n+def network_thread_running():\n+    \"\"\"Return whether the network thread is running.\"\"\"\n+    return any([thread.name == \"NetworkThread\" for thread in threading.enumerate()])\n+\n+def network_thread_join(timeout=10):\n+    \"\"\"Wait timeout seconds for the network thread to terminate.\n+\n+    Throw if the network thread doesn't terminate in timeout seconds.\"\"\"\n+    network_threads = [thread for thread in threading.enumerate() if thread.name == \"NetworkThread\"]\n+    assert len(network_threads) <= 1\n+    for thread in network_threads:\n+        thread.join(timeout)\n+        assert not thread.is_alive()"
      }
    ]
  },
  {
    "sha": "74e64f24b8cb701379b34442f21332361dcc91f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGU2NGYyNGI4Y2I3MDEzNzliMzQ0NDJmMjEzMzIzNjFkY2M5MWY5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T16:45:46Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Use network_thread_start() in tests.",
      "tree": {
        "sha": "3ee92d07ceebf41e012931c689d74beda27ebe73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee92d07ceebf41e012931c689d74beda27ebe73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74e64f24b8cb701379b34442f21332361dcc91f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fc6e71d1994d58c25edebd8063555998752349a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fc6e71d1994d58c25edebd8063555998752349a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fc6e71d1994d58c25edebd8063555998752349a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "6be4d9cfabc5004c00a0fc2019b98a3da9f0688d",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -68,7 +68,7 @@ contains the higher level logic for processing P2P payloads and connecting to\n the Bitcoin Core node application logic. For custom behaviour, subclass the\n P2PInterface object and override the callback methods.\n \n-- Call `NetworkThread.start()` after all `P2PInterface` objects are created to\n+- Call `network_thread_start()` after all `P2PInterface` objects are created to\n start the networking thread.  (Continue with the test logic in your existing\n thread.)\n "
      },
      {
        "sha": "68ff319d1206c8f90a81a77e736629719d5f3160",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -38,10 +38,10 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n-                                     NetworkThread,\n                                      P2PInterface,\n                                      msg_block,\n-                                     msg_headers)\n+                                     msg_headers,\n+                                     network_thread_start)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -98,7 +98,7 @@ def run_test(self):\n         # Connect to node0\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Build the blockchain"
      },
      {
        "sha": "f4df879723f70957ab95a05a4c7c9a90c10edcff",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -68,7 +68,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "d3c7d8fc1138a1d6fba060bde14b6f17c87f915b",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -45,7 +45,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n@@ -100,7 +100,7 @@ def set_test_params(self):\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def send_generic_input_tx(self, node, coinbases):"
      },
      {
        "sha": "4cd6a177aa4e95487c6038e376b4a0c2b77c51a6",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -22,7 +22,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n@@ -36,7 +36,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def create_transaction(self, node, coinbase, to_address, amount):\n@@ -245,7 +245,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.setup_chain()\n         self.setup_network()\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start()\n+        network_thread_start()\n         self.test.p2p_connections[0].wait_for_verack()\n \n     def get_tests(self):"
      },
      {
        "sha": "5d7b889e83c6c26e459f5ef59b0d25cd5e7b643e",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -56,7 +56,7 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "c9c5c6fc4b19da37d443719af95e25f08daf0ca5",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -17,11 +17,11 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    network_thread_start,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -136,7 +136,7 @@ def run_test(self):\n \n         # Start up network handling in another thread. This needs to be called\n         # after the P2P connections have been created.\n-        NetworkThread().start()\n+        network_thread_start()\n         # wait_for_verack ensures that the P2P connection is fully up.\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "a89d1d8ef246c97603c10f83241f96f73b6bde0b",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -15,6 +15,7 @@\n from test_framework.util import *\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n+from test_framework.mininode import network_thread_start\n import copy\n import time\n \n@@ -32,7 +33,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "c60b0fce16f15eceb540fc322298d0636ab6b6dd",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         test.add_all_connections(self.nodes)\n         self.tip = None\n         self.block_time = None\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         test.run()\n \n     def get_tests(self):"
      },
      {
        "sha": "cf2e484d9f50b2e1642c77c33cfc936f9c1ab957",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -57,7 +57,7 @@ def run_test(self):\n         for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         for p2pc in p2p_conns:\n             p2pc.wait_for_verack()\n \n@@ -149,7 +149,7 @@ def run_test(self):\n         # Reconnect to self.nodes[0]\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit"
      },
      {
        "sha": "9f9f2f90c0ff467cf0405ab0a19dd6957697139c",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -15,7 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.mininode import CTransaction, network_thread_start\n from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n from test_framework.script import CScript\n from io import BytesIO\n@@ -50,7 +50,7 @@ def run_test(self):\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.coinbase_blocks = self.nodes[0].generate(2) # Block 2\n         coinbase_txid = []\n         for i in self.coinbase_blocks:"
      },
      {
        "sha": "b56cafc9845f13f45299f0360e4904f9be24ee6e",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -83,7 +83,7 @@ def run_test(self):\n         # min_work_node connects to node1 (whitelisted)\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n@@ -294,7 +294,7 @@ def run_test(self):\n             self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-            NetworkThread().start() # Start up network handling in another thread\n+            network_thread_start()\n             test_node.wait_for_verack()\n \n         # We should have failed reorg and switched back to 290 (but have block 291)"
      },
      {
        "sha": "1e763df2a4012862706815f21a2a1742c85a2949",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -792,7 +792,7 @@ def run_test(self):\n         self.segwit_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n         self.old_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         self.test_node.wait_for_verack()\n "
      },
      {
        "sha": "ff4bed0efd026dcc2f61881629000c65ea813064",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -49,7 +49,7 @@ def run_test(self):\n \n         # Setup the p2p connections and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte"
      },
      {
        "sha": "93ef73e25eddcd07976bee10fedaf4bb31528be7",
        "filename": "test/functional/p2p-fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fingerprint.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -13,12 +13,12 @@\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.mininode import (\n     CInv,\n-    NetworkThread,\n     P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n     msg_getheaders,\n+    network_thread_start,\n     wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -77,7 +77,7 @@ def last_header_equals(self, expected_hash, node):\n     def run_test(self):\n         node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        NetworkThread().start()\n+        network_thread_start()\n         node0.wait_for_verack()\n \n         # Set node time to 60 days ago"
      },
      {
        "sha": "010dbdccad3124b040de8d80b179c0c901829f25",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -18,6 +18,7 @@\n import time\n from test_framework.key import CECKey\n from test_framework.script import *\n+from test_framework.mininode import network_thread_start\n import struct\n \n class PreviousSpendableOutput():\n@@ -68,7 +69,7 @@ def add_options(self, parser):\n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n         self.test.run()\n \n     def add_transactions_to_block(self, block, tx_list):"
      },
      {
        "sha": "9b59d753f9f76ab1b7fb516cc9d63cdefcffd871",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -103,7 +103,7 @@ def run_test(self):\n         unsupported_service_bit5_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         unsupported_service_bit7_node = self.nodes[0].add_p2p_connection(CLazyNode(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n         wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n@@ -142,7 +142,8 @@ def run_test(self):\n         allowed_service_bit5_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_5)\n         allowed_service_bit7_node = self.nodes[0].add_p2p_connection(P2PInterface(), services=NODE_NETWORK|NODE_UNSUPPORTED_SERVICE_BIT_7)\n \n-        NetworkThread().start()  # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        # Network thread stopped when all previous P2PInterfaces disconnected. Restart it\n+        network_thread_start()\n \n         wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n         wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)"
      },
      {
        "sha": "168f9f685a1714293555aeba04fd0386937b783f",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -21,7 +21,7 @@ def set_test_params(self):\n     def run_test(self):\n         # Add a p2p connection\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        NetworkThread().start()\n+        network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n \n         #request mempool"
      },
      {
        "sha": "a06601c38ef1494548056eea5930e3cdb1eb2688",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -1882,7 +1882,7 @@ def run_test(self):\n         # self.std_node is for testing node1 (fRequireStandard=true)\n         self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Keep a place to store utxo's that can be used in later tests\n         self.utxo = []"
      },
      {
        "sha": "984a3c8b903810d64f3ee467cfe55d9305d0b499",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         no_version_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n         no_send_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         sleep(1)\n "
      },
      {
        "sha": "d29d43ebedf396c04a0b053a4801968d4b46e67f",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n \n-        NetworkThread().start() # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "256227f721f90ba2f0b291836fff3a338ee1eb61",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74e64f24b8cb701379b34442f21332361dcc91f9/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=74e64f24b8cb701379b34442f21332361dcc91f9",
        "patch": "@@ -90,7 +90,7 @@\n     CBlockHeader,\n     CInv,\n     NODE_WITNESS,\n-    NetworkThread,\n+    network_thread_start,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n@@ -238,7 +238,7 @@ def run_test(self):\n         # will occur outside of direct fetching\n         test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n \n-        NetworkThread().start()  # Start up network handling in another thread\n+        network_thread_start()\n \n         # Test logic begins here\n         inv_node.wait_for_verack()"
      }
    ]
  },
  {
    "sha": "34e08b3510c64e35fc51327562d15d938f4b656e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGUwOGIzNTEwYzY0ZTM1ZmM1MTMyNzU2MmQxNWQ5MzhmNGI2NTZl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-07T18:40:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Fix network threading in functional tests\n\nassumevalid.py, example_test.py and p2p-acceptblocks.py add\np2p_connections after the NetworkThread has been started. This isn't\npermitted. Fix test to restart the network thread when adding new\nconnections.\n\np2p-leaktest.py had a potential race condition if the NetworkThread\nhadn't terminated by the time we tried to restart it.",
      "tree": {
        "sha": "c6f09d62e3a5da99daa809c942e7f8bd7c474558",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6f09d62e3a5da99daa809c942e7f8bd7c474558"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34e08b3510c64e35fc51327562d15d938f4b656e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74e64f24b8cb701379b34442f21332361dcc91f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74e64f24b8cb701379b34442f21332361dcc91f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74e64f24b8cb701379b34442f21332361dcc91f9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 31,
      "deletions": 8
    },
    "files": [
      {
        "sha": "362b94e0d32dead0c457fd56341a3c788ad70457",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -38,10 +38,11 @@\n                                      CTransaction,\n                                      CTxIn,\n                                      CTxOut,\n+                                     network_thread_join,\n+                                     network_thread_start,\n                                      P2PInterface,\n                                      msg_block,\n-                                     msg_headers,\n-                                     network_thread_start)\n+                                     msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n@@ -159,13 +160,22 @@ def run_test(self):\n             self.block_time += 1\n             height += 1\n \n+        # We're adding new connections so terminate the network thread\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n-        p2p1.wait_for_verack()\n-\n         self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n+\n+        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n+        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n+\n+        network_thread_start()\n+\n+        p2p0.wait_for_verack()\n+        p2p1.wait_for_verack()\n         p2p2.wait_for_verack()\n \n         # send header lists to all three nodes"
      },
      {
        "sha": "12be685ecf4232a83ebd598f35579d82468236cd",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -21,6 +21,7 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n+    network_thread_join,\n     network_thread_start,\n )\n from test_framework.test_framework import BitcoinTestFramework\n@@ -131,7 +132,7 @@ def custom_method(self):\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n-        # Create a P2P connection to one of the nodes\n+        # Create P2P connections to two of the nodes\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n         # Start up network handling in another thread. This needs to be called\n@@ -188,7 +189,14 @@ def run_test(self):\n         connect_nodes(self.nodes[1], 2)\n \n         self.log.info(\"Add P2P connection to node2\")\n+        # We can't add additional P2P connections once the network thread has started. Disconnect the connection\n+        # to node0, wait for the network thread to terminate, then connect to node2. This is specific to\n+        # the current implementation of the network thread and may be improved in future.\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+\n         self.nodes[2].add_p2p_connection(BaseNode())\n+        network_thread_start()\n         self.nodes[2].p2p.wait_for_verack()\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")"
      },
      {
        "sha": "bb204322ed34d71eca8fcdbf0a1ed1819ea2ae3f",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -207,9 +207,13 @@ def run_test(self):\n         # disconnect/reconnect first\n \n         self.nodes[0].disconnect_p2ps()\n-        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        self.nodes[1].disconnect_p2ps()\n+        network_thread_join()\n \n+        test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n+        network_thread_start()\n         test_node.wait_for_verack()\n+\n         test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()"
      },
      {
        "sha": "ce4e6e914457fc443ecb7cec0e895cb44d168f10",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34e08b3510c64e35fc51327562d15d938f4b656e/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=34e08b3510c64e35fc51327562d15d938f4b656e",
        "patch": "@@ -126,8 +126,9 @@ def run_test(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-        # Wait until all connections are closed\n+        # Wait until all connections are closed and the network thread has terminated\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+        network_thread_join()\n \n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)"
      }
    ]
  },
  {
    "sha": "5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzhmZjI2YjJmYzU5ZDhiY2ZhMmE4YmZiN2M5ZmU2ZDc4Y2Y2Njc4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-08T15:00:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-11T14:17:21Z"
      },
      "message": "[tests] Add NetworkThread assertions\n\nCheck that P2PConnections aren't created after the NetworkThread\nhas started and that at any time only one NetworkThread is running.",
      "tree": {
        "sha": "fe0bfdb8c657ba5cef79f0067e3781a89e4f8a8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe0bfdb8c657ba5cef79f0067e3781a89e4f8a8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34e08b3510c64e35fc51327562d15d938f4b656e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34e08b3510c64e35fc51327562d15d938f4b656e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34e08b3510c64e35fc51327562d15d938f4b656e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "724d418099b38308d00da29d3d5a4470d6c5615b",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5c8ff26b2fc59d8bcfa2a8bfb7c9fe6d78cf6678",
        "patch": "@@ -69,6 +69,10 @@ class P2PConnection(asyncore.dispatcher):\n     sub-classed and the on_message() callback overridden.\"\"\"\n \n     def __init__(self):\n+        # All P2PConnections must be created before starting the NetworkThread.\n+        # assert that the network thread is not running.\n+        assert not network_thread_running()\n+\n         super().__init__(map=mininode_socket_map)\n \n     def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n@@ -418,6 +422,9 @@ def run(self):\n \n def network_thread_start():\n     \"\"\"Start the network thread.\"\"\"\n+    # Only one network thread may run at a time\n+    assert not network_thread_running()\n+\n     NetworkThread().start()\n \n def network_thread_running():"
      }
    ]
  }
]