ajtowns,2020-03-02 07:13:05,"This is an alternative approach to #15505 that's minimally invasive on the data structures. Doing something about this was suggested as a pre-req for #17303 in https://github.com/bitcoin/bitcoin/pull/17303#issuecomment-547589047\n\n@sdaftuar  expressed some concerns about how much of a CPU hit it could be in worst case scenarios, but it doesn't look too bad in testing:\n\n```diff\ndiff --git ",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593254632,593254632,
DrahtBot,2020-03-02 11:05:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19053 (refactor: replace CNode pointers by references within net_processing.{h,cpp} by theStack)\n\nIf you consider this ",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593348410,593348410,
naumenkogs,2020-03-02 17:44:14,"Concept ACK. Code looks good to me.\nCan you provide more context to understand the test? Are you basically trying to show that DoS-vector your PR opens is probably less than those which already exist?",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-593526565,593526565,
ajtowns,2020-03-04 04:49:13,"@naumenkogs Yeah; in a worst case scenario you could get 100 txids in a NOTFOUND message, have 125 peers to cycle through, and each peer could have announced 100k txs, so you end up with something like `O( 12,500 * log(100000) )` operations as a result of a single message (albeit with a fair chunk of setup). The test indicates that 11 peers on my hardware gives a time of about 20us per txid, so pe",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-594325180,594325180,
naumenkogs,2020-03-04 16:30:17,"No, I think this sounds reasonable. I'd rather not introduce new data structures. As I said, we probably already have easier ways to DoS a node.",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-594645262,594645262,
mzumsande,2020-03-20 15:56:27,"Concept ACK. \n\nOne difference to #15505 is that the retry-request there would be from outbound peers only, whereas this PR also includes inbound peers. \nIf I understand it correctly, this does not create any additional attack surface (e.g. for InvBlocks), because we keep the exact order of retries from the case where the peer does not answer at all (not even with NOTFOUND), just ask our next",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-601774053,601774053,
naumenkogs,2020-03-22 00:01:59,"@mzumsande there's a little threat that, unlike with prior behavior, we won't have a 1 minute window between _first peer announced a tx and followed up with NOTFOUND_, and _we execute requests for the next peers_, during which more honest outbound peers can come with announcements and get prioritized against inbound dishonest peers.\n\nBut the only ways I think this can be exploited require drop",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-602122496,602122496,
fjahr,2020-03-25 16:38:32,"Concept ACK but echoing jnewbery's feedback I also still have questions and agree with most of his code comments. I also think that code is currently not tested, so adding an explicit test would be very valuable. Additionally, comments in the `RetryProcessTx` code would be helpful for understanding.\n\nnit on the commit message: s/find one who doesn't already have its inflight/find all who don't",https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-603949033,603949033,
DrahtBot,2020-06-04 20:36:28,<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-639102646,639102646,
ajtowns,2020-06-15 03:37:52,Obsoleted by #19184,https://github.com/bitcoin/bitcoin/pull/18238#issuecomment-643884901,643884901,
naumenkogs,2020-03-22 00:05:11,Why is 2-seconds random delay useful here? It can accidentally prioritize inbound nodes over outbound :),https://github.com/bitcoin/bitcoin/pull/18238#discussion_r396040661,396040661,src/net_processing.cpp
ajtowns,2020-03-24 03:33:28,"It already tests that `process_time < best` so the 2s delay will only bring a process time forward, not push it back past an inbound peer's process time.\n\nI think the scenario is likely to be:\n\n * bunch of peers announce a new tx, outbound connections get polled asap, inbound connections get polled after 2s\n * you pick one of those, likely an outbound, and send a GETDATA\n * other peers",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r396884515,396884515,src/net_processing.cpp
naumenkogs,2020-03-24 13:52:24,"Yeah, I was a bit confused, now what's on your mind makes sense to me.\nI'm probably fine with leaving your 2s random delay.\n\n>Which is to say, I don't think we're consistently prioritising outbounds after the first request anyway.\n\nI think we do? That's probably off-topic here, although i'd be curious why you think so.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397167955,397167955,src/net_processing.cpp
naumenkogs,2020-03-24 14:03:30,"Could we come up with a better variable name? :(\nMaybe ""tx_communication"" or something. Yeah it sucks, but probably nothing is worse than 1-letter name for something meaningful like this.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397176111,397176111,src/net_processing.cpp
naumenkogs,2020-03-24 14:04:33,also best->best_time,https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397176897,397176897,src/net_processing.cpp
naumenkogs,2020-03-24 14:48:54,"I think this line handles a tricky corner case. Can we add comment to reduce the cognitive burned on code reviewer?\nWhat I think happens is (correct me if I'm wrong):\n- request from X1, not found\n- request from X2, ignores us for 1 minute\n- request from X3, notfound\n- this line prevents us from querying X2 again (we would if this line is deleted)\n\nNow that I wrote this, one could sim",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397211419,397211419,src/net_processing.cpp
ariard,2020-03-25 05:24:14,"Or I renamed `best` to `lower_process_time` while reviewing, but I agree names can be more meaningful.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397615753,397615753,src/net_processing.cpp
ariard,2020-03-25 06:13:20,"Did you consider to filter by `nPreferredDownload` to favor outbound peers and lower DoS risk? Only querying outbound peers should be good enough to achieve goal of finding NOTFOUND transactions but even if we don't success due to bad-connectivity of our outbounds, worst-case scenario we hit the 1-min window (and a transaction not being announced by our outbounds is less likely to be a honest anno",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397628040,397628040,src/net_processing.cpp
jnewbery,2020-03-25 13:41:58,"I get a compiler warning that `best` might be used before initialization:\n\n```\nnet_processing.cpp: In function ‚Äòbool ProcessMessage(CNode*, const string&, CDataStream&, int64_t, const CChainParams&, CConnman*, BanMan*, const std::atomic<bool>&)‚Äô:\nnet_processing.cpp:756:27: warning: ‚Äòbest‚Äô may be used uninitialized in this function [-Wmaybe-uninitialized]\n     if (best_d != nullptr && pro",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397861849,397861849,src/net_processing.cpp
jnewbery,2020-03-25 13:43:26,"This can be an unordered map for average constant-time lookup:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 3373f7f54..2e097d44e 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -30,6 +30,7 @@\n \n #include <memory>\n #include <typeinfo>\n+#include <unordered_map>\n \n #if defined(NDEBUG)\n # error ""Bitcoin cannot be compiled w",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397862854,397862854,src/net_processing.cpp
jnewbery,2020-03-25 14:11:00,"I think this comment could be slightly improved. The time is set to:\n\n- `std::chrono::microseconds::zero()` if the transaction has been requested from this peer (ie exists in `m_tx_in_flight`)\n- the process time if the transaction has not yet been requested from this peer (ie exists in `m_tx_process_time`)\n",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397883915,397883915,src/net_processing.cpp
jnewbery,2020-03-25 14:51:57,Did you consider moving all of the `NOTFOUND` processing to its own function `ProcessNotFound()`? Splitting the logic between here and `RetryProcessTx()` makes it more difficult to follow than if it was all in one place.,https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397916687,397916687,src/net_processing.cpp
jnewbery,2020-03-25 15:02:03,"Maybe I'm misunderstanding the logic here, but this will bring the `NodeState`'s `m_tx_process_time` forward (to now + ~1second), but does nothing to the global `g_already_asked_for` time, which means that next time we go round `SendMessages()`, we won't actually rerequest the transaction, since `last_request_time > current_time - GETDATA_TX_INTERVAL`. Am I missing something?\n\nIf I'm right, I ",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397925056,397925056,src/net_processing.cpp
jnewbery,2020-03-25 15:06:39,"Now that we're potentially rerequesting txs from different peers after receiving a NOTFOUND, I think we _shouldn't_ erase them from a peer's _m_tx_in_flight_ and _m_tx_announced_ structures in receipt of a `NOTFOUND`, and keep them there until the `TX_EXPIRY_INTERVAL` in `SendMessages()`, otherwise there might be an attack where an adversary has multiple connections to you, and then juggles you be",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397928486,397928486,src/net_processing.cpp
jkczyz,2020-03-25 16:48:18,This condition could probably be simplified considerably if (1) `best` is initialized appropriately and (2) the entry for the `txid` in `m_tx_announced` is removed on line 4079 rather than zeroed (like what is done on line 3272). Was zeroing chosen on line 4079 for a specific reason?,https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398008657,398008657,src/net_processing.cpp
naumenkogs,2020-03-25 16:57:12,My guess for the reason is [here](https://github.com/bitcoin/bitcoin/pull/18238#discussion_r397211419) :),https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398015110,398015110,src/net_processing.cpp
jnewbery,2020-03-25 22:21:23,"I think it'd be even better to change the 'best' definition to prefer outbound peers where we can, but fall back to inbound peers if there are no outbound peers that have announced the tx.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398205912,398205912,src/net_processing.cpp
jnewbery,2020-03-25 22:36:57,"We discussed this in PR Review Club (https://bitcoincore.reviews/18238.html#l-115 and https://bitcoincore.reviews/18238.html#l-180), and there was some agreement that even for a small struct like this, the dependencies between the fields make it difficult to reason about and potentially bug-prone.\n\nI think from a high level, in the future we might want a `TxDownloadState` class which contains:",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398212938,398212938,src/net_processing.cpp
ajtowns,2020-03-26 05:00:57,"I'm +1 on this, but maybe it'd be better to get wtxid relay #18044 in first?",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398318859,398318859,src/net_processing.cpp
ajtowns,2020-03-26 05:35:58,I think you'd need that to remain constant/log time in worst-case/attack scenarios because the announced hash is completely under the control of an attacker.,https://github.com/bitcoin/bitcoin/pull/18238#discussion_r398327348,398327348,src/net_processing.cpp
rebroad,2020-03-30 06:27:35,why have any delay?,https://github.com/bitcoin/bitcoin/pull/18238#discussion_r399952805,399952805,src/net_processing.cpp
naumenkogs,2020-03-30 14:23:12,We have some discussion [here](https://github.com/bitcoin/bitcoin/pull/18238#discussion_r396040661),https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400232009,400232009,src/net_processing.cpp
jnewbery,2020-03-31 01:55:06,"I've had a first attempt at this: https://github.com/jnewbery/bitcoin/tree/2020-03-tx-download-class\n\nNo tests or comments yet, and it could be tidied up, but do you think this is heading in the right direction?",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400597100,400597100,src/net_processing.cpp
ajtowns,2020-03-31 05:21:07,"We already prefer outbound peers when we bump the process time (in `CalculateTxGetDataTime()`), and this chooses the lowest process time which will reflect that preference. I don't think it makes sense to complicate this further unless someone wants to do some real world testing on how well/badly the process time preferencing works in practice when the first thing we try results in a notfound.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400649805,400649805,src/net_processing.cpp
ajtowns,2020-03-31 05:26:37,"I think the idea was to stop you from doing `INV x; NOTFOUND x; INV x` repeatedly and making it harder for you to query other peers. But I think this introduces a bug -- the `zero` entry never gets cleared from `m_tx_announced`, because that's only cleared based on what's in `in_flight` and `process_time` and the txid isn't in either of those anymore.",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400651358,400651358,src/net_processing.cpp
ajtowns,2020-03-31 14:36:50,"Hmm, that means a peer that sends a NOTFOUND is treated exactly the same as one that just ignores the request; so NOTFOUND is just a ""fyi, I'm never going to respond, so feel free to try someone else"". That... seems like it makes a lot of sense? If we were to ever start punishing peers for (frequently) not responding to tx requests, maybe it would make sense to punish them for (equally frequently)",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400965176,400965176,src/net_processing.cpp
ajtowns,2020-03-31 14:39:10,"I was having a go at it too when I saw your comment, https://github.com/ajtowns/bitcoin/commits/202002-bump-notfound-wip -- separates out the current code into the class first, before changing it, which I think works better. Might be good to have some comments/style nits on the refactor?",https://github.com/bitcoin/bitcoin/pull/18238#discussion_r400967015,400967015,src/net_processing.cpp
