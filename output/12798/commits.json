[
  {
    "sha": "adc258608144e249d478e901876cb181a1f635e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGMyNTg2MDgxNDRlMjQ5ZDQ3OGU5MDE4NzZjYjE4MWExZjYzNWU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-26T21:24:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-26T21:24:17Z"
      },
      "message": "doc: Refer to witness reserved value as spec. in the BIP",
      "tree": {
        "sha": "fccadedb92f2f41c92d21800a558db74620b120b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fccadedb92f2f41c92d21800a558db74620b120b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adc258608144e249d478e901876cb181a1f635e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc258608144e249d478e901876cb181a1f635e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adc258608144e249d478e901876cb181a1f635e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adc258608144e249d478e901876cb181a1f635e9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7466a26cab5d66665991433947964a638f5b957e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7466a26cab5d66665991433947964a638f5b957e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7466a26cab5d66665991433947964a638f5b957e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "05ee48b49414d2a2fcdaeac99f6a1c16ff759c55",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc258608144e249d478e901876cb181a1f635e9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc258608144e249d478e901876cb181a1f635e9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=adc258608144e249d478e901876cb181a1f635e9",
        "patch": "@@ -3223,10 +3223,10 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     // Validation for witness commitments.\n     // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n     //   coinbase (where 0x0000....0000 is used instead).\n-    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness nonce (unconstrained).\n+    // * The coinbase scriptWitness is a stack of a single 32-byte vector, containing a witness reserved value (unconstrained).\n     // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n     // * There must be at least one output whose scriptPubKey is a single 36-byte push, the first 4 bytes of which are\n-    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness nonce). In case there are\n+    //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n     if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache) == THRESHOLD_ACTIVE) {\n@@ -3238,7 +3238,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n             // already does not permit it, it is impossible to trigger in the\n             // witness tree.\n             if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness nonce size\", __func__));\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n@@ -3257,7 +3257,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n         }\n     }\n \n-    // After the coinbase witness nonce and commitment are verified,\n+    // After the coinbase witness reserved value and commitment are verified,\n     // we can check if the block weight passes (before we've checked the\n     // coinbase witness, it would be possible for the weight to be too\n     // large by filling up the coinbase witness, which doesn't change"
      },
      {
        "sha": "10e1eb484a3476670566084f4de23508509e8dbf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc258608144e249d478e901876cb181a1f635e9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc258608144e249d478e901876cb181a1f635e9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=adc258608144e249d478e901876cb181a1f635e9",
        "patch": "@@ -411,7 +411,7 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n bool RewindBlockIndex(const CChainParams& params);\n \n-/** Update uncommitted block structures (currently: only the witness nonce). This is safe for submitted blocks. */\n+/** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n /** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */"
      },
      {
        "sha": "e6af35fc3dc017386b5a0d420533d21be7f0c1d1",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adc258608144e249d478e901876cb181a1f635e9/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adc258608144e249d478e901876cb181a1f635e9/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=adc258608144e249d478e901876cb181a1f635e9",
        "patch": "@@ -425,7 +425,7 @@ def test_block_malleability(self):\n \n         assert(self.nodes[0].getbestblockhash() == block.hash)\n \n-        # Now make sure that malleating the witness nonce doesn't\n+        # Now make sure that malleating the witness reserved value doesn't\n         # result in a block permanently marked bad.\n         block = self.build_next_block()\n         add_witness_commitment(block)\n@@ -436,7 +436,7 @@ def test_block_malleability(self):\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(1) ]\n         test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n \n-        # Changing the witness nonce doesn't change the block hash\n+        # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ ser_uint256(0) ]\n         test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n "
      }
    ]
  }
]