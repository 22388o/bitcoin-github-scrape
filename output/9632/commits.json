[
  {
    "sha": "5c18bf2477328dcff31e22bb13cf49c1d865c2df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzE4YmYyNDc3MzI4ZGNmZjMxZTIyYmIxM2NmNDljMWQ4NjVjMmRm",
    "commit": {
      "author": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-02-01T00:15:18Z"
      },
      "committer": {
        "name": "isle2983",
        "email": "isle2983@yahoo.com",
        "date": "2017-02-01T00:15:18Z"
      },
      "message": "Implement clang_static_analysis.py\n\nA script for running 'scan-build' and exposing issues via static analysis.",
      "tree": {
        "sha": "9f36030243b8562b32ad6e376e40cf03ada76b62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f36030243b8562b32ad6e376e40cf03ada76b62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c18bf2477328dcff31e22bb13cf49c1d865c2df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c18bf2477328dcff31e22bb13cf49c1d865c2df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c18bf2477328dcff31e22bb13cf49c1d865c2df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c18bf2477328dcff31e22bb13cf49c1d865c2df/comments",
    "author": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "isle2983",
      "id": 20916903,
      "node_id": "MDQ6VXNlcjIwOTE2OTAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20916903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/isle2983",
      "html_url": "https://github.com/isle2983",
      "followers_url": "https://api.github.com/users/isle2983/followers",
      "following_url": "https://api.github.com/users/isle2983/following{/other_user}",
      "gists_url": "https://api.github.com/users/isle2983/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/isle2983/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/isle2983/subscriptions",
      "organizations_url": "https://api.github.com/users/isle2983/orgs",
      "repos_url": "https://api.github.com/users/isle2983/repos",
      "events_url": "https://api.github.com/users/isle2983/events{/privacy}",
      "received_events_url": "https://api.github.com/users/isle2983/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 372,
      "additions": 372,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2ac103e30ae50333ece3c2bea088a30b7d54a2c0",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c18bf2477328dcff31e22bb13cf49c1d865c2df/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c18bf2477328dcff31e22bb13cf49c1d865c2df/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=5c18bf2477328dcff31e22bb13cf49c1d865c2df",
        "patch": "@@ -20,6 +20,38 @@ the script should be called from the git root folder as follows.\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n \n+clang\\_static\\_analysis.py\n+====================\n+A utility for running clang static analysis (`scan-build`) in a consistent way.\n+It has two subcommands:\n+\n+```\n+$ ./clang_static_analsis.py report <base_directory>\n+$ ./clang_static_analsis.py check <base_directory>\n+```\n+\n+This depends on having `scan-build` and `scan-view` binaries available. There\n+are options provided for running with a particular version of clang from a\n+particular subdirectory.\n+\n+\n+clang\\_static\\_analysis.py report \\<base\\_directory\\>\n+---------------------------------------------------------\n+\n+Runs `scan-build` and produces a summary report of the issues found. The result\n+directory is kept for browsing with `scan-view` afterwards.\n+\n+\n+clang\\_static\\_analysis.py check \\<base\\_directory\\>\n+---------------------------------------------------------\n+\n+Similar to the `report` command, but it is a more straightforward check meant\n+to accept or reject the state of the repository. If no issues are found, it\n+returns a zero status. If issues are found it returns a non-zero status and\n+lists specific details. The result directory is kept for browsing with\n+`scan-view` afterwards.\n+\n+\n copyright\\_header.py\n ====================\n "
      },
      {
        "sha": "9c726986783bfc12f9b760f040c5068ee5fa7751",
        "filename": "contrib/devtools/clang_static_analysis.py",
        "status": "added",
        "additions": 340,
        "deletions": 0,
        "changes": 340,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c18bf2477328dcff31e22bb13cf49c1d865c2df/contrib/devtools/clang_static_analysis.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c18bf2477328dcff31e22bb13cf49c1d865c2df/contrib/devtools/clang_static_analysis.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang_static_analysis.py?ref=5c18bf2477328dcff31e22bb13cf49c1d865c2df",
        "patch": "@@ -0,0 +1,340 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import sys\n+import os\n+import subprocess\n+import time\n+import plistlib\n+import itertools\n+import argparse\n+\n+###############################################################################\n+# parse .plist files in directory into issues\n+###############################################################################\n+\n+\n+def find_events(paths, files):\n+    for p in paths:\n+        if p['kind'] == 'event':\n+            yield {'message': p['extended_message'],\n+                   'line':    p['location']['line'],\n+                   'col':     p['location']['col'],\n+                   'file':    files[p['location']['file']]}\n+\n+\n+def plist_to_issue(plist):\n+    files = plist['files']\n+    for d in plist['diagnostics']:\n+        yield {'type':        d['type'],\n+               'description': d['description'],\n+               'line':        d['location']['line'],\n+               'col':         d['location']['col'],\n+               'file':        files[d['location']['file']],\n+               'events':      list(find_events(d['path'], files))}\n+\n+\n+def parse_plist_files(directory):\n+    plist_files = [os.path.join(directory, f) for f in os.listdir(directory) if\n+                   f.endswith('.plist')]\n+    read_plists = [plistlib.readPlist(plist_file) for plist_file in\n+                   plist_files]\n+    relevant_plists = [plist for plist in read_plists if\n+                       len(plist['diagnostics']) > 0]\n+    return list(itertools.chain(*[plist_to_issue(plist) for plist in\n+                                  relevant_plists]))\n+\n+\n+###############################################################################\n+# do analysis\n+###############################################################################\n+\n+\n+def call_cmd(cmd, outfile):\n+    file = open(os.path.abspath(outfile), 'w')\n+    if subprocess.call(cmd.split(' '), stdout=file, stderr=file) != 0:\n+        sys.exit(\"*** '%s' returned a non-zero status\" % cmd)\n+    file.close()\n+\n+\n+def find_results_subdirectory(opts):\n+    # scan-build puts results in a subdirectory where the directory name is a\n+    # timestamp. e.g. /tmp/bitcoin-scan-build/2017-01-23-115243-901-1\n+    # We want the most recent directory, so we sort and return the path name\n+    # sorted highest.\n+    subdir = sorted([d for d in os.listdir(opts.report_path) if\n+                     os.path.isdir(os.path.join(opts.report_path, d))])[-1]\n+    return os.path.join(opts.report_path, subdir)\n+\n+\n+def run_scan_build(opts):\n+    print(\"Running command:     %s\" % opts.make_clean_cmd)\n+    call_cmd(opts.make_clean_cmd, opts.make_clean_log)\n+    print(\"Running command:     %s\" % opts.scan_build_cmd)\n+    print(\"stderr/stdout to:    %s\" % opts.scan_build_log)\n+    print(\"This might take a few minutes...\")\n+    call_cmd(opts.scan_build_cmd, opts.scan_build_log)\n+    print(\"Done.\")\n+    directory = find_results_subdirectory(opts)\n+    print(\"Results in:          %s\\n\" % directory)\n+    return directory\n+\n+\n+def do_analysis(opts):\n+    result_subdir = run_scan_build(opts)\n+    return result_subdir, parse_plist_files(result_subdir)\n+\n+\n+###############################################################################\n+# report helpers\n+###############################################################################\n+\n+\n+SEPARATOR = '-' * 80 + '\\n'\n+REPORT = []\n+\n+\n+def report(string):\n+    REPORT.append(string)\n+\n+\n+GREEN = '\\033[92m'\n+RED = '\\033[91m'\n+ENDC = '\\033[0m'\n+\n+\n+def red_report(string):\n+    report(RED + string + ENDC)\n+\n+\n+def green_report(string):\n+    report(GREEN + string + ENDC)\n+\n+\n+def flush_report():\n+    print(''.join(REPORT), end=\"\")\n+\n+\n+###############################################################################\n+# issue reporting\n+###############################################################################\n+\n+\n+def report_issues_compact(issues):\n+    issue_no = 0\n+    for issue in issues:\n+        report(\"%d: %s:%d:%d - %s\\n\" % (issue_no, issue['file'], issue['line'],\n+                                        issue['col'], issue['description']))\n+        issue_no = issue_no + 1\n+\n+\n+def report_issue(issue):\n+    report(\"An issue has been found in \")\n+    red_report(\"%s:%d:%d\\n\" % (issue['file'], issue['line'], issue['col']))\n+    report(\"Type:         %s\\n\" % issue['type'])\n+    report(\"Description:  %s\\n\\n\" % issue['description'])\n+    event_no = 0\n+    for event in issue['events']:\n+        report(\"%d: \" % event_no)\n+        report(\"%s:%d:%d - \" % (event['file'], event['line'], event['col']))\n+        report(\"%s\\n\" % event['message'])\n+        event_no = event_no + 1\n+\n+\n+def report_issues(issues):\n+    for issue in issues:\n+        report_issue(issue)\n+        report(SEPARATOR)\n+\n+\n+###############################################################################\n+# 'report' subcommand execution\n+###############################################################################\n+\n+\n+def report_output(opts, result_subdir, issues, elapsed_time):\n+    report(SEPARATOR)\n+    report(\"Took %.2f seconds to analyze with scan-build\\n\" % elapsed_time)\n+    report(\"Found %d issues:\\n\" % len(issues))\n+    report(SEPARATOR)\n+    if len(issues) > 0:\n+        report_issues_compact(issues)\n+        report(SEPARATOR)\n+        report(\"Full details can be seen in a browser by running:\\n\")\n+        report(\"    $ %s %s\\n\" % (opts.scan_view, result_subdir))\n+        report(SEPARATOR)\n+    flush_report()\n+\n+\n+def exec_report(opts):\n+    start_time = time.time()\n+    result_subdir, issues = do_analysis(opts)\n+    elapsed_time = time.time() - start_time\n+    report_output(opts, result_subdir, issues, elapsed_time)\n+\n+\n+###############################################################################\n+# 'check' subcommand execution\n+###############################################################################\n+\n+\n+def check_output(opts, result_subdir, issues):\n+    report(SEPARATOR)\n+    report_issues(issues)\n+    if len(issues) == 0:\n+        green_report(\"No static analysis issues found!\\n\")\n+    else:\n+        red_report(\"Full details can be seen in a browser by running:\\n\")\n+        report(\"    $ %s %s\\n\" % (opts.scan_view, result_subdir))\n+    report(SEPARATOR)\n+    flush_report()\n+\n+\n+def exec_check(opts):\n+    result_subdir, issues = do_analysis(opts)\n+    check_output(opts, result_subdir, issues)\n+    if len(issues) > 0:\n+        sys.exit(\"*** Static analysis issues found!\")\n+\n+\n+###############################################################################\n+# validate inputs\n+###############################################################################\n+\n+\n+class PathAction(argparse.Action):\n+    def _path_exists(self, path):\n+        return os.path.exists(path)\n+\n+    def _assert_exists(self, path):\n+        if not self._path_exists(path):\n+            sys.exit(\"*** does not exist: %s\" % path)\n+\n+    def _assert_mode(self, path, flags):\n+        if not os.access(path, flags):\n+            sys.exit(\"*** %s does not have correct mode: %x\" % (path, flags))\n+\n+\n+class RepositoryPathAction(PathAction):\n+    def _assert_has_makefile(self, path):\n+        if not self._path_exists(os.path.join(path, \"Makefile\")):\n+            sys.exit(\"*** no Makefile found in %s. You must ./autogen.sh \"\n+                     \"and/or ./configure first\" % path)\n+\n+    def _assert_git_repository(self, path):\n+        cmd = 'git -C %s status' % path\n+        dn = open(os.devnull, 'w')\n+        if (subprocess.call(cmd.split(' '), stderr=dn, stdout=dn) != 0):\n+            sys.exit(\"*** %s is not a git repository\" % path)\n+\n+    def __call__(self, parser, namespace, values, option_string=None):\n+        path = os.path.abspath(values)\n+        self._assert_exists(path)\n+        self._assert_git_repository(path)\n+        self._assert_has_makefile(path)\n+        namespace.repository = path\n+\n+\n+class ReportPathAction(PathAction):\n+    def __call__(self, parser, namespace, values, option_string=None):\n+        path = os.path.abspath(values)\n+        self._assert_exists(path)\n+        self._assert_mode(path, os.R_OK | os.W_OK)\n+        namespace.report_path = path\n+\n+\n+class BinPathAction(PathAction):\n+    def __call__(self, parser, namespace, values, option_string=None):\n+        path = os.path.abspath(values)\n+        self._assert_exists(path)\n+        scan_build = os.path.join(path, 'scan-build')\n+        scan_view = os.path.join(path, 'scan-view')\n+\n+        self._assert_exists(scan_build)\n+        self._assert_mode(scan_build, os.R_OK | os.X_OK)\n+        self._assert_exists(scan_view)\n+        self._assert_mode(scan_view, os.R_OK | os.X_OK)\n+\n+        namespace.scan_build = scan_build\n+        namespace.scan_view = scan_view\n+\n+\n+###############################################################################\n+# helpers for defaults\n+###############################################################################\n+\n+\n+DEFAULT_REPORT_PATH = \"/tmp/bitcoin-scan-build/\"\n+\n+\n+def make_report_path_if_missing():\n+    if not os.path.exists(DEFAULT_REPORT_PATH):\n+        os.makedirs(DEFAULT_REPORT_PATH)\n+\n+\n+def locate_installed_binaries():\n+    def which(binary):\n+        out = subprocess.check_output(['which', binary])\n+        lines = [l for l in out.decode(\"utf-8\").split('\\n') if l != '']\n+        if len(lines) != 1:\n+            sys.exit(\"*** could not find installed %s\" % binary)\n+        return lines[0]\n+    return (os.path.realpath(which('scan-build')),\n+            os.path.realpath(which('scan-view')))\n+\n+\n+###############################################################################\n+# UI\n+###############################################################################\n+\n+\n+if __name__ == \"__main__\":\n+    # parse arguments\n+    description = (\"A utility for running clang static analysis on the \"\n+                   \"codebase in a consistent way.\")\n+    parser = argparse.ArgumentParser(description=description)\n+    b_help = (\"The path holding 'scan-build' and 'scan-view' binaries. \"\n+              \"(Uses 'scan-build' and 'scan-view' installed in PATH by \"\n+              \"default)\")\n+    parser.add_argument(\"-b\", \"--bin-path\", type=str,\n+                        action=BinPathAction, help=b_help)\n+    r_help = (\"The path for scan-build to write its report files. \"\n+              \"(default=/tmp/bitcoin-scan-build/)\")\n+    parser.add_argument(\"-r\", \"--report-path\",\n+                        default=DEFAULT_REPORT_PATH,\n+                        type=str, action=ReportPathAction, help=r_help)\n+    j_help = \"The number of parallel jobs to run with 'make'. (default=6)\"\n+    parser.add_argument(\"-j\", \"--jobs\", type=int, default=6, help=j_help)\n+    s_help = (\"Selects the output behavior. 'report' generates a summary \"\n+              \"report on the issues found. 'check' compares the state of the \"\n+              \"repository against a standard, provides a return code for the \"\n+              \"shell and prints more specific details when issues are found.\")\n+    parser.add_argument(\"subcommand\", type=str, choices=['report', 'check'],\n+                        help=s_help)\n+    repo_help = (\"A source code repository for which the static analysis is \"\n+                 \"to be performed upon.\")\n+    parser.add_argument(\"repository\", type=str, action=RepositoryPathAction,\n+                        help=repo_help)\n+    opts = parser.parse_args()\n+\n+    # additional setup for default opts\n+    if not (hasattr(opts, 'scan_build') and hasattr(opts, 'scan_view')):\n+        opts.scan_build, opts.scan_view = locate_installed_binaries()\n+    if opts.report_path == DEFAULT_REPORT_PATH:\n+        make_report_path_if_missing()\n+\n+    # non-configurable defaults\n+    opts.make_clean_cmd = 'make clean'\n+    opts.make_clean_log = 'make_clean.log'\n+    opts.scan_build_log = 'scan_build.log'\n+    opts.scan_build_cmd = ('%s -k -plist-html --keep-empty -o %s make -j%d' %\n+                           (opts.scan_build, opts.report_path, opts.jobs))\n+\n+    # execute commands\n+    os.chdir(opts.repository)\n+    if opts.subcommand == 'report':\n+        exec_report(opts)\n+    else:\n+        exec_check(opts)"
      }
    ]
  }
]