gmaxwell,2018-12-08T04:40:16Z,"I'm strongly in support of doing something about this. \n\nBut instead, why not  do something like:  for each tx keep a next-time and ordered data structure, sorted on ( outbound, nonce) where nonce is just selected at random when the inv is processed.\n\nThen after each run of the message handling loop, after processing messages from all peers. go through the txn and for every tx with a next-",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-445430340,445430340,
naumenkogs,2018-12-08T05:59:54Z,"@gmaxwell My implementation was supposed to have minimum intrusion in other parts of the code, but now when you suggested an alternative it seems not much code too. I'll update my PR soon.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-445434264,445434264,
DrahtBot,2018-12-08T06:42:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15141](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15141.html) (Rewrite DoS interface between validation an",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-445436633,445436633,
gmaxwell,2018-12-08T20:42:10Z,"Awesome, if you find that implementing something else actually does turn out to be complicated, please feel free to loop back.  I asked in part because it didn't _seem_ like it would be much more complicated, but the devil is in the details.  I think what you propose here sounds better than nothing, but I think we can probably bypass the half-measure. :)",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-445488406,445488406,
jonasschnelli,2018-12-09T23:06:10Z,"Nice work!\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-445580678,445580678,
naumenkogs,2019-01-14T21:27:55Z,"I've updated the implementation in a DoS-resistant way.\n\nWell, the new code is heavily based on the latest @sdaftuar work (mostly his implementation with my review and couple minor edits), but we decided to use this PR.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-454167958,454167958,
ryanofsky,2019-01-18T20:50:14Z,"I think I might be missing something about when the code in `SendMessages()` runs. But how is this change randomizing which peer a transaction gets requested from?\n\nIt seems like the first request is scheduled based on inv time, and goes to the peer that announced first (with 1 second penalty for an incoming peer):\n\nhttps://github.com/bitcoin/bitcoin/blob/2f9abf746b3555ca8b47e8d0122bf42523",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455683287,455683287,
naumenkogs,2019-01-18T21:39:09Z,"@ryanofsky\n\nIt would not randomize for outbound peers, because the request would be sent right after processMessage for a given peer. We might add a delay to randomize this one too, but under current threat model (sybil attacks through outbound are very unlikely) I don't see a real reason.\n\nAnd yes, I should modify the github comment to credit Suhas, thanks for the idea.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455696095,455696095,
ryanofsky,2019-01-18T22:59:30Z,"> It would not randomize for outbound peers, because the request would be sent right after processMessage for a given peer\n\nThis is only true for the first request, right? After the first request, assuming it timed out, all the outbound peers would be scheduled to make the next request at the same time (`last_request_time + MAX_GETDATA_TX_DELAY`), and since SendMessages() seems to be called on",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455715211,455715211,
naumenkogs,2019-01-18T23:05:01Z,"@ryanofsky I would rather randomize it for outbound as well, since the point you're making seems correct and it's no good.\n\nIt is called in a fixed order. There is a chance of randomization due to non-uniform processing time per request, but this processing time is way less than 1 second, so the chance is very low.\n\nAfter talking to you, I think we should add PoissonNext() to both outbound",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455716192,455716192,
ryanofsky,2019-01-18T23:13:21Z,"Adding PoissonNext() seems like a reasonable way to randomize & rotate among peers, but I am far from an expert on this code and am just trying to understand it myself, so hopefully others will weigh in.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455717682,455717682,
naumenkogs,2019-01-18T23:23:18Z,"@ryanofsky Ah, I think I was confused for a while myself (Sorry for that), but see what actually happens.\n\nImagine scheduling a request for t=1 from peer A. Then, for A and other peers B, C we've heard the transaction from the next request time after the timeout will be t1=61. Then, m_tx_download.m_tx_process_time for peer A would not contain the tx anymore (it'd be in in_flight), and the choi",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455719371,455719371,
ryanofsky,2019-01-19T00:17:21Z,"My concern isn't than an attacker will be able to choose an outbound peer. My concern is that if an outbound peer fails, the code might just keep trying to send requests to it without ever trying another peer. With:\n\n```c++\nvoid ThreadMessageHandler() {\n   for (pnode : vnodes) {\n      SendMessages(pnode);\n   }\n}\n```\n\nif there's a longer delay between `ThreadMessageHandler` call",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455728035,455728035,
naumenkogs,2019-01-19T00:41:28Z,"@ryanofsky no it won't, because it will be removed from the attacker's  ```state.m_tx_download.m_tx_process_time``` (it will be in attacker's ```state.m_tx_download.m_in_flight``` instead). And thus next time we will ask it from some other peer, which was never asked for that tx before.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455731279,455731279,
ryanofsky,2019-01-19T00:57:16Z,Makes sense. Thanks!,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-455733185,455733185,
sipa,2019-01-24T19:08:12Z,"Due to the fact that nodes are processed in order in CConnman::ThreadMessageHandler, with an up-to-100ms delay before running SendMessages, I believe it may be very likely that the first outgoing peer will get the inv first. Maybe when re-inserting invs in the queue for processing, add a small random delay (say in the order of a few seconds)?",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-457318391,457318391,
naumenkogs,2019-01-26T04:50:40Z,"@sipa so in current version inbound peers get a penalty of 1 second. Without the randomization you suggest, creating sybil inbound connections to a target node is quite pointless.\n\nIf we add this PoissonNextSend(2) to every *non-first* (I believe it does not make sense for first) request, it would make sense to create sybil inbounds, hope that one of them roll zero and get a 1-second delay (fr",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-457802080,457802080,
sipa,2019-01-26T05:17:50Z,"@naumenkogs What about something like a uniform delay between 60 and 62 s for outbound, and between 62 and 64 s for inbound?",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-457803340,457803340,
naumenkogs,2019-01-26T05:35:37Z,"I've increased the delay to 2 seconds. We might've still used 1 second for first request to reduce the latency, but 1) I believe the issue pointed out above still applies for inbound even though it's much less likely 2) I think latency won't be affected significantly (I'd expect 5% extra delay or so)  3) code looks a bit cleaner this way",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-457804217,457804217,
sdaftuar,2019-01-30T15:31:31Z,"Tested and it works, though I'd like to see the changes I mentioned above.\n\nHere's a functional test that reviewers may be interested in that demonstrates the new behavior (this test fails on master):\n\n```\n#!/usr/bin/env python3\n# Copyright (c) 2019 The Bitcoin Core developers\n# Distributed under the MIT software license, see the accompanying\n# file COPYING or http://www.opensource",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-458987276,458987276,
MarcoFalke,2019-01-30T15:39:18Z,Could the commits be squashed into a single one? It seems they are just fixups to the first one.,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-458990298,458990298,
jamesob,2019-02-04T20:09:12Z,utACK modulo the unnecessary `ProcessMessage()` param.,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-460394142,460394142,
jamesob,2019-02-04T20:16:28Z,"utACK https://github.com/bitcoin/bitcoin/commit/acf05329ca1bc36f8e89dcd7e1db956b6681262d\n\nIt'd be nice if someone packaged up @sdaftuar's functional test for a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-460396485,460396485,
laanwj,2019-02-06T17:56:03Z,"@naumenkogs  Unless you'd like to be credited as `User` in the release notes, you'll want to change the author name on your commit:\n```\nAuthor: User <...@gmail.com>\n```",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461121519,461121519,
MarcoFalke,2019-02-06T19:35:45Z,utACK 4282e1472d,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461157405,461157405,
sipa,2019-02-06T23:49:52Z,"utACK 4282e1472d7798cb622a3918e6cd168ab49ff96e\n\nOne thing for future consideration: it seems to me that `filterInventoryKnown` and `m_tx_announced` have a partial overlapping function, which makes me wonder if they can be merged, or at least have inv announcement test both.\n\nYou may want to take @laanwj's comment into account about crediting of your commit.\n\n",https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461234685,461234685,
naumenkogs,2019-02-07T15:06:20Z,My last change is just to update author's name.,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461458762,461458762,
MarcoFalke,2019-02-07T15:12:13Z,no-code-changes ACK 1cff3d6cb0,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461461555,461461555,
sipa,2019-02-07T19:39:09Z,no-code-changes ACK 1cff3d6cb017aea87d16cbda0768bbab256d16da,https://github.com/bitcoin/bitcoin/pull/14897#issuecomment-461567530,461567530,
jonasschnelli,2018-12-09T23:05:49Z,Maybe use the internal random functions here (`GetRand()`)?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240058192,240058192,src/net.cpp
AM5800,2018-12-10T09:28:17Z,Using something like `randrange` would be even better,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240135053,240135053,src/net.cpp
AM5800,2018-12-10T09:29:44Z,I think this name is way too generic. Maybe `GETDATA_TIMEOUT`?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240135562,240135562,src/net.h
AM5800,2018-12-10T10:36:59Z,"I find this block and especially this line barely readable. All those `peerToAsk->second.first`...\nMaybe you can at least consider extracting some variables and giving them proper names?\n\nFor example `tx->first` is `tx_hash`. \n`tx-second` is a `timeout` and so on.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240159098,240159098,src/net.cpp
AM5800,2018-12-10T10:49:14Z,Can this `CNode*` pointer dangle?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240163117,240163117,src/net.cpp
AM5800,2018-12-10T11:00:09Z,"Besides, neither comment nor the variable name mention unit. I guess those are microseconds, but still...",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240166538,240166538,src/net.h
AM5800,2018-12-10T11:20:08Z,"I am a bit confused: \nSo here if a node is inbound - it's priority is bound by OUTBOUND_ASK_PRIORITY,\nand if it is outbound - you add OUTBOUND_ASK_PRIORITY one more time.\n\nSo outbound nodes will have higher priority value, right? \n\nBut then in \n`std::multimap<int, std::pair<CNode*, CInv>>::iterator peerToAsk = peersToAskTx.begin();`\nYou take the node with lowest priority?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240172301,240172301,src/net.cpp
naumenkogs,2018-12-10T16:41:19Z,oops. You are right.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240287543,240287543,src/net.cpp
naumenkogs,2018-12-10T17:58:56Z,"It seems CNode constructor is deleted, and using a pointer is widely used across the codebase. What exactly would you suggest?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240316792,240316792,src/net.cpp
AM5800,2018-12-10T19:14:58Z,"I asked because I wasn't able to figure out if this is a problem during my initial review: \nif we put some node to this map and this node disconnects after. What will happen?\n\nRight now I can't check it. Will look tomorrow more thoroughly. \nI also have a solution in case pointers can dangle - you can use `NodeId`. And then when you need actual pointer to `CNode` query it from `CConnman`.\",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240343501,240343501,src/net.cpp
naumenkogs,2018-12-10T20:21:45Z,That's indeed a good idea.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r240366097,240366097,src/net.cpp
ken2812221,2018-12-17T15:11:24Z,I think you should initialize this with nullptr.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242184732,242184732,src/net.cpp
sdaftuar,2018-12-18T14:49:10Z,"This comment was marked resolved but I think the review comment still hasn't been addressed -- I think it'd be better to store a `NodeId` rather than a `CNode *` inside this structure, to avoid concerns around the locking of CNode's and potentially dereferencing a deleted object.\n\nAlso could you add a comment explaining what is being stored in this map?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242565737,242565737,src/net.cpp
sdaftuar,2018-12-18T14:53:12Z,"All the code added in this chunk strikes me as logic that belongs in the `SendMessages()` function in `net_processing.cpp`, rather than in the message handling thread.\n\nThe split between what we do in `net.cpp` and what we do in `net_processing.cpp` isn't crystal clear, but my general sense is that we try to do application level behaviors in `net_processing.cpp`, and generic/low-level network ",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242567478,242567478,src/net.cpp
sdaftuar,2018-12-18T15:04:12Z,"Storing a `CNode *` and doing an `AddRef` seems risky to me -- I think it's better to store a NodeId and do a lookup to see if the peer is still around.  Otherwise, it's possible for a CNode object to live on even after a peer has disconnected, potentially for a long time?  And in general reasoning about the lifetime of these objects is already a little tricky, so I think we should avoid adding mo",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242572079,242572079,src/net.cpp
sdaftuar,2018-12-18T15:19:55Z,"I was wondering if we should bake in a delay if we receive a new transaction for the first time from an inbound peer?  It seems like if we want to give some window for an outbound peer to jump the queue before we make a getdata request to an inbound peer, then we might as well make that window more explicit, rather than leave it to the timing of the message handling thread.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242578580,242578580,src/net.cpp
sdaftuar,2018-12-18T20:06:17Z,"Erasing from `tx_to_ask_from` would mean that we will forget all the other peers who have announced this transaction to us as well, and not be able to request it anymore?  I think we shouldn't do that until after the transaction has been accepted to our mempool (or maybe is in our orphan map).  Otherwise an adversary could blind us to a segwit transaction by announcing a tx first, waiting a reason",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242686938,242686938,src/net_processing.cpp
sdaftuar,2018-12-18T20:20:28Z,The comment above this line should be updated for the new variable name.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242691483,242691483,src/net.h
sdaftuar,2018-12-18T20:22:54Z,Do we need to make this `std::multimap<...>& peers_to_ask_tx` to avoid a copy?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242692171,242692171,src/net.cpp
sdaftuar,2018-12-18T20:27:31Z,Perhaps update this comment to explain what is in this map exactly?  I think it's txid -> next request time in micros?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242693563,242693563,src/net.h
sdaftuar,2018-12-18T20:28:07Z,"Also here, would be nice to have the comment explain exactly what the fields in the map are.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r242693745,242693745,src/net.h
TheBlueMatt,2018-12-19T18:10:47Z,"Yes, that stuff has no business being in net, its only currently there for historical reasons, if there's an opportunity to move it to net_processing, we should.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r243020650,243020650,src/net.cpp
sdaftuar,2018-12-19T19:37:53Z,"If an adversary were to blast us with huge INV messages, then I think they could take over this data structure, and blind us to all other transactions -- once a txid leaves `tx_to_ask` I think we'll never request it?\n\nAlso, I think this is one way that `tx_to_ask` and `tx_to_ask_from` could get out of sync which looks like it would cause a memory leak.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r243048621,243048621,src/net.cpp
practicalswift,2019-01-07T14:33:40Z,This is the last use of `FormatISO8601Time`. Please remove it from `src/util/time.cpp`.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r245672104,245672104,src/net.cpp
sipa,2019-01-23T22:58:13Z,"Use `peer.m_tx_process_time.emplace(process_time, txid);` for better readability (and possibly slightly better performance).",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250406395,250406395,src/net_processing.cpp
sipa,2019-01-23T22:58:52Z,Slightly confusing variable name. What about `download_state` ?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250406573,250406573,src/net_processing.cpp
sipa,2019-01-23T22:59:40Z,`txid` can be a const reference,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250406784,250406784,src/net_processing.cpp
sipa,2019-01-23T23:01:34Z,`txid` can be a const reference,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250407281,250407281,src/net_processing.cpp
sipa,2019-01-23T23:16:46Z,This 'private' seems redundant.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250411372,250411372,src/net_processing.h
sipa,2019-01-23T23:46:06Z,Instead of `(*tx_process_time.begin()).first` you can write `tx_process_time.begin()->first`,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250418030,250418030,src/net_processing.cpp
sipa,2019-01-23T23:47:41Z,Typo: requested,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250418365,250418365,src/net_processing.cpp
sipa,2019-01-24T00:21:38Z,Typo: inboudnd,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250425010,250425010,src/net_processing.cpp
sipa,2019-01-24T00:28:28Z,Could this just call `RequestTx`? To avoid spreading the INBOUND_PEER_TX_DELAY logic over two places in the code.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250426347,250426347,src/net_processing.cpp
sipa,2019-01-24T00:49:26Z,Incorrect indentation.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r250430235,250430235,src/net_processing.cpp
marcinja,2019-01-28T17:13:21Z,nit: Looks like you can remove these two lines now,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251509914,251509914,src/net_processing.h
naumenkogs,2019-01-28T19:54:08Z,oops!,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251569015,251569015,src/net_processing.h
sdaftuar,2019-01-29T19:19:14Z,"There's no downside here to using a uniform distribution here, is there?  And otherwise some inbound peers could be prioritized over outbound peers, which is what we were trying to avoid... I think we could just do:\n\n`process_time = last_request_time + MAX_GETDATA_TX_DELAY + GetRand(AVG_GETDATA_REQUEST_INTERVAL * 1000000)`",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251978894,251978894,src/net_processing.cpp
sdaftuar,2019-01-29T19:19:31Z,"nit: prioritized\n\nAlso I find this comment a bit confusing, perhaps just something like:\n`// Randomize the delay to avoid biasing some peers over others (such as due to fixed ordering of peer processing in ThreadMessageHandler)`\n\n(BTW sorry for writing this code incorrectly the first time, I mistakenly thought we shuffled our peers each loop iteration in ThreadMessageHandler, which is wh",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251978982,251978982,src/net_processing.cpp
sdaftuar,2019-01-29T19:20:54Z,I think we still want the `GUARDED_BY(cs_main)` annotation here?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251979507,251979507,src/net_processing.cpp
sdaftuar,2019-01-29T19:21:29Z,I think this should also have `EXCLUSIVE_LOCKS_REQUIRED(cs_main)`.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251979712,251979712,src/net_processing.cpp
sdaftuar,2019-01-29T19:21:52Z,`EXCLUSIVE_LOCKS_REQUIRED(cs_main)` here as well.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251979850,251979850,src/net_processing.cpp
sdaftuar,2019-01-29T19:23:37Z,`EXCLUSIVE_LOCKS_REQUIRED(cs_main)` here as well.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r251980514,251980514,src/net_processing.cpp
naumenkogs,2019-01-29T22:25:57Z,"For some reason I didn't manage to make it work with limitedmaps. It seemed like it's either size allocation or ``GUARDED_BY``, and I don't see how to allocate it anywhere else after my code changes. ",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252044077,252044077,src/net_processing.cpp
naumenkogs,2019-01-29T22:59:38Z,"> some inbound peers could be prioritized over outbound peers\n\nNope, with these constants, it's [60..62] for outbound and [62..64] for inbound, so it's not possible.\n\nHowever, I think you're right and using GetRand() would work.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252054079,252054079,src/net_processing.cpp
MarcoFalke,2019-01-30T03:19:13Z,"> For some reason I didn't manage to make it work with limitedmaps. It seemed like it's either size allocation or GUARDED_BY, and I don't see how to allocate it anywhere else after my code changes.\n\n\nThis might work\n\n```suggestion\nlimitedmap<uint256, int64_t> m_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ);\n```",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252104433,252104433,src/net_processing.cpp
sdaftuar,2019-01-30T15:20:11Z,"> Nope, with these constants, it's [60..62] for outbound and [62..64] for inbound, so it's not possible.\n\nThere is no upper bound on what PoissonNextSend might return...?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252301125,252301125,src/net_processing.cpp
naumenkogs,2019-01-30T15:35:38Z,"You're right, thanks.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252308379,252308379,src/net_processing.cpp
sdaftuar,2019-01-30T16:14:44Z,"Verified that this works, thanks @MarcoFalke ",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252326992,252326992,src/net_processing.cpp
sdaftuar,2019-01-30T16:17:10Z,"Actually, this should be renamed now to `g_already_asked_for`",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252328086,252328086,src/net_processing.cpp
sdaftuar,2019-01-30T17:02:26Z,"nit: This comment should be updated to refer to the new variables (eg mapAlreadyAskedFor was renamed), new constants (1 second is now incorrect), and the randomization behavior/delay change.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252348537,252348537,src/net_processing.cpp
sdaftuar,2019-01-30T17:02:53Z,"nit: I mentioned this before, I believe our style guide says that globals should start with `g_` instead of `m_`.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r252348726,252348726,src/net_processing.cpp
jamesob,2019-02-04T18:17:57Z,Presumably the `MAX_PEER_TX_ANNOUNCEMENTS` limitation prevents any peer from triggering unnecessary evictions by overrunning this map with junk announcements.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253583389,253583389,src/net_processing.cpp
jamesob,2019-02-04T18:22:08Z,"Is it worth a belt-and-suspenders early return here if `txid` is present in `peer_download_state.m_tx_announced` or `.m_in_flight`, a la the old `AskFor()` definition? Or is that change in behavior intentional?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253584924,253584924,src/net_processing.cpp
jamesob,2019-02-04T18:28:29Z,"Might be missing something, but can't see any necessity for this new param.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253587193,253587193,src/net_processing.cpp
sdaftuar,2019-02-04T18:54:18Z,I think the limit on the number of in-flight requests to a peer is what prevents this from being taken over.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253597444,253597444,src/net_processing.cpp
sdaftuar,2019-02-04T18:55:34Z,"I believe the ` || peer_download_state.m_tx_announced.count(txid)) {` captures the check you're asking about?  I don't think this should be a change in behavior compared with AskFor().\n\nBecause we check against m_tx_announced, I don't think we also need to check with what's in flight.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253597989,253597989,src/net_processing.cpp
sdaftuar,2019-02-04T18:57:30Z,I think this is a hold-over from an earlier version of this patch in which some of the data structures were inside PeerLogicValidation -- I think you're right that this should be removed now.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253598802,253598802,src/net_processing.cpp
naumenkogs,2019-02-04T18:58:20Z,"good point, it's not needed after latest changes.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253599147,253599147,src/net_processing.cpp
naumenkogs,2019-02-04T19:10:32Z,"Right, and you need as many as 500 sybil connections to overrun this map :)",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253603806,253603806,src/net_processing.cpp
sdaftuar,2019-02-04T19:23:54Z,"I forgot to add that the downside to this map being overrun is that we'll just request a transaction sooner than we otherwise would have (in the event that it was removed due to this data structure filling up). So if a zillion peers manage to take over this data structure, they're just wasting our bandwidth a bit -- which they can already do.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253608895,253608895,src/net_processing.cpp
sipa,2019-02-04T19:43:13Z,"If `g_already_asked_for` turns into a normal map, this whole function can become `g_already_asked_for[txid] = request_time;`.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253616437,253616437,src/net_processing.cpp
jamesob,2019-02-04T20:05:13Z,"D'oh, yep you're totally right.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253624945,253624945,src/net_processing.cpp
jamesob,2019-02-04T20:08:20Z,"> I think the limit on the number of in-flight requests to a peer is what prevents this from being taken over.\n\nAh right, per the third clause in this while condition: https://github.com/bitcoin/bitcoin/pull/14897/files#diff-eff7adeaec73a769788bb78858815c91R3864",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253626146,253626146,src/net_processing.cpp
sipa,2019-02-04T21:58:48Z,Suggestion: use `auto&` as type.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253662793,253662793,src/net_processing.cpp
sipa,2019-02-04T21:59:10Z,Suggestion: use `tx_process_time.begin()->second`.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253662911,253662911,src/net_processing.cpp
sipa,2019-02-04T22:00:17Z,"Maybe introduce a constant for this (I know it's moved code, feel free to ignore).",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253663293,253663293,src/net_processing.cpp
sipa,2019-02-04T22:15:16Z,"You can add `static_assert(INBOUND_PEER_DELAY >= MAX_GETDATA_RANDOM_DELAY, ""To preserve security, MAX_GETDATA_RANDOM_DELAY should not exceed INBOUND_PEER_DELAY"");` if you want to codify this (only checked at compile time).",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253667919,253667919,src/net_processing.cpp
sipa,2019-02-04T22:22:40Z,"You could avoid querying the time here, by passing in `nNow` from the caller.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253670248,253670248,src/net_processing.cpp
naumenkogs,2019-02-04T22:52:36Z,"Awesome, I forgot about this option.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253678797,253678797,src/net_processing.cpp
MarcoFalke,2019-02-04T23:07:28Z,"doc-nit: Either remove the ""tx"" from the `m_tx_`-prefix from the other members or call this member `m_tx_in_flight`?",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253682754,253682754,src/net_processing.cpp
naumenkogs,2019-02-05T19:16:19Z,To be clear: are you suggesting switching to normal map and relying on the fact that we are not gonna have 500 sybils (so that it results in the same limiting properties due to checks discussed [here](https://github.com/bitcoin/bitcoin/pull/14897#discussion_r253583389)?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254007802,254007802,src/net_processing.cpp
MarcoFalke,2019-02-05T19:30:50Z,style-nit: Should be const reference?,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254013618,254013618,src/net_processing.cpp
MarcoFalke,2019-02-05T19:38:31Z,"In this function you are checking against the size of `m_tx_announced` to prevent DoS. However, a remote peer can control whether entries are added to `m_tx_announced` or not (see the if condition before `peer_download_state.m_tx_announced.insert`)\n\nSo you can eat all memory by slowly filling `m_tx_process_time` without touching the other tx download state and thus avoid the DoS protection.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254016483,254016483,src/net_processing.cpp
MarcoFalke,2019-02-05T19:40:21Z,"> Maybe introduce a constant for this (I know it's moved code, feel free to ignore).\n\nI'd prefer to do this in a follow up pull request for all places where this constant is used, since this is not the only place that uses this constant IIRC.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254017151,254017151,src/net_processing.cpp
sdaftuar,2019-02-05T19:57:11Z,"Good catch!  Looks like it's just a mistake that we are only adding to m_tx_announced if `last_request_time == 0`, rather than always.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254023223,254023223,src/net_processing.cpp
naumenkogs,2019-02-05T20:03:51Z,"It seems like it's the only place.\nWe had this discussion on IRC: the code for processing GETDATA uses 50,000 instead of 1000 for compatibility reasons.",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254025498,254025498,src/net_processing.cpp
sipa,2019-02-06T18:26:57Z,"No, I'm suggesting that *if* we'd determine that switching to a normal map is safe, this function can be simplified.\n\n",https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254393143,254393143,src/net_processing.cpp
MarcoFalke,2019-02-07T18:23:11Z,style-nit: Could be `const`,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254809602,254809602,src/net_processing.cpp
MarcoFalke,2019-02-07T18:24:06Z,style-nit: Could inline `GetTxRequestTime` here to avoid the named symbol `last_request_time`.,https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254809936,254809936,src/net_processing.cpp
MarcoFalke,2019-02-07T18:29:46Z,style-nit: Could make this `if (!peer_download_state.m_tx_announced.insert(txid).second) return;` and remove the `count()` above to avoid two lookups. (This will be in line with the previous code in `AskFor`),https://github.com/bitcoin/bitcoin/pull/14897#discussion_r254812156,254812156,src/net_processing.cpp
