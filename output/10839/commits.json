[
  {
    "sha": "99ba0c30087dc45a3805f0cac6d2e534ec52f039",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWJhMGMzMDA4N2RjNDVhMzgwNWYwY2FjNmQyZTUzNGVjNTJmMDM5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-16T00:07:52Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-14T15:46:15Z"
      },
      "message": "Don't use pass by reference to const for cheaply-copied types (bool, char, etc.).",
      "tree": {
        "sha": "6234617a7c0277a431a07b7ab5b432793bdefaf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6234617a7c0277a431a07b7ab5b432793bdefaf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99ba0c30087dc45a3805f0cac6d2e534ec52f039",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99ba0c30087dc45a3805f0cac6d2e534ec52f039",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99ba0c30087dc45a3805f0cac6d2e534ec52f039",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99ba0c30087dc45a3805f0cac6d2e534ec52f039/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "140de14a12228cf7af44f59f40a937c2910a0158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/140de14a12228cf7af44f59f40a937c2910a0158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/140de14a12228cf7af44f59f40a937c2910a0158"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0f66d117a8e262717ce3dc8f5d369865c9c239f0",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "patch": "@@ -171,7 +171,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         coinControlUpdateLabels();\n \n         // fee section\n-        for (const int &n : confTargets) {\n+        for (const int n : confTargets) {\n             ui->confTargetSelector->addItem(tr(\"%1 (%2 blocks)\").arg(GUIUtil::formatNiceTimeOffset(n*Params().GetConsensus().nPowTargetSpacing)).arg(n));\n         }\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSmartFeeLabel()));"
      },
      {
        "sha": "ed52c5d52d331a6da1bb425648c6cc5b430e1311",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "patch": "@@ -241,8 +241,8 @@ class CDataStream\n     const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }\n     reference operator[](size_type pos)              { return vch[pos + nReadPos]; }\n     void clear()                                     { vch.clear(); nReadPos = 0; }\n-    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }\n-    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }\n+    iterator insert(iterator it, const char x=char()) { return vch.insert(it, x); }\n+    void insert(iterator it, size_type n, const char x) { vch.insert(it, n, x); }\n     value_type* data()                               { return vch.data() + nReadPos; }\n     const value_type* data() const                   { return vch.data() + nReadPos; }\n "
      },
      {
        "sha": "d23adc84fcfba6b108e15dca644d616084ddc3a1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "patch": "@@ -703,8 +703,8 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n         const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n         const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n-        const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n-        const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const std::string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;"
      },
      {
        "sha": "1afabd6099f25c9d506e140db605a2b32c18bcba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "patch": "@@ -1822,7 +1822,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n     return nCredit;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n     {\n@@ -1836,7 +1836,7 @@ CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const\n+CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool fUseCache) const\n {\n     if (pwallet == 0)\n         return 0;\n@@ -2127,7 +2127,7 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n     return balance;\n }\n \n-void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t &nMaximumCount, const int &nMinDepth, const int &nMaxDepth) const\n+void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n     vCoins.clear();\n "
      },
      {
        "sha": "963eb3de5fe3f58cc8ee551a996857c3f7eb3030",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99ba0c30087dc45a3805f0cac6d2e534ec52f039/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=99ba0c30087dc45a3805f0cac6d2e534ec52f039",
        "patch": "@@ -449,8 +449,8 @@ class CWalletTx : public CMerkleTx\n     CAmount GetCredit(const isminefilter& filter) const;\n     CAmount GetImmatureCredit(bool fUseCache=true) const;\n     CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n+    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -819,7 +819,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t& nMaximumCount = 0, const int& nMinDepth = 0, const int& nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address."
      }
    ]
  }
]