laanwj,2014-11-14T14:42:17Z,"ACK, works for me\n",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63073101,63073101,
sipa,2014-11-14T17:04:44Z,"utACK, though I would prefer just moving that regtest-specific block to a separate RPC...\n",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63095864,63095864,
laanwj,2014-11-14T17:46:24Z,"@sipa Agree that would be cleaner, but there's no reason to do it in this pull.\n",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63102004,63102004,
sipa,2014-11-14T17:48:57Z,This is changing the RPC interface anyway (by adding a return value). Reverting that later is imho not cleaner :)\n(but I'm still fine with merging it)\n,https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63102339,63102339,
gavinandresen,2014-11-14T18:46:37Z,"Fixed the unused variable nit, will merge as soon as Travis has a chance to do it's thing.\n\n@sipa : a -regtest-only 'generateblocks' RPC that replaces the hacky setgenerate is a good idea. But not right now, please, I'm working on a couple of branches with tests that I want to get done and don't want to spend time porting all the existing RPC tests away from setgenerate.\n",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63110316,63110316,
sipa,2014-11-14T22:28:53Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-63139427,63139427,
ghost,2014-11-28T05:00:41Z,"I am not opposed to optimizing regtest block generation. Heavy users of regtest, apparently Gavin included, might find a use case or two. After all, testing has been declared the bottleneck for development in general, so we need more of it, and I view this commit as a step in support of it.\n\nWhat seems out of place in the context of regtest here are error messages coming out of CheckProofOfWork,",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-64855109,64855109,
laanwj,2014-11-28T08:36:18Z,"> Heavy users of regtest, apparently Gavin included, might find a use case or two\n\nWe're all heavy users of regtest when waiting for Travis to finish. Optimizing here is indeed an overall win.\n\n> The logical conclusion is that the miner optimization doesn't make sense. Let's remove it to simplify that part of the code. Less code to maintain and no drawbacks.\n\nThat has been discussed before. ",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-64868228,64868228,
jtimon,2015-01-04T21:56:50Z,"I guess my point is that the only real use of the of the miner is in regtest mode.\nTherefore everything that is good for regtest mining is good mining in general as far as bitcoin core is concerned. As long as non-regtest mining keeps working, we don't care about its performance.\n#4423 was rejected because the performance measured was hashrate in non-regtest mode, but the only mining performance",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-68651123,68651123,
jtimon,2015-01-24T18:33:53Z,"@21E14 #4793 should produce less ""error messages coming out of CheckProofOfWork"" and I also believe it should improve regtest mining performance a little bit, but as I say in that PR I haven't tested.\n",https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-71331150,71331150,
ghost,2015-01-26T06:37:19Z,@jtimon Looks great!\n,https://github.com/bitcoin/bitcoin/pull/5275#issuecomment-71419713,71419713,
laanwj,2014-11-14T14:40:54Z,"Unused:\n\n```\nrpcmining.cpp: In function ‘json_spirit::Value setgenerate(const Array&, bool)’:\nrpcmining.cpp:167:13: warning: unused variable ‘nHeightLast’ [-Wunused-variable]\n         int nHeightLast = -1;\n             ^\n```\n",https://github.com/bitcoin/bitcoin/pull/5275#discussion_r20361671,20361671,src/rpcmining.cpp
