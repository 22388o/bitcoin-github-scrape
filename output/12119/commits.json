[
  {
    "sha": "596c44633fd03e76cc12f2fd37452e223ba43115",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTZjNDQ2MzNmZDAzZTc2Y2MxMmYyZmQzNzQ1MmUyMjNiYTQzMTE1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-01-23T16:56:15Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-01-23T16:56:15Z"
      },
      "message": "[wallet] use P2WPKH change output if any destination is P2WPKH or P2WSH\n\nOnly if -changetype is not set and -addresstype is not \"legacy\".",
      "tree": {
        "sha": "44646cccab6cd1dd47b1a4036d6260d517d066cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44646cccab6cd1dd47b1a4036d6260d517d066cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/596c44633fd03e76cc12f2fd37452e223ba43115",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCgAxFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlpnaTITHHNqb3JzQHNw\ncm92b29zdC5ubAAKCRBX/5vbzDAQCQkjEACwrvpJ2QAamlp5HlhNHIYNlkdMdIOc\nEyaMP5xRPhUt0h0xOeBQKGfAyyPEWwZfVHyn184tMq1jUgBMdCpZCPWCtTbV+waI\nR3f1XUe+WE8rFqCekGcqTAPuy1UqsjHBMhCSfR01lp57IICNl19QIIi1Li22lAXx\nHf4L+FsG03BKipsW2+cLBVwlcMC7vlWSl/hPzQ8Vh127h+YGu0sDDdmnKhkqWBA7\nm7j/zC4TUrAnvZLv4sgbupxSusVvShd8qyJm6eZTFo5xA9PsUo1FwpAjiglrz1JI\nYK4sX5jflHwxyLPEnBygXUbCB4bDnrQ6dWTmYMO+z35x3IQxzqoYS4HaJevYzVJ0\naLiJ8VggM9VgeSqTLlSKZajmZNDnzp5PuUIn0UkgR3ZR9N0VAdas+DEhkKoN7u+9\nllPwcaIRb/wI5b0uZK30Ychxt8Cqc4NQ6tpnK0/vniiUL+9RzTZ+eL3o9ySkIh+/\n6BKSnEz+lkKAy2IoPvDdocUyNkM2t+nHjljRdbI59Nx5R22RiQCNuLN9CGMp+SjA\nNqZWDYpYSjBnAeBkJiFQkahWzAnndII5hkounyZbKP7w7HoTo07CnCtcoDfJGRjd\npdLIO0koEzhpu5YDGJt0WZZAMMvxHyCzXAPVkQhoOJEYtmOKEE5YSZzYC6adV+Di\nf79RkExbV+uzZA==\n=kvTZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 44646cccab6cd1dd47b1a4036d6260d517d066cd\nparent 44080a90a29292df96e92f22242785c5040000a1\nauthor Sjors Provoost <sjors@sprovoost.nl> 1516726575 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1516726575 +0100\n\n[wallet] use P2WPKH change output if any destination is P2WPKH or P2WSH\n\nOnly if -changetype is not set and -addresstype is not \"legacy\".\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596c44633fd03e76cc12f2fd37452e223ba43115",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/596c44633fd03e76cc12f2fd37452e223ba43115",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/596c44633fd03e76cc12f2fd37452e223ba43115/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44080a90a29292df96e92f22242785c5040000a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44080a90a29292df96e92f22242785c5040000a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44080a90a29292df96e92f22242785c5040000a1"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 154,
      "deletions": 24
    },
    "files": [
      {
        "sha": "bc69d4f94557360ce35c3238553f78f3b49c6281",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -643,8 +643,9 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& r\n         // use for change. Despite an actual payment and not change, this is a close match:\n         // it's the output type we use subject to privacy issues, but not restricted by what\n         // other software supports.\n-        wallet->LearnRelatedScripts(newKey, g_change_type);\n-        CTxDestination dest = GetDestinationForKey(newKey, g_change_type);\n+        const OutputType change_type = g_change_type != OUTPUT_TYPE_NONE ? g_change_type : g_address_type;\n+        wallet->LearnRelatedScripts(newKey, change_type);\n+        CTxDestination dest = GetDestinationForKey(newKey, change_type);\n         wallet->SetAddressBook(dest, strAccount, \"refund\");\n \n         CScript s = GetScriptForDestination(dest);"
      },
      {
        "sha": "7d61d708a1c7d6c0074beb9ab437b981553767f9",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -17,7 +17,7 @@ std::string GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-addresstype\", strprintf(_(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\"), FormatOutputType(OUTPUT_TYPE_DEFAULT)));\n-    strUsage += HelpMessageOpt(\"-changetype\", _(\"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default is same as -addresstype)\"));\n+    strUsage += HelpMessageOpt(\"-changetype\", _(\"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n@@ -182,8 +182,10 @@ bool WalletParameterInteraction()\n         return InitError(strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\")));\n     }\n \n-    g_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), g_address_type);\n-    if (g_change_type == OUTPUT_TYPE_NONE) {\n+    // If changetype is set in config file or parameter, check that it's valid.\n+    // Default to OUTPUT_TYPE_NONE if not set.\n+    g_change_type = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), OUTPUT_TYPE_NONE);\n+    if (g_change_type == OUTPUT_TYPE_NONE && !gArgs.GetArg(\"-changetype\", \"\").empty()) {\n         return InitError(strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\")));\n     }\n "
      },
      {
        "sha": "59653721c315ecea0ef46f6250ce790833a84802",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -256,9 +256,9 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n     }\n \n-    OutputType output_type = g_change_type;\n+    OutputType output_type = g_change_type != OUTPUT_TYPE_NONE ? g_change_type : g_address_type;\n     if (!request.params[0].isNull()) {\n-        output_type = ParseOutputType(request.params[0].get_str(), g_change_type);\n+        output_type = ParseOutputType(request.params[0].get_str(), output_type);\n         if (output_type == OUTPUT_TYPE_NONE) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n         }"
      },
      {
        "sha": "c8043389522a8a456fc0fb0703b9ef2bcd94232d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -2644,6 +2644,34 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n+OutputType CWallet::TransactionChangeType(const std::vector<CRecipient>& vecSend)\n+{\n+    // If -changetype is specified, always use that change type.\n+    if (g_change_type != OUTPUT_TYPE_NONE) {\n+        return g_change_type;\n+    }\n+\n+    // if g_address_type is legacy, use legacy address as change (even\n+    // if some of the outputs are P2WPKH or P2WSH).\n+    if (g_address_type == OUTPUT_TYPE_LEGACY) {\n+        return OUTPUT_TYPE_LEGACY;\n+    }\n+\n+    // if any destination is P2WPKH or P2WSH, use P2WPKH for the change\n+    // output.\n+    for (const auto& recipient : vecSend) {\n+        // Check if any destination contains a witness program:\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+        if (recipient.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            return OUTPUT_TYPE_BECH32;\n+        }\n+    }\n+\n+    // else use g_address_type for change\n+    return g_address_type;\n+}\n+\n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n@@ -2739,8 +2767,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     return false;\n                 }\n \n-                LearnRelatedScripts(vchPubKey, g_change_type);\n-                scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, g_change_type));\n+                const OutputType change_type = TransactionChangeType(vecSend);\n+\n+                LearnRelatedScripts(vchPubKey, change_type);\n+                scriptChange = GetScriptForDestination(GetDestinationForKey(vchPubKey, change_type));\n             }\n             CTxOut change_prototype_txout(0, scriptChange);\n             size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);"
      },
      {
        "sha": "cc350853ea3d147753409a4d6640b4407801d109",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -961,6 +961,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetLegacyBalance(const isminefilter& filter, int minDepth, const std::string* account) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n+    OutputType TransactionChangeType(const std::vector<CRecipient>& vecSend);\n+\n     /**\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();"
      },
      {
        "sha": "32c561aae343fb01342a974e4f46cb98100962ba",
        "filename": "test/functional/address_types.py",
        "status": "modified",
        "additions": 110,
        "deletions": 15,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/596c44633fd03e76cc12f2fd37452e223ba43115/test/functional/address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/596c44633fd03e76cc12f2fd37452e223ba43115/test/functional/address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/address_types.py?ref=596c44633fd03e76cc12f2fd37452e223ba43115",
        "patch": "@@ -4,38 +4,76 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet can send and receive using all combinations of address types.\n \n-There are 4 nodes-under-test:\n+There are 5 nodes-under-test:\n     - node0 uses legacy addresses\n     - node1 uses p2sh/segwit addresses\n     - node2 uses p2sh/segwit addresses and bech32 addresses for change\n     - node3 uses bech32 addresses\n+    - node4 uses a p2sh/segwit addresses for change\n \n-node4 exists to generate new blocks.\n+node5 exists to generate new blocks.\n \n-The script is a series of tests, iterating over the 4 nodes. In each iteration\n-of the test, one node sends:\n+## Multisig address test\n+\n+Test that adding a multisig address with:\n+    - an uncompressed pubkey always gives a legacy address\n+    - only compressed pubkeys gives the an `-addresstype` address\n+\n+## Sending to address types test\n+\n+A series of tests, iterating over node0-node4. In each iteration of the test, one node sends:\n     - 10/101th of its balance to itself (using getrawchangeaddress for single key addresses)\n     - 20/101th to the next node\n     - 30/101th to the node after that\n     - 40/101th to the remaining node\n     - 1/101th remains as fee+change\n \n Iterate over each node for single key addresses, and then over each node for\n-multisig addresses. In a second iteration, the same is done, but with explicit address_type\n-parameters passed to getnewaddress and getrawchangeaddress. Node0 and node3 send to p2sh,\n-node 1 sends to bech32, and node2 sends to legacy. As every node sends coins after receiving,\n-this also verifies that spending coins sent to all these address types works.\"\"\"\n+multisig addresses.\n+\n+Repeat test, but with explicit address_type parameters passed to getnewaddress\n+and getrawchangeaddress:\n+    - node0 and node3 send to p2sh.\n+    - node1 sends to bech32.\n+    - node2 sends to legacy.\n+\n+As every node sends coins after receiving, this also\n+verifies that spending coins sent to all these address types works.\n+\n+## Change type test\n+\n+Test that the nodes generate the correct change address type:\n+    - node0 always uses a legacy change address.\n+    - node1 uses a bech32 addresses for change if any destination address is bech32.\n+    - node2 always uses a bech32 address for change\n+    - node3 always uses a bech32 address for change\n+    - node4 always uses p2sh/segwit output for change.\n+\"\"\"\n \n from decimal import Decimal\n import itertools\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, connect_nodes_bi, sync_blocks, sync_mempools\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 5\n-        self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=p2sh-segwit\"], [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"], [\"-addresstype=bech32\"], []]\n+        self.num_nodes = 6\n+        self.extra_args = [\n+            [\"-addresstype=legacy\"],\n+            [\"-addresstype=p2sh-segwit\"],\n+            [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n+            [\"-addresstype=bech32\"],\n+            [\"-changetype=p2sh-segwit\"],\n+            []\n+        ]\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -104,10 +142,26 @@ def test_address(self, node, address, multisig, typ):\n             # Unknown type\n             assert(False)\n \n+    def test_change_output_type(self, node_sender, destinations, expected_type):\n+        txid = self.nodes[node_sender].sendmany(fromaccount=\"\", amounts=dict.fromkeys(destinations, 0.001))\n+        raw_tx = self.nodes[node_sender].getrawtransaction(txid)\n+        tx = self.nodes[node_sender].decoderawtransaction(raw_tx)\n+\n+        # Make sure the transaction has change:\n+        assert_equal(len(tx[\"vout\"]), len(destinations) + 1)\n+\n+        # Make sure the destinations are included, and remove them:\n+        output_addresses = [vout['scriptPubKey']['addresses'][0] for vout in tx[\"vout\"]]\n+        change_addresses = [d for d in output_addresses if d not in destinations]\n+        assert_equal(len(change_addresses), 1)\n+\n+        self.log.debug(\"Check if change address \" + change_addresses[0] + \" is \" + expected_type)\n+        self.test_address(node_sender, change_addresses[0], multisig=False, typ=expected_type)\n+\n     def run_test(self):\n-        # Mine 101 blocks on node4 to bring nodes out of IBD and make sure that\n+        # Mine 101 blocks on node5 to bring nodes out of IBD and make sure that\n         # no coinbases are maturing for the nodes-under-test during the test\n-        self.nodes[4].generate(101)\n+        self.nodes[5].generate(101)\n         sync_blocks(self.nodes)\n \n         uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n@@ -182,8 +236,8 @@ def run_test(self):\n                 to_node %= 4\n                 assert_equal(unconf_balances[to_node], to_send * 10 * (2 + n))\n \n-            # node4 collects fee and block subsidy to keep accounting simple\n-            self.nodes[4].generate(1)\n+            # node5 collects fee and block subsidy to keep accounting simple\n+            self.nodes[5].generate(1)\n             sync_blocks(self.nodes)\n \n             new_balances = self.get_balances()\n@@ -195,5 +249,46 @@ def run_test(self):\n                 to_node %= 4\n                 assert_equal(new_balances[to_node], old_balances[to_node] + to_send * 10 * (2 + n))\n \n+        # Get one p2sh/segwit address from node2 and two bech32 addresses from node3:\n+        to_address_p2sh = self.nodes[2].getnewaddress()\n+        to_address_bech32_1 = self.nodes[3].getnewaddress()\n+        to_address_bech32_2 = self.nodes[3].getnewaddress()\n+\n+        # Fund node 4:\n+        self.nodes[5].sendtoaddress(self.nodes[4].getnewaddress(), Decimal(\"1\"))\n+        self.nodes[5].generate(1)\n+        sync_blocks(self.nodes)\n+        assert_equal(self.nodes[4].getbalance(), 1)\n+\n+        self.log.info(\"Nodes with addresstype=legacy never use a P2WPKH change output\")\n+        self.test_change_output_type(0, [to_address_bech32_1], 'legacy')\n+\n+        self.log.info(\"Nodes with addresstype=p2sh-segwit only use a P2WPKH change output if any destination address is bech32:\")\n+        self.test_change_output_type(1, [to_address_p2sh], 'p2sh-segwit')\n+        self.test_change_output_type(1, [to_address_bech32_1], 'bech32')\n+        self.test_change_output_type(1, [to_address_p2sh, to_address_bech32_1], 'bech32')\n+        self.test_change_output_type(1, [to_address_bech32_1, to_address_bech32_2], 'bech32')\n+\n+        self.log.info(\"Nodes with change_type=bech32 always use a P2WPKH change output:\")\n+        self.test_change_output_type(2, [to_address_bech32_1], 'bech32')\n+        self.test_change_output_type(2, [to_address_p2sh], 'bech32')\n+\n+        self.log.info(\"Nodes with addresstype=bech32 always use a P2WPKH change output (unless changetype is set otherwise):\")\n+        self.test_change_output_type(3, [to_address_bech32_1], 'bech32')\n+        self.test_change_output_type(3, [to_address_p2sh], 'bech32')\n+\n+        self.log.info('getrawchangeaddress defaults to addresstype if -changetype is not set and argument is absent')\n+        self.test_address(3, self.nodes[3].getrawchangeaddress(), multisig=False, typ='bech32')\n+\n+        self.log.info('getrawchangeaddress fails with invalid changetype argument')\n+        assert_raises_rpc_error(-5, \"Unknown address type 'bech23'\", self.nodes[3].getrawchangeaddress, 'bech23')\n+\n+        self.log.info(\"Nodes with changetype=p2sh-segwit never use a P2WPKH change output\")\n+        self.test_change_output_type(4, [to_address_bech32_1], 'p2sh-segwit')\n+        self.test_address(4, self.nodes[4].getrawchangeaddress(), multisig=False, typ='p2sh-segwit')\n+        self.log.info(\"Except for getrawchangeaddress if specified:\")\n+        self.test_address(4, self.nodes[4].getrawchangeaddress(), multisig=False, typ='p2sh-segwit')\n+        self.test_address(4, self.nodes[4].getrawchangeaddress('bech32'), multisig=False, typ='bech32')\n+\n if __name__ == '__main__':\n     AddressTypeTest().main()"
      }
    ]
  }
]