promag,2018-01-08T23:44:57Z,"Does it forces bech32 addresses in the wallet without consent?\n\n\n",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356132774,356132774,
Sjors,2018-01-09T10:05:37Z,"@promag for change addresses yes, so that could be an objection.\n\nMore conservative approaches could be:\n1) have another UI check box to send change to a bech32 address; this could be checked by default if all destinations are bech32. This won't work for RPC users, but those can be expected to use the `-changeaddress` flag.\n\n2) add an additional constraint that at least one of the the fr",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356238217,356238217,
sipa,2018-01-09T10:07:42Z,Creating a change output AFAIK does not add any address to the wallet.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356238760,356238760,
promag,2018-01-09T10:09:15Z,@sipa they are listed in `listunspent` right?,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356239182,356239182,
promag,2018-01-09T10:11:59Z,"@Sjors IMO the `-changetype` is enough, eventually it will default to bech32 I guess.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356239905,356239905,
gmaxwell,2018-01-11T07:08:31Z,General concept ACK-- but I would suggest that it only do this if the change type is at least p2sh segwit:  There might be some compatibility reason that someone is avoiding creating segwit outputs for some reason.  That doesn't hold if they're already asking for p2sh output...  privacy was the major reason the sw wallet support didn't go 100% native change from the start... but that is even more ,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356845504,356845504,
Sjors,2018-01-11T09:45:42Z,@gmaxwell it now uses a bech32 change address if change type is p2sh-segwit and any of the outputs are bech32.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356881113,356881113,
luke-jr,2018-01-11T10:25:49Z,"Seems to me if the user is explicitly setting a change type, we should respect that.\n\nInstead, I suggest turning OUTPUT_TYPE_DEFAULT into a real value, and handling it specially for change here. Eg, https://github.com/luke-jr/bitcoin/commits/bech32-change",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356891888,356891888,
Sjors,2018-01-11T10:41:09Z,@luke-jr I like the idea of having OUTPUT_TYPE_DEFAULT so we can distinguish between `-changetype` being absent or set to `p2sh-segwit`. Can you make d4e51351 a PR that I can rebase this on? ,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356895800,356895800,
luke-jr,2018-01-11T10:43:30Z,"It seems a bit pointless to stand on its own in a PR. It would be better to just include it as a separate commit here (and in another PR I'm about to open).\n\nTo get it in your own branch as-is, switch to it and do:\n```\ngit fetch git://github.com/luke-jr/bitcoin bech32-change && git reset --hard 5efd54745c34ff329d9c75f2f5ee852930b21231\n```",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356896373,356896373,
Sjors,2018-01-11T12:05:57Z,"@luke-jr I'll wait a little bit to see if your commit needs more changes.\n\nI do think it's worth it's own PR, but applied to all launch flags where absence or presence can cause ambiguity about user intention. I've run into this general problem several times now, e.g. with #9527. ",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-356915438,356915438,
Sjors,2018-01-11T18:34:46Z,">  Should check inputs instead?\n\nOr even check if any input or any output is bech32?",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357019868,357019868,
instagibbs,2018-01-11T19:06:11Z,agreed with @TheBlueMatt just check if it's set,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357028850,357028850,
Sjors,2018-01-11T19:23:59Z,I can't reproduce this Travis failure on MacOS or Ubuntu 14.04 (I didn't use the depends system).,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357033789,357033789,
gmaxwell,2018-01-11T20:35:35Z,"It seemed like people in the IRC meeting liked:  ""If the configured change type is not legacy, use p2wpkh if any of the outputs are p2wpkh"".",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357053281,357053281,
Sjors,2018-01-11T20:49:01Z,"@gmaxwell by ""legacy"" you mean `p2sh-segwit`? `-changetype=legacy` means p2pkh (in which case we also don't want to use bech32). Maybe we should also rename that `legacy` option, because the term seems overloaded.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357056748,357056748,
gmaxwell,2018-01-11T23:14:41Z,"By legacy I mean p2pkh. We should not create native segwit change if the user has specifically asked for non-segwit change.  If a user is setting legacy then it's likely that they really don't want segwit outputs for some reason (for example, compatibility with older software).\n\nThat argument doesn't apply for p2sh-segwit. The only reason to ever use p2sh-segwit change is for change distinguis",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357092710,357092710,
gmaxwell,2018-01-11T23:16:38Z,"As a pedantic aside, it's a mistake to say ""bech32"" -- there is no address involved with change, so no bech32 involved here at all.  The question here is to use p2sh-p2wpkh or p2wpkh, which would exist no less even if bech32 had never been specified.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357093139,357093139,
achow101,2018-01-12T02:43:24Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357127353,357127353,
Sjors,2018-01-12T12:04:16Z,"@gmaxwell I know there's no spoon, but block explorers will display a spoon :-)",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357221725,357221725,
sneurlax,2018-01-12T16:19:41Z,"If this is merged, I think it ought to be paired with #12146.  It's a good, off-by-default option to have available for strange edge cases that want to run the latest full node software but have what would otherwise be an infuriating need to remain compatible with legacy systems.\n\nJust my 2 bits.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357283449,357283449,
Sjors,2018-01-12T16:23:42Z,"This should be ready for review, pending Travis' blessing.\n\n@sneurlax there's no need for that. Those who would use #12146 would also launch with `-addresstype=legacy`, which prevents the behavior this PR adds.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357284596,357284596,
sneurlax,2018-01-12T16:34:08Z,"I must still misunderstand their relation, then.  Sorry for piping up.\n\nDoes `-changetype=bech32` also prevent the behavior this PR adds?",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357287565,357287565,
instagibbs,2018-01-12T16:43:08Z,concept ACK,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357290095,357290095,
Sjors,2018-01-12T16:59:29Z,@sneurlax yes. If you set `-changetype` it will honor that. Only if you don't set `-changetype` and you don't set `-addresstype=legacy` it will use the following rule: use a native segwit change output* if any destination is a native segwit address.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357294802,357294802,
Sjors,2018-01-15T14:26:25Z,@TheBlueMatt test failure seems indeterministic. Afaik I only added a comment since the last time Travis was happy. We'll see what happens with this indentation fix.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357697093,357697093,
Sjors,2018-01-15T15:06:06Z,"`net.py` fails on Travis, but passes locally. I'll rebase because there are some new test related fixes on master.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357707934,357707934,
Sjors,2018-01-15T16:21:19Z,Rebase made Travis happy.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357728968,357728968,
Sjors,2018-01-16T12:00:41Z,"`g_change_type` is no longer based on `-addresstype`. Functions that use `g_change_type` need to handle `OUTPUT_TYPE_NONE`, which I've done everywhere with: `g_change_type ? g_change_type : g_address_type`.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357939402,357939402,
sipa,2018-01-16T14:47:15Z,"utACK 327634f97e5921815c30e50d076cde0f6ff51aaf\n\nI think the code can be made a bit cleaner by introducing an explicit P2SH_SEGWIT_BUT_NATIVE_WHEN_NATIVE_DESTINATION or so type in `OutputType`, but let's do that later.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-357982763,357982763,
Sjors,2018-01-18T08:48:06Z,Interesting how Github put @ryanofsky's review above @MarcoFalke's even though it's more recent.,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-358577908,358577908,
promag,2018-01-18T22:37:41Z,"> I think the code can be made a bit cleaner by introducing an explicit P2SH_SEGWIT_BUT_NATIVE_WHEN_NATIVE_DESTINATION or so type in OutputType, but let's do that later.\n\n@sipa but `-addresstype` could have that value?",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-358805079,358805079,
ryanofsky,2018-01-19T21:56:53Z,"I just realized this PR doesn't currently update the `-changetype` help text, so I withdraw my ACK until that is done. (The current text says `default is same as -addresstype`, which is no longer accurate.)\n\nConditional utACK 0ee841a21aaea880e3af1e93b53d373295d1f829 if help is updated.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-359100547,359100547,
Sjors,2018-01-20T13:36:16Z,"> current text says `default is same as -addresstype`, which is no longer accurate\n\nMaybe I can change it to: ""Default is same as -addresstype, except when sending to a native segwit address and -addresstype is p2sh-segwit""?",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-359172020,359172020,
Sjors,2018-01-22T15:33:52Z,"Updated help text:\n<img width=""509"" alt=""schermafbeelding 2018-01-22 om 15 41 28"" src=""https://user-images.githubusercontent.com/10217/35226167-c438fac6-ff8a-11e7-83c3-6adc90047236.png"">\n\n@promag added the `const` you suggested, as well as explicit `== OUTPUT_TYPE_NONE` in both places (@ajtowns).\n\n> This can be avoided/skipped if there is a custom address in coin control. Move it below t",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-359459874,359459874,
promag,2018-01-23T15:33:38Z,"utACK dc2812f.\n\nThe only thing that bothers me is the fact that `g_address_type = OUTPUT_TYPE_NONE` is an error and now `g_change_type = OUTPUT_TYPE_NONE` is not.",https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-359827900,359827900,
MarcoFalke,2018-01-23T21:28:01Z,utACK 596c44633fd03e76cc12f2fd37452e223ba43115,https://github.com/bitcoin/bitcoin/pull/12119#issuecomment-359936480,359936480,
promag,2018-01-11T15:02:19Z,Wrong indentation. Also `any_destination_bech32`?,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r160982806,160982806,src/wallet/wallet.cpp
promag,2018-01-11T15:02:31Z,Wrong indentation.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r160982870,160982870,src/wallet/wallet.cpp
Sjors,2018-01-11T18:32:29Z,"Will fix indentation and check variable name, thanks.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161038291,161038291,src/wallet/wallet.cpp
Sjors,2018-01-12T15:53:13Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161257090,161257090,src/wallet/wallet.cpp
instagibbs,2018-01-12T16:10:21Z,"Should probably check/track witness version here? It shouldn't be >0 unless we update, but probably more future-safe.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161261687,161261687,src/wallet/wallet.cpp
instagibbs,2018-01-12T16:11:56Z,"`and any destination is (P2SH-)P2WPKH,` I don't think this is correct? should just be `P2WPKH`",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161262071,161262071,src/wallet/wallet.cpp
instagibbs,2018-01-12T16:38:57Z,I don't see why this is the case. No payment here is native segwit?,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161269039,161269039,test/functional/address_types.py
Sjors,2018-01-12T18:48:55Z,Would new witness versions require different change address behavior?,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161298191,161298191,src/wallet/wallet.cpp
Sjors,2018-01-12T18:53:03Z,"`addresstype` implicitly sets `changetype`:\n\n`g_change_type = ParseOutputType(gArgs.GetArg(""-changetype"", """"), g_address_type)`\n\nIf the user overrides `changetype` it will use that, so I could change the word ""always"" in the comment to reflect that better.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161299063,161299063,test/functional/address_types.py
instagibbs,2018-01-12T19:24:54Z,riiiiiiiiiiight. Could you just write that? I actually forgot this and I've reviewed all the PRs so far :(,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161305747,161305747,test/functional/address_types.py
instagibbs,2018-01-12T19:27:54Z,"Let's say you send to a v1, you wouldn't want to accidentally make a v0 to ""copy"" it. Perhaps more appropriate for an assert here.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161306395,161306395,src/wallet/wallet.cpp
instagibbs,2018-01-12T19:30:38Z,"add at end of above comment ""unless changetype is set otherwise""",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161307005,161307005,test/functional/address_types.py
Sjors,2018-01-12T20:48:53Z,Done,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161321827,161321827,test/functional/address_types.py
Sjors,2018-01-12T20:56:14Z,"It might be assertophobia, but I'm not sure what you mean by that example. If you send coins to a future v1 segwit address, the change has to go somewhere right? So the change would just go to a v0 witness derived from the next available key in the pool.\n\nNote that `IsWitnessProgram` writes to `witnessversion`, not the other way around. And `witnessversion` isn't used when the change address i",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161323276,161323276,src/wallet/wallet.cpp
instagibbs,2018-01-12T21:10:49Z,"Not unsafe, but defeats the privacy logic that this enables, I think.\n\nMaybe I'm making too much hay of this.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161326063,161326063,src/wallet/wallet.cpp
sipa,2018-01-12T21:21:44Z,I think we can discuss what to do with v1 witnesses when the time comes.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161328143,161328143,test/functional/address_types.py
TheBlueMatt,2018-01-14T18:18:07Z,short indent here.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161405681,161405681,src/wallet/wallet.cpp
TheBlueMatt,2018-01-14T18:25:14Z,"Really not sure what the point is here - we definitely should allowe sending to >v0 witness versions, its not our job to make sure someone giving us an address gives us something that is currently safe (ie has been forked to have some meaning), and we shouldn't need an update just to send to a newly-defined segwit version.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161405829,161405829,src/wallet/wallet.cpp
Sjors,2018-01-15T14:24:34Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161531689,161531689,src/wallet/wallet.cpp
instagibbs,2018-01-15T14:31:57Z,@TheBlueMatt Why are we having the wallet make v0 change outputs if the receiving address is v1+? Makes no sense to me.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161533605,161533605,src/wallet/wallet.cpp
laanwj,2018-01-15T16:49:58Z,"Suggestion: test g_address_type against OUTPUT_TYPE_DEFAULT, instead of touching `gArgs` here. \n\nIf that is not possible, please move the `gArgs.IsArgSet(""-changetype"")` to `wallet/init.cpp` and set a global boolean `g_changetype_is_default` or such - don't spread the handling for one option over two separate places.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161570617,161570617,src/wallet/wallet.cpp
gmaxwell,2018-01-16T04:50:05Z,"@instagibbs  since we don't support v1  there is no 'private' option possible for us,  so given that privacy is impossible, we should at least choose the most efficient!\n\nThe only reason we initially defaulted to do anything but produce native change is because under the assumption that most payments would be non-native that would be pretty bad for privacy.  But that privacy argument only hold",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161660342,161660342,src/wallet/wallet.cpp
Sjors,2018-01-16T11:03:19Z,`OUTPUT_TYPE_DEFAULT` is used for the help message and is defined as `OUTPUT_TYPE_P2SH_SEGWIT`. I'll try (something along the lines of) @luke-jr's 5efd54745. ,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161724493,161724493,src/wallet/wallet.cpp
instagibbs,2018-01-16T18:27:35Z,"shouldn't this read:\n>// and any destination is P2WPKH, use P2WPKH for the change",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161844931,161844931,src/wallet/wallet.cpp
Sjors,2018-01-16T19:42:34Z,Actually I meant P2WPKH or P2WSH. Fixed.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r161865943,161865943,src/wallet/wallet.cpp
ajtowns,2018-01-17T11:51:07Z,Shouldn't this compare explicitly? ie `change_type = g_change_type != OUTPUT_TYPE_NONE ? g_change_type : g_address_type`,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162027651,162027651,src/qt/paymentserver.cpp
Sjors,2018-01-17T12:43:19Z,I wanted to keep it short for readability and leverage that OUTPUT_TYPE_NONE is 0. I can change that if you think it's unsafe.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162039648,162039648,src/qt/paymentserver.cpp
MarcoFalke,2018-01-17T14:08:45Z,"I think it should be changed (in the future). The whole enum should be a c++11 enum class to be type safe. Though, that will touch all the code, so maybe too late for 0.16...",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162059376,162059376,src/qt/paymentserver.cpp
MarcoFalke,2018-01-17T14:22:05Z,"style-nit: heh, you are excessively using new lines in python code",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162062952,162062952,test/functional/address_types.py
MarcoFalke,2018-01-17T14:23:52Z,"style-nit: Should probably use named args, as it is not clear what ""False"" refers to.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162063432,162063432,test/functional/address_types.py
Sjors,2018-01-17T17:01:14Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162114601,162114601,test/functional/address_types.py
Sjors,2018-01-17T17:01:16Z,Removed a few blank lines...,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162114607,162114607,test/functional/address_types.py
ryanofsky,2018-01-17T20:37:31Z,"Suggest writing this as:\n\n```c++\ng_change_type = ParseOutputType(gArgs.GetArg(""-changetype"", """"), OUTPUT_TYPE_NONE);\nif (g_change_type == OUTPUT_TYPE_NONE && gArgs.IsArgSet(""-changetype"")) {\n      return InitError(strprintf(_(""Unknown change type '%s'""), gArgs.GetArg(""-changetype"", """")));\n}\n```\n\nReasons:\n\n- More consistent with `g_address_type` code above\n- Smaller diff, le",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162171610,162171610,src/wallet/init.cpp
ryanofsky,2018-01-17T20:49:13Z,"This is introducing an inconsistency between `getnewaddress` and `getrawchangeaddress`. Former will continue treating empty string like null, and latter will now treat the empty string as an error. Would suggest either passing `output_type` here to continue treating empty string like null both places, or passing `OUTPUT_TYPE_NONE` in `getnewaddress` to now raise an error both places.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162174440,162174440,src/wallet/rpcwallet.cpp
ryanofsky,2018-01-17T20:52:25Z,"May be easier to read as\n\n```\noutput_addresses = [vout['scriptPubKey']['addresses'][0] for vout in tx[""vout""]]\n```\n",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162175280,162175280,test/functional/address_types.py
ryanofsky,2018-01-17T20:52:50Z,"Could simplify to `output_addresses.remove(destination)`. Another alternative could be\n\n```python\nchange_addresses = [d for d in output_addresses if d not in destinations]\n```",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162175368,162175368,test/functional/address_types.py
ryanofsky,2018-01-17T20:59:33Z,"Just a suggestion, but perhaps this would be simpler as\n\n```c++\nOutputType change_type =\n    g_change_type != OUTPUT_TYPE_NONE ? g_change_type :\n    g_address_type != OUTPUT_TYPE_LEGACY && any_destination_native_segwit ? OUTPUT_TYPE_BECH32 :\n    g_address_type;\n```",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162176966,162176966,src/wallet/wallet.cpp
Sjors,2018-01-18T08:45:14Z,"Being able to override config file seems quite useful, I'll try your suggestion.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162277984,162277984,src/wallet/init.cpp
Sjors,2018-01-18T12:33:36Z,"@ryanofsky setting `changetype=...` in the config file makes `gArgs.IsArgSet(""-changetype""` evaluate to true. The config file value is ignored if a parameter overrides it. I still like your shorter notation, so using that now.\n",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162328431,162328431,src/wallet/init.cpp
Sjors,2018-01-18T12:33:38Z,There was a bug there: `OutputType output_type = g_change_type ? g_change_type : g_address_type` above is overridden in this line. I added some tests for `getrawchangeaddress`.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162328435,162328435,src/wallet/rpcwallet.cpp
Sjors,2018-01-18T12:33:41Z,Nice! Done.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162328443,162328443,src/wallet/wallet.cpp
Sjors,2018-01-18T12:33:42Z,"It is, done.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162328448,162328448,test/functional/address_types.py
Sjors,2018-01-18T12:33:44Z,"That's what happens if you write javascript for a few years... :-)\n\nFixed",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162328462,162328462,test/functional/address_types.py
ryanofsky,2018-01-19T19:18:00Z,"https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162171610\n\n> @ryanofsky setting changetype=... in the config file makes gArgs.IsArgSet(""-changetype"" evaluate to true\n\nYes, that's the reason I also suggested replacing `gArgs.IsArgSet(""-changetype"")` with `!gArgs.GetArg(""-changetype"", """").empty()`\n",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162708605,162708605,src/wallet/init.cpp
promag,2018-01-20T14:38:59Z,"Agree with @ajtowns. Nit, `const OutputType ....`. Suggestion:\n```cpp\nconst OutputType change_type = g_change_type == OUTPUT_TYPE_NONE ? g_address_type : g_change_type;\n```",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162784075,162784075,src/qt/paymentserver.cpp
promag,2018-01-20T15:05:10Z,This can be avoided/skipped if there is a custom address in coin control. Move it below to where `any_destination_native_segwit` is needed.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162784617,162784617,src/wallet/wallet.cpp
promag,2018-01-20T15:18:59Z,I know this was here before but shouldn't this be called by CReserveKey only if the key isn't returned to the pool?,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162784913,162784913,src/wallet/wallet.cpp
promag,2018-01-20T15:23:26Z,"IMO should avoid long expressions. Suggestion:\n```cpp\nOutputType change_type = g_change_type;\nif (change_type == OUTPUT_TYPE_NONE) {\n    if (any_destination_native_segwit && g_address_type != OUTPUT_TYPE_LEGAC) {\n        change_type = OUTPUT_TYPE_BECH32;\n    } else {\n        change_type = g_address_type;\n    }\n}\n```\n\nAlso, `CreateTransaction` is already a rather long functi",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162785050,162785050,src/wallet/wallet.cpp
Sjors,2018-01-22T15:33:35Z,"Oh wait, now I get it. So if the config file says `changetype=bech32` the user could unset it with `-changetype=`. Fixed.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162971714,162971714,src/wallet/init.cpp
Sjors,2018-01-22T15:33:42Z,"Switched to your version.\n\nI extracted the change type stuff to a new function. I made a note to add tests later.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r162971760,162971760,src/wallet/wallet.cpp
promag,2018-01-22T21:44:57Z,"Performance improvement:\n```cpp\n    any_destination_native_segwit = true;\n    break;\n```",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163077600,163077600,src/wallet/wallet.cpp
promag,2018-01-22T21:50:04Z,"Suggestions, for now, keep static and not a `CWallet` member:\n```cpp\nstatic OutputType GetChangeTypeForRecipients(const std::vector<CRecipient>& recipients)\n{\n```\nAnd below:\n```cpp\nconst OutputType change_type = GetChangeTypeForRecipients(vecSend);\n```\n*don't mind the function name.* ",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163078828,163078828,src/wallet/wallet.cpp
Sjors,2018-01-23T14:44:40Z,What's the advantage of making it static? Especially if the longer term aim is to specify launch options for individual wallets (and presumably replace references to `g_change_type` with a `CWallet` member).,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163263340,163263340,src/wallet/wallet.cpp
Sjors,2018-01-23T14:59:02Z,Done,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163268093,163268093,src/wallet/wallet.cpp
promag,2018-01-23T15:09:21Z,I just think it's too soon to *expose* this in the `CWallet`. Feel free to leave as it is.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163271465,163271465,src/wallet/wallet.cpp
jnewbery,2018-01-23T15:40:05Z,"This is perhaps just personal taste, but I prefer early function return if we already know what change address we'll use without having to look at the outputs. That also means we can remove the local variables `any_destination_native_segwit` and `change_type`. It'd look something like:\n\n```\n    // If -changetype is specified, always use that change type.\n    if (g_change_type != OUTPUT_TYP",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163282074,163282074,src/wallet/wallet.cpp
jnewbery,2018-01-23T15:40:58Z,"please update the lines above to say there are 5 nodes under test, and describe what node4 is for.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163282385,163282385,test/functional/address_types.py
jnewbery,2018-01-23T15:44:36Z,update comment: `on node5`,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163283684,163283684,test/functional/address_types.py
jnewbery,2018-01-23T15:46:08Z,update comment,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163284201,163284201,test/functional/address_types.py
jnewbery,2018-01-23T15:56:41Z,unnecessary double space,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163287999,163287999,test/functional/address_types.py
jnewbery,2018-01-23T15:56:50Z,unnecessary double space,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163288051,163288051,test/functional/address_types.py
jnewbery,2018-01-23T15:57:46Z,"I think the whole docstring could be updated to reflect better what the test is actually doing:\n\n```\n""""""Test that the wallet can send and receive using all combinations of address types.\n\nThere are 5 nodes-under-test:\n    - node0 uses legacy addresses\n    - node1 uses p2sh/segwit addresses\n    - node2 uses p2sh/segwit addresses and bech32 addresses for change\n    - node3 uses bec",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163288383,163288383,test/functional/address_types.py
jnewbery,2018-01-23T16:09:18Z,Suggest you make all of these logs `INFO` level,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163292563,163292563,test/functional/address_types.py
jnewbery,2018-01-23T16:09:49Z,"suggest you make these named arguments so it's clear what the `""""` is for.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163292737,163292737,test/functional/address_types.py
jnewbery,2018-01-23T16:10:17Z,"Perhaps clearer as:\n\n```\n        self.extra_args = [[""-addresstype=legacy""],                             # node0\n                           [""-addresstype=p2sh-segwit""],                        # node1\n                           [""-addresstype=p2sh-segwit"", ""-changetype=bech32""],  # node2\n                           [""-addresstype=bech32""],                             # node3\n         ",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163292876,163292876,test/functional/address_types.py
jnewbery,2018-01-23T16:14:00Z,I think it's fine to join these lines,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163294136,163294136,test/functional/address_types.py
Sjors,2018-01-23T16:49:32Z,"I find your version more readable as well, so switched to that.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306253,163306253,src/wallet/wallet.cpp
Sjors,2018-01-23T16:49:39Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306282,163306282,test/functional/address_types.py
Sjors,2018-01-23T16:49:45Z,"That's much clearer, thanks. I also ordered the change address tests by node id added node 2 and 3 to the description. ",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306313,163306313,test/functional/address_types.py
Sjors,2018-01-23T16:49:49Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306330,163306330,test/functional/address_types.py
Sjors,2018-01-23T16:49:51Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306341,163306341,test/functional/address_types.py
Sjors,2018-01-23T16:49:57Z,Done,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306373,163306373,test/functional/address_types.py
Sjors,2018-01-23T16:49:59Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306388,163306388,test/functional/address_types.py
Sjors,2018-01-23T16:50:02Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306404,163306404,test/functional/address_types.py
Sjors,2018-01-23T16:50:05Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306429,163306429,test/functional/address_types.py
Sjors,2018-01-23T16:50:10Z,Done,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306459,163306459,test/functional/address_types.py
Sjors,2018-01-23T16:50:13Z,Done,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163306473,163306473,test/functional/address_types.py
jnewbery,2018-01-23T18:31:15Z,"`TransactionChangeType()` doesn't really need to be a class member function on `CWallet`, and could be a utility function in walletutil.cpp. In general, it'd be nice to start making the wallet class and wallet.cpp a bit smaller, but that's probably a tidy-up for another day.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163334775,163334775,src/wallet/wallet.cpp
Sjors,2018-01-23T19:08:43Z,"cc @jnewbery given your last comment. I'll leave it as is, but useful to know what the future direction shouldl be.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163345596,163345596,src/wallet/wallet.cpp
promag,2018-01-23T19:14:58Z,+1,https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163347383,163347383,src/wallet/wallet.cpp
laanwj,2018-01-24T14:23:18Z,"Agree, this should be moved at some point.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163560224,163560224,src/wallet/wallet.cpp
ryanofsky,2018-01-24T15:34:27Z,"For the future, it might be a good idea add `change_type` and `address_type` fields to CoinControl class, and have this method accept a CoinControl argument, instead of relying on the globals. This would make it easier to ensure that when an RPC is being called that has address type options, that they will take precedence over the globals.\n\nPieter's suggestion of adding a separate `P2SH_SEGWIT",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163582303,163582303,src/wallet/wallet.cpp
promag,2018-01-24T15:39:08Z,"Nice wrap up @ryanofsky. In #12194 I'm adding change type to coin control, however I'm not passing coin control here.",https://github.com/bitcoin/bitcoin/pull/12119#discussion_r163583872,163583872,src/wallet/wallet.cpp
