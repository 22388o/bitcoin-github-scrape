[
  {
    "sha": "58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGJjODZlMzdmZGExYWVjMjcwYmNjYjNkZjZjMjBmYmQyYTY1OTFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-08-22T20:33:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-09-20T23:24:25Z"
      },
      "message": "Check for canonical public keys and signatures\n\nOnly enabled inside tests for now.",
      "tree": {
        "sha": "281ed668edca7eb3d528f37ebff803e4eaac12bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/281ed668edca7eb3d528f37ebff803e4eaac12bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc24bd4cee1c1da944dfd1f236b07e9194f493c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc24bd4cee1c1da944dfd1f236b07e9194f493c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc24bd4cee1c1da944dfd1f236b07e9194f493c"
      }
    ],
    "stats": {
      "total": 307,
      "additions": 245,
      "deletions": 62
    },
    "files": [
      {
        "sha": "53ef0ddc4f38e06c994a32c6b317847c0eaccf6c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -327,7 +327,7 @@ bool CTransaction::AreInputsStandard(const MapPrevTx& mapInputs) const\n         // beside \"push data\" in the scriptSig the\n         // IsStandard() call returns false\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0))\n+        if (!EvalScript(stack, vin[i].scriptSig, *this, i, false, 0))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)\n@@ -1292,11 +1292,11 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n             if (!(fBlock && (nBestHeight < Checkpoints::GetTotalBlocksEstimate())))\n             {\n                 // Verify signature\n-                if (!VerifySignature(txPrev, *this, i, fStrictPayToScriptHash, 0))\n+                if (!VerifySignature(txPrev, *this, i, fStrictPayToScriptHash, false, 0))\n                 {\n                     // only during transition phase for P2SH: do not invoke anti-DoS code for\n                     // potentially old clients relaying bad P2SH transactions\n-                    if (fStrictPayToScriptHash && VerifySignature(txPrev, *this, i, false, 0))\n+                    if (fStrictPayToScriptHash && VerifySignature(txPrev, *this, i, false, false, 0))\n                         return error(\"ConnectInputs() : %s P2SH VerifySignature failed\", GetHash().ToString().substr(0,10).c_str());\n \n                     return DoS(100,error(\"ConnectInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n@@ -1350,7 +1350,7 @@ bool CTransaction::ClientConnectInputs()\n                 return false;\n \n             // Verify signature\n-            if (!VerifySignature(txPrev, *this, i, true, 0))\n+            if (!VerifySignature(txPrev, *this, i, true, false, 0))\n                 return error(\"ConnectInputs() : VerifySignature failed\");\n \n             ///// this is redundant with the mempool.mapNextTx stuff,"
      },
      {
        "sha": "7646861ffe6a0110c4269463b41e1b5b7b11375f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -469,7 +469,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, true, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, true, true, 0))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "7eeacaf708fa9d12d04a153a5e1828e33520f129",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 13,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -236,7 +236,68 @@ const char* GetOpName(opcodetype opcode)\n     }\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+bool IsCanonicalPubKey(const valtype &vchPubKey) {\n+    if (vchPubKey.size() < 33)\n+        return error(\"Non-canonical public key: too short\");\n+    if (vchPubKey[0] == 0x04) {\n+        if (vchPubKey.size() != 65)\n+            return error(\"Non-canonical public key: invalid length for uncompressed key\");\n+    } else if (vchPubKey[0] == 0x02 || vchPubKey[0] == 0x03) {\n+        if (vchPubKey.size() != 33)\n+            return error(\"Non-canonical public key: invalid length for compressed key\");\n+    } else {\n+        return error(\"Non-canonical public key: compressed nor uncompressed\");\n+    }\n+    return true;\n+}\n+\n+bool IsCanonicalSignature(const valtype &vchSig) {\n+    // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n+    // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n+    // Where R and S are not negative (their first byte has its highest bit not set), and not\n+    // excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n+    // in which case a single 0 byte is necessary and even required).\n+    if (vchSig.size() < 9)\n+        return error(\"Non-canonical signature: too short\");\n+    if (vchSig.size() > 73)\n+        return error(\"Non-canonical signature: too long\");\n+    if (vchSig[vchSig.size() - 1] & 0x7C)\n+        return error(\"Non-canonical signature: unknown hashtype byte\");\n+    if (vchSig[0] != 0x30)\n+        return error(\"Non-canonical signature: wrong type\");\n+    if (vchSig[1] != vchSig.size()-3)\n+        return error(\"Non-canonical signature: wrong length marker\");\n+    unsigned int nLenR = vchSig[3];\n+    if (5 + nLenR >= vchSig.size())\n+        return error(\"Non-canonical signature: S length misplaced\");\n+    unsigned int nLenS = vchSig[5+nLenR];\n+    if ((unsigned long)(nLenR+nLenS+7) != vchSig.size())\n+        return error(\"Non-canonical signature: R+S length mismatch\");\n+\n+    const unsigned char *R = &vchSig[4];\n+    if (R[-2] != 0x02)\n+        return error(\"Non-canonical signature: R value type mismatch\");\n+    if (nLenR == 0)\n+        return error(\"Non-canonical signature: R length is zero\");\n+    if (R[0] & 0x80)\n+        return error(\"Non-canonical signature: R value negative\");\n+    if (nLenR > 1 && (R[0] == 0x00) && !(R[1] & 0x80))\n+        return error(\"Non-canonical signature: R value excessively padded\");\n+\n+    const unsigned char *S = &vchSig[6+nLenR];\n+    if (S[-2] != 0x02)\n+        return error(\"Non-canonical signature: S value type mismatch\");\n+    if (nLenS == 0)\n+        return error(\"Non-canonical signature: S length is zero\");\n+    if (S[0] & 0x80)\n+        return error(\"Non-canonical signature: S value negative\");\n+    if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n+        return error(\"Non-canonical signature: S value excessively padded\");\n+\n+    return true;\n+}\n+\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, bool fStrictEncodings, int nHashType)\n {\n     CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n@@ -922,7 +983,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n-                    bool fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+                    bool fSuccess = (!fStrictEncodings || (IsCanonicalSignature(vchSig) && IsCanonicalPubKey(vchPubKey)));\n+                    if (fSuccess)\n+                        fSuccess = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -982,8 +1045,11 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                         valtype& vchPubKey = stacktop(-ikey);\n \n                         // Check signature\n-                        if (CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType))\n-                        {\n+                        bool fOk = (!fStrictEncodings || (IsCanonicalSignature(vchSig) && IsCanonicalPubKey(vchPubKey)));\n+                        if (fOk)\n+                            fOk = CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType);\n+\n+                        if (fOk) {\n                             isig++;\n                             nSigsCount--;\n                         }\n@@ -1550,14 +1616,14 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n }\n \n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  bool fValidatePayToScriptHash, int nHashType)\n+                  bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, fStrictEncodings, nHashType))\n         return false;\n     if (fValidatePayToScriptHash)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, fStrictEncodings, nHashType))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1575,7 +1641,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, nHashType))\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, fStrictEncodings, nHashType))\n             return false;\n         if (stackCopy.empty())\n             return false;\n@@ -1618,7 +1684,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransa\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, true, 0);\n+    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, true, true, 0);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -1631,7 +1697,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n }\n \n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, int nHashType)\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     const CTxIn& txin = txTo.vin[nIn];\n@@ -1642,7 +1708,7 @@ bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsig\n     if (txin.prevout.hash != txFrom.GetHash())\n         return false;\n \n-    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, fValidatePayToScriptHash, nHashType);\n+    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, fValidatePayToScriptHash, fStrictEncodings, nHashType);\n }\n \n static CScript PushAll(const vector<valtype>& values)\n@@ -1760,9 +1826,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, 0);\n+    EvalScript(stack1, scriptSig1, CTransaction(), 0, true, 0);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, 0);\n+    EvalScript(stack2, scriptSig2, CTransaction(), 0, true, 0);\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "51e3b5eb843b9113cd8f45384674b0b66b04633c",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -581,9 +581,10 @@ class CScript : public std::vector<unsigned char>\n \n \n \n+bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey);\n+bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig);\n \n-\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, bool fStrictEncodings, int nHashType);\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey);\n@@ -594,8 +595,8 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  bool fValidatePayToScriptHash, int nHashType);\n-bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, int nHashType);\n+                  bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n+bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n // Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n // combine them intelligently and return the result."
      },
      {
        "sha": "d46959312041561c5b70f200f3a45aeeac7d8409",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -278,7 +278,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     mst1 = boost::posix_time::microsec_clock::local_time();\n     for (unsigned int i = 0; i < 5; i++)\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n-            BOOST_CHECK(VerifySignature(orphans[j], tx, j, true, SIGHASH_ALL));\n+            BOOST_CHECK(VerifySignature(orphans[j], tx, j, true, true, SIGHASH_ALL));\n     mst2 = boost::posix_time::microsec_clock::local_time();\n     msdiff = mst2 - mst1;\n     long nManyValidate = msdiff.total_milliseconds();\n@@ -289,13 +289,13 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     // Empty a signature, validation should fail:\n     CScript save = tx.vin[0].scriptSig;\n     tx.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!VerifySignature(orphans[0], tx, 0, true, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(orphans[0], tx, 0, true, true, SIGHASH_ALL));\n     tx.vin[0].scriptSig = save;\n \n     // Swap signatures, validation should fail:\n     std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n-    BOOST_CHECK(!VerifySignature(orphans[0], tx, 0, true, SIGHASH_ALL));\n-    BOOST_CHECK(!VerifySignature(orphans[1], tx, 1, true, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(orphans[0], tx, 0, true, true, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(orphans[1], tx, 1, true, true, SIGHASH_ALL));\n     std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n \n     // Exercise -maxsigcachesize code:\n@@ -305,7 +305,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     BOOST_CHECK(SignSignature(keystore, orphans[0], tx, 0));\n     BOOST_CHECK(tx.vin[0].scriptSig != oldSig);\n     for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        BOOST_CHECK(VerifySignature(orphans[j], tx, j, true, SIGHASH_ALL));\n+        BOOST_CHECK(VerifySignature(orphans[j], tx, j, true, true, SIGHASH_ALL));\n     mapArgs.erase(\"-maxsigcachesize\");\n \n     LimitOrphanTxSize(0);"
      },
      {
        "sha": "42d21f8ac55cb7dc3478dd69614db7c1b7c26c48",
        "filename": "src/test/canonical_tests.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -0,0 +1,87 @@\n+//\n+// Unit tests for canonical signatures\n+\n+#include \"json/json_spirit_writer_template.h\"\n+#include <boost/test/unit_test.hpp>\n+#include <openssl/ecdsa.h>\n+\n+#include \"key.h\"\n+#include \"script.h\"\n+#include \"util.h\"\n+\n+using namespace std;\n+using namespace json_spirit;\n+\n+\n+// In script_tests.cpp\n+extern Array read_json(const std::string& filename);\n+\n+BOOST_AUTO_TEST_SUITE(canonical_tests)\n+\n+// OpenSSL-based test for canonical signature (without test for hashtype byte)\n+bool static IsCanonicalSignature_OpenSSL_inner(const std::vector<unsigned char>& vchSig)\n+{\n+    if (vchSig.size() == 0)\n+        return false;\n+    const unsigned char *input = &vchSig[0];\n+    ECDSA_SIG *psig = NULL;\n+    d2i_ECDSA_SIG(&psig, &input, vchSig.size());\n+    if (psig == NULL)\n+        return false;\n+    unsigned char buf[256];\n+    unsigned char *pbuf = buf;\n+    unsigned int nLen = i2d_ECDSA_SIG(psig, NULL);\n+    if (nLen != vchSig.size()) {\n+        ECDSA_SIG_free(psig);\n+        return false;\n+    }\n+    nLen = i2d_ECDSA_SIG(psig, &pbuf);\n+    ECDSA_SIG_free(psig);\n+    return (memcmp(&vchSig[0], &buf[0], nLen) == 0);\n+}\n+\n+// OpenSSL-based test for canonical signature\n+bool static IsCanonicalSignature_OpenSSL(const std::vector<unsigned char> &vchSignature) {\n+    if (vchSignature.size() < 1)\n+        return false;\n+    if (vchSignature.size() > 127)\n+        return false;\n+    if (vchSignature[vchSignature.size() - 1] & 0x7C)\n+        return false;\n+\n+    std::vector<unsigned char> vchSig(vchSignature);\n+    vchSig.pop_back();\n+    if (!IsCanonicalSignature_OpenSSL_inner(vchSig))\n+        return false;\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_canon)\n+{\n+    Array tests = read_json(\"sig_canonical.json\");\n+\n+    BOOST_FOREACH(Value &tv, tests) {\n+        string test = tv.get_str();\n+        if (IsHex(test)) {\n+            std::vector<unsigned char> sig = ParseHex(test);\n+            BOOST_CHECK_MESSAGE(IsCanonicalSignature(sig), test);\n+            BOOST_CHECK_MESSAGE(IsCanonicalSignature_OpenSSL(sig), test);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_noncanon)\n+{\n+    Array tests = read_json(\"sig_noncanonical.json\");\n+\n+    BOOST_FOREACH(Value &tv, tests) {\n+        string test = tv.get_str();\n+        if (IsHex(test)) {\n+            std::vector<unsigned char> sig = ParseHex(test);\n+            BOOST_CHECK_MESSAGE(!IsCanonicalSignature(sig), test);\n+            BOOST_CHECK_MESSAGE(!IsCanonicalSignature_OpenSSL(sig), test);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -0,0 +1,7 @@\n+[\n+    \"300602010002010001\",\n+    \"3008020200ff020200ff01\",\n+    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n+    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n+    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n+]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -0,0 +1,22 @@\n+[\n+    \"non-hex strings are ignored\",\n+\n+    \"too short:\",    \"30050201FF020001\",\n+    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n+    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n+    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n+\n+    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+\n+\n+    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n+    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n+    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n+]"
      },
      {
        "sha": "aa6feb7201b70c067742c6f32c6aaa2efe91f16a",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -21,7 +21,7 @@ typedef vector<unsigned char> valtype;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, int nHashType);\n+                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n@@ -80,19 +80,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, true, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -102,16 +102,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, true, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, true, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -121,9 +121,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, true, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, true, true, 0), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, true, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, true, true, 0), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "9db584c1471f12291f274f4fce75dff7fc736b1e",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -14,7 +14,7 @@ using namespace std;\n // Test routines internal to script.cpp:\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, int nHashType);\n+                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n // Helpers:\n static std::vector<unsigned char>\n@@ -40,7 +40,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict, 0);\n+    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict, true, 0);\n }\n \n \n@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = VerifySignature(txFrom, txTo[i], 0, true, 0);\n+            bool sigOK = VerifySignature(txFrom, txTo[i], 0, true, true, 0);\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "f8e4fa8a49b407111be417f9f33b38dcb62e229c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -21,7 +21,7 @@ using namespace boost::algorithm;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, int nHashType);\n+                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n CScript\n ParseScript(string s)\n@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, true, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, true, true, SIGHASH_NONE), strTest);\n     }\n }\n \n@@ -167,7 +167,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, true, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, true, true, SIGHASH_NONE), strTest);\n     }\n }\n \n@@ -181,18 +181,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true, 0));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true, 0));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true, 0));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, 0));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true, 0));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -250,15 +250,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, true, true, 0));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -286,46 +286,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, true, true, 0));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, true, true, 0));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "1dacdeaa239295ef7d9f16d5a297dc6f5c3981da",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58bc86e37fda1aec270bccb3df6c20fbd2a6591c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=58bc86e37fda1aec270bccb3df6c20fbd2a6591c",
        "patch": "@@ -76,7 +76,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), 0), strTest);\n+                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), false, 0), strTest);\n             }\n         }\n     }\n@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n \n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), 0);\n+                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), true, 0);\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  }
]