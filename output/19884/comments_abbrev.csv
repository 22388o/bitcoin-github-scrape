dhruv,2020-09-05 17:23:43,@practicalswift I'm sorry this took so long. Ready for review.,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-687638781,687638781,
dhruv,2020-09-05 17:24:37,"@n-thumann Thank you, for the prompt review.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-687638879,687638879,
practicalswift,2020-09-05 18:49:58,"@dhruv I saw you removed the `done` logic: are you sure that `!addrman.empty()` is _guaranteed_ after `addrman.Add(convertSeed6(Params().FixedSeeds()), local);`? AFAICT that condition must be hold for the new code to be equivalent to the old code.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-687647828,687647828,
dhruv,2020-09-06 00:37:35,"> @dhruv I saw you removed the `done` logic: are you sure that `!addrman.empty()` is _guaranteed_ after `addrman.Add(convertSeed6(Params().FixedSeeds()), local);`? AFAICT that condition must be hold for the new code to be equivalent to the old code.\n\n@practicalswift Thank you for catching that. I overlooked the implication of the `static` qualifier on `done` and mistakenly thought the code was",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-687681036,687681036,
dhruv,2020-09-07 05:38:43,"Appveyor has [passed](https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/35050140) on `e7de5b5`, Github is just not reflecting it.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-688047889,688047889,
ajtowns,2020-09-10 23:24:13,"> If `peers.dat` is empty and `-dnsseed=0`\n\nIs this a use case worth optimising for? The linked issue doesn't really provide a reason why this use case is worthwhile, as far as I can see, just that the filer thought it was surprising.\n\nThe only case I can see where you'd want to set `-dnsseed=0` is if you somehow don't have DNS despite being connected to the real internet, or if you're rea",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690783125,690783125,
dhruv,2020-09-11 04:20:31,"> Is this a use case worth optimising for? The linked issue doesn't really provide a reason why this use case is worthwhile, as far as I can see, just that the filer thought it was surprising.\n\nFair question, @ajtowns. Let's page @practicalswift and see if he can shed light on his original use case.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690864559,690864559,
practicalswift,2020-09-11 06:01:13,"> The only case I can see where you'd want to set `-dnsseed=0` is if you somehow don't have DNS despite being connected to the real internet, or if you're really worried about privacy. But if you're really worried about privacy, connecting to fixed seeds is probably worse than doing a dns query, and if you were doing something clever, like triggering an outbound/inbound connection to your own node",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690894217,690894217,
sipa,2020-09-11 06:16:35,"> You don't want to use clearnet at all (-dnsseed=0 -onlynet=onion -listen=0)\n\nFWIW, if you use `-proxy`, DNS seeding happens over the proxy (which in the case of Tor means the exit node will do the resolving for you).",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690899470,690899470,
practicalswift,2020-09-11 06:21:07,"> > You don't want to use clearnet at all (-dnsseed=0 -onlynet=onion -listen=0)\n> \n> FWIW, if you use `-proxy`, DNS seeding happens over the proxy (which in the case of Tor means the exit node will do the resolving for you).\n\nYes I know, but then you'll have to trust the exit node operator not to tamper with the DNS responses :)\n\n`-dnsseed=0 -onlynet=onion -listen=0` avoids that.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690901032,690901032,
sipa,2020-09-11 06:23:15,"Of course, and I'm not commenting on the validity of the use case in general. Just that ""You don't want to use clearnet at all"" on its own is not a reason to use -dnsseed=0.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690901769,690901769,
practicalswift,2020-09-11 06:25:14,"> Of course, and I'm not commenting on the validity of the use case in general. Just that ""You don't want to use clearnet at all"" on its own is not a reason to use -dnsseed=0.\n\nFair point. I should have written ""You don't want to use clearnet at all and you don't trust exit node operators"" :)",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690902428,690902428,
practicalswift,2020-09-11 09:07:55,"> FWIW, if you use `-proxy`, DNS seeding happens over the proxy (which in the case of Tor means the exit node will do the resolving for you).\n\nBy ""DNS seeding"" you're in this context referring to the ""establish `ADDR_FETCH` connections via proxy to seed nodes""-logic, right?\n\nAFAICT we've never supported sending actual DNS queries to the DNS seed nodes via proxy.\n\nFrom the `SetNameProxy",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-690972388,690972388,
sipa,2020-09-11 17:20:33,"@practicalswift Yes, when -proxy is enabled, no actual DNS seeding is done, but ADDR_FETCH connections are established to the seeder's names instead. That was the reason for introducing ADDR_FETCH connections (formerly called oneshot connections) initially.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-691217511,691217511,
ajtowns,2020-09-12 22:20:21,"> Fair point. I should have written ""You don't want to use clearnet at all and you don't trust exit node operators"" :)\n\nAh, and are thus only connecting to the ~89 fixed seeds with onion addresses, and not going via exit nodes at all? That makes more sense.\n\nI think that currently, if you do `-onlynet=onion -listen=0 -dnsseed=0 -addnode=mytrustedpeer.onion`,  and you successfully connect t",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-691561273,691561273,
DrahtBot,2020-09-19 13:53:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21015 (Make all of net_processing (and some of net) use std::chrono types by dhruv)\n* #20729 (p2p: standardize outbound ",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-695216251,695216251,
dhruv,2020-10-01 17:59:33,"My apologies for the delay in response. I needed to study all the ways seeding is done before I felt like I could have an opinion. I audited the code and found 6 ways `addrman` grows. I want to document them here for future readers. Reviewers well-versed in seeding can skip to the next section.\n\n### Peer seeding sources\n1. `-connect=node`: If the user runs the node in this configuration, `bi",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-702302429,702302429,
luke-jr,2020-10-24 14:58:15,`addnode` is also a RPC method. It is quite plausible that an external peer discovery mechanism might launch bitcoind and use it to get connections started within that 60 seconds...,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-715926782,715926782,
ajtowns,2020-10-26 03:24:33,"> >  it might make sense to move the add fixed nodes code to its own function, ...\n\nI was thinking something like https://github.com/ajtowns/bitcoin/commits/202010-fixed-seeds \n\n> I don't understand how we decide we are giving up on -addnode manual connections being able to grow addrman without a timeout (in this case, 60 seconds).\n\nThe above makes adding fixed seeds always be an immed",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-716281186,716281186,
laanwj,2020-10-27 10:00:47,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-717126960,717126960,
dhruv,2020-11-28 19:53:11,"Thank you, for the review and for taking the time to teach me via your branch, @ajtowns.\n\nI've added a new command line flag: `-fixedseeds`. A user can run `-dnsseed=0 -fixedseeds=0` and then issue a `addnode` RPC to satisfy the use case @luke-jr mentioned. `-dnsseed=0 -fixedseeds=0 -addnode=X` will provide the trusted peer only behavior @ajtowns mentioned. I also added a functional test. \n",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-735282991,735282991,
dhruv,2020-12-11 15:57:04,Rebased,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-743275853,743275853,
dhruv,2021-02-06 01:36:37,"Thanks for the review @LarryRuane, and my apologies for the long wait.\n\nComments addressed. Rebased. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-774373319,774373319,
dhruv,2021-02-06 01:46:58,Fixed failing linter.,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-774375341,774375341,
LarryRuane,2021-02-11 02:39:04,"re-reviewed, re-tested\nACK 3fdea1f77b7afa07789139f17c0e03ee55f3ee02",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-777170935,777170935,
laanwj,2021-02-11 18:23:09,Code review ACK 3fdea1f77b7afa07789139f17c0e03ee55f3ee02,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-777694643,777694643,
LarryRuane,2021-02-12 00:23:51,re-ACK fe3e993968d6b46777d5a16a662cd22790ddf5bb,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-777885140,777885140,
dhruv,2021-02-12 02:42:16,Updated tests for CI stability. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-777931616,777931616,
laanwj,2021-02-12 10:48:03,"re-ACK fe3e993968d6b46777d5a16a662cd22790ddf5bb\nchecked that the only change since my last ACK is the `<` time bounds for the test",https://github.com/bitcoin/bitcoin/pull/19884#issuecomment-778121741,778121741,
practicalswift,2020-09-05 17:52:08,"Nit:\n\n```suggestion\n        const bool dnsseed = gArgs.GetBoolArg(""-dnsseed"", DEFAULT_DNSSEED);\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483972811,483972811,src/net.cpp
practicalswift,2020-09-05 17:54:47,Nit: Personally I find `if-else` logic easier to read if starting with the truthy case. In this specific case: starting with the `if (dnsseed) {` case and handle the `!dnsseed` case in the `else` block :),https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483973013,483973013,src/net.cpp
jonatack,2020-09-05 18:02:41,"Might be outside the scope of this PR, but ISTM`GetTime()` is deprecated; see `src/util/time.h`.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483973781,483973781,src/net.cpp
jonatack,2020-09-05 18:06:39,"```suggestion\n        if (addrman.empty() &&\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483974114,483974114,src/net.cpp
dhruv,2020-09-05 18:10:23,Done. Thanks for the catch.,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483974410,483974410,src/net.cpp
dhruv,2020-09-05 18:10:31,Done,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483974433,483974433,src/net.cpp
dhruv,2020-09-05 22:23:47,"no member named `empty` in `CAddrMan`. \n\nHappy to create one if that's what you are suggesting.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483995432,483995432,src/net.cpp
dhruv,2020-09-05 22:49:02,Addressed.,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r483997224,483997224,src/net.cpp
jonatack,2020-09-10 15:22:37,"Oops, you are right. Probably out of scope to create it unless you want to.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r486430763,486430763,src/net.cpp
jonatack,2020-09-10 15:33:31,"nit: clang format while touching this\n```diff\n-    int64_t nNextFeeler = PoissonNextSend(nStart.count()*1000*1000, FEELER_INTERVAL);\n-    while (!interruptNet)\n-    {\n+    int64_t nNextFeeler = PoissonNextSend(nStart.count() * 1000 * 1000, FEELER_INTERVAL);\n+    while (!interruptNet) {\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r486438754,486438754,src/net.cpp
jonatack,2020-09-10 17:54:54,"```suggestion\n                '0 addresses found from DNS seeds', ""Adding fixed seed nodes as DNS doesn't seem to be available.""],\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r486528823,486528823,test/functional/feature_config_args.py
ajtowns,2020-10-26 03:25:09,Use `count_microseconds`,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r511702318,511702318,src/net.cpp
ajtowns,2020-10-26 03:28:14,"`GetBoolArg` takes the `cs_args` lock, so probably better to move this check outside of the loop if you care about that\n",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r511702900,511702900,src/net.cpp
ajtowns,2020-10-26 03:28:29,`if (` -- needs a space,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r511702957,511702957,src/net.cpp
dhruv,2020-11-28 19:33:24,Done,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r532097694,532097694,src/net.cpp
dhruv,2020-11-28 19:33:30,Done,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r532097699,532097699,src/net.cpp
LarryRuane,2021-01-04 23:20:33,"```suggestion\n    argsman.AddArg(""-dnsseed"", strprintf(""Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)"", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551626078,551626078,src/init.cpp
LarryRuane,2021-01-04 23:20:55,"```suggestion\n    argsman.AddArg(""-fixedseeds"", strprintf(""Allow fixed seeds if DNS seeds don't provide peers (default: %u)"", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551626209,551626209,src/init.cpp
LarryRuane,2021-01-05 01:04:30,"I like this renaming of the variable `done` to `fixedSeedsDone`, but maybe we can take the opportunity to remove this `static`? Static variables are scope-limited global variables (in general, globals should be avoided). \n<details>\n<summary>suggestion</summary>\n\n```diff\n-    const bool disableFixedSeeds = !gArgs.GetBoolArg(""-fixedseeds"", DEFAULT_FIXEDSEEDS);\n+    bool addFixedSeeds = g",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551658604,551658604,src/net.cpp
LarryRuane,2021-01-05 01:16:05,"```suggestion\n        with self.nodes[0].assert_debug_log(expected_msgs=[\n                ""Loaded 0 addresses from peers.dat"",\n                ""0 addresses found from DNS seeds"",\n                ""Adding fixed seeds as 60 seconds have passed and addrman is empty"",\n            ],\n                timeout=80):\n```\n(and similarly below)",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551661774,551661774,test/functional/feature_config_args.py
LarryRuane,2021-01-05 01:23:51,"```suggestion\n        self.log.info('Test seed peers, this will take about 2 minutes')\n```",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551663712,551663712,test/functional/feature_config_args.py
LarryRuane,2021-01-05 01:27:20,"You can also check for the absence of debug.log messages (I'm not sure if it's worth it in this case):\n```suggestion\n        with self.nodes[0].assert_debug_log(expected_msgs=[\n                ""Loaded 0 addresses from peers.dat"",\n                ""DNS seeding disabled"",\n                ""Adding fixed seeds as -dnsseed=0, -addnode is not provided and and all -seednode(s) attempted\n""\n    ",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r551664701,551664701,test/functional/feature_config_args.py
dhruv,2021-02-06 01:33:22,Done. Thanks!,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r571333395,571333395,src/init.cpp
dhruv,2021-02-06 01:33:30,Done,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r571333425,571333425,src/init.cpp
dhruv,2021-02-06 01:34:44,"Done! I too prefer the elimination of the static variable. Wasn't sure reviewers would be keen on it, but I agree it is cleaner.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r571333593,571333593,src/net.cpp
dhruv,2021-02-06 01:34:55,Done.,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r571333619,571333619,test/functional/feature_config_args.py
dhruv,2021-02-06 01:35:58,"Changed the indentation. I did not add the `unexpected_msgs=[""60 seconds""]` as it is implicit in the 2 second timeout for `assert_debug_log`.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r571333850,571333850,test/functional/feature_config_args.py
laanwj,2021-02-11 18:25:48,"It's slightly risky to have a test that depends on real time instead of mocked times. CI environments can be extremely slow, so this bound might introduce random failures.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r574729254,574729254,test/functional/feature_config_args.py
dhruv,2021-02-12 00:12:58,"You're right - that could make for a flaky test. I picked 5 seconds as an arbitrary bound. What I _really_ wanted to check was that the node did not wait 60 seconds to use fixed seeds.\n\n```suggestion\n        assert time.time() - start < 60\n```\n\naccomplished that. And if CI is so slow that 60 seconds pass, the test will fail anyway because the logs will say ""Adding fixed seeds as 60 sec",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r574915432,574915432,test/functional/feature_config_args.py
laanwj,2021-02-12 10:37:40,"Thanks, good idea!\n\nIn the longer term I think we should change this to use mock time but for this PR that would be too much of a hassle.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575130415,575130415,test/functional/feature_config_args.py
MarcoFalke,2021-02-12 16:13:37,`and and`,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575335817,575335817,test/functional/feature_config_args.py
MarcoFalke,2021-02-12 16:14:43,wouldn't it work to use `setmocktime` inside the context manager above and check here: `node.uptime() >= 60` to speed up the test?,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575336503,575336503,test/functional/feature_config_args.py
jonatack,2021-02-12 16:20:57,"I looked at this last September (https://github.com/bitcoin/bitcoin/pull/19884#pullrequestreview-486061184) and it didn't look feasible, interesting if it is.",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575340874,575340874,test/functional/feature_config_args.py
MarcoFalke,2021-02-12 17:03:17,"```\n$ time test/functional/feature_config_args.py \n2021-02-12T17:02:39.647000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_kuphxowf\n2021-02-12T17:02:45.294000Z TestFramework (INFO): Test config args logging\n2021-02-12T17:02:45.605000Z TestFramework (INFO): Test seed peers, this will take about 2 minutes\n2021-02-12T17:02:48.587000Z TestFramework (INFO): Test -",https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575369141,575369141,test/functional/feature_config_args.py
dhruv,2021-02-12 17:40:20,Please see #21165,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575392544,575392544,test/functional/feature_config_args.py
dhruv,2021-02-12 17:40:47,Please see #21165,https://github.com/bitcoin/bitcoin/pull/19884#discussion_r575392771,575392771,test/functional/feature_config_args.py
