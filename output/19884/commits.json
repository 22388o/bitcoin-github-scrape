[
  {
    "sha": "fe3e993968d6b46777d5a16a662cd22790ddf5bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTNlOTkzOTY4ZDZiNDY3NzdkNWExNmE2NjJjZDIyNzkwZGRmNWJi",
    "commit": {
      "author": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2020-09-05T16:51:33Z"
      },
      "committer": {
        "name": "Dhruv Mehta",
        "email": "856960+dhruv@users.noreply.github.com",
        "date": "2021-02-12T00:10:40Z"
      },
      "message": "[p2p] No delay in adding fixed seeds if -dnsseed=0 and peers.dat is empty. Add -fixedseeds arg.",
      "tree": {
        "sha": "d0d052a5545aab0bd3efd5902cf8045a0ea28aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0d052a5545aab0bd3efd5902cf8045a0ea28aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe3e993968d6b46777d5a16a662cd22790ddf5bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3e993968d6b46777d5a16a662cd22790ddf5bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe3e993968d6b46777d5a16a662cd22790ddf5bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3e993968d6b46777d5a16a662cd22790ddf5bb/comments",
    "author": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dhruv",
      "id": 856960,
      "node_id": "MDQ6VXNlcjg1Njk2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhruv",
      "html_url": "https://github.com/dhruv",
      "followers_url": "https://api.github.com/users/dhruv/followers",
      "following_url": "https://api.github.com/users/dhruv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhruv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
      "organizations_url": "https://api.github.com/users/dhruv/orgs",
      "repos_url": "https://api.github.com/users/dhruv/repos",
      "events_url": "https://api.github.com/users/dhruv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhruv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c6140846f37de8c132b3b6abf09f3d7940554a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c6140846f37de8c132b3b6abf09f3d7940554a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c6140846f37de8c132b3b6abf09f3d7940554a7"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 96,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f71fae41e7103e1abef09d1309b5adb89beb79fe",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fe3e993968d6b46777d5a16a662cd22790ddf5bb",
        "patch": "@@ -434,8 +434,9 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "b3868b2210d2383116774ebe1850c5b817555725",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 13,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fe3e993968d6b46777d5a16a662cd22790ddf5bb",
        "patch": "@@ -1769,11 +1769,19 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     }\n \n     // Initiate network connections\n-    int64_t nStart = GetTime();\n+    auto start = GetTime<std::chrono::seconds>();\n \n     // Minimum time before next feeler connection (in microseconds).\n-    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n-    int64_t nNextExtraBlockRelay = PoissonNextSend(nStart*1000*1000, EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n+\n+    int64_t nNextFeeler = PoissonNextSend(count_microseconds(start), FEELER_INTERVAL);\n+    int64_t nNextExtraBlockRelay = PoissonNextSend(count_microseconds(start), EXTRA_BLOCK_RELAY_ONLY_PEER_INTERVAL);\n+    const bool dnsseed = gArgs.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED);\n+    bool add_fixed_seeds = gArgs.GetBoolArg(\"-fixedseeds\", DEFAULT_FIXEDSEEDS);\n+\n+    if (!add_fixed_seeds) {\n+        LogPrintf(\"Fixed seeds are disabled\\n\");\n+    }\n+\n     while (!interruptNet)\n     {\n         ProcessAddrFetch();\n@@ -1785,18 +1793,32 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         if (interruptNet)\n             return;\n \n-        // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n-        // Note that we only do this if we started with an empty peers.dat,\n-        // (in which case we will query DNS seeds immediately) *and* the DNS\n-        // seeds have not returned any results.\n-        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n-            static bool done = false;\n-            if (!done) {\n-                LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n+        if (add_fixed_seeds && addrman.size() == 0) {\n+            // When the node starts with an empty peers.dat, there are a few other sources of peers before\n+            // we fallback on to fixed seeds: -dnsseed, -seednode, -addnode\n+            // If none of those are available, we fallback on to fixed seeds immediately, else we allow\n+            // 60 seconds for any of those sources to populate addrman.\n+            bool add_fixed_seeds_now = false;\n+            // It is cheapest to check if enough time has passed first.\n+            if (GetTime<std::chrono::seconds>() > start + std::chrono::minutes{1}) {\n+                add_fixed_seeds_now = true;\n+                LogPrintf(\"Adding fixed seeds as 60 seconds have passed and addrman is empty\\n\");\n+            }\n+\n+            // Checking !dnsseed is cheaper before locking 2 mutexes.\n+            if (!add_fixed_seeds_now && !dnsseed) {\n+                LOCK2(m_addr_fetches_mutex, cs_vAddedNodes);\n+                if (m_addr_fetches.empty() && vAddedNodes.empty()) {\n+                    add_fixed_seeds_now = true;\n+                    LogPrintf(\"Adding fixed seeds as -dnsseed=0, -addnode is not provided and and all -seednode(s) attempted\\n\");\n+                }\n+            }\n+\n+            if (add_fixed_seeds_now) {\n                 CNetAddr local;\n                 local.SetInternal(\"fixedseeds\");\n                 addrman.Add(convertSeed6(Params().FixedSeeds()), local);\n-                done = true;\n+                add_fixed_seeds = false;\n             }\n         }\n \n@@ -2434,7 +2456,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Send and receive from sockets, accept connections\n     threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n \n-    if (!gArgs.GetBoolArg(\"-dnsseed\", true))\n+    if (!gArgs.GetBoolArg(\"-dnsseed\", DEFAULT_DNSSEED))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n         threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));"
      },
      {
        "sha": "1678eda8e7c8718b8997db4245c8b6601a1d5acd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe3e993968d6b46777d5a16a662cd22790ddf5bb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fe3e993968d6b46777d5a16a662cd22790ddf5bb",
        "patch": "@@ -80,6 +80,8 @@ static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n static const int NUM_FDS_MESSAGE_CAPTURE = 1;\n \n static const bool DEFAULT_FORCEDNSSEED = false;\n+static const bool DEFAULT_DNSSEED = true;\n+static const bool DEFAULT_FIXEDSEEDS = true;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n "
      },
      {
        "sha": "82dd0e3b80911b9f697797fc51e4baf688497e03",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe3e993968d6b46777d5a16a662cd22790ddf5bb/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe3e993968d6b46777d5a16a662cd22790ddf5bb/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=fe3e993968d6b46777d5a16a662cd22790ddf5bb",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n \n import os\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework import util\n@@ -147,11 +148,67 @@ def test_networkactive(self):\n             self.start_node(0, extra_args=['-nonetworkactive=1'])\n         self.stop_node(0)\n \n+    def test_seed_peers(self):\n+        self.log.info('Test seed peers, this will take about 2 minutes')\n+        default_data_dir = self.nodes[0].datadir\n+\n+        # No peers.dat exists and -dnsseed=1\n+        # We expect the node will use DNS Seeds, but Regtest mode has 0 DNS seeds\n+        # So after 60 seconds, the node should fallback to fixed seeds (this is a slow test)\n+        assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n+        start = time.time()\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+                \"Loaded 0 addresses from peers.dat\",\n+                \"0 addresses found from DNS seeds\",\n+                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\"], timeout=80):\n+            self.start_node(0, extra_args=['-dnsseed=1'])\n+        assert time.time() - start >= 60\n+        self.stop_node(0)\n+\n+        # No peers.dat exists and -dnsseed=0\n+        # We expect the node will fallback immediately to fixed seeds\n+        assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n+        start = time.time()\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+                \"Loaded 0 addresses from peers.dat\",\n+                \"DNS seeding disabled\",\n+                \"Adding fixed seeds as -dnsseed=0, -addnode is not provided and and all -seednode(s) attempted\\n\"]):\n+            self.start_node(0, extra_args=['-dnsseed=0'])\n+        assert time.time() - start < 60\n+        self.stop_node(0)\n+\n+        # No peers.dat exists and dns seeds are disabled.\n+        # We expect the node will not add fixed seeds when explicitly disabled.\n+        assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n+        start = time.time()\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+                \"Loaded 0 addresses from peers.dat\",\n+                \"DNS seeding disabled\",\n+                \"Fixed seeds are disabled\"]):\n+            self.start_node(0, extra_args=['-dnsseed=0', '-fixedseeds=0'])\n+        assert time.time() - start < 60\n+        self.stop_node(0)\n+\n+        # No peers.dat exists and -dnsseed=0, but a -addnode is provided\n+        # We expect the node will allow 60 seconds prior to using fixed seeds\n+        assert not os.path.exists(os.path.join(default_data_dir, \"peers.dat\"))\n+        start = time.time()\n+        with self.nodes[0].assert_debug_log(expected_msgs=[\n+                \"Loaded 0 addresses from peers.dat\",\n+                \"DNS seeding disabled\",\n+                \"Adding fixed seeds as 60 seconds have passed and addrman is empty\"],\n+                timeout=80):\n+            self.start_node(0, extra_args=['-dnsseed=0', '-addnode=fakenodeaddr'])\n+        assert time.time() - start >= 60\n+        self.stop_node(0)\n+\n+\n     def run_test(self):\n         self.stop_node(0)\n \n         self.test_log_buffer()\n         self.test_args_log()\n+        self.test_seed_peers()\n         self.test_networkactive()\n \n         self.test_config_file_parser()"
      }
    ]
  }
]