[
  {
    "sha": "fab17e8272f5f70213f186809479ee7a75898b1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIxN2U4MjcyZjVmNzAyMTNmMTg2ODA5NDc5ZWU3YTc1ODk4YjFk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-29T17:19:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-29T18:39:37Z"
      },
      "message": "test: Add basic test for BIP34",
      "tree": {
        "sha": "e4f60bbd80436dcd89b724cfa232f28c4b3846cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4f60bbd80436dcd89b724cfa232f28c4b3846cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab17e8272f5f70213f186809479ee7a75898b1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcJ79pAAoJEM4rdWl+aaVI+OEL/2EjKiwIazqiLxvW2Y7s2hkE\nvUoZ/PJDqWMqF0nNEpyGYh2StM9VSlmQtgrn1EnTLuEtThhd7pHDjjH4hEUc2S/M\ns8pcANlqce3IPoxT/eUMUUHcGNSXjNZfuEk2kMZXFaOq9VMUSegTfXARSA88hZI3\nTmPsQPt4pwutIrTq7/J1tZQO4PsApjjF22UTJsjw5tys45WYtR79A9oLTlS1s58p\n7fdeecDi15JUkQayLderW7LP1v2hP5X6EGA8exNuLnWA7XFs087M/muqAXlqwn8w\n3bMmWZIZj0F+rAyM+yxD/sYW3ogJxANI/nxQ6KAFaYKPH4wnGLZ54Dj7gQjgrzuR\nVqf228c+MA8+IAZDhG87RGgIlE7HPL4LzCI6VNg62vtFQ+Ur73WKH/RVP2ANlMEl\nmDYDNAA1bWtcOVHhiCsUqBB2wcbxGxxfytpjrzu3u4uqoLSIPuV8F3h6JsbnDkzQ\nGQHyGYLlWK2v6I8f1agvyrToEtCyYH6vbGaCUrPYmA==\n=+GlW\n-----END PGP SIGNATURE-----",
        "payload": "tree e4f60bbd80436dcd89b724cfa232f28c4b3846cb\nparent cbb91cd0ec8e858b986776723ed4dc25df4b74ee\nauthor MarcoFalke <falke.marco@gmail.com> 1546103950 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1546108777 +0100\n\ntest: Add basic test for BIP34\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab17e8272f5f70213f186809479ee7a75898b1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab17e8272f5f70213f186809479ee7a75898b1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab17e8272f5f70213f186809479ee7a75898b1d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb91cd0ec8e858b986776723ed4dc25df4b74ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb91cd0ec8e858b986776723ed4dc25df4b74ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb91cd0ec8e858b986776723ed4dc25df4b74ee"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d3342332244d856fc57857e7a82ddc44191d04cd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab17e8272f5f70213f186809479ee7a75898b1d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab17e8272f5f70213f186809479ee7a75898b1d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fab17e8272f5f70213f186809479ee7a75898b1d",
        "patch": "@@ -272,10 +272,10 @@ class CRegTestParams : public CChainParams {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n-        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n+        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;"
      },
      {
        "sha": "563845d4c2093b0194cfec84d00ef03acea3832a",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab17e8272f5f70213f186809479ee7a75898b1d/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab17e8272f5f70213f186809479ee7a75898b1d/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fab17e8272f5f70213f186809479ee7a75898b1d",
        "patch": "@@ -874,7 +874,7 @@ def run_test(self):\n         #                                                                                    \\-> b67 (20)\n         #\n         #\n-        self.log.info(\"Reject a block with a transaction double spending a transaction creted in the same block\")\n+        self.log.info(\"Reject a block with a transaction double spending a transaction created in the same block\")\n         self.move_tip(65)\n         b67 = self.next_block(67)\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n@@ -1169,7 +1169,7 @@ def run_test(self):\n         blocks = []\n         spend = out[32]\n         for i in range(89, LARGE_REORG_SIZE + 89):\n-            b = self.next_block(i, spend)\n+            b = self.next_block(i, spend, version=4)\n             tx = CTransaction()\n             script_length = MAX_BLOCK_BASE_SIZE - len(b.serialize()) - 69\n             script_output = CScript([b'\\x00' * script_length])\n@@ -1188,20 +1188,32 @@ def run_test(self):\n         self.move_tip(88)\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n-            blocks2.append(self.next_block(\"alt\" + str(i)))\n+            blocks2.append(self.next_block(\"alt\" + str(i), version=4))\n         self.sync_blocks(blocks2, False, force_send=True)\n \n         # extend alt chain to trigger re-org\n-        block = self.next_block(\"alt\" + str(chain1_tip + 1))\n+        block = self.next_block(\"alt\" + str(chain1_tip + 1), version=4)\n         self.sync_blocks([block], True, timeout=480)\n \n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n-        block = self.next_block(chain1_tip + 1)\n+        block = self.next_block(chain1_tip + 1, version=4)\n         self.sync_blocks([block], False, force_send=True)\n-        block = self.next_block(chain1_tip + 2)\n+        block = self.next_block(chain1_tip + 2, version=4)\n         self.sync_blocks([block], True, timeout=480)\n \n+        self.log.info(\"Reject a block with an invalid block header version\")\n+        b_v1 = self.next_block('b_v1', version=1)\n+        self.sync_blocks([b_v1], success=False, force_send=True, reject_reason='bad-version(0x00000001)')\n+\n+        self.move_tip(chain1_tip + 2)\n+        b_cb34 = self.next_block('b_cb34', version=4)\n+        b_cb34.vtx[0].vin[0].scriptSig = b_cb34.vtx[0].vin[0].scriptSig[:-1]\n+        b_cb34.vtx[0].rehash()\n+        b_cb34.hashMerkleRoot = b_cb34.calc_merkle_root()\n+        b_cb34.solve()\n+        self.sync_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n+\n     # Helper methods\n     ################\n \n@@ -1229,7 +1241,7 @@ def create_and_sign_transaction(self, spend_tx, value, script=CScript([OP_TRUE])\n         tx.rehash()\n         return tx\n \n-    def next_block(self, number, spend=None, additional_coinbase_value=0, script=CScript([OP_TRUE]), solve=True):\n+    def next_block(self, number, spend=None, additional_coinbase_value=0, script=CScript([OP_TRUE]), solve=True, *, version=1):\n         if self.tip is None:\n             base_block_hash = self.genesis_hash\n             block_time = int(time.time()) + 1\n@@ -1242,11 +1254,11 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=CSc\n         coinbase.vout[0].nValue += additional_coinbase_value\n         coinbase.rehash()\n         if spend is None:\n-            block = create_block(base_block_hash, coinbase, block_time)\n+            block = create_block(base_block_hash, coinbase, block_time, version=version)\n         else:\n             coinbase.vout[0].nValue += spend.vout[0].nValue - 1  # all but one satoshi to fees\n             coinbase.rehash()\n-            block = create_block(base_block_hash, coinbase, block_time)\n+            block = create_block(base_block_hash, coinbase, block_time, version=version)\n             tx = self.create_tx(spend, 0, 1, script)  # spend 1 satoshi\n             self.sign_tx(tx, spend)\n             self.add_transactions_to_block(block, [tx])"
      },
      {
        "sha": "51875854ca84073d01ded887d3ae5e2c3f6620e2",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab17e8272f5f70213f186809479ee7a75898b1d/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab17e8272f5f70213f186809479ee7a75898b1d/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fab17e8272f5f70213f186809479ee7a75898b1d",
        "patch": "@@ -44,9 +44,10 @@\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n-def create_block(hashprev, coinbase, ntime=None):\n+def create_block(hashprev, coinbase, ntime=None, *, version=1):\n     \"\"\"Create a block (with regtest difficulty).\"\"\"\n     block = CBlock()\n+    block.nVersion = version\n     if ntime is None:\n         import time\n         block.nTime = int(time.time() + 600)"
      }
    ]
  }
]