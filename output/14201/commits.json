[
  {
    "sha": "f478a4b156909a9ca6660a78969f869d99b70fa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDc4YTRiMTU2OTA5YTljYTY2NjBhNzg5NjlmODY5ZDk5YjcwZmE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-11T21:11:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-13T05:50:58Z"
      },
      "message": "Don\u2019t condition on expressions we know will be true (or false) already at compile time. Use assertions where appropriate.",
      "tree": {
        "sha": "45c853c51edac6a3f83ca7f6380db4a13f3ea371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c853c51edac6a3f83ca7f6380db4a13f3ea371"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f478a4b156909a9ca6660a78969f869d99b70fa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f478a4b156909a9ca6660a78969f869d99b70fa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f478a4b156909a9ca6660a78969f869d99b70fa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f478a4b156909a9ca6660a78969f869d99b70fa4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4103cc31690e5be21854a9628f57c54b880ee195",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4103cc31690e5be21854a9628f57c54b880ee195",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4103cc31690e5be21854a9628f57c54b880ee195"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 22,
      "deletions": 25
    },
    "files": [
      {
        "sha": "9dab5a09acfdf6af709a2b2647f3285524cb5840",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -90,8 +90,7 @@ class CCheckQueue\n                         nTotal--;\n                         bool fRet = fAllOk;\n                         // reset the status for new work later\n-                        if (fMaster)\n-                            fAllOk = true;\n+                        fAllOk = true;\n                         // return the current status\n                         return fRet;\n                     }"
      },
      {
        "sha": "f18a3087653ed90bf60113913d712023a2862d6e",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -98,7 +98,8 @@ std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDeco\n             str += \"[error]\";\n             return str;\n         }\n-        if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n+        assert(0 <= opcode);\n+        if (opcode <= OP_PUSHDATA4) {\n             if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n                 str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n             } else {"
      },
      {
        "sha": "7a3a26ec91b05ad69a960859a3f4b14fdee6da7a",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -530,7 +530,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n     // actually update labels\n     int nDisplayUnit = BitcoinUnits::BTC;\n-    if (model && model->getOptionsModel())\n+    if (model->getOptionsModel())\n         nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n     QLabel *l1 = dialog->findChild<QLabel *>(\"labelCoinControlQuantity\");"
      },
      {
        "sha": "a27e5f6d233ac9cf268f868fdf12de67b9ec5c9e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -340,7 +340,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n             if (opcode == OP_CODESEPARATOR && sigversion == SigVersion::BASE && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n                 return set_error(serror, SCRIPT_ERR_OP_CODESEPARATOR);\n \n-            if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4) {\n+            assert(0 <= opcode);\n+            if (fExec && opcode <= OP_PUSHDATA4) {\n                 if (fRequireMinimal && !CheckMinimalPush(vchPushValue, opcode)) {\n                     return set_error(serror, SCRIPT_ERR_MINIMALDATA);\n                 }"
      },
      {
        "sha": "eb3299b11e29f30a23ffc83038b23649fde71943",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -438,8 +438,7 @@ class CScript : public CScriptBase\n \n     CScript& operator<<(opcodetype opcode)\n     {\n-        if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n+        assert(opcode >= 0 && opcode <= 0xff);\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "9202ea8212fb875025f61bfbb3f67164787da9bc",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -198,7 +198,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         // and then the serialized subscript:\n         subscript = CScript(result[0].begin(), result[0].end());\n         sigdata.redeem_script = subscript;\n-        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE, sigdata) && whichType != TX_SCRIPTHASH;\n+        solved = SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE, sigdata) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n \n@@ -207,7 +207,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         CScript witnessscript;\n         witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata);\n+        solved = SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata);\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;\n         result.clear();\n@@ -217,7 +217,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         CScript witnessscript(result[0].begin(), result[0].end());\n         sigdata.witness_script = witnessscript;\n         txnouttype subType;\n-        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        solved = SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         sigdata.witness = true;"
      },
      {
        "sha": "f51c5369853e939dcf4327afb5ea254b84fe9fcf",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -122,7 +122,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys.assign(1,key[i]);\n             keys.push_back(key[j]);\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n-            if (i < j && i < 3 && j < 3)\n+            if (i < j && j < 3)\n             {\n                 BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));"
      },
      {
        "sha": "21842e43aa43483664ee2a244c8069c4abbd4137",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -218,7 +218,8 @@ void static NegateSignatureS(std::vector<unsigned char>& vchSig) {\n         carry = (n < 0);\n     }\n     assert(carry == 0);\n-    if (s.size() > 1 && s[0] == 0 && s[1] < 0x80) {\n+    assert(s.size() > 1);\n+    if (s[0] == 0 && s[1] < 0x80) {\n         s.erase(s.begin());\n     }\n "
      },
      {
        "sha": "b21dcc7969074ad409e61d5d8db94a7ff6886082",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -266,7 +266,7 @@ static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;\n-    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+    if (isspace(str[0]) || isspace(str[str.size()-1])) // No padding allowed\n         return false;\n     if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n         return false;"
      },
      {
        "sha": "9d1eb2405be7a5c75803cc9109fd0a65d46b909d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -2973,10 +2973,8 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n                 mapBlocksUnlinked.erase(it);\n             }\n         }\n-    } else {\n-        if (pindexNew->pprev && pindexNew->pprev->IsValid(BLOCK_VALID_TREE)) {\n-            mapBlocksUnlinked.insert(std::make_pair(pindexNew->pprev, pindexNew));\n-        }\n+    } else if (pindexNew->pprev->IsValid(BLOCK_VALID_TREE)) {\n+        mapBlocksUnlinked.insert(std::make_pair(pindexNew->pprev, pindexNew));\n     }\n }\n \n@@ -3349,14 +3347,13 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n     // Check for duplicate\n     uint256 hash = block.GetHash();\n     BlockMap::iterator miSelf = mapBlockIndex.find(hash);\n-    CBlockIndex *pindex = nullptr;\n     if (hash != chainparams.GetConsensus().hashGenesisBlock) {\n         if (miSelf != mapBlockIndex.end()) {\n             // Block header is already known.\n-            pindex = miSelf->second;\n+            CBlockIndex *pindexLocal = miSelf->second;\n             if (ppindex)\n-                *ppindex = pindex;\n-            if (pindex->nStatus & BLOCK_FAILED_MASK)\n+                *ppindex = pindexLocal;\n+            if (pindexLocal->nStatus & BLOCK_FAILED_MASK)\n                 return state.Invalid(error(\"%s: block %s is marked invalid\", __func__, hash.ToString()), 0, \"duplicate\");\n             return true;\n         }\n@@ -3393,8 +3390,7 @@ bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState&\n             }\n         }\n     }\n-    if (pindex == nullptr)\n-        pindex = AddToBlockIndex(block);\n+    CBlockIndex *pindex = AddToBlockIndex(block);\n \n     if (ppindex)\n         *ppindex = pindex;\n@@ -4005,7 +4001,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             return error(\"%s: *** found bad block at %d, hash=%s (%s)\\n\", __func__,\n                          pindex->nHeight, pindex->GetBlockHash().ToString(), FormatStateMessage(state));\n         // check level 2: verify undo validity\n-        if (nCheckLevel >= 2 && pindex) {\n+        if (nCheckLevel >= 2) {\n             CBlockUndo undo;\n             if (!pindex->GetUndoPos().IsNull()) {\n                 if (!UndoReadFromDisk(undo, pindex)) {"
      },
      {
        "sha": "89555c2dda50ed6b947dd5a9bd32467fb95b8b46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f478a4b156909a9ca6660a78969f869d99b70fa4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f478a4b156909a9ca6660a78969f869d99b70fa4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f478a4b156909a9ca6660a78969f869d99b70fa4",
        "patch": "@@ -1666,7 +1666,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             CBlock block;\n             if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n                 LOCK2(cs_main, cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n                     ret = pindex;"
      }
    ]
  }
]