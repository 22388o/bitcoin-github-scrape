fanquake,2019-11-22 20:34:30,"What warning are you seeing, compiling for which OS?",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557684259,557684259,
laanwj,2019-11-22 21:32:14,See also #13294 for earlier discussion on a similar change (which was eventually dropped from the PR),https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557702275,557702275,
vasild,2019-11-23 15:55:59,"@fanquake \n```\nrandom.cpp:255:13: error: unused function 'GetDevURandom' [-Werror,-Wunused-function]\nstatic void GetDevURandom(unsigned char *ent32)\n            ^\n1 error generated.\n```\nFreeBSD 12.1.\n\n@laanwj I agree that the ""forest"" of ifdef is totally unreadable.\n\nI changed the approach to mark the function as possibly unused. After all the compilers provide a way to do th",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557809312,557809312,
gmaxwell,2019-11-23 17:46:43,Marking that unused would be a great way to hid an actual bug in the future. Would it be possible to #define a USEGETDEVURANDOM as part of the conditional compilation that makes it unused and ifndef the function out if it won't be used?,https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557818414,557818414,
vasild,2019-11-23 20:22:09,"> Marking that unused would be a great way to hid an actual bug in the future.\n\nLike what?\n\n> Would it be possible to #define a USEGETDEVURANDOM as part of the conditional compilation that makes it unused and ifndef the function out if it won't be used?\n\nI don't think so. We have:\n```\nstatic GetDevURandom() { ... }\n...\nGetOSRand() {\n#ifdef FOO\n... don't use GetDevURandom() ",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557829862,557829862,
MarcoFalke,2019-11-24 01:44:56,"Just for reference, the warning appears on freebsd 12: https://cirrus-ci.com/task/4881774827536384?command=make#L423\n\nI have no opinion on whether it should be fixed or how.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557849393,557849393,
vasild,2019-11-24 13:03:27,"3rd attempt (https://github.com/bitcoin/bitcoin/commit/8a16b9d448b90aa5a234dc326ebda45b99b363b7): no marking as unused (but @gmaxwell what bug could that hide in the future, I am just curious?), no complex negated ifdef conditions that span 3 lines.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-557886469,557886469,
laanwj,2019-11-27 12:51:21,"Looks good to me now. I don't think the current construction can hide any bug:\n- If `NEED_GET_DEV_URANDOM` is set unnecessarily, the compiler warning comes back\n- If `NEED_GET_DEV_URANDOM` is left out in error, the compiler will throw an error because the function is used but missing\n\nACK 8a16b9d448b90aa5a234dc326ebda45b99b363b7",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-559074753,559074753,
vasild,2020-03-04 12:44:58,"Rebased to get appveyor green, its failure was not due to this PR.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-594499114,594499114,
fanquake,2020-03-17 07:48:09,"I've just opened #18364, which removes `GetDevURandom` usage on macOS, which will also simplify this change.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-599925010,599925010,
vasild,2020-03-17 08:19:17,"Yes! I will adjust this PR once #18364 makes it to the tree.\n\nThanks!\n",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-599937598,599937598,
DrahtBot,2020-03-17 12:15:24,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-600038310,600038310,
vasild,2020-03-17 20:12:47,"Updated, now that https://github.com/bitcoin/bitcoin/pull/18364 is in.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-600274667,600274667,
fanquake,2020-05-11 09:53:47,"I started working on a similar change to remove the warning on macOS, then remembered we had this PR. Will test shortly; if this is the way everyone is happy to solve the issue, let get this in.",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-626599499,626599499,
vasild,2020-05-11 15:42:18,"This can be silenced in a few different ways. I am fine with either one, as long as it gets fixed.\n\n@sipa, what do you think about the last incarnation of this patch? I changed it according to your suggestion at https://github.com/bitcoin/bitcoin/pull/17563#discussion_r395830195",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-626783545,626783545,
practicalswift,2020-08-09 19:35:39,"ACK ca2e47437277ef6851a739f247b44e73a53f21a1 -- increased signal to noise in compiler diagnostics is good\n",https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-671092332,671092332,
sipa,2020-08-09 20:45:00,utACK ca2e47437277ef6851a739f247b44e73a53f21a1,https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-671098942,671098942,
MarcoFalke,2020-08-10 12:40:46,@fanquake Anything left to do here since your last comment?,https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-671330232,671330232,
amitiuttarwar,2020-08-12 03:31:42,just wanna say thanks for this! that warning was annoying.,https://github.com/bitcoin/bitcoin/pull/17563#issuecomment-672550850,672550850,
laanwj,2019-11-22 20:42:45,"~~Concept ACK, but I think there's some redundancy in this experession: at the least, WIN32 will never be set if HAVE_GETENTROPY or HAVE_SYSCTL_ARND.~~\n\nEdit: oh, that doesn't really help. I still think this is too complex an expression, would be good to have a `NEED_DEVURANDOM_FALLBACK` or such.",https://github.com/bitcoin/bitcoin/pull/17563#discussion_r349786170,349786170,src/random.cpp
sipa,2020-03-20 18:50:10,"I don't know if I like effectively duplicating the which-random-source-to-use logic in macro statements. It feels like this too risks overlooking things.\n\nOne possibility is adding a `(void)GetDevURandom;` line in the exact places where we know that no /dev/urandom is needed (but only there, so that it doesn't silence an unintended lack of invocation). Such a statement will also silence the wa",https://github.com/bitcoin/bitcoin/pull/17563#discussion_r395830195,395830195,src/random.cpp
vasild,2020-03-20 20:00:51,"Ok, another ingenious way to silence this warning. The previous one did not gain traction for a few months, so lets see if this one flies. Updated the patch.\n\nI confirm that the warning is gone and that the symbol is not included in the object code with `-O1` or higher. It is included with `-O0` or in the absence of any `-O...` option but this is fine.",https://github.com/bitcoin/bitcoin/pull/17563#discussion_r395863081,395863081,src/random.cpp
