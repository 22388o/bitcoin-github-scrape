[
  {
    "sha": "aaa6ad54554abd1666cb60285ed6f890698ca620",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWE2YWQ1NDU1NGFiZDE2NjZjYjYwMjg1ZWQ2Zjg5MDY5OGNhNjIw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-17T12:44:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-17T12:44:54Z"
      },
      "message": "[MOVEONLY] [tests] Move addrman ser/deser tests to addrman_tests.cpp\n\nAddrman serialization/deserialization tests are currently in net_tests.cpp.\nMove them to addrman_tests.cpp with the rest of the addrman tests.\n\nReviewer hint: review using `git diff --color-moved=dimmed-zebra`",
      "tree": {
        "sha": "9a4e94f6dcb1c5c1d472891257fb3df0636fcd6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a4e94f6dcb1c5c1d472891257fb3df0636fcd6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaa6ad54554abd1666cb60285ed6f890698ca620",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa6ad54554abd1666cb60285ed6f890698ca620",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaa6ad54554abd1666cb60285ed6f890698ca620",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa6ad54554abd1666cb60285ed6f890698ca620/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdd80b0a53b4af0b29cb6e03118e2456d053a757"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 134,
      "deletions": 131
    },
    "files": [
      {
        "sha": "c52baa4e8ba32b8a8e6315dfed7d76c848125745",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa6ad54554abd1666cb60285ed6f890698ca620/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa6ad54554abd1666cb60285ed6f890698ca620/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=aaa6ad54554abd1666cb60285ed6f890698ca620",
        "patch": "@@ -1,7 +1,10 @@\n // Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrdb.h>\n #include <addrman.h>\n+#include <chainparams.h>\n #include <test/data/asmap.raw.h>\n #include <test/util/setup_common.h>\n #include <util/asmap.h>\n@@ -15,6 +18,63 @@\n #include <optional>\n #include <string>\n \n+using namespace std::literals;\n+\n+class CAddrManSerializationMock : public CAddrMan\n+{\n+public:\n+    virtual void Serialize(CDataStream& s) const = 0;\n+\n+    CAddrManSerializationMock()\n+        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 100)\n+    {}\n+};\n+\n+class CAddrManUncorrupted : public CAddrManSerializationMock\n+{\n+public:\n+    void Serialize(CDataStream& s) const override\n+    {\n+        CAddrMan::Serialize(s);\n+    }\n+};\n+\n+class CAddrManCorrupted : public CAddrManSerializationMock\n+{\n+public:\n+    void Serialize(CDataStream& s) const override\n+    {\n+        // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n+        unsigned char nVersion = 1;\n+        s << nVersion;\n+        s << ((unsigned char)32);\n+        s << nKey;\n+        s << 10; // nNew\n+        s << 10; // nTried\n+\n+        int nUBuckets = ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30);\n+        s << nUBuckets;\n+\n+        CService serv;\n+        BOOST_CHECK(Lookup(\"252.1.1.1\", serv, 7777, false));\n+        CAddress addr = CAddress(serv, NODE_NONE);\n+        CNetAddr resolved;\n+        BOOST_CHECK(LookupHost(\"252.2.2.2\", resolved, false));\n+        CAddrInfo info = CAddrInfo(addr, resolved);\n+        s << info;\n+    }\n+};\n+\n+static CDataStream AddrmanToStream(const CAddrManSerializationMock& _addrman)\n+{\n+    CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n+    ssPeersIn << Params().MessageStart();\n+    ssPeersIn << _addrman;\n+    std::string str = ssPeersIn.str();\n+    std::vector<unsigned char> vchData(str.begin(), str.end());\n+    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n+}\n+\n class CAddrManTest : public CAddrMan\n {\n private:\n@@ -958,5 +1018,79 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n }\n \n+BOOST_AUTO_TEST_CASE(caddrdb_read)\n+{\n+    CAddrManUncorrupted addrmanUncorrupted;\n+\n+    CService addr1, addr2, addr3;\n+    BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n+    BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n+    BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n+    BOOST_CHECK(Lookup(\"250.7.3.3\"s, addr3, 9999, false));\n+    BOOST_CHECK(!Lookup(\"250.7.3.3\\0example.com\"s, addr3, 9999, false));\n+\n+    // Add three addresses to new table.\n+    CService source;\n+    BOOST_CHECK(Lookup(\"252.5.1.1\", source, 8333, false));\n+    std::vector<CAddress> addresses{CAddress(addr1, NODE_NONE), CAddress(addr2, NODE_NONE), CAddress(addr3, NODE_NONE)};\n+    BOOST_CHECK(addrmanUncorrupted.Add(addresses, source));\n+    BOOST_CHECK(addrmanUncorrupted.size() == 3);\n+\n+    // Test that the de-serialization does not throw an exception.\n+    CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n+    bool exceptionThrown = false;\n+    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+\n+    BOOST_CHECK(addrman1.size() == 0);\n+    try {\n+        unsigned char pchMsgTmp[4];\n+        ssPeers1 >> pchMsgTmp;\n+        ssPeers1 >> addrman1;\n+    } catch (const std::exception&) {\n+        exceptionThrown = true;\n+    }\n+\n+    BOOST_CHECK(addrman1.size() == 3);\n+    BOOST_CHECK(exceptionThrown == false);\n+\n+    // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n+    CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n+\n+    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    BOOST_CHECK(addrman2.size() == 0);\n+    BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n+    BOOST_CHECK(addrman2.size() == 3);\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n+{\n+    CAddrManCorrupted addrmanCorrupted;\n+\n+    // Test that the de-serialization of corrupted addrman throws an exception.\n+    CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n+    bool exceptionThrown = false;\n+    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    BOOST_CHECK(addrman1.size() == 0);\n+    try {\n+        unsigned char pchMsgTmp[4];\n+        ssPeers1 >> pchMsgTmp;\n+        ssPeers1 >> addrman1;\n+    } catch (const std::exception&) {\n+        exceptionThrown = true;\n+    }\n+    // Even through de-serialization failed addrman is not left in a clean state.\n+    BOOST_CHECK(addrman1.size() == 1);\n+    BOOST_CHECK(exceptionThrown);\n+\n+    // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n+    CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n+\n+    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    BOOST_CHECK(addrman2.size() == 0);\n+    BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n+    BOOST_CHECK(addrman2.size() == 0);\n+}\n+\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "803a7b8b153eca8dcef1c2e1d2dd274603d2a4a6",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 131,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa6ad54554abd1666cb60285ed6f890698ca620/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa6ad54554abd1666cb60285ed6f890698ca620/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=aaa6ad54554abd1666cb60285ed6f890698ca620",
        "patch": "@@ -2,8 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <addrdb.h>\n-#include <addrman.h>\n #include <chainparams.h>\n #include <clientversion.h>\n #include <cstdint>\n@@ -29,61 +27,6 @@\n \n using namespace std::literals;\n \n-class CAddrManSerializationMock : public CAddrMan\n-{\n-public:\n-    virtual void Serialize(CDataStream& s) const = 0;\n-\n-    CAddrManSerializationMock()\n-        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 100)\n-    {}\n-};\n-\n-class CAddrManUncorrupted : public CAddrManSerializationMock\n-{\n-public:\n-    void Serialize(CDataStream& s) const override\n-    {\n-        CAddrMan::Serialize(s);\n-    }\n-};\n-\n-class CAddrManCorrupted : public CAddrManSerializationMock\n-{\n-public:\n-    void Serialize(CDataStream& s) const override\n-    {\n-        // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n-        unsigned char nVersion = 1;\n-        s << nVersion;\n-        s << ((unsigned char)32);\n-        s << nKey;\n-        s << 10; // nNew\n-        s << 10; // nTried\n-\n-        int nUBuckets = ADDRMAN_NEW_BUCKET_COUNT ^ (1 << 30);\n-        s << nUBuckets;\n-\n-        CService serv;\n-        BOOST_CHECK(Lookup(\"252.1.1.1\", serv, 7777, false));\n-        CAddress addr = CAddress(serv, NODE_NONE);\n-        CNetAddr resolved;\n-        BOOST_CHECK(LookupHost(\"252.2.2.2\", resolved, false));\n-        CAddrInfo info = CAddrInfo(addr, resolved);\n-        s << info;\n-    }\n-};\n-\n-static CDataStream AddrmanToStream(const CAddrManSerializationMock& _addrman)\n-{\n-    CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n-    ssPeersIn << Params().MessageStart();\n-    ssPeersIn << _addrman;\n-    std::string str = ssPeersIn.str();\n-    std::vector<unsigned char> vchData(str.begin(), str.end());\n-    return CDataStream(vchData, SER_DISK, CLIENT_VERSION);\n-}\n-\n BOOST_FIXTURE_TEST_SUITE(net_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(cnode_listen_port)\n@@ -98,80 +41,6 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n     BOOST_CHECK(port == altPort);\n }\n \n-BOOST_AUTO_TEST_CASE(caddrdb_read)\n-{\n-    CAddrManUncorrupted addrmanUncorrupted;\n-\n-    CService addr1, addr2, addr3;\n-    BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n-    BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n-    BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n-    BOOST_CHECK(Lookup(\"250.7.3.3\"s, addr3, 9999, false));\n-    BOOST_CHECK(!Lookup(\"250.7.3.3\\0example.com\"s, addr3, 9999, false));\n-\n-    // Add three addresses to new table.\n-    CService source;\n-    BOOST_CHECK(Lookup(\"252.5.1.1\", source, 8333, false));\n-    std::vector<CAddress> addresses{CAddress(addr1, NODE_NONE), CAddress(addr2, NODE_NONE), CAddress(addr3, NODE_NONE)};\n-    BOOST_CHECK(addrmanUncorrupted.Add(addresses, source));\n-    BOOST_CHECK(addrmanUncorrupted.size() == 3);\n-\n-    // Test that the de-serialization does not throw an exception.\n-    CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n-    bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n-\n-    BOOST_CHECK(addrman1.size() == 0);\n-    try {\n-        unsigned char pchMsgTmp[4];\n-        ssPeers1 >> pchMsgTmp;\n-        ssPeers1 >> addrman1;\n-    } catch (const std::exception&) {\n-        exceptionThrown = true;\n-    }\n-\n-    BOOST_CHECK(addrman1.size() == 3);\n-    BOOST_CHECK(exceptionThrown == false);\n-\n-    // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n-    CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n-\n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n-    BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n-    BOOST_CHECK(addrman2.size() == 3);\n-}\n-\n-\n-BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n-{\n-    CAddrManCorrupted addrmanCorrupted;\n-\n-    // Test that the de-serialization of corrupted addrman throws an exception.\n-    CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n-    bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n-    BOOST_CHECK(addrman1.size() == 0);\n-    try {\n-        unsigned char pchMsgTmp[4];\n-        ssPeers1 >> pchMsgTmp;\n-        ssPeers1 >> addrman1;\n-    } catch (const std::exception&) {\n-        exceptionThrown = true;\n-    }\n-    // Even through de-serialization failed addrman is not left in a clean state.\n-    BOOST_CHECK(addrman1.size() == 1);\n-    BOOST_CHECK(exceptionThrown);\n-\n-    // Test that CAddrDB::Read leaves addrman in a clean state if de-serialization fails.\n-    CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n-\n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n-    BOOST_CHECK(addrman2.size() == 0);\n-    BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n-    BOOST_CHECK(addrman2.size() == 0);\n-}\n-\n BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n     SOCKET hSocket = INVALID_SOCKET;"
      }
    ]
  }
]