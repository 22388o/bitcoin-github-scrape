[
  {
    "sha": "a4def4dd54edfc266b9e72091f69ffa8329717fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGRlZjRkZDU0ZWRmYzI2NmI5ZTcyMDkxZjY5ZmZhODMyOTcxN2Zh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-30T12:24:58Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-30T12:24:58Z"
      },
      "message": "Use explicit captures in lambda expressions when capturing is non-trivial (more than one capture)",
      "tree": {
        "sha": "86e91cc40da4c4b037fc8f46b656f9a865d2ce0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86e91cc40da4c4b037fc8f46b656f9a865d2ce0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4def4dd54edfc266b9e72091f69ffa8329717fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4def4dd54edfc266b9e72091f69ffa8329717fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4def4dd54edfc266b9e72091f69ffa8329717fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4def4dd54edfc266b9e72091f69ffa8329717fa/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f58674a20a127f104409e11c5c11591533ddf360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f58674a20a127f104409e11c5c11591533ddf360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f58674a20a127f104409e11c5c11591533ddf360"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ed3d8e6a3f84cb914713a0f000eb12a3c74f90fd",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a4def4dd54edfc266b9e72091f69ffa8329717fa",
        "patch": "@@ -3156,7 +3156,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n \n         LOCK(cs_main);\n \n-        connman->ForEachNode([&](CNode* pnode) {\n+        connman->ForEachNode([&worst_peer, &oldest_block_announcement](CNode* pnode) {\n             AssertLockHeld(cs_main);\n \n             // Ignore non-outbound peers, or nodes marked for disconnect already\n@@ -3171,7 +3171,7 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n             }\n         });\n         if (worst_peer != -1) {\n-            bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+            bool disconnected = connman->ForNode(worst_peer, [&time_in_seconds, &oldest_block_announcement](CNode *pnode) {\n                 AssertLockHeld(cs_main);\n \n                 // Only disconnect a peer that has been connected to us for"
      },
      {
        "sha": "afcd98a51e2370d73381af9a17793186770bffec",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a4def4dd54edfc266b9e72091f69ffa8329717fa",
        "patch": "@@ -174,7 +174,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n     size_t filter_begin_pos = 0, chpos;\n     std::vector<std::pair<size_t, size_t>> filter_ranges;\n \n-    auto add_to_current_stack = [&](const std::string& strArg) {\n+    auto add_to_current_stack = [&stack, &nDepthInsideSensitive, &filter_begin_pos, &chpos](const std::string& strArg) {\n         if (stack.back().empty() && (!nDepthInsideSensitive) && historyFilter.contains(QString::fromStdString(strArg), Qt::CaseInsensitive)) {\n             nDepthInsideSensitive = 1;\n             filter_begin_pos = chpos;\n@@ -186,7 +186,7 @@ bool RPCConsole::RPCParseCommandLine(interfaces::Node* node, std::string &strRes\n         stack.back().push_back(strArg);\n     };\n \n-    auto close_out_params = [&]() {\n+    auto close_out_params = [&nDepthInsideSensitive, &filter_begin_pos, &filter_ranges, &chpos, &stack]() {\n         if (nDepthInsideSensitive) {\n             if (!--nDepthInsideSensitive) {\n                 assert(filter_begin_pos);"
      },
      {
        "sha": "18f648ba218e0bf26f111c1c70f7c5b2877b9aab",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=a4def4dd54edfc266b9e72091f69ffa8329717fa",
        "patch": "@@ -390,14 +390,13 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         std::atomic<int> nThreads {0};\n         std::atomic<int> fails {0};\n         for (size_t i = 0; i < 3; ++i) {\n-            tg.create_thread(\n-                    [&]{\n+            tg.create_thread([&queue, &nThreads, &fails] {\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     // While sleeping, no other thread should execute to this point\n                     auto observed = ++nThreads;\n                     MilliSleep(10);\n                     fails += observed  != nThreads;\n-                    });\n+            });\n         }\n         tg.join_all();\n         BOOST_REQUIRE_EQUAL(fails, 0);\n@@ -412,7 +411,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         bool done_ack{false};\n         {\n             std::unique_lock<std::mutex> l(m);\n-            tg.create_thread([&]{\n+            tg.create_thread([&queue, &m, &has_lock, &cv, &has_tried, &done, &done_ack] {\n                     CCheckQueueControl<FakeCheck> control(queue.get());\n                     std::unique_lock<std::mutex> ll(m);\n                     has_lock = true;"
      },
      {
        "sha": "c42a950cfe9899946dc887fe49037b4b4a8ab616",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4def4dd54edfc266b9e72091f69ffa8329717fa/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=a4def4dd54edfc266b9e72091f69ffa8329717fa",
        "patch": "@@ -232,7 +232,7 @@ static void test_cache_erase_parallel(size_t megabytes)\n     for (uint32_t x = 0; x < 3; ++x)\n         /** Each thread is emplaced with x copy-by-value\n         */\n-        threads.emplace_back([&, x] {\n+        threads.emplace_back([&hashes, &mtx, &n_insert, x, &set] {\n             boost::shared_lock<boost::shared_mutex> l(mtx);\n             size_t ntodo = (n_insert/4)/3;\n             size_t start = ntodo*x;"
      }
    ]
  }
]