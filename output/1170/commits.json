[
  {
    "sha": "6d82cd66f962f5fcea693d694f16c3f8e995651b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDgyY2Q2NmY5NjJmNWZjZWE2OTNkNjk0ZjE2YzNmOGU5OTU2NTFi",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@exmulti.com",
        "date": "2012-04-30T18:46:37Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-30T18:46:37Z"
      },
      "message": "Trim trailing whitespace in src/*.{cpp,h}",
      "tree": {
        "sha": "12f53dca5874da9913b9f5de0d60df8a47d5e0fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12f53dca5874da9913b9f5de0d60df8a47d5e0fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d82cd66f962f5fcea693d694f16c3f8e995651b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d82cd66f962f5fcea693d694f16c3f8e995651b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d82cd66f962f5fcea693d694f16c3f8e995651b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d82cd66f962f5fcea693d694f16c3f8e995651b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "be8651dde7b59e50e8c443da71c706667803d06d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8651dde7b59e50e8c443da71c706667803d06d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be8651dde7b59e50e8c443da71c706667803d06d"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "eaf242fc6450c24f9a465de60ed7e266e39f76c3",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -174,7 +174,7 @@ int CAddrMan::ShrinkNew(int nUBucket)\n         nI++;\n     }\n     CAddrInfo &info = mapInfo[nOldest];\n-    if (--info.nRefCount == 0) \n+    if (--info.nRefCount == 0)\n     {\n         SwapRandom(info.nRandomPos, vRandom.size()-1);\n         vRandom.pop_back();\n@@ -223,7 +223,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     infoOld.nRefCount = 1;\n     // do not update nTried, as we are going to move something else there immediately\n \n-    // check whether there is place in that one, \n+    // check whether there is place in that one,\n     if (vNew.size() < ADDRMAN_NEW_BUCKET_SIZE)\n     {\n         // if so, move it back there"
      },
      {
        "sha": "f462270d2dc088c991fd3cd531d224dc9611b0b6",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -213,7 +213,7 @@ class CAddrMan\n     // This is the only place where actual deletes occur.\n     // They are never deleted while in the \"tried\" table, only possibly evicted back to the \"new\" table.\n     int ShrinkNew(int nUBucket);\n- \n+\n     // Move an entry from the \"new\" table(s) to the \"tried\" table\n     // @pre vvUnkown[nOrigin].count(nId) != 0\n     void MakeTried(CAddrInfo& info, int nId, int nOrigin);"
      },
      {
        "sha": "671dc40ac1dccc61f1e6950dec1d704f1f0186c1",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -362,7 +362,7 @@ class CBitcoinSecret : public CBase58Data\n {\n public:\n     void SetSecret(const CSecret& vchSecret, bool fCompressed)\n-    { \n+    {\n         assert(vchSecret.size() == 32);\n         SetData(fTestNet ? 239 : 128, &vchSecret[0], vchSecret.size());\n         if (fCompressed)"
      },
      {
        "sha": "fc602ddd73422ad35e2c1ba796c148483a9dfb72",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -19,7 +19,7 @@\n #include <boost/iostreams/stream.hpp>\n #include <boost/algorithm/string.hpp>\n #include <boost/lexical_cast.hpp>\n-#include <boost/asio/ssl.hpp> \n+#include <boost/asio/ssl.hpp>\n #include <boost/filesystem/fstream.hpp>\n typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n \n@@ -951,7 +951,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetBitcoinAddress(address);\n-        int64 nAmount = AmountFromValue(s.value_); \n+        int64 nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -1330,7 +1330,7 @@ Value listtransactions(const Array& params, bool fHelp)\n         if (ret.size() >= (nCount+nFrom)) break;\n     }\n     // ret is newest to oldest\n-    \n+\n     if (nFrom > (int)ret.size())\n         nFrom = ret.size();\n     if ((nFrom + nCount) > (int)ret.size())"
      },
      {
        "sha": "6cf2c928db5db10a6119dc2c94c19d8c664b2101",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -19,7 +19,7 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     // Try to keep the keydata out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n     // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n-    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n+    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.\n     mlock(&chKey[0], sizeof chKey);\n     mlock(&chIV[0], sizeof chIV);\n \n@@ -46,7 +46,7 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n \n     // Try to keep the keydata out of swap\n     // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n-    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.  \n+    // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.\n     mlock(&chKey[0], sizeof chKey);\n     mlock(&chIV[0], sizeof chIV);\n "
      },
      {
        "sha": "e166ce3f26da269a6977b22499ec1da05b75f16c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -214,7 +214,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n                     Db* pdbCopy = new Db(&dbenv, 0);\n-    \n+\n                     int ret = pdbCopy->open(NULL,                 // Txn pointer\n                                             strFileRes.c_str(),   // Filename\n                                             \"main\",    // Logical db name\n@@ -226,7 +226,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         printf(\"Cannot create database file %s\\n\", strFileRes.c_str());\n                         fSuccess = false;\n                     }\n-    \n+\n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n                         while (fSuccess)\n@@ -749,7 +749,7 @@ bool CAddrDB::LoadAddresses()\n         printf(\"Loaded %i addresses\\n\", addrman.size());\n         return true;\n     }\n-    \n+\n     // Read pre-0.6 addr records\n \n     vector<CAddress> vAddr;"
      },
      {
        "sha": "701717d36c84ecc492a1507489090239c4c307e5",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -291,7 +291,7 @@ void ThreadIRCSeed2(void* parg)\n                 Send(hSocket, strprintf(\"NICK %s\\r\", strMyName.c_str()).c_str());\n             }\n         }\n-        \n+\n         if (fTestNet) {\n             Send(hSocket, \"JOIN #bitcoinTEST\\r\");\n             Send(hSocket, \"WHO #bitcoinTEST\\r\");"
      },
      {
        "sha": "91d984801dae8e20c6101a7d3b0c8a15deacadc5",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -165,7 +165,7 @@ class CKey\n         if (bn == NULL)\n             throw key_error(\"CKey::GetSecret() : EC_KEY_get0_private_key failed\");\n         int n=BN_bn2bin(bn,&vchRet[32 - nBytes]);\n-        if (n != nBytes) \n+        if (n != nBytes)\n             throw key_error(\"CKey::GetSecret(): BN_bn2bin failed\");\n         fCompressed = fCompressedPubKey;\n         return vchRet;"
      },
      {
        "sha": "0f59922cb2921360cb616359d333e4998666828c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -718,7 +718,7 @@ bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n     return false;\n }\n \n-bool CWalletTx::AcceptWalletTransaction() \n+bool CWalletTx::AcceptWalletTransaction()\n {\n     CTxDB txdb(\"r\");\n     return AcceptWalletTransaction(txdb);\n@@ -2862,7 +2862,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (pto->nVersion == 0)\n             return true;\n \n-        // Keep-alive ping. We send a nonce of zero because we don't use it anywhere \n+        // Keep-alive ping. We send a nonce of zero because we don't use it anywhere\n         // right now.\n         if (pto->nLastSend && GetTime() - pto->nLastSend > 30 * 60 && pto->vSend.empty()) {\n             if (pto->nVersion > BIP0031_VERSION)\n@@ -3062,7 +3062,7 @@ void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n         ctx.h[i] = ((uint32_t*)pinit)[i];\n \n     SHA256_Update(&ctx, data, sizeof(data));\n-    for (int i = 0; i < 8; i++) \n+    for (int i = 0; i < 8; i++)\n         ((uint32_t*)pstate)[i] = ctx.h[i];\n }\n "
      },
      {
        "sha": "2a81589a707e4882e9532266545e9bcb04930df8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -790,7 +790,7 @@ class CTxIndex\n         return !(a == b);\n     }\n     int GetDepthInMainChain() const;\n- \n+\n };\n \n "
      },
      {
        "sha": "213b99b971bf73d4174cfa1cec19096f20653c5f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -352,8 +352,8 @@ bool CNetAddr::IsIPv4() const\n bool CNetAddr::IsRFC1918() const\n {\n     return IsIPv4() && (\n-        GetByte(3) == 10 || \n-        (GetByte(3) == 192 && GetByte(2) == 168) || \n+        GetByte(3) == 10 ||\n+        (GetByte(3) == 192 && GetByte(2) == 168) ||\n         (GetByte(3) == 172 && (GetByte(2) >= 16 && GetByte(2) <= 31)));\n }\n "
      },
      {
        "sha": "d63fc4dc6d818854af8acefae554d8fc99abd438",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -1329,7 +1329,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n static void pop_lock()\n {\n-    if (fDebug) \n+    if (fDebug)\n     {\n         const CLockLocation& locklocation = (*lockstack).rbegin()->second;\n         printf(\"Unlocked: %s\\n\", locklocation.ToString().c_str());"
      },
      {
        "sha": "1b6335e0d8f3442405ac38147c40136de47eb149",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -571,7 +571,7 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n }\n \n \n-/** Median filter over a stream of values. \n+/** Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */\n template <typename T> class CMedianFilter\n@@ -588,7 +588,7 @@ template <typename T> class CMedianFilter\n         vValues.push_back(initial_value);\n         vSorted = vValues;\n     }\n-    \n+\n     void input(T value)\n     {\n         if(vValues.size() == nSize)"
      },
      {
        "sha": "df8c825d2cde6dc17a82ae89cf0a223101bf0972",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -17,7 +17,7 @@ static const int CLIENT_VERSION_BUILD       = 1;\n \n static const int CLIENT_VERSION =\n                            1000000 * CLIENT_VERSION_MAJOR\n-                         +   10000 * CLIENT_VERSION_MINOR \n+                         +   10000 * CLIENT_VERSION_MINOR\n                          +     100 * CLIENT_VERSION_REVISION\n                          +       1 * CLIENT_VERSION_BUILD;\n "
      },
      {
        "sha": "475c5d957e56a70b68e0830cbb6ef48d0edf6c5e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -567,7 +567,7 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, \n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived,\n                                   int64& nSent, int64& nFee) const\n {\n     nGenerated = nReceived = nSent = nFee = 0;"
      },
      {
        "sha": "049bf39e66f60e740318dbce40f340a15ea17b5d",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d82cd66f962f5fcea693d694f16c3f8e995651b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=6d82cd66f962f5fcea693d694f16c3f8e995651b",
        "patch": "@@ -298,7 +298,7 @@ class CReserveKey\n };\n \n \n-/** A transaction with a bunch of additional info that only the owner cares about. \n+/** A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n  */\n class CWalletTx : public CMerkleTx\n@@ -533,7 +533,7 @@ class CWalletTx : public CMerkleTx\n     void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64> >& listReceived,\n                     std::list<std::pair<CBitcoinAddress, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n+    void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived,\n                            int64& nSent, int64& nFee) const;\n \n     bool IsFromMe() const"
      }
    ]
  }
]