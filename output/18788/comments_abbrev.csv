DrahtBot,2020-04-27 23:03:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20199 (wallet: ignore (but warn) on duplicate -wallet parameters by jonasschnelli)\n* #20094 (wallet: Unify wallet direct",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-620280294,620280294,
MarcoFalke,2020-04-28 12:32:49,"Concept ACK, but I'd prefer if we got the current tests green first: #18800 ",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-620576451,620576451,
Sjors,2020-05-04 09:27:13,"Concept ACK. Needs rebase, now that #18805 landed, which fixed #18800.",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-623356873,623356873,
Sjors,2020-05-15 19:20:34,"Tests pass on macOS. The commit messages could be more descriptive than ""Fix wallet_importprunedfunds"", if only to aid the lazy reviewer in understanding what problems you're solving.",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-629434934,629434934,
MarcoFalke,2020-05-19 00:09:14,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-630498995,630498995,
achow101,2020-05-26 17:04:40,I've updated the commit messages to be more descriptive.,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-634153514,634153514,
achow101,2020-06-02 21:05:21,"> 0472e9f: the commit message is confusing. Why is this code being ~duplicated?\n\nI need to get the scriptPubKeys for those things, not just the address. So the functions are partially duplicated to generate the scripts rather than the addresses.",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-637805990,637805990,
Sjors,2020-06-05 12:37:29,"Is there an easy way to convert scripts to addresses in the Python framework?\n\nAnyway, ACK f57cacf",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-639455456,639455456,
Sjors,2020-06-16 11:25:55,"re-utACK 02357c7cd965ae5701d129691d4487a89f5d6deb, just some rebase related import changes",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-644703895,644703895,
Sjors,2020-09-01 12:07:04,"re-utACK 02357c7cd965ae5701d129691d4487a89f5d6deb\n\nSpurious Travis error reported in #19853.",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-684804294,684804294,
fjahr,2020-09-26 21:50:53,"Concept ACK, will take a closer look soon.",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-699552253,699552253,
Sjors,2020-10-02 10:45:15,re-utACK c45302f6f1d9e7e210b51f7bd580e498a60b2442,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-702661325,702661325,
achow101,2020-10-27 20:09:50,Going to also add more changes to `wallet_multiwallet.py` soon.,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-717509617,717509617,
achow101,2020-10-27 21:36:04,Actually I'll deal with multiwallet separately. It's going to be involved in a followup to drop the wallet dirs thing.,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-717554519,717554519,
achow101,2020-10-29 18:53:26,Rebased after #20186 and also fixed `wallet_multiwallet.py`.,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-718953529,718953529,
MarcoFalke,2020-10-31 08:16:18,"Almost cr ACK d137ec7d8499497fde60e23d0cb5fc7f7387e5e3 üç±\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nAlmost cr ACK d137ec7d8499497fde60e23d0cb5fc7f7387e5e3 üç±\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj9cAwAvAxznEyfwZnurWI8ACsC3a6Y0Hj28z",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-719901680,719901680,
MarcoFalke,2020-11-02 10:00:24,"review ACK c7b7e0a69265946aecc885be911c7650911ba2e3 üéø\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK c7b7e0a69265946aecc885be911c7650911ba2e3 üéø\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUixwgv+P+5WXXpHmaWiW4IZOO+ZwjR3ywM62Ifs63hM",https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-720368192,720368192,
laanwj,2020-11-02 17:50:19,ACK c7b7e0a69265946aecc885be911c7650911ba2e3,https://github.com/bitcoin/bitcoin/pull/18788#issuecomment-720626913,720626913,
Sjors,2020-06-01 14:41:18,In e3dc50344a57b926373bcc51aa2e213a682051be it seems problematic to replace  `createrawtransaction` and `fundrawtransaction` with PSBT methods in `rpc_fundrawtransaction.py`.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r433275243,433275243,test/functional/rpc_fundrawtransaction.py
achow101,2020-06-01 16:01:25,I think it's fine in some instances (like this one) because the funding code is the same and the goal is to check that the funding works.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r433332944,433332944,test/functional/rpc_fundrawtransaction.py
Sjors,2020-06-01 16:22:47,"Do we still sufficiently test the `createrawtransaction` and `fundrawtransaction` RPC elsewhere? Those are rather ancient, with all cool kids using PSBT it might be a while before we see a regression.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r433344349,433344349,test/functional/rpc_fundrawtransaction.py
achow101,2020-06-01 16:30:45,"IMO we do. `createrawtransaction` and `fundrawtransaction` are still being tested in `rpc_fundrawtransaction.py` as well is in other tests. Additionally, `fundrawtransaction` basically only calls `FundTransaction` after a bit of options parsing, and `walletcreatefundedpsbt` calls this function as well, right after transaction creation.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r433349200,433349200,test/functional/rpc_fundrawtransaction.py
ryanofsky,2020-10-26 22:05:53,"In commit ""Make import tests in wallet_listtransactions.py legacy wallet only"" (b014b8302bb31d5c8a4c4cbc8998576b3edc5294)\n\nChecks seem to be skipped without explanation here. It'd be good have a comment saying whether it would be good to port the checks to descriptor wallets in the future or if that's a bad idea or not possible.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512297393,512297393,test/functional/wallet_listtransactions.py
ryanofsky,2020-10-26 22:11:26,"In commit ""Update wallet_importprunedfunds to avoid dumpprivkey"" (35607a2b46f4088b1f3ec108baecf8ba221dbc02)\n\nGeneral question that doesn't necessarily impact the PR, but is there an equivalent to dumpprivkey for descriptor wallets?",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512299779,512299779,test/functional/wallet_importprunedfunds.py
ryanofsky,2020-10-26 22:54:27,"In commit ""Make raw multisig tests legacy wallet only in rpc_rawtransaction.py"" (186642062fc7165d609c6d4f590a18baa4199c77)\n\nComment from commit description would be helpful to add here: ""The traditional multisig workflow doesn't work with descriptor wallets so make these tests legacy wallet only."" It'd also be good if it said whether it'd make sense in the future to add descriptor multisig tes",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512317022,512317022,test/functional/rpc_rawtransaction.py
ryanofsky,2020-10-26 22:57:35,"In commit ""Do addmultisigaddress tests in legacy wallet mode in wallet_address_types.py"" (bfa84b9881428376804af1586a8a3d6df95d48ba)\n\nSame request here as for other places. Can there be a comment here saying whether it's good to skip these checks or if it'd be possible or beneficial to add multisig descriptor checks here in the future?",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512318182,512318182,test/functional/wallet_address_types.py
ryanofsky,2020-10-26 23:08:21,"In commit ""Avoid dumpprivkey and watchonly behavior in rpc_signrawtransaction.py"" (f4f81c98dca6da030b84b5b4887cf3ef4b72baec)\n\nCan commit description be updated to mention this change and reason listunspent is not longer used or checked? Change seems reasonable but I don't get it currently",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512322100,512322100,test/functional/rpc_signrawtransaction.py
ryanofsky,2020-10-26 23:11:29,"In commit ""Add script equivalent of functions in address.py"" (a56fc6c8c8f58f4a6ade3ac1437875bf8071a844)\n\nNot important, but it's usually better to say `isinstance(obj, obj_type)` instead of `type(obj) is obj_type` to not interfere with subclassing. Applies various places this commit",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512323334,512323334,test/functional/test_framework/script_util.py
ryanofsky,2020-10-26 23:20:01,"In commit ""Use separate watchonly wallet for multisig in feature_nulldummy.py"" (ed97c9b67e715815f653e20f5e478a4dad4e13f8)\n\nCan a comment be added to explain why the non-descriptor version of the test needs these addresses imported to pass, while the descriptor version doesn't need them? (Assuming that is the case.) I'm missing some understanding here",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512326198,512326198,test/functional/feature_nulldummy.py
ryanofsky,2020-10-26 23:34:23,"In commit ""Move import and watchonly tests to be legacy wallet only in wallet_balance.py"" (8ee94451ad55b81a53c38c6b8cee0c13f1b1f9e7)\n\nIt would be helpful to add the comment here from the commit description: ""Imports and watchonly behavior are legacy wallet only, so make them only run when the test is in legacy wallet mode."" It would also be helpful to say whether it is a good thing to be skipp",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512330821,512330821,test/functional/wallet_balance.py
ryanofsky,2020-10-26 23:37:28,"In commit ""Move import and watchonly tests to be legacy wallet only in wallet_balance.py"" (8ee94451ad55b81a53c38c6b8cee0c13f1b1f9e7)\n\nWould suggest writing this as:\n\n```python\nif self.options.descriptors:\n   del expected_balances_0['watchonly']\nassert_equal(self.nodes[0].getbalances(), expected_balances_0)\n```\n\nto keep checking for new fields as strict and to duplicate less cod",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512331763,512331763,test/functional/wallet_balance.py
ryanofsky,2020-10-26 23:44:09,"In commit ""Move import and watchonly tests to be legacy wallet only in wallet_balance.py"" (8ee94451ad55b81a53c38c6b8cee0c13f1b1f9e7)\n\nI don't get these changes. Does the address generated to matter for the tests or is just code cleanup? It would be good to mention these changes in the commit description and say what they are",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512333883,512333883,test/functional/wallet_balance.py
achow101,2020-10-26 23:59:16,Not currently.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512338374,512338374,test/functional/wallet_importprunedfunds.py
achow101,2020-10-27 00:00:27,It's not necessary because it is testing the `include_watchonly` parameter in `listtransactions` which is not present in descriptor wallets.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512338747,512338747,test/functional/wallet_listtransactions.py
achow101,2020-10-27 00:04:07,Legacy wallets need these imported for the test to work. Otherwise they won't watch the multisig. Descriptor wallets will always watch imported things.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512339814,512339814,test/functional/feature_nulldummy.py
achow101,2020-10-27 20:07:45,"Added a comment. It is not necessary to test these for descriptor wallets, that's why they are disabled in the first place. Otherwise there would be a TODO.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512997491,512997491,test/functional/wallet_listtransactions.py
achow101,2020-10-27 20:07:49,"Added a comment. It is not necessary to test these for descriptor wallets, that's why they are disabled in the first place. Otherwise there would be a TODO.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512997522,512997522,test/functional/rpc_rawtransaction.py
achow101,2020-10-27 20:07:54,"Added a comment. It is not necessary to test these for descriptor wallets, that's why they are disabled in the first place. Otherwise there would be a TODO.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512997572,512997572,test/functional/wallet_address_types.py
achow101,2020-10-27 20:08:48,Updated the commit message. `listunspent` is not being used and is not the test target for this test. It is tested elsewhere. There is no need to attempt to bring this back for descriptor wallets.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512997988,512997988,test/functional/rpc_signrawtransaction.py
achow101,2020-10-27 20:08:54,Done,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512998038,512998038,test/functional/test_framework/script_util.py
achow101,2020-10-27 20:09:02,Added a comment.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512998101,512998101,test/functional/feature_nulldummy.py
achow101,2020-10-27 20:09:12,"Added a comment. It is not necessary to test these for descriptor wallets, that's why they are disabled in the first place. Otherwise there would be a TODO.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512998188,512998188,test/functional/wallet_balance.py
achow101,2020-10-27 20:09:17,Done,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512998253,512998253,test/functional/wallet_balance.py
achow101,2020-10-27 20:09:28,Reverted.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r512998396,512998396,test/functional/wallet_balance.py
MarcoFalke,2020-10-30 15:17:47,"Looks like this test is removed. Is this tested elsewhere? If not, might be good to skip with descriptor wallets.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515173799,515173799,test/functional/rpc_fundrawtransaction.py
MarcoFalke,2020-10-30 15:22:36,"Can be written shorter:\n\n```py\nutxo = [u for u in utxos if u['address'] == address][0]",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515177260,515177260,test/functional/wallet_listsinceblock.py
MarcoFalke,2020-10-30 15:30:57,nit: ned->need,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515183891,515183891,test/functional/feature_nulldummy.py
MarcoFalke,2020-10-30 16:02:31,nit to->as?,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515207035,515207035,test/functional/feature_backwards_compatibility.py
MarcoFalke,2020-10-30 16:02:55,nit: to->as,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515207291,515207291,test/functional/feature_backwards_compatibility.py
MarcoFalke,2020-10-30 16:03:46,"Running the tests on commit 80bb5ca8cf fails.\n\nThis commit might need to come first?",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515207818,515207818,test/functional/tool_wallet.py
MarcoFalke,2020-10-30 16:11:36,"in commit c1f7bfc6bb1074c26d670976a8f8c0bb95be1858:\n\nShould wallet_labels be run with and without descriptors in the test_runner?",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515212764,515212764,test/functional/wallet_labels.py
achow101,2020-10-30 17:25:29,"Yes, labels are not effected by descriptor wallets.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259009,515259009,test/functional/wallet_labels.py
achow101,2020-10-30 17:25:43,Moved it.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259152,515259152,test/functional/tool_wallet.py
achow101,2020-10-30 17:25:52,"Changed to ""to be""",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259268,515259268,test/functional/feature_backwards_compatibility.py
achow101,2020-10-30 17:25:58,"Changed to ""to be""",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259321,515259321,test/functional/feature_backwards_compatibility.py
achow101,2020-10-30 17:26:03,Fixed,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259370,515259370,test/functional/feature_nulldummy.py
achow101,2020-10-30 17:26:08,Done,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259432,515259432,test/functional/wallet_listsinceblock.py
achow101,2020-10-30 17:26:20,Reintroduced this check in the previous watchonly test.,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515259560,515259560,test/functional/rpc_fundrawtransaction.py
mjdietzx,2020-10-30 18:25:00,"Would this be a little easier to follow? Also, is the comment on l148 still relevant `# There should only be 1 key`?\n```python\nnkeys = 3 if self.options.descriptors else 1\nassert_equal(walletinfo['keypoolsize'], nkeys)\nassert_equal(walletinfo['keypoolsize_hd_internal'], nkeys)\n```\n```",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515298439,515298439,test/functional/wallet_createwallet.py
mjdietzx,2020-10-30 18:30:59,I haven't been able to wrap my head around this / how this change fits into the greater PR. If you don't mind could you give me a brief explanation or point me in the right direction?,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515301441,515301441,test/functional/test_framework/blocktools.py
achow101,2020-10-30 18:44:24,Done,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515307884,515307884,test/functional/wallet_createwallet.py
achow101,2020-10-30 18:46:00,"This change makes this function use the PSBT workflow rather than the old raw transactions workflow. Additionally, it tries to sign with all of the wallets loaded by the node.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515308656,515308656,test/functional/test_framework/blocktools.py
ryanofsky,2020-10-30 18:50:31,"> I haven't been able to wrap my head around this / how this change fits into the greater PR. If you don't mind could you give me a brief explanation or point me in the right direction?\n\nMy understanding is that legacy wallets support a mix of watch only and spendable scriptpubkeys, while descriptor wallets have to choose between only watch-only or spendable descriptors and refuse to hold both",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515310894,515310894,test/functional/test_framework/blocktools.py
MarcoFalke,2020-10-31 08:14:54,I thin the previous version of the code was more correct. See ci failure,https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515471501,515471501,test/functional/wallet_createwallet.py
achow101,2020-10-31 19:04:55,"Oops, I forgot to change the second assert. Should be fixed now.",https://github.com/bitcoin/bitcoin/pull/18788#discussion_r515528534,515528534,test/functional/wallet_createwallet.py
