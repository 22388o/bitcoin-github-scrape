[
  {
    "sha": "546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDZhMDc2NGYzYjcwMWVlMDdmNWE4ZDE2OGUyYTU4ZmVkNmI0NmQ1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-12T15:06:45Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-16T14:24:16Z"
      },
      "message": "fuzz: Fill various small fuzzing gaps",
      "tree": {
        "sha": "9a9a91a6882348ffcbe17593f6e33bea2f52fde7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a9a91a6882348ffcbe17593f6e33bea2f52fde7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/546a0764f3b701ee07f5a8d168e2a58fed6b46d5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b440c33179e777bfebb8c12840e06ea691a4868f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b440c33179e777bfebb8c12840e06ea691a4868f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b440c33179e777bfebb8c12840e06ea691a4868f"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 46,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5b8ae5d4fbdccbfcc68242001ca5d56813bef577",
        "filename": "src/test/fuzz/kitchen_sink.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/546a0764f3b701ee07f5a8d168e2a58fed6b46d5/src/test/fuzz/kitchen_sink.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/546a0764f3b701ee07f5a8d168e2a58fed6b46d5/src/test/fuzz/kitchen_sink.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/kitchen_sink.cpp?ref=546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
        "patch": "@@ -2,25 +2,70 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <merkleblock.h>\n+#include <policy/fees.h>\n #include <rpc/util.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n #include <test/fuzz/util.h>\n #include <util/error.h>\n #include <util/translation.h>\n \n+#include <array>\n #include <cstdint>\n #include <vector>\n \n+namespace {\n+constexpr TransactionError ALL_TRANSACTION_ERROR[] = {\n+    TransactionError::OK,\n+    TransactionError::MISSING_INPUTS,\n+    TransactionError::ALREADY_IN_CHAIN,\n+    TransactionError::P2P_DISABLED,\n+    TransactionError::MEMPOOL_REJECTED,\n+    TransactionError::MEMPOOL_ERROR,\n+    TransactionError::INVALID_PSBT,\n+    TransactionError::PSBT_MISMATCH,\n+    TransactionError::SIGHASH_MISMATCH,\n+    TransactionError::MAX_FEE_EXCEEDED,\n+};\n+\n+constexpr FeeEstimateHorizon ALL_FEE_EST_HORIZON[] = {\n+    FeeEstimateHorizon::SHORT_HALFLIFE,\n+    FeeEstimateHorizon::MED_HALFLIFE,\n+    FeeEstimateHorizon::LONG_HALFLIFE,\n+};\n+\n+constexpr OutputType ALL_OUTPUT_TYPE[] = {\n+    OutputType::LEGACY,\n+    OutputType::P2SH_SEGWIT,\n+    OutputType::BECH32,\n+};\n+}; // namespace\n+\n // The fuzzing kitchen sink: Fuzzing harness for functions that need to be\n // fuzzed but a.) don't belong in any existing fuzzing harness file, and\n // b.) are not important enough to warrant their own fuzzing harness file.\n FUZZ_TARGET(kitchen_sink)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n-    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray<TransactionError>({TransactionError::OK, TransactionError::MISSING_INPUTS, TransactionError::ALREADY_IN_CHAIN, TransactionError::P2P_DISABLED, TransactionError::MEMPOOL_REJECTED, TransactionError::MEMPOOL_ERROR, TransactionError::INVALID_PSBT, TransactionError::PSBT_MISMATCH, TransactionError::SIGHASH_MISMATCH, TransactionError::MAX_FEE_EXCEEDED});\n+    const TransactionError transaction_error = fuzzed_data_provider.PickValueInArray(ALL_TRANSACTION_ERROR);\n     (void)JSONRPCTransactionError(transaction_error);\n     (void)RPCErrorFromTransactionError(transaction_error);\n     (void)TransactionErrorString(transaction_error);\n+\n+    (void)StringForFeeEstimateHorizon(fuzzed_data_provider.PickValueInArray(ALL_FEE_EST_HORIZON));\n+\n+    const OutputType output_type = fuzzed_data_provider.PickValueInArray(ALL_OUTPUT_TYPE);\n+    const std::string& output_type_string = FormatOutputType(output_type);\n+    OutputType output_type_parsed;\n+    const bool parsed = ParseOutputType(output_type_string, output_type_parsed);\n+    assert(parsed);\n+    assert(output_type == output_type_parsed);\n+    (void)ParseOutputType(fuzzed_data_provider.ConsumeRandomLengthString(64), output_type_parsed);\n+\n+    const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    const std::vector<bool> bits = BytesToBits(bytes);\n+    const std::vector<uint8_t> bytes_decoded = BitsToBytes(bits);\n+    assert(bytes == bytes_decoded);\n }"
      }
    ]
  },
  {
    "sha": "4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGRiY2QwZDlhYmU0MGNkMzg3ZTYzZDhjNDgxN2UwZmUzNjAwNGRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-12T15:07:53Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-27T19:27:41Z"
      },
      "message": "fuzz: Add coverage for CDataStream consumer",
      "tree": {
        "sha": "93f343615607e090adbc68600bab7d774bb6fbe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93f343615607e090adbc68600bab7d774bb6fbe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/546a0764f3b701ee07f5a8d168e2a58fed6b46d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/546a0764f3b701ee07f5a8d168e2a58fed6b46d5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "54e18f6920f283c3607b3867fadf73e5dcbaaaa0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
        "patch": "@@ -210,6 +210,7 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/crypto_hkdf_hmac_sha256_l32.cpp \\\n  test/fuzz/crypto_poly1305.cpp \\\n  test/fuzz/cuckoocache.cpp \\\n+ test/fuzz/data_stream.cpp \\\n  test/fuzz/decode_tx.cpp \\\n  test/fuzz/descriptor_parse.cpp \\\n  test/fuzz/deserialize.cpp \\"
      },
      {
        "sha": "28fc528cebc9637339699a7a04b255e878eef423",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=4ddbcd0d9abe40cd387e63d8c4817e0fe36004dc",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <addrman.h>\n+#include <net.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <vector>\n+\n+void initialize_data_stream_addr_man()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n+    CAddrMan addr_man;\n+    CAddrDB::Read(addr_man, data_stream);\n+}"
      }
    ]
  }
]