[
  {
    "sha": "89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWM4ZDJjMTJjNGFjNzFmMjQ1NGI4ZDRhMDRhZDJkYzVhY2Q2Yjc2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-12T14:38:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-13T08:17:35Z"
      },
      "message": "[Qt] Console: allow empty arguments",
      "tree": {
        "sha": "b90c7193d9cab5bf4f651882d658c81beee26c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b90c7193d9cab5bf4f651882d658c81beee26c33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYT66gAAoJECnUvLZBb1Ps0McQAJtBZG8gTx7huQaVqI3asmJt\nMfM79oN7lEc4vWuxlS3Wn1JZ7hqdleAAldpak+H5cl8nN5/HIRUTkGYFz98WACg+\nicVcNpQn35rZ4kyaLAMra9GxjIj7ddjznpTAXyj+ACXS0o6IVT4ezPfYh3R3z/zP\n5V0wVsxMIpd4cvuGoYKt73yGUe2IbrM2E60tUnNMDJLuzbe/Hah1rxKHAc4poF+6\npF+EticF4M71iwRmoYTO6Br46UmMNL3nvNstb4MbBKRq9EW5ncwNj8XTdeA2MNyi\nJT56nDqrjmNNpyPop43IKnuAfXeH/ocv1Gj1A6jjBUl/ofkvvcScXOUrdbJaGmp7\nQeGoP+ydB0AbMq1RcKnlUlJy4SLT7Z/t2m5khGbI0usHsa0qAM1RfBQraSCFZ2MW\nT8iOpdxc10SNzp/LstItBUraUtTJOdfVsqXJssCSDha11uWJH/1gmt9nKKLWgNto\njSRfNT9Hj37AXsFesEbUr0793dC6n54JzZJuUtWULFHyLqflzuTzWlCggJbIqpem\nSMlGSqfkTztBn7X/ge3ghcxblliruNck8f+4YJ+Q7kUHOA0Gc/+c0RR8kmsDrkfv\nAF7yADrWenpmgq40jw6TMmyb5KXNoWI33K7I1gUfmDZQ7220VAhWgK5397xcfUAp\nf72DIT7FT28Anft+H+k8\n=SFoU\n-----END PGP SIGNATURE-----",
        "payload": "tree b90c7193d9cab5bf4f651882d658c81beee26c33\nparent 76fcd9d5034143a5b041766552670d19f926097d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481553502 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1481617055 +0100\n\n[Qt] Console: allow empty arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76fcd9d5034143a5b041766552670d19f926097d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76fcd9d5034143a5b041766552670d19f926097d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76fcd9d5034143a5b041766552670d19f926097d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "2c5b5ee890ba4bacec880a7408fa5eb691a5d603",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
        "patch": "@@ -137,6 +137,7 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n     enum CmdParseState\n     {\n         STATE_EATING_SPACES,\n+        STATE_EATING_SPACES_IN_ARG,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n@@ -220,6 +221,7 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                     break;\n             }\n             case STATE_ARGUMENT: // In or after argument\n+            case STATE_EATING_SPACES_IN_ARG:\n             case STATE_EATING_SPACES: // Handle runs of whitespace\n                 switch(ch)\n             {\n@@ -231,13 +233,12 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                     {\n                         if (ch == '(' && stack.size() && stack.back().size() > 0)\n                             stack.push_back(std::vector<std::string>());\n-                        if (curarg.size())\n-                        {\n-                            // don't allow commands after executed commands on baselevel\n-                            if (!stack.size())\n-                                throw std::runtime_error(\"Invalid Syntax\");\n-                            stack.back().push_back(curarg);\n-                        }\n+\n+                        // don't allow commands after executed commands on baselevel\n+                        if (!stack.size())\n+                            throw std::runtime_error(\"Invalid Syntax\");\n+\n+                        stack.back().push_back(curarg);\n                         curarg.clear();\n                         state = STATE_EATING_SPACES;\n                     }\n@@ -256,13 +257,12 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                     }\n                     break;\n                 case ' ': case ',': case '\\t':\n-                    if(state == STATE_ARGUMENT) // Space ends argument\n+                    if(state == STATE_ARGUMENT || (state == STATE_EATING_SPACES_IN_ARG && ch == ',')) // Space ends argument\n                     {\n-                        if (curarg.size())\n-                            stack.back().push_back(curarg);\n+                        stack.back().push_back(curarg);\n                         curarg.clear();\n                     }\n-                    state = STATE_EATING_SPACES;\n+                    state = (ch == ',' ? STATE_EATING_SPACES_IN_ARG : STATE_EATING_SPACES);\n                     break;\n                 default: curarg += ch; state = STATE_ARGUMENT;\n             }"
      }
    ]
  },
  {
    "sha": "6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTMyYzBmNjlkZTFkOWNhZjFhZjI2ZTE5MmVmYmI4MGY3NTM0ZmRk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-12-12T23:04:10Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-13T08:18:13Z"
      },
      "message": "Qt/Test: Check handling of empty arguments in RPC debug console",
      "tree": {
        "sha": "7b8bddee7aab436b6b9ec558d5a8c2c55695485f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b8bddee7aab436b6b9ec558d5a8c2c55695485f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYT67HAAoJECnUvLZBb1Ps+KAP/0SkUE7RgDknrwaQ4LThChFs\n3c0U5lZA6dFeYpq1HG8Mih6kto1yPDGlUo7MLc+jBlVXF51B1V/8IzisXSn5Yw5e\nIpdA2zkeuCgktoePoen742SFRUPVUzvV+i9Mz/MnysxIw/S/iN+EGDLiG+PbpggE\nqNLVXAWVBgOdptY/8CjleCOVGhY389k6V3lkn7YQVQ2mhb5ZUie1UCPfkDlr1IaW\nrIBJxEz/bnRZ5iYcg04dxuCbi83xmyJ2uaF0cNgUPpmW/F3fkl7rYnIaxIPQ3hys\nlPMCOjMGpQv9mE8ppJaQ4+i1lvCcW/mk8Y1qhrp9Sia+rOfE7DXC6SBWtUVvJ7nR\nsHSU1nZYuI7qf7sWd76uY8t8SdEc5eX+i1y33GaBnKPZO/3J3IEWCOktnrYMrHMO\nHqQLV7p6SUFNoC6cUID9NIZ1QVeW6ZUFsCedJjuNUuoosWJq6ZsWmtXJfxHO588T\nUjzrrpRCP1AwV9CXpMLBjIhocOMjDVBigx2QOzmH9ydXvjQxUdzwoTRqF6pwRiAj\npoyageT0p75jp7Lj8duztgKe+3VWxkbjVR3DHbXZwrRrTnVyCxszusteiZkXQj7y\niUlKILzJvuEevwUapM2nVpkYbLv++bsnPkLs60U6+G/P0+hpOdHzoCOr3HmVUgGk\ne4f4SZi5f/pBH+szpEPN\n=j2at\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b8bddee7aab436b6b9ec558d5a8c2c55695485f\nparent 89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1481583850 +0000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1481617093 +0100\n\nQt/Test: Check handling of empty arguments in RPC debug console\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a32c0f69de1d9caf1af26e192efbb80f7534fdd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89c8d2c12c4ac71f2454b8d4a04ad2dc5acd6b76"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0aeef045501c9e8106553da4c4ee92a8fff64ff4",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a32c0f69de1d9caf1af26e192efbb80f7534fdd/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a32c0f69de1d9caf1af26e192efbb80f7534fdd/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
        "patch": "@@ -18,6 +18,19 @@\n \n #include <boost/filesystem.hpp>\n \n+static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp) {\n+        return \"help message\";\n+    }\n+    return request.params.write(0, 0);\n+}\n+\n+static const CRPCCommand vRPCCommands[] =\n+{\n+    { \"test\", \"rpcNestedTest\", &rpcNestedTest_rpc, true },\n+};\n+\n void RPCNestedTests::rpcNestedTests()\n {\n     UniValue jsonRPCError;\n@@ -26,6 +39,7 @@ void RPCNestedTests::rpcNestedTests()\n     // could be moved to a more generic place when we add more tests on QT level\n     const CChainParams& chainparams = Params();\n     RegisterAllCoreRPCCommands(tableRPC);\n+    tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n     ClearDatadirCache();\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n@@ -85,6 +99,23 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCExecuteCommandLine(result, \"getblock(getbestblockhash())[tx][0]\");\n     QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n \n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest\");\n+    QVERIFY(result == \"[]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest ''\");\n+    QVERIFY(result == \"[\\\"\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest \\\"\\\"\");\n+    QVERIFY(result == \"[\\\"\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest '' abc\");\n+    QVERIFY(result == \"[\\\"\\\",\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc '' abc\");\n+    QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc  abc\");\n+    QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc\\t\\tabc\");\n+    QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc,,abc\");\n+    QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n+\n     delete pcoinsTip;\n     delete pcoinsdbview;\n     delete pblocktree;"
      }
    ]
  },
  {
    "sha": "390bd14684a4f1a974014a31c71d44acd3d94d6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTBiZDE0Njg0YTRmMWE5NzQwMTRhMzFjNzFkNDRhY2QzZDk0ZDZh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-14T07:59:09Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-12-14T08:00:09Z"
      },
      "message": "[Qt] Console: don't allow empty arguments when using the comma-syntax",
      "tree": {
        "sha": "7392bf3b790cb91e508d1508f9cc8a9c7eda97a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7392bf3b790cb91e508d1508f9cc8a9c7eda97a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/390bd14684a4f1a974014a31c71d44acd3d94d6a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYUPwKAAoJECnUvLZBb1PsmmAP/iuO6ZlxZUW8JPVepR8j3Lnq\nrZT2hRpSorzDLkxzLHRIbUsZdcp1cXrZkowwCk1TnIWUYFBObqsyJnTPMg/qzrrC\nuKqs1YtGXWcbWe6VEVTT5EePRSFbzLsCtAJXY20fEapw3vqkuDXvlkfsgiv/OQ1N\nKgY1ITGARlOFJUyUH1fJt+5fFMS2bIPxIh4jAfZ/7GlR0Gw7oRGKImVYUDKd9hRQ\nOsOVqf+81dUSwpT6GY0zHExlhaM6howUJTlDBC0f4Y9oDNssEUqXj0EiVxJUspLl\n/rL2B+qTvhkhiGic53WRjLs64DY8gZ8IthaJFnYoDBp/Or5i2q0Jh1Nc8iMnq+ib\niafOQ5EZ4McY94/dG1NvuCfXVC+y5OaiUzv5EArrYeCIjKj7nEFZwh7akSzTWIAu\nGG7E2jYv2EstbAN77g8FHJ2lhEyGwqSsRA0kZcpyMhMhR+4AGoI31p6SVy5ov/pl\nR0qiv9KPSpq0JBvNs58H4I+wzhaGqESQQL2Yd3mpdZv7eYtwt4QC929YQqdcDiBn\nVJJC7lesYxdU5Km0wB5jYnIT0GEgj2LIVSFWYzz7/i+RZA71KHOQPi74z9bKDqYe\nMWtWOViZF5f3L5PbUTpsZ7Xnb5gcB9cIhWjhVX0qeVLt8Q00wjCgNYp1lxXj7m9g\nx+/ePPnf6KBAHfOL3g0E\n=eZwS\n-----END PGP SIGNATURE-----",
        "payload": "tree 7392bf3b790cb91e508d1508f9cc8a9c7eda97a9\nparent 6a32c0f69de1d9caf1af26e192efbb80f7534fdd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1481702349 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1481702409 +0100\n\n[Qt] Console: don't allow empty arguments when using the comma-syntax\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390bd14684a4f1a974014a31c71d44acd3d94d6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/390bd14684a4f1a974014a31c71d44acd3d94d6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390bd14684a4f1a974014a31c71d44acd3d94d6a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a32c0f69de1d9caf1af26e192efbb80f7534fdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a32c0f69de1d9caf1af26e192efbb80f7534fdd"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 35,
      "deletions": 15
    },
    "files": [
      {
        "sha": "dc6fa338af25908ce46a6e9bd7953173f47bc84e",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390bd14684a4f1a974014a31c71d44acd3d94d6a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390bd14684a4f1a974014a31c71d44acd3d94d6a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=390bd14684a4f1a974014a31c71d44acd3d94d6a",
        "patch": "@@ -138,6 +138,7 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n     {\n         STATE_EATING_SPACES,\n         STATE_EATING_SPACES_IN_ARG,\n+        STATE_EATING_SPACES_IN_BRACKETS,\n         STATE_ARGUMENT,\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n@@ -222,13 +223,16 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n             }\n             case STATE_ARGUMENT: // In or after argument\n             case STATE_EATING_SPACES_IN_ARG:\n+            case STATE_EATING_SPACES_IN_BRACKETS:\n             case STATE_EATING_SPACES: // Handle runs of whitespace\n                 switch(ch)\n             {\n                 case '\"': state = STATE_DOUBLEQUOTED; break;\n                 case '\\'': state = STATE_SINGLEQUOTED; break;\n                 case '\\\\': state = STATE_ESCAPE_OUTER; break;\n                 case '(': case ')': case '\\n':\n+                    if (state == STATE_EATING_SPACES_IN_ARG)\n+                        throw std::runtime_error(\"Invalid Syntax\");\n                     if (state == STATE_ARGUMENT)\n                     {\n                         if (ch == '(' && stack.size() && stack.back().size() > 0)\n@@ -240,7 +244,7 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n \n                         stack.back().push_back(curarg);\n                         curarg.clear();\n-                        state = STATE_EATING_SPACES;\n+                        state = STATE_EATING_SPACES_IN_BRACKETS;\n                     }\n                     if ((ch == ')' || ch == '\\n') && stack.size() > 0)\n                     {\n@@ -257,12 +261,20 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                     }\n                     break;\n                 case ' ': case ',': case '\\t':\n-                    if(state == STATE_ARGUMENT || (state == STATE_EATING_SPACES_IN_ARG && ch == ',')) // Space ends argument\n+                    if(state == STATE_EATING_SPACES_IN_ARG && curarg.empty() && ch == ',')\n+                        throw std::runtime_error(\"Invalid Syntax\");\n+\n+                    else if(state == STATE_ARGUMENT) // Space ends argument\n                     {\n                         stack.back().push_back(curarg);\n                         curarg.clear();\n                     }\n-                    state = (ch == ',' ? STATE_EATING_SPACES_IN_ARG : STATE_EATING_SPACES);\n+                    if ((state == STATE_EATING_SPACES_IN_BRACKETS || state == STATE_ARGUMENT) && ch == ',')\n+                    {\n+                        state = STATE_EATING_SPACES_IN_ARG;\n+                        break;\n+                    }\n+                    state = STATE_EATING_SPACES;\n                     break;\n                 default: curarg += ch; state = STATE_ARGUMENT;\n             }"
      },
      {
        "sha": "26ac5e21147a4bd4e78a8c37a41a447b49f7119e",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 12,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390bd14684a4f1a974014a31c71d44acd3d94d6a/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390bd14684a4f1a974014a31c71d44acd3d94d6a/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=390bd14684a4f1a974014a31c71d44acd3d94d6a",
        "patch": "@@ -15,6 +15,7 @@\n #include \"util.h\"\n \n #include <QDir>\n+#include <QtGlobal>\n \n #include <boost/filesystem.hpp>\n \n@@ -77,16 +78,6 @@ void RPCNestedTests::rpcNestedTests()\n     RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n     QVERIFY(result.substr(0,1) == \"{\");\n \n-#if QT_VERSION >= 0x050300\n-    // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n-    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n-    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n-#endif\n-\n     (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()[\\\"chain\\\"]\")); //Quote path identifier are allowed, but look after a child contaning the quotes in the key\n     QVERIFY(result == \"null\");\n \n@@ -113,8 +104,25 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n     RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc\\t\\tabc\");\n     QVERIFY(result == \"[\\\"abc\\\",\\\"abc\\\"]\");\n-    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc,,abc\");\n-    QVERIFY(result == \"[\\\"abc\\\",\\\"\\\",\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc )\");\n+    QVERIFY(result == \"[\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest( abc )\");\n+    QVERIFY(result == \"[\\\"abc\\\"]\");\n+    RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(   abc   ,   cba )\");\n+    QVERIFY(result == \"[\\\"abc\\\",\\\"cba\\\"]\");\n+\n+#if QT_VERSION >= 0x050300\n+    // do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() .\\n\"), std::runtime_error); //invalid syntax\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo() getblockchaininfo()\"), std::runtime_error); //invalid syntax\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(\")); //tolerate non closing brackets if we have no arguments\n+    (RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo()()()\")); //tolerate non command brackts\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"getblockchaininfo(True)\"), UniValue); //invalid argument\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"a(getblockchaininfo(True))\"), UniValue); //method not found\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest abc,,abc\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+    QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n+#endif\n \n     delete pcoinsTip;\n     delete pcoinsdbview;"
      }
    ]
  }
]