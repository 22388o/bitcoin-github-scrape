[
  {
    "sha": "dc942e6f276b9fabc21f06d11cd16871d4054f82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzk0MmU2ZjI3NmI5ZmFiYzIxZjA2ZDExY2QxNjg3MWQ0MDU0Zjgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T11:34:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-07-09T18:40:14Z"
      },
      "message": "Introduce whitelisted peers.\n\nThis adds a -whitelist option to specify subnet ranges from which peers\nthat connect are whitelisted. In addition, there is a -whitebind option\nwhich works like -bind, except peers connecting to it are also\nwhitelisted (allowing a separate listen port for trusted connections).\n\nBeing whitelisted has two effects (for now):\n* They are immune to DoS disconnection/banning.\n* Transactions they broadcast (which are valid) are always relayed,\n  even if they were already in the mempool. This means that a node\n  can function as a gateway for a local network, and that rebroadcasts\n  from the local network will work as expected.\n\nWhitelisting replaces the magic exemption localhost had for DoS\ndisconnection (local addresses are still never banned, though), which\nimplied hidden service connects (from a localhost Tor node) were\nincorrectly immune to DoS disconnection as well. This old\nbehaviour is removed for that reason, but can be restored using\n-whitelist=127.0.0.1 or -whitelist=::1 can be specified. -whitebind\nis safer to use in case non-trusted localhost connections are expected\n(like hidden services).",
      "tree": {
        "sha": "5ccbf11f0aec355fe115a606bb370125bb631d98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ccbf11f0aec355fe115a606bb370125bb631d98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc942e6f276b9fabc21f06d11cd16871d4054f82",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc942e6f276b9fabc21f06d11cd16871d4054f82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc942e6f276b9fabc21f06d11cd16871d4054f82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc942e6f276b9fabc21f06d11cd16871d4054f82/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3330b40a599615f15f585166ef08f00d06e9616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3330b40a599615f15f585166ef08f00d06e9616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3330b40a599615f15f585166ef08f00d06e9616"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 99,
      "deletions": 28
    },
    "files": [
      {
        "sha": "ecc42e12b199a7131073588613df545d0075bf3b",
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -10,7 +10,7 @@ touch \"$DATADIR/regtest/debug.log\"\n tail -q -n 1 -F \"$DATADIR/regtest/debug.log\" | grep -m 1 -q \"Done loading\" &\n WAITER=$!\n PORT=`expr $BASHPID + 10000`\n-\"@abs_top_builddir@/src/bitcoind@EXEEXT@\" -connect=0.0.0.0 -datadir=\"$DATADIR\" -rpcuser=user -rpcpassword=pass -listen -keypool=3 -debug -debug=net -logtimestamps -port=$PORT -regtest -rpcport=`expr $PORT + 1` &\n+\"@abs_top_builddir@/src/bitcoind@EXEEXT@\" -connect=0.0.0.0 -datadir=\"$DATADIR\" -rpcuser=user -rpcpassword=pass -listen -keypool=3 -debug -debug=net -logtimestamps -port=$PORT -whitelist=127.0.0.1 -regtest -rpcport=`expr $PORT + 1` &\n BITCOIND=$!\n \n #Install a watchdog."
      },
      {
        "sha": "492070cbd901231dd591b767f2d8d1b3cbd5bef5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -58,7 +58,8 @@ CWallet* pwalletMain;\n enum BindFlags {\n     BF_NONE         = 0,\n     BF_EXPLICIT     = (1U << 0),\n-    BF_REPORT_ERROR = (1U << 1)\n+    BF_REPORT_ERROR = (1U << 1),\n+    BF_WHITELIST    = (1U << 2),\n };\n \n static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n@@ -192,7 +193,7 @@ bool static Bind(const CService &addr, unsigned int flags) {\n     if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n     std::string strError;\n-    if (!BindListenPort(addr, strError)) {\n+    if (!BindListenPort(addr, strError, flags & BF_WHITELIST)) {\n         if (flags & BF_REPORT_ERROR)\n             return InitError(strError);\n         return false;\n@@ -253,6 +254,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 0)\") + \"\\n\";\n #endif\n #endif\n+    strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n+    strUsage += \"  -whitelist=<netmask>   \" + _(\"Whitelist peers connecting from the given netmask or ip. Can be specified multiple times.\") + \"\\n\";\n \n #ifdef ENABLE_WALLET\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n@@ -504,11 +507,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 2: parameter interactions\n \n-    if (mapArgs.count(\"-bind\")) {\n+    if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n         // when specifying an explicit binding address, you want to listen on it\n         // even when -connect or -proxy is specified\n         if (SoftSetBoolArg(\"-listen\", true))\n-            LogPrintf(\"AppInit2 : parameter interaction: -bind set -> setting -listen=1\\n\");\n+            LogPrintf(\"AppInit2 : parameter interaction: -bind or -whitebind set -> setting -listen=1\\n\");\n     }\n \n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n@@ -552,7 +555,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     // Make sure enough file descriptors are available\n-    int nBind = std::max((int)mapArgs.count(\"-bind\"), 1);\n+    int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     nMaxConnections = GetArg(\"-maxconnections\", 125);\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n     int nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS);\n@@ -769,6 +772,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n         }\n     }\n \n+    if (mapArgs.count(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, mapMultiArgs[\"-whitelist\"]) {\n+            CSubNet subnet(net);\n+            if (!subnet.IsValid())\n+                return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n+            CNode::AddWhitelistedRange(subnet);\n+        }\n+    }\n+\n     CService addrProxy;\n     bool fProxy = false;\n     if (mapArgs.count(\"-proxy\")) {\n@@ -805,13 +817,21 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     bool fBound = false;\n     if (fListen) {\n-        if (mapArgs.count(\"-bind\")) {\n+        if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n             BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-bind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(strprintf(_(\"Cannot resolve -bind address: '%s'\"), strBind));\n                 fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n+            BOOST_FOREACH(std::string strBind, mapMultiArgs[\"-whitebind\"]) {\n+                CService addrBind;\n+                if (!Lookup(strBind.c_str(), addrBind, 0, false))\n+                    return InitError(strprintf(_(\"Cannot resolve -whitebind address: '%s'\"), strBind));\n+                if (addrBind.GetPort() == 0)\n+                    return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n+                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+            }\n         }\n         else {\n             struct in_addr inaddr_any;"
      },
      {
        "sha": "8c119507e64b092696f3dbdd17cda897bd37e571",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -210,7 +210,7 @@ struct CBlockReject {\n struct CNodeState {\n     // Accumulated misbehaviour score for this peer.\n     int nMisbehavior;\n-    // Whether this peer should be disconnected and banned.\n+    // Whether this peer should be disconnected and banned (unless whitelisted).\n     bool fShouldBan;\n     // String name of this peer (debugging/logging purposes).\n     std::string name;\n@@ -1425,7 +1425,8 @@ void Misbehaving(NodeId pnode, int howmuch)\n         return;\n \n     state->nMisbehavior += howmuch;\n-    if (state->nMisbehavior >= GetArg(\"-banscore\", 100))\n+    int banscore = GetArg(\"-banscore\", 100);\n+    if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n         LogPrintf(\"Misbehaving: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n         state->fShouldBan = true;\n@@ -3947,6 +3948,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(MAX_ORPHAN_TRANSACTIONS);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+        } else if (pfrom->fWhitelisted) {\n+            // Always relay transactions received from whitelisted peers, even\n+            // if they are already in the mempool (allowing the node to function\n+            // as a gateway for nodes hidden behind it).\n+            RelayTransaction(tx);\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n@@ -4440,11 +4446,14 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n \n         CNodeState &state = *State(pto->GetId());\n         if (state.fShouldBan) {\n-            if (pto->addr.IsLocal())\n-                LogPrintf(\"Warning: not banning local node %s!\\n\", pto->addr.ToString());\n+            if (pto->fWhitelisted)\n+                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n             else {\n                 pto->fDisconnect = true;\n-                CNode::Ban(pto->addr);\n+                if (pto->addr.IsLocal())\n+                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n+                else\n+                    CNode::Ban(pto->addr);\n             }\n             state.fShouldBan = false;\n         }"
      },
      {
        "sha": "6a6d9df6af5cef9548b6c4949957ccebd135841f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 15,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -50,7 +50,16 @@\n using namespace std;\n using namespace boost;\n \n-static const int MAX_OUTBOUND_CONNECTIONS = 8;\n+namespace {\n+    const int MAX_OUTBOUND_CONNECTIONS = 8;\n+\n+    struct ListenSocket {\n+        SOCKET socket;\n+        bool whitelisted;\n+\n+        ListenSocket(SOCKET socket, bool whitelisted) : socket(socket), whitelisted(whitelisted) {}\n+    };\n+}\n \n //\n // Global state variables\n@@ -65,7 +74,7 @@ static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n static CNode* pnodeSync = NULL;\n uint64_t nLocalHostNonce = 0;\n-static std::vector<SOCKET> vhListenSocket;\n+static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n \n@@ -593,6 +602,24 @@ bool CNode::Ban(const CNetAddr &addr) {\n     return true;\n }\n \n+\n+std::vector<CSubNet> CNode::vWhitelistedRange;\n+CCriticalSection CNode::cs_vWhitelistedRange;\n+\n+bool CNode::IsWhitelistedRange(const CNetAddr &addr) {\n+    LOCK(cs_vWhitelistedRange);\n+    BOOST_FOREACH(const CSubNet& subnet, vWhitelistedRange) {\n+        if (subnet.Match(addr))\n+            return true;\n+    }\n+    return false;\n+}\n+\n+void CNode::AddWhitelistedRange(const CSubNet &subnet) {\n+    LOCK(cs_vWhitelistedRange);\n+    vWhitelistedRange.push_back(subnet);\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n@@ -609,6 +636,7 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nStartingHeight);\n     X(nSendBytes);\n     X(nRecvBytes);\n+    X(fWhitelisted);\n     stats.fSyncNode = (this == pnodeSync);\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -848,9 +876,9 @@ void ThreadSocketHandler()\n         SOCKET hSocketMax = 0;\n         bool have_fds = false;\n \n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket) {\n-            FD_SET(hListenSocket, &fdsetRecv);\n-            hSocketMax = max(hSocketMax, hListenSocket);\n+        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket) {\n+            FD_SET(hListenSocket.socket, &fdsetRecv);\n+            hSocketMax = max(hSocketMax, hListenSocket.socket);\n             have_fds = true;\n         }\n \n@@ -917,20 +945,21 @@ void ThreadSocketHandler()\n         //\n         // Accept new connections\n         //\n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n+        BOOST_FOREACH(const ListenSocket& hListenSocket, vhListenSocket)\n         {\n-            if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n+            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n                 struct sockaddr_storage sockaddr;\n                 socklen_t len = sizeof(sockaddr);\n-                SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n+                SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n                 CAddress addr;\n                 int nInbound = 0;\n \n                 if (hSocket != INVALID_SOCKET)\n                     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n                         LogPrintf(\"Warning: Unknown socket family\\n\");\n \n+                bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n                 {\n                     LOCK(cs_vNodes);\n                     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -948,7 +977,7 @@ void ThreadSocketHandler()\n                 {\n                     closesocket(hSocket);\n                 }\n-                else if (CNode::IsBanned(addr))\n+                else if (CNode::IsBanned(addr) && !whitelisted)\n                 {\n                     LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n                     closesocket(hSocket);\n@@ -957,6 +986,7 @@ void ThreadSocketHandler()\n                 {\n                     CNode* pnode = new CNode(hSocket, addr, \"\", true);\n                     pnode->AddRef();\n+                    pnode->fWhitelisted = whitelisted;\n \n                     {\n                         LOCK(cs_vNodes);\n@@ -1580,7 +1610,7 @@ void ThreadMessageHandler()\n \n \n \n-bool BindListenPort(const CService &addrBind, string& strError)\n+bool BindListenPort(const CService &addrBind, string& strError, bool fWhitelisted)\n {\n     strError = \"\";\n     int nOne = 1;\n@@ -1661,9 +1691,9 @@ bool BindListenPort(const CService &addrBind, string& strError)\n         return false;\n     }\n \n-    vhListenSocket.push_back(hListenSocket);\n+    vhListenSocket.push_back(ListenSocket(hListenSocket, fWhitelisted));\n \n-    if (addrBind.IsRoutable() && fDiscover)\n+    if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\n         AddLocal(addrBind, LOCAL_BIND);\n \n     return true;\n@@ -1788,9 +1818,9 @@ class CNetCleanup\n         BOOST_FOREACH(CNode* pnode, vNodes)\n             if (pnode->hSocket != INVALID_SOCKET)\n                 closesocket(pnode->hSocket);\n-        BOOST_FOREACH(SOCKET hListenSocket, vhListenSocket)\n-            if (hListenSocket != INVALID_SOCKET)\n-                if (closesocket(hListenSocket) == SOCKET_ERROR)\n+        BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n+            if (hListenSocket.socket != INVALID_SOCKET)\n+                if (closesocket(hListenSocket.socket) == SOCKET_ERROR)\n                     LogPrintf(\"closesocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n         // clean up some globals (to help leak detection)"
      },
      {
        "sha": "4e42a1eeb27f1d9921853e3c7fb42e24491ad488",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -64,7 +64,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest = NULL);\n bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n-bool BindListenPort(const CService &bindAddr, std::string& strError);\n+bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n void StartNode(boost::thread_group& threadGroup);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n@@ -154,6 +154,7 @@ class CNodeStats\n     uint64_t nSendBytes;\n     uint64_t nRecvBytes;\n     bool fSyncNode;\n+    bool fWhitelisted;\n     double dPingTime;\n     double dPingWait;\n     std::string addrLocal;\n@@ -236,6 +237,7 @@ class CNode\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n+    bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fOneShot;\n     bool fClient;\n     bool fInbound;\n@@ -259,6 +261,11 @@ class CNode\n     static std::map<CNetAddr, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n \n+    // Whitelisted ranges. Any node connecting from these is automatically\n+    // whitelisted (as well as those connecting to whitelisted binds).\n+    static std::vector<CSubNet> vWhitelistedRange;\n+    static CCriticalSection cs_vWhitelistedRange;\n+\n     // Basic fuzz-testing\n     void Fuzz(int nChance); // modifies ssSend\n \n@@ -305,6 +312,7 @@ class CNode\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n         strSubVer = \"\";\n+        fWhitelisted = false;\n         fOneShot = false;\n         fClient = false; // set by version message\n         fInbound = fInboundIn;\n@@ -720,6 +728,9 @@ class CNode\n     static bool Ban(const CNetAddr &ip);\n     void copyStats(CNodeStats &stats);\n \n+    static bool IsWhitelistedRange(const CNetAddr &ip);\n+    static void AddWhitelistedRange(const CSubNet &subnet);\n+\n     // Network stats\n     static void RecordBytesRecv(uint64_t bytes);\n     static void RecordBytesSent(uint64_t bytes);"
      },
      {
        "sha": "680717930b11f07c947cd13ade784df92c119e5d",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc942e6f276b9fabc21f06d11cd16871d4054f82/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=dc942e6f276b9fabc21f06d11cd16871d4054f82",
        "patch": "@@ -137,6 +137,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             obj.push_back(Pair(\"syncheight\", statestats.nSyncHeight));\n         }\n         obj.push_back(Pair(\"syncnode\", stats.fSyncNode));\n+        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n \n         ret.push_back(obj);\n     }"
      }
    ]
  }
]