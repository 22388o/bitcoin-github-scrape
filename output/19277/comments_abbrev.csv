MarcoFalke,2020-06-15 00:58:11,"Why would they be confusing? Replacing `assert` with `Assert` by accident will compile into the same binary. And replacing `Assert` with `assert` will either compile into the same binary or it won't compile at all.\n\nChanged to a macro, thx for the suggestion.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643850722,643850722,
DrahtBot,2020-06-15 05:49:12,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19184 (Overhaul transaction request logic by sipa)\n* #18354 (Use shared pointers only in validation interface by bvbfan)",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643916736,643916736,
ajtowns,2020-06-15 07:27:45,"`Assert()` seems weird to me too; I don't expect it to return a value. `ValidPointer()` or having it convert a `T*` to a `T&` and  using it as `SafeDeref(ptr).member` or similar would make more sense to me.\n\nEither way, might as well replace the remaining two `EnsureChainman()` calls in init.cpp and rpc/blockchain.cpp and remove the function from node/context.h entirely by the looks.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643954120,643954120,
MarcoFalke,2020-06-15 10:37:23,"This used to be called `Ensure()` with a deref built in, but I changed it to `Assert` for the following reason: https://github.com/bitcoin/bitcoin/pull/18923#discussion_r436102933\n\nI am happy to pick either version, as long as reviewers are happy.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644049087,644049087,
MarcoFalke,2020-06-15 10:43:19,"> replace the remaining two ...\n\nDone in the last force push.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644051739,644051739,
ryanofsky,2020-06-15 11:40:54,"For reviewers who think assert is ""weird"" and ""confusing"" and wouldn't ""expect it to return a value,"" I don't see what point you are making. If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing, would you actually guess anything other than ""this is going to assert `ptr` is true, dereference it and pass it to `fun`? If not, what would your guess be?\n\nI like the name `ASSERT` for th",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644077052,644077052,
promag,2020-06-15 11:46:11,I mean confusing not because of return value but because now it's valid to use `ASSERT()` instead of `assert()`.,https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644079404,644079404,
MarcoFalke,2020-06-15 11:49:30,">  it's valid to use ASSERT() instead of assert()\n\nYes, it is valid and should compile to the same binary. (Just like it is fine to replace `(++i)` with `(i++)` and it compiles to the same binary). Is there some obvious risk or downside I am missing?",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644080871,644080871,
promag,2020-06-15 11:54:21,:) no downside. So we could just recommend the new macro for new code? Or add a note for when `assert()` should be used over `ASSERT()`.,https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644083024,644083024,
MarcoFalke,2020-06-15 12:01:30,I think we can leave it to code authors to pick whatever version they like more. There really shouldn't be any difference as long as the code compiles.,https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644086441,644086441,
jonatack,2020-06-15 12:09:54,"> For reviewers who think assert is ""weird"" and ""confusing"" and wouldn't ""expect it to return a value,""\n\nI think it's important to keep scrutiny on the changes, not on the people. ""Tough on the changes, easy on the people."" I've deleted my review.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644093031,644093031,
MarcoFalke,2020-06-15 12:28:35,"> I've deleted my review\n\nI found the review useful and I adjusted the commit based on the review to include motivation for the change (and fix the typo). Sometimes my commit messages are too short (i.e. empty) when they instead could include further background information and motivation for the changes, so at least I found the review helpful.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644102618,644102618,
ryanofsky,2020-06-15 12:42:31,"re: @jonatack https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644093031\n\n> > For reviewers who think assert is ""weird"" and ""confusing"" and wouldn't ""expect it to return a value,""\n> \n> I think it's important to keep scrutiny on the changes, not on the people. ""Tough on the changes, easy on the people."" I've deleted my review.\n\nI'm confused. What did your review say? In my ema",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644111245,644111245,
practicalswift,2020-06-15 13:04:49,Concept ACK: this will help guide static analyzers and thus increase signal-to-noise in reports. And more generally: explicit guarantees are better than implicit guarantees :),https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644122216,644122216,
jonatack,2020-06-15 13:36:46,"Sorry for deleting. I was having an ""I suck"" moment.",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644139766,644139766,
promag,2020-06-15 14:19:30,"Tested ACK fab80fef61ddd4afeff6e497c7e76bffcd05e8a4.\n\nIndeed it's better with macro and templating ninjatsus. Applying\n```diff\n--- a/src/bitcoind.cpp\n+++ b/src/bitcoind.cpp\n@@ -44,6 +44,7 @@ static void WaitForShutdown(NodeContext& node)\n static bool AppInit(int argc, char* argv[])\n {\n     NodeContext node;\n+    Assert(node.chain);\n     node.chain = interfaces::MakeChain(node",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644164047,644164047,
ajtowns,2020-06-15 15:15:18,"> If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing,\n\nWhy would you ever have to guess? I'd think ""ugh, what's going on, assert doesn't work like that"" and look at the source, and conclude ""oh, they're just doing some weird local convention where assert in all caps is slightly different than regular assert"". That's not a showstopper, it's just confusing.\n\nIf I saw `fun(Frob",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644197131,644197131,
ryanofsky,2020-06-15 16:44:22,"> > If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing,\n> \n> Why would you ever have to guess?\n\nThanks, that's kind of my point. You don't have to guess. If you have any question, you can look at the `ASSERT` macro and see that it wraps standard `assert`. But when reading code, people make assumptions about how things work, and when the likely assumptions are wrong, it can b",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644246166,644246166,
MarcoFalke,2020-06-15 22:29:38,"Another reason I like the name `Assert` is that this plays nicely with our long-term goal to have different levels of checks. See https://github.com/bitcoin/bitcoin/issues/4576#issuecomment-49883271 for context. It says: ""I guess we can have two levels, optional and mandatory checks.""\n\nThe thread also mentions the danger of building with NDEBUG, which is forbidden since 9b59e3bda8c137bff885db5",https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644422700,644422700,
ryanofsky,2020-06-15 10:59:42,"In commit ""util: Add Assert identity function"" (faba565dbddc215ef3734b138b673263786fae53)\n\nI don't think this is doing what it's intended to do. It always prints `Assertion 'value' failed.` regardless of what `val` macro argument was passed in, I think defeating the purpose of using a macro.\n\nTo make it actually print the macro argument you could use the stringfication operator # like\n\",https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440095780,440095780,src/util/check.h
MarcoFalke,2020-06-15 11:42:23,"Thanks, fixed",https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440116115,440116115,src/util/check.h
ryanofsky,2020-06-15 12:05:13,"In commit ""util: Add Assert identity function"" (fa6ef701adba1cb48535cac25fd43c742a82e40d)\n\nNote: `decltype(get_pure_r_value(val))` is needed here in case the `val` expression is const, because just `decltype(val)` drops the const and results in an error trying to return a const reference from a lambda effectively declared to return a non-const reference. I think returning decltype(auto) would ",https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440127583,440127583,src/util/check.h
MarcoFalke,2020-06-15 22:30:40,Thanks for the hint. Whoever plays code-golf after we switch to C++17 should consider this.,https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440482580,440482580,src/util/check.h
