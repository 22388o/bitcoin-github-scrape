[
  {
    "sha": "da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTlmMWFjZTVkZTM1ZmY4YTcxMjIwMGE0ZDhmYTVmZjhkYmE0ZGU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-05-02T14:10:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2019-05-02T14:10:19Z"
      },
      "message": "doc: Add historical release notes for 0.18.0\n\nTree-SHA512: f41e87d1c6bf29440ebfe15ea2f92bf96d4c4c041fe598f8e5417113a62684cffb2e54277d9412c0d230f78c7481bcb56374858ffb7d1149c68226b9cb7a5c3e",
      "tree": {
        "sha": "af5fc9dc804d8f318fb95b74511d4a1465686d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af5fc9dc804d8f318fb95b74511d4a1465686d05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlzK+ksACgkQHkrtYphs\n0l0FAwf+MkSZ6UinbvwUmyyp8IwEyb4WHel/6asMg91fbLoQ0He02mzRlb7bHLVB\n7QGfrooeSFzYzOhayqVe/rmQeNNOlrr1gKq9pOppoeQRrI8nDSDHPfAuahL0avFt\nE8tM49/E18XGh0lenTw3VRZ61uLRfSRL+esAMCex1fp+N9ugSAxW4ItmpfkR+mzx\nq1cBfegy74jbljWRrjSUFmJULrhGFE3+EEAl47xoRs1qhF8plO8wintEPi2IdfHs\ncexODoCxWAUGFojCa/FSH7qS3Cp90kQxzeomJB8OBUIZUZBS1DXFx45O4S9ZXrAN\na2ykTx96qNlmnrNfFcUvhFml649L1Q==\n=eGW9\n-----END PGP SIGNATURE-----",
        "payload": "tree af5fc9dc804d8f318fb95b74511d4a1465686d05\nparent c1ba1182eb4303e5ca0759068fed270685c6209f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1556806203 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1556806219 +0200\n\ndoc: Add historical release notes for 0.18.0\n\nTree-SHA512: f41e87d1c6bf29440ebfe15ea2f92bf96d4c4c041fe598f8e5417113a62684cffb2e54277d9412c0d230f78c7481bcb56374858ffb7d1149c68226b9cb7a5c3e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1ba1182eb4303e5ca0759068fed270685c6209f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ba1182eb4303e5ca0759068fed270685c6209f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ba1182eb4303e5ca0759068fed270685c6209f"
      }
    ],
    "stats": {
      "total": 1224,
      "additions": 1224,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3ca7d522430670b52f2a580005e23a5168a8734d",
        "filename": "doc/release-notes/release-notes-0.18.0.md",
        "status": "added",
        "additions": 1224,
        "deletions": 0,
        "changes": 1224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4/doc/release-notes/release-notes-0.18.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4/doc/release-notes/release-notes-0.18.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.18.0.md?ref=da9f1ace5de35ff8a712200a4d8fa5ff8dba4de4",
        "patch": "@@ -0,0 +1,1224 @@\n+Bitcoin Core version 0.18.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.18.0/>\n+\n+This is a new major version release, including new features, various bug\n+fixes and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has\n+completely shut down (which might take a few minutes for older\n+versions), then run the installer (on Windows) or just copy over\n+`/Applications/Bitcoin-Qt` (on Mac) or `bitcoind`/`bitcoin-qt` (on\n+Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database\n+will be converted to a new format, which will take anywhere from a few\n+minutes to half an hour, depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and\n+there is no automatic upgrade code from before version 0.8 to version\n+0.15.0 or later. Upgrading directly from 0.7.x and earlier without\n+redownloading the blockchain is not supported.  However, as usual, old\n+wallet versions are still supported.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is supported and extensively tested on operating systems\n+using the Linux kernel, macOS 10.10+, and Windows 7 and newer. It is not\n+recommended to use Bitcoin Core on unsupported systems.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+as frequently tested on them.\n+\n+From 0.17.0 onwards, macOS <10.10 is no longer supported. 0.17.0 is\n+built using Qt 5.9.x, which doesn't support versions of macOS older than\n+10.10. Additionally, Bitcoin Core does not yet change appearance when\n+macOS \"dark mode\" is activated.\n+\n+In addition to previously-supported CPU platforms, this release's\n+pre-compiled distribution also provides binaries for the RISC-V\n+platform.\n+\n+If you are using the `systemd` unit configuration file located at\n+`contrib/init/bitcoind.service`, it has been changed to use\n+`/var/lib/bitcoind` as the data directory instead of\n+`~bitcoin/.bitcoin`. When switching over to the new configuration file,\n+please make sure that the filesystem on which `/var/lib/bitcoind` will\n+exist has enough space (check using `df -h /var/lib/bitcoind`), and\n+optionally copy over your existing data directory. See the [systemd init\n+file section](#systemd-init-file) for more details.\n+\n+Known issues\n+============\n+\n+Wallet GUI\n+----------\n+\n+For advanced users who have both (1) enabled coin control features, and\n+(2) are using multiple wallets loaded at the same time: The coin control\n+input selection dialog can erroneously retain wrong-wallet state when\n+switching wallets using the dropdown menu. For now, it is recommended\n+not to use coin control features with multiple wallets loaded.\n+\n+Notable changes\n+===============\n+\n+Mining\n+------\n+\n+- Calls to `getblocktemplate` will fail if the segwit rule is not\n+  specified.  Calling `getblocktemplate` without segwit specified is\n+  almost certainly a misconfiguration since doing so results in lower\n+  rewards for the miner.  Failed calls will produce an error message\n+  describing how to enable the segwit rule.\n+\n+Configuration option changes\n+----------------------------\n+\n+- A warning is printed if an unrecognized section name is used in the\n+  configuration file.  Recognized sections are `[test]`, `[main]`, and\n+  `[regtest]`.\n+\n+- Four new options are available for configuring the maximum number of\n+  messages that ZMQ will queue in memory (the \"high water mark\") before\n+  dropping additional messages.  The default value is 1,000, the same as\n+  was used for previous releases.  See the [ZMQ\n+  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/zmq.md#usage)\n+  for details.\n+\n+- The `rpcallowip` option can no longer be used to automatically listen\n+  on all network interfaces.  Instead, the `rpcbind` parameter must be\n+  used to specify the IP addresses to listen on.  Listening for RPC\n+  commands over a public network connection is insecure and should be\n+  disabled, so a warning is now printed if a user selects such a\n+  configuration.  If you need to expose RPC in order to use a tool like\n+  Docker, ensure you only bind RPC to your localhost, e.g. `docker run\n+  [...] -p 127.0.0.1:8332:8332` (this is an extra `:8332` over the\n+  normal Docker port specification).\n+\n+- The `rpcpassword` option now causes a startup error if the password\n+  set in the configuration file contains a hash character (#), as it's\n+  ambiguous whether the hash character is meant for the password or as a\n+  comment.\n+\n+- The `whitelistforcerelay` option is used to relay transactions from\n+  whitelisted peers even when not accepted to the mempool. This option\n+  now defaults to being off, so that changes in policy and\n+  disconnect/ban behavior will not cause a node that is whitelisting\n+  another to be dropped by peers.  Users can still explicitly enable\n+  this behavior with the command line option (and may want to consider\n+  [contacting](https://bitcoincore.org/en/contact/) the Bitcoin Core\n+  project to let us know about their use-case, as this feature could be\n+  deprecated in the future).\n+\n+systemd init file\n+-----------------\n+\n+The systemd init file (`contrib/init/bitcoind.service`) has been changed\n+to use `/var/lib/bitcoind` as the data directory instead of\n+`~bitcoin/.bitcoin`. This change makes Bitcoin Core more consistent with\n+other services, and makes the systemd init config more consistent with\n+existing Upstart and OpenRC configs.\n+\n+The configuration, PID, and data directories are now completely managed\n+by systemd, which will take care of their creation, permissions, etc.\n+See [`systemd.exec(5)`](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RuntimeDirectory=)\n+for more details.\n+\n+When using the provided init files under `contrib/init`, overriding the\n+`datadir` option in `/etc/bitcoin/bitcoin.conf` will have no effect.\n+This is because the command line arguments specified in the init files\n+take precedence over the options specified in\n+`/etc/bitcoin/bitcoin.conf`.\n+\n+\n+Documentation\n+-------------\n+\n+- A new short [document](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n+  about the JSON-RPC interface describes cases where the results of an\n+  RPC might contain inconsistencies between data sourced from different\n+  subsystems, such as wallet state and mempool state.  A note is added\n+  to the [REST interface documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md)\n+  indicating that the same rules apply.\n+\n+- Further information is added to the [JSON-RPC\n+  documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n+  about how to secure this interface.\n+\n+- A new [document](https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md)\n+  about the `bitcoin.conf` file describes how to use it to configure\n+  Bitcoin Core.\n+\n+- A new document introduces Bitcoin Core's BIP174 [Partially-Signed\n+  Bitcoin Transactions\n+  (PSBT)](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md)\n+  interface, which is used to allow multiple programs to collaboratively\n+  work to create, sign, and broadcast new transactions.  This is useful\n+  for offline (cold storage) wallets, multisig wallets, coinjoin\n+  implementations, and many other cases where two or more programs need\n+  to interact to generate a complete transaction.\n+\n+- The [output script\n+  descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)\n+  documentation has been updated with information about new features in\n+  this still-developing language for describing the output scripts that\n+  a wallet or other program wants to receive notifications for, such as\n+  which addresses it wants to know received payments.  The language is\n+  currently used in multiple new and updated RPCs described in these\n+  release notes and is expected to be adapted to other RPCs and to the\n+  underlying wallet structure.\n+\n+Build system changes\n+--------------------\n+\n+- A new `--disable-bip70` option may be passed to `./configure` to\n+  prevent Bitcoin-Qt from being built with support for the BIP70 payment\n+  protocol or from linking libssl.  As the payment protocol has exposed\n+  Bitcoin Core to libssl vulnerabilities in the past, builders who don't\n+  need BIP70 support are encouraged to use this option to reduce their\n+  exposure to future vulnerabilities.\n+\n+- The minimum required version of Qt (when building the GUI) has been\n+  increased from 5.2 to 5.5.1 (the [depends\n+  system](https://github.com/bitcoin/bitcoin/blob/master/depends/README.md)\n+  provides 5.9.7)\n+\n+New RPCs\n+--------\n+\n+- `getnodeaddresses` returns peer addresses known to this node. It may\n+  be used to find nodes to connect to without using a DNS seeder.\n+\n+- `listwalletdir` returns a list of wallets in the wallet directory\n+  (either the default wallet directory or the directory configured by\n+  the `-walletdir` parameter).\n+\n+- `getrpcinfo` returns runtime details of the RPC server. At the moment,\n+  it returns an array of the currently active commands and how long\n+  they've been running.\n+\n+- `deriveaddresses` returns one or more addresses corresponding to an\n+  [output descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md).\n+\n+- `getdescriptorinfo` accepts a descriptor and returns information about\n+  it, including its computed checksum.\n+\n+- `joinpsbts` merges multiple distinct PSBTs into a single PSBT. The\n+  multiple PSBTs must have different inputs. The resulting PSBT will\n+  contain every input and output from all of the PSBTs. Any signatures\n+  provided in any of the PSBTs will be dropped.\n+\n+- `analyzepsbt` examines a PSBT and provides information about what\n+  the PSBT contains and the next steps that need to be taken in order\n+  to complete the transaction. For each input of a PSBT, `analyzepsbt`\n+  provides information about what information is missing for that\n+  input, including whether a UTXO needs to be provided, what pubkeys\n+  still need to be provided, which scripts need to be provided, and\n+  what signatures are still needed. Every input will also list which\n+  role is needed to complete that input, and `analyzepsbt` will also\n+  list the next role in general needed to complete the PSBT.\n+  `analyzepsbt` will also provide the estimated fee rate and estimated\n+  virtual size of the completed transaction if it has enough\n+  information to do so.\n+\n+- `utxoupdatepsbt` searches the set of Unspent Transaction Outputs\n+  (UTXOs) to find the outputs being spent by the partial transaction.\n+  PSBTs need to have the UTXOs being spent to be provided because\n+  the signing algorithm requires information from the UTXO being spent.\n+  For segwit inputs, only the UTXO itself is necessary.  For\n+  non-segwit outputs, the entire previous transaction is needed so\n+  that signers can be sure that they are signing the correct thing.\n+  Unfortunately, because the UTXO set only contains UTXOs and not full\n+  transactions, `utxoupdatepsbt` will only add the UTXO for segwit\n+  inputs.\n+\n+Updated RPCs\n+------------\n+\n+Note: some low-level RPC changes mainly useful for testing are described\n+in the Low-level Changes section below.\n+\n+- `getpeerinfo` now returns an additional `minfeefilter` field set to\n+  the peer's BIP133 fee filter.  You can use this to detect that you\n+  have peers that are willing to accept transactions below the default\n+  minimum relay fee.\n+\n+- The mempool RPCs, such as `getrawmempool` with `verbose=true`, now\n+  return an additional \"bip125-replaceable\" value indicating whether the\n+  transaction (or its unconfirmed ancestors) opts-in to asking nodes and\n+  miners to replace it with a higher-feerate transaction spending any of\n+  the same inputs.\n+\n+- `settxfee` previously silently ignored attempts to set the fee below\n+  the allowed minimums.  It now prints a warning.  The special value of\n+  \"0\" may still be used to request the minimum value.\n+\n+- `getaddressinfo` now provides an `ischange` field indicating whether\n+  the wallet used the address in a change output.\n+\n+- `importmulti` has been updated to support P2WSH, P2WPKH, P2SH-P2WPKH,\n+  and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept an additional\n+  `witnessscript` parameter.\n+\n+- `importmulti` now returns an additional `warnings` field for each\n+  request with an array of strings explaining when fields are being\n+  ignored or are inconsistent, if there are any.\n+\n+- `getaddressinfo` now returns an additional `solvable` boolean field\n+  when Bitcoin Core knows enough about the address's scriptPubKey,\n+  optional redeemScript, and optional witnessScript in order for the\n+  wallet to be able to generate an unsigned input spending funds sent to\n+  that address.\n+\n+- The `getaddressinfo`, `listunspent`, and `scantxoutset` RPCs now\n+  return an additional `desc` field that contains an output descriptor\n+  containing all key paths and signing information for the address\n+  (except for the private key).  The `desc` field is only returned for\n+  `getaddressinfo` and `listunspent` when the address is solvable.\n+\n+- `importprivkey` will preserve previously-set labels for addresses or\n+  public keys corresponding to the private key being imported.  For\n+  example, if you imported a watch-only address with the label \"cold\n+  wallet\" in earlier releases of Bitcoin Core, subsequently importing\n+  the private key would default to resetting the address's label to the\n+  default empty-string label (\"\").  In this release, the previous label\n+  of \"cold wallet\" will be retained.  If you optionally specify any\n+  label besides the default when calling `importprivkey`, the new label\n+  will be applied to the address.\n+\n+- See the [Mining](#mining) section for changes to `getblocktemplate`.\n+\n+- `getmininginfo` now omits `currentblockweight` and `currentblocktx`\n+  when a block was never assembled via RPC on this node.\n+\n+- The `getrawtransaction` RPC & REST endpoints no longer check the\n+  unspent UTXO set for a transaction. The remaining behaviors are as\n+  follows: 1. If a blockhash is provided, check the corresponding block.\n+  2. If no blockhash is provided, check the mempool. 3. If no blockhash\n+  is provided but txindex is enabled, also check txindex.\n+\n+- `unloadwallet` is now synchronous, meaning it will not return until\n+  the wallet is fully unloaded.\n+\n+- `importmulti` now supports importing of addresses from descriptors. A\n+  \"desc\" parameter can be provided instead of the \"scriptPubKey\" in a\n+  request, as well as an optional range for ranged descriptors to\n+  specify the start and end of the range to import. Descriptors with key\n+  origin information imported through `importmulti` will have their key\n+  origin information stored in the wallet for use with creating PSBTs.\n+  More information about descriptors can be found\n+  [here](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md).\n+\n+- `listunspent` has been modified so that it also returns\n+  `witnessScript`, the witness script in the case of a P2WSH or\n+  P2SH-P2WSH output.\n+\n+- `createwallet` now has an optional `blank` argument that can be used\n+  to create a blank wallet. Blank wallets do not have any keys or HD\n+  seed.  They cannot be opened in software older than 0.18. Once a blank\n+  wallet has a HD seed set (by using `sethdseed`) or private keys,\n+  scripts, addresses, and other watch only things have been imported,\n+  the wallet is no longer blank and can be opened in 0.17.x. Encrypting\n+  a blank wallet will also set a HD seed for it.\n+\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- `signrawtransaction` is removed after being deprecated and hidden\n+  behind a special configuration option in version 0.17.0.\n+\n+- The 'account' API is removed after being deprecated in v0.17.  The\n+  'label' API was introduced in v0.17 as a replacement for accounts.\n+  See the [release notes from\n+  v0.17](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md#label-and-account-apis-for-wallet)\n+  for a full description of the changes from the 'account' API to the\n+  'label' API.\n+\n+- `addwitnessaddress` is removed after being deprecated in version\n+  0.16.0.\n+\n+- `generate` is deprecated and will be fully removed in a subsequent\n+  major version.  This RPC is only used for testing, but its\n+  implementation reached across multiple subsystems (wallet and mining),\n+  so it is being deprecated to simplify the wallet-node interface.\n+  Projects that are using `generate` for testing purposes should\n+  transition to using the `generatetoaddress` RPC, which does not\n+  require or use the wallet component. Calling `generatetoaddress` with\n+  an address returned by the `getnewaddress` RPC gives the same\n+  functionality as the old `generate` RPC.  To continue using `generate`\n+  in this version, restart bitcoind with the `-deprecatedrpc=generate`\n+  configuration option.\n+\n+- Be reminded that parts of the `validateaddress` command have been\n+  deprecated and moved to `getaddressinfo`. The following deprecated\n+  fields have moved to `getaddressinfo`: `ismine`, `iswatchonly`,\n+  `script`, `hex`, `pubkeys`, `sigsrequired`, `pubkey`, `embedded`,\n+  `iscompressed`, `label`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+\n+- The `addresses` field has been removed from the `validateaddress`\n+  and `getaddressinfo` RPC methods.  This field was confusing since\n+  it referred to public keys using their P2PKH address.  Clients\n+  should use the `embedded.address` field for P2SH or P2WSH wrapped\n+  addresses, and `pubkeys` for inspecting multisig participants.\n+\n+REST changes\n+------------\n+\n+- A new `/rest/blockhashbyheight/` endpoint is added for fetching the\n+  hash of the block in the current best blockchain based on its height\n+  (how many blocks it is after the Genesis Block).\n+\n+Graphical User Interface (GUI)\n+------------------------------\n+\n+- A new Window menu is added alongside the existing File, Settings, and\n+  Help menus.  Several items from the other menus that opened new\n+  windows have been moved to this new Window menu.\n+\n+- In the Send tab, the checkbox for \"pay only the required fee\" has been\n+  removed.  Instead, the user can simply decrease the value in the\n+  Custom Feerate field all the way down to the node's configured minimum\n+  relay fee.\n+\n+- In the Overview tab, the watch-only balance will be the only balance\n+  shown if the wallet was created using the `createwallet` RPC and the\n+  `disable_private_keys` parameter was set to true.\n+\n+- The launch-on-startup option is no longer available on macOS if\n+  compiled with macosx min version greater than 10.11 (use\n+  CXXFLAGS=\"-mmacosx-version-min=10.11\"\n+  CFLAGS=\"-mmacosx-version-min=10.11\" for setting the deployment sdk\n+  version)\n+\n+Tools\n+-----\n+\n+- A new `bitcoin-wallet` tool is now distributed alongside Bitcoin\n+  Core's other executables.  Without needing to use any RPCs, this tool\n+  can currently create a new wallet file or display some basic\n+  information about an existing wallet, such as whether the wallet is\n+  encrypted, whether it uses an HD seed, how many transactions it\n+  contains, and how many address book entries it has.\n+\n+Planned changes\n+===============\n+\n+This section describes planned changes to Bitcoin Core that may affect\n+other Bitcoin software and services.\n+\n+- Since version 0.16.0, Bitcoin Core\u2019s built-in wallet has defaulted to\n+  generating P2SH-wrapped segwit addresses when users want to receive\n+  payments. These addresses are backwards compatible with all\n+  widely-used software.  Starting with Bitcoin Core 0.20 (expected about\n+  a year after 0.18), Bitcoin Core will default to native segwit\n+  addresses (bech32) that provide additional fee savings and other\n+  benefits. Currently, many wallets and services already support sending\n+  to bech32 addresses, and if the Bitcoin Core project sees enough\n+  additional adoption, it will instead default to bech32 receiving\n+  addresses in Bitcoin Core 0.19 (approximately November 2019).\n+  P2SH-wrapped segwit addresses will continue to be provided if the user\n+  requests them in the GUI or by RPC, and anyone who doesn\u2019t want the\n+  update will be able to configure their default address type.\n+  (Similarly, pioneering users who want to change their default now may\n+  set the `addresstype=bech32` configuration option in any Bitcoin Core\n+  release from 0.16.0 up.)\n+\n+Deprecated P2P messages\n+-----------------------\n+\n+- BIP 61 reject messages are now deprecated. Reject messages have no use\n+  case on the P2P network and are only logged for debugging by most\n+  network nodes. Furthermore, they increase bandwidth and can be harmful\n+  for privacy and security. It has been possible to disable BIP 61\n+  messages since v0.17 with the `-enablebip61=0` option. BIP 61 messages\n+  will be disabled by default in a future version, before being removed\n+  entirely.\n+\n+Low-level changes\n+=================\n+\n+This section describes RPC changes mainly useful for testing, mostly not\n+relevant in production. The changes are mentioned for completeness.\n+\n+RPC\n+---\n+\n+- The `submitblock` RPC previously returned the reason a rejected block\n+  was invalid the first time it processed that block, but returned a\n+  generic \"duplicate\" rejection message on subsequent occasions it\n+  processed the same block.  It now always returns the fundamental\n+  reason for rejecting an invalid block and only returns \"duplicate\" for\n+  valid blocks it has already accepted.\n+\n+- A new `submitheader` RPC allows submitting block headers independently\n+  from their block.  This is likely only useful for testing.\n+\n+- The `signrawtransactionwithkey` and `signrawtransactionwithwallet`\n+  RPCs have been modified so that they also optionally accept a\n+  `witnessScript`, the witness script in the case of a P2WSH or\n+  P2SH-P2WSH output. This is compatible with the change to\n+  `listunspent`.\n+\n+- For the `walletprocesspsbt` and `walletcreatefundedpsbt` RPCs, if the\n+  `bip32derivs` parameter is set to true but the key metadata for a\n+  public key has not been updated yet, then that key will have a\n+  derivation path as if it were just an independent key (i.e. no\n+  derivation path and its master fingerprint is itself).\n+\n+Configuration\n+-------------\n+\n+- The `-usehd` configuration option was removed in version 0.16. From\n+  that version onwards, all new wallets created are hierarchical\n+  deterministic wallets. This release makes specifying `-usehd` an\n+  invalid configuration option.\n+\n+Network\n+-------\n+\n+- This release allows peers that your node automatically disconnected\n+  for misbehavior (e.g. sending invalid data) to reconnect to your node\n+  if you have unused incoming connection slots.  If your slots fill up,\n+  a misbehaving node will be disconnected to make room for nodes without\n+  a history of problems (unless the misbehaving node helps your node in\n+  some other way, such as by connecting to a part of the Internet from\n+  which you don't have many other peers).  Previously, Bitcoin Core\n+  banned the IP addresses of misbehaving peers for a period of time\n+  (default of 1 day); this was easily circumvented by attackers with\n+  multiple IP addresses. If you manually ban a peer, such as by using\n+  the `setban` RPC, all connections from that peer will still be\n+  rejected.\n+\n+Wallet\n+-------\n+\n+- The key metadata will need to be upgraded the first time that the HD\n+  seed is available.  For unencrypted wallets this will occur on wallet\n+  loading.  For encrypted wallets this will occur the first time the\n+  wallet is unlocked.\n+\n+- Newly encrypted wallets will no longer require restarting the\n+  software. Instead such wallets will be completely unloaded and\n+  reloaded to achieve the same effect.\n+\n+- A sub-project of Bitcoin Core now provides Hardware Wallet Interaction\n+  (HWI) scripts that allow command-line users to use several popular\n+  hardware key management devices with Bitcoin Core.  See their [project\n+  page](https://github.com/bitcoin-core/HWI#readme) for details.\n+\n+Security\n+--------\n+\n+- This release changes the Random Number Generator (RNG) used from\n+  OpenSSL to Bitcoin Core's own implementation, although entropy\n+  gathered by Bitcoin Core is fed out to OpenSSL and then read back in\n+  when the program needs strong randomness. This moves Bitcoin Core a\n+  little closer to no longer needing to depend on OpenSSL, a dependency\n+  that has caused security issues in the past.  The new implementation\n+  gathers entropy from multiple sources, including from hardware\n+  supporting the rdseed CPU instruction.\n+\n+Changes for particular platforms\n+--------------------------------\n+\n+- On macOS, Bitcoin Core now opts out of application CPU throttling\n+  (\"app nap\") during initial blockchain download, when catching up from\n+  over 100 blocks behind the current chain tip, or when reindexing chain\n+  data. This helps prevent these operations from taking an excessively\n+  long time because the operating system is attempting to conserve\n+  power.\n+\n+0.18.0 change log\n+=================\n+\n+### Consensus\n+- #14247 Fix crash bug with duplicate inputs within a transaction (TheBlueMatt)\n+\n+### Mining\n+- #14811 Mining: Enforce that segwit option must be set in GBT (jnewbery)\n+\n+### Block and transaction handling\n+- #13310 Report progress in ReplayBlocks while rolling forward (promag)\n+- #13783 validation: Pass tx pool reference into CheckSequenceLocks (MarcoFalke)\n+- #14834 validation: Assert that pindexPrev is non-null when required (kallewoof)\n+- #14085 index: Fix for indexers skipping genesis block (jimpo)\n+- #14963 mempool, validation: Explain `cs_main` locking semantics (MarcoFalke)\n+- #15193 Default `-whitelistforcerelay` to off (sdaftuar)\n+- #15429 Update `assumevalid`, `minimumchainwork`, and `getchaintxstats` to height 563378 (gmaxwell)\n+- #15552 Granular invalidateblock and RewindBlockIndex (MarcoFalke)\n+- #14841 Move CheckBlock() call to critical section (hebasto)\n+\n+### P2P protocol and network code\n+- #14025 Remove dead code for nVersion=10300 (MarcoFalke)\n+- #12254 BIP 158: Compact Block Filters for Light Clients (jimpo)\n+- #14073 blockfilter: Avoid out-of-bounds script access (jimpo)\n+- #14140 Switch nPrevNodeCount to vNodesSize (pstratem)\n+- #14027 Skip stale tip checking if outbound connections are off or if reindexing (gmaxwell)\n+- #14532 Never bind `INADDR_ANY` by default, and warn when doing so explicitly (luke-jr)\n+- #14733 Make peer timeout configurable, speed up very slow test and ensure correct code path tested (zallarak)\n+- #14336 Implement poll (pstratem)\n+- #15051 IsReachable is the inverse of IsLimited (DRY). Includes unit tests (mmachicao)\n+- #15138 Drop IsLimited in favor of IsReachable (Empact)\n+- #14605 Return of the Banman (dongcarl)\n+- #14970 Add dnsseed.emzy.de to DNS seeds (Emzy)\n+- #14929 Allow connections from misbehavior banned peers (gmaxwell)\n+- #15345 Correct comparison of addr count (dongcarl)\n+- #15201 Add missing locking annotation for vNodes. vNodes is guarded by cs_vNodes (practicalswift)\n+- #14626 Select orphan transaction uniformly for eviction (sipa)\n+- #15486 Ensure tried collisions resolve, and allow feeler connections to existing outbound netgroups (sdaftuar)\n+\n+### Wallet\n+- #13962 Remove unused `dummy_tx` variable from FillPSBT (dongcarl)\n+- #13967 Don't report `minversion` wallet entry as unknown (instagibbs)\n+- #13988 Add checks for settxfee reasonableness (ajtowns)\n+- #12559 Avoid locking `cs_main` in some wallet RPC (promag)\n+- #13631 Add CMerkleTx::IsImmatureCoinBase method (Empact)\n+- #14023 Remove accounts RPCs (jnewbery)\n+- #13825 Kill accounts (jnewbery)\n+- #10605 Add AssertLockHeld assertions in CWallet::ListCoins (ryanofsky)\n+- #12490 Remove deprecated wallet rpc features from `bitcoin_server` (jnewbery)\n+- #14138 Set `encrypted_batch` to nullptr after delete. Avoid double free in the case of NDEBUG (practicalswift)\n+- #14168 Remove `ENABLE_WALLET` from `libbitcoin_server.a` (jnewbery)\n+- #12493 Reopen CDBEnv after encryption instead of shutting down (achow101)\n+- #14282 Remove `-usehd` option (jnewbery)\n+- #14146 Remove trailing separators from `-walletdir` arg (PierreRochard)\n+- #14291 Add ListWalletDir utility function (promag)\n+- #14468 Deprecate `generate` RPC method (jnewbery)\n+- #11634 Add missing `cs_wallet`/`cs_KeyStore` locks to wallet (practicalswift)\n+- #14296 Remove `addwitnessaddress` (jnewbery)\n+- #14451 Add BIP70 deprecation warning and allow building GUI without BIP70 support (jameshilliard)\n+- #14320 Fix duplicate fileid detection (ken2812221)\n+- #14561 Remove `fs::relative` call and fix listwalletdir tests (promag)\n+- #14454 Add SegWit support to importmulti (MeshCollider)\n+- #14410 rpcwallet: `ischange` field for `getaddressinfo` RPC (mrwhythat)\n+- #14350 Add WalletLocation class (promag)\n+- #14689 Require a public key to be retrieved when signing a P2PKH input (achow101)\n+- #14478 Show error to user when corrupt wallet unlock fails (MeshCollider)\n+- #14411 Restore ability to list incoming transactions by label (ryanofsky)\n+- #14552 Detect duplicate wallet by comparing the db filename (ken2812221)\n+- #14678 Remove redundant KeyOriginInfo access, already done in CreateSig (instagibbs)\n+- #14477 Add ability to convert solvability info to descriptor (sipa)\n+- #14380 Fix assert crash when specified change output spend size is unknown (instagibbs)\n+- #14760 Log env path in `BerkeleyEnvironment::Flush` (promag)\n+- #14646 Add expansion cache functions to descriptors (unused for now) (sipa)\n+- #13076 Fix ScanForWalletTransactions to return an enum indicating scan result: `success` / `failure` / `user_abort` (Empact)\n+- #14821 Replace CAffectedKeysVisitor with descriptor based logic (sipa)\n+- #14957 Initialize `stop_block` in CWallet::ScanForWalletTransactions (Empact)\n+- #14565 Overhaul `importmulti` logic (sipa)\n+- #15039 Avoid leaking nLockTime fingerprint when anti-fee-sniping (MarcoFalke)\n+- #14268 Introduce SafeDbt to handle Dbt with free or `memory_cleanse` raii-style (Empact)\n+- #14711 Remove uses of chainActive and mapBlockIndex in wallet code (ryanofsky)\n+- #15279 Clarify rescanblockchain doc (MarcoFalke)\n+- #15292 Remove `boost::optional`-related false positive -Wmaybe-uninitialized warnings on GCC compiler (hebasto)\n+- #13926 [Tools] bitcoin-wallet - a tool for creating and managing wallets offline (jnewbery)\n+- #11911 Free BerkeleyEnvironment instances when not in use (ryanofsky)\n+- #15235 Do not import private keys to wallets with private keys disabled (achow101)\n+- #15263 Descriptor expansions only need pubkey entries for PKH/WPKH (sipa)\n+- #15322 Add missing `cs_db` lock (promag)\n+- #15297 Releases dangling files on `BerkeleyEnvironment::Close` (promag)\n+- #14491 Allow descriptor imports with importmulti (MeshCollider)\n+- #15365 Add lock annotation for mapAddressBook (MarcoFalke)\n+- #15226 Allow creating blank (empty) wallets (alternative) (achow101)\n+- #15390 [wallet-tool] Close bdb when flushing wallet (jnewbery)\n+- #15334 Log absolute paths for the wallets (hebasto)\n+- #14978 Factor out PSBT utilities from RPCs for use in GUI code; related refactoring (gwillen)\n+- #14481 Add P2SH-P2WSH support to listunspent RPC (MeshCollider)\n+- #14021 Import key origin data through descriptors in importmulti (achow101)\n+- #14075 Import watch only pubkeys to the keypool if private keys are disabled (achow101)\n+- #15368 Descriptor checksums (sipa)\n+- #15433 Use a single wallet batch for `UpgradeKeyMetadata` (jonasschnelli)\n+- #15408 Remove unused `TransactionError` constants (MarcoFalke)\n+- #15583 Log and ignore errors in ListWalletDir and IsBerkeleyBtree (promag)\n+- #14195 Pass privkey export DER compression flag correctly (fingera)\n+- #15299 Fix assertion in `CKey::SignCompact` (promag)\n+- #14437 Start to separate wallet from node (ryanofsky)\n+- #15749 Fix: importmulti only imports origin info for PKH outputs (sipa)\n+\n+### RPC and other APIs\n+- #12842 Prevent concurrent `savemempool` (promag)\n+- #13987 Report `minfeefilter` value in `getpeerinfo` RPC (ajtowns)\n+- #13891 Remove getinfo deprecation warning (jnewbery)\n+- #13399 Add `submitheader` (MarcoFalke)\n+- #12676 Show `bip125-replaceable` flag, when retrieving mempool entries (dexX7)\n+- #13723 PSBT key path cleanups (sipa)\n+- #14008 Preserve a format of RPC command definitions (kostyantyn)\n+- #9332 Let wallet `importmulti` RPC accept labels for standard scriptPubKeys (ryanofsky)\n+- #13983 Return more specific reject reason for submitblock (MarcoFalke)\n+- #13152 Add getnodeaddresses RPC command (chris-belcher)\n+- #14298 rest: Improve performance for JSON calls (alecalve)\n+- #14297 Remove warning for removed estimatefee RPC (jnewbery)\n+- #14373 Consistency fixes for RPC descriptions (ch4ot1c)\n+- #14150 Add key origin support to descriptors (sipa)\n+- #14518 Always throw in getblockstats if `-txindex` is required (promag)\n+- #14060 ZMQ: add options to configure outbound message high water mark, aka SNDHWM (mruddy)\n+- #13381 Add possibility to preserve labels on importprivkey (marcoagner)\n+- #14530 Use `RPCHelpMan` to generate RPC doc strings (MarcoFalke)\n+- #14720 Correctly name RPC arguments (MarcoFalke)\n+- #14726 Use `RPCHelpMan` for all RPCs (MarcoFalke)\n+- #14796 Pass argument descriptions to `RPCHelpMan` (MarcoFalke)\n+- #14670 http: Fix HTTP server shutdown (promag)\n+- #14885 Assert that named arguments are unique in `RPCHelpMan` (promag)\n+- #14877 Document default values for optional arguments (MarcoFalke)\n+- #14875 RPCHelpMan: Support required arguments after optional ones (MarcoFalke)\n+- #14993 Fix data race (UB) in InterruptRPC() (practicalswift)\n+- #14653 rpcwallet: Add missing transaction categories to RPC helptexts (andrewtoth)\n+- #14981 Clarify RPC `getrawtransaction`'s time help text (benthecarman)\n+- #12151 Remove `cs_main` lock from blockToJSON and blockheaderToJSON (promag)\n+- #15078 Document `bytessent_per_msg` and `bytesrecv_per_msg` (MarcoFalke)\n+- #15057 Correct `reconsiderblock `help text, add test (MarcoFalke)\n+- #12153 Avoid permanent `cs_main` lock in `getblockheader` (promag)\n+- #14982 Add `getrpcinfo` command (promag)\n+- #15122 Expand help text for `importmulti` changes (jnewbery)\n+- #15186 remove duplicate solvable field from `getaddressinfo` (fanquake)\n+- #15209 zmq: log outbound message high water mark when reusing socket (fanquake)\n+- #15177 rest: Improve tests and documention of /headers and /block (promag)\n+- #14353 rest: Add blockhash call, fetch blockhash by height (jonasschnelli)\n+- #15248 Compile on GCC4.8 (MarcoFalke)\n+- #14987 RPCHelpMan: Pass through Result and Examples (MarcoFalke)\n+- #15159 Remove lookup to UTXO set from GetTransaction (amitiuttarwar)\n+- #15245 remove deprecated mentions of signrawtransaction from fundraw help (instagibbs)\n+- #14667 Add `deriveaddresses` RPC util method (Sjors)\n+- #15357 Don't ignore `-maxtxfee` when wallet is disabled (JBaczuk)\n+- #15337 Fix for segfault if combinepsbt called with empty inputs (benthecarman)\n+- #14918 RPCHelpMan: Check default values are given at compile-time (MarcoFalke)\n+- #15383 mining: Omit uninitialized currentblockweight, currentblocktx (MarcoFalke)\n+- #13932 Additional utility RPCs for PSBT (achow101)\n+- #15401 Actually throw help when passed invalid number of params (MarcoFalke)\n+- #15471 rpc/gui: Remove 'Unknown block versions being mined' warning (laanwj)\n+- #15497 Consistent range arguments in scantxoutset/importmulti/deriveaddresses (sipa)\n+- #15510 deriveaddresses: add range to CRPCConvertParam (Sjors)\n+- #15582 Fix overflow bug in analyzepsbt fee: CAmount instead of int (sipa)\n+- #13424 Consistently validate txid / blockhash length and encoding in rpc calls (Empact)\n+- #15750 Remove the addresses field from the getaddressinfo return object (jnewbery)\n+\n+### GUI\n+- #13634 Compile `boost::signals2` only once (MarcoFalke)\n+- #13248 Make proxy icon from statusbar clickable (mess110)\n+- #12818 TransactionView: highlight replacement tx after fee bump (Sjors)\n+- #13529 Use new Qt5 connect syntax (promag)\n+- #14162 Also log and print messages or questions like bitcoind (MarcoFalke)\n+- #14385 Avoid system harfbuzz and bz2 (theuni)\n+- #14450 Fix QCompleter popup regression (hebasto)\n+- #14177 Set C locale for amountWidget (hebasto)\n+- #14374 Add `Blocksdir` to Debug window (hebasto)\n+- #14554 Remove unused `adjustedTime` parameter (hebasto)\n+- #14228 Enable system tray icon by default if available (hebasto)\n+- #14608 Remove the \"Pay only required fee\u2026\" checkbox (hebasto)\n+- #14521 qt, docs: Fix `bitcoin-qt -version` output formatting (hebasto)\n+- #13966 When private key is disabled, only show watch-only balance (ken2812221)\n+- #14828 Remove hidden columns in coin control dialog (promag)\n+- #14783 Fix `boost::signals2::no_slots_error` in early calls to InitWarning (promag)\n+- #14854 Cleanup SplashScreen class (hebasto)\n+- #14801 Use window() instead of obsolete topLevelWidget() (hebasto)\n+- #14573 Add Window menu (promag)\n+- #14979 Restore < Qt5.6 compatibility for addAction (jonasschnelli)\n+- #14975 Refactoring with QString::toNSString() (hebasto)\n+- #15000 Fix broken notificator on GNOME (hebasto)\n+- #14375 Correct misleading \"overridden options\" label (hebasto)\n+- #15007 Notificator class refactoring (hebasto)\n+- #14784 Use `WalletModel*` instead of the wallet name as map key (promag)\n+- #11625 Add BitcoinApplication & RPCConsole tests (ryanofsky)\n+- #14517 Fix start with the `-min` option (hebasto)\n+- #13216 implements concept for different disk sizes on intro (marcoagner)\n+- #15114 Replace remaining 0 with nullptr (Empact)\n+- #14594 Fix minimized window bug on Linux (hebasto)\n+- #14556 Fix confirmed transaction labeled \"open\" (#13299) (hebasto)\n+- #15149 Show current wallet name in window title (promag)\n+- #15136 \"Peers\" tab overhaul (hebasto)\n+- #14250 Remove redundant stopThread() and stopExecutor() signals (hebasto)\n+- #15040 Add workaround for QProgressDialog bug on macOS (hebasto)\n+- #15101 Add WalletController (promag)\n+- #15178 Improve \"help-console\" message (hebasto)\n+- #15210 Fix window title update (promag)\n+- #15167 Fix wallet selector size adjustment (hebasto)\n+- #15208 Remove macOS launch-at-startup when compiled with > macOS 10.11, fix memory mismanagement (jonasschnelli)\n+- #15163 Correct units for \"-dbcache\" and \"-prune\" (hebasto)\n+- #15225 Change the receive button to respond to keypool state changing (achow101)\n+- #15280 Fix shutdown order (promag)\n+- #15203 Fix issue #9683 \"gui, wallet: random abort (segmentation fault) (dooglus)\n+- #15091 Fix model overlay header sync (jonasschnelli)\n+- #15153 Add Open Wallet menu (promag)\n+- #15183 Fix `m_assumed_blockchain_size` variable value (marcoagner)\n+- #15063 If BIP70 is disabled, attempt to fall back to BIP21 parsing (luke-jr)\n+- #15195 Add Close Wallet action (promag)\n+- #15462 Fix async open wallet call order (promag)\n+- #15801 Bugfix: GUI: Options: Initialise prune setting range before loading current value, and remove upper bound limit (luke-jr)\n+\n+### Build system\n+- #13955 gitian: Bump descriptors for (0.)18 (fanquake)\n+- #13899 Enable -Wredundant-decls where available. Remove redundant redeclarations (practicalswift)\n+- #13665 Add RISC-V support to gitian (ken2812221)\n+- #14062 Generate MSVC project files via python script (ken2812221)\n+- #14037 Add README.md to linux release tarballs (hebasto)\n+- #14183 Remove unused Qt 4 dependencies (ken2812221)\n+- #14127 Avoid getifaddrs when unavailable (greenaddress)\n+- #14184 Scripts and tools: increased timeout downloading (cisba)\n+- #14204 Move `interfaces/*` to `libbitcoin_server` (laanwj)\n+- #14208 Actually remove `ENABLE_WALLET` (jnewbery)\n+- #14212 Remove libssl from LDADD unless GUI (MarcoFalke)\n+- #13578 Upgrade zeromq to 4.2.5 and avoid deprecated zeromq API functions (mruddy)\n+- #14281 lcov: filter /usr/lib/ from coverage reports (MarcoFalke)\n+- #14325 gitian: Use versioned unsigned tarballs instead of generically named ones (achow101)\n+- #14253 During 'make clean', remove some files that are currently missed (murrayn)\n+- #14455 Unbreak `make clean` (jamesob)\n+- #14495 Warn (don't fail!) on spelling errors (practicalswift)\n+- #14496 Pin to specific versions of Python packages we install from PyPI in Travis (practicalswift)\n+- #14568 Fix Qt link order for Windows build (ken2812221)\n+- #14252 Run functional tests and benchmarks under the undefined behaviour sanitizer (UBSan) (practicalswift)\n+- #14612 Include full version number in released file names (achow101)\n+- #14840 Remove duplicate libconsensus linking in test make (AmirAbrams)\n+- #14564 Adjust configure so that only BIP70 is disabled when protobuf is missing instead of the GUI (jameshilliard)\n+- #14883 Add `--retry 5` to curl opts in `install_db4.sh` (qubenix)\n+- #14701 Add `CLIENT_VERSION_BUILD` to CFBundleGetInfoString (fanquake)\n+- #14849 Qt 5.9.7 (fanquake)\n+- #15020 Add names to Travis jobs (gkrizek)\n+- #15047 Allow to configure --with-sanitizers=fuzzer (MarcoFalke)\n+- #15154 Configure: bitcoin-tx doesn't need libevent, so don't pull it in (luke-jr)\n+- #15175 Drop macports support (Empact)\n+- #15308 Restore compatibility with older boost (Empact)\n+- #15407 msvc: Fix silent merge conflict between #13926 and #14372 part II (ken2812221)\n+- #15388 Makefile.am: add rule for src/bitcoin-wallet (Sjors)\n+- #15393 Bump minimum Qt version to 5.5.1 (Sjors)\n+- #15285 Prefer Python 3.4 even if newer versions are present on the system (Sjors)\n+- #15398 msvc: Add rapidcheck property tests (ken2812221)\n+- #15431 msvc: scripted-diff: Remove NDEBUG pre-define in project file (ken2812221)\n+- #15549 gitian: Improve error handling (laanwj)\n+- #15548 use full version string in setup.exe (MarcoFalke)\n+- #11526 Visual Studio build configuration for Bitcoin Core (sipsorcery)\n+- #15110 build\\_msvc: Fix the build problem in `libbitcoin_server` (Mr-Leshiy)\n+- #14372 msvc: build secp256k1 and leveldb locally (ken2812221)\n+- #15325 msvc: Fix silent merge conflict between #13926 and #14372 (ken2812221)\n+- #15391 Add compile time verification of assumptions we're currently making implicitly/tacitly (practicalswift)\n+- #15503 msvc: Use a single file to specify the include path (ken2812221)\n+- #13765 contrib: Add gitian build support for github pull request (ken2812221)\n+- #15809 gitignore: plist and dat (jamesob)\n+\n+### Tests and QA\n+- #15405 appveyor: Clean cache when build configuration changes (Sjors)\n+- #13953 Fix deprecation in bitcoin-util-test.py (isghe)\n+- #13963 Replace usage of tostring() with tobytes() (dongcarl)\n+- #13964 ci: Add appveyor ci (ken2812221)\n+- #13997 appveyor: fetch the latest port data (ken2812221)\n+- #13707 Add usage note to check-rpc-mappings.py (masonicboom)\n+- #14036 travis: Run unit tests --with-sanitizers=undefined (MarcoFalke)\n+- #13861 Add testing of `value_ret` for SelectCoinsBnB (Empact)\n+- #13863 travis: Move script sections to files in `.travis/` subject to shellcheck (scravy)\n+- #14081 travis: Fix missing differentiation between unit and functional tests (scravy)\n+- #14042 travis: Add cxxflags=-wno-psabi at arm job (ken2812221)\n+- #14051 Make `combine_logs.py` handle multi-line logs (jnewbery)\n+- #14093 Fix accidental trunction from int to bool (practicalswift)\n+- #14108 Add missing locking annotations and locks (`g_cs_orphans`) (practicalswift)\n+- #14088 Don't assert(\u2026) with side effects (practicalswift)\n+- #14086 appveyor: Use clcache to speed up build (ken2812221)\n+- #13954 Warn (don't fail!) on spelling errors. Fix typos reported by codespell (practicalswift)\n+- #12775 Integration of property based testing into Bitcoin Core (Christewart)\n+- #14119 Read reject reasons from debug log, not P2P messages (MarcoFalke)\n+- #14189 Fix silent merge conflict in `wallet_importmulti` (MarcoFalke)\n+- #13419 Speed up `knapsack_solver_test` by not recreating wallet 100 times (lucash-dev)\n+- #14199 Remove redundant BIP174 test from `rpc_psbt.json` (araspitzu)\n+- #14179 Fixups to \"Run all tests even if wallet is not compiled\" (MarcoFalke)\n+- #14225 Reorder tests and move most of extended tests up to normal tests (ken2812221)\n+- #14236 `generate` --> `generatetoaddress` change to allow tests run without wallet (sanket1729)\n+- #14287 Use MakeUnique to construct objects owned by `unique_ptrs` (practicalswift)\n+- #14007 Run functional test on Windows and enable it on Appveyor (ken2812221)\n+- #14275 Write the notification message to different files to avoid race condition in `feature_notifications.py` (ken2812221)\n+- #14306 appveyor: Move AppVeyor YAML to dot-file-style YAML (MitchellCash)\n+- #14305 Enforce critical class instance attributes in functional tests, fix segwit test specificity (JustinTArthur)\n+- #12246 Bugfix: Only run bitcoin-tx tests when bitcoin-tx is enabled (luke-jr)\n+- #14316 Exclude all tests with difference parameters in `--exclude` list (ken2812221)\n+- #14381 Add missing call to `skip_if_no_cli()` (practicalswift)\n+- #14389 travis: Set codespell version to avoid breakage (MarcoFalke)\n+- #14398 Don't access out of bounds array index: array[sizeof(array)] (Empact)\n+- #14419 Remove `rpc_zmq.py` (jnewbery)\n+- #14241 appveyor: Script improvement (ken2812221)\n+- #14413 Allow closed RPC handler in `assert_start_raises_init_error` (ken2812221)\n+- #14324 Run more tests with wallet disabled (MarcoFalke)\n+- #13649 Allow arguments to be forwarded to flake8 in lint-python.sh (jamesob)\n+- #14465 Stop node before removing the notification file (ken2812221)\n+- #14460 Improve 'CAmount' tests (hebasto)\n+- #14456 forward timeouts properly in `send_blocks_and_test` (jamesob)\n+- #14527 Revert \"Make qt wallet test compatible with qt4\" (MarcoFalke)\n+- #14504 Show the progress of functional tests (isghe)\n+- #14559 appveyor: Enable multiwallet tests (ken2812221)\n+- #13515 travis: Enable qt for all jobs (ken2812221)\n+- #14571 Test that nodes respond to `getdata` with `notfound` (MarcoFalke)\n+- #14569 Print dots by default in functional tests (ken2812221)\n+- #14631 Move deterministic address import to `setup_nodes` (jnewbery)\n+- #14630 test: Remove travis specific code (MarcoFalke)\n+- #14528 travis: Compile once on xenial (MarcoFalke)\n+- #14092 Dry run `bench_bitcoin` as part `make check` to allow for quick identification of assertion/sanitizer failures in benchmarking code (practicalswift)\n+- #14664 `example_test.py`: fixup coinbase height argument, derive number clearly (instagibbs)\n+- #14522 Add invalid P2P message tests (jamesob)\n+- #14619 Fix value display name in `test_runner` help text (merland)\n+- #14672 Send fewer spam messages in `p2p_invalid_messages` (jamesob)\n+- #14673 travis: Fail the ubsan travis build in case of newly introduced ubsan errors (practicalswift)\n+- #14665 appveyor: Script improvement part II (ken2812221)\n+- #14365 Add Python dead code linter (vulture) to Travis (practicalswift)\n+- #14693 `test_node`: `get_mem_rss` fixups (MarcoFalke)\n+- #14714 util.h: explicitly include required QString header (1Il1)\n+- #14705 travis: Avoid timeout on verify-commits check (MarcoFalke)\n+- #14770 travis: Do not specify sudo in `.travis` (scravy)\n+- #14719 Check specific reject reasons in `feature_block` (MarcoFalke)\n+- #14771 Add `BOOST_REQUIRE` to getters returning optional (MarcoFalke)\n+- #14777 Add regtest for JSON-RPC batch calls (domob1812)\n+- #14764 travis: Run thread sanitizer on unit tests (MarcoFalke)\n+- #14400 Add Benchmark to test input de-duplication worst case (JeremyRubin)\n+- #14812 Fix `p2p_invalid_messages` on macOS (jamesob)\n+- #14813 Add `wallet_encryption` error tests (MarcoFalke)\n+- #14820 Fix `descriptor_tests` not checking ToString output of public descriptors (ryanofsky)\n+- #14794 Add AddressSanitizer (ASan) Travis build (practicalswift)\n+- #14819 Bugfix: `test/functional/mempool_accept`: Ensure oversize transaction is actually oversize (luke-jr)\n+- #14822 bench: Destroy wallet txs instead of leaking their memory (MarcoFalke)\n+- #14683 Better `combine_logs.py` behavior (jamesob)\n+- #14231 travis: Save cache even when build or test fail (ken2812221)\n+- #14816 Add CScriptNum decode python implementation in functional suite (instagibbs)\n+- #14861 Modify `rpc_bind` to conform to #14532 behaviour (dongcarl)\n+- #14864 Run scripted-diff in subshell (dongcarl)\n+- #14795 Allow `test_runner` command line to receive parameters for each test (marcoagner)\n+- #14788 Possible fix the permission error when the tests open the cookie file (ken2812221)\n+- #14857 `wallet_keypool_topup.py`: Test for all keypool address types (instagibbs)\n+- #14886 Refactor importmulti tests (jnewbery)\n+- #14908 Removed implicit CTransaction constructor calls from tests and benchmarks (lucash-dev)\n+- #14903 Handle ImportError explicitly, improve comparisons against None (daniel-s-ingram)\n+- #14884 travis: Enforce python 3.4 support through linter (Sjors)\n+- #14940 Add test for truncated pushdata script (MarcoFalke)\n+- #14926 consensus: Check that final transactions are valid (MarcoFalke)\n+- #14937 travis: Fix travis would always be green even if it fail (ken2812221)\n+- #14953 Make `g_insecure_rand_ctx` `thread_local` (MarcoFalke)\n+- #14931 mempool: Verify prioritization is dumped correctly (MarcoFalke)\n+- #14935 Test for expected return values when calling functions returning a success code (practicalswift)\n+- #14969 Fix `cuckoocache_tests` TSAN failure introduced in 14935 (practicalswift)\n+- #14964 Fix race in `mempool_accept` (MarcoFalke)\n+- #14829 travis: Enable functional tests in the threadsanitizer (tsan) build job (practicalswift)\n+- #14985 Remove `thread_local` from `test_bitcoin` (MarcoFalke)\n+- #15005 Bump timeout to run tests in travis thread sanitizer (MarcoFalke)\n+- #15013 Avoid race in `p2p_timeouts` (MarcoFalke)\n+- #14960 lint/format-strings: Correctly exclude escaped percent symbols (luke-jr)\n+- #14930 pruning: Check that verifychain can be called when pruned (MarcoFalke)\n+- #15022 Upgrade Travis OS to Xenial (gkrizek)\n+- #14738 Fix running `wallet_listtransactions.py` individually through `test_runner.py` (kristapsk)\n+- #15026 Rename `rpc_timewait` to `rpc_timeout` (MarcoFalke)\n+- #15069 Fix `rpc_net.py` `pong` race condition (Empact)\n+- #14790 Allow running `rpc_bind.py` --nonloopback test without IPv6 (kristapsk)\n+- #14457 add invalid tx templates for use in functional tests (jamesob)\n+- #14855 Correct ineffectual WithOrVersion from `transactions_tests` (Empact)\n+- #15099 Use `std::vector` API for construction of test data (domob1812)\n+- #15102 Run `invalid_txs.InputMissing` test in `feature_block` (MarcoFalke)\n+- #15059 Add basic test for BIP34 (MarcoFalke)\n+- #15108 Tidy up `wallet_importmulti.py` (amitiuttarwar)\n+- #15164 Ignore shellcheck warning SC2236 (promag)\n+- #15170 refactor/lint: Add ignored shellcheck suggestions to an array (koalaman)\n+- #14958 Remove race between connecting and shutdown on separate connections (promag)\n+- #15166 Pin shellcheck version (practicalswift)\n+- #15196 Update all `subprocess.check_output` functions to be Python 3.4 compatible (gkrizek)\n+- #15043 Build fuzz targets into seperate executables (MarcoFalke)\n+- #15276 travis: Compile once on trusty (MarcoFalke)\n+- #15246 Add tests for invalid message headers (MarcoFalke)\n+- #15301 When testing with --usecli, unify RPC arg to cli arg conversion and handle dicts and lists (achow101)\n+- #15247 Use wallet to retrieve raw transactions (MarcoFalke)\n+- #15303 travis: Remove unused `functional_tests_config` (MarcoFalke)\n+- #15330 Fix race in `p2p_invalid_messages` (MarcoFalke)\n+- #15324 Make bloom tests deterministic (MarcoFalke)\n+- #15328 travis: Revert \"run extended tests once daily\" (MarcoFalke)\n+- #15327 Make test `updatecoins_simulation_test` deterministic (practicalswift)\n+- #14519 add utility to easily profile node performance with perf (jamesob)\n+- #15349 travis: Only exit early if compilation took longer than 30 min (MarcoFalke)\n+- #15350 Drop RPC connection if --usecli (promag)\n+- #15370 test: Remove unused --force option (MarcoFalke)\n+- #14543 minor `p2p_sendheaders` fix of height in coinbase (instagibbs)\n+- #13787 Test for Windows encoding issue (ken2812221)\n+- #15378 Added missing tests for RPC wallet errors (benthecarman)\n+- #15238 remove some magic mining constants in functional tests (instagibbs)\n+- #15411 travis: Combine --disable-bip70 into existing job (MarcoFalke)\n+- #15295 fuzz: Add `test/fuzz/test_runner.py` and run it in travis (MarcoFalke)\n+- #15413 Add missing `cs_main` locks required when accessing pcoinsdbview, pcoinsTip or pblocktree (practicalswift)\n+- #15399 fuzz: Script validation flags (MarcoFalke)\n+- #15410 txindex: interrupt threadGroup before calling destructor (MarcoFalke)\n+- #15397 Remove manual byte editing in `wallet_tx_clone` func test (instagibbs)\n+- #15415 functional: allow custom cwd, use tmpdir as default (Sjors)\n+- #15404 Remove `-txindex` to start nodes (amitiuttarwar)\n+- #15439 remove `byte.hex()` to keep compatibility (AkioNak)\n+- #15419 Always refresh cache to be out of ibd (MarcoFalke)\n+- #15507 Bump timeout on tests that timeout on windows (MarcoFalke)\n+- #15506 appveyor: fix cache issue and reduce dependencies build time (ken2812221)\n+- #15485 add `rpc_misc.py`, mv test getmemoryinfo, add test mallocinfo (adamjonas)\n+- #15321 Add `cs_main` lock annotations for mapBlockIndex (MarcoFalke)\n+- #14128 lint: Make sure we read the command line inputs using UTF-8 decoding in python (ken2812221)\n+- #14115 lint: Make all linters work under the default macos dev environment (build-osx.md) (practicalswift)\n+- #15219 lint: Enable python linters via an array (Empact)\n+\n+### Platform support\n+- #13866 utils: Use `_wfopen` and `_wfreopen` on windows (ken2812221)\n+- #13886 utils: Run commands using UTF-8 string on windows (ken2812221)\n+- #14192 utils: Convert `fs::filesystem_error` messages from local multibyte to UTF-8 on windows (ken2812221)\n+- #13877 utils: Make fs::path::string() always return UTF-8 string on windows (ken2812221)\n+- #13883 utils: Convert windows args to UTF-8 string (ken2812221)\n+- #13878 utils: Add fstream wrapper to allow to pass unicode filename on windows (ken2812221)\n+- #14426 utils: Fix broken windows filelock (ken2812221)\n+- #14686 Fix windows build error if `--disable-bip70` (ken2812221)\n+- #14922 windows: Set `_WIN32_WINNT` to 0x0601 (Windows 7) (ken2812221)\n+- #13888 Call unicode API on Windows (ken2812221)\n+- #15468 Use `fsbridge::ifstream` to fix Windows path issue (ken2812221)\n+- #13734 Drop `boost::scoped_array` and use `wchar_t` API explicitly on Windows (ken2812221)\n+- #13884 Enable bdb unicode support for Windows (ken2812221)\n+\n+### Miscellaneous\n+- #13935 contrib: Adjust output to current test format (AkioNak)\n+- #14097 validation: Log FormatStateMessage on ConnectBlock error in ConnectTip (MarcoFalke)\n+- #13724 contrib: Support ARM and RISC-V symbol check (ken2812221)\n+- #13159 Don't close old debug log file handle prematurely when trying to re-open (on SIGHUP) (practicalswift)\n+- #14186 bitcoin-cli: don't translate command line options (HashUnlimited)\n+- #14057 logging: Only log `using config file path_to_bitcoin.conf` message on startup if conf file exists (leishman)\n+- #14164 Update univalue subtree (MarcoFalke)\n+- #14272 init: Remove deprecated args from hidden args (MarcoFalke)\n+- #14494 Error if # is used in rpcpassword in conf (MeshCollider)\n+- #14742 Properly generate salt in rpcauth.py (dongcarl)\n+- #14708 Warn unrecognised sections in the config file (AkioNak)\n+- #14756 Improve rpcauth.py by using argparse and getpass modules (promag)\n+- #14785 scripts: Fix detection of copyright holders (cornelius)\n+- #14831 scripts: Use `#!/usr/bin/env bash` instead of `#!/bin/bash` (vim88)\n+- #14869 Scripts: Add trusted key for samuel dobson (laanwj)\n+- #14809 Tools: improve verify-commits.py script (jlopp)\n+- #14624 Some simple improvements to the RNG code (sipa)\n+- #14947 scripts: Remove python 2 import workarounds (practicalswift)\n+- #15087 Error if rpcpassword contains hash in conf sections (MeshCollider)\n+- #14433 Add checksum in gitian build scripts for ossl (TheCharlatan)\n+- #15165 contrib: Allow use of github api authentication in github-merge (laanwj)\n+- #14409 utils and libraries: Make 'blocksdir' always net specific (hebasto)\n+- #14839 threads: Fix unitialized members in `sched_param` (fanquake)\n+- #14955 Switch all RNG code to the built-in PRNG (sipa)\n+- #15258 Scripts and tools: Fix `devtools/copyright_header.py` to always honor exclusions (Empact)\n+- #12255 Update bitcoin.service to conform to init.md (dongcarl)\n+- #15266 memory: Construct globals on first use (MarcoFalke)\n+- #15347 Fix build after pr 15266 merged (hebasto)\n+- #15351 Update linearize-hashes.py (OverlordQ)\n+- #15358 util: Add setuphelpoptions() (MarcoFalke)\n+- #15216 Scripts and tools: Replace script name with a special parameter (hebasto)\n+- #15250 Use RdSeed when available, and reduce RdRand load (sipa)\n+- #15278 Improve PID file error handling (hebasto)\n+- #15270 Pull leveldb subtree (MarcoFalke)\n+- #15456 Enable PID file creation on WIN (riordant)\n+- #12783 macOS: disable AppNap during sync (krab)\n+- #13910 Log progress while verifying blocks at level 4 (domob1812)\n+- #15124 Fail AppInitMain if either disk space check fails (Empact)\n+- #15117 Fix invalid memory write in case of failing mmap(\u2026) in PosixLockedPageAllocator::AllocateLocked (practicalswift)\n+- #14357 streams: Fix broken `streams_vector_reader` test. Remove unused `seek(size_t)`\n+- #11640 Make `LOCK`, `LOCK2`, `TRY_LOCK` work with CWaitableCriticalSection (ryanofsky)\n+- #14074 Use `std::unordered_set` instead of `set` in blockfilter interface (jimpo)\n+- #15275 Add gitian PGP key for hebasto (hebasto)\n+\n+### Documentation\n+- #14120 Notes about control port and read access to cookie (JBaczuk)\n+- #14135 correct GetDifficulty doc after #13288 (fanquake)\n+- #14013 Add new regtest ports in man following #10825 ports reattributions (ariard)\n+- #14149 Remove misleading checkpoints comment in CMainParams (MarcoFalke)\n+- #14153 Add disable-wallet section to OSX build instructions, update line in Unix instructions (bitstein)\n+- #13662 Explain when reindex-chainstate can be used instead of reindex (Sjors)\n+- #14207 `-help-debug` implies `-help` (laanwj)\n+- #14213 Fix reference to lint-locale-dependence.sh (hebasto)\n+- #14206 Document `-checklevel` levels (laanwj)\n+- #14217 Add GitHub PR template (MarcoFalke)\n+- #14331 doxygen: Fix member comments (MarcoFalke)\n+- #14264 Split depends installation instructions per arch (MarcoFalke)\n+- #14393 Add missing apt-get install (poiuty)\n+- #14428 Fix macOS files description in qt/README.md (hebasto)\n+- #14390 release process: RPC documentation (karel-3d)\n+- #14472 getblocktemplate: use SegWit in example (Sjors)\n+- #14497 Add doc/bitcoin-conf.md (hebasto)\n+- #14526 Document lint tests (fanquake)\n+- #14511 Remove explicit storage requirement from README.md (merland)\n+- #14600 Clarify commit message guidelines (merland)\n+- #14617 FreeBSD: Document Python 3 requirement for 'gmake check' (murrayn)\n+- #14592 Add external interface consistency guarantees (MarcoFalke)\n+- #14625 Make clear function argument case in dev notes (dongcarl)\n+- #14515 Update OpenBSD build guide for 6.4 (fanquake)\n+- #14436 Add comment explaining recentRejects-DoS behavior (jamesob)\n+- #14684 conf: Remove deprecated options from docs, Other cleanup (MarcoFalke)\n+- #14731 Improve scripted-diff developer docs (dongcarl)\n+- #14778 A few minor formatting fixes and clarifications to descriptors.md (jnewbery)\n+- #14448 Clarify rpcwallet flag url change (JBaczuk)\n+- #14808 Clarify RPC rawtransaction documentation (jlopp)\n+- #14804 Less confusing documentation for `torpassword` (fanquake)\n+- #14848 Fix broken Gmane URL in security-check.py (cyounkins-bot)\n+- #14882 developer-notes.md: Point out that UniValue deviates from upstream (Sjors)\n+- #14909 Update minimum required Qt (fanquake)\n+- #14914 Add nice table to files.md (emilengler)\n+- #14741 Indicate `-rpcauth` option password hashing alg (dongcarl)\n+- #14950 Add NSIS setup/install steps to windows docs (fanquake)\n+- #13930 Better explain GetAncestor check for `m_failed_blocks` in AcceptBlockHeader (Sjors)\n+- #14973 Improve Windows native build instructions (murrayn)\n+- #15073 Botbot.me (IRC logs) not available anymore (anduck)\n+- #15038 Get more info about GUI-related issue on Linux (hebasto)\n+- #14832 Add more Doxygen information to Developer Notes (ch4ot1c)\n+- #15128 Fix download link in doc/README.md (merland)\n+- #15127 Clarifying testing instructions (benthecarman)\n+- #15132 Add FreeBSD build notes link to doc/README.md (fanquake)\n+- #15173 Explain what .python-version does (Sjors)\n+- #15223 Add information about security to the JSON-RPC doc (harding)\n+- #15249 Update python docs to reflect that wildcard imports are disallowed (Empact)\n+- #15176 Get rid of badly named `doc/README_osx.md` (merland)\n+- #15272 Correct logging return type and RPC example (fanquake)\n+- #15244 Gdb attaching to process during tests has non-sudo solution (instagibbs)\n+- #15332 Small updates to `getrawtransaction` description (amitiuttarwar)\n+- #15354 Add missing `bitcoin-wallet` tool manpages (MarcoFalke)\n+- #15343 netaddress: Make IPv4 loopback comment more descriptive (dongcarl)\n+- #15353 Minor textual improvements in `translation_strings_policy.md` (merland)\n+- #15426 importmulti: add missing description of keypool option (harding)\n+- #15425 Add missing newline to listunspent help for witnessScript (harding)\n+- #15348 Add separate productivity notes document (dongcarl)\n+- #15416 Update FreeBSD build guide for 12.0 (fanquake)\n+- #15222 Add info about factors that affect dependency list (merland)\n+- #13676 Explain that mempool memory is added to `-dbcache` (Sjors)\n+- #15273 Slight tweak to the verify-commits script directions (droark)\n+- #15477 Remove misleading hint in getrawtransaction (MarcoFalke)\n+- #15489 Update release process for snap package (MarcoFalke)\n+- #15524 doc: Remove berkeleydb PPA from linux build instructions (MarcoFalke)\n+- #15559 Correct `analyzepsbt` rpc doc (fanquake)\n+- #15194 Add comment describing `fDisconnect` behavior (dongcarl)\n+- #15754 getrpcinfo docs (benthecarman)\n+- #15763 Update bips.md for 0.18.0 (sipa)\n+- #15757 List new RPCs in psbt.md and descriptors.md (sipa)\n+- #15765 correct bitcoinconsensus_version in shared-libraries.md (fanquake)\n+- #15792 describe onlynet option in doc/tor.md (jonatack)\n+- #15802 mention creating application support bitcoin folder on OSX (JimmyMow)\n+- #15799 Clarify RPC versioning (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 1Il1\n+- 251\n+- Aaron Clauson\n+- Adam Jonas\n+- Akio Nakamura\n+- Alexander Leishman\n+- Alexey Ivanov\n+- Alexey Poghilenkov\n+- Amir Abrams\n+- Amiti Uttarwar\n+- Andrew Chow\n+- andrewtoth\n+- Anthony Towns\n+- Antoine Le Calvez\n+- Antoine Riard\n+- Antti Majakivi\n+- araspitzu\n+- Arvid Norberg\n+- Ben Carman\n+- Ben Woosley\n+- benthecarman\n+- bitcoinhodler\n+- Carl Dong\n+- Chakib Benziane\n+- Chris Moore\n+- Chris Stewart\n+- chris-belcher\n+- Chun Kuan Lee\n+- Cornelius Schumacher\n+- Cory Fields\n+- Craig Younkins\n+- Cristian Mircea Messel\n+- Damian Mee\n+- Daniel Ingram\n+- Daniel Kraft\n+- David A. Harding\n+- DesWurstes\n+- dexX7\n+- Dimitri Deijs\n+- Dimitris Apostolou\n+- Douglas Roark\n+- DrahtBot\n+- Emanuele Cisbani\n+- Emil Engler\n+- Eric Scrivner\n+- fridokus\n+- Gal Buki\n+- Gleb Naumenko\n+- Glenn Willen\n+- Graham Krizek\n+- Gregory Maxwell\n+- Gregory Sanders\n+- gustavonalle\n+- Harry Moreno\n+- Hennadii Stepanov\n+- Isidoro Ghezzi\n+- Jack Mallers\n+- James Hilliard\n+- James O'Beirne\n+- Jameson Lopp\n+- Jeremy Rubin\n+- Jesse Cohen\n+- Jim Posen\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jordan Baczuk\n+- Jorge Tim\u00f3n\n+- Julian Fleischer\n+- Justin Turner Arthur\n+- Karel B\u00edlek\n+- Karl-Johan Alm\n+- Kaz Wesley\n+- ken2812221\n+- Kostiantyn Stepaniuk\n+- Kristaps Kaupe\n+- Lawrence Nahum\n+- Lenny Maiorani\n+- liuyujun\n+- lucash-dev\n+- luciana\n+- Luke Dashjr\n+- marcaiaf\n+- marcoagner\n+- MarcoFalke\n+- Martin Erlandsson\n+- Marty Jones\n+- Mason Simon\n+- Michael Ford\n+- Michael Goldstein\n+- Michael Polzer\n+- Mitchell Cash\n+- mruddy\n+- Murray Nesbitt\n+- OverlordQ\n+- Patrick Strateman\n+- Pierre Rochard\n+- Pieter Wuille\n+- poiuty\n+- practicalswift\n+- priscoan\n+- qubenix\n+- riordant\n+- Russell Yanofsky\n+- Samuel Dobson\n+- sanket1729\n+- Sjors Provoost\n+- Stephan Oeste\n+- Steven Roose\n+- Suhas Daftuar\n+- TheCharlatan\n+- Tim Ruffing\n+- Vidar Holen\n+- vim88\n+- Walter\n+- whythat\n+- Wladimir J. van der Laan\n+- Zain Iqbal Allarakhia\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  }
]