fanquake,2018-10-25T01:48:38Z,"Travis is sad about trailing whitespace:\n```\nThis diff appears to have added new lines with trailing whitespace.\nThe following changes were suspected:\ndiff --git a/src/wallet/rpcdump.cpp b/src/wallet/rpcdump.cpp\n@@ -915,0 +969,10 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n+\n^---- failure generated from test/lint/lint-whitespace.sh\n```",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432885176,432885176,
meshcollider,2018-10-25T03:28:07Z,"Concept ACK, I think I prefer this over #14558 but will review both more in-depth first",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432901906,432901906,
sipa,2018-10-25T03:49:16Z,"~~I've also discovered when writing this that `importmulti` does not actually require that `watchonly` is set when no solvability is desired. I've kept the existing behavior for now, as it seems pretty invasive to people who may be relying on that, though I've added a TODO.~~\n\nEDIT: seems I misunderstand the original purpose; the ""watchonly"" is there to support importing something as watch-onl",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432905054,432905054,
DrahtBot,2018-10-25T04:38:21Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14918](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14918.html) (RPCHelpMan: Check default values are given ",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432912078,432912078,
sipa,2018-10-26T01:16:42Z,"> There's still a bunch of processing and checking happening outside of ProcessSolvingImportStep though, which is less easy to follow, but at least that code is now shorter.\n\nThat's intentional. It's a recursive function to deal with analysing script specific solvability information. Anything that isn't specific to the script being imported isn't in there.\n\n> Do the existing tests cover th",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-433255039,433255039,
meshcollider,2018-11-03T02:28:58Z,utACK https://github.com/bitcoin/bitcoin/pull/14565/commits/33855fec46dbc3a7cad76875ca2a7660fcc19e92,https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-435553681,435553681,
instagibbs,2018-11-05T17:18:24Z,"I noticed we have no `getaddressinfo[""ischange""]` tests yet, and would be a good time to add those.",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-435957864,435957864,
instagibbs,2018-11-05T17:20:59Z,"utACK 33855fec46dbc3a7cad76875ca2a7660fcc19e92 aside from the `ischange` test, I can't seem to convince myself we even honor the flag, even in master/0.17...\n\nedit: https://github.com/bitcoin/bitcoin/issues/14662",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-435958733,435958733,
Sjors,2018-11-08T08:36:58Z,"@achow101 wrote in inline comment:\n\n> Instead of a `std::set`, could `std::vector` be used for these in order to preserve the order in which things will be imported? This is useful for #14075 where we want to have the order in which things are added to the wallet be the order that was specified in the import.\n\nIt's also better for recoverability if the wallet strives to use derivation path",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-436914666,436914666,
sipa,2018-11-09T03:27:46Z,"I realized I misread what ""watchonly"" was supposed to mean; it means it's fine if the resulting address is not *spendable* (I was under the assumption it meant being fine if it's not *solvable*).\n\nI made some significant logic changes as a result to reflect the warning messages for that. All other comments are addressed, apart from the ordering of keys, and adding tests (which I will do soon).",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-437238010,437238010,
instagibbs,2018-11-13T15:46:08Z,"LGTM, awaiting tests",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-438314197,438314197,
sipa,2018-11-20T01:40:38Z,"> re: #14565 (comment):\n>> I've also discovered when writing this that importmulti does not actually require that watchonly is set when no solvability is desired. I've kept the existing behavior for now, as it seems pretty invasive to people who may be relying on that, though I've added a TODO.\n> I don't see the TODO. Would the TODO just be to turn the ""Assuming watchonly as not all private ke",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-440105516,440105516,
achow101,2018-11-22T20:57:56Z,utACK 8a079e88f7a00cfbef0bb8b1d2016e5157343091,https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-441119110,441119110,
sipa,2018-11-29T07:14:13Z,"> I still don't understand this. There are three cases, right?\n>\n> * Solvable and spendable\n> * Solvable but not spendable\n> * Not solvable, not spendable\n>\n> It seems like all three cases are permitted in this PR, except there will be warnings if unused keys are provided, and errors if solving data is provided but some keys are missing. I guess I don't know if this is the final state ",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-442730298,442730298,
Sjors,2018-11-29T14:11:41Z,"> If you accidentally miss one of the keys however, the result will not be spendable. To make sure this is intentional, a warning will be given, which can be suppressed by saying ""watchonly"".\n\nNow that's a sentence worthy of going into the release notes (or help).",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-442846923,442846923,
sipa,2018-11-29T19:46:13Z,"This PR absolutely needs more tests, but I won't have time for that the next few days at least. If someone is interested in helping out, I think it would be useful to rewrite the existing tests to use the following pattern:K\n* Keys are generated on node1\n* Addresses/scripts/pubkeys are computed from those keys\n* An `importmulti` query is constructed\n* A function is called which is passed a",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-442968190,442968190,
jnewbery,2018-12-06T15:47:44Z,"> I've started refactoring the wallet_importmulti.py into this style. It's a WIP here: https://github.com/jnewbery/bitcoin/tree/importmulti_tests . I hope to continue working on it this week.\n\nThis work is (mostly) complete. Intermediate commits could probably do with some tidy-up, which I intend to do later today.\n\nPR here: #14886",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-444918143,444918143,
jnewbery,2018-12-06T21:53:23Z,"I've started writing tests for this PR: https://github.com/jnewbery/bitcoin/tree/pr14565.tests\n\nIt's certainly not complete, but it makes a start by:\n- testing the return object from `importmulti` for the right `warnings` return value.\n- calling `getaddressinfo` for the different address variants when privkeys are imported.\n\nTo continue, we should:\n\n- restructure the test so in ord",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-445043413,445043413,
sipa,2018-12-12T00:30:09Z,"I've addressed many of the comments above, rebased on top of the new test changes from #14886, and made a few behavior changes as well:\n* Instead of sticking to a ""what used to be an error and is still not supported remains an error, other things are warnings"", as that resulted in pretty inconsistent behavior. I think I've changed things to be more consistently only errorring for actual failures",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-446415794,446415794,
sipa,2018-12-13T00:40:40Z,"@Sjors \n\n> Or just add that as an option? It seems like a useful feature, especially since we can't delete keys and don't have a dry-run option. Different PR is fine.\n\nI'd really like to avoid that. There is no reason for that to be an option (which we may need to maintain forever), as the intended behavior is that these things are just errors, always. The only reason why they aren't is be",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-446799251,446799251,
Sjors,2018-12-13T09:11:15Z,re-utACK eacff95,https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-446894935,446894935,
meshcollider,2018-12-24T10:25:18Z,"utACK https://github.com/bitcoin/bitcoin/pull/14565/commits/eacff95de4751b500f1cef623e4024918dcb05bb\n\nAgree with John, the final nits can be addressed in a followup",https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-449715385,449715385,
Sjors,2018-10-25T05:44:51Z,"It's not immediately obvious what this is doing, until you read `txnouttype Solver` documentation in `standard.h`.\n\nSuggested comment: \n```\n// Use Solver to obtain script type and parsed pubkeys or hashes:\n```",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040392,228040392,src/wallet/rpcdump.cpp
Sjors,2018-10-25T05:45:22Z,`script_type` would be clearer,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040464,228040464,src/wallet/rpcdump.cpp
Sjors,2018-10-25T06:51:03Z,"It would be nice if the call to `ExtractDestination(s)` and various parsing happening below was also a `ProcessSolvingImportStep` (`SolverContext::TOP` or a new context?), but I suppose the different types make that difficult?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228051747,228051747,src/wallet/rpcdump.cpp
Sjors,2018-10-25T06:55:39Z,Add a warning to the result output?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228052708,228052708,src/wallet/rpcdump.cpp
Sjors,2018-10-25T07:00:12Z,"Why check this here, rather than passing `watchOnly` into `ProcessSolvingImportStep` and check there?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228053700,228053700,src/wallet/rpcdump.cpp
sipa,2018-10-26T01:01:56Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228380388,228380388,src/wallet/rpcdump.cpp
sipa,2018-10-26T01:02:02Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228380402,228380402,src/wallet/rpcdump.cpp
sipa,2018-10-26T01:04:28Z,"I think that would be completely the wrong place; perhaps the control flow isn't clear?\n\n`ProcessSolvingImportStep` is a recursive function that matches up the parsed solvability information (only the `keys`, `pubkeys`, `redeemscript`, and `witnessscript` fields) with the provided address/script, recursing into subscripts as needed. Anything that isn't specific to the type of script being impo",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228380649,228380649,src/wallet/rpcdump.cpp
sipa,2018-10-26T01:07:32Z,"That's a great idea. I've implemented that and taken it a bit further. I think all new error conditions (that don't signify seriously broken things like P2SH-inside-P2SH) are now reported as warnings instead of causing the RPC to fail.\n\nPerhaps we want to introduce a new mode where all these warnings become errors, though `-deprecatedrpc`, but let's discuss that in a separate RPC.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228380989,228380989,src/wallet/rpcdump.cpp
sipa,2018-10-26T01:12:00Z,"If `watchonly` is true, there is nothing to do for `ProcessSolvingImportStep`, as there is no script to be analysed (see other comment).",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228381482,228381482,src/wallet/rpcdump.cpp
Sjors,2018-10-26T05:23:22Z,"nit: typo ""mvoed""",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228408379,228408379,src/wallet/rpcdump.cpp
Sjors,2018-10-26T05:32:19Z,"Probably needs an RPC example:\n<img width=""909"" alt=""schermafbeelding 2018-10-26 om 13 30 19"" src=""https://user-images.githubusercontent.com/10217/47546368-89931280-d923-11e8-89e6-811162e6580b.png"">\n",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228409405,228409405,src/wallet/rpcdump.cpp
Sjors,2018-10-26T05:41:27Z,"The rename and comments help. Still `ProcessImport` is fairly large with lots of `if` branches and loops, so splitting it into multiple functions would help. The first function could be `prepare_import_data`, the second `verify_and_import_data` which calls `RecurseImportData` and then a third `add_to_wallet`. Not sure if they can be cleanly disentangled. Maybe some other time. ",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228410472,228410472,src/wallet/rpcdump.cpp
practicalswift,2018-10-26T07:04:58Z,"Nit: Also handle `TX_NONSTANDARD`, `TX_NULL_DATA` and `TX_WITNESS_UNKNOWN` explicitly to make it exhaustive? That will allow for `-Wswitch-enum` :-)",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228423720,228423720,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:13:22Z,please make `ctx` constant,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230811053,230811053,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:14:19Z,"nit: s/data/import_data/g, lots of ""data"" in this chunk of code already e.g., `solverdata`",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230811453,230811453,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:16:43Z,"munit: ""... for solveability""? ",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230812463,230812463,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:17:48Z,"nit: s/ctx/script_ctx/ , to directly link it to `script`",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230812909,230812909,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:19:47Z,might as well assert that it's `ctx == TOP`,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230813869,230813869,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:21:34Z,note for self: check if we're checking this error,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230814669,230814669,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:21:48Z,note for self: check if we're checking this error,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230814787,230814787,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:30:12Z,nit: s/full/ full TOP/,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230818405,230818405,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:36:27Z,note: the privkey check happens at https://github.com/bitcoin/bitcoin/pull/14565/commits/10a26e9f3826f162a0b04dad62f029c78e53c42b#diff-522490d83dce5375d423b23886e4125eR976 already,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230821010,230821010,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:36:44Z,this check subsumed by https://github.com/bitcoin/bitcoin/pull/14565/commits/10a26e9f3826f162a0b04dad62f029c78e53c42b#diff-522490d83dce5375d423b23886e4125eR983 ?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230821181,230821181,src/wallet/rpcdump.cpp
instagibbs,2018-11-05T16:41:23Z,`s/::/:/`,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r230823123,230823123,src/wallet/rpcdump.cpp
achow101,2018-11-07T20:39:05Z,"Instead of a `std::set`, could `std::vector` be used for these in order to preserve the order in which things will be imported? This is useful for #14075 where we want to have the order in which things are added to the wallet be the order that was specified in the import.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r231668340,231668340,src/wallet/rpcdump.cpp
instagibbs,2018-11-07T21:58:17Z,"A few more changes would be required, see a fairly minimal change set(I made vectors of all the sets): https://gist.github.com/instagibbs/bd11e8666d929d84e4abc2214962e752",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r231693179,231693179,src/wallet/rpcdump.cpp
achow101,2018-11-08T16:33:32Z,This has been implemented in #14075 as that is where this behavior is desired.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r231967853,231967853,src/wallet/rpcdump.cpp
Sjors,2018-11-08T16:44:26Z,"I think it's always desired, particularly when someone imports private keys, as those would get added to the keypool in order of their occurrence in the wallet IIUC.\n\nBut if it's an existing ""feature"" then of course it's fine to change in it in the other PR.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r231973774,231973774,src/wallet/rpcdump.cpp
sipa,2018-11-09T01:51:22Z,"This one is an error, as it's always been there. The other one is just a warning (I'd very much like to make it all errors, but I fear about breaking compatibility).",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232121900,232121900,src/wallet/rpcdump.cpp
sipa,2018-11-09T01:53:19Z,"@Sjors As of this PR, there is no reason for doing so as we can't import into the keypool yet. Follow-ups can add the ordering.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232122136,232122136,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:24:20Z,"Done, done, done.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133646,232133646,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:24:30Z,Reformulated.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133671,232133671,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:24:38Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133683,232133683,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:24:45Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133699,232133699,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:24:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133712,232133712,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:25:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133726,232133726,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:25:11Z,Reformulated.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133750,232133750,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:25:54Z,"Actually, I got rid of all this as I was mistaken about what ""watchonly"" meant; see further.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133832,232133832,src/wallet/rpcdump.cpp
sipa,2018-11-09T03:26:02Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232133848,232133848,src/wallet/rpcdump.cpp
practicalswift,2018-11-09T08:24:34Z,Nit: Could use `std::any_of`? :-),https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232171795,232171795,src/wallet/rpcdump.cpp
instagibbs,2018-11-09T17:17:09Z,what does changing this do exactly? this variable is never used later.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232328654,232328654,src/wallet/rpcdump.cpp
instagibbs,2018-11-09T17:17:55Z,old reference to `watchOnly` here,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232328886,232328886,src/wallet/rpcdump.cpp
sipa,2018-11-09T20:30:54Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232384923,232384923,src/wallet/rpcdump.cpp
sipa,2018-11-09T20:31:02Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232384947,232384947,src/wallet/rpcdump.cpp
sipa,2018-11-09T20:32:38Z,Fixed (also made a change that sets have_solving_data to `false` when the solvability data is bad).,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232385340,232385340,src/wallet/rpcdump.cpp
meshcollider,2018-11-12T04:57:26Z,"This will still import the private keys provided, so I'm not 100% sure this message is clear, it may imply an all-or-nothingness with watchonly?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232534932,232534932,src/wallet/rpcdump.cpp
sipa,2018-11-12T05:18:13Z,Any suggestion for an improved message?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232536910,232536910,src/wallet/rpcdump.cpp
meshcollider,2018-11-12T05:22:16Z,"Perhaps ""Some private keys are missing, address will be considered watchonly"". Only a minor nit.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r232537448,232537448,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T15:54:32Z,spelling: accordingly,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234254224,234254224,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T16:01:01Z,"Description is a bit vague. Would maybe say ""Analyse the provided `scriptPubKey`, determining which keys and which redeem scripts from the `ImportData` struct are needed to spend it, and mark them as used.""",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234256747,234256747,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T16:12:17Z,"What's the story with this IsMine rule? Was it a mistake for IsMine to require this, and we are now stuck with it so new wallets can remain compatible with old software? Or was there a reason for IsMine to require this (or is there a reason still)?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234260710,234260710,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T16:25:07Z,"Doesn't this need to return the value of RecurseImportData to avoid losing the error string?\n\nAlso, I think having a mix of breaks and returns here makes this function harder to follow. I think it'd be better if all the breaks were replaced by explicit returns, or if all returns were replaced with breaks (by assigning a `std::string ret` variable and returning it at the end).",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234265236,234265236,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T16:42:10Z,Why are `pubkeys` and `privkeys` struct members instead of freestanding variables in ProcessImport? It seems odd because the `RecurseImportData` function never touches them.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234271426,234271426,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T17:02:39Z,"This seems like a change in behavior. It looks mapKeyMetadata was only set for previously for private keys, not public keys.\n\nCan you drop this line or add a comment about what effect it has? It seems like whatever effect it has might be temporary because AddWatchOnly() won't write this value to the database.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234278403,234278403,src/wallet/rpcdump.cpp
ryanofsky,2018-11-16T17:10:26Z,"It might be nice to return warnings alongside errors in the exceptional cases below. You could do this by moving the `result` and `warnings` declarations above the try block, and moving `result.pushKV(""warnings"")` and `return result` below.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234282003,234282003,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:13:51Z,"Fixed, done.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234839776,234839776,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:16:13Z,"There is a comment in script/ismine.cpp about this. It was necessary to prevent an attack before SegWit activation (where someone who owes you would be able to take (another) pubkey they knew was yours, construct a P2WPKH address for it, and pay you; the wallet would show it as an incoming payment, despite it being spendable by anyone before activation). It was a terrible hack, but a necessary one",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234840153,234840153,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:16:34Z,"Good point. Fixed, and turned it all into returns.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234840212,234840212,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:17:10Z,"Oh, I wasn't even away they weren't being used (they were in an earlier version of this code). Moved them up to local variables.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234840336,234840336,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:17:57Z,"I think this was a copy-paste error, mimicking the private key code where it was necessary. Fixed.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234840465,234840465,src/wallet/rpcdump.cpp
sipa,2018-11-20T01:18:06Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234840484,234840484,src/wallet/rpcdump.cpp
achow101,2018-11-20T16:40:37Z,"The warning says that the irrelevant private key will be ignored, but it looks like the private key will still be imported anyways.\n\nAlso, why exit this loop when an irrelevant private key is encountered?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r235079946,235079946,src/wallet/rpcdump.cpp
achow101,2018-11-20T16:41:08Z,"Same thing as with the private keys, the pubkey will still be imported even when it is considered irrelevant.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r235080142,235080142,src/wallet/rpcdump.cpp
sipa,2018-11-20T19:32:56Z,"Nice catch, fixed.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r235140823,235140823,src/wallet/rpcdump.cpp
sipa,2018-11-20T19:33:04Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r235140883,235140883,src/wallet/rpcdump.cpp
ryanofsky,2018-11-28T00:17:49Z,Could move these declarations below closer to where they are used. This would prevent adding code that tries to use them before they are initialized.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r236898632,236898632,src/wallet/rpcdump.cpp
ryanofsky,2018-11-28T00:22:36Z,Might be good to name this `pubkey_map` to distinguish it from the `pubKey` variable. Or could rename the other variable.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r236899461,236899461,src/wallet/rpcdump.cpp
ryanofsky,2018-11-28T18:35:14Z,Would it be better to check for unused private key warnings instead of dropping these test cases entirely?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r237209285,237209285,test/functional/wallet_importmulti.py
ryanofsky,2018-11-28T19:40:39Z,"I think it'd be good to mention that `require_keys` is a subset of `used_keys`. Could also choose a more normalized representation like `std::map<CKeyID, bool /* required */> used_keys`.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r237232263,237232263,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T19:33:37Z,"Can you add the pubkey to the error message? (multiple pubkeys can be given in a request, and this error doesn't indicate which one is invalid).\n\nSame comment for other pubkey and privkey errors below.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238407103,238407103,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T19:36:12Z,It's not obvious from the help text that both private and public keys shouldn't be given. Can you update the help text to indicate that's an error?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238408053,238408053,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T20:02:26Z,"This comment is a bit confusing, since the `emplace` will be called on `script` even if this is P2SH-P2WSH, but it'll be a no-op since `emplace(*subscript)` was already called in the outer run through `RecurseImportData()`. I think it may be clearer to either make that explicit in this comment or only call this emplace if `script_ctx == ScriptContext::TOP`.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238416989,238416989,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T20:04:57Z,"Can you include a reference to the `script.cpp` comment here, so future readers of this code understand why this is required?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238417816,238417816,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T20:10:49Z,assert? We should never drop through to here.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238419596,238419596,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T20:20:12Z,"I don't understand why this is just a warning, rather than causing the import to fail. The client has asked to import a script/address as not watchonly but hasn't provided the keys - shouldn't we fail (and make the client import with watchonly set and no privkeys provided if they want to import as watchonly)?\n\nEDIT: I see your earlier comment:\n\n> Perhaps we want to introduce a new mode whe",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238422419,238422419,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T20:41:52Z,Is there a good reason that the key's createtime metadata is updated *before* adding the key to the wallet?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238428932,238428932,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T21:11:31Z,"I think the error messages in all these throws could be improved. Here, for example, the error text could be:\n\n```\nthrow JSONRPCError(RPC_WALLET_ERROR, strprintf(""Script import failed due to problem importing private key %s."", EncodeSecret(key));\n```\n\nAs it is, it's not clear that failing to import this key also causes the script to not be imported. Same comment for failures to import ",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238438618,238438618,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T21:14:00Z,Same comment as above about making the impact of this error clearer. Also perhaps change to 'error adding Pay-to-pubkey script for pubkey %s'),https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238439489,238439489,src/wallet/rpcdump.cpp
jnewbery,2018-12-03T21:18:07Z,"I don't understand where this error text ""Missing required fields"" comes from? It's also not very helpful for the client (which fields were missing?)",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238440785,238440785,src/wallet/rpcdump.cpp
meshcollider,2018-12-04T19:52:51Z,"Why was this check removed? Now it looks like if you provide a private key but set watchonly to true, it will still import that private key?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238814043,238814043,src/wallet/rpcdump.cpp
sipa,2018-12-04T20:11:31Z,"Yes, how else would you import a private key for something you don't have all keys for? The old behavior was bogus.\n\nI think I explained it elsewhere in this PR, but the intended behavior of watchonly is ""import this, even though I don't have *all* the relevant keys"". It wasn't supposed to prevent importing any keys at all.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238820386,238820386,src/wallet/rpcdump.cpp
ryanofsky,2018-12-04T21:02:32Z,"> Is there a good reason that the key's createtime metadata is updated before adding the key to the wallet?\n\nIt would be good to add a comment, but the map needs to be updated before calling AddKeyPubKey, because AddKeyPubKey uses it here: https://github.com/bitcoin/bitcoin/blob/86ff0413bb8f8173d3b3a1987875ff40b1094926/src/wallet/wallet.cpp#L291\n\nA good cleanup would be to drop this line a",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238836988,238836988,src/wallet/rpcdump.cpp
Empact,2018-12-04T23:22:18Z,"For members, doxygen uses `//!<`\nhttp://www.doxygen.nl/manual/docblocks.html#memberdoc",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238878599,238878599,src/wallet/rpcdump.cpp
Empact,2018-12-04T23:26:08Z,"I think there's a compiler check against missing cases in switch statement, which would be a good reason to assert.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r238879474,238879474,src/wallet/rpcdump.cpp
meshcollider,2018-12-05T10:06:32Z,"Ah, so now the only point of the watchonly parameter is to be explicit so we don't get a warning thrown",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r239000762,239000762,src/wallet/rpcdump.cpp
jnewbery,2018-12-06T19:00:32Z,"I think the RPC help text for `watchonly` needs to be updated. It's currently `Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty`.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r239573986,239573986,src/wallet/rpcdump.cpp
ryanofsky,2018-12-06T19:41:32Z,"re: https://github.com/bitcoin/bitcoin/pull/14565#discussion_r239573986\n\n> I think the RPC help text for watchonly needs to be updated.\n\nI suggested one possible update in https://github.com/bitcoin/bitcoin/pull/14565#pullrequestreview-179073149:\n\n> I think the documentation would be clearer if it just said that ""watchonly"" has no actual effect on the import, and only disables a warnin",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r239587718,239587718,src/wallet/rpcdump.cpp
sipa,2018-12-11T22:09:46Z,"Yes, the tests need updating (which I think others are working on now, I'm not entirely up to date).",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240810431,240810431,test/functional/wallet_importmulti.py
sipa,2018-12-12T00:17:45Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240841747,240841747,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:17:54Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240841772,240841772,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:18:18Z,Done. Same with `privkey_map` for consistency.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240841833,240841833,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:18:34Z,"Ok, reverted this change.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240841872,240841872,test/functional/wallet_importmulti.py
sipa,2018-12-12T00:18:46Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240841919,240841919,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:19:54Z,"Done. I thought about doing this before but worried it would complicate writing tests. Since you've volunteered to help out with that, I don't assume that'll be a problem :p",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842118,240842118,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:20:05Z,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842156,240842156,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:20:28Z,I realized that there is very little reason for forbidding this (or even warning about it). I just removed the warning.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842233,240842233,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:21:14Z,"I wish there was a way to tell the compiler ""Generate a warning if you can't prove this code is unreachable"", but an assert in this case seems not worth the risk.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842363,240842363,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:22:37Z,"@jnewbery If designing from scratch, I absolutely agree - but I'm afraid this would be a far too invasive compatibility break. That compatibility concern was the reason for introducing a warnings field in the first place.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842671,240842671,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:22:55Z,Let's leave this for later.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842724,240842724,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:23:33Z,"This sort of failure can only occur when there is an I/O error or so, I'm not sure we can do much about it.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842835,240842835,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:23:49Z,"I don't understand either, I haven't touched it.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842884,240842884,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:24:06Z,I've made some help text changes.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240842941,240842941,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:24:28Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240843013,240843013,src/wallet/rpcdump.cpp
sipa,2018-12-12T00:43:00Z,"I'd rather not say it's just disabling a warning, as it may change to a failure later.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r240846519,240846519,src/wallet/rpcdump.cpp
Sjors,2018-12-12T12:59:56Z,"Suggested comment (above, and in `TX_WITNESS_V0_SCRIPTHASH`):\n```\n// Remove redeemscript from import_data to check for superfluous script later.\n```",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241003870,241003870,src/wallet/rpcdump.cpp
Sjors,2018-12-12T13:43:28Z,Why are you not using `emplace()` here like with `TX_PUBKEY`?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241017930,241017930,src/wallet/rpcdump.cpp
Sjors,2018-12-12T14:51:15Z,"Isn't it safer to only update `mapKeyMetadata[id].nCreateTime` if `timestamp` is older than the current value? Otherwise what if:\n* a user adds a private key to an existing public key, which they already used\n* they set `""timestamp"": ""now""`\n* after import they do `bitcoind -zapwallettxes` and then rescan\nIn that case, would rescan pick it up anyway regardless of `nCreateTime` because it st",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241044001,241044001,src/wallet/rpcdump.cpp
Sjors,2018-12-12T15:00:12Z,"Suggested comment (above), because `HaveKey` is an ambiguous function name:\n```\n// If the private key is not present in the wallet, insert it or add it to an existing public key.\n```",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241048130,241048130,src/wallet/rpcdump.cpp
promag,2018-12-12T15:07:57Z,"nit, could say:\n - it's per request result\n - it's not present if there are no warnings",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241051227,241051227,doc/release-notes-14565.md
promag,2018-12-12T15:11:52Z,"IMO could do better than empty string as success — despite the fact that it works.\n\nAlternatives:\n- could return `std::pair<bool, std::string>`\n- could have return `bool` and add argument `std::string& error`",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241052825,241052825,src/wallet/rpcdump.cpp
sipa,2018-12-12T23:59:54Z,`emplace()` doesn't overwrite the entry if it already exists (which could possible leave it with required=false).,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241229980,241229980,src/wallet/rpcdump.cpp
sipa,2018-12-13T00:22:59Z,"Both of these options result in uglier code, I think.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241234157,241234157,src/wallet/rpcdump.cpp
sipa,2018-12-13T00:37:19Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241236822,241236822,doc/release-notes-14565.md
sipa,2018-12-13T00:38:41Z,"There isn't such a thing as ""adding it to an existing public key"", private and public keys are pretty much unrelated in every way in the wallet (the former is needed for signing and affects spendability; the latter is needed just to recurse into PKH/WPKH and not anything else). I've added some of the test you suggest, but dropped the pubkey part.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241237035,241237035,src/wallet/rpcdump.cpp
sipa,2018-12-13T00:38:53Z,Done.,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241237069,241237069,src/wallet/rpcdump.cpp
meshcollider,2018-12-13T00:47:18Z,Do we also need to update `mapKeyMetadata` here to include the timestamp?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241238436,241238436,src/wallet/rpcdump.cpp
jnewbery,2018-12-14T19:56:35Z,"are the `""\n"".join` adding anything here?\n\nPresumably `""\n"".join(list1) == ""\n"".join(list2)` ⇔ `list1 == list2`?",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241872742,241872742,test/functional/wallet_importmulti.py
jnewbery,2018-12-14T20:10:04Z,"nit: misaligned, please remove space",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241876095,241876095,test/functional/wallet_importmulti.py
jnewbery,2018-12-14T20:10:16Z,nit: test for watchonly?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241876155,241876155,test/functional/wallet_importmulti.py
jnewbery,2018-12-14T20:51:57Z,"nit: should identify which private key was invalid in error message.\n\nEDIT: same for all error messages below. `importmulti` can contain multiple scripts, addresses and keys. Any error messages should indicate which address/script/key was at fault.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241888102,241888102,src/wallet/rpcdump.cpp
practicalswift,2018-12-15T08:17:36Z,Indentation is not a multiple of four :-),https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241942294,241942294,test/functional/wallet_importmulti.py
practicalswift,2018-12-15T08:18:04Z,"I suggest using `warnings=None` (see example below) instead to clarify that `warnings` is not meant to be remembered across calls.\n\nBackground:\n\n```\n>>> def test(i, i_arr=[]):\n...     i_arr.append(i)\n...     return i_arr\n...\n>>> test(1)\n[1]\n>>> test(2)\n[1, 2]\n>>> test(3)\n[1, 2, 3]\n```\n\nSuggested alternative:\n\n```\n>>> def test(i, i_arr=None):\n...     if i_a",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241942304,241942304,test/functional/wallet_importmulti.py
Sjors,2018-12-15T10:03:07Z,"Yikes, I thought only Javascript behaved like that...",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241944704,241944704,test/functional/wallet_importmulti.py
jnewbery,2018-12-19T21:59:57Z,remove word 'not',https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243090573,243090573,test/functional/wallet_importmulti.py
jnewbery,2018-12-19T22:36:39Z,"(unchanged by this PR)\n\nThis error message is slightly wrong, since ISMINE_SPENDABLE could mean that the wallet already contains private key**s**. I think it would be better to say that the address or script is already owned by the wallet.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243100321,243100321,src/wallet/rpcdump.cpp
jnewbery,2018-12-19T22:58:33Z,"Error message could indicate which key, eg ""key for pubkey hash <x> is missing""",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243105890,243105890,src/wallet/rpcdump.cpp
jnewbery,2018-12-19T23:26:47Z,"> Let's leave this for later.\n\nAgree. When this does get changed, we should also update `CWallet::AddKeyPubKey()` to also call `UpdateTimeFirstKey()` (in the same way that `CWallet::AddWatchOnly()` does).",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243111922,243111922,src/wallet/rpcdump.cpp
jnewbery,2018-12-19T23:33:55Z,"This is a fairly involved function, so it'd be friendly to have a function-level comment:\n\n- called once for each request within an importmulti call\n- doesn't throw. All errors are caught and returned in the error field\n- all input data is parsed and validated first. Then scripts, pubkeys and keys are imported.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243113167,243113167,src/wallet/rpcdump.cpp
sipa,2018-12-20T11:36:40Z,"I really don't think that putting private keys in error messages is a good idea. They may get logged unintentionally, etc.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243241253,243241253,src/wallet/rpcdump.cpp
promag,2018-12-20T11:53:47Z,Absolutely agree with @sipa. Could show a couple chars only or the error message could say the index of the invalid entry?,https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243245864,243245864,src/wallet/rpcdump.cpp
jnewbery,2018-12-20T12:49:26Z,"Yes, very good point. I think Promag's suggestions are good.\n\nIn any case, this doesn't need to be included in this PR. A future PR to improve logging and test all failure modes would be nice.",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243259567,243259567,src/wallet/rpcdump.cpp
ryanofsky,2018-12-20T18:12:17Z,"re: https://github.com/bitcoin/bitcoin/pull/14565#discussion_r241238436\n\n> Do we also need to update mapKeyMetadata here to include the timestamp?\n\nI requested not doing this here: https://github.com/bitcoin/bitcoin/pull/14565#discussion_r234278403. It shouldn't be necessary because timestamp is passed to AddWatchOnly below. In the future the mapKeyMetadata update above could also be remov",https://github.com/bitcoin/bitcoin/pull/14565#discussion_r243368429,243368429,src/wallet/rpcdump.cpp
