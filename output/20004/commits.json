[
  {
    "sha": "fa23308e9aad70c99a31f91d8556f1876ea02c04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTIzMzA4ZTlhYWQ3MGM5OWEzMWY5MWQ4NTU2ZjE4NzZlYTAyYzA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-24T13:11:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-29T08:20:05Z"
      },
      "message": "Remove gArgs global from CreateChainParams to aid testing",
      "tree": {
        "sha": "b506f748bfb0d71bde4c34500abf0bc0455040b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b506f748bfb0d71bde4c34500abf0bc0455040b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa23308e9aad70c99a31f91d8556f1876ea02c04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiOrwv+IxgQnUR1IGg96hUperxqNktk0j/NeYa+dtSNtF4tkv2E4y293Hgve+gG\nR4oJtz7MBUD2IEJAv2J154rsouqBxkt4j8+fgFL9qV23g6Q+TsGhC+wvDxpEgoSN\nik1aio+BvMZalrTTLcUdFSnk0WrMn8zpb0FqBSBUTwFrxJX81DVZ3NwY9nS+ZqUa\nTAH90m11JiR7JADeAx/PxS6tprAP0YB54hYVKL/umfQI2JGb4hvOPKAojtIQmJG1\nkdl1eG10ahsveB5t0T5hPCyMk9yiocttcViwovM1NBe+JeL4n0lFGenZTX762rZI\n+uc5jvZoXpLXWPrA8rZY7s914do1mhZ2iLxUz0aXJ+sNkczy0WvrwcF/UOSgS9W7\nnxSfw28A4VhAobigcTQZXydN+bg7UgP3ldQEXaMgUsiF8UXTUlp5aeuLo2HST6CB\ndacuJMIfqOuZFeRnD1IwZ2z+ESiR1E3jKXf/tP3szO5AQ6VBofONexEYpjNrzOfI\nPSl/0In/\n=XIOo\n-----END PGP SIGNATURE-----",
        "payload": "tree b506f748bfb0d71bde4c34500abf0bc0455040b6\nparent e36aa351a31cde0f95ce957b2ff593a97f91eb6d\nauthor MarcoFalke <falke.marco@gmail.com> 1600953087 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601367605 +0200\n\nRemove gArgs global from CreateChainParams to aid testing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa23308e9aad70c99a31f91d8556f1876ea02c04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa23308e9aad70c99a31f91d8556f1876ea02c04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa23308e9aad70c99a31f91d8556f1876ea02c04/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36aa351a31cde0f95ce957b2ff593a97f91eb6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e36aa351a31cde0f95ce957b2ff593a97f91eb6d"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "a9f3f5f84d20f922db74bc2d0cb1c694bdc29104",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -34,7 +34,8 @@ static void DeserializeAndCheckBlockTest(benchmark::Bench& bench)\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    ArgsManager bench_args;\n+    const auto chainParams = CreateChainParams(bench_args, CBaseChainParams::MAIN);\n \n     bench.unit(\"block\").run([&] {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here"
      },
      {
        "sha": "fc16abbad0e36e4349a2bb235c15c143954d7b89",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -485,22 +485,22 @@ const CChainParams &Params() {\n     return *globalChainParams;\n }\n \n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<const CChainParams> CreateChainParams(const ArgsManager& args, const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN) {\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     } else if (chain == CBaseChainParams::TESTNET) {\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     } else if (chain == CBaseChainParams::SIGNET) {\n-        return std::unique_ptr<CChainParams>(new SigNetParams(gArgs));\n+        return std::unique_ptr<CChainParams>(new SigNetParams(args));\n     } else if (chain == CBaseChainParams::REGTEST) {\n-        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n+        return std::unique_ptr<CChainParams>(new CRegTestParams(args));\n     }\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    globalChainParams = CreateChainParams(network);\n+    globalChainParams = CreateChainParams(gArgs, network);\n }"
      },
      {
        "sha": "d8b25c722046adc298c1c092f39b793257766674",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -119,7 +119,7 @@ class CChainParams\n  * @returns a CChainParams* of the chosen chain.\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<const CChainParams> CreateChainParams(const ArgsManager& args, const std::string& chain);\n \n /**\n  * Return the currently selected parameters. This won't change after app"
      },
      {
        "sha": "44fe56dba206acdb0c14da68b6c86c6482f5c4bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -380,10 +380,10 @@ void SetupServerArgs(NodeContext& node)\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n-    const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n-    const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const auto signetChainParams = CreateChainParams(CBaseChainParams::SIGNET);\n-    const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n+    const auto defaultChainParams = CreateChainParams(argsman, CBaseChainParams::MAIN);\n+    const auto testnetChainParams = CreateChainParams(argsman, CBaseChainParams::TESTNET);\n+    const auto signetChainParams = CreateChainParams(argsman, CBaseChainParams::SIGNET);\n+    const auto regtestChainParams = CreateChainParams(argsman, CBaseChainParams::REGTEST);\n \n     // Hidden Options\n     std::vector<std::string> hidden_args = {"
      },
      {
        "sha": "6c2db52f63e633d0928c1e772d63450081554dd4",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -94,12 +94,12 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             SendCoinsRecipient r;\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n-                auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN);\n+                auto tempChainParams = CreateChainParams(gArgs, CBaseChainParams::MAIN);\n \n                 if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n                     SelectParams(CBaseChainParams::MAIN);\n                 } else {\n-                    tempChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+                    tempChainParams = CreateChainParams(gArgs, CBaseChainParams::TESTNET);\n                     if (IsValidDestinationString(r.address.toStdString(), *tempChainParams)) {\n                         SelectParams(CBaseChainParams::TESTNET);\n                     }"
      },
      {
        "sha": "3de79a9f45f66d561256ccba2ab0670ccd644ed4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -198,7 +198,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     const CChainParams& chainparams = *chainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;"
      },
      {
        "sha": "1d7f4861fba9796ab10e16a46598369562a2ef9a",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_SUITE(pow_tests, BasicTestingSetup)\n /* Test calculation of next difficulty target with no constraints applying */\n BOOST_AUTO_TEST_CASE(get_next_work)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1261130161; // Block #30240\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 32255;\n@@ -26,7 +26,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n /* Test the constraint on the upper bound for next work */\n BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1231006505; // Block #0\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 2015;\n@@ -38,7 +38,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n /* Test the constraint on the lower bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1279008237; // Block #66528\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 68543;\n@@ -50,7 +50,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n /* Test the constraint on the upper bound for actual time taken */\n BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     int64_t nLastRetargetTime = 1263163443; // NOTE: Not an actual block time\n     CBlockIndex pindexLast;\n     pindexLast.nHeight = 46367;\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_negative_target)\n {\n-    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     nBits = UintToArith256(consensus.powLimit).GetCompact(true);\n@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_negative_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_overflow_target)\n {\n-    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits = ~0x00800000;\n     hash.SetHex(\"0x1\");\n@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_overflow_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_too_easy_target)\n {\n-    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 nBits_arith = UintToArith256(consensus.powLimit);\n@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_too_easy_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_biger_hash_than_target)\n {\n-    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 hash_arith = UintToArith256(consensus.powLimit);\n@@ -104,7 +104,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_biger_hash_than_target)\n \n BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_zero_target)\n {\n-    const auto consensus = CreateChainParams(CBaseChainParams::MAIN)->GetConsensus();\n+    const auto consensus = CreateChainParams(*m_node.args, CBaseChainParams::MAIN)->GetConsensus();\n     uint256 hash;\n     unsigned int nBits;\n     arith_uint256 hash_arith{0};\n@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(CheckProofOfWork_test_zero_target)\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     std::vector<CBlockIndex> blocks(10000);\n     for (int i = 0; i < 10000; i++) {\n         blocks[i].pprev = i ? &blocks[i - 1] : nullptr;\n@@ -135,9 +135,9 @@ BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)\n     }\n }\n \n-void sanity_check_chainparams(std::string chainName)\n+void sanity_check_chainparams(const ArgsManager& args, std::string chainName)\n {\n-    const auto chainParams = CreateChainParams(chainName);\n+    const auto chainParams = CreateChainParams(args, chainName);\n     const auto consensus = chainParams->GetConsensus();\n \n     // hash genesis is correct\n@@ -164,22 +164,22 @@ void sanity_check_chainparams(std::string chainName)\n \n BOOST_AUTO_TEST_CASE(ChainParams_MAIN_sanity)\n {\n-    sanity_check_chainparams(CBaseChainParams::MAIN);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::MAIN);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_REGTEST_sanity)\n {\n-    sanity_check_chainparams(CBaseChainParams::REGTEST);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::REGTEST);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_TESTNET_sanity)\n {\n-    sanity_check_chainparams(CBaseChainParams::TESTNET);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::TESTNET);\n }\n \n BOOST_AUTO_TEST_CASE(ChainParams_SIGNET_sanity)\n {\n-    sanity_check_chainparams(CBaseChainParams::SIGNET);\n+    sanity_check_chainparams(*m_node.args, CBaseChainParams::SIGNET);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "aff7b7ca3e2feb4bcc466fd201e3b55e0a4fe7b8",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -39,15 +39,15 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     TestBlockSubsidyHalvings(chainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n         CAmount nSubsidy = GetBlockSubsidy(nHeight, chainParams->GetConsensus());"
      },
      {
        "sha": "50444f7bbe3de31ee509dc46d5d8a0995c6e3da0",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa23308e9aad70c99a31f91d8556f1876ea02c04/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n \n     // Sanity checks of version bit deployments\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n         uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n     // on mainnet.\n-    const auto chainParams = CreateChainParams(CBaseChainParams::MAIN);\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes."
      }
    ]
  },
  {
    "sha": "fa29b5ae666bbb4c19188f0dcf8a1ba738aac624",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI5YjVhZTY2NmJiYjRjMTkxODhmMGRjZjhhMWJhNzM4YWFjNjI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-23T14:17:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-29T08:23:10Z"
      },
      "message": "test: Add signet witness commitment section parse tests",
      "tree": {
        "sha": "0faf7f47b6c218c6f59b0030ef8f54d117c6c9c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0faf7f47b6c218c6f59b0030ef8f54d117c6c9c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiGMgv+MJNbebby+T69fTczjmsWqOS0AQvmZKdm3KaORnlWNEqGGd3ouyJPx0CG\nRZEl1ubRQROtDA+REY0TAPIUJ7zZBlAZj1NCrbUAuWjlySvK29hNN4MHBf47hVR6\nW7wg6U7mYdqsNeiRNL368thwuPbF4N/V4PtiSUtki5ZIf+MKmTNaaZa3t/BNA8J7\n7oZgLi33M8UZo5PXopKese/PBOumuUbbnzliugnJ+tfbbPdiQo6jJitpScCsvY+h\nw0qUN9asR7e9NRjTEYAMStftaNkgW6HONxf2qZdXbvOjXh/6JIB2T5ONOUbrXAy9\niV1WEr1M1k551GgHEyYVkqWDZJj3uAvgJZDDXVL6UrD2F1lvbtxSlpFpRudcRE9f\n5yiY0WU/fR0h8z79o0k5s4jL06M1i+Y9vbIbl8Dha1RHv699hdSkbdF4mzZ7ZBED\nJRvE4qQPzWRDJ5f7rcNbNd3TGT0OQYfPSq/YKdeXIcUq7EOn8VGUqVxM55lz1Ztk\nkIdv8uR6\n=VKvt\n-----END PGP SIGNATURE-----",
        "payload": "tree 0faf7f47b6c218c6f59b0030ef8f54d117c6c9c4\nparent fa23308e9aad70c99a31f91d8556f1876ea02c04\nauthor MarcoFalke <falke.marco@gmail.com> 1600870670 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1601367790 +0200\n\ntest: Add signet witness commitment section parse tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa23308e9aad70c99a31f91d8556f1876ea02c04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa23308e9aad70c99a31f91d8556f1876ea02c04"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a9ece50136b75a2f2c02be0f9ff37a715415d19d",
        "filename": "src/test/validation_tests.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624/src/test/validation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa29b5ae666bbb4c19188f0dcf8a1ba738aac624/src/test/validation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_tests.cpp?ref=fa29b5ae666bbb4c19188f0dcf8a1ba738aac624",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <chainparams.h>\n #include <net.h>\n+#include <signet.h>\n #include <validation.h>\n \n #include <test/util/setup_common.h>\n@@ -58,6 +59,67 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n     BOOST_CHECK_EQUAL(nSum, CAmount{2099999997690000});\n }\n \n+BOOST_AUTO_TEST_CASE(signet_parse_tests)\n+{\n+    ArgsManager signet_argsman;\n+    signet_argsman.ForceSetArg(\"-signetchallenge\", \"51\"); // set challenge to OP_TRUE\n+    const auto signet_params = CreateChainParams(signet_argsman, CBaseChainParams::SIGNET);\n+    CBlock block;\n+    BOOST_CHECK(signet_params->GetConsensus().signet_challenge == std::vector<uint8_t>{{OP_TRUE}});\n+    CScript challenge{OP_TRUE};\n+\n+    // empty block is invalid\n+    BOOST_CHECK(!SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // no witness commitment\n+    CMutableTransaction cb;\n+    cb.vout.emplace_back(0, CScript{});\n+    block.vtx.push_back(MakeTransactionRef(cb));\n+    block.vtx.push_back(MakeTransactionRef(cb)); // Add dummy tx to excercise merkle root code\n+    BOOST_CHECK(!SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // no header is treated valid\n+    std::vector<uint8_t> witness_commitment_section_141{0xaa, 0x21, 0xa9, 0xed};\n+    for (int i = 0; i < 32; ++i) {\n+        witness_commitment_section_141.push_back(0xff);\n+    }\n+    cb.vout.at(0).scriptPubKey = CScript{} << OP_RETURN << witness_commitment_section_141;\n+    block.vtx.at(0) = MakeTransactionRef(cb);\n+    BOOST_CHECK(SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // no data after header, valid\n+    std::vector<uint8_t> witness_commitment_section_325{0xec, 0xc7, 0xda, 0xa2};\n+    cb.vout.at(0).scriptPubKey = CScript{} << OP_RETURN << witness_commitment_section_141 << witness_commitment_section_325;\n+    block.vtx.at(0) = MakeTransactionRef(cb);\n+    BOOST_CHECK(SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // Premature end of data, invalid\n+    witness_commitment_section_325.push_back(0x01);\n+    witness_commitment_section_325.push_back(0x51);\n+    cb.vout.at(0).scriptPubKey = CScript{} << OP_RETURN << witness_commitment_section_141 << witness_commitment_section_325;\n+    block.vtx.at(0) = MakeTransactionRef(cb);\n+    BOOST_CHECK(!SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // has data, valid\n+    witness_commitment_section_325.push_back(0x00);\n+    cb.vout.at(0).scriptPubKey = CScript{} << OP_RETURN << witness_commitment_section_141 << witness_commitment_section_325;\n+    block.vtx.at(0) = MakeTransactionRef(cb);\n+    BOOST_CHECK(SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+\n+    // Extraneous data, invalid\n+    witness_commitment_section_325.push_back(0x00);\n+    cb.vout.at(0).scriptPubKey = CScript{} << OP_RETURN << witness_commitment_section_141 << witness_commitment_section_325;\n+    block.vtx.at(0) = MakeTransactionRef(cb);\n+    BOOST_CHECK(!SignetTxs::Create(block, challenge));\n+    BOOST_CHECK(!CheckSignetBlockSolution(block, signet_params->GetConsensus()));\n+}\n+\n static bool ReturnFalse() { return false; }\n static bool ReturnTrue() { return true; }\n "
      }
    ]
  }
]