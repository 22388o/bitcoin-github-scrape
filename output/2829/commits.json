[
  {
    "sha": "12dff9801f92d37c330ccf4776da36a3910abec4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmRmZjk4MDFmOTJkMzdjMzMwY2NmNDc3NmRhMzZhMzkxMGFiZWM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-22T20:23:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-23T22:56:45Z"
      },
      "message": "Add HMAC-SHA512 to hash",
      "tree": {
        "sha": "e0c6123959759ec57ee6fff354a41f548bedb770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0c6123959759ec57ee6fff354a41f548bedb770"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12dff9801f92d37c330ccf4776da36a3910abec4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dff9801f92d37c330ccf4776da36a3910abec4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12dff9801f92d37c330ccf4776da36a3910abec4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dff9801f92d37c330ccf4776da36a3910abec4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee4949794bb7f881a67266ad598edb5cf6019d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee4949794bb7f881a67266ad598edb5cf6019d31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee4949794bb7f881a67266ad598edb5cf6019d31"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 176,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b054bd1545d51fef9e742c5fa1289bd379ee2b5",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dff9801f92d37c330ccf4776da36a3910abec4/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dff9801f92d37c330ccf4776da36a3910abec4/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=12dff9801f92d37c330ccf4776da36a3910abec4",
        "patch": "@@ -56,3 +56,44 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n     return h1;\n }\n+\n+int HMAC_SHA512_Init(HMAC_SHA512_CTX *pctx, const void *pkey, size_t len)\n+{\n+    unsigned char key[128];\n+    if (len <= 128)\n+    {\n+        memcpy(key, pkey, len);\n+        memset(key + len, 0, 128-len);\n+    }\n+    else\n+    {\n+        SHA512_CTX ctxKey;\n+        SHA512_Init(&ctxKey);\n+        SHA512_Update(&ctxKey, pkey, len);\n+        SHA512_Final(key, &ctxKey);\n+        memset(key + 64, 0, 64);\n+    }\n+\n+    for (int n=0; n<128; n++)\n+        key[n] ^= 0x5c;\n+    SHA512_Init(&pctx->ctxOuter);\n+    SHA512_Update(&pctx->ctxOuter, key, 128);\n+\n+    for (int n=0; n<128; n++)\n+        key[n] ^= 0x5c ^ 0x36;\n+    SHA512_Init(&pctx->ctxInner);\n+    return SHA512_Update(&pctx->ctxInner, key, 128);\n+}\n+\n+int HMAC_SHA512_Update(HMAC_SHA512_CTX *pctx, const void *pdata, size_t len)\n+{\n+    return SHA512_Update(&pctx->ctxInner, pdata, len);\n+}\n+\n+int HMAC_SHA512_Final(unsigned char *pmd, HMAC_SHA512_CTX *pctx)\n+{\n+    unsigned char buf[64];\n+    SHA512_Final(buf, &pctx->ctxInner);\n+    SHA512_Update(&pctx->ctxOuter, buf, 64);\n+    return SHA512_Final(pmd, &pctx->ctxOuter);\n+}"
      },
      {
        "sha": "880468a2d205537f659005a0dc56fc86144bc8a8",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dff9801f92d37c330ccf4776da36a3910abec4/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dff9801f92d37c330ccf4776da36a3910abec4/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=12dff9801f92d37c330ccf4776da36a3910abec4",
        "patch": "@@ -123,4 +123,14 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n+typedef struct\n+{\n+    SHA512_CTX ctxInner;\n+    SHA512_CTX ctxOuter;\n+} HMAC_SHA512_CTX;\n+\n+int HMAC_SHA512_Init(HMAC_SHA512_CTX *pctx, const void *pkey, size_t len);\n+int HMAC_SHA512_Update(HMAC_SHA512_CTX *pctx, const void *pdata, size_t len);\n+int HMAC_SHA512_Final(unsigned char *pmd, HMAC_SHA512_CTX *pctx);\n+\n #endif"
      },
      {
        "sha": "92ca5e6aff2911b71b448ea19c3561c43c32c9e4",
        "filename": "src/test/hmac_tests.cpp",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dff9801f92d37c330ccf4776da36a3910abec4/src/test/hmac_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dff9801f92d37c330ccf4776da36a3910abec4/src/test/hmac_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hmac_tests.cpp?ref=12dff9801f92d37c330ccf4776da36a3910abec4",
        "patch": "@@ -0,0 +1,125 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"hash.h\"\n+#include \"util.h\"\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(hmac_tests)\n+\n+typedef struct {\n+    const char *pszKey;\n+    const char *pszData;\n+    const char *pszMAC;\n+} testvec_t;\n+\n+// test cases 1, 2, 3, 4, 6 and 7 of RFC 4231\n+static const testvec_t vtest[] = {\n+    {\n+        \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\"\n+        \"0b0b0b0b\",\n+        \"4869205468657265\",\n+        \"87aa7cdea5ef619d4ff0b4241a1d6cb0\"\n+        \"2379f4e2ce4ec2787ad0b30545e17cde\"\n+        \"daa833b7d6b8a702038b274eaea3f4e4\"\n+        \"be9d914eeb61f1702e696c203a126854\"\n+    },\n+    {\n+        \"4a656665\",\n+        \"7768617420646f2079612077616e7420\"\n+        \"666f72206e6f7468696e673f\",\n+        \"164b7a7bfcf819e2e395fbe73b56e0a3\"\n+        \"87bd64222e831fd610270cd7ea250554\"\n+        \"9758bf75c05a994a6d034f65f8f0e6fd\"\n+        \"caeab1a34d4a6b4b636e070a38bce737\"\n+    },\n+    {\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaa\",\n+        \"dddddddddddddddddddddddddddddddd\"\n+        \"dddddddddddddddddddddddddddddddd\"\n+        \"dddddddddddddddddddddddddddddddd\"\n+        \"dddd\",\n+        \"fa73b0089d56a284efb0f0756c890be9\"\n+        \"b1b5dbdd8ee81a3655f83e33b2279d39\"\n+        \"bf3e848279a722c806b485a47e67c807\"\n+        \"b946a337bee8942674278859e13292fb\"\n+    },\n+    {\n+        \"0102030405060708090a0b0c0d0e0f10\"\n+        \"111213141516171819\",\n+        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n+        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n+        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n+        \"cdcd\",\n+        \"b0ba465637458c6990e5a8c5f61d4af7\"\n+        \"e576d97ff94b872de76f8050361ee3db\"\n+        \"a91ca5c11aa25eb4d679275cc5788063\"\n+        \"a5f19741120c4f2de2adebeb10a298dd\"\n+    },\n+    {\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaa\",\n+        \"54657374205573696e67204c61726765\"\n+        \"72205468616e20426c6f636b2d53697a\"\n+        \"65204b6579202d2048617368204b6579\"\n+        \"204669727374\",\n+        \"80b24263c7c1a3ebb71493c1dd7be8b4\"\n+        \"9b46d1f41b4aeec1121b013783f8f352\"\n+        \"6b56d037e05f2598bd0fd2215d6a1e52\"\n+        \"95e64f73f63f0aec8b915a985d786598\"\n+    },\n+    {\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+        \"aaaaaa\",\n+        \"54686973206973206120746573742075\"\n+        \"73696e672061206c6172676572207468\"\n+        \"616e20626c6f636b2d73697a65206b65\"\n+        \"7920616e642061206c61726765722074\"\n+        \"68616e20626c6f636b2d73697a652064\"\n+        \"6174612e20546865206b6579206e6565\"\n+        \"647320746f2062652068617368656420\"\n+        \"6265666f7265206265696e6720757365\"\n+        \"642062792074686520484d414320616c\"\n+        \"676f726974686d2e\",\n+        \"e37b6a775dc87dbaa4dfa9f96e5e3ffd\"\n+        \"debd71f8867289865df5a32d20cdc944\"\n+        \"b6022cac3c4982b10d5eeb55c3e4de15\"\n+        \"134676fb6de0446065c97440fa8c6a58\"\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(hmacsha512_testvectors)\n+{\n+    for (unsigned int n=0; n<sizeof(vtest)/sizeof(vtest[0]); n++)\n+    {\n+        vector<unsigned char> vchKey  = ParseHex(vtest[n].pszKey);\n+        vector<unsigned char> vchData = ParseHex(vtest[n].pszData);\n+        vector<unsigned char> vchMAC  = ParseHex(vtest[n].pszMAC);\n+        unsigned char vchTemp[64];\n+\n+        HMAC_SHA512_CTX ctx;\n+        HMAC_SHA512_Init(&ctx, &vchKey[0], vchKey.size());\n+        HMAC_SHA512_Update(&ctx, &vchData[0], vchData.size());\n+        HMAC_SHA512_Final(&vchTemp[0], &ctx);\n+\n+        BOOST_CHECK(memcmp(&vchTemp[0], &vchMAC[0], 64) == 0);\n+\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "8388289eb6dfc9add233f8f8b536f84caf771fa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mzg4Mjg5ZWI2ZGZjOWFkZDIzM2Y4ZjhiNTM2Zjg0Y2FmNzcxZmE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-23T00:33:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-23T22:56:46Z"
      },
      "message": "Generalize version bytes",
      "tree": {
        "sha": "7e6e31a378a1b72e8903262de89daeb13db02694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e6e31a378a1b72e8903262de89daeb13db02694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8388289eb6dfc9add233f8f8b536f84caf771fa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8388289eb6dfc9add233f8f8b536f84caf771fa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8388289eb6dfc9add233f8f8b536f84caf771fa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8388289eb6dfc9add233f8f8b536f84caf771fa6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12dff9801f92d37c330ccf4776da36a3910abec4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dff9801f92d37c330ccf4776da36a3910abec4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12dff9801f92d37c330ccf4776da36a3910abec4"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 35,
      "deletions": 36
    },
    "files": [
      {
        "sha": "1d4c3ee2940bd059f3f1b32687ba98d314d551f4",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=8388289eb6dfc9add233f8f8b536f84caf771fa6",
        "patch": "@@ -177,47 +177,47 @@ inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>\n class CBase58Data\n {\n protected:\n-    // the version byte\n-    unsigned char nVersion;\n+    // the version byte(s)\n+    std::vector<unsigned char> vchVersion;\n \n     // the actually encoded data\n     typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n     vector_uchar vchData;\n \n     CBase58Data()\n     {\n-        nVersion = 0;\n+        vchVersion.clear();\n         vchData.clear();\n     }\n \n-    void SetData(int nVersionIn, const void* pdata, size_t nSize)\n+    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize)\n     {\n-        nVersion = nVersionIn;\n+        vchVersion = vchVersionIn;\n         vchData.resize(nSize);\n         if (!vchData.empty())\n             memcpy(&vchData[0], pdata, nSize);\n     }\n \n-    void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n+    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n     {\n-        SetData(nVersionIn, (void*)pbegin, pend - pbegin);\n+        SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n     }\n \n public:\n-    bool SetString(const char* psz)\n+    bool SetString(const char* psz, unsigned int nVersionBytes = 1)\n     {\n         std::vector<unsigned char> vchTemp;\n         DecodeBase58Check(psz, vchTemp);\n-        if (vchTemp.empty())\n+        if (vchTemp.size() < nVersionBytes)\n         {\n             vchData.clear();\n-            nVersion = 0;\n+            vchVersion.clear();\n             return false;\n         }\n-        nVersion = vchTemp[0];\n-        vchData.resize(vchTemp.size() - 1);\n+        vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n+        vchData.resize(vchTemp.size() - nVersionBytes);\n         if (!vchData.empty())\n-            memcpy(&vchData[0], &vchTemp[1], vchData.size());\n+            memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n         OPENSSL_cleanse(&vchTemp[0], vchData.size());\n         return true;\n     }\n@@ -229,15 +229,15 @@ class CBase58Data\n \n     std::string ToString() const\n     {\n-        std::vector<unsigned char> vch(1, nVersion);\n+        std::vector<unsigned char> vch = vchVersion;\n         vch.insert(vch.end(), vchData.begin(), vchData.end());\n         return EncodeBase58Check(vch);\n     }\n \n     int CompareTo(const CBase58Data& b58) const\n     {\n-        if (nVersion < b58.nVersion) return -1;\n-        if (nVersion > b58.nVersion) return  1;\n+        if (vchVersion < b58.vchVersion) return -1;\n+        if (vchVersion > b58.vchVersion) return  1;\n         if (vchData < b58.vchData)   return -1;\n         if (vchData > b58.vchData)   return  1;\n         return 0;\n@@ -289,8 +289,8 @@ class CBitcoinAddress : public CBase58Data\n     bool IsValid() const\n     {\n         bool fCorrectSize = vchData.size() == 20;\n-        bool fKnownVersion = nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                             nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        bool fKnownVersion = vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                             vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n         return fCorrectSize && fKnownVersion;\n     }\n \n@@ -318,16 +318,16 @@ class CBitcoinAddress : public CBase58Data\n             return CNoDestination();\n         uint160 id;\n         memcpy(&id, &vchData[0], 20);\n-        if (nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return CKeyID(id);\n-        else if (nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n+        else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n             return CScriptID(id);\n         else\n             return CNoDestination();\n     }\n \n     bool GetKeyID(CKeyID &keyID) const {\n-        if (!IsValid() || nVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return false;\n         uint160 id;\n         memcpy(&id, &vchData[0], 20);\n@@ -336,7 +336,7 @@ class CBitcoinAddress : public CBase58Data\n     }\n \n     bool IsScript() const {\n-        return IsValid() && nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n     }\n };\n \n@@ -366,7 +366,7 @@ class CBitcoinSecret : public CBase58Data\n     bool IsValid() const\n     {\n         bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n-        bool fCorrectVersion = nVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n         return fExpectedFormat && fCorrectVersion;\n     }\n "
      },
      {
        "sha": "69636e5be57d0611d472cd49428b9fe9a6b35d09",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8388289eb6dfc9add233f8f8b536f84caf771fa6",
        "patch": "@@ -9,6 +9,10 @@\n #include \"main.h\"\n #include \"util.h\"\n \n+#include <boost/assign/list_of.hpp>\n+\n+using namespace boost::assign;\n+\n //\n // Main network\n //\n@@ -140,9 +144,9 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = 0;\n-        base58Prefixes[SCRIPT_ADDRESS] = 5;\n-        base58Prefixes[SECRET_KEY] = 128;\n+        base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n+        base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n+        base58Prefixes[SECRET_KEY] =     list_of(128);\n \n         // Convert the pnSeeds array into usable address objects.\n         for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n@@ -202,10 +206,9 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = 111;\n-        base58Prefixes[SCRIPT_ADDRESS] = 196;\n-        base58Prefixes[SECRET_KEY] = 239;\n-\n+        base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n+        base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n+        base58Prefixes[SECRET_KEY]     = list_of(239);\n     }\n     virtual Network NetworkID() const { return CChainParams::TESTNET; }\n };\n@@ -233,10 +236,6 @@ class CRegTestParams : public CTestNetParams {\n         assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n \n         vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n-\n-        base58Prefixes[PUBKEY_ADDRESS] = 0;\n-        base58Prefixes[SCRIPT_ADDRESS] = 5;\n-        base58Prefixes[SECRET_KEY] = 128;\n     }\n \n     virtual bool RequireRPCPassword() const { return false; }"
      },
      {
        "sha": "9f4c079ae281fb4f16f3e28b8eac25351785a605",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8388289eb6dfc9add233f8f8b536f84caf771fa6/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8388289eb6dfc9add233f8f8b536f84caf771fa6",
        "patch": "@@ -60,7 +60,7 @@ class CChainParams\n     const string& DataDir() const { return strDataDir; }\n     virtual Network NetworkID() const = 0;\n     const vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n-    int Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    const std::vector<unsigned char> &Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     virtual const vector<CAddress>& FixedSeeds() const = 0;\n     int RPCPort() const { return nRPCPort; }\n protected:\n@@ -76,7 +76,7 @@ class CChainParams\n     int nSubsidyHalvingInterval;\n     string strDataDir;\n     vector<CDNSSeedData> vSeeds;\n-    int base58Prefixes[MAX_BASE58_TYPES];\n+    std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjJjOTk5MDUwY2MxN2Y4OTI2YmZhN2EzZGFkNzQ4MDFjN2FjNGFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-14T23:05:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-14T23:05:25Z"
      },
      "message": "BIP32 derivation implementation",
      "tree": {
        "sha": "c5adba99014c72f7f465f4732b137309fb11bf58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5adba99014c72f7f465f4732b137309fb11bf58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8388289eb6dfc9add233f8f8b536f84caf771fa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8388289eb6dfc9add233f8f8b536f84caf771fa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8388289eb6dfc9add233f8f8b536f84caf771fa6"
      }
    ],
    "stats": {
      "total": 258,
      "additions": 258,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aabae8de88e7ec48519deb749e57698eeeb8a242",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "patch": "@@ -390,4 +390,30 @@ class CBitcoinSecret : public CBase58Data\n     }\n };\n \n+\n+template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n+{\n+public:\n+    void SetKey(const K &key) {\n+        unsigned char vch[Size];\n+        key.Encode(vch);\n+        SetData(Params().Base58Prefix(Type), vch, vch+Size);\n+    }\n+\n+    K GetKey() {\n+        K ret;\n+        ret.Decode(&vchData[0], &vchData[Size]);\n+        return ret;\n+    }\n+\n+    CBitcoinExtKeyBase(const K &key) {\n+        SetKey(key);\n+    }\n+\n+    CBitcoinExtKeyBase() {}\n+};\n+\n+typedef CBitcoinExtKeyBase<CExtKey, 74, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n+typedef CBitcoinExtKeyBase<CExtPubKey, 74, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n+\n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "49873023ae8ebbe4bd9d85d385caa586ddeed723",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "patch": "@@ -147,6 +147,8 @@ class CMainParams : public CChainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n         base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n         base58Prefixes[SECRET_KEY] =     list_of(128);\n+        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x88)(0xB2)(0x1E);\n+        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x88)(0xAD)(0xE4);\n \n         // Convert the pnSeeds array into usable address objects.\n         for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n@@ -209,6 +211,8 @@ class CTestNetParams : public CMainParams {\n         base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n         base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n         base58Prefixes[SECRET_KEY]     = list_of(239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n+        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n     }\n     virtual Network NetworkID() const { return CChainParams::TESTNET; }\n };"
      },
      {
        "sha": "1930e49afb95bcc9c7b0706f73a12e408a3bd053",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "patch": "@@ -45,6 +45,8 @@ class CChainParams\n         PUBKEY_ADDRESS,\n         SCRIPT_ADDRESS,\n         SECRET_KEY,\n+        EXT_PUBLIC_KEY,\n+        EXT_SECRET_KEY,\n \n         MAX_BASE58_TYPES\n     };"
      },
      {
        "sha": "7092b0e0c81e42dee9918f4097cfdbd671280432",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <openssl/bn.h>\n #include <openssl/ecdsa.h>\n #include <openssl/rand.h>\n #include <openssl/obj_mac.h>\n@@ -253,6 +254,57 @@ class CECKey {\n         ECDSA_SIG_free(sig);\n         return ret;\n     }\n+\n+    static bool TweakSecret(unsigned char vchSecretOut[32], const unsigned char vchSecretIn[32], const unsigned char vchTweak[32])\n+    {\n+        bool ret = true;\n+        BN_CTX *ctx = BN_CTX_new();\n+        BN_CTX_start(ctx);\n+        BIGNUM *bnSecret = BN_CTX_get(ctx);\n+        BIGNUM *bnTweak = BN_CTX_get(ctx);\n+        BIGNUM *bnOrder = BN_CTX_get(ctx);\n+        EC_GROUP *group = EC_GROUP_new_by_curve_name(NID_secp256k1);\n+        EC_GROUP_get_order(group, bnOrder, ctx); // what a grossly inefficient way to get the (constant) group order...\n+        BN_bin2bn(vchTweak, 32, bnTweak);\n+        if (BN_cmp(bnTweak, bnOrder) >= 0)\n+            ret = false; // extremely unlikely\n+        BN_bin2bn(vchSecretIn, 32, bnSecret);\n+        BN_add(bnSecret, bnSecret, bnTweak);\n+        BN_nnmod(bnSecret, bnSecret, bnOrder, ctx);\n+        if (BN_is_zero(bnSecret))\n+            ret = false; // ridiculously unlikely\n+        int nBits = BN_num_bits(bnSecret);\n+        memset(vchSecretOut, 0, 32);\n+        BN_bn2bin(bnSecret, &vchSecretOut[32-(nBits+7)/8]);\n+        EC_GROUP_free(group);\n+        BN_CTX_end(ctx);\n+        BN_CTX_free(ctx);\n+        return ret;\n+    }\n+\n+    bool TweakPublic(const unsigned char vchTweak[32]) {\n+        bool ret = true;\n+        BN_CTX *ctx = BN_CTX_new();\n+        BN_CTX_start(ctx);\n+        BIGNUM *bnTweak = BN_CTX_get(ctx);\n+        BIGNUM *bnOrder = BN_CTX_get(ctx);\n+        BIGNUM *bnOne = BN_CTX_get(ctx);\n+        const EC_GROUP *group = EC_KEY_get0_group(pkey);\n+        EC_GROUP_get_order(group, bnOrder, ctx); // what a grossly inefficient way to get the (constant) group order...\n+        BN_bin2bn(vchTweak, 32, bnTweak);\n+        if (BN_cmp(bnTweak, bnOrder) >= 0)\n+            ret = false; // extremely unlikely\n+        EC_POINT *point = EC_POINT_dup(EC_KEY_get0_public_key(pkey), group);\n+        BN_one(bnOne);\n+        EC_POINT_mul(group, point, bnTweak, point, bnOne, ctx);\n+        if (EC_POINT_is_at_infinity(group, point))\n+            ret = false; // ridiculously unlikely\n+        EC_KEY_set_public_key(pkey, point);\n+        EC_POINT_free(point);\n+        BN_CTX_end(ctx);\n+        BN_CTX_free(ctx);\n+        return ret;\n+    }\n };\n \n }; // end of anonymous namespace\n@@ -393,3 +445,131 @@ bool CPubKey::Decompress() {\n     key.GetPubKey(*this, false);\n     return true;\n }\n+\n+void static BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]) {\n+    unsigned char num[4];\n+    num[0] = (nChild >> 24) & 0xFF;\n+    num[1] = (nChild >> 16) & 0xFF;\n+    num[2] = (nChild >>  8) & 0xFF;\n+    num[3] = (nChild >>  0) & 0xFF;\n+    HMAC_SHA512_CTX ctx;\n+    HMAC_SHA512_Init(&ctx, chainCode, 32);\n+    HMAC_SHA512_Update(&ctx, &header, 1);\n+    HMAC_SHA512_Update(&ctx, data, 32);\n+    HMAC_SHA512_Update(&ctx, num, 4);\n+    HMAC_SHA512_Final(output, &ctx);\n+}\n+\n+bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n+    assert(IsValid());\n+    assert(IsCompressed());\n+    unsigned char out[64];\n+    LockObject(out);\n+    if ((nChild >> 31) == 0) {\n+        CPubKey pubkey = GetPubKey();\n+        assert(pubkey.begin() + 33 == pubkey.end());\n+        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, out);\n+    } else {\n+        assert(begin() + 32 == end());\n+        BIP32Hash(cc, nChild, 0, begin(), out);\n+    }\n+    memcpy(ccChild, out+32, 32);\n+    bool ret = CECKey::TweakSecret((unsigned char*)keyChild.begin(), begin(), out);\n+    UnlockObject(out);\n+    keyChild.fCompressed = true;\n+    keyChild.fValid = ret;\n+    return ret;\n+}\n+\n+bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n+    assert(IsValid());\n+    assert((nChild >> 31) == 0);\n+    assert(begin() + 33 == end());\n+    unsigned char out[64];\n+    BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n+    memcpy(ccChild, out+32, 32);\n+    CECKey key;\n+    bool ret = key.SetPubKey(*this);\n+    ret &= key.TweakPublic(out);\n+    key.GetPubKey(pubkeyChild, true);\n+    return ret;\n+}\n+\n+bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n+    out.nDepth = nDepth + 1;\n+    CKeyID id = key.GetPubKey().GetID();\n+    memcpy(&out.vchFingerprint[0], &id, 4);\n+    out.nChild = nChild;\n+    return key.Derive(out.key, out.vchChainCode, nChild, vchChainCode);\n+}\n+\n+void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n+    static const char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n+    HMAC_SHA512_CTX ctx;\n+    HMAC_SHA512_Init(&ctx, hashkey, sizeof(hashkey));\n+    HMAC_SHA512_Update(&ctx, seed, nSeedLen);\n+    unsigned char out[64];\n+    LockObject(out);\n+    HMAC_SHA512_Final(out, &ctx);\n+    key.Set(&out[0], &out[32], true);\n+    memcpy(vchChainCode, &out[32], 32);\n+    UnlockObject(out);\n+    nDepth = 0;\n+    nChild = 0;\n+    memset(vchFingerprint, 0, sizeof(vchFingerprint));\n+}\n+\n+CExtPubKey CExtKey::Neuter() const {\n+    CExtPubKey ret;\n+    ret.nDepth = nDepth;\n+    memcpy(&ret.vchFingerprint[0], &vchFingerprint[0], 4);\n+    ret.nChild = nChild;\n+    ret.pubkey = key.GetPubKey();\n+    memcpy(&ret.vchChainCode[0], &vchChainCode[0], 32);\n+    return ret;\n+}\n+\n+void CExtKey::Encode(unsigned char code[74]) const {\n+    code[0] = nDepth;\n+    memcpy(code+1, vchFingerprint, 4);\n+    code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n+    code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n+    memcpy(code+9, vchChainCode, 32);\n+    code[41] = 0;\n+    assert(key.size() == 32);\n+    memcpy(code+42, key.begin(), 32);\n+}\n+\n+void CExtKey::Decode(const unsigned char code[74]) {\n+    nDepth = code[0];\n+    memcpy(vchFingerprint, code+1, 4);\n+    nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n+    memcpy(vchChainCode, code+9, 32);\n+    key.Set(code+42, code+74, true);\n+}\n+\n+void CExtPubKey::Encode(unsigned char code[74]) const {\n+    code[0] = nDepth;\n+    memcpy(code+1, vchFingerprint, 4);\n+    code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n+    code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n+    memcpy(code+9, vchChainCode, 32);\n+    assert(pubkey.size() == 33);\n+    memcpy(code+41, pubkey.begin(), 33);\n+}\n+\n+void CExtPubKey::Decode(const unsigned char code[74]) {\n+    nDepth = code[0];\n+    memcpy(vchFingerprint, code+1, 4);\n+    nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n+    memcpy(vchChainCode, code+9, 32);\n+    pubkey.Set(code+41, code+74);\n+}\n+\n+bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n+    out.nDepth = nDepth + 1;\n+    CKeyID id = pubkey.GetID();\n+    memcpy(&out.vchFingerprint[0], &id, 4);\n+    out.nChild = nChild;\n+    return pubkey.Derive(out.pubkey, out.vchChainCode, nChild, vchChainCode);\n+}"
      },
      {
        "sha": "75431e944f264d892355a726084e30c3fe8d9390",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2c999050cc17f8926bfa7a3dad74801c7ac4af/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "patch": "@@ -161,6 +161,9 @@ class CPubKey {\n \n     // Turn this public key into an uncompressed public key.\n     bool Decompress();\n+\n+    // Derive BIP32 child pubkey.\n+    bool Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n };\n \n \n@@ -201,6 +204,10 @@ class CKey {\n         UnlockObject(vch);\n     }\n \n+    friend bool operator==(const CKey &a, const CKey &b) {\n+        return a.fCompressed == b.fCompressed && memcmp(&a.vch[0], &b.vch[0], 32);\n+    }\n+\n     // Initialize using begin and end iterators to byte data.\n     template<typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn) {\n@@ -251,6 +258,45 @@ class CKey {\n     //                  0x1D = second key with even y, 0x1E = second key with odd y,\n     //                  add 0x04 for compressed keys.\n     bool SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const;\n+\n+    // Derive BIP32 child key.\n+    bool Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n+};\n+\n+struct CExtPubKey {\n+    unsigned char nDepth;\n+    unsigned char vchFingerprint[4];\n+    unsigned int nChild;\n+    unsigned char vchChainCode[32];\n+    CPubKey pubkey;\n+\n+    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b) {\n+        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n+               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n+    }\n+\n+    void Encode(unsigned char code[74]) const;\n+    void Decode(const unsigned char code[74]);\n+    bool Derive(CExtPubKey &out, unsigned int nChild) const;\n+};\n+\n+struct CExtKey {\n+    unsigned char nDepth;\n+    unsigned char vchFingerprint[4];\n+    unsigned int nChild;\n+    unsigned char vchChainCode[32];\n+    CKey key;\n+\n+    friend bool operator==(const CExtKey &a, const CExtKey &b) {\n+        return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n+               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.key == b.key;\n+    }\n+\n+    void Encode(unsigned char code[74]) const;\n+    void Decode(const unsigned char code[74]);\n+    bool Derive(CExtKey &out, unsigned int nChild) const;\n+    CExtPubKey Neuter() const;\n+    void SetMaster(const unsigned char *seed, unsigned int nSeedLen);\n };\n \n #endif"
      }
    ]
  },
  {
    "sha": "a59db19ee3b454680b3bb0aa881e601b9311a9ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTlkYjE5ZWUzYjQ1NDY4MGIzYmIwYWE4ODFlNjAxYjkzMTFhOWFl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-14T23:05:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-14T23:07:19Z"
      },
      "message": "BIP32 test vectors",
      "tree": {
        "sha": "d0e17d15b4b2b824b103cddff192f7f62fc9f9fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0e17d15b4b2b824b103cddff192f7f62fc9f9fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a59db19ee3b454680b3bb0aa881e601b9311a9ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59db19ee3b454680b3bb0aa881e601b9311a9ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a59db19ee3b454680b3bb0aa881e601b9311a9ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a59db19ee3b454680b3bb0aa881e601b9311a9ae/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2c999050cc17f8926bfa7a3dad74801c7ac4af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2c999050cc17f8926bfa7a3dad74801c7ac4af"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 116,
      "deletions": 0
    },
    "files": [
      {
        "sha": "66d2330fbf98829fec8f051887b277f1b3e9c86c",
        "filename": "src/test/bip32_tests.cpp",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a59db19ee3b454680b3bb0aa881e601b9311a9ae/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a59db19ee3b454680b3bb0aa881e601b9311a9ae/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=a59db19ee3b454680b3bb0aa881e601b9311a9ae",
        "patch": "@@ -0,0 +1,116 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"key.h\"\n+#include \"base58.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+struct TestDerivation {\n+    std::string pub;\n+    std::string prv;\n+    unsigned int nChild;\n+};\n+\n+struct TestVector {\n+    std::string strHexMaster;\n+    std::vector<TestDerivation> vDerive;\n+\n+    TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}\n+\n+    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {\n+        vDerive.push_back(TestDerivation());\n+        TestDerivation &der = vDerive.back();\n+        der.pub = pub;\n+        der.prv = prv;\n+        der.nChild = nChild;\n+        return *this;\n+    }\n+};\n+\n+TestVector test1 =\n+  TestVector(\"000102030405060708090a0b0c0d0e0f\")\n+    (\"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\",\n+     \"xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\",\n+     0x80000000)\n+    (\"xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw\",\n+     \"xprv9uHRZZhk6KAJC1avXpDAp4MDc3sQKNxDiPvvkX8Br5ngLNv1TxvUxt4cV1rGL5hj6KCesnDYUhd7oWgT11eZG7XnxHrnYeSvkzY7d2bhkJ7\",\n+     1)\n+    (\"xpub6ASuArnXKPbfEwhqN6e3mwBcDTgzisQN1wXN9BJcM47sSikHjJf3UFHKkNAWbWMiGj7Wf5uMash7SyYq527Hqck2AxYysAA7xmALppuCkwQ\",\n+     \"xprv9wTYmMFdV23N2TdNG573QoEsfRrWKQgWeibmLntzniatZvR9BmLnvSxqu53Kw1UmYPxLgboyZQaXwTCg8MSY3H2EU4pWcQDnRnrVA1xe8fs\",\n+     0x80000002)\n+    (\"xpub6D4BDPcP2GT577Vvch3R8wDkScZWzQzMMUm3PWbmWvVJrZwQY4VUNgqFJPMM3No2dFDFGTsxxpG5uJh7n7epu4trkrX7x7DogT5Uv6fcLW5\",\n+     \"xprv9z4pot5VBttmtdRTWfWQmoH1taj2axGVzFqSb8C9xaxKymcFzXBDptWmT7FwuEzG3ryjH4ktypQSAewRiNMjANTtpgP4mLTj34bhnZX7UiM\",\n+     2)\n+    (\"xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV\",\n+     \"xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334\",\n+     1000000000)\n+    (\"xpub6H1LXWLaKsWFhvm6RVpEL9P4KfRZSW7abD2ttkWP3SSQvnyA8FSVqNTEcYFgJS2UaFcxupHiYkro49S8yGasTvXEYBVPamhGW6cFJodrTHy\",\n+     \"xprvA41z7zogVVwxVSgdKUHDy1SKmdb533PjDz7J6N6mV6uS3ze1ai8FHa8kmHScGpWmj4WggLyQjgPie1rFSruoUihUZREPSL39UNdE3BBDu76\",\n+     0);\n+\n+TestVector test2 =\n+  TestVector(\"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\")\n+    (\"xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB\",\n+     \"xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U\",\n+     0)\n+    (\"xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH\",\n+     \"xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt\",\n+     0xFFFFFFFF)\n+    (\"xpub6ASAVgeehLbnwdqV6UKMHVzgqAG8Gr6riv3Fxxpj8ksbH9ebxaEyBLZ85ySDhKiLDBrQSARLq1uNRts8RuJiHjaDMBU4Zn9h8LZNnBC5y4a\",\n+     \"xprv9wSp6B7kry3Vj9m1zSnLvN3xH8RdsPP1Mh7fAaR7aRLcQMKTR2vidYEeEg2mUCTAwCd6vnxVrcjfy2kRgVsFawNzmjuHc2YmYRmagcEPdU9\",\n+     1)\n+    (\"xpub6DF8uhdarytz3FWdA8TvFSvvAh8dP3283MY7p2V4SeE2wyWmG5mg5EwVvmdMVCQcoNJxGoWaU9DCWh89LojfZ537wTfunKau47EL2dhHKon\",\n+     \"xprv9zFnWC6h2cLgpmSA46vutJzBcfJ8yaJGg8cX1e5StJh45BBciYTRXSd25UEPVuesF9yog62tGAQtHjXajPPdbRCHuWS6T8XA2ECKADdw4Ef\",\n+     0xFFFFFFFE)\n+    (\"xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL\",\n+     \"xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc\",\n+     2)\n+    (\"xpub6FnCn6nSzZAw5Tw7cgR9bi15UV96gLZhjDstkXXxvCLsUXBGXPdSnLFbdpq8p9HmGsApME5hQTZ3emM2rnY5agb9rXpVGyy3bdW6EEgAtqt\",\n+     \"xprvA2nrNbFZABcdryreWet9Ea4LvTJcGsqrMzxHx98MMrotbir7yrKCEXw7nadnHM8Dq38EGfSh6dqA9QWTyefMLEcBYJUuekgW4BYPJcr9E7j\",\n+     0);\n+\n+void RunTest(const TestVector &test) {\n+    std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n+    CExtKey key;\n+    CExtPubKey pubkey;\n+    key.SetMaster(&seed[0], seed.size());\n+    pubkey = key.Neuter();\n+    BOOST_FOREACH(const TestDerivation &derive, test.vDerive) {\n+        unsigned char data[74];\n+        key.Encode(data);\n+        pubkey.Encode(data);\n+        // Test private key\n+        CBitcoinExtKey b58key; b58key.SetKey(key);\n+        BOOST_CHECK(b58key.ToString() == derive.prv);\n+        // Test public key\n+        CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n+        BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n+        // Derive new keys\n+        CExtKey keyNew;\n+        BOOST_CHECK(key.Derive(keyNew, derive.nChild));\n+        CExtPubKey pubkeyNew = keyNew.Neuter();\n+        if (!(derive.nChild & 0x80000000)) {\n+            // Compare with public derivation\n+            CExtPubKey pubkeyNew2;\n+            BOOST_CHECK(pubkey.Derive(pubkeyNew2, derive.nChild));\n+            BOOST_CHECK(pubkeyNew == pubkeyNew2);\n+        }\n+        key = keyNew;\n+        pubkey = pubkeyNew;\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE(bip32_tests)\n+\n+BOOST_AUTO_TEST_CASE(bip32_test1) {\n+    RunTest(test1);\n+}\n+\n+BOOST_AUTO_TEST_CASE(bip32_test2) {\n+    RunTest(test2);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]