[
  {
    "sha": "3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmZmYTRiMWYyMmE0ZmRjY2ZkM2Y1ZjgxMGQ3MzhiMGJkMDI0YzQ1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:32:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Add seggregated witness transaction serialization\n\nContains refactorings by Eric Lombrozo.",
      "tree": {
        "sha": "abe539259d4bdff764d801b28acc1cb985c15cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abe539259d4bdff764d801b28acc1cb985c15cc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9a9a3d2253ceccf123572b97a890c489a5a9be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9a9a3d2253ceccf123572b97a890c489a5a9be"
      }
    ],
    "stats": {
      "total": 300,
      "additions": 240,
      "deletions": 60
    },
    "files": [
      {
        "sha": "779a287e5ddc698a7d050571f61defa3f8df187a",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -96,7 +96,7 @@ bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx)\n         return false;\n \n     vector<unsigned char> txData(ParseHex(strHexTx));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssData >> tx;\n     }\n@@ -113,7 +113,7 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n         return false;\n \n     std::vector<unsigned char> blockData(ParseHex(strHexBlk));\n-    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssBlock(blockData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     try {\n         ssBlock >> block;\n     }"
      },
      {
        "sha": "dc90a86426a7130d10d154c618c5f87f789e6c1f",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -118,7 +118,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n \n string EncodeHexTx(const CTransaction& tx)\n {\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     ssTx << tx;\n     return HexStr(ssTx.begin(), ssTx.end());\n }"
      },
      {
        "sha": "5b26fdb93c81cc18c8e10bf4d80f632f605a975e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -4103,7 +4103,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             boost::this_thread::interruption_point();\n             it++;\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n@@ -4145,6 +4145,8 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         assert(!\"cannot load block from disk\");\n                     if (inv.type == MSG_BLOCK)\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n+                    if (inv.type == MSG_WITNESS_BLOCK)\n+                        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_WITNESS, NetMsgType::BLOCK, block);\n                     else // MSG_FILTERED_BLOCK)\n                     {\n                         LOCK(pfrom->cs_filter);\n@@ -4179,25 +4181,23 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     }\n                 }\n             }\n-            else if (inv.IsKnownType())\n+            else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)\n             {\n                 // Send stream from relay memory\n                 bool pushed = false;\n                 {\n-                    LOCK(cs_mapRelay);\n-                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n-                    if (mi != mapRelay.end()) {\n-                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n+                    LOCK(cs_mapRelayTx);\n+                    map<uint256, CTransaction>::iterator mi = mapRelayTx.find(inv.hash);\n+                    if (mi != mapRelayTx.end()) {\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, (*mi).second);\n                         pushed = true;\n                     }\n                 }\n-                if (!pushed && inv.type == MSG_TX) {\n+                if (!pushed && (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)) {\n                     CTransaction tx;\n                     if (mempool.lookup(inv.hash, tx)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-                        ss.reserve(1000);\n-                        ss << tx;\n-                        pfrom->PushMessage(NetMsgType::TX, ss);\n+                        pfrom->PushMessageWithFlag(inv.type == MSG_WITNESS_TX ? SERIALIZE_TRANSACTION_WITNESS : 0, NetMsgType::TX, tx);\n                         pushed = true;\n                     }\n                 }\n@@ -4209,7 +4209,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             // Track requests for our stuff.\n             GetMainSignals().Inventory(inv.hash);\n \n-            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n                 break;\n         }\n     }\n@@ -4681,7 +4681,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vector<uint256> vWorkQueue;\n         vector<uint256> vEraseQueue;\n         CTransaction tx;\n-        vRecv >> tx;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> tx;\n \n         CInv inv(MSG_TX, tx.GetHash());\n         pfrom->AddInventoryKnown(inv);\n@@ -4910,7 +4910,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlock block;\n-        vRecv >> block;\n+        WithOrVersion(&vRecv, SERIALIZE_TRANSACTION_WITNESS) >> block;\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n         LogPrint(\"net\", \"received block %s peer=%d\\n\", inv.hash.ToString(), pfrom->id);"
      },
      {
        "sha": "1716f74e0a32cfd9eb1ba99c9a600569c9309d89",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 17,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -91,9 +91,9 @@ std::string strSubVersion;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n-map<CInv, CDataStream> mapRelay;\n-deque<pair<int64_t, CInv> > vRelayExpiration;\n-CCriticalSection cs_mapRelay;\n+map<uint256, CTransaction> mapRelayTx;\n+deque<pair<int64_t, uint256> > vRelayTxExpiration;\n+CCriticalSection cs_mapRelayTx;\n limitedmap<CInv, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static deque<string> vOneShots;\n@@ -2060,28 +2060,20 @@ instance_of_cnetcleanup;\n \n \n void RelayTransaction(const CTransaction& tx)\n-{\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss.reserve(10000);\n-    ss << tx;\n-    RelayTransaction(tx, ss);\n-}\n-\n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     {\n-        LOCK(cs_mapRelay);\n+        LOCK(cs_mapRelayTx);\n         // Expire old relay messages\n-        while (!vRelayExpiration.empty() && vRelayExpiration.front().first < GetTime())\n+        while (!vRelayTxExpiration.empty() && vRelayTxExpiration.front().first < GetTime())\n         {\n-            mapRelay.erase(vRelayExpiration.front().second);\n-            vRelayExpiration.pop_front();\n+            mapRelayTx.erase(vRelayTxExpiration.front().second);\n+            vRelayTxExpiration.pop_front();\n         }\n \n         // Save original serialized message so newer versions are preserved\n-        mapRelay.insert(std::make_pair(inv, ss));\n-        vRelayExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv));\n+        mapRelayTx.insert(std::make_pair(inv.hash, tx));\n+        vRelayTxExpiration.push_back(std::make_pair(GetTime() + 15 * 60, inv.hash));\n     }\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)"
      },
      {
        "sha": "c64136943d6a5a3c4543ab0535730c26a7cdc0ab",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -161,9 +161,9 @@ extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n-extern std::map<CInv, CDataStream> mapRelay;\n-extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n-extern CCriticalSection cs_mapRelay;\n+extern std::map<uint256, CTransaction> mapRelayTx;\n+extern std::deque<std::pair<int64_t, uint256> > vRelayTxExpiration;\n+extern CCriticalSection cs_mapRelayTx;\n extern limitedmap<CInv, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n@@ -569,6 +569,23 @@ class CNode\n         }\n     }\n \n+    /** Send a message containing a1, serialized with flag flag. */\n+    template<typename T1>\n+    void PushMessageWithFlag(int flag, const char* pszCommand, const T1& a1)\n+    {\n+        try\n+        {\n+            BeginMessage(pszCommand);\n+            WithOrVersion(&ssSend, flag) << a1;\n+            EndMessage(pszCommand);\n+        }\n+        catch (...)\n+        {\n+            AbortMessage();\n+            throw;\n+        }\n+    }\n+\n     template<typename T1, typename T2>\n     void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)\n     {\n@@ -768,7 +785,6 @@ class CNode\n \n class CTransaction;\n void RelayTransaction(const CTransaction& tx);\n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      },
      {
        "sha": "4eefd42f55a483403ee17667732842dd3a5f4446",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -121,7 +121,6 @@ class CBlock : public CBlockHeader\n     std::string ToString() const;\n };\n \n-\n /** Describes a place in the block chain to another node such that if the\n  * other node doesn't have the same branch, it can find a recent common trunk.\n  * The further back it is, the further before the fork it may be."
      },
      {
        "sha": "462980bbcaf143a412f42ab8eae24a21818b85ec",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -60,28 +60,34 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n-CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {}\n+CMutableTransaction::CMutableTransaction(const CTransaction& tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n {\n-    return SerializeHash(*this);\n+    return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n void CTransaction::UpdateHash() const\n {\n-    *const_cast<uint256*>(&hash) = SerializeHash(*this);\n+    *const_cast<uint256*>(&hash) = SerializeHash(*this, SER_GETHASH, 0);\n+}\n+\n+uint256 CTransaction::GetWitnessHash() const\n+{\n+    return SerializeHash(*this, SER_GETHASH, SERIALIZE_TRANSACTION_WITNESS);\n }\n \n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n-CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {\n+CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), wit(tx.wit), nLockTime(tx.nLockTime) {\n     UpdateHash();\n }\n \n CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     *const_cast<int*>(&nVersion) = tx.nVersion;\n     *const_cast<std::vector<CTxIn>*>(&vin) = tx.vin;\n     *const_cast<std::vector<CTxOut>*>(&vout) = tx.vout;\n+    *const_cast<CTxWitness*>(&wit) = tx.wit;\n     *const_cast<unsigned int*>(&nLockTime) = tx.nLockTime;\n     *const_cast<uint256*>(&hash) = tx.hash;\n     return *this;\n@@ -140,3 +146,4 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n+"
      },
      {
        "sha": "65fbd88c4cf82f4908423105403eece6c82def94",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 137,
        "deletions": 11,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -11,6 +11,8 @@\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n+static const int SERIALIZE_TRANSACTION_WITNESS = 0x40000000;\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -171,8 +173,134 @@ class CTxOut\n     std::string ToString() const;\n };\n \n+class CTxinWitness\n+{\n+public:\n+    CScriptWitness scriptWitness;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(scriptWitness.stack);\n+    }\n+\n+    bool IsNull() const { return scriptWitness.IsNull(); }\n+\n+    CTxinWitness() { }\n+};\n+\n+class CTxWitness\n+{\n+public:\n+    /** In case vtxinwit is missing, all entries are treated as if they were empty CTxInWitnesses */\n+    std::vector<CTxinWitness> vtxinwit;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    bool IsEmpty() const { return vtxinwit.empty(); }\n+\n+    bool IsNull() const\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            if (!vtxinwit[n].IsNull()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    void SetNull()\n+    {\n+        vtxinwit.clear();\n+    }\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        for (size_t n = 0; n < vtxinwit.size(); n++) {\n+            READWRITE(vtxinwit[n]);\n+        }\n+        if (IsNull()) {\n+            /* It's illegal to encode a witness when all vtxinwit entries are empty. */\n+            throw std::ios_base::failure(\"Superfluous witness record\");\n+        }\n+    }\n+};\n+\n struct CMutableTransaction;\n \n+/**\n+ * Basic transaction serialization format:\n+ * - int32_t nVersion\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - uint32_t nLockTime\n+ *\n+ * Extended transaction serialization format:\n+ * - int32_t nVersion\n+ * - unsigned char dummy = 0x00\n+ * - unsigned char flags (!= 0)\n+ * - std::vector<CTxIn> vin\n+ * - std::vector<CTxOut> vout\n+ * - if (flags & 1):\n+ *   - CTxWitness wit;\n+ * - uint32_t nLockTime\n+ */\n+template<typename Stream, typename Operation, typename TxType>\n+inline void SerializeTransaction(TxType& tx, Stream& s, Operation ser_action, int nType, int nVersion) {\n+    READWRITE(*const_cast<int32_t*>(&tx.nVersion));\n+    unsigned char flags = 0;\n+    if (ser_action.ForRead()) {\n+        /* Try to read the vin. In case the dummy is there, this will be read as an empty vector. */\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        if (tx.vin.size() == 0) {\n+            /* We read a dummy or an empty vin. */\n+            READWRITE(flags);\n+            if (flags != 0) {\n+                /* Assume we read a dummy and a flag. */\n+                READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+                READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+            }\n+        } else {\n+            /* We read a non-empty vin. Assume a normal vout follows. */\n+            READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        }\n+        const_cast<CTxWitness*>(&tx.wit)->SetNull();\n+        if ((flags & 1) && (nVersion & SERIALIZE_TRANSACTION_WITNESS)) {\n+            /* The witness flag is present, and we support witnesses. */\n+            flags ^= 1;\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+        if (flags) {\n+            /* Unknown flag in the serialization */\n+            throw std::ios_base::failure(\"Unknown transaction optional data\");\n+        }\n+    } else {\n+        if (nVersion & SERIALIZE_TRANSACTION_WITNESS) {\n+            /* Check whether witnesses need to be serialized. */\n+            if (!tx.wit.IsNull()) {\n+                flags |= 1;\n+            }\n+        }\n+        if (flags) {\n+            /* Use extended format in case witnesses are to be serialized. */\n+            std::vector<CTxIn> vinDummy;\n+            READWRITE(vinDummy);\n+            READWRITE(flags);\n+        }\n+        READWRITE(*const_cast<std::vector<CTxIn>*>(&tx.vin));\n+        READWRITE(*const_cast<std::vector<CTxOut>*>(&tx.vout));\n+        if (flags & 1) {\n+            const_cast<CTxWitness*>(&tx.wit)->vtxinwit.resize(tx.vin.size());\n+            READWRITE(tx.wit);\n+        }\n+    }\n+    READWRITE(*const_cast<uint32_t*>(&tx.nLockTime));\n+}\n+\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n@@ -194,6 +322,7 @@ class CTransaction\n     const int32_t nVersion;\n     const std::vector<CTxIn> vin;\n     const std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     const uint32_t nLockTime;\n \n     /** Construct a CTransaction that qualifies as IsNull() */\n@@ -208,13 +337,10 @@ class CTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(*const_cast<int32_t*>(&this->nVersion));\n-        nVersion = this->nVersion;\n-        READWRITE(*const_cast<std::vector<CTxIn>*>(&vin));\n-        READWRITE(*const_cast<std::vector<CTxOut>*>(&vout));\n-        READWRITE(*const_cast<uint32_t*>(&nLockTime));\n-        if (ser_action.ForRead())\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n+        if (ser_action.ForRead()) {\n             UpdateHash();\n+        }\n     }\n \n     bool IsNull() const {\n@@ -225,6 +351,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // Compute a hash that includes both transaction and witness data\n+    uint256 GetWitnessHash() const;\n+\n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n@@ -260,6 +389,7 @@ struct CMutableTransaction\n     int32_t nVersion;\n     std::vector<CTxIn> vin;\n     std::vector<CTxOut> vout;\n+    CTxWitness wit;\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n@@ -269,11 +399,7 @@ struct CMutableTransaction\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(vin);\n-        READWRITE(vout);\n-        READWRITE(nLockTime);\n+        SerializeTransaction(*this, s, ser_action, nType, nVersion);\n     }\n \n     /** Compute the hash of this CMutableTransaction. This is computed on the"
      },
      {
        "sha": "c1384aa671a7b8b929d101196411a3c6e0d82e5e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -313,9 +313,10 @@ class CInv\n enum {\n     MSG_TX = 1,\n     MSG_BLOCK,\n-    // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,\n-    // MSG_FILTERED_BLOCK should not appear in any invs except as a part of getdata.\n+    // The following can only occur in getdata. Invs always use TX or BLOCK.\n     MSG_FILTERED_BLOCK,\n+    MSG_WITNESS_BLOCK,\n+    MSG_WITNESS_TX,\n };\n \n #endif // BITCOIN_PROTOCOL_H"
      },
      {
        "sha": "51ac9cbaa723ce4043ff555fc16947a940ea9380",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -604,7 +604,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n-    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_WITNESS);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n         try {"
      },
      {
        "sha": "c97e72ec04cee6cf7ee41452df270cdc751c84ae",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -619,6 +619,16 @@ class CScript : public CScriptBase\n     }\n };\n \n+struct CScriptWitness\n+{\n+    std::vector<std::vector<unsigned char> > stack;\n+\n+    // Some compilers complain without a default constructor\n+    CScriptWitness() { }\n+\n+    bool IsNull() const { return stack.empty(); }\n+};\n+\n class CReserveScript\n {\n public:"
      },
      {
        "sha": "9866cb9df77326ce6ee84ded9873135b75adf101",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -22,6 +22,39 @@\n #include <utility>\n #include <vector>\n \n+template<typename Stream>\n+class OverrideStream\n+{\n+    Stream* stream;\n+public:\n+    const int nType;\n+    const int nVersion;\n+\n+    OverrideStream(Stream* stream_, int nType_, int nVersion_) : stream(stream_), nType(nType_), nVersion(nVersion_) {}\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator<<(const T& obj)\n+    {\n+        // Serialize to this stream\n+        ::Serialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+\n+    template<typename T>\n+    OverrideStream<Stream>& operator>>(T& obj)\n+    {\n+        // Unserialize from this stream\n+        ::Unserialize(*this->stream, obj, nType, nVersion);\n+        return (*this);\n+    }\n+};\n+\n+template<typename S>\n+OverrideStream<S> WithOrVersion(S* s, int nVersionFlag)\n+{\n+    return OverrideStream<S>(s, s->GetType(), s->GetVersion() | nVersionFlag);\n+}\n+\n /** Double ended buffer combining vector and stream-like interfaces.\n  *\n  * >> and << read and write unformatted data using the above serialization templates."
      },
      {
        "sha": "b36c99c180a3291e1a7771da475e78ecf3555b3c",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "patch": "@@ -30,10 +30,6 @@\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000009085768617420697320ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n [\"Tests for CheckTransaction()\"],\n-[\"No inputs\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7a052c840ba73af26755de42cf01cc9e0a49fef0 EQUAL\"]],\n-\"0100000000010000000000000000015100000000\", \"P2SH\"],\n-\n [\"No outputs\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x05ab9e14d983742513f0f451e105ffb4198d1dd4 EQUAL\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000006d483045022100f16703104aab4e4088317c862daec83440242411b039d14280e03dd33b487ab802201318a7be236672c5c56083eb7a5a195bc57a40af7923ff8545016cd3b571e2a601232103c40e5d339df3f30bf753e7e04450ae4ef76c9e45587d1d993bdc4cd06f0651c7acffffffff0000000000\", \"P2SH\"],"
      }
    ]
  },
  {
    "sha": "9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzlhMmQ3ZmU4ZjUzNTA0OTFhNjRiMzU2YjZkYzhmMzVmNzIwOGY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-16T23:20:49Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Negotiate witness fetching via 'havewitness'",
      "tree": {
        "sha": "04cd46f52493fe469e1c9aa678d56484c9692e38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04cd46f52493fe469e1c9aa678d56484c9692e38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bffa4b1f22a4fdccfd3f5f810d738b0bd024c45"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 32,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ee938b338fccda5cedeabe9d5e664460f3b057c8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "patch": "@@ -260,6 +260,8 @@ struct CNodeState {\n     bool fPreferredDownload;\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n     bool fPreferHeaders;\n+    //! Whether this peer can give us witnesses\n+    bool fHaveWitness;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -275,6 +277,7 @@ struct CNodeState {\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n         fPreferHeaders = false;\n+        fHaveWitness = false;\n     }\n };\n \n@@ -4403,6 +4406,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // nodes)\n             pfrom->PushMessage(NetMsgType::SENDHEADERS);\n         }\n+\n+        if (pfrom->nVersion >= WITNESS_VERSION) {\n+            pfrom->PushMessage(NetMsgType::HAVEWITNESS);\n+        }\n     }\n \n \n@@ -4479,6 +4486,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    else if (strCommand == NetMsgType::HAVEWITNESS)\n+    {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->fHaveWitness = true;\n+    }\n+\n+\n     else if (strCommand == NetMsgType::INV)\n     {\n         vector<CInv> vInv;\n@@ -4501,14 +4515,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n-            const CInv &inv = vInv[nInv];\n+            CInv &inv = vInv[nInv];\n \n             boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n+            if (inv.type == MSG_TX && State(pfrom->GetId())->fHaveWitness) {\n+                inv.type = MSG_WITNESS_TX;\n+            }\n+\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n@@ -4524,6 +4542,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        if (State(pfrom->GetId())->fHaveWitness) {\n+                            inv.type = MSG_WITNESS_BLOCK;\n+                        }\n                         vToFetch.push_back(inv);\n                         // Mark block as in flight already, even though the actual \"getdata\" message only goes out\n                         // later (within the same cs_main lock, though).\n@@ -5611,7 +5632,7 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                 MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n                 LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n                     pindex->nHeight, pto->id);"
      },
      {
        "sha": "f61dfa6c222c05322ee6486a0cb1648974a81e4b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "patch": "@@ -35,6 +35,7 @@ const char *FILTERADD=\"filteradd\";\n const char *FILTERCLEAR=\"filterclear\";\n const char *REJECT=\"reject\";\n const char *SENDHEADERS=\"sendheaders\";\n+const char *HAVEWITNESS=\"havewitness\";\n };\n \n static const char* ppszTypeName[] ="
      },
      {
        "sha": "bb467550872228352ab0debeeb6eb6504374e0b2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "patch": "@@ -218,6 +218,11 @@ extern const char *REJECT;\n  * @see https://bitcoin.org/en/developer-reference#sendheaders\n  */\n extern const char *SENDHEADERS;\n+/**\n+ * Indicates that a node can be asked for blocks and transactions including\n+ * witness data.\n+ */\n+extern const char *HAVEWITNESS;\n \n };\n "
      },
      {
        "sha": "d74e477580ba27332f056edac6136e8c6cc47134",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "patch": "@@ -40,4 +40,7 @@ static const int NO_BLOOM_VERSION = 70011;\n //! \"sendheaders\" command and announcing blocks with headers starts with this version\n static const int SENDHEADERS_VERSION = 70012;\n \n+//! Version after which witness support potentially exists\n+static const int WITNESS_VERSION = 70012;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmI1NTI1OTQ5YjZmZTcyYzg4ZGMyZTljN2ViMGFlYWI0ZGY0ZGFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-06T00:42:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Witness commitment validation",
      "tree": {
        "sha": "9b3364c7e8082ef7b77b9b8fb2b3b9b747d6167b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3364c7e8082ef7b77b9b8fb2b3b9b747d6167b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9a2d7fe8f5350491a64b356b6dc8f35f7208f8"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b10f1bae51adfcb4a84f9583390cc8f2614c1e43",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
        "patch": "@@ -161,6 +161,17 @@ uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)\n     return ComputeMerkleRoot(leaves, mutated);\n }\n \n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)\n+{\n+    std::vector<uint256> leaves;\n+    leaves.resize(block.vtx.size());\n+    leaves[0].SetNull(); // The witness hash of the coinbase is 0.\n+    for (size_t s = 1; s < block.vtx.size(); s++) {\n+        leaves[s] = block.vtx[s].GetWitnessHash();\n+    }\n+    return ComputeMerkleRoot(leaves, mutated);\n+}\n+\n std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)\n {\n     std::vector<uint256> leaves;"
      },
      {
        "sha": "194aea9b75dc30fbedac6450d8d938f24e9878cd",
        "filename": "src/consensus/merkle.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/consensus/merkle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/consensus/merkle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.h?ref=5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
        "patch": "@@ -22,6 +22,12 @@ uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint2\n  */\n uint256 BlockMerkleRoot(const CBlock& block, bool* mutated = NULL);\n \n+/*\n+ * Compute the Merkle root of the witness transactions in a block.\n+ * *mutated is set to true if a duplicated subtree was found.\n+ */\n+uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated = NULL);\n+\n /*\n  * Compute the Merkle branch for the tree of transactions in a block, for a\n  * given position."
      },
      {
        "sha": "a98ed39db5c89e99b99b469a4302868abcebfffc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
        "patch": "@@ -3003,6 +3003,44 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+static bool CheckCoinbaseCommitment(const CScript& script, const uint256& leaf, const std::vector<unsigned char> pathdata, const unsigned char typ[16])\n+{\n+    CScript::const_iterator it = script.begin();\n+    std::vector<unsigned char> data;\n+    while (it != script.end()) {\n+        opcodetype op;\n+        if (!script.GetOp(it, op, data) || op != 41 || data.size() != 41) {\n+            continue;\n+        }\n+        if (data[0] != 0xaa || data[1] != 0x21 || data[2] != 0xa9 || data[3] != 0xed) {\n+            continue;\n+        }\n+        uint256 result;\n+        CSHA256().Write(typ, 16).Write(&data[4], 4).Finalize(result.begin());\n+        uint32_t result32 = ReadLE32(result.begin());\n+        unsigned int countbits = data[8];\n+        if (countbits > 32) {\n+            return false;\n+        }\n+        if (pathdata.size() != 32 * countbits) {\n+            return false;\n+        }\n+        if (countbits < 32) {\n+            result32 &= (1UL << countbits) - 1;\n+        }\n+        std::vector<uint256> path;\n+        path.resize(countbits);\n+        for (unsigned int i = 0; i < countbits; i++) {\n+             memcpy(path[i].begin(), &pathdata[32 * i], 32);\n+        }\n+        uint256 root1 = ComputeMerkleRootFromBranch(leaf, path, result32);\n+        uint256 root2;\n+        memcpy(root2.begin(), &data[9], 32);\n+        return root1 == root2;\n+    }\n+    return false;\n+}\n+\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n@@ -3031,9 +3069,17 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n \n+    // Reject block.nVersion=4 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 5 && pindexPrev->nHeight + 1 >= consensusParams.SegWitHeight && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=4 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n+\n     return true;\n }\n \n+static const unsigned char vTypeWitnessCommitment[16] = {'W', 'i', 't', 'n', 'e', 's', 's', 'V', '1'};\n+\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n@@ -3061,6 +3107,43 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         }\n     }\n \n+    // Validation for witness commitments.\n+    // * We compute the witness hash (which is the hash including witnesses) of all the block's transactions, except the\n+    //   coinbase (where 0x0000....0000 is used instead).\n+    // * We build a merkle tree with all those witness hashes as leaves (similar to the hashMerkleRoot in the block header).\n+    // * The first coinbase scriptSig minimal push of 41 bytes for which the first 4 bytes are {0xaa, 0x21, 0xa9, 0xed} is\n+    //   treated as a commitment header. If no such push is present, the block is invalid. If multiple are present, the first\n+    //   is used.\n+    //   * The first 4 bytes of the commitment header are just magic identifier bytes, and have no further meaning.\n+    //   * The next 4 bytes describe a nonce.\n+    //   * The next 1 byte describes the number of levels in a Merkle tree.\n+    //   * locator = SHA256('WitnessV1\\x00\\x00\\x00\\x00\\x00\\x00\\x00' || nonce). The first levels bits of locator, interpreted\n+    //     in little endian, are assumed to be the position in the leaves of this Merkle tree where the witness commitment\n+    //     goes.\n+    //   * The last 32 bytes of the commitment header are its root hash.\n+    //   * The coinbase's input's witness must consist of a single byte array of 32 * levels bytes, and are assumed to be\n+    //     the Merkle path to connect the witness root hash to the commitment root hash.\n+    if (block.nVersion >= 5 && pindexPrev->nHeight + 1 >= consensusParams.SegWitHeight && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n+        bool malleated = false;\n+        uint256 hashWitness = BlockWitnessMerkleRoot(block, &malleated);\n+        if (malleated) {\n+            return state.DoS(100, error(\"%s : witness merkle root duplication\", __func__), REJECT_INVALID, \"bad-witness-duplicate\", true);\n+        }\n+        if (block.vtx[0].wit.vtxinwit.size() == 0 || block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.size() != 1) {\n+             return state.DoS(100, error(\"%s : invalid witness merkle path length\", __func__), REJECT_INVALID, \"bad-witness-merkle-len\", true);\n+        }\n+        if (!CheckCoinbaseCommitment(block.vtx[0].vin[0].scriptSig, hashWitness, block.vtx[0].wit.vtxinwit[0].scriptWitness.stack[0], vTypeWitnessCommitment)) {\n+            return state.DoS(100, error(\"%s : witness merkle commitment mismatch\", __func__), REJECT_INVALID, \"bad-witness-merkle-match\", true);\n+        }\n+    } else {\n+        // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room from spam.\n+        for (size_t i = 0; i < block.vtx.size(); i++) {\n+            if (block.vtx[i].wit.vtxinwit.size() > 0) {\n+                return state.DoS(100, error(\"%s : unexpected witness data found\", __func__), REJECT_INVALID, \"unexpected-witness\", true);\n+            }\n+        }\n+    }\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "d7185cbbf533f389c8216d5a44679aa15fb675e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzE4NWNiYmY1MzNmMzg5YzgyMTZkNWE0NDY3OWFhMTVmYjY3NWUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-04T09:04:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Produce blocks with witness commitment in coinbase",
      "tree": {
        "sha": "e102f6303e96041c47e9ab9f83e086de97d04a6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e102f6303e96041c47e9ab9f83e086de97d04a6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7185cbbf533f389c8216d5a44679aa15fb675e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7185cbbf533f389c8216d5a44679aa15fb675e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7185cbbf533f389c8216d5a44679aa15fb675e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7185cbbf533f389c8216d5a44679aa15fb675e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb5525949b6fe72c88dc2e9c7eb0aeab4df4daf"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 54,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4ce6d9d574f6cc09d19d17766e247a2f1b2799a6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -77,6 +77,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.SegWitHeight = 2000000000;\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n@@ -159,6 +160,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP34Height = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.SegWitHeight = 2000000000;\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n@@ -223,6 +225,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP34Height = -1; // BIP34 has not necessarily activated on regtest\n         consensus.BIP34Hash = uint256();\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.SegWitHeight = 0;\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;"
      },
      {
        "sha": "9df7b3b64a27575b9f3f9cdf086b4deac0eb5736",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -22,6 +22,7 @@ struct Params {\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    int SegWitHeight;\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "e329a476c6bb92a9404a8f8f1d90600ec5279358",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -3003,6 +3003,35 @@ static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidati\n     return true;\n }\n \n+std::vector<unsigned char> GenerateCoinbaseCommitment(const CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    std::vector<unsigned char> ret;\n+    if (block.nVersion >= 5 && pindexPrev->nHeight + 1 >= consensusParams.SegWitHeight && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n+        ret.push_back(0xaa);\n+        ret.push_back(0x21);\n+        ret.push_back(0xa9);\n+        ret.push_back(0xed);\n+        ret.push_back(0x00);\n+        ret.push_back(0x00);\n+        ret.push_back(0x00);\n+        ret.push_back(0x00);\n+        ret.push_back(0x00);\n+        uint256 witnessroot = BlockWitnessMerkleRoot(block, NULL);\n+        ret.insert(ret.end(), witnessroot.begin(), witnessroot.end());\n+    }\n+    return ret;\n+}\n+\n+CTxWitness GenerateCoinbaseWitness(const CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n+{\n+    CTxWitness ret;\n+    if (block.nVersion >= 5 && pindexPrev->nHeight + 1 >= consensusParams.SegWitHeight && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n+        ret.vtxinwit.resize(1);\n+        ret.vtxinwit[0].scriptWitness.stack.resize(1);\n+    }\n+    return ret;\n+}\n+\n static bool CheckCoinbaseCommitment(const CScript& script, const uint256& leaf, const std::vector<unsigned char> pathdata, const unsigned char typ[16])\n {\n     CScript::const_iterator it = script.begin();"
      },
      {
        "sha": "376938e3b0f5b1ddbb8aa0b3ac88eb422852780d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -408,6 +408,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n+/** Produce the necessary coinbase commitment for a block. */\n+std::vector<unsigned char> GenerateCoinbaseCommitment(const CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+CTxWitness GenerateCoinbaseWitness(const CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n+\n \n class CBlockFileInfo\n {"
      },
      {
        "sha": "f35df1fe8fb68da6fb0de3584f38a3511b4963cb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -275,9 +275,16 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         nLastBlockSize = nBlockSize;\n         LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n+        pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n+\n         // Compute final coinbase transaction.\n         txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n-        txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+        txNew.vin[0].scriptSig = CScript() << nHeight;\n+        txNew.wit = GenerateCoinbaseWitness(*pblock, pindexPrev, chainparams.GetConsensus());\n+        if (!pblocktemplate->vchCoinbaseCommitment.empty()) {\n+            txNew.vin[0].scriptSig << pblocktemplate->vchCoinbaseCommitment;\n+        }\n+        txNew.vin[0].scriptSig << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;\n \n@@ -297,7 +304,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -309,7 +316,7 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << vchCoinbaseCommitment << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;\n@@ -424,7 +431,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                 return;\n             }\n             CBlock *pblock = &pblocktemplate->block;\n-            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n+            IncrementExtraNonce(pblock, pindexPrev, nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n \n             LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                 ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));"
      },
      {
        "sha": "324a78c8f38433837eb91bbe83e5749a442395bd",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -27,14 +27,15 @@ struct CBlockTemplate\n     CBlock block;\n     std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n+    std::vector<unsigned char> vchCoinbaseCommitment;\n };\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce, const std::vector<unsigned char> vchCoinbaseCommitment);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "315da7730f125f57db8f0ba1ebac95029902296b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -163,7 +163,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n         CBlock *pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n-            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n+            IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce, pblocktemplate->vchCoinbaseCommitment);\n         }\n         while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n             // Yes, there is a chance every nonce could fail to satisfy the -regtest\n@@ -348,6 +348,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n             \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash/id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"withash\\\" : \\\"xxxx\\\",       (string) witness hash encoded in little-endian hexadecimal\\n\"\n             \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n             \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n@@ -540,6 +541,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n \n         entry.push_back(Pair(\"hash\", txHash.GetHex()));\n+        entry.push_back(Pair(\"withash\", tx.GetWitnessHash().GetHex()));\n \n         UniValue deps(UniValue::VARR);\n         BOOST_FOREACH (const CTxIn &in, tx.vin)"
      },
      {
        "sha": "eefe569b451330256a90d14ec54bc0188c4e01b2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7185cbbf533f389c8216d5a44679aa15fb675e2/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "patch": "@@ -126,7 +126,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(tx);\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce, pblocktemplate->vchCoinbaseCommitment);\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "202c052d78382b5f59d5d15cc22a6261582465c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDJjMDUyZDc4MzgyYjVmNTlkNWQxNWNjMjJhNjI2MTU4MjQ2NWM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-08T00:16:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Script validation logic for witnesses",
      "tree": {
        "sha": "b0d69888bdc2cfb4c939b8d8a038098ecb33a2f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0d69888bdc2cfb4c939b8d8a038098ecb33a2f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/202c052d78382b5f59d5d15cc22a6261582465c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202c052d78382b5f59d5d15cc22a6261582465c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/202c052d78382b5f59d5d15cc22a6261582465c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202c052d78382b5f59d5d15cc22a6261582465c5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7185cbbf533f389c8216d5a44679aa15fb675e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7185cbbf533f389c8216d5a44679aa15fb675e2"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 179,
      "deletions": 37
    },
    "files": [
      {
        "sha": "dd554c399d29ed7f0ef7d8867a7c64e7eda7805a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -463,7 +463,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "c2e1d2d173fa0fc0b1c019fd2c96f8d24b81fe54",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -1561,7 +1561,8 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n+    const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d004b56ca50e22ae5fd49a7f04c27d30a3861013",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -40,7 +40,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n-                                                         SCRIPT_VERIFY_LOW_S;\n+                                                         SCRIPT_VERIFY_LOW_S |\n+                                                         SCRIPT_VERIFY_WITNESS;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "9a01fa5245836deb4c43943d3d7c5cd5ff0525ca",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -762,7 +762,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "53da156ac7c15fe5c4ee70db710f06ea330314c8",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -85,7 +85,7 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "f2e6409ebe517e678d7203aaa9eabcd8e0e07d3d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 2,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -1153,9 +1153,54 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     return true;\n }\n \n+static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+{\n+    vector<vector<unsigned char> > stack;\n+    CScript scriptPubKey;\n+\n+    if (witversion == 0) {\n+        // Version 0 segregated witness program: CScript inside the program, inputs in witness\n+        scriptPubKey = CScript(program.begin(), program.end());\n+        stack = witness.stack;\n+    } else if (witversion == 1) {\n+        // Version 1 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n+        if (program.size() != 32) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n+        }\n+        if (witness.stack.size() == 0) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n+        }\n+        scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+        stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+        uint256 hashScriptPubKey;\n+        CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n+        if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n+        }\n+    } else {\n+        // Higher version witness scripts return true for future softfork compatibility\n+        return set_success(serror);\n+    }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+        return false;\n+    }\n+    // Scripts inside witness implicitly require cleanstack behaviour\n+    if (stack.size() != 1)\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    if (!CastToBool(stack.back()))\n+        return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+    return true;\n+}\n+\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n+    static const CScriptWitness emptyWitness;\n+    if (witness == NULL) {\n+        witness = &emptyWitness;\n+    }\n+    bool hadWitness = false;\n+\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);\n \n     if ((flags & SCRIPT_VERIFY_SIGPUSHONLY) != 0 && !scriptSig.IsPushOnly()) {\n@@ -1176,6 +1221,25 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n     if (CastToBool(stack.back()) == false)\n         return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n \n+    // Bare witness programs\n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+            hadWitness = true;\n+            if (scriptSig.size() != 0) {\n+                // The scriptSig must be _exactly_ CScript(), otherwise we reintroduce malleability.\n+                return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED);\n+            }\n+            if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                return false;\n+            }\n+            // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+            // for witness programs.\n+            stack.resize(1);\n+        }\n+    }\n+\n     // Additional validation for spend-to-script-hash transactions:\n     if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n     {\n@@ -1202,19 +1266,48 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigne\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n         if (!CastToBool(stack.back()))\n             return set_error(serror, SCRIPT_ERR_EVAL_FALSE);\n+\n+        // P2SH witness program\n+        if (flags & SCRIPT_VERIFY_WITNESS) {\n+            if (pubKey2.IsWitnessProgram(witnessversion, witnessprogram)) {\n+                hadWitness = true;\n+                if (scriptSig != CScript() << std::vector<unsigned char>(pubKey2.begin(), pubKey2.end())) {\n+                    // The scriptSig must be _exactly_ a single push of the redeemScript. Otherwise we\n+                    // reintroduce malleability.\n+                    return set_error(serror, SCRIPT_ERR_WITNESS_MALLEATED_P2SH);\n+                }\n+                if (!VerifyWitnessProgram(*witness, witnessversion, witnessprogram, flags, checker, serror)) {\n+                    return false;\n+                }\n+                // Bypass the cleanstack check at the end. The actual stack is obviously not clean\n+                // for witness programs.\n+                stack.resize(1);\n+            }\n+        }\n     }\n \n     // The CLEANSTACK check is only performed after potential P2SH evaluation,\n     // as the non-P2SH evaluation of a P2SH script will obviously not result in\n-    // a clean stack (the P2SH inputs remain).\n+    // a clean stack (the P2SH inputs remain). The same holds for witness evaluation.\n     if ((flags & SCRIPT_VERIFY_CLEANSTACK) != 0) {\n         // Disallow CLEANSTACK without P2SH, as otherwise a switch CLEANSTACK->P2SH+CLEANSTACK\n         // would be possible, which is not a softfork (and P2SH should be one).\n         assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        assert((flags & SCRIPT_VERIFY_WITNESS) != 0);\n         if (stack.size() != 1) {\n             return set_error(serror, SCRIPT_ERR_CLEANSTACK);\n         }\n     }\n \n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        // We can't check for correct unexpected witness data if P2SH was off, so require\n+        // that WITNESS implies P2SH. Otherwise, going from WITNESS->P2SH+WITNESS would be\n+        // possible, which is not a softfork.\n+        assert((flags & SCRIPT_VERIFY_P2SH) != 0);\n+        if (!hadWitness && !witness->IsNull()) {\n+            return set_error(serror, SCRIPT_ERR_WITNESS_UNEXPECTED);\n+        }\n+    }\n+\n     return set_success(serror);\n }"
      },
      {
        "sha": "821cdc4d7da92971315149676c438c1f158e1a5b",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -74,13 +74,17 @@ enum\n     // \"At least one stack element must remain, and when interpreted as a boolean, it must be true\" to\n     // \"Exactly one stack element must remain, and when interpreted as a boolean, it must be true\".\n     // (softfork safe, BIP62 rule 6)\n-    // Note: CLEANSTACK should never be used without P2SH.\n+    // Note: CLEANSTACK should never be used without P2SH or WITNESS.\n     SCRIPT_VERIFY_CLEANSTACK = (1U << 8),\n \n     // Verify CHECKLOCKTIMEVERIFY\n     //\n     // See BIP65 for details.\n     SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n+\n+    // Support segregated witness\n+    //\n+    SCRIPT_VERIFY_WITNESS = (1U << 10),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n@@ -128,6 +132,6 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "88e9f0197b73082aa31b0b669e6b882e08400d6b",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -210,6 +210,24 @@ bool CScript::IsPayToScriptHash() const\n             (*this)[22] == OP_EQUAL);\n }\n \n+// A witness program is any valid CScript that consists of a 1-byte push opcode\n+// followed by a data push between 2 and 32 bytes.\n+bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const\n+{\n+    if (this->size() < 4 || this->size() > 34) {\n+        return false;\n+    }\n+    if ((*this)[0] != OP_0 && ((*this)[0] < OP_1 || (*this)[0] > OP_16)) {\n+        return false;\n+    }\n+    if ((size_t)((*this)[1] + 2) == this->size()) {\n+        version = DecodeOP_N((opcodetype)(*this)[0]);\n+        program = std::vector<unsigned char>(this->begin() + 2, this->end());\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool CScript::IsPushOnly(const_iterator pc) const\n {\n     while (pc < end())"
      },
      {
        "sha": "30e400543cc68f16897cb07ba4865f7239a9562d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -597,6 +597,7 @@ class CScript : public CScriptBase\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n     bool IsPayToScriptHash() const;\n+    bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n     bool IsPushOnly(const_iterator pc) const;"
      },
      {
        "sha": "caf44531cf13067426d1ebd1d5cafc707faa0850",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -67,6 +67,18 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"NOPx reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_PUBKEYTYPE:\n             return \"Public key is neither compressed or uncompressed\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH:\n+            return \"Witness program has incorrect length\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY:\n+            return \"Witness program was passed an empty witness\";\n+        case SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH:\n+            return \"Witness program hash mismatch\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED:\n+            return \"Witness requires empty scriptSig\";\n+        case SCRIPT_ERR_WITNESS_MALLEATED_P2SH:\n+            return \"Witness requires only-redeemscript scriptSig\";\n+        case SCRIPT_ERR_WITNESS_UNEXPECTED:\n+            return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "7c22d5d1ced601f91f6f5ab1a30ee82cbdd0884b",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -52,6 +52,14 @@ typedef enum ScriptError_t\n     /* softfork safeness */\n     SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS,\n \n+    /* segregated witness */\n+    SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH,\n+    SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY,\n+    SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH,\n+    SCRIPT_ERR_WITNESS_MALLEATED,\n+    SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n+    SCRIPT_ERR_WITNESS_UNEXPECTED,\n+\n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;\n "
      },
      {
        "sha": "28538f4393e489d7e0332af3bd526dcab8acd0c0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -123,7 +123,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     }\n \n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)"
      },
      {
        "sha": "8dedb23e43d21309c38ff07b9fcf36eb5aef72e9",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -83,20 +83,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -107,18 +107,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -130,12 +130,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "d573e281f2a9f374c7adcdda02bb54108b69e5f3",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -45,7 +45,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n }\n \n "
      },
      {
        "sha": "d03c1f485fc6cb0119aab39b212ae2bd4469e59d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -89,10 +89,14 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n {\n+    if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -758,18 +762,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -791,54 +795,54 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n@@ -958,7 +962,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << i;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n \n@@ -967,7 +971,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << data;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Length \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, NULL, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n }"
      },
      {
        "sha": "29523ec0b2b7e57cb142ac8eb8d347b071b2d74c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202c052d78382b5f59d5d15cc22a6261582465c5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=202c052d78382b5f59d5d15cc22a6261582465c5",
        "patch": "@@ -150,7 +150,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -224,7 +224,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));"
      }
    ]
  },
  {
    "sha": "bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmJjNTRmMTQyN2RmZDE1YzMzYTdmNmFkOWYxMjA5NGVkYTM4NTJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T00:04:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Enable SCRIPT_VERIFY_WITNESS for mempool transactions",
      "tree": {
        "sha": "d7bcbccc29f1665e7321c5fe0c951c11f27aafce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7bcbccc29f1665e7321c5fe0c951c11f27aafce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "202c052d78382b5f59d5d15cc22a6261582465c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202c052d78382b5f59d5d15cc22a6261582465c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/202c052d78382b5f59d5d15cc22a6261582465c5"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "19d48f3de5f9c372ae7f676856e2fb0676a8c715",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
        "patch": "@@ -77,6 +77,9 @@ class CValidationState {\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }\n+    void SetCorruptionPossible() {\n+        corruptionPossible = true;\n+    }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n     std::string GetDebugMessage() const { return strDebugMessage; }"
      },
      {
        "sha": "a6a9919916497fc6c6b09cea7e15da7f1f225e8c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
        "patch": "@@ -1170,8 +1170,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true)) {\n+            if (CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS & ~SCRIPT_VERIFY_WITNESS, true)) {\n+                // Only the witness is wrong, so the transaction itself may be fine.\n+                state.SetCorruptionPossible();\n+            }\n             return false;\n+        }\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -4903,8 +4908,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            assert(recentRejects);\n-            recentRejects->insert(tx.GetHash());\n+            if (!state.CorruptionPossible()) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());\n+            }\n \n             if (pfrom->fWhitelisted && GetBoolArg(\"-whitelistalwaysrelay\", DEFAULT_WHITELISTALWAYSRELAY)) {\n                 // Always relay transactions received from whitelisted peers, even\n@@ -4933,8 +4940,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n-            if (nDoS > 0)\n+            if (nDoS > 0 && (!state.CorruptionPossible() || State(pfrom->id)->fHaveWitness)) {\n+                // When a non-witness-supporting peer gives us a transaction that would\n+                // be accepted if witness validation was off, we can't blame them for it.\n                 Misbehaving(pfrom->GetId(), nDoS);\n+            }\n         }\n         FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }"
      }
    ]
  },
  {
    "sha": "61650d696b980ede98c0d7a16432feb467c44ba2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTY1MGQ2OTZiOTgwZWRlOThjMGQ3YTE2NDMyZmViNDY3YzQ0YmEy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-18T15:27:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Activate script consensus rules in v5 blocks",
      "tree": {
        "sha": "03e9d8d00538c6bb0ec9d8aae876fb2b9ec5664b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03e9d8d00538c6bb0ec9d8aae876fb2b9ec5664b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61650d696b980ede98c0d7a16432feb467c44ba2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61650d696b980ede98c0d7a16432feb467c44ba2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61650d696b980ede98c0d7a16432feb467c44ba2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61650d696b980ede98c0d7a16432feb467c44ba2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbbc54f1427dfd15c33a7f6ad9f12094eda3852b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aa930505e360bcc5a9b6410da034066865d56418",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61650d696b980ede98c0d7a16432feb467c44ba2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61650d696b980ede98c0d7a16432feb467c44ba2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=61650d696b980ede98c0d7a16432feb467c44ba2",
        "patch": "@@ -2050,6 +2050,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    // Start enforcing WITNESS rules, for block.nVersion=5\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 5 && pindex->nHeight >= chainparams.GetConsensus().SegWitHeight && IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n "
      }
    ]
  },
  {
    "sha": "dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWU1ODFkM2FlYTMwOWRiZTNhMTdhYjFiMmE2ZmMzMWZjNjdmNDhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-29T01:37:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Only download blocks from witness peers after fork",
      "tree": {
        "sha": "e44936d80bb1942477c12575b467804eff05def5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e44936d80bb1942477c12575b467804eff05def5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61650d696b980ede98c0d7a16432feb467c44ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61650d696b980ede98c0d7a16432feb467c44ba2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61650d696b980ede98c0d7a16432feb467c44ba2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3d1ee7847a25f4bdd65fdbd8c1f92883d1fc6851",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
        "patch": "@@ -4355,6 +4355,11 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n     }\n }\n \n+bool static RequireWitness(CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    return (pindex->nVersion >= 5 && pindex->nHeight >= consensusParams.SegWitHeight && IsSuperMajority(5, pindex->pprev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams));\n+}\n+\n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n {\n     const CChainParams& chainparams = Params();\n@@ -4665,7 +4670,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     pfrom->PushMessage(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash);\n                     CNodeState *nodestate = State(pfrom->GetId());\n                     if (CanDirectFetch(chainparams.GetConsensus()) &&\n-                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n+                        (!RequireWitness(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         if (State(pfrom->GetId())->fHaveWitness) {\n                             inv.type = MSG_WITNESS_BLOCK;\n                         }\n@@ -5017,7 +5023,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash())) {\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!RequireWitness(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -5039,7 +5046,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Can't download any more from this peer\n                         break;\n                     }\n-                    vGetData.push_back(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+                    vGetData.push_back(CInv(State(pfrom->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n                     LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n                             pindex->GetBlockHash().ToString(), pfrom->id);\n@@ -5761,10 +5768,11 @@ bool SendMessages(CNode* pto)\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                vGetData.push_back(CInv(State(staller)->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n-                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                    pindex->nHeight, pto->id);\n+                if (State(pto->GetId())->fHaveWitness || !RequireWitness(pindex, consensusParams)) {\n+                    vGetData.push_back(CInv(State(pto->GetId())->fHaveWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n+                    LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight, pto->id);\n+                }\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {"
      }
    ]
  },
  {
    "sha": "90fb31721d1b6eb16126918f6d4d0de3e1f57818",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGZiMzE3MjFkMWI2ZWIxNjEyNjkxOGY2ZDRkMGRlM2UxZjU3ODE4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-29T01:38:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Witness script signing",
      "tree": {
        "sha": "2b3e96c3a2a37afa742273cbe2bdf16857c22802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b3e96c3a2a37afa742273cbe2bdf16857c22802"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90fb31721d1b6eb16126918f6d4d0de3e1f57818",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fb31721d1b6eb16126918f6d4d0de3e1f57818",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90fb31721d1b6eb16126918f6d4d0de3e1f57818",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fb31721d1b6eb16126918f6d4d0de3e1f57818/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dae581d3aea309dbe3a17ab1b2a6fc31fc67f48c"
      }
    ],
    "stats": {
      "total": 484,
      "additions": 351,
      "deletions": 133
    },
    "files": [
      {
        "sha": "cad7fc76c7491c6d38541d790788b96d273d73ae",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -454,15 +454,16 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        BOOST_FOREACH(const CTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n-        }\n+        BOOST_FOREACH(const CTransaction& txv, txVariants)\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i), sigdata, DataFromTransaction(txv, i));\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n             fComplete = false;\n     }"
      },
      {
        "sha": "4262d924e53378314addecd8830a51bd5bb31339",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -752,15 +752,18 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n \n-        txin.scriptSig.clear();\n+        SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            SignSignature(keystore, prevPubKey, mergedTx, i, nHashType);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i), sigdata, DataFromTransaction(txv, i));\n         }\n+\n+        UpdateTransaction(mergedTx, i, sigdata);\n+\n         ScriptError serror = SCRIPT_ERR_OK;\n         if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));"
      },
      {
        "sha": "747014d38811a40ff01f2b334d4d77a54d9f4208",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 201,
        "deletions": 73,
        "changes": 274,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -33,24 +33,24 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret)\n {\n     vector<unsigned char> vchSig;\n     if (!creator.CreateSig(vchSig, address, scriptCode))\n         return false;\n-    scriptSigRet << vchSig;\n+    ret.push_back(vchSig);\n     return true;\n }\n \n-static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, CScript& scriptSigRet)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, creator, scriptCode, scriptSigRet))\n+        if (Sign1(keyID, creator, scriptCode, ret))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n@@ -63,9 +63,11 @@ static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreato\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     CScript& scriptSigRet, txnouttype& whichTypeRet)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet)\n {\n-    scriptSigRet.clear();\n+    CScript scriptRet;\n+    uint160 h160;\n+    ret.clear();\n \n     vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n@@ -79,62 +81,141 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, scriptSigRet);\n+        return Sign1(keyID, creator, scriptPubKey, ret);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, scriptSigRet))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret))\n             return false;\n         else\n         {\n             CPubKey vch;\n             creator.KeyStore().GetPubKey(keyID, vch);\n-            scriptSigRet << ToByteVector(vch);\n+            ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        return creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptSigRet);\n+        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n \n     case TX_MULTISIG:\n-        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, scriptSigRet));\n+        ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, creator, scriptPubKey, ret));\n+\n+    case TX_WITNESS_V0:\n+        ret.push_back(vSolutions[0]);\n+        return true;\n+\n+    case TX_WITNESS_V1:\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n+        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+            ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n+            return true;\n+        }\n+        return false;\n+\n+    default:\n+        return false;\n     }\n-    return false;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, CScript& scriptSig)\n+static CScript PushAll(const vector<valtype>& values)\n+{\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n {\n+    CScript script = fromPubKey;\n+    bool solved = true;\n+    std::vector<valtype> result;\n     txnouttype whichType;\n-    if (!SignStep(creator, fromPubKey, scriptSig, whichType))\n-        return false;\n+    solved = SignStep(creator, script, result, whichType);\n+    bool P2SH = false;\n+    CScript subscript;\n+    sigdata.scriptWitness.stack.clear();\n \n     if (whichType == TX_SCRIPTHASH)\n     {\n-        // Solver returns the subscript that need to be evaluated;\n+        // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        CScript subscript = scriptSig;\n+        script = subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, script, result, whichType) && whichType != TX_SCRIPTHASH;\n+        P2SH = true;\n+    }\n \n+    if (whichType == TX_WITNESS_V0)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n-        bool fSolved =\n-            SignStep(creator, subscript, scriptSig, subType) && subType != TX_SCRIPTHASH;\n-        // Append serialized subscript whether or not it is completely signed:\n-        scriptSig << valtype(subscript.begin(), subscript.end());\n-        if (!fSolved) return false;\n+        solved = solved && SignStep(creator, witnessscript, result, subType) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n     }\n+    else if (whichType == TX_WITNESS_V1)\n+    {\n+        CScript witnessscript(result[0].begin(), result[0].end());\n+        txnouttype subType;\n+        solved = solved && SignStep(creator, witnessscript, result, subType) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n+        result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n+        sigdata.scriptWitness.stack = result;\n+        result.clear();\n+    }\n+\n+    if (P2SH) {\n+        result.push_back(std::vector<unsigned char>(subscript.begin(), subscript.end()));\n+    }\n+    sigdata.scriptSig = PushAll(result);\n \n     // Test solution\n-    return VerifyScript(scriptSig, fromPubKey, NULL, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+}\n+\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)\n+{\n+    SignatureData data;\n+    assert(tx.vin.size() > nIn);\n+    data.scriptSig = tx.vin[nIn].scriptSig;\n+    if (tx.wit.vtxinwit.size() > nIn) {\n+        data.scriptWitness = tx.wit.vtxinwit[nIn].scriptWitness;\n+    }\n+    return data;\n+}\n+\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data)\n+{\n+    assert(tx.vin.size() > nIn);\n+    tx.vin[nIn].scriptSig = data.scriptSig;\n+    if (!data.scriptWitness.IsNull() || tx.wit.vtxinwit.size() > nIn) {\n+        tx.wit.vtxinwit.resize(tx.vin.size());\n+        tx.wit.vtxinwit[nIn].scriptWitness = data.scriptWitness;\n+    }\n }\n \n bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n \n     CTransaction txToConst(txTo);\n     TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n \n-    return ProduceSignature(creator, fromPubKey, txin.scriptSig);\n+    SignatureData sigdata;\n+    bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n+    UpdateTransaction(txTo, nIn, sigdata);\n+    return ret;\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -147,15 +228,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n     return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n }\n \n-static CScript PushAll(const vector<valtype>& values)\n-{\n-    CScript result;\n-    BOOST_FOREACH(const valtype& v, values)\n-        result << v;\n-    return result;\n-}\n-\n-static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n                                const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n {\n@@ -194,87 +267,142 @@ static CScript CombineMultisig(const CScript& scriptPubKey, const BaseSignatureC\n     }\n     // Now build a merged CScript:\n     unsigned int nSigsHave = 0;\n-    CScript result; result << OP_0; // pop-one-too-many workaround\n+    std::vector<valtype> result; result.push_back(valtype()); // pop-one-too-many workaround\n     for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n     {\n         if (sigs.count(vSolutions[i+1]))\n         {\n-            result << sigs[vSolutions[i+1]];\n+            result.push_back(sigs[vSolutions[i+1]]);\n             ++nSigsHave;\n         }\n     }\n     // Fill any missing with OP_0:\n     for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result << OP_0;\n+        result.push_back(valtype());\n \n     return result;\n }\n \n-static CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+namespace\n+{\n+struct Stacks\n+{\n+    std::vector<valtype> script;\n+    std::vector<valtype> witness;\n+\n+    Stacks() {}\n+    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n+    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    }\n+\n+    SignatureData Output() const {\n+        SignatureData result;\n+        result.scriptSig = PushAll(script);\n+        result.scriptWitness.stack = witness;\n+        return result;\n+    }\n+};\n+}\n+\n+static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 vector<valtype>& sigs1, vector<valtype>& sigs2)\n+                                 Stacks sigs1, Stacks sigs2)\n {\n     switch (txType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n         // Don't know anything about this, assume bigger one is correct:\n-        if (sigs1.size() >= sigs2.size())\n-            return PushAll(sigs1);\n-        return PushAll(sigs2);\n+        if (sigs1.script.size() >= sigs2.script.size())\n+            return sigs1;\n+        return sigs2;\n     case TX_PUBKEY:\n     case TX_PUBKEYHASH:\n         // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.empty() || sigs1[0].empty())\n-            return PushAll(sigs2);\n-        return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script[0].empty())\n+            return sigs2;\n+        return sigs1;\n     case TX_SCRIPTHASH:\n-        if (sigs1.empty() || sigs1.back().empty())\n-            return PushAll(sigs2);\n-        else if (sigs2.empty() || sigs2.back().empty())\n-            return PushAll(sigs1);\n+        if (sigs1.script.empty() || sigs1.script.back().empty())\n+            return sigs2;\n+        else if (sigs2.script.empty() || sigs2.script.back().empty())\n+            return sigs1;\n         else\n         {\n             // Recur to combine:\n-            valtype spk = sigs1.back();\n+            valtype spk = sigs1.script.back();\n             CScript pubKey2(spk.begin(), spk.end());\n \n             txnouttype txType2;\n             vector<vector<unsigned char> > vSolutions2;\n             Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.pop_back();\n-            sigs2.pop_back();\n-            CScript result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n-            result << spk;\n+            sigs1.script.pop_back();\n+            sigs2.script.pop_back();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            result.script.push_back(spk);\n             return result;\n         }\n     case TX_MULTISIG:\n-        return CombineMultisig(scriptPubKey, checker, vSolutions, sigs1, sigs2);\n+        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script));\n+    case TX_WITNESS_V0:\n+        if (sigs1.witness.empty())\n+            return sigs2;\n+        else if (sigs2.witness.empty())\n+            return sigs1;\n+        else\n+        {\n+            // Recur to combine:\n+            CScript pubKey2(vSolutions[0].begin(), vSolutions[0].end());\n+            txnouttype txType2;\n+            vector<valtype> vSolutions2;\n+            Solver(pubKey2, txType2, vSolutions2);\n+            sigs1.script = sigs1.witness;\n+            sigs1.witness.clear();\n+            sigs2.script = sigs2.witness;\n+            sigs2.witness.clear();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            result.witness = result.script;\n+            result.script.clear();\n+            return result;\n+        }\n+    case TX_WITNESS_V1:\n+        if (sigs1.witness.empty() || sigs1.witness.back().empty())\n+            return sigs2;\n+        else if (sigs2.witness.empty() || sigs2.witness.back().empty())\n+            return sigs1;\n+        else\n+        {\n+            // Recur to combine:\n+            CScript pubKey2(sigs1.witness.back().begin(), sigs1.witness.back().end());\n+            txnouttype txType2;\n+            vector<valtype> vSolutions2;\n+            Solver(pubKey2, txType2, vSolutions2);\n+            sigs1.witness.pop_back();\n+            sigs1.script = sigs1.witness;\n+            sigs1.witness.clear();\n+            sigs2.witness.pop_back();\n+            sigs2.script = sigs2.witness;\n+            sigs2.witness.clear();\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            result.witness = result.script;\n+            result.script.clear();\n+            result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n+            return result;\n+        }\n+    default:\n+        return Stacks();\n     }\n-\n-    return CScript();\n }\n \n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n-{\n-    TransactionSignatureChecker checker(&txTo, nIn);\n-    return CombineSignatures(scriptPubKey, checker, scriptSig1, scriptSig2);\n-}\n-\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                          const CScript& scriptSig1, const CScript& scriptSig2)\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n+                          const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n {\n     txnouttype txType;\n     vector<vector<unsigned char> > vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n-    vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n-    vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n-\n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, stack1, stack2);\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2)).Output();\n }\n \n namespace {"
      },
      {
        "sha": "a7ac5a0d2637a72e5fe25ba1ba98e2c99266ade2",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -43,6 +43,13 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n \n+class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n+    CTransaction tx;\n+\n+public:\n+    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, nHashTypeIn), tx(*txToIn) {}\n+};\n+\n /** A signature creator that just produces 72-byte empty signatyres. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n@@ -51,17 +58,26 @@ class DummySignatureCreator : public BaseSignatureCreator {\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n \n+struct SignatureData {\n+    CScript scriptSig;\n+    CScriptWitness scriptWitness;\n+\n+    SignatureData() {}\n+    explicit SignatureData(const CScript& script) : scriptSig(script) {}\n+};\n+\n /** Produce a script signature using a generic signature creator. */\n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, CScript& scriptSig);\n+bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const CScript& scriptSig1, const CScript& scriptSig2);\n+SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n \n-/** Combine two script signatures on transactions. */\n-CScript CombineSignatures(const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, const CScript& scriptSig1, const CScript& scriptSig2);\n+/** Extract signature data from a transaction, and insert it. */\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n+void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const SignatureData& data);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "434d99dfdf66f26bc9290b0d6ac9cb74214be777",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -31,6 +31,8 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_SCRIPTHASH: return \"scripthash\";\n     case TX_MULTISIG: return \"multisig\";\n     case TX_NULL_DATA: return \"nulldata\";\n+    case TX_WITNESS_V0: return \"witness_v0\";\n+    case TX_WITNESS_V1: return \"witness_v1\";\n     }\n     return NULL;\n }\n@@ -66,6 +68,22 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         return true;\n     }\n \n+    int witnessversion;\n+    std::vector<unsigned char> witnessprogram;\n+    if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        if (witnessversion == 0) {\n+            typeRet = TX_WITNESS_V0;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        if (witnessversion == 1 && witnessprogram.size() == 32) {\n+            typeRet = TX_WITNESS_V1;\n+            vSolutionsRet.push_back(witnessprogram);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     // Provably prunable, data-carrying output\n     //\n     // So long as script passes the IsUnspendable() test and all but the first\n@@ -178,6 +196,10 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n         return vSolutions[0][0] + 1;\n     case TX_SCRIPTHASH:\n         return 1; // doesn't include args needed by the script\n+    case TX_WITNESS_V0:\n+        return 0;\n+    case TX_WITNESS_V1:\n+        return 0;\n     }\n     return -1;\n }\n@@ -303,3 +325,24 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }\n+\n+CScript GetScriptForWitness(const CScript& redeemscript)\n+{\n+    opcodetype witnessversion = OP_0;\n+    std::vector<unsigned char> witnessprogram;\n+\n+    if (redeemscript.size() >= 1 && redeemscript.size() <= 32) {\n+        witnessprogram = std::vector<unsigned char>(redeemscript.begin(), redeemscript.end());\n+    } else {\n+        witnessversion = OP_1;\n+        uint256 hash;\n+        CSHA256().Write(&redeemscript[0], redeemscript.size()).Finalize(hash.begin());\n+        witnessprogram = ToByteVector(hash);\n+    }\n+\n+    CScript script;\n+    script << witnessversion << witnessprogram;\n+    int v;\n+    assert(script.IsWitnessProgram(v, witnessprogram));\n+    return script;\n+}"
      },
      {
        "sha": "ba87a6839343cb2435d286e47f6b6a8b33b1a7d7",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -51,6 +51,8 @@ enum txnouttype\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n     TX_NULL_DATA,\n+    TX_WITNESS_V0,\n+    TX_WITNESS_V1,\n };\n \n class CNoDestination {\n@@ -78,5 +80,6 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n CScript GetScriptForDestination(const CTxDestination& dest);\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+CScript GetScriptForWitness(const CScript& redeemscript);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "5165c722c389243022db8ae61c723d7fe4301564",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\""
      },
      {
        "sha": "867d5bb4edfabfb8938208784f029439ba533df1",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -866,50 +866,50 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n-    CScript empty;\n-    CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);\n-    BOOST_CHECK(combined.empty());\n+    SignatureData empty;\n+    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, empty);\n+    BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n     SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n     scriptSigCopy = scriptSig;\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSigCopy, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, scriptSigCopy);\n-    BOOST_CHECK(combined == scriptSig);\n+    scriptSigCopy = CScript() << OP_0 << std::vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n-    BOOST_CHECK(combined == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, empty, scriptSig);\n-    BOOST_CHECK(combined == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n@@ -937,22 +937,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial1b);\n-    BOOST_CHECK(combined == partial1a);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1a, partial2a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial1a);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial1b, partial2b);\n-    BOOST_CHECK(combined == complete12);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial1b);\n-    BOOST_CHECK(combined == complete13);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial2a, partial3a);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial2b);\n-    BOOST_CHECK(combined == complete23);\n-    combined = CombineSignatures(scriptPubKey, txTo, 0, partial3b, partial3a);\n-    BOOST_CHECK(combined == partial3c);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1a), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == partial1a);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1a), SignatureData(partial2a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial2a), SignatureData(partial1a));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete12);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial1b));\n+    BOOST_CHECK(combined.scriptSig == complete13);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial2a), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial2b));\n+    BOOST_CHECK(combined.scriptSig == complete23);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial3a));\n+    BOOST_CHECK(combined.scriptSig == partial3c);\n }\n \n BOOST_AUTO_TEST_CASE(script_standard_push)"
      },
      {
        "sha": "290b351a44de3817bef228f08626db885c73febe",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -2076,11 +2076,12 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 {\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n-                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n-                    if (sign)\n-                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n-                    else\n-                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n+                    SignatureData sigdata;\n+                    if (sign) {\n+                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata);\n+                        UpdateTransaction(txNew, nIn, sigdata);\n+                    } else\n+                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata);\n \n                     if (!signSuccess)\n                     {\n@@ -2096,6 +2097,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 if (!sign) {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n                         vin.scriptSig = CScript();\n+                    txNew.wit.SetNull();\n                 }\n \n                 // Embed the constructed transaction data in wtxNew."
      },
      {
        "sha": "9d0f822beb3a2c541384fb502352b662ef15ff3c",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90fb31721d1b6eb16126918f6d4d0de3e1f57818/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "patch": "@@ -72,6 +72,27 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         }\n         break;\n     }\n+    case TX_WITNESS_V0:\n+    {\n+        isminetype ret = IsMine(keystore, CScript(vSolutions[0].begin(), vSolutions[0].end()));\n+        if (ret == ISMINE_SPENDABLE)\n+            return ret;\n+        break;\n+    }\n+    case TX_WITNESS_V1:\n+    {\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret == ISMINE_SPENDABLE)\n+                return ret;\n+        }\n+        break;\n+    }\n+\n     case TX_MULTISIG:\n     {\n         // Only consider transactions \"mine\" if we own ALL the\n@@ -88,8 +109,8 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n \n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n-        CScript scriptSig;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        SignatureData sigs;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      }
    ]
  },
  {
    "sha": "da59630b9b2c93008da14759271db44c6f7e4a24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTU5NjMwYjliMmM5MzAwOGRhMTQ3NTkyNzFkYjQ0YzZmN2U0YTI0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-20T15:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:26Z"
      },
      "message": "Signing tests",
      "tree": {
        "sha": "5d5a6e200d7dc85f06ba73f56b3a2ec3af5679ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d5a6e200d7dc85f06ba73f56b3a2ec3af5679ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da59630b9b2c93008da14759271db44c6f7e4a24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da59630b9b2c93008da14759271db44c6f7e4a24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da59630b9b2c93008da14759271db44c6f7e4a24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da59630b9b2c93008da14759271db44c6f7e4a24/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fb31721d1b6eb16126918f6d4d0de3e1f57818",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90fb31721d1b6eb16126918f6d4d0de3e1f57818"
      }
    ],
    "stats": {
      "total": 277,
      "additions": 277,
      "deletions": 0
    },
    "files": [
      {
        "sha": "44fdf7fa64b0059770e00c8e4700f355a084ebab",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 277,
        "deletions": 0,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da59630b9b2c93008da14759271db44c6f7e4a24/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da59630b9b2c93008da14759271db44c6f7e4a24/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=da59630b9b2c93008da14759271db44c6f7e4a24",
        "patch": "@@ -14,7 +14,9 @@\n #include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n+#include \"script/sign.h\"\n #include \"script/script_error.h\"\n+#include \"script/standard.h\"\n #include \"utilstrencodings.h\"\n \n #include <map>\n@@ -25,11 +27,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n+#include <boost/foreach.hpp>\n \n #include <univalue.h>\n \n using namespace std;\n \n+typedef vector<unsigned char> valtype;\n+\n // In script_tests.cpp\n extern UniValue read_json(const std::string& jsondata);\n \n@@ -320,6 +325,278 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     BOOST_CHECK(!AreInputsStandard(t1, coins));\n }\n \n+void CreateCreditAndSpend(const CKeyStore& keystore, const CScript& outscript, CTransaction& output, CMutableTransaction& input, bool success = true)\n+{\n+    CMutableTransaction outputm;\n+    outputm.nVersion = 1;\n+    outputm.vin.resize(1);\n+    outputm.vin[0].prevout.SetNull();\n+    outputm.vin[0].scriptSig = CScript();\n+    outputm.wit.vtxinwit.resize(1);\n+    outputm.vout.resize(1);\n+    outputm.vout[0].nValue = 1;\n+    outputm.vout[0].scriptPubKey = outscript;\n+    CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) << outputm;\n+    WithOrVersion(&ssout, SERIALIZE_TRANSACTION_WITNESS) >> output;\n+    assert(output.vin.size() == 1);\n+    assert(output.vin[0] == outputm.vin[0]);\n+    assert(output.vout.size() == 1);\n+    assert(output.vout[0] == outputm.vout[0]);\n+    assert(output.wit.vtxinwit.size() == 0);\n+\n+    CMutableTransaction inputm;\n+    inputm.nVersion = 1;\n+    inputm.vin.resize(1);\n+    inputm.vin[0].prevout.hash = output.GetHash();\n+    inputm.vin[0].prevout.n = 0;\n+    inputm.wit.vtxinwit.resize(1);\n+    inputm.vout.resize(1);\n+    inputm.vout[0].nValue = 1;\n+    inputm.vout[0].scriptPubKey = CScript();\n+    bool ret = SignSignature(keystore, output, inputm, 0);\n+    assert(ret == success);\n+    CDataStream ssin(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) << inputm;\n+    WithOrVersion(&ssin, SERIALIZE_TRANSACTION_WITNESS) >> input;\n+    assert(input.vin.size() == 1);\n+    assert(input.vin[0] == inputm.vin[0]);\n+    assert(input.vout.size() == 1);\n+    assert(input.vout[0] == inputm.vout[0]);\n+    if (inputm.wit.IsNull()) {\n+        assert(input.wit.IsNull());\n+    } else {\n+        assert(!input.wit.IsNull());\n+        assert(input.wit.vtxinwit.size() == 1);\n+        assert(input.wit.vtxinwit[0].scriptWitness.stack == inputm.wit.vtxinwit[0].scriptWitness.stack);\n+    }\n+}\n+\n+void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input, int flags, bool success)\n+{\n+    ScriptError error;\n+    CTransaction inputi(input);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0), &error);\n+    assert(ret == success);\n+}\n+\n+static CScript PushAll(const vector<valtype>& values)\n+{\n+    CScript result;\n+    BOOST_FOREACH(const valtype& v, values) {\n+        if (v.size() == 0) {\n+            result << OP_0;\n+        } else if (v.size() == 1 && v[0] >= 1 && v[0] <= 16) {\n+            result << CScript::EncodeOP_N(v[0]);\n+        } else {\n+            result << v;\n+        }\n+    }\n+    return result;\n+}\n+\n+void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n+{\n+    vector<valtype> stack;\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    assert(stack.size() > 0);\n+    stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n+    script = PushAll(stack);\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_witness)\n+{\n+    ScriptError serror;\n+    CBasicKeyStore keystore, keystore2;\n+    CKey key1, key2, key3, key1L, key2L;\n+    CPubKey pubkey1, pubkey2, pubkey3, pubkey1L, pubkey2L;\n+    key1.MakeNewKey(true);\n+    key2.MakeNewKey(true);\n+    key3.MakeNewKey(true);\n+    key1L.MakeNewKey(false);\n+    key2L.MakeNewKey(false);\n+    pubkey1 = key1.GetPubKey();\n+    pubkey2 = key2.GetPubKey();\n+    pubkey3 = key3.GetPubKey();\n+    pubkey1L = key1L.GetPubKey();\n+    pubkey2L = key2L.GetPubKey();\n+    keystore.AddKeyPubKey(key1, pubkey1);\n+    keystore.AddKeyPubKey(key2, pubkey2);\n+    keystore.AddKeyPubKey(key1L, pubkey1L);\n+    keystore.AddKeyPubKey(key2L, pubkey2L);\n+    CScript scriptPubkey1, scriptPubkey2, scriptPubkey1L, scriptPubkey2L, scriptMulti;\n+    scriptPubkey1 << ToByteVector(pubkey1) << OP_CHECKSIG;\n+    scriptPubkey2 << ToByteVector(pubkey2) << OP_CHECKSIG;\n+    scriptPubkey1L << ToByteVector(pubkey1L) << OP_CHECKSIG;\n+    scriptPubkey2L << ToByteVector(pubkey2L) << OP_CHECKSIG; \n+    std::vector<CPubKey> oneandthree;\n+    oneandthree.push_back(pubkey1);\n+    oneandthree.push_back(pubkey3);\n+    scriptMulti = GetScriptForMultisig(2, oneandthree);\n+    keystore.AddCScript(scriptPubkey1);\n+    keystore.AddCScript(scriptPubkey2);\n+    keystore.AddCScript(scriptPubkey1L);\n+    keystore.AddCScript(scriptPubkey2L);\n+    keystore.AddCScript(scriptMulti);\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey1L));\n+    keystore.AddCScript(GetScriptForWitness(scriptPubkey2L));\n+    keystore.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddCScript(scriptMulti);\n+    keystore2.AddCScript(GetScriptForWitness(scriptMulti));\n+    keystore2.AddKeyPubKey(key3, pubkey3);\n+\n+    CTransaction output1, output2;\n+    CMutableTransaction input1, input2;\n+    SignatureData sigdata;\n+\n+    // Normal pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-compressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-compressed-pubkey (v0).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, scriptPubkey1L, output1, input1);\n+    CreateCreditAndSpend(keystore, scriptPubkey2L, output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH pay-to-uncompressed-pubkey.\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2L)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input2, 0, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n+    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+\n+    // Normal 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, false);\n+    CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptMulti)), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(scriptMulti)), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // Witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptMulti), output1, input1, false);\n+    CheckWithFlag(output1, input1, 0, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForWitness(scriptMulti), output2, input2, false);\n+    CheckWithFlag(output2, input2, 0, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+\n+    // P2SH witness 2-of-2 multisig\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output1, input1, false);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output2, input2, false);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n+    CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n+    BOOST_CHECK(output1 == output2);\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n+    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+}\n+\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "f5ad9f0490adecb04b32e5297c0c61e244213340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWFkOWYwNDkwYWRlY2IwNGIzMmU1Mjk3YzBjNjFlMjQ0MjEzMzQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-26T16:12:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:27Z"
      },
      "message": "Make script validation observe input amounts",
      "tree": {
        "sha": "22741125a30a4678967d445a956e3ece7a5bed6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22741125a30a4678967d445a956e3ece7a5bed6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ad9f0490adecb04b32e5297c0c61e244213340",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad9f0490adecb04b32e5297c0c61e244213340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ad9f0490adecb04b32e5297c0c61e244213340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad9f0490adecb04b32e5297c0c61e244213340/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da59630b9b2c93008da14759271db44c6f7e4a24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da59630b9b2c93008da14759271db44c6f7e4a24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da59630b9b2c93008da14759271db44c6f7e4a24"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 102,
      "deletions": 73
    },
    "files": [
      {
        "sha": "b5e359df865089e70dad2ecba681551de8431f47",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -354,6 +354,18 @@ vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n     return ParseHexUV(o[strKey], strKey);\n }\n \n+static CAmount AmountFromValue(const UniValue& value)\n+{\n+    if (!value.isNum() && !value.isStr())\n+        throw runtime_error(\"Amount is not a number or string\");\n+    CAmount amount;\n+    if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n+        throw runtime_error(\"Invalid amount\");\n+    if (!MoneyRange(amount))\n+        throw runtime_error(\"Amount out of range\");\n+    return amount;\n+}\n+\n static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n {\n     int nHashType = SIGHASH_ALL;\n@@ -425,7 +437,10 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(prevOut[\"amount\"]);\n+                }\n             }\n \n             // if redeemScript given and private keys given,\n@@ -453,18 +468,19 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CTransaction& txv, txVariants)\n-            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i), sigdata, DataFromTransaction(txv, i));\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n \n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "8172d739c74a84653916bd37b828df2b61f7b612",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -558,7 +558,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\"    (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"    ]\\n\"\n@@ -696,7 +697,10 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n                 if ((unsigned int)nOut >= coins->vout.size())\n                     coins->vout.resize(nOut+1);\n                 coins->vout[nOut].scriptPubKey = scriptPubKey;\n-                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n+                coins->vout[nOut].nValue = 0;\n+                if (prevOut.exists(\"amount\")) {\n+                    coins->vout[nOut].nValue = AmountFromValue(find_value(prevOut, \"amount\"));\n+                }\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n@@ -751,21 +755,22 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             continue;\n         }\n         const CScript& prevPubKey = coins->vout[txin.prevout.n].scriptPubKey;\n+        const CAmount& amount = coins->vout[txin.prevout.n].nValue;\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i), sigdata, DataFromTransaction(txv, i));\n+            sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx.wit.vtxinwit.size() > i ? &mergedTx.wit.vtxinwit[i].scriptWitness : NULL, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "b85fa206f204760ad1e1d0214a52eec089c65743",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -69,7 +69,7 @@ struct ECCryptoClosure\n ECCryptoClosure instance_of_eccryptoclosure;\n }\n \n-int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err)\n {\n@@ -85,7 +85,8 @@ int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned i\n          // Regardless of the verification result, the tx did not error.\n          set_error(err, bitcoinconsensus_ERR_OK);\n \n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn), NULL);\n+        CAmount am(amount);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, am), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "ba4783c606f3d9a9171ee6ab9d9d22c68a3819af",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -6,6 +6,8 @@\n #ifndef BITCOIN_BITCOINCONSENSUS_H\n #define BITCOIN_BITCOINCONSENSUS_H\n \n+#include <stdint.h>\n+\n #if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n   #if defined(_WIN32)\n@@ -54,7 +56,7 @@ enum\n /// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under\n /// the additional constraints specified by flags.\n /// If not NULL, err will contain an error/success code for the operation\n-EXPORT_SYMBOL int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen,\n+EXPORT_SYMBOL int bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, unsigned int scriptPubKeyLen, uint64_t amount,\n                                     const unsigned char *txTo        , unsigned int txToLen,\n                                     unsigned int nIn, unsigned int flags, bitcoinconsensus_error* err);\n "
      },
      {
        "sha": "5b41434332279c1106bdfd1662740565904ac603",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -117,7 +117,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n@@ -128,7 +128,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn) : TransactionSignatureChecker(&txTo, nInIn), txTo(*txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);"
      },
      {
        "sha": "c8963bbc679d925671ec33a245ac84ea95fed64a",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -22,7 +22,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn=true) : TransactionSignatureChecker(txToIn, nInIn, amount), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "346b23b39a7c7dbcb6080c0e7c9689a03d1e2aeb",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -18,7 +18,7 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amount) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n {\n@@ -205,12 +205,12 @@ void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const Signatur\n     }\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, nHashType);\n+    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, amount, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n@@ -225,7 +225,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n+    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,"
      },
      {
        "sha": "8c7418cae478a405dff25b1b60b9c72383f79cc8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -38,7 +38,7 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n };\n@@ -47,7 +47,7 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n     CTransaction tx;\n \n public:\n-    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, int nHashTypeIn=SIGHASH_ALL) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, nHashTypeIn), tx(*txToIn) {}\n+    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn=SIGHASH_ALL) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatyres. */\n@@ -70,7 +70,7 @@ struct SignatureData {\n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n+bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */"
      },
      {
        "sha": "0a66487803c52e8a03aec736093562a2aa06a5b8",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -48,6 +48,7 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n \n     ScriptError err;\n     CKey key[4];\n+    CAmount amount = 0;\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n@@ -83,20 +84,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -107,18 +108,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, NULL, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -130,12 +131,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, NULL, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "ebba0efc3218507b6596801b537bd3c075a1abf8",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -46,7 +46,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, NULL, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue), &err);\n }\n \n "
      },
      {
        "sha": "2b5cb1348da2723b85f37ac5d63a686a30efe7be",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 35,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -94,14 +94,15 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bo\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n     ScriptError err;\n-    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction tx = BuildSpendingTransaction(scriptSig, txCredit);\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, txCredit.vout[0].scriptPubKey, NULL, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n-    BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n+    BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, flags, NULL) == expect,message);\n #endif\n }\n \n@@ -762,18 +763,18 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, NULL, flags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -795,61 +796,62 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, NULL, flags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n     // Test the CombineSignatures function\n     CBasicKeyStore keystore;\n+    CAmount amount = 0;\n     vector<CKey> keys;\n     vector<CPubKey> pubkeys;\n     for (int i = 0; i < 3; i++)\n@@ -867,48 +869,48 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n \n     SignatureData empty;\n-    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, empty);\n+    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, empty);\n     BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n     SignSignature(keystore, txFrom, txTo, 0); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n     CScript scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n     scriptSigCopy = scriptSig;\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n     // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n     scriptSigCopy = CScript() << OP_0 << std::vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(scriptSig), empty);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), empty, SignatureData(scriptSig));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n \n     // A couple of partially-signed versions:\n@@ -937,21 +939,21 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n \n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1a), SignatureData(partial1b));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial1b));\n     BOOST_CHECK(combined.scriptSig == partial1a);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1a), SignatureData(partial2a));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial2a));\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial2a), SignatureData(partial1a));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial1a));\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial1b), SignatureData(partial2b));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1b), SignatureData(partial2b));\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial1b));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial1b));\n     BOOST_CHECK(combined.scriptSig == complete13);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial2a), SignatureData(partial3a));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial3a));\n     BOOST_CHECK(combined.scriptSig == complete23);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial2b));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial2b));\n     BOOST_CHECK(combined.scriptSig == complete23);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0), SignatureData(partial3b), SignatureData(partial3a));\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial3a));\n     BOOST_CHECK(combined.scriptSig == partial3c);\n }\n "
      },
      {
        "sha": "561223662a795784c110f1e571eb9fce0414a73a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ad9f0490adecb04b32e5297c0c61e244213340/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f5ad9f0490adecb04b32e5297c0c61e244213340",
        "patch": "@@ -153,9 +153,10 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n+                CAmount amount = 0;\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err),\n+                                                 NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -228,8 +229,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+                CAmount amount = 0;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i), &err);\n+                                      NULL, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -376,7 +378,7 @@ void CheckWithFlag(const CTransaction& output, const CMutableTransaction& input,\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, inputi.wit.vtxinwit.size() > 0 ? &inputi.wit.vtxinwit[0].scriptWitness : NULL, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n     assert(ret == success);\n }\n \n@@ -557,7 +559,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, false);\n     BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n@@ -568,7 +570,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n     BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -580,7 +582,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -592,7 +594,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(output1 == output2);\n-    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateTransaction(input1, 0, CombineSignatures(output1.vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1.vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }"
      }
    ]
  },
  {
    "sha": "0de06550ebaa367453a3fc6097d4978ebab04c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGUwNjU1MGViYWEzNjc0NTNhM2ZjNjA5N2Q0OTc4ZWJhYjA0YzIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-27T18:49:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:27Z"
      },
      "message": "Add signature version 1 with updated sighash",
      "tree": {
        "sha": "a5ba0a9fb85b0c70ca3381bc3623a0bcf99451b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5ba0a9fb85b0c70ca3381bc3623a0bcf99451b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0de06550ebaa367453a3fc6097d4978ebab04c20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0de06550ebaa367453a3fc6097d4978ebab04c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0de06550ebaa367453a3fc6097d4978ebab04c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0de06550ebaa367453a3fc6097d4978ebab04c20/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ad9f0490adecb04b32e5297c0c61e244213340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ad9f0490adecb04b32e5297c0c61e244213340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ad9f0490adecb04b32e5297c0c61e244213340"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 123,
      "deletions": 60
    },
    "files": [
      {
        "sha": "9cb0799edb1c6bcaf42507ee76a2cdaa1a9553dc",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -146,7 +146,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         std::vector<std::vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), 0))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)"
      },
      {
        "sha": "cdffd7d272c5b8eb374dc117358b919b0007b680",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 10,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -226,7 +226,7 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -835,7 +835,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         //serror is set\n                         return false;\n                     }\n-                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    bool fSuccess = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -903,7 +903,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         }\n \n                         // Check signature\n-                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = checker.CheckSig(vchSig, vchPubKey, scriptCode, sigversion);\n \n                         if (fOk) {\n                             isig++;\n@@ -1066,8 +1066,69 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion)\n {\n+    if (sigversion == 1) {\n+        uint256 hashPrevouts;\n+        uint256 hashSequence;\n+        uint256 hashOutputs;\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << (uint32_t)(txTo.vin.size());\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].prevout;\n+            }\n+            hashPrevouts = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << (uint32_t)(txTo.vin.size());\n+            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+                ss << txTo.vin[n].nSequence;\n+            }\n+            hashSequence = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        }\n+\n+        if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << (uint32_t)(txTo.vout.size());\n+            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n+                ss << txTo.vout[n];\n+            }\n+            hashOutputs = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+        } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n+            CHashWriter ss(SER_GETHASH, 0);\n+            ss << ((uint32_t)1);\n+            ss << txTo.vout[nIn];\n+            hashOutputs = ss.GetHash();\n+        }\n+\n+        CHashWriter ss(SER_GETHASH, 0);\n+        // Version\n+        ss << txTo.nVersion;\n+        // Input prevouts/nSequence (none/all, depending on flags)\n+        ss << hashPrevouts;\n+        ss << hashSequence;\n+        // The input being signed (replacing the scriptSig with scriptCode + amount)\n+        // The prevout may already be contained in hashPrevout, and the nSequence\n+        // may already be contain in hashSequence.\n+        ss << txTo.vin[nIn].prevout;\n+        ss << (uint32_t)(scriptCode.size());\n+        ss.write((const char*)&scriptCode[0], scriptCode.size());\n+        ss << amount;\n+        ss << txTo.vin[nIn].nSequence;\n+        // Outputs (none/one/all, depending on flags)\n+        ss << hashOutputs;\n+        // Locktime\n+        ss << txTo.nLockTime;\n+        // Sighash type\n+        ss << nHashType;\n+\n+        return ss.GetHash();\n+    }\n+\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size()) {\n         //  nIn out of range\n@@ -1096,7 +1157,7 @@ bool TransactionSignatureChecker::VerifySignature(const std::vector<unsigned cha\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -1109,7 +1170,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n@@ -1182,7 +1243,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         return set_success(serror);\n     }\n \n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror)) {\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 1, serror)) {\n         return false;\n     }\n     // Scripts inside witness implicitly require cleanstack behaviour\n@@ -1208,12 +1269,12 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n     }\n \n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, flags, checker, serror))\n+    if (!EvalScript(stack, scriptSig, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, flags, checker, serror))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker, 0, serror))\n         // serror is set\n         return false;\n     if (stack.empty())\n@@ -1259,7 +1320,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stack);\n \n-        if (!EvalScript(stack, pubKey2, flags, checker, serror))\n+        if (!EvalScript(stack, pubKey2, flags, checker, 0, serror))\n             // serror is set\n             return false;\n         if (stack.empty())"
      },
      {
        "sha": "8295493f8799027dfa022c0b1d6db0565286a24d",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -89,12 +89,12 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, int sigversion);\n \n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return false;\n     }\n@@ -112,13 +112,14 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n private:\n     const CTransaction* txTo;\n     unsigned int nIn;\n+    const CAmount amount;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : txTo(txToIn), nIn(nInIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n };\n \n@@ -131,7 +132,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* error = NULL);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, int sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n #endif // BITCOIN_SCRIPT_INTERPRETER_H"
      },
      {
        "sha": "ab0a0837e1c8412adc2aa88c22111ed154f37faa",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -18,39 +18,39 @@ using namespace std;\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), checker(txTo, nIn, amount) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode) const\n+bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion) const\n {\n     CKey key;\n     if (!keystore->GetKey(address, key))\n         return false;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)nHashType);\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret)\n+static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     vector<unsigned char> vchSig;\n-    if (!creator.CreateSig(vchSig, address, scriptCode))\n+    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))\n         return false;\n     ret.push_back(vchSig);\n     return true;\n }\n \n-static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret)\n+static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, creator, scriptCode, ret))\n+        if (Sign1(keyID, creator, scriptCode, ret, sigversion))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n@@ -63,7 +63,7 @@ static bool SignN(const vector<valtype>& multisigdata, const BaseSignatureCreato\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     std::vector<valtype>& ret, txnouttype& whichTypeRet)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet, int sigversion)\n {\n     CScript scriptRet;\n     uint160 h160;\n@@ -81,10 +81,10 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, ret);\n+        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, ret))\n+        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n@@ -102,7 +102,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n \n     case TX_MULTISIG:\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, ret));\n+        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n \n     case TX_WITNESS_V0:\n         ret.push_back(vSolutions[0]);\n@@ -142,7 +142,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     bool solved = true;\n     std::vector<valtype> result;\n     txnouttype whichType;\n-    solved = SignStep(creator, script, result, whichType);\n+    solved = SignStep(creator, script, result, whichType, 0);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n@@ -153,23 +153,23 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n         script = subscript = CScript(result[0].begin(), result[0].end());\n-        solved = solved && SignStep(creator, script, result, whichType) && whichType != TX_SCRIPTHASH;\n+        solved = solved && SignStep(creator, script, result, whichType, 0) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n \n     if (whichType == TX_WITNESS_V0)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n     }\n     else if (whichType == TX_WITNESS_V1)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n+        solved = solved && SignStep(creator, witnessscript, result, subType, 1) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0 && subType != TX_WITNESS_V1;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n@@ -230,7 +230,7 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutab\n \n static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                const vector<valtype>& vSolutions,\n-                               const vector<valtype>& sigs1, const vector<valtype>& sigs2)\n+                               const vector<valtype>& sigs1, const vector<valtype>& sigs2, int sigversion)\n {\n     // Combine all the signatures we've got:\n     set<valtype> allsigs;\n@@ -258,7 +258,7 @@ static vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSi\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (checker.CheckSig(sig, pubkey, scriptPubKey))\n+            if (checker.CheckSig(sig, pubkey, scriptPubKey, sigversion))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -293,7 +293,7 @@ struct Stacks\n     Stacks() {}\n     explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n     explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n-        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n     }\n \n     SignatureData Output() const {\n@@ -307,7 +307,7 @@ struct Stacks\n \n static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const vector<valtype>& vSolutions,\n-                                 Stacks sigs1, Stacks sigs2)\n+                                 Stacks sigs1, Stacks sigs2, int sigversion)\n {\n     switch (txType)\n     {\n@@ -339,12 +339,12 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             Solver(pubKey2, txType2, vSolutions2);\n             sigs1.script.pop_back();\n             sigs2.script.pop_back();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, sigversion);\n             result.script.push_back(spk);\n             return result;\n         }\n     case TX_MULTISIG:\n-        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script));\n+        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script, sigversion));\n     case TX_WITNESS_V0:\n         if (sigs1.witness.empty())\n             return sigs2;\n@@ -361,7 +361,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             sigs1.witness.clear();\n             sigs2.script = sigs2.witness;\n             sigs2.witness.clear();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, 1);\n             result.witness = result.script;\n             result.script.clear();\n             return result;\n@@ -384,7 +384,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             sigs2.witness.pop_back();\n             sigs2.script = sigs2.witness;\n             sigs2.witness.clear();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2);\n+            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, 1);\n             result.witness = result.script;\n             result.script.clear();\n             result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n@@ -402,7 +402,7 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n     vector<vector<unsigned char> > vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2)).Output();\n+    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), 0).Output();\n }\n \n namespace {\n@@ -412,7 +412,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int sigversion) const\n     {\n         return true;\n     }\n@@ -425,7 +425,7 @@ const BaseSignatureChecker& DummySignatureCreator::Checker() const\n     return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const\n+bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const\n {\n     // Create a dummy signature that is a valid DER-encoding\n     vchSig.assign(72, '\\000');"
      },
      {
        "sha": "b5a8f7c61cd782d740d6492ba2c83a62852ec1fd",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -27,20 +27,21 @@ class BaseSignatureCreator {\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n     /** Create a singular (non-script) signature. */\n-    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const =0;\n+    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n class TransactionSignatureCreator : public BaseSignatureCreator {\n     const CTransaction* txTo;\n     unsigned int nIn;\n     int nHashType;\n+    CAmount amount;\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -55,7 +56,7 @@ class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode) const;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, int sigversion) const;\n };\n \n struct SignatureData {"
      },
      {
        "sha": "9105a78f092c3c9f862f01339a791254b489038a",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n CScript\n sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction, int whichIn)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     result << OP_0; // CHECKMULTISIG bug workaround"
      },
      {
        "sha": "42d65a9076c9c83aa4094ed1aa2d67d10f1117d1",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -241,7 +241,7 @@ class TestBuilder\n \n     TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n     {\n-        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType, 0, 0);\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n@@ -697,29 +697,29 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), 0, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n }\n \n CScript\n sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n {\n-    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL);\n+    uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, 0);\n \n     CScript result;\n     //\n@@ -915,15 +915,15 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     // A couple of partially-signed versions:\n     vector<unsigned char> sig1;\n-    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL);\n+    uint256 hash1 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_ALL, 0, 0);\n     BOOST_CHECK(keys[0].Sign(hash1, sig1));\n     sig1.push_back(SIGHASH_ALL);\n     vector<unsigned char> sig2;\n-    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE);\n+    uint256 hash2 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_NONE, 0, 0);\n     BOOST_CHECK(keys[1].Sign(hash2, sig2));\n     sig2.push_back(SIGHASH_NONE);\n     vector<unsigned char> sig3;\n-    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE);\n+    uint256 hash3 = SignatureHash(scriptPubKey, txTo, 0, SIGHASH_SINGLE, 0, 0);\n     BOOST_CHECK(keys[2].Sign(hash3, sig3));\n     sig3.push_back(SIGHASH_SINGLE);\n "
      },
      {
        "sha": "252ca5049e2ab89f3ec9fe1185d3badf2c8a094a",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(sighash_test)\n \n         uint256 sh, sho;\n         sho = SignatureHashOld(scriptCode, txTo, nIn, nHashType);\n-        sh = SignatureHash(scriptCode, txTo, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, txTo, nIn, nHashType, 0, 0);\n         #if defined(PRINT_SIGHASH_JSON)\n         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n         ss << txTo;\n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n           continue;\n         }\n \n-        sh = SignatureHash(scriptCode, tx, nIn, nHashType);\n+        sh = SignatureHash(scriptCode, tx, nIn, nHashType, 0, 0);\n         BOOST_CHECK_MESSAGE(sh.GetHex() == sigHashHex, strTest);\n     }\n }"
      },
      {
        "sha": "8a57665e6b7a90c2705e0546b5504492b1ca41cd",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -400,7 +400,7 @@ static CScript PushAll(const vector<valtype>& values)\n void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     vector<valtype> stack;\n-    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), 0);\n     assert(stack.size() > 0);\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n     script = PushAll(stack);"
      },
      {
        "sha": "7a200894cbf63b547ef11b25afcde427db3ab4a9",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0de06550ebaa367453a3fc6097d4978ebab04c20/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=0de06550ebaa367453a3fc6097d4978ebab04c20",
        "patch": "@@ -48,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n         // Sign:\n         std::vector<unsigned char> vchSig;\n-        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL, 0, 0);\n         BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         spends[i].vin[0].scriptSig << vchSig;"
      }
    ]
  },
  {
    "sha": "f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWYwZTM4ZTM4Yzc0YWI5Y2VkOWIzZDZmMDU0ZGQ0NWNmNjQwMjY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T00:13:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-12-30T03:26:27Z"
      },
      "message": "Add witness address RPCs (using P2SH)",
      "tree": {
        "sha": "a85eef0d99652c94ba6b1deb3c6a39eaf2fc8bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85eef0d99652c94ba6b1deb3c6a39eaf2fc8bb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0de06550ebaa367453a3fc6097d4978ebab04c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0de06550ebaa367453a3fc6097d4978ebab04c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0de06550ebaa367453a3fc6097d4978ebab04c20"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "57145af77684cec06f07f8628607f6df2b2d6296",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "patch": "@@ -312,6 +312,39 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue createwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nCreates a witness address for a particular script.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"  \\\"witnessScript\\\":\\\"script\\\"      (string) The string value of the hex-encoded witness script.\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());\n+    CScript script(code.begin(), code.end());\n+    CScript witscript = GetScriptForWitness(script);\n+    CScriptID witscriptid(witscript);\n+    CBitcoinAddress address(witscriptid);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", address.ToString()));\n+    result.push_back(Pair(\"witnessScript\", HexStr(witscript.begin(), witscript.end())));\n+\n+    return result;\n+}\n+\n UniValue verifymessage(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 3)"
      },
      {
        "sha": "3a5fa1ed30b5ae1fe0b431393d9a41943b9fe12c",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "patch": "@@ -315,6 +315,7 @@ static const CRPCCommand vRPCCommands[] =\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n+    { \"util\",               \"createwitnessaddress\",   &createwitnessaddress,   true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },\n     { \"util\",               \"estimatefee\",            &estimatefee,            true  },\n@@ -333,6 +334,7 @@ static const CRPCCommand vRPCCommands[] =\n #ifdef ENABLE_WALLET\n     /* Wallet */\n     { \"wallet\",             \"addmultisigaddress\",     &addmultisigaddress,     true  },\n+    { \"wallet\",             \"addwitnessaddress\",      &addwitnessaddress,      true  },\n     { \"wallet\",             \"backupwallet\",           &backupwallet,           true  },\n     { \"wallet\",             \"dumpprivkey\",            &dumpprivkey,            true  },\n     { \"wallet\",             \"dumpwallet\",             &dumpwallet,             true  },"
      },
      {
        "sha": "62eaf4c57028e5c9b292f7c00ff17d77d33938b7",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "patch": "@@ -213,7 +213,9 @@ extern UniValue movecmd(const UniValue& params, bool fHelp);\n extern UniValue sendfrom(const UniValue& params, bool fHelp);\n extern UniValue sendmany(const UniValue& params, bool fHelp);\n extern UniValue addmultisigaddress(const UniValue& params, bool fHelp);\n+extern UniValue addwitnessaddress(const UniValue& params, bool fHelp);\n extern UniValue createmultisig(const UniValue& params, bool fHelp);\n+extern UniValue createwitnessaddress(const UniValue& params, bool fHelp);\n extern UniValue listreceivedbyaddress(const UniValue& params, bool fHelp);\n extern UniValue listreceivedbyaccount(const UniValue& params, bool fHelp);\n extern UniValue listtransactions(const UniValue& params, bool fHelp);"
      },
      {
        "sha": "24fdb679a67fba31a9dbf5a0ac360cc6236b52b6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "patch": "@@ -1083,6 +1083,35 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     return CBitcoinAddress(innerID).ToString();\n }\n \n+UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+    {\n+        string msg = \"createwitnessaddress \\\"script\\\"\\n\"\n+            \"\\nAdd a witness address for a particular script to the wallet.\\n\"\n+            \"It returns a json object with the address and witness script.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"script\\\"       (string, required) A hex encoded script\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"\\\"address\\\":\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n+            \"}\\n\"\n+        ;\n+        throw runtime_error(msg);\n+    }\n+\n+    std::vector<unsigned char> code = ParseHex(params[0].get_str());\n+    CScript script(code.begin(), code.end());\n+    CScript witscript = GetScriptForWitness(script);\n+    CScriptID witscriptid(witscript);\n+    CBitcoinAddress address(witscriptid);\n+\n+    pwalletMain->AddCScript(script);\n+    pwalletMain->AddCScript(witscript);\n+    UniValue result(UniValue::VOBJ);\n+    return address.ToString();\n+}\n \n struct tallyitem\n {"
      }
    ]
  },
  {
    "sha": "a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2NmNWY0YTk4ZWQ1ODM5Y2MzZmYyNWExYTY2MmZlZWRjYjU5YzA5",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-12-30T04:00:31Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-12-30T04:00:31Z"
      },
      "message": "Disable PoW warning for regtest",
      "tree": {
        "sha": "e70385a86e2d165ff207e1160212e20ab7a6ea48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e70385a86e2d165ff207e1160212e20ab7a6ea48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1f0e38e38c74ab9ced9b3d6f054dd45cf640264"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "74b201d7fee5e032fc5cb31d7c5551c9fbbd8cb1",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a3cf5f4a98ed5839cc3ff25a1a662feedcb59c09",
        "patch": "@@ -97,7 +97,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n         return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n-    if (UintToArith256(hash) > bnTarget)\n+    if (!params.fPowNoRetargeting && UintToArith256(hash) > bnTarget)\n         return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;"
      }
    ]
  }
]