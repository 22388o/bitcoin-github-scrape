[
  {
    "sha": "fa785d121152c652d0704ac32ce8611262e609d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc4NWQxMjExNTJjNjUyZDA3MDRhYzMyY2U4NjExMjYyZTYwOWQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-19T16:31:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-19T16:59:00Z"
      },
      "message": "Use __func__ to get function name for output printing",
      "tree": {
        "sha": "90d5d1447ea393bbf2471733f44d7c08f92be150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90d5d1447ea393bbf2471733f44d7c08f92be150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa785d121152c652d0704ac32ce8611262e609d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa785d121152c652d0704ac32ce8611262e609d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa785d121152c652d0704ac32ce8611262e609d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa785d121152c652d0704ac32ce8611262e609d2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e5d94df1fb09ed7ee7ed50032f876972ef39489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e5d94df1fb09ed7ee7ed50032f876972ef39489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e5d94df1fb09ed7ee7ed50032f876972ef39489"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a6bf96f3e450a24f363cd04e4ebdfe7243934c85",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa785d121152c652d0704ac32ce8611262e609d2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa785d121152c652d0704ac32ce8611262e609d2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fa785d121152c652d0704ac32ce8611262e609d2",
        "patch": "@@ -3954,7 +3954,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n+        throw runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n "
      },
      {
        "sha": "2fdc59ea077677b701c698dc77d9adecc48a9893",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa785d121152c652d0704ac32ce8611262e609d2/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa785d121152c652d0704ac32ce8611262e609d2/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=fa785d121152c652d0704ac32ce8611262e609d2",
        "patch": "@@ -100,7 +100,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n+            throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "cb414cec1d505d2f01c7e585d1aec2f1e6490a0a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa785d121152c652d0704ac32ce8611262e609d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa785d121152c652d0704ac32ce8611262e609d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa785d121152c652d0704ac32ce8611262e609d2",
        "patch": "@@ -108,7 +108,7 @@ CPubKey CWallet::GenerateNewKey()\n \n         // try to get the master key\n         if (!GetKey(hdChain.masterKeyID, key))\n-            throw std::runtime_error(\"CWallet::GenerateNewKey(): Master key not found\");\n+            throw std::runtime_error(std::string(__func__) + \": Master key not found\");\n \n         masterKey.SetMaster(key.begin(), key.size());\n \n@@ -135,7 +135,7 @@ CPubKey CWallet::GenerateNewKey()\n \n         // update the chain model in the database\n         if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n-            throw std::runtime_error(\"CWallet::GenerateNewKey(): Writing HD chain model failed\");\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n     } else {\n         secret.MakeNewKey(fCompressed);\n     }\n@@ -152,7 +152,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n+        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n     return pubkey;\n }\n \n@@ -1094,7 +1094,7 @@ isminetype CWallet::IsMine(const CTxOut& txout) const\n CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const\n {\n     if (!MoneyRange(txout.nValue))\n-        throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+        throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     return ((IsMine(txout) & filter) ? txout.nValue : 0);\n }\n \n@@ -1123,7 +1123,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n CAmount CWallet::GetChange(const CTxOut& txout) const\n {\n     if (!MoneyRange(txout.nValue))\n-        throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+        throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     return (IsChange(txout) ? txout.nValue : 0);\n }\n \n@@ -1147,7 +1147,7 @@ CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) co\n     {\n         nDebit += GetDebit(txin, filter);\n         if (!MoneyRange(nDebit))\n-            throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n+            throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     }\n     return nDebit;\n }\n@@ -1159,7 +1159,7 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n     {\n         nCredit += GetCredit(txout, filter);\n         if (!MoneyRange(nCredit))\n-            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n+            throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     }\n     return nCredit;\n }\n@@ -1171,7 +1171,7 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     {\n         nChange += GetChange(txout);\n         if (!MoneyRange(nChange))\n-            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n+            throw std::runtime_error(std::string(__func__) + \": value out of range\");\n     }\n     return nChange;\n }\n@@ -1200,7 +1200,7 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n \n         // write the key&metadata to the database\n         if (!AddKeyPubKey(key, pubkey))\n-            throw std::runtime_error(std::string(__func__)+\": AddKeyPubKey failed\");\n+            throw std::runtime_error(std::string(__func__) + \": AddKeyPubKey failed\");\n     }\n \n     return pubkey;\n@@ -1227,7 +1227,7 @@ bool CWallet::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_wallet);\n     if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n-        throw runtime_error(\"AddHDChain(): writing chain failed\");\n+        throw runtime_error(std::string(__func__) + \": writing chain failed\");\n \n     hdChain = chain;\n     return true;\n@@ -2706,7 +2706,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n+                throw runtime_error(std::string(__func__) + \": writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -2733,9 +2733,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n+            throw runtime_error(std::string(__func__) + \": read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n+            throw runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2794,7 +2794,7 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     CWalletDB walletdb(strWalletFile);\n     int64_t nIndex = *(setKeyPool.begin());\n     if (!walletdb.ReadPool(nIndex, keypool))\n-        throw runtime_error(\"GetOldestKeyPoolTime(): read oldest key in keypool failed\");\n+        throw runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n     assert(keypool.vchPubKey.IsValid());\n     return keypool.nTime;\n }\n@@ -3021,11 +3021,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n+            throw runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n+            throw runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -3325,7 +3325,7 @@ bool CWallet::InitLoadWallet()\n             // generate a new master key\n             CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n             if (!walletInstance->SetHDMasterKey(masterPubKey))\n-                throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n+                throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n         }\n         CPubKey newDefaultKey;\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {"
      },
      {
        "sha": "f824492cb6fd404bbe05242183fb22be90417955",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa785d121152c652d0704ac32ce8611262e609d2/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa785d121152c652d0704ac32ce8611262e609d2/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fa785d121152c652d0704ac32ce8611262e609d2",
        "patch": "@@ -215,7 +215,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n+        throw runtime_error(std::string(__func__) + \": cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -231,7 +231,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n+            throw runtime_error(std::string(__func__) + \": error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  }
]