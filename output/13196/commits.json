[
  {
    "sha": "292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTJiZDhkNGRhYjAzZTJhNGI1NTU5MDA3ZjRjZGI4NmFlN2Q3MGMx",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-04-26T16:43:01Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:43Z"
      },
      "message": "tests: Add test for 64-bit PE, modify 32-bit test results\n\n9a75d29b6f0d6c4834e451b0fae2200786655a35 change the error result from `PIE` to `DYNAMIC_BASE`. And there are no test for 64-bit, so I made one",
      "tree": {
        "sha": "e3dc453ac12dd629dfa35274e3011a842787291f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3dc453ac12dd629dfa35274e3011a842787291f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5778d44aa857ca63428ffa27cbcbc9cbd60c4a1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5778d44aa857ca63428ffa27cbcbc9cbd60c4a1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5778d44aa857ca63428ffa27cbcbc9cbd60c4a1d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "37a895872f5e17634b94047835608b423224f1bb",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
        "patch": "@@ -43,18 +43,28 @@ def test_ELF(self):\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']), \n                 (0, ''))\n \n-    def test_PE(self):\n+    def test_32bit_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n         cc = 'i686-w64-mingw32-gcc'\n         write_testcode(source)\n \n         self.assertEqual(call_security_check(cc, source, executable, []), \n-                (1, executable+': failed PIE NX'))\n+                (1, executable+': failed DYNAMIC_BASE NX'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat']), \n-                (1, executable+': failed PIE'))\n+                (1, executable+': failed DYNAMIC_BASE'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase']), \n                 (0, ''))\n+    def test_64bit_PE(self):\n+        source = 'test1.c'\n+        executable = 'test1.exe'\n+        cc = 'x86_64-w64-mingw32-gcc'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, []), (1, executable+': failed DYNAMIC_BASE NX\\n'+executable+': warning HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat']), (1, executable+': failed DYNAMIC_BASE\\n'+executable+': warning HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase']), (0, executable+': warning HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va']), (0, ''))\n \n if __name__ == '__main__':\n     unittest.main()"
      }
    ]
  },
  {
    "sha": "c57612f754e412063aec03c2a385ed55a85c5507",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTc2MTJmNzU0ZTQxMjA2M2FlYzAzYzJhMzg1ZWQ1NWE4NWM1NTA3",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2018-05-07T13:59:17Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:43Z"
      },
      "message": "RPC Docs: gettxout*: clarify bestblock and unspent counts",
      "tree": {
        "sha": "2a676741fd2682d4b7b954285e53e6355bd3f557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a676741fd2682d4b7b954285e53e6355bd3f557"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c57612f754e412063aec03c2a385ed55a85c5507",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57612f754e412063aec03c2a385ed55a85c5507",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c57612f754e412063aec03c2a385ed55a85c5507",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57612f754e412063aec03c2a385ed55a85c5507/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/292bd8d4dab03e2a4b5559007f4cdb86ae7d70c1"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 24,
      "deletions": 4
    },
    "files": [
      {
        "sha": "238d8c9d95d39dde7a8dab679c2440a4e8577dc6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57612f754e412063aec03c2a385ed55a85c5507/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57612f754e412063aec03c2a385ed55a85c5507/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c57612f754e412063aec03c2a385ed55a85c5507",
        "patch": "@@ -958,9 +958,9 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) the best block hash hex\\n\"\n-            \"  \\\"transactions\\\": n,      (numeric) The number of transactions\\n\"\n-            \"  \\\"txouts\\\": n,            (numeric) The number of output transactions\\n\"\n+            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n+            \"  \\\"transactions\\\": n,      (numeric) The number of transactions with unspent outputs\\n\"\n+            \"  \\\"txouts\\\": n,            (numeric) The number of unspent transaction outputs\\n\"\n             \"  \\\"bogosize\\\": n,          (numeric) A meaningless metric for UTXO set size\\n\"\n             \"  \\\"hash_serialized_2\\\": \\\"hash\\\", (string) The serialized hash\\n\"\n             \"  \\\"disk_size\\\": n,         (numeric) The estimated size of the chainstate on disk\\n\"\n@@ -1003,7 +1003,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n+            \"  \\\"bestblock\\\":  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n             \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\""
      },
      {
        "sha": "e65ec8630b87c0fb76d46d34edffbb9081bd0f06",
        "filename": "src/util/platform_posix.cpp",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_posix.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_posix.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_posix.cpp?ref=c57612f754e412063aec03c2a385ed55a85c5507",
        "patch": "@@ -0,0 +1,6 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <platform_posix.h>"
      },
      {
        "sha": "e1d0878d764cf40356ca60b50117417334d326f5",
        "filename": "src/util/platform_posix.h",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_posix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_posix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_posix.h?ref=c57612f754e412063aec03c2a385ed55a85c5507",
        "patch": "@@ -0,0 +1,4 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "891b6076fadc74f54a533f1704744a6dd4025087",
        "filename": "src/util/platform_windows.cpp",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_windows.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_windows.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_windows.cpp?ref=c57612f754e412063aec03c2a385ed55a85c5507",
        "patch": "@@ -0,0 +1,6 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <platform_windows.h>"
      },
      {
        "sha": "e1d0878d764cf40356ca60b50117417334d326f5",
        "filename": "src/util/platform_windows.h",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_windows.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c57612f754e412063aec03c2a385ed55a85c5507/src/util/platform_windows.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_windows.h?ref=c57612f754e412063aec03c2a385ed55a85c5507",
        "patch": "@@ -0,0 +1,4 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  },
  {
    "sha": "db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjJiOWM1ZGNkMDk0YzYxZTE4YTdiNjk2MzM1ZmY1ZTdkYWUwNjk0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-18T05:35:44Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "-includeconf=<path> support in config handler, for including external configuration files",
      "tree": {
        "sha": "98b7837425e687e77b893d87b0ef5ca4172200d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98b7837425e687e77b893d87b0ef5ca4172200d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c57612f754e412063aec03c2a385ed55a85c5507",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c57612f754e412063aec03c2a385ed55a85c5507",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c57612f754e412063aec03c2a385ed55a85c5507"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 41,
      "deletions": 7
    },
    "files": [
      {
        "sha": "05a5079a5aa80a2b557ec8722f552db6567bb283",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -107,7 +107,7 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        gArgs.ReadConfigFiles();\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;"
      },
      {
        "sha": "32b67cabb9fafea292d0277b0121b5dcbf880bf5",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -92,7 +92,7 @@ static bool AppInit(int argc, char* argv[])\n         }\n         try\n         {\n-            gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+            gArgs.ReadConfigFiles();\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "010174bbdc73a70f3c210037a63a456f84272783",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -376,6 +376,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n+    strUsage += HelpMessageOpt(\"-includeconf=<file>\", _(\"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\"));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));"
      },
      {
        "sha": "7f90a38483cd680ce815d960e11cf0e1f45f92c8",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -52,7 +52,7 @@ class NodeImpl : public Node\n     {\n         gArgs.ParseParameters(argc, argv);\n     }\n-    void readConfigFile(const std::string& conf_path) override { gArgs.ReadConfigFile(conf_path); }\n+    void readConfigFiles() override { gArgs.ReadConfigFiles(); }\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }"
      },
      {
        "sha": "d9a48e2563037a72849982109dbb14988e766405",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -48,7 +48,7 @@ class Node\n     virtual bool softSetBoolArg(const std::string& arg, bool value) = 0;\n \n     //! Load settings from configuration file.\n-    virtual void readConfigFile(const std::string& conf_path) = 0;\n+    virtual void readConfigFiles() = 0;\n \n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;"
      },
      {
        "sha": "c0fb641b1cc9e94ef6727dc72dfd90fdf6539121",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -616,7 +616,7 @@ int main(int argc, char *argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        node->readConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        node->readConfigFiles();\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));"
      },
      {
        "sha": "b8723f83c6dadef3e4f7301d58f853295955be79",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -445,6 +445,17 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n             m_override_args[key].push_back(val);\n         }\n     }\n+\n+    // we do not allow -includeconf from command line, so we clear it here\n+    auto it = m_override_args.find(\"-includeconf\");\n+    if (it != m_override_args.end()) {\n+        if (it->second.size() > 0) {\n+            for (const auto& ic : it->second) {\n+                fprintf(stderr, \"warning: -includeconf cannot be used from commandline; ignoring -includeconf=%s\\n\", ic.c_str());\n+            }\n+            m_override_args.erase(it);\n+        }\n+    }\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n@@ -706,18 +717,40 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n     }\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigFiles()\n {\n     {\n         LOCK(cs_args);\n         m_config_args.clear();\n     }\n \n+    const std::string confPath = GetArg(\"-conf\", BITCOIN_CONF_FILENAME);\n     fs::ifstream stream(GetConfigFile(confPath));\n \n     // ok to not have a config file\n     if (stream.good()) {\n         ReadConfigStream(stream);\n+        // if there is an -includeconf in the override args, but it is empty, that means the user\n+        // passed '-noincludeconf' on the command line, in which case we should not include anything\n+        if (m_override_args.count(\"-includeconf\") == 0) {\n+            std::vector<std::string> includeconf(GetArgs(\"-includeconf\"));\n+            {\n+                // We haven't set m_network yet (that happens in SelectParams()), so manually check\n+                // for network.includeconf args.\n+                std::vector<std::string> includeconf_net(GetArgs(std::string(\"-\") + GetChainName() + \".includeconf\"));\n+                includeconf.insert(includeconf.end(), includeconf_net.begin(), includeconf_net.end());\n+            }\n+\n+            for (const std::string& to_include : includeconf) {\n+                fs::ifstream include_config(GetConfigFile(to_include));\n+                if (include_config.good()) {\n+                    ReadConfigStream(include_config);\n+                    LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());\n+                } else {\n+                    fprintf(stderr, \"Failed to include configuration file %s\\n\", to_include.c_str());\n+                }\n+            }\n+        }\n     }\n \n     // If datadir is changed in .conf file:"
      },
      {
        "sha": "186245c94ae39bf451682732cc04f5edf07c6c35",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2b9c5dcd094c61e18a7b696335ff5e7dae0694/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "patch": "@@ -140,7 +140,7 @@ class ArgsManager\n     void SelectConfigNetwork(const std::string& network);\n \n     void ParseParameters(int argc, const char*const argv[]);\n-    void ReadConfigFile(const std::string& confPath);\n+    void ReadConfigFiles();\n \n     /**\n      * Log warnings for options in m_section_only_args when"
      }
    ]
  },
  {
    "sha": "e6d887826355d6e7c25d443285dd7103b8c4f064",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmQ4ODc4MjYzNTVkNmU3YzI1ZDQ0MzI4NWRkNzEwM2I4YzRmMDY0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-05-02T01:26:33Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "test: Test includeconf parameter.",
      "tree": {
        "sha": "c248027106f9ff901151f788efadc97e48bb8d39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c248027106f9ff901151f788efadc97e48bb8d39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6d887826355d6e7c25d443285dd7103b8c4f064",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d887826355d6e7c25d443285dd7103b8c4f064",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d887826355d6e7c25d443285dd7103b8c4f064",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d887826355d6e7c25d443285dd7103b8c4f064/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2b9c5dcd094c61e18a7b696335ff5e7dae0694",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db2b9c5dcd094c61e18a7b696335ff5e7dae0694"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 79,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d3f1be6c3a00d0a9579d1308831c82675b48bf99",
        "filename": "test/functional/feature_includeconf.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d887826355d6e7c25d443285dd7103b8c4f064/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d887826355d6e7c25d443285dd7103b8c4f064/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=e6d887826355d6e7c25d443285dd7103b8c4f064",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the includeconf argument\n+\n+Verify that:\n+\n+1. adding includeconf to the configuration file causes the includeconf\n+   file to be loaded in the correct order.\n+2. includeconf cannot be used as a command line argument.\n+3. includeconf cannot be used recursively (ie includeconf can only\n+   be used from the base config file).\n+4. multiple includeconf arguments can be specified in the main config\n+   file.\n+\"\"\"\n+import os\n+import tempfile\n+\n+from test_framework.test_framework import BitcoinTestFramework, assert_equal\n+\n+class IncludeConfTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        # Create additional config files\n+        # - tmpdir/node0/relative.conf\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative\\n\")\n+        # - tmpdir/node0/relative2.conf\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"relative2.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative2\\n\")\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin.conf\"), \"a\", encoding='utf8') as f:\n+            f.write(\"uacomment=main\\nincludeconf=relative.conf\\n\")\n+\n+    def run_test(self):\n+        self.log.info(\"-includeconf works from config file. subversion should end with 'main; relative)/'\")\n+\n+        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+        assert subversion.endswith(\"main; relative)/\")\n+\n+        self.log.info(\"-includeconf cannot be used as command-line arg. subversion should still end with 'main; relative)/'\")\n+        self.stop_node(0)\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            self.start_node(0, extra_args=[\"-includeconf=relative2.conf\"], stderr=log_stderr)\n+\n+            subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+            assert subversion.endswith(\"main; relative)/\")\n+            log_stderr.seek(0)\n+            stderr = log_stderr.read().decode('utf-8').strip()\n+            assert_equal(stderr, 'warning: -includeconf cannot be used from commandline; ignoring -includeconf=relative2.conf')\n+\n+        self.log.info(\"-includeconf cannot be used recursively. subversion should end with 'main; relative)/'\")\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"a\", encoding=\"utf8\") as f:\n+            f.write(\"includeconf=relative2.conf\\n\")\n+\n+        self.restart_node(0)\n+\n+        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+        assert subversion.endswith(\"main; relative)/\")\n+\n+        self.log.info(\"multiple -includeconf args can be used from the base config file. subversion should end with 'main; relative; relative2)/'\")\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=relative\\n\")\n+\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin.conf\"), \"a\", encoding='utf8') as f:\n+            f.write(\"includeconf=relative2.conf\\n\")\n+\n+        self.restart_node(0)\n+\n+        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+        assert subversion.endswith(\"main; relative; relative2)/\")\n+\n+if __name__ == '__main__':\n+    IncludeConfTest().main()"
      },
      {
        "sha": "0989064fdc6142ad77aa0fa63d74670ba95917dc",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6d887826355d6e7c25d443285dd7103b8c4f064/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6d887826355d6e7c25d443285dd7103b8c4f064/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e6d887826355d6e7c25d443285dd7103b8c4f064",
        "patch": "@@ -138,6 +138,7 @@\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'p2p_unrequested_blocks.py',\n+    'feature_includeconf.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',"
      }
    ]
  },
  {
    "sha": "c2e60969966d452cdcaf992fa11785aaa0dd8b31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmU2MDk2OTk2NmQ0NTJjZGNhZjk5MmZhMTE3ODVhYWEwZGQ4YjMx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-23T04:51:34Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "doc: Add release notes for -includeconf",
      "tree": {
        "sha": "c33325d5505040f518791e3f07e961919b2b270c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c33325d5505040f518791e3f07e961919b2b270c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2e60969966d452cdcaf992fa11785aaa0dd8b31",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e60969966d452cdcaf992fa11785aaa0dd8b31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e60969966d452cdcaf992fa11785aaa0dd8b31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e60969966d452cdcaf992fa11785aaa0dd8b31/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6d887826355d6e7c25d443285dd7103b8c4f064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6d887826355d6e7c25d443285dd7103b8c4f064",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6d887826355d6e7c25d443285dd7103b8c4f064"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e1967daf020a50c2cc98cdb59bc44fae623b349",
        "filename": "doc/release-notes-pr10267.md",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2e60969966d452cdcaf992fa11785aaa0dd8b31/doc/release-notes-pr10267.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2e60969966d452cdcaf992fa11785aaa0dd8b31/doc/release-notes-pr10267.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr10267.md?ref=c2e60969966d452cdcaf992fa11785aaa0dd8b31",
        "patch": "@@ -0,0 +1,13 @@\n+Changed command-line options\n+----------------------------\n+\n+- `-includeconf=<file>` can be used to include additional configuration files.\n+  Only works inside the `bitcoin.conf` file, not inside included files or from\n+  command-line. Multiple files may be included. Can be disabled from command-\n+  line via `-noincludeconf`. Note that multi-argument commands like\n+  `-includeconf` will override preceding `-noincludeconf`, i.e.\n+\n+    noincludeconf=1\n+    includeconf=relative.conf\n+\n+  as bitcoin.conf will still include `relative.conf`."
      }
    ]
  },
  {
    "sha": "a33b773a3c99560c7359a01564bacc9feac48ec3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzNiNzczYTNjOTk1NjBjNzM1OWEwMTU2NGJhY2M5ZmVhYzQ4ZWMz",
    "commit": {
      "author": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-07T10:24:19Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "[bitcoin-11004] creating another jobs for the CHECK_DOC=1, separated from the core jobs",
      "tree": {
        "sha": "39be38f13fa256185b9d9a8cded5f2ce6db2ebab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39be38f13fa256185b9d9a8cded5f2ce6db2ebab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a33b773a3c99560c7359a01564bacc9feac48ec3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a33b773a3c99560c7359a01564bacc9feac48ec3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a33b773a3c99560c7359a01564bacc9feac48ec3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a33b773a3c99560c7359a01564bacc9feac48ec3/comments",
    "author": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2e60969966d452cdcaf992fa11785aaa0dd8b31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2e60969966d452cdcaf992fa11785aaa0dd8b31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2e60969966d452cdcaf992fa11785aaa0dd8b31"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 29,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1f871de800e4eb6d68517b78dd39b1ceaeefe953",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 29,
        "deletions": 14,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a33b773a3c99560c7359a01564bacc9feac48ec3/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a33b773a3c99560c7359a01564bacc9feac48ec3/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a33b773a3c99560c7359a01564bacc9feac48ec3",
        "patch": "@@ -8,11 +8,13 @@ cache:\n   - depends/built\n   - depends/sdk-sources\n   - $HOME/.ccache\n+stages:\n+  - check_doc\n+  - test\n env:\n   global:\n     - MAKEJOBS=-j3\n     - RUN_TESTS=false\n-    - CHECK_DOC=0\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n@@ -22,7 +24,7 @@ env:\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM\n-    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf python3-pip shellcheck\" DEP_OPTS=\"NO_QT=1\" CHECK_DOC=1 GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n+    - HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n     - HOST=i686-w64-mingw32 DPKG_ADD_ARCH=\"i386\" DEP_OPTS=\"NO_QT=1\" PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine1.6\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # Win64\n@@ -44,17 +46,7 @@ install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n-    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then travis_retry pip3 install flake8 --user; fi\n before_script:\n-    - if [ \"$CHECK_DOC\" = 1 ]; then git fetch --unshallow; fi\n-    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/crypto/ctaes; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/secp256k1; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/univalue; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/git-subtree-check.sh src/leveldb; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-doc.py; fi\n-    - if [ \"$CHECK_DOC\" = 1 ]; then contrib/devtools/check-rpc-mappings.py .; fi\n-    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/lint-all.sh; fi\n     - unset CC; unset CXX\n     - mkdir -p depends/SDKs depends/sdk-sources\n     - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n@@ -63,8 +55,6 @@ before_script:\n     # Start xvfb if needed, as documented at https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI\n     - if [ \"$NEED_XVFB\" = 1 ]; then export DISPLAY=:99.0; /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -ac; fi\n script:\n-    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n-    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then travis_wait 30 contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n@@ -84,3 +74,28 @@ script:\n after_script:\n     - echo $TRAVIS_COMMIT_RANGE\n     - echo $TRAVIS_COMMIT_LOG\n+\n+jobs:\n+  include:\n+    - stage: check_doc\n+      sudo: false\n+      addons:\n+        apt:\n+          packages:\n+            - python3-pip\n+            - shellcheck\n+      install:\n+        - if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then travis_retry pip3 install flake8 --user; fi\n+      before_script:\n+        - git fetch --unshallow\n+        - if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n+        - contrib/devtools/git-subtree-check.sh src/crypto/ctaes\n+        - contrib/devtools/git-subtree-check.sh src/secp256k1\n+        - contrib/devtools/git-subtree-check.sh src/univalue\n+        - contrib/devtools/git-subtree-check.sh src/leveldb\n+        - contrib/devtools/check-doc.py\n+        - contrib/devtools/check-rpc-mappings.py .\n+        - if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then contrib/devtools/lint-all.sh; fi\n+      script:\n+        - if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+        - if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then travis_wait 30 contrib/verify-commits/verify-commits.sh; fi"
      }
    ]
  },
  {
    "sha": "b93ad3daf2225135954a3e2ea457abff40f41ce2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTNhZDNkYWYyMjI1MTM1OTU0YTNlMmVhNDU3YWJmZjQwZjQxY2Uy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-01-25T10:03:05Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "[test] fundrawtransaction: lock watch-only shared address\n\nself.nodes[0] creates an address which is watch-only-shared with self.nodes[3]. If nodes[0] spends the associated UTXO during any of its sends later, the watchonly test will fail, as nodes[3] now has insufficient funds.\n\nNote that this also adds a new find_vout_for_address function to the test framework.",
      "tree": {
        "sha": "7a5540f061e04ee49221e65f8c04cfdb8f75d6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a5540f061e04ee49221e65f8c04cfdb8f75d6de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b93ad3daf2225135954a3e2ea457abff40f41ce2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93ad3daf2225135954a3e2ea457abff40f41ce2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b93ad3daf2225135954a3e2ea457abff40f41ce2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93ad3daf2225135954a3e2ea457abff40f41ce2/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a33b773a3c99560c7359a01564bacc9feac48ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a33b773a3c99560c7359a01564bacc9feac48ec3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a33b773a3c99560c7359a01564bacc9feac48ec3"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 30,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e91cf598cddbcb8364273aa29c5b200f77b1207",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b93ad3daf2225135954a3e2ea457abff40f41ce2/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b93ad3daf2225135954a3e2ea457abff40f41ce2/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=b93ad3daf2225135954a3e2ea457abff40f41ce2",
        "patch": "@@ -4,8 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n+from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes_bi,\n+    count_bytes,\n+    find_vout_for_address,\n+)\n \n \n def get_unspent(listunspent, amount):\n@@ -57,6 +67,11 @@ def run_test(self):\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+\n+        # Lock UTXO so nodes[0] doesn't accidentally spend it\n+        watchonly_vout = find_vout_for_address(self.nodes[0], watchonly_txid, watchonly_address)\n+        self.nodes[0].lockunspent(False, [{\"txid\": watchonly_txid, \"vout\": watchonly_vout}])\n+\n         self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)\n \n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n@@ -475,6 +490,9 @@ def run_test(self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         connect_nodes_bi(self.nodes,0,3)\n+        # Again lock the watchonly UTXO or nodes[0] may spend it, because\n+        # lockunspent is memory-only and thus lost on restart\n+        self.nodes[0].lockunspent(False, [{\"txid\": watchonly_txid, \"vout\": watchonly_vout}])\n         self.sync_all()\n \n         # drain the keypool"
      },
      {
        "sha": "1daaa6c4820e9f748113c4962bc2d19b20a8fd81",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b93ad3daf2225135954a3e2ea457abff40f41ce2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b93ad3daf2225135954a3e2ea457abff40f41ce2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b93ad3daf2225135954a3e2ea457abff40f41ce2",
        "patch": "@@ -556,3 +556,14 @@ def mine_large_block(node, utxos=None):\n     fee = 100 * node.getnetworkinfo()[\"relayfee\"]\n     create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n     node.generate(1)\n+\n+def find_vout_for_address(node, txid, addr):\n+    \"\"\"\n+    Locate the vout index of the given transaction sending to the\n+    given address. Raises runtime error exception if not found.\n+    \"\"\"\n+    tx = node.getrawtransaction(txid, True)\n+    for i in range(len(tx[\"vout\"])):\n+        if any([addr == a for a in tx[\"vout\"][i][\"scriptPubKey\"][\"addresses\"]]):\n+            return i\n+    raise RuntimeError(\"Vout not found for address: txid=%s, addr=%s\" % (txid, addr))"
      }
    ]
  },
  {
    "sha": "1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWIzYTJmMGJmZWI1NDdjYTBhMWRhMmZmZWFkZDExYjdjNjk2MjZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-05-08T16:56:13Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "qa: Remove unused option --srcdir",
      "tree": {
        "sha": "f8a5422304ff1092fd0df81f373f7256645fa0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8a5422304ff1092fd0df81f373f7256645fa0c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b93ad3daf2225135954a3e2ea457abff40f41ce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93ad3daf2225135954a3e2ea457abff40f41ce2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b93ad3daf2225135954a3e2ea457abff40f41ce2"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3203cfa23fc731a0c2a73c53c6233bbd16118dd3",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "patch": "@@ -98,8 +98,6 @@ def main(self):\n                           help=\"Leave bitcoinds and test.* datadir on exit or error\")\n         parser.add_option(\"--noshutdown\", dest=\"noshutdown\", default=False, action=\"store_true\",\n                           help=\"Don't stop bitcoinds after the test execution\")\n-        parser.add_option(\"--srcdir\", dest=\"srcdir\", default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../../src\"),\n-                          help=\"Source directory containing bitcoind/bitcoin-cli (default: %default)\")\n         parser.add_option(\"--cachedir\", dest=\"cachedir\", default=os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + \"/../../cache\"),\n                           help=\"Directory for caching pregenerated datadirs (default: %default)\")\n         parser.add_option(\"--tmpdir\", dest=\"tmpdir\", help=\"Root directory for datadirs\")\n@@ -123,10 +121,6 @@ def main(self):\n \n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir + os.pathsep + \\\n-                             self.options.srcdir + os.path.sep + \"qt\" + os.pathsep + \\\n-                             os.environ['PATH']\n-\n         check_json_precision()\n \n         self.options.cachedir = os.path.abspath(self.options.cachedir)\n@@ -136,6 +130,10 @@ def main(self):\n         self.options.bitcoind = os.getenv(\"BITCOIND\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"])\n         self.options.bitcoincli = os.getenv(\"BITCOINCLI\", default=config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoin-cli' + config[\"environment\"][\"EXEEXT\"])\n \n+        os.environ['PATH'] = config['environment']['BUILDDIR'] + os.pathsep + \\\n+                             config['environment']['BUILDDIR'] + os.path.sep + \"qt\" + os.pathsep + \\\n+                             os.environ['PATH']\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n             self.options.tmpdir = os.path.abspath(self.options.tmpdir)"
      },
      {
        "sha": "dfa8c33728ed9e1cf02645e62c9667723cb617e6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "patch": "@@ -314,8 +314,7 @@ def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=Fal\n \n     tests_dir = src_dir + '/test/functional/'\n \n-    flags = [\"--srcdir={}/src\".format(build_dir)] + args\n-    flags.append(\"--cachedir=%s\" % cache_dir)\n+    flags = ['--cachedir={}'.format(cache_dir)] + args\n \n     if enable_coverage:\n         coverage = RPCCoverage()"
      }
    ]
  },
  {
    "sha": "6cc7d935b56c03279483af767fe7c0e7a4cc8915",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2M3ZDkzNWI1NmMwMzI3OTQ4M2FmNzY3ZmU3YzBlN2E0Y2M4OTE1",
    "commit": {
      "author": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:22:43Z"
      },
      "committer": {
        "name": "Grady Laksmono",
        "email": "grady@laksmono.com",
        "date": "2018-05-09T10:23:47Z"
      },
      "message": "Refactoring platform-specific code in util.h/util.cpp",
      "tree": {
        "sha": "f85ac00a879cc205b9eb9a075648961c15793c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f85ac00a879cc205b9eb9a075648961c15793c68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cc7d935b56c03279483af767fe7c0e7a4cc8915",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cc7d935b56c03279483af767fe7c0e7a4cc8915",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cc7d935b56c03279483af767fe7c0e7a4cc8915",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cc7d935b56c03279483af767fe7c0e7a4cc8915/comments",
    "author": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glaksmono",
      "id": 286254,
      "node_id": "MDQ6VXNlcjI4NjI1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/286254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaksmono",
      "html_url": "https://github.com/glaksmono",
      "followers_url": "https://api.github.com/users/glaksmono/followers",
      "following_url": "https://api.github.com/users/glaksmono/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaksmono/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaksmono/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaksmono/subscriptions",
      "organizations_url": "https://api.github.com/users/glaksmono/orgs",
      "repos_url": "https://api.github.com/users/glaksmono/repos",
      "events_url": "https://api.github.com/users/glaksmono/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaksmono/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a"
      }
    ],
    "stats": {
      "total": 378,
      "additions": 368,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e16213588c82543c097e21ad450e317dbd7b39d1",
        "filename": "src/util/platform_posix.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 1,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_posix.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_posix.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_posix.cpp?ref=6cc7d935b56c03279483af767fe7c0e7a4cc8915",
        "patch": "@@ -3,4 +3,39 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <platform_posix.h>\n+#include <platform_util.h>\n+\n+bool RenameOver(fs::path src, fs::path dest)\n+{\n+  int rc = std::rename(src.string().c_str(), dest.string().c_str());\n+  return (rc == 0);\n+}\n+\n+bool FileCommit(FILE *file)\n+{\n+  // This is now repeated in platform_windows.cpp\n+  if (fflush(file) != 0) { // harmless if redundantly called\n+      LogPrintf(\"%s: fflush failed: %d\\n\", __func__, errno);\n+      return false;\n+  }\n+  //--\n+\n+  #if defined(__linux__) || defined(__NetBSD__)\n+  if (fdatasync(fileno(file)) != 0 && errno != EINVAL) { // Ignore EINVAL for filesystems that don't support sync\n+      LogPrintf(\"%s: fdatasync failed: %d\\n\", __func__, errno);\n+      return false;\n+  }\n+  #elif defined(__APPLE__) && defined(F_FULLFSYNC)\n+  if (fcntl(fileno(file), F_FULLFSYNC, 0) == -1) { // Manpage says \"value other than -1\" is returned on success\n+      LogPrintf(\"%s: fcntl F_FULLFSYNC failed: %d\\n\", __func__, errno);\n+      return false;\n+  }\n+  #else\n+  if (fsync(fileno(file)) != 0 && errno != EINVAL) {\n+      LogPrintf(\"%s: fsync failed: %d\\n\", __func__, errno);\n+      return false;\n+  }\n+  #endif\n+\n+  return true;\n+}"
      },
      {
        "sha": "e1d0878d764cf40356ca60b50117417334d326f5",
        "filename": "src/util/platform_posix.h",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/src/util/platform_posix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/src/util/platform_posix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_posix.h?ref=1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "patch": "@@ -1,4 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php."
      },
      {
        "sha": "44f38a280dba03bd46d618732de3898d4e739780",
        "filename": "src/util/platform_util.h",
        "status": "added",
        "additions": 308,
        "deletions": 0,
        "changes": 308,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_util.h?ref=6cc7d935b56c03279483af767fe7c0e7a4cc8915",
        "patch": "@@ -0,0 +1,308 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_PLATFORM_H\n+#define BITCOIN_UTIL_PLATFORM_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <compat.h>\n+#include <fs.h>\n+#include <logging.h>\n+#include <sync.h>\n+#include <tinyformat.h>\n+#include <utiltime.h>\n+\n+#include <atomic>\n+#include <exception>\n+#include <map>\n+#include <memory>\n+#include <set>\n+#include <stdint.h>\n+#include <string>\n+#include <unordered_set>\n+#include <vector>\n+\n+#include <boost/signals2/signal.hpp>\n+#include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n+\n+// Application startup time (used for uptime calculation)\n+int64_t GetStartupTime();\n+\n+/** Signals for translation. */\n+class CTranslationInterface\n+{\n+public:\n+    /** Translate a message to the native language of the user. */\n+    boost::signals2::signal<std::string (const char* psz)> Translate;\n+};\n+\n+extern CTranslationInterface translationInterface;\n+\n+extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_PID_FILENAME;\n+\n+/**\n+ * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n+ * If no translation slot is registered, nothing is returned, and simply return the input.\n+ */\n+inline std::string _(const char* psz)\n+{\n+    boost::optional<std::string> rv = translationInterface.Translate(psz);\n+    return rv ? (*rv) : psz;\n+}\n+\n+void SetupEnvironment();\n+bool SetupNetworking();\n+\n+template<typename... Args>\n+bool error(const char* fmt, const Args&... args)\n+{\n+    LogPrintf(\"ERROR: %s\\n\", tfm::format(fmt, args...));\n+    return false;\n+}\n+\n+void PrintExceptionContinue(const std::exception *pex, const char* pszThread);\n+bool FileCommit(FILE *file);\n+bool TruncateFile(FILE *file, unsigned int length);\n+int RaiseFileDescriptorLimit(int nMinFD);\n+void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n+bool RenameOver(fs::path src, fs::path dest);\n+bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+bool DirIsWritable(const fs::path& directory);\n+\n+/** Release all directory locks. This is used for unit testing only, at runtime\n+ * the global destructor will take care of the locks.\n+ */\n+void ReleaseDirectoryLocks();\n+\n+bool TryCreateDirectories(const fs::path& p);\n+fs::path GetDefaultDataDir();\n+const fs::path &GetBlocksDir(bool fNetSpecific = true);\n+const fs::path &GetDataDir(bool fNetSpecific = true);\n+void ClearDatadirCache();\n+fs::path GetConfigFile(const std::string& confPath);\n+#ifndef WIN32\n+fs::path GetPidFile();\n+void CreatePidFile(const fs::path &path, pid_t pid);\n+#endif\n+#ifdef WIN32\n+fs::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n+#endif\n+void runCommand(const std::string& strCommand);\n+\n+/**\n+ * Most paths passed as configuration arguments are treated as relative to\n+ * the datadir if they are not absolute.\n+ *\n+ * @param path The path to be conditionally prefixed with datadir.\n+ * @param net_specific Forwarded to GetDataDir().\n+ * @return The normalized path.\n+ */\n+fs::path AbsPathForConfigVal(const fs::path& path, bool net_specific = true);\n+\n+inline bool IsSwitchChar(char c)\n+{\n+#ifdef WIN32\n+    return c == '-' || c == '/';\n+#else\n+    return c == '-';\n+#endif\n+}\n+\n+class ArgsManager\n+{\n+protected:\n+    friend class ArgsManagerHelper;\n+\n+    mutable CCriticalSection cs_args;\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+    std::string m_network;\n+    std::set<std::string> m_network_only_args;\n+\n+    void ReadConfigStream(std::istream& stream);\n+\n+public:\n+    ArgsManager();\n+\n+    /**\n+     * Select the network in use\n+     */\n+    void SelectConfigNetwork(const std::string& network);\n+\n+    void ParseParameters(int argc, const char*const argv[]);\n+    void ReadConfigFile(const std::string& confPath);\n+\n+    /**\n+     * Log warnings for options in m_section_only_args when\n+     * they are specified in the default section but not overridden\n+     * on the command line or in a network-specific section in the\n+     * config file.\n+     */\n+    void WarnForSectionOnlyArgs();\n+\n+    /**\n+     * Return a vector of strings of the given argument\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return command-line arguments\n+     */\n+    std::vector<std::string> GetArgs(const std::string& strArg) const;\n+\n+    /**\n+     * Return true if the given argument has been manually set\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return true if the argument has been set\n+     */\n+    bool IsArgSet(const std::string& strArg) const;\n+\n+    /**\n+     * Return true if the argument was originally passed as a negated option,\n+     * i.e. -nofoo.\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @return true if the argument was passed negated\n+     */\n+    bool IsArgNegated(const std::string& strArg) const;\n+\n+    /**\n+     * Return string argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param strDefault (e.g. \"1\")\n+     * @return command-line argument or default value\n+     */\n+    std::string GetArg(const std::string& strArg, const std::string& strDefault) const;\n+\n+    /**\n+     * Return integer argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param nDefault (e.g. 1)\n+     * @return command-line argument (0 if invalid number) or default value\n+     */\n+    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+\n+    /**\n+     * Return boolean argument or default value\n+     *\n+     * @param strArg Argument to get (e.g. \"-foo\")\n+     * @param fDefault (true or false)\n+     * @return command-line argument or default value\n+     */\n+    bool GetBoolArg(const std::string& strArg, bool fDefault) const;\n+\n+    /**\n+     * Set an argument if it doesn't already have a value\n+     *\n+     * @param strArg Argument to set (e.g. \"-foo\")\n+     * @param strValue Value (e.g. \"1\")\n+     * @return true if argument gets set, false if it already had a value\n+     */\n+    bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n+\n+    /**\n+     * Set a boolean argument if it doesn't already have a value\n+     *\n+     * @param strArg Argument to set (e.g. \"-foo\")\n+     * @param fValue Value (e.g. false)\n+     * @return true if argument gets set, false if it already had a value\n+     */\n+    bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n+\n+    // Forces an arg setting. Called by SoftSetArg() if the arg hasn't already\n+    // been set. Also called directly in testing.\n+    void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+\n+    /**\n+     * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+     * @return CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given.\n+     */\n+    std::string GetChainName() const;\n+};\n+\n+extern ArgsManager gArgs;\n+\n+/**\n+ * @return true if help has been requested via a command-line arg\n+ */\n+bool HelpRequested(const ArgsManager& args);\n+\n+/**\n+ * Format a string to be used as group of options in help messages\n+ *\n+ * @param message Group name (e.g. \"RPC server options:\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageGroup(const std::string& message);\n+\n+/**\n+ * Format a string to be used as option description in help messages\n+ *\n+ * @param option Option message (e.g. \"-rpcuser=<user>\")\n+ * @param message Option description (e.g. \"Username for JSON-RPC connections\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageOpt(const std::string& option, const std::string& message);\n+\n+/**\n+ * Return the number of cores available on the current system.\n+ * @note This does count virtual cores, such as those provided by HyperThreading.\n+ */\n+int GetNumCores();\n+\n+void RenameThread(const char* name);\n+\n+/**\n+ * .. and a wrapper that just calls func once\n+ */\n+template <typename Callable> void TraceThread(const char* name,  Callable func)\n+{\n+    std::string s = strprintf(\"bitcoin-%s\", name);\n+    RenameThread(s.c_str());\n+    try\n+    {\n+        LogPrintf(\"%s thread start\\n\", name);\n+        func();\n+        LogPrintf(\"%s thread exit\\n\", name);\n+    }\n+    catch (const boost::thread_interrupted&)\n+    {\n+        LogPrintf(\"%s thread interrupt\\n\", name);\n+        throw;\n+    }\n+    catch (const std::exception& e) {\n+        PrintExceptionContinue(&e, name);\n+        throw;\n+    }\n+    catch (...) {\n+        PrintExceptionContinue(nullptr, name);\n+        throw;\n+    }\n+}\n+\n+std::string CopyrightHolders(const std::string& strPrefix);\n+\n+//! Substitute for C++14 std::make_unique.\n+template <typename T, typename... Args>\n+std::unique_ptr<T> MakeUnique(Args&&... args)\n+{\n+    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));\n+}\n+\n+/**\n+ * On platforms that support it, tell the kernel the calling thread is\n+ * CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details.\n+ *\n+ * @return The return value of sched_setschedule(), or 1 on systems without\n+ * sched_setchedule().\n+ */\n+int ScheduleBatchPriority(void);\n+\n+#endif // BITCOIN_UTIL_PLATFORM_H"
      },
      {
        "sha": "28231eeb7c4a383cb84d578d15710957cdf1af46",
        "filename": "src/util/platform_windows.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_windows.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cc7d935b56c03279483af767fe7c0e7a4cc8915/src/util/platform_windows.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_windows.cpp?ref=6cc7d935b56c03279483af767fe7c0e7a4cc8915",
        "patch": "@@ -3,4 +3,27 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <platform_windows.h>\n+#include <platform_util.h>\n+\n+bool RenameOver(fs::path src, fs::path dest)\n+{\n+  return MoveFileExA(src.string().c_str(), dest.string().c_str(),\n+                     MOVEFILE_REPLACE_EXISTING) != 0;\n+}\n+\n+bool FileCommit(FILE *file)\n+{\n+    //-- This is now repeated in platform_posix.cpp\n+    if (fflush(file) != 0) { // harmless if redundantly called\n+        LogPrintf(\"%s: fflush failed: %d\\n\", __func__, errno);\n+        return false;\n+    }\n+    //--\n+\n+    HANDLE hFile = (HANDLE)_get_osfhandle(_fileno(file));\n+    if (FlushFileBuffers(hFile) == 0) {\n+        LogPrintf(\"%s: FlushFileBuffers failed: %d\\n\", __func__, GetLastError());\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "e1d0878d764cf40356ca60b50117417334d326f5",
        "filename": "src/util/platform_windows.h",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/src/util/platform_windows.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a/src/util/platform_windows.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/platform_windows.h?ref=1ab3a2f0bfeb547ca0a1da2ffeadd11b7c69626a",
        "patch": "@@ -1,4 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  }
]