[
  {
    "sha": "7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmY0Y2U0ZjY0NGJiN2RhYzliNjMxNzJjNjU2YjVkNTk5ZWVkZWEz",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-18T16:11:16Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-02-28T20:09:03Z"
      },
      "message": "refactor: test/bench: dedup SetupDummyInputs()\n\nThe only difference between SetupDummyInputs() in test/transaction_tests.cpp\nand the one in bench/ccoins_caching.cpp was the nValue amounts of the outputs,\nso we allow to pass those in an extra (fixed-size) array parameter.",
      "tree": {
        "sha": "470f0a6cf764a5748bc65f42b5d7b10d8b7076f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/470f0a6cf764a5748bc65f42b5d7b10d8b7076f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f42e1bf43f2c9f3b4642814051cedf66f05a5e"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 50,
      "deletions": 79
    },
    "files": [
      {
        "sha": "e9dd40293f43d4149bd2d15b40eeaeb45cf1ad9a",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 39,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
        "patch": "@@ -6,47 +6,10 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <script/signingprovider.h>\n+#include <test/util/transaction_utils.h>\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 COIN outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 COIN outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet)\n-{\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n-\n-    // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n-    }\n-\n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * COIN;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * COIN;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[0]), 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * COIN;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n-    dummyTransactions[1].vout[1].nValue = 22 * COIN;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(PKHash(key[3].GetPubKey()));\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n-\n-    return dummyTransactions;\n-}\n-\n // Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n // laanwj, \"replicating the actual usage patterns of the client is hard though,\n // many times micro-benchmarks of the database showed completely different\n@@ -58,7 +21,8 @@ static void CCoinsCaching(benchmark::State& state)\n     FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+    std::vector<CMutableTransaction> dummyTransactions =\n+        SetupDummyInputs(keystore, coins, {11 * COIN, 50 * COIN, 21 * COIN, 22 * COIN});\n \n     CMutableTransaction t1;\n     t1.vin.resize(3);"
      },
      {
        "sha": "ee9ff8ed3cd1a41420313cea41ef0c26bf6c7235",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 40,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
        "patch": "@@ -22,6 +22,7 @@\n #include <script/standard.h>\n #include <streams.h>\n #include <util/strencodings.h>\n+#include <test/util/transaction_utils.h>\n \n #include <map>\n #include <string>\n@@ -282,50 +283,13 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n     BOOST_CHECK_MESSAGE(!CheckTransaction(CTransaction(tx), state) || !state.IsValid(), \"Transaction with duplicate txins should be invalid.\");\n }\n \n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet)\n-{\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n-\n-    // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++)\n-    {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n-    }\n-\n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11*CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50*CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[0]), 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n-    dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(PKHash(key[3].GetPubKey()));\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n-\n-    return dummyTransactions;\n-}\n-\n BOOST_AUTO_TEST_CASE(test_Get)\n {\n     FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+    std::vector<CMutableTransaction> dummyTransactions =\n+        SetupDummyInputs(keystore, coins, {11*CENT, 50*CENT, 21*CENT, 22*CENT});\n \n     CMutableTransaction t1;\n     t1.vin.resize(3);\n@@ -685,7 +649,8 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     FillableSigningProvider keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+    std::vector<CMutableTransaction> dummyTransactions =\n+        SetupDummyInputs(keystore, coins, {11*CENT, 50*CENT, 21*CENT, 22*CENT});\n \n     CMutableTransaction t;\n     t.vin.resize(1);"
      },
      {
        "sha": "999b803a8d6624c9e43495ab3e42096aa1266b63",
        "filename": "src/test/util/transaction_utils.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/util/transaction_utils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/util/transaction_utils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/transaction_utils.cpp?ref=7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
        "patch": "@@ -3,6 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <test/util/transaction_utils.h>\n+#include <coins.h>\n+#include <script/signingprovider.h>\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue)\n {\n@@ -37,3 +39,33 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n \n     return txSpend;\n }\n+\n+std::vector<CMutableTransaction> SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet, const std::array<CAmount,4>& nValues)\n+{\n+    std::vector<CMutableTransaction> dummyTransactions;\n+    dummyTransactions.resize(2);\n+\n+    // Add some keys to the keystore:\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(i % 2);\n+        keystoreRet.AddKey(key[i]);\n+    }\n+\n+    // Create some dummy input transactions\n+    dummyTransactions[0].vout.resize(2);\n+    dummyTransactions[0].vout[0].nValue = nValues[0];\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].nValue = nValues[1];\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n+    AddCoins(coinsRet, CTransaction(dummyTransactions[0]), 0);\n+\n+    dummyTransactions[1].vout.resize(2);\n+    dummyTransactions[1].vout[0].nValue = nValues[2];\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(PKHash(key[2].GetPubKey()));\n+    dummyTransactions[1].vout[1].nValue = nValues[3];\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(PKHash(key[3].GetPubKey()));\n+    AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n+\n+    return dummyTransactions;\n+}"
      },
      {
        "sha": "f843928a5fe8fd6dc52ab92e99db2e28dce1ea0d",
        "filename": "src/test/util/transaction_utils.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/util/transaction_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf4ce4f644bb7dac9b63172c656b5d599eedea3/src/test/util/transaction_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/transaction_utils.h?ref=7bf4ce4f644bb7dac9b63172c656b5d599eedea3",
        "patch": "@@ -7,6 +7,11 @@\n \n #include <primitives/transaction.h>\n \n+#include <array>\n+\n+class FillableSigningProvider;\n+class CCoinsViewCache;\n+\n // create crediting transaction\n // [1 coinbase input => 1 output with given scriptPubkey and value]\n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0);\n@@ -16,4 +21,9 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int n\n //  1 output with empty scriptPubKey, full value of referenced transaction]\n CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CTransaction& txCredit);\n \n+// Helper: create two dummy transactions, each with two outputs.\n+// The first has nValues[0] and nValues[1] outputs paid to a TX_PUBKEY,\n+// the second nValues[2] and nValues[3] outputs paid to a TX_PUBKEYHASH.\n+std::vector<CMutableTransaction> SetupDummyInputs(FillableSigningProvider& keystoreRet, CCoinsViewCache& coinsRet, const std::array<CAmount,4>& nValues);\n+\n #endif // BITCOIN_TEST_UTIL_TRANSACTION_UTILS_H"
      }
    ]
  }
]