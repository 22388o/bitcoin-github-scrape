[
  {
    "sha": "e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBkY2YyN2I0ZmIzMjRhODViNTY1MGM3YWNkMmVhNWE1MmU4MjJm",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-24T12:17:43Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-26T08:36:57Z"
      },
      "message": "ensure clean and consistent \"namespace\" usage\n\n- remove some missplaced ;\n- ensure end of a namespace is clearly visible\n- use same formatting when using namespace",
      "tree": {
        "sha": "6725fc2d632622ef5fbdc7b480996adb9b9a5fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6725fc2d632622ef5fbdc7b480996adb9b9a5fba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343feecf562a39e7d898ece2fd745fcb9d4c90e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/343feecf562a39e7d898ece2fd745fcb9d4c90e9"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 26,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c9e91beef1d5cf4f4b29017d8dcaff6ca152ac36",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -186,6 +186,7 @@ int CBase58Data::CompareTo(const CBase58Data& b58) const {\n }\n \n namespace {\n+\n     class CBitcoinAddressVisitor : public boost::static_visitor<bool> {\n     private:\n         CBitcoinAddress *addr;\n@@ -196,7 +197,8 @@ namespace {\n         bool operator()(const CScriptID &id) const { return addr->Set(id); }\n         bool operator()(const CNoDestination &no) const { return false; }\n     };\n-};\n+\n+} // anon namespace\n \n bool CBitcoinAddress::Set(const CKeyID &id) {\n     SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);"
      },
      {
        "sha": "80479b47fbccf41a0b3b5966181cd1054a56165a",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -12,8 +12,8 @@\n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n-namespace Checkpoints\n-{\n+namespace Checkpoints {\n+\n     typedef std::map<int, uint256> MapCheckpoints;\n \n     // How many times we expect transactions after the last checkpoint to\n@@ -161,4 +161,5 @@ namespace Checkpoints\n         }\n         return NULL;\n     }\n-}\n+\n+} // namespace Checkpoints"
      },
      {
        "sha": "2cf8d41b9d6ea1e7573cc260e7a325f674943265",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -13,8 +13,8 @@ class uint256;\n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n-namespace Checkpoints\n-{\n+namespace Checkpoints {\n+\n     // Returns true if block passes checkpoint checks\n     bool CheckBlock(int nHeight, const uint256& hash);\n \n@@ -27,6 +27,7 @@ namespace Checkpoints\n     double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks = true);\n \n     extern bool fEnabled;\n-}\n+\n+} //namespace Checkpoints\n \n #endif"
      },
      {
        "sha": "626525c9adb5fe8a3b239294e8dfb9ec37ae2935",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -12,7 +12,7 @@ class CWallet;\n \n namespace boost {\n     class thread_group;\n-};\n+} // namespace boost\n \n extern CWallet* pwalletMain;\n "
      },
      {
        "sha": "784085da34415100f91582deaae670e1e8d607b2",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -377,8 +377,7 @@ const unsigned char vchMaxModHalfOrder[32] = {\n \n const unsigned char vchZero[0] = {};\n \n-\n-}; // end of anonymous namespace\n+} // anon namespace\n \n bool CKey::Check(const unsigned char *vch) {\n     return CompareBigEndian(vch, 32, vchZero, 0) > 0 &&"
      },
      {
        "sha": "98322599641e1659f2021b0076d90618006b81a0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -72,6 +72,7 @@ const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n+\n     struct CBlockIndexWorkComparator\n     {\n         bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n@@ -120,7 +121,8 @@ namespace {\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n     map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n-}\n+\n+} // anon namespace\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -130,6 +132,7 @@ namespace {\n // These functions dispatch to one or all registered wallets\n \n namespace {\n+\n struct CMainSignals {\n     // Notifies listeners of updated transaction data (transaction, and optionally the block it is found in.\n     boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n@@ -144,7 +147,8 @@ struct CMainSignals {\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n } g_signals;\n-}\n+\n+} // anon namespace\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n@@ -274,7 +278,6 @@ void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1) {\n             state->nLastBlockReceive = GetTimeMicros();\n         mapBlocksInFlight.erase(itInFlight);\n     }\n-\n }\n \n // Requires cs_main.\n@@ -310,7 +313,7 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash) {\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n }\n \n-}\n+} // anon namespace\n \n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);"
      },
      {
        "sha": "2ee798d4680770f17ca154ea763c082ccdb344a3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -28,14 +28,13 @@\n #include <boost/signals2/signal.hpp>\n #include <openssl/rand.h>\n \n-\n class CAddrMan;\n class CBlockIndex;\n class CNode;\n \n namespace boost {\n     class thread_group;\n-}\n+} // namespace boost\n \n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;"
      },
      {
        "sha": "dfba4da46e29df11132ef39bfbbf716e60b85b5c",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -974,6 +974,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n \n namespace {\n+\n /** Wrapper that serializes like CTransaction, but with the modifications\n  *  required for the signature hash done in-place\n  */\n@@ -1066,7 +1067,8 @@ class CTransactionSignatureSerializer {\n         ::Serialize(s, txTo.nLockTime, nType, nVersion);\n     }\n };\n-}\n+\n+} // anon namespace\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n@@ -1092,7 +1094,6 @@ uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-\n // Valid signature cache, to avoid doing expensive ECDSA signature checking\n // twice for every transaction (once when accepted into memory pool, and\n // again when accepted into the block chain)"
      },
      {
        "sha": "7efcc577cf596613898073f98c74cbefa98fb1ea",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "patch": "@@ -77,11 +77,12 @@\n // See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options\n //           http://clang.debian.net/status.php?version=3.0&key=CANNOT_FIND_FUNCTION\n namespace boost {\n+\n     namespace program_options {\n         std::string to_internal(const std::string&);\n     }\n-}\n \n+} // namespace boost\n \n using namespace std;\n "
      }
    ]
  },
  {
    "sha": "86fe1b864b109869659f140af07047163637a673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmZlMWI4NjRiMTA5ODY5NjU5ZjE0MGFmMDcwNDcxNjM2MzdhNjcz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-26T09:49:51Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-06-26T09:56:56Z"
      },
      "message": "update coding.md to reflect changes by pull\n\n- also mention alphabetical include ordering",
      "tree": {
        "sha": "5aeeab5490d34d681e855d48aaf8f6fa7e6f0fed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5aeeab5490d34d681e855d48aaf8f6fa7e6f0fed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86fe1b864b109869659f140af07047163637a673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fe1b864b109869659f140af07047163637a673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86fe1b864b109869659f140af07047163637a673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fe1b864b109869659f140af07047163637a673/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e10dcf27b4fb324a85b5650c7acd2ea5a52e822f"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 48,
      "deletions": 27
    },
    "files": [
      {
        "sha": "2f332e92f0e938e865badd3c5d4bf989c98f0417",
        "filename": "doc/coding.md",
        "status": "modified",
        "additions": 48,
        "deletions": 27,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fe1b864b109869659f140af07047163637a673/doc/coding.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fe1b864b109869659f140af07047163637a673/doc/coding.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/coding.md?ref=86fe1b864b109869659f140af07047163637a673",
        "patch": "@@ -4,44 +4,65 @@ Coding\n Please be consistent with the existing coding style.\n \n Block style:\n-\n-\tbool Function(char* psz, int n)\n-\t{\n-\t    // Comment summarising what this section of code does\n-\t    for (int i = 0; i < n; i++)\n-\t    {\n-\t        // When something fails, return early\n-\t        if (!Something())\n-\t            return false;\n-\t        ...\n-\t    }\n-\t\n-\t    // Success return is usually at the end\n-\t    return true;\n-\t}\n-\n+```c++\n+    bool Function(char* psz, int n)\n+    {\n+        // Comment summarising what this section of code does\n+        for (int i = 0; i < n; i++)\n+        {\n+            // When something fails, return early\n+            if (!Something())\n+                return false;\n+            ...\n+        }\n+\n+        // Success return is usually at the end\n+        return true;\n+    }\n+```\n - ANSI/Allman block style\n - 4 space indenting, no tabs\n - No extra spaces inside parenthesis; please don't do ( this )\n - No space after function names, one space after if, for and while\n+- Includes need to be ordered alphabetically, separate own and foreign headers with a new-line (example key.cpp):\n+```c++\n+#include \"key.h\"\n+\n+#include \"crypto/sha2.h\"\n+#include \"util.h\"\n \n+#include <openssl/foo.h>\n+```\n+- Class or struct keywords in header files need to be ordered alphabetically:\n+```c++\n+class CAlpha;\n+class CBeta;\n+```\n+- When using namespace keyword use the following form:\n+```c++\n+namespace Foo {\n+\n+...\n+\n+} // Foo\n+```\n Variable names begin with the type in lowercase, like nSomeVariable.\n Please don't put the first word of the variable name in lowercase like\n someVariable.\n \n Common types:\n \n-\tn       integer number: short, unsigned short, int, unsigned int, int64, uint64, sometimes char if used as a number\n-\td       double, float\n-\tf       flag\n-\thash    uint256\n-\tp       pointer or array, one p for each level of indirection\n-\tpsz     pointer to null terminated string\n-\tstr     string object\n-\tv       vector or similar list objects\n-\tmap     map or multimap\n-\tset     set or multiset\n-\tbn      CBigNum\n+    n       integer number: short, unsigned short, int, unsigned int, int64, uint64, sometimes char if used as a number\n+    d       double, float\n+    f       flag\n+    hash    uint256\n+    p       pointer or array, one p for each level of indirection\n+    psz     pointer to null terminated string\n+    str     string object\n+    v       vector or similar list objects\n+    map     map or multimap\n+    set     set or multiset\n+    bn      CBigNum\n \n Doxygen comments\n -----------------"
      }
    ]
  }
]