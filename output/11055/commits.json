[
  {
    "sha": "ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTBjZDI0ZjdkMDFmMjNmZDUzNDBjMmFmYzY0NGM3NjBmZjUxOGE5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-15T15:39:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T20:23:17Z"
      },
      "message": "[tests] Tidy up receivedby.py\n\n- Fix flake8 warnings\n- Remove the useless get_sub_array_from_array() function\n- Reduce runtime for receivedby.py by about half by only using two nodes",
      "tree": {
        "sha": "80aafc968b6934703e782507f2dc0ade7ef0dcb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80aafc968b6934703e782507f2dc0ade7ef0dcb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05a761932edd05cf94ffe938908baf058f38632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05a761932edd05cf94ffe938908baf058f38632a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05a761932edd05cf94ffe938908baf058f38632a"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 46,
      "deletions": 72
    },
    "files": [
      {
        "sha": "c40572f57771dc01907fc28fda3e8ecab4ee0049",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 46,
        "deletions": 72,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea0cd24f7d01f23fd5340c2afc644c760ff518a9/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "patch": "@@ -3,138 +3,112 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-def get_sub_array_from_array(object_array, to_match):\n-    '''\n-        Finds and returns a sub array from an array of arrays.\n-        to_match should be a unique idetifier of a sub array\n-    '''\n-    for item in object_array:\n-        all_match = True\n-        for key,value in to_match.items():\n-            if item[key] != value:\n-                all_match = False\n-        if not all_match:\n-            continue\n-        return item\n-    return []\n+from test_framework.util import assert_array_result, assert_equal\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.enable_mocktime()\n \n     def run_test(self):\n-        '''\n-        listreceivedbyaddress Test\n-        '''\n+        # Generate block to get out of IBD\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"listreceivedbyaddress Test\")\n+\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check not listed in listreceivedbyaddress because has 0 confirmations\n+        # Check not listed in listreceivedbyaddress because has 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           { },\n-                           True)\n-        #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n+                            {\"address\": addr},\n+                            {},\n+                            True)\n+        # Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence < 10\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence < 10\n         assert_array_result(self.nodes[1].listreceivedbyaddress(5),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]})\n-        #With min confidence > 10, should not find Tx\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(11),{\"address\":addr},{ },True)\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": Decimal(\"0.1\"), \"confirmations\": 10, \"txids\": [txid, ]})\n+        # With min confidence > 10, should not find Tx\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n-        #Empty Tx\n+        # Empty Tx\n         addr = self.nodes[1].getnewaddress()\n-        assert_array_result(self.nodes[1].listreceivedbyaddress(0,True),\n-                           {\"address\":addr},\n-                           {\"address\":addr, \"account\":\"\", \"amount\":0, \"confirmations\":0, \"txids\":[]})\n+        assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n+                            {\"address\": addr},\n+                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        self.log.info(\"getreceivedbyaddress Test\")\n \n-        '''\n-            getreceivedbyaddress Test\n-        '''\n         # Send from node 0 to 1\n         addr = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n-        #Check balance is 0 because of 0 confirmations\n+        # Check balance is 0 because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n-        #Check balance is 0.1\n-        balance = self.nodes[1].getreceivedbyaddress(addr,0)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        # Check balance is 0.1\n+        balance = self.nodes[1].getreceivedbyaddress(addr, 0)\n+        assert_equal(balance, Decimal(\"0.1\"))\n \n-        #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n+        # Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n         self.nodes[1].generate(10)\n         self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n-        if balance != Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.1\"))\n+\n+        self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n \n-        '''\n-            listreceivedbyaccount + getreceivedbyaccount Test\n-        '''\n-        #set pre-state\n+        # set pre-state\n         addrArr = self.nodes[1].getnewaddress()\n         account = self.nodes[1].getaccount(addrArr)\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(),{\"account\":account})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount() if r[\"account\"] == account][0]\n         balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n \n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()\n \n         # listreceivedbyaccount should return received_by_account_json because of 0 confirmations\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           received_by_account_json)\n+                            {\"account\": account},\n+                            received_by_account_json)\n \n         # getreceivedbyaddress should return same balance because of 0 confirmations\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account:\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account)\n \n         self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n         assert_array_result(self.nodes[1].listreceivedbyaccount(),\n-                           {\"account\":account},\n-                           {\"account\":received_by_account_json[\"account\"], \"amount\":(received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n+                            {\"account\": account},\n+                            {\"account\": received_by_account_json[\"account\"], \"amount\": (received_by_account_json[\"amount\"] + Decimal(\"0.1\"))})\n \n         # getreceivedbyaddress should return updates balance\n         balance = self.nodes[1].getreceivedbyaccount(account)\n-        if balance != balance_by_account + Decimal(\"0.1\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, balance_by_account + Decimal(\"0.1\"))\n \n-        #Create a new account named \"mynewaccount\" that has a 0 balance\n+        # Create a new account named \"mynewaccount\" that has a 0 balance\n         self.nodes[1].getaccountaddress(\"mynewaccount\")\n-        received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(0,True),{\"account\":\"mynewaccount\"})\n-        if len(received_by_account_json) == 0:\n-            raise AssertionError(\"No accounts found in node\")\n+        received_by_account_json = [r for r in self.nodes[1].listreceivedbyaccount(0, True) if r[\"account\"] == \"mynewaccount\"][0]\n \n         # Test includeempty of listreceivedbyaccount\n-        if received_by_account_json[\"amount\"] != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by listreceivedbyaccount, %0.2f\"%(received_by_account_json[\"amount\"]))\n+        assert_equal(received_by_account_json[\"amount\"], Decimal(\"0.0\"))\n \n         # Test getreceivedbyaccount for 0 amount accounts\n         balance = self.nodes[1].getreceivedbyaccount(\"mynewaccount\")\n-        if balance != Decimal(\"0.0\"):\n-            raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n+        assert_equal(balance, Decimal(\"0.0\"))\n \n if __name__ == '__main__':\n     ReceivedByTest().main()"
      }
    ]
  },
  {
    "sha": "5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTBiYThmOGNkNTVhNWMyY2VhNGU0ZTIzNDNkN2RjZDUyYWE4ZmFk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-15T15:33:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-10T21:07:37Z"
      },
      "message": "[wallet] getreceivedbyaddress should return error if address is not mine",
      "tree": {
        "sha": "ded7c100a7df6cd9d06479e52243e33f93191e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ded7c100a7df6cd9d06479e52243e33f93191e2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea0cd24f7d01f23fd5340c2afc644c760ff518a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea0cd24f7d01f23fd5340c2afc644c760ff518a9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8abb4c9a25746a51e2651b2154e61a04729978a9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "patch": "@@ -654,7 +654,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     }\n     CScript scriptPubKey = GetScriptForDestination(dest);\n     if (!IsMine(*pwallet, scriptPubKey)) {\n-        return ValueFromAmount(0);\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n     }\n \n     // Minimum confirmations"
      },
      {
        "sha": "97da19546fca584ad1ff76f4951528bc1e99cdd1",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=5e0ba8f8cd55a5c2cea4e4e2343d7dcd52aa8fad",
        "patch": "@@ -6,7 +6,10 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_array_result, assert_equal\n+from test_framework.util import (assert_array_result,\n+                                 assert_equal,\n+                                 assert_raises_rpc_error,\n+                                 )\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -68,6 +71,9 @@ def run_test(self):\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n         assert_equal(balance, Decimal(\"0.1\"))\n \n+        # Trying to getreceivedby for an address the wallet doesn't own should return an error\n+        assert_raises_rpc_error(-4, \"Address not found in wallet\", self.nodes[0].getreceivedbyaddress, addr)\n+\n         self.log.info(\"listreceivedbyaccount + getreceivedbyaccount Test\")\n \n         # set pre-state"
      }
    ]
  }
]