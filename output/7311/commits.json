[
  {
    "sha": "e86756193ebdbf71504e2a1a8db43e38d57f9673",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODY3NTYxOTNlYmRiZjcxNTA0ZTJhMWE4ZGI0M2UzOGQ1N2Y5Njcz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-29T23:46:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-01-12T12:43:14Z"
      },
      "message": "MOVEONLY: non-consensus: from pow to chain:\n\n- GetBlockProof\n- GetBlockProofEquivalentTime",
      "tree": {
        "sha": "1048571b27029b21d33d889c3f37fb48c1798ad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1048571b27029b21d33d889c3f37fb48c1798ad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e86756193ebdbf71504e2a1a8db43e38d57f9673",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e86756193ebdbf71504e2a1a8db43e38d57f9673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e86756193ebdbf71504e2a1a8db43e38d57f9673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e86756193ebdbf71504e2a1a8db43e38d57f9673/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 36,
      "deletions": 37
    },
    "files": [
      {
        "sha": "32f6480f849dacc077dedc3be9d30f89276da138",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=e86756193ebdbf71504e2a1a8db43e38d57f9673",
        "patch": "@@ -110,3 +110,35 @@ void CBlockIndex::BuildSkip()\n     if (pprev)\n         pskip = pprev->GetAncestor(GetSkipHeight(nHeight));\n }\n+\n+arith_uint256 GetBlockProof(const CBlockIndex& block)\n+{\n+    arith_uint256 bnTarget;\n+    bool fNegative;\n+    bool fOverflow;\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n+    if (fNegative || fOverflow || bnTarget == 0)\n+        return 0;\n+    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n+    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n+    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n+    // or ~bnTarget / (nTarget+1) + 1.\n+    return (~bnTarget / (bnTarget + 1)) + 1;\n+}\n+\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n+{\n+    arith_uint256 r;\n+    int sign = 1;\n+    if (to.nChainWork > from.nChainWork) {\n+        r = to.nChainWork - from.nChainWork;\n+    } else {\n+        r = from.nChainWork - to.nChainWork;\n+        sign = -1;\n+    }\n+    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n+    if (r.bits() > 63) {\n+        return sign * std::numeric_limits<int64_t>::max();\n+    }\n+    return sign * r.GetLow64();\n+}"
      },
      {
        "sha": "0c152a5ea912c39effbce6d440b1d743cf919ccb",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=e86756193ebdbf71504e2a1a8db43e38d57f9673",
        "patch": "@@ -282,6 +282,10 @@ class CBlockIndex\n     const CBlockIndex* GetAncestor(int height) const;\n };\n \n+arith_uint256 GetBlockProof(const CBlockIndex& block);\n+/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n+int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n+\n /** Used to marshal pointers into hashes for db storage. */\n class CDiskBlockIndex : public CBlockIndex\n {"
      },
      {
        "sha": "dc58e21e122855b9ecd1f1dfcad65754e713d962",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=e86756193ebdbf71504e2a1a8db43e38d57f9673",
        "patch": "@@ -102,35 +102,3 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     return true;\n }\n-\n-arith_uint256 GetBlockProof(const CBlockIndex& block)\n-{\n-    arith_uint256 bnTarget;\n-    bool fNegative;\n-    bool fOverflow;\n-    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n-    if (fNegative || fOverflow || bnTarget == 0)\n-        return 0;\n-    // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256\n-    // as it's too large for a arith_uint256. However, as 2**256 is at least as large\n-    // as bnTarget+1, it is equal to ((2**256 - bnTarget - 1) / (bnTarget+1)) + 1,\n-    // or ~bnTarget / (nTarget+1) + 1.\n-    return (~bnTarget / (bnTarget + 1)) + 1;\n-}\n-\n-int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n-{\n-    arith_uint256 r;\n-    int sign = 1;\n-    if (to.nChainWork > from.nChainWork) {\n-        r = to.nChainWork - from.nChainWork;\n-    } else {\n-        r = from.nChainWork - to.nChainWork;\n-        sign = -1;\n-    }\n-    r = r * arith_uint256(params.nPowTargetSpacing) / GetBlockProof(tip);\n-    if (r.bits() > 63) {\n-        return sign * std::numeric_limits<int64_t>::max();\n-    }\n-    return sign * r.GetLow64();\n-}"
      },
      {
        "sha": "a80a3351758228012361f52b8e3bbc77e1c425ed",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e86756193ebdbf71504e2a1a8db43e38d57f9673/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=e86756193ebdbf71504e2a1a8db43e38d57f9673",
        "patch": "@@ -13,16 +13,11 @@\n class CBlockHeader;\n class CBlockIndex;\n class uint256;\n-class arith_uint256;\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params&);\n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params&);\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n-arith_uint256 GetBlockProof(const CBlockIndex& block);\n-\n-/** Return the time it would take to redo the work difference between from and to, assuming the current hashrate corresponds to the difficulty at tip, in seconds. */\n-int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params&);\n \n #endif // BITCOIN_POW_H"
      }
    ]
  }
]