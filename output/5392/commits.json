[
  {
    "sha": "103bd9603b151eed15f90f69249156319b36073f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDNiZDk2MDNiMTUxZWVkMTVmOTBmNjkyNDkxNTYzMTliMzYwNzNm",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2014-11-28T22:21:24Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2014-11-28T22:21:24Z"
      },
      "message": "Remove the \"OP_\" prefix from transaction script decodes.",
      "tree": {
        "sha": "f9d17771eefb9a3be034e8746429bc620b71c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9d17771eefb9a3be034e8746429bc620b71c955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/103bd9603b151eed15f90f69249156319b36073f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/103bd9603b151eed15f90f69249156319b36073f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/103bd9603b151eed15f90f69249156319b36073f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/103bd9603b151eed15f90f69249156319b36073f/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5270817180c7caae4d6c1dacb01605483d52eb48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5270817180c7caae4d6c1dacb01605483d52eb48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5270817180c7caae4d6c1dacb01605483d52eb48"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 116,
      "deletions": 101
    },
    "files": [
      {
        "sha": "3f3a6b6828d404ba4138019b2919edd7ea9a2b02",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/103bd9603b151eed15f90f69249156319b36073f/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/103bd9603b151eed15f90f69249156319b36073f/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=103bd9603b151eed15f90f69249156319b36073f",
        "patch": "@@ -39,12 +39,12 @@ CScript ParseScript(std::string s)\n                 continue;\n \n             const char* name = GetOpName((opcodetype)op);\n-            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+            if (strcmp(name, \"UNKNOWN\") == 0)\n                 continue;\n             string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n-            replace_first(strName, \"OP_\", \"\");\n+            strName = \"OP_\" + strName;\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }"
      },
      {
        "sha": "44f53c019bca992e18c5da5a195b8a2951db5ca0",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/103bd9603b151eed15f90f69249156319b36073f/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/103bd9603b151eed15f90f69249156319b36073f/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=103bd9603b151eed15f90f69249156319b36073f",
        "patch": "@@ -36,10 +36,8 @@ string FormatScript(const CScript& script)\n                 continue;\n             } else if (op >= OP_NOP && op <= OP_CHECKMULTISIGVERIFY) {\n                 string str(GetOpName(op));\n-                if (str.substr(0, 3) == string(\"OP_\")) {\n-                    ret += str.substr(3, string::npos) + \" \";\n-                    continue;\n-                }\n+                ret += (str + \" \");\n+                continue;\n             }\n             if (vch.size() > 0) {\n                 ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));"
      },
      {
        "sha": "8813599dd1ffc2f97ebdf6d84b6b2d12019d5d39",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 95,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/103bd9603b151eed15f90f69249156319b36073f/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/103bd9603b151eed15f90f69249156319b36073f/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=103bd9603b151eed15f90f69249156319b36073f",
        "patch": "@@ -26,11 +26,11 @@ const char* GetOpName(opcodetype opcode)\n     {\n     // push value\n     case OP_0                      : return \"0\";\n-    case OP_PUSHDATA1              : return \"OP_PUSHDATA1\";\n-    case OP_PUSHDATA2              : return \"OP_PUSHDATA2\";\n-    case OP_PUSHDATA4              : return \"OP_PUSHDATA4\";\n+    case OP_PUSHDATA1              : return \"PUSHDATA1\";\n+    case OP_PUSHDATA2              : return \"PUSHDATA2\";\n+    case OP_PUSHDATA4              : return \"PUSHDATA4\";\n     case OP_1NEGATE                : return \"-1\";\n-    case OP_RESERVED               : return \"OP_RESERVED\";\n+    case OP_RESERVED               : return \"RESERVED\";\n     case OP_1                      : return \"1\";\n     case OP_2                      : return \"2\";\n     case OP_3                      : return \"3\";\n@@ -49,117 +49,117 @@ const char* GetOpName(opcodetype opcode)\n     case OP_16                     : return \"16\";\n \n     // control\n-    case OP_NOP                    : return \"OP_NOP\";\n-    case OP_VER                    : return \"OP_VER\";\n-    case OP_IF                     : return \"OP_IF\";\n-    case OP_NOTIF                  : return \"OP_NOTIF\";\n-    case OP_VERIF                  : return \"OP_VERIF\";\n-    case OP_VERNOTIF               : return \"OP_VERNOTIF\";\n-    case OP_ELSE                   : return \"OP_ELSE\";\n-    case OP_ENDIF                  : return \"OP_ENDIF\";\n-    case OP_VERIFY                 : return \"OP_VERIFY\";\n-    case OP_RETURN                 : return \"OP_RETURN\";\n+    case OP_NOP                    : return \"NOP\";\n+    case OP_VER                    : return \"VER\";\n+    case OP_IF                     : return \"IF\";\n+    case OP_NOTIF                  : return \"NOTIF\";\n+    case OP_VERIF                  : return \"VERIF\";\n+    case OP_VERNOTIF               : return \"VERNOTIF\";\n+    case OP_ELSE                   : return \"ELSE\";\n+    case OP_ENDIF                  : return \"ENDIF\";\n+    case OP_VERIFY                 : return \"VERIFY\";\n+    case OP_RETURN                 : return \"RETURN\";\n \n     // stack ops\n-    case OP_TOALTSTACK             : return \"OP_TOALTSTACK\";\n-    case OP_FROMALTSTACK           : return \"OP_FROMALTSTACK\";\n-    case OP_2DROP                  : return \"OP_2DROP\";\n-    case OP_2DUP                   : return \"OP_2DUP\";\n-    case OP_3DUP                   : return \"OP_3DUP\";\n-    case OP_2OVER                  : return \"OP_2OVER\";\n-    case OP_2ROT                   : return \"OP_2ROT\";\n-    case OP_2SWAP                  : return \"OP_2SWAP\";\n-    case OP_IFDUP                  : return \"OP_IFDUP\";\n-    case OP_DEPTH                  : return \"OP_DEPTH\";\n-    case OP_DROP                   : return \"OP_DROP\";\n-    case OP_DUP                    : return \"OP_DUP\";\n-    case OP_NIP                    : return \"OP_NIP\";\n-    case OP_OVER                   : return \"OP_OVER\";\n-    case OP_PICK                   : return \"OP_PICK\";\n-    case OP_ROLL                   : return \"OP_ROLL\";\n-    case OP_ROT                    : return \"OP_ROT\";\n-    case OP_SWAP                   : return \"OP_SWAP\";\n-    case OP_TUCK                   : return \"OP_TUCK\";\n+    case OP_TOALTSTACK             : return \"TOALTSTACK\";\n+    case OP_FROMALTSTACK           : return \"FROMALTSTACK\";\n+    case OP_2DROP                  : return \"2DROP\";\n+    case OP_2DUP                   : return \"2DUP\";\n+    case OP_3DUP                   : return \"3DUP\";\n+    case OP_2OVER                  : return \"2OVER\";\n+    case OP_2ROT                   : return \"2ROT\";\n+    case OP_2SWAP                  : return \"2SWAP\";\n+    case OP_IFDUP                  : return \"IFDUP\";\n+    case OP_DEPTH                  : return \"DEPTH\";\n+    case OP_DROP                   : return \"DROP\";\n+    case OP_DUP                    : return \"DUP\";\n+    case OP_NIP                    : return \"NIP\";\n+    case OP_OVER                   : return \"OVER\";\n+    case OP_PICK                   : return \"PICK\";\n+    case OP_ROLL                   : return \"ROLL\";\n+    case OP_ROT                    : return \"ROT\";\n+    case OP_SWAP                   : return \"SWAP\";\n+    case OP_TUCK                   : return \"TUCK\";\n \n     // splice ops\n-    case OP_CAT                    : return \"OP_CAT\";\n-    case OP_SUBSTR                 : return \"OP_SUBSTR\";\n-    case OP_LEFT                   : return \"OP_LEFT\";\n-    case OP_RIGHT                  : return \"OP_RIGHT\";\n-    case OP_SIZE                   : return \"OP_SIZE\";\n+    case OP_CAT                    : return \"CAT\";\n+    case OP_SUBSTR                 : return \"SUBSTR\";\n+    case OP_LEFT                   : return \"LEFT\";\n+    case OP_RIGHT                  : return \"RIGHT\";\n+    case OP_SIZE                   : return \"SIZE\";\n \n     // bit logic\n-    case OP_INVERT                 : return \"OP_INVERT\";\n-    case OP_AND                    : return \"OP_AND\";\n-    case OP_OR                     : return \"OP_OR\";\n-    case OP_XOR                    : return \"OP_XOR\";\n-    case OP_EQUAL                  : return \"OP_EQUAL\";\n-    case OP_EQUALVERIFY            : return \"OP_EQUALVERIFY\";\n-    case OP_RESERVED1              : return \"OP_RESERVED1\";\n-    case OP_RESERVED2              : return \"OP_RESERVED2\";\n+    case OP_INVERT                 : return \"INVERT\";\n+    case OP_AND                    : return \"AND\";\n+    case OP_OR                     : return \"OR\";\n+    case OP_XOR                    : return \"XOR\";\n+    case OP_EQUAL                  : return \"EQUAL\";\n+    case OP_EQUALVERIFY            : return \"EQUALVERIFY\";\n+    case OP_RESERVED1              : return \"RESERVED1\";\n+    case OP_RESERVED2              : return \"RESERVED2\";\n \n     // numeric\n-    case OP_1ADD                   : return \"OP_1ADD\";\n-    case OP_1SUB                   : return \"OP_1SUB\";\n-    case OP_2MUL                   : return \"OP_2MUL\";\n-    case OP_2DIV                   : return \"OP_2DIV\";\n-    case OP_NEGATE                 : return \"OP_NEGATE\";\n-    case OP_ABS                    : return \"OP_ABS\";\n-    case OP_NOT                    : return \"OP_NOT\";\n-    case OP_0NOTEQUAL              : return \"OP_0NOTEQUAL\";\n-    case OP_ADD                    : return \"OP_ADD\";\n-    case OP_SUB                    : return \"OP_SUB\";\n-    case OP_MUL                    : return \"OP_MUL\";\n-    case OP_DIV                    : return \"OP_DIV\";\n-    case OP_MOD                    : return \"OP_MOD\";\n-    case OP_LSHIFT                 : return \"OP_LSHIFT\";\n-    case OP_RSHIFT                 : return \"OP_RSHIFT\";\n-    case OP_BOOLAND                : return \"OP_BOOLAND\";\n-    case OP_BOOLOR                 : return \"OP_BOOLOR\";\n-    case OP_NUMEQUAL               : return \"OP_NUMEQUAL\";\n-    case OP_NUMEQUALVERIFY         : return \"OP_NUMEQUALVERIFY\";\n-    case OP_NUMNOTEQUAL            : return \"OP_NUMNOTEQUAL\";\n-    case OP_LESSTHAN               : return \"OP_LESSTHAN\";\n-    case OP_GREATERTHAN            : return \"OP_GREATERTHAN\";\n-    case OP_LESSTHANOREQUAL        : return \"OP_LESSTHANOREQUAL\";\n-    case OP_GREATERTHANOREQUAL     : return \"OP_GREATERTHANOREQUAL\";\n-    case OP_MIN                    : return \"OP_MIN\";\n-    case OP_MAX                    : return \"OP_MAX\";\n-    case OP_WITHIN                 : return \"OP_WITHIN\";\n+    case OP_1ADD                   : return \"1ADD\";\n+    case OP_1SUB                   : return \"1SUB\";\n+    case OP_2MUL                   : return \"2MUL\";\n+    case OP_2DIV                   : return \"2DIV\";\n+    case OP_NEGATE                 : return \"NEGATE\";\n+    case OP_ABS                    : return \"ABS\";\n+    case OP_NOT                    : return \"NOT\";\n+    case OP_0NOTEQUAL              : return \"0NOTEQUAL\";\n+    case OP_ADD                    : return \"ADD\";\n+    case OP_SUB                    : return \"SUB\";\n+    case OP_MUL                    : return \"MUL\";\n+    case OP_DIV                    : return \"DIV\";\n+    case OP_MOD                    : return \"MOD\";\n+    case OP_LSHIFT                 : return \"LSHIFT\";\n+    case OP_RSHIFT                 : return \"RSHIFT\";\n+    case OP_BOOLAND                : return \"BOOLAND\";\n+    case OP_BOOLOR                 : return \"BOOLOR\";\n+    case OP_NUMEQUAL               : return \"NUMEQUAL\";\n+    case OP_NUMEQUALVERIFY         : return \"NUMEQUALVERIFY\";\n+    case OP_NUMNOTEQUAL            : return \"NUMNOTEQUAL\";\n+    case OP_LESSTHAN               : return \"LESSTHAN\";\n+    case OP_GREATERTHAN            : return \"GREATERTHAN\";\n+    case OP_LESSTHANOREQUAL        : return \"LESSTHANOREQUAL\";\n+    case OP_GREATERTHANOREQUAL     : return \"GREATERTHANOREQUAL\";\n+    case OP_MIN                    : return \"MIN\";\n+    case OP_MAX                    : return \"MAX\";\n+    case OP_WITHIN                 : return \"WITHIN\";\n \n     // crypto\n-    case OP_RIPEMD160              : return \"OP_RIPEMD160\";\n-    case OP_SHA1                   : return \"OP_SHA1\";\n-    case OP_SHA256                 : return \"OP_SHA256\";\n-    case OP_HASH160                : return \"OP_HASH160\";\n-    case OP_HASH256                : return \"OP_HASH256\";\n-    case OP_CODESEPARATOR          : return \"OP_CODESEPARATOR\";\n-    case OP_CHECKSIG               : return \"OP_CHECKSIG\";\n-    case OP_CHECKSIGVERIFY         : return \"OP_CHECKSIGVERIFY\";\n-    case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n-    case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n+    case OP_RIPEMD160              : return \"RIPEMD160\";\n+    case OP_SHA1                   : return \"SHA1\";\n+    case OP_SHA256                 : return \"SHA256\";\n+    case OP_HASH160                : return \"HASH160\";\n+    case OP_HASH256                : return \"HASH256\";\n+    case OP_CODESEPARATOR          : return \"CODESEPARATOR\";\n+    case OP_CHECKSIG               : return \"CHECKSIG\";\n+    case OP_CHECKSIGVERIFY         : return \"CHECKSIGVERIFY\";\n+    case OP_CHECKMULTISIG          : return \"CHECKMULTISIG\";\n+    case OP_CHECKMULTISIGVERIFY    : return \"CHECKMULTISIGVERIFY\";\n \n     // expanson\n-    case OP_NOP1                   : return \"OP_NOP1\";\n-    case OP_NOP2                   : return \"OP_NOP2\";\n-    case OP_NOP3                   : return \"OP_NOP3\";\n-    case OP_NOP4                   : return \"OP_NOP4\";\n-    case OP_NOP5                   : return \"OP_NOP5\";\n-    case OP_NOP6                   : return \"OP_NOP6\";\n-    case OP_NOP7                   : return \"OP_NOP7\";\n-    case OP_NOP8                   : return \"OP_NOP8\";\n-    case OP_NOP9                   : return \"OP_NOP9\";\n-    case OP_NOP10                  : return \"OP_NOP10\";\n+    case OP_NOP1                   : return \"NOP1\";\n+    case OP_NOP2                   : return \"NOP2\";\n+    case OP_NOP3                   : return \"NOP3\";\n+    case OP_NOP4                   : return \"NOP4\";\n+    case OP_NOP5                   : return \"NOP5\";\n+    case OP_NOP6                   : return \"NOP6\";\n+    case OP_NOP7                   : return \"NOP7\";\n+    case OP_NOP8                   : return \"NOP8\";\n+    case OP_NOP9                   : return \"NOP9\";\n+    case OP_NOP10                  : return \"NOP10\";\n \n-    case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n+    case OP_INVALIDOPCODE          : return \"INVALIDOPCODE\";\n \n     // Note:\n     //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n     //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n     //  Script, just let the default: case deal with them.\n \n     default:\n-        return \"OP_UNKNOWN\";\n+        return \"UNKNOWN\";\n     }\n }\n "
      },
      {
        "sha": "6501dd2d9f3f377d8b215523b0f4185375eab7ab",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/103bd9603b151eed15f90f69249156319b36073f/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/103bd9603b151eed15f90f69249156319b36073f/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=103bd9603b151eed15f90f69249156319b36073f",
        "patch": "@@ -154,4 +154,21 @@ BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n     BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_decoderawtransaction_scriptPubKey)\n+{\n+    Value result;\n+    Value scriptPubKeyAsm;\n+    string tx;\n+    Value txid;\n+    // this test case uses a main net transaction that has both P2PKH and P2SH outputs. it's from james d'angelo's awesome video about multisig -- https://www.youtube.com/watch?v=zIbUSaZBJgU.\n+    tx = std::string(\"010000000214e74c8aa195fd544715fb4401008a7e139b23804e8c07b6bb538989270ebbdf000000008b48304502205192c9c285f47be0f0dc34cdfb6e2093b0b09d58cb361e7a996ce6d9d5bda1c2022100e82562a42ffb27e9da98eb086f5376efc3eb534b2bbee410dd1436406be2613501410460f8395ff5b0db8cac5a471d11066fb1598411153b04d76984b7c36bc01dc0699b83d995333dc513d082f423c20a4b2d1a6753daccecbf9ee01cb15af97c9fc2ffffffffcfcd79a7e8c838a08587ab9347dce1a0420a43ca4cae73b2e1b7d797b46e2a07010000008b483045022001ba3879426b190c6bf82adc91af4f58eecd27c61c6603604de5f4c1c0052f59022100e3af7e854e437fa57cf2081ab67911063d9fbd78a9050687df4da9dafeb538ba014104983fd4a1ffa71bfe7dfd623b39ba27a735b6ceb70931a25acdad529cf06d7ab454cc47bb81e1da0a0d00cb00d4085b75a1f46ef84ffe566cdc6624709c2c56dfffffffff02a45e02000000000017a9142a5edea39971049a540474c6a99edf0aa4074c58874b920000000000001976a914b9c670c7aa955c9808af7eeb9643b9fd6285cbf588ac00000000\");\n+    BOOST_CHECK_NO_THROW(result = CallRPC(string(\"decoderawtransaction \") + tx));\n+    txid = find_value(result.get_obj(), \"txid\");\n+    BOOST_CHECK_EQUAL(txid.get_str(), \"73926d12845ecf0dbb51abe0d64a1e11deb385dc58df2d7e2c6ed0ab35561f8d\");\n+    scriptPubKeyAsm = find_value(find_value(find_value(result.get_obj(), \"vout\").get_array().at(0).get_obj(), \"scriptPubKey\").get_obj(), \"asm\");\n+    BOOST_CHECK_EQUAL(scriptPubKeyAsm.get_str(), \"HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 EQUAL\");\n+    scriptPubKeyAsm = find_value(find_value(find_value(result.get_obj(), \"vout\").get_array().at(1).get_obj(), \"scriptPubKey\").get_obj(), \"asm\");\n+    BOOST_CHECK_EQUAL(scriptPubKeyAsm.get_str(), \"DUP HASH160 b9c670c7aa955c9808af7eeb9643b9fd6285cbf5 EQUALVERIFY CHECKSIG\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]