[
  {
    "sha": "a874637bf9e51d64eaf40290555dde10fab7d045",
    "node_id": "C_kwDOABII59oAKGE4NzQ2MzdiZjllNTFkNjRlYWY0MDI5MDU1NWRkZTEwZmFiN2QwNDU",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T12:21:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:01:59Z"
      },
      "message": "build: AX_CHECK_LINK_FLAG serial 6",
      "tree": {
        "sha": "6bf8d0625c1e4d9aea041b09cec4fc8569cb31c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bf8d0625c1e4d9aea041b09cec4fc8569cb31c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a874637bf9e51d64eaf40290555dde10fab7d045",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxcACgkQLuufXMCV\nJsEmOg/+MELRSzEjzGWo7d+n+eJe5jzVaOwly3DFhNTZ5rk90KDYBvOLNarfyDYF\nKe4nPhCpqVtywwyalkgvmCiWve0Qh+2VJPgaRG8KftTij/FErxYGb811y4cJeBSV\nv1MkHs/zqwHtM/bwXVMYPECZEuKzV3WlYjrJFzs6IMTTnz1GMPD85WvcBY64qW/b\nQw4D+CzINmqy2WVwnuxS08qiVjtiR/Mt+4zh5mKatREwkmmCJXJo85/PtJphDyAZ\n5S7vsVE9mJByHkUp52gao/f9MJb+FJ/wWylXGjKJoZuvW/WR3o5/L7haV2Q0rnOa\nJ9gwPv5/uZRTaGi0cHr+zqcnd1wJgenqKarAAKzjshs6MB9B8cklEDKcfPSO3W71\nEm5G5b23KTtWf8FPejGjLSkKdv3l4SpxRmv7TBm60fCBaYd0OUlx5nzry5trwJ+5\nZLaQeAFulDhhSgz72n83mW8UHgcz/Fmpr14sxZtn5dP1JJymTaH1DJkgnx4VWN62\nkjOfFrp0KPQ3/SR3PnaX67twfzS3EoKCMFhOJXas48yQVmlwFyM2TfnO9rlR6yD1\nN8wHHKVZ1jW47mHQLYZv/epjh1mmITkNzzQz7btiQHPmki/nw5dQiK+SN4w5A5DG\nYDj6mIopUcy42dM0a62IJH2cyFtNwaf3jn9319StKxRlEk8yKLQ=\n=G8mV\n-----END PGP SIGNATURE-----",
        "payload": "tree 6bf8d0625c1e4d9aea041b09cec4fc8569cb31c9\nparent c1fb30633b6dcbf32db7d53c9f538019af80d6c5\nauthor fanquake <fanquake@gmail.com> 1630585268 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682519 +0800\n\nbuild: AX_CHECK_LINK_FLAG serial 6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a874637bf9e51d64eaf40290555dde10fab7d045",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a874637bf9e51d64eaf40290555dde10fab7d045",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a874637bf9e51d64eaf40290555dde10fab7d045/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1fb30633b6dcbf32db7d53c9f538019af80d6c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1fb30633b6dcbf32db7d53c9f538019af80d6c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1fb30633b6dcbf32db7d53c9f538019af80d6c5"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 6,
      "deletions": 27
    },
    "files": [
      {
        "sha": "03a30ce4c739ffb5bee27086d630e22ed35b5cc9",
        "filename": "build-aux/m4/ax_check_link_flag.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 27,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a874637bf9e51d64eaf40290555dde10fab7d045/build-aux/m4/ax_check_link_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a874637bf9e51d64eaf40290555dde10fab7d045/build-aux/m4/ax_check_link_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_link_flag.m4?ref=a874637bf9e51d64eaf40290555dde10fab7d045",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#    http://www.gnu.org/software/autoconf-archive/ax_check_link_flag.html\n+#    https://www.gnu.org/software/autoconf-archive/ax_check_link_flag.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -29,33 +29,12 @@\n #   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n #   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n #\n-#   This program is free software: you can redistribute it and/or modify it\n-#   under the terms of the GNU General Public License as published by the\n-#   Free Software Foundation, either version 3 of the License, or (at your\n-#   option) any later version.\n-#\n-#   This program is distributed in the hope that it will be useful, but\n-#   WITHOUT ANY WARRANTY; without even the implied warranty of\n-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n-#   Public License for more details.\n-#\n-#   You should have received a copy of the GNU General Public License along\n-#   with this program. If not, see <http://www.gnu.org/licenses/>.\n-#\n-#   As a special exception, the respective Autoconf Macro's copyright owner\n-#   gives unlimited permission to copy, distribute and modify the configure\n-#   scripts that are the output of Autoconf when processing the Macro. You\n-#   need not follow the terms of the GNU General Public License when using\n-#   or distributing such scripts, even though portions of the text of the\n-#   Macro appear in them. The GNU General Public License (GPL) does govern\n-#   all other use of the material that constitutes the Autoconf Macro.\n-#\n-#   This special exception to the GPL applies to versions of the Autoconf\n-#   Macro released by the Autoconf Archive. When you make and distribute a\n-#   modified version of the Autoconf Macro, you may extend this special\n-#   exception to the GPL to apply to your modified version as well.\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n \n-#serial 4\n+#serial 6\n \n AC_DEFUN([AX_CHECK_LINK_FLAG],\n [AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF"
      }
    ]
  },
  {
    "sha": "5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
    "node_id": "C_kwDOABII59oAKDVlNmJjNDM3YzU2ZWZkNjMzMzhkMWUzOGQ2N2JiYjE0NGIyZjRlNWM",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T12:42:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:01:59Z"
      },
      "message": "build: cleanup AX_CHECK_LINK_FLAG() usage\n\nThere should be no functional change.",
      "tree": {
        "sha": "ca0fa40aa333fe386dc727b7e584f32a002cec75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca0fa40aa333fe386dc727b7e584f32a002cec75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxcACgkQLuufXMCV\nJsE5bA//QvbEhpV+SqKzg0JGq5f69/4D1BRj1fGl9zHUQiCMKPG4wNyYzTBv+/Fs\n1pxB7DPpoXujBxVYp+DoxLBqXcY1gafd/vvaEXm2fK70XpABP5Xlp5y0TB8rd1fb\nCjlmsJggTtaLMuQx0YmYpuRTnmiMi8NnGu+fAFFykx4+lnOeeMxdZ5AAWOWNigyc\nNAwHNPT2ONWGzMJR2w98S7x2PLUaE8Zd8WUlJWGHZ9VF1f/bPHCFl/KMH/oOopog\nvt1xVqxyEhz9mG9FE7u5a3wf4mEka3K8TWBNTdTwe3u6YqZr7lUGw4zLdBFr0wFw\nDaTlYB5T3XUn9QK2hsx913DlwFa2m8Sw37h1W0Q8bmXLpMSEQA0gJcnqGxfj4ClY\nks+bohCmisTAHMN3r9yZOeMaCMIyBRcTURcETSYt3DIkjI7OGFEhroBRwReM3oY+\neURqeRtvaeNYhK6ZzIyAsX7bW4f6Tgz3NJtYKY/MBCKmPZTKiA0POGNOzA2qilCV\nuXV6NyFC0DHsMQPjEx91P88wSNYTyO+BGPPC0aNkD2VPVQ2YoMD+ekz/Jug2d6jq\nC2V7issWLFtA7rxw7Nhd/XIKsvjv6u+jrvyOlMtPdJkZih41yPCG8E1HGIDes1XE\n4GznCpFAzcPKBBb/ON1uWOcI99n+IkKeNkYpiEBqOLJFPSx9q4M=\n=fjv5\n-----END PGP SIGNATURE-----",
        "payload": "tree ca0fa40aa333fe386dc727b7e584f32a002cec75\nparent a874637bf9e51d64eaf40290555dde10fab7d045\nauthor fanquake <fanquake@gmail.com> 1630586534 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682519 +0800\n\nbuild: cleanup AX_CHECK_LINK_FLAG() usage\n\nThere should be no functional change.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a874637bf9e51d64eaf40290555dde10fab7d045",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a874637bf9e51d64eaf40290555dde10fab7d045",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a874637bf9e51d64eaf40290555dde10fab7d045"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 32,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3b8005ab37ae6d6a2e05c77aca0d1b6cfa9577da",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
        "patch": "@@ -154,10 +154,10 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n-      AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])\n-      AX_CHECK_LINK_FLAG([[-framework IOSurface]],[QT_LIBS=\"$QT_LIBS -framework IOSurface\"],[AC_MSG_ERROR(could not link against IOSurface framework)])\n-      AX_CHECK_LINK_FLAG([[-framework Metal]],[QT_LIBS=\"$QT_LIBS -framework Metal\"],[AC_MSG_ERROR(could not link against Metal framework)])\n-      AX_CHECK_LINK_FLAG([[-framework QuartzCore]],[QT_LIBS=\"$QT_LIBS -framework QuartzCore\"],[AC_MSG_ERROR(could not link against QuartzCore framework)])\n+      AX_CHECK_LINK_FLAG([-framework Carbon], [QT_LIBS=\"$QT_LIBS -framework Carbon\"], [AC_MSG_ERROR(could not link against Carbon framework)])\n+      AX_CHECK_LINK_FLAG([-framework IOSurface], [QT_LIBS=\"$QT_LIBS -framework IOSurface\"], [AC_MSG_ERROR(could not link against IOSurface framework)])\n+      AX_CHECK_LINK_FLAG([-framework Metal], [QT_LIBS=\"$QT_LIBS -framework Metal\"], [AC_MSG_ERROR(could not link against Metal framework)])\n+      AX_CHECK_LINK_FLAG([-framework QuartzCore], [QT_LIBS=\"$QT_LIBS -framework QuartzCore\"], [AC_MSG_ERROR(could not link against QuartzCore framework)])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n       AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n@@ -234,12 +234,12 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n      BITCOIN_QT_CHECK([\n        MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n        base_frameworks=\"-framework Foundation -framework AppKit\"\n-       AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+       AX_CHECK_LINK_FLAG([$base_frameworks], [QT_LIBS=\"$QT_LIBS $base_frameworks\"], [AC_MSG_ERROR(could not find base frameworks)])\n      ])\n     ;;\n     *mingw*)\n        BITCOIN_QT_CHECK([\n-         AX_CHECK_LINK_FLAG([[-mwindows]],[QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"],[AC_MSG_WARN(-mwindows linker support not detected)])\n+         AX_CHECK_LINK_FLAG([-mwindows], [QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"], [AC_MSG_WARN(-mwindows linker support not detected)])\n        ])\n   esac\n "
      },
      {
        "sha": "18244e9b2feac0bd48031bd86aa96d547ac4c548",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 26,
        "deletions": 27,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
        "patch": "@@ -341,10 +341,10 @@ dnl\n dnl LDFLAG_WERROR Should only be used when testing -Wl,*\n case $host in\n  *darwin*)\n-    AX_CHECK_LINK_FLAG([-Wl,-fatal_warnings],[LDFLAG_WERROR=\"-Wl,-fatal_warnings\"],[LDFLAG_WERROR=\"\"])\n+    AX_CHECK_LINK_FLAG([-Wl,-fatal_warnings], [LDFLAG_WERROR=\"-Wl,-fatal_warnings\"], [LDFLAG_WERROR=\"\"])\n     ;;\n   *)\n-    AX_CHECK_LINK_FLAG([-Wl,--fatal-warnings],[LDFLAG_WERROR=\"-Wl,--fatal-warnings\"],[LDFLAG_WERROR=\"\"])\n+    AX_CHECK_LINK_FLAG([-Wl,--fatal-warnings], [LDFLAG_WERROR=\"-Wl,--fatal-warnings\"], [LDFLAG_WERROR=\"\"])\n     ;;\n esac\n \n@@ -385,8 +385,8 @@ if test x$use_sanitizers != x; then\n   dnl the sanitize flags are supported by the compiler but the actual sanitizer\n   dnl libs are missing.\n   AX_CHECK_LINK_FLAG(\n-    [[-fsanitize=$use_sanitizers]],\n-    [[SANITIZER_LDFLAGS=-fsanitize=$use_sanitizers]],\n+    [-fsanitize=$use_sanitizers],\n+    [SANITIZER_LDFLAGS=\"-fsanitize=$use_sanitizers\"],\n     [AC_MSG_ERROR([linker did not accept requested flags, you are missing required libraries])],\n     [],\n     [AC_LANG_PROGRAM([[\n@@ -645,7 +645,7 @@ case $host in\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n-     AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n+     AX_CHECK_LINK_FLAG([-static], [LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], none)\n      if test x$MAKENSIS = xnone; then\n@@ -668,7 +668,7 @@ case $host in\n      postdeps_CXX=\n \n      dnl We require Windows 7 (NT 6.1) or later\n-     AX_CHECK_LINK_FLAG([[-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1]],[LDFLAGS=\"$LDFLAGS -Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1\"],,[[$LDFLAG_WERROR]])\n+     AX_CHECK_LINK_FLAG([-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1], [LDFLAGS=\"$LDFLAGS -Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1\"], [], [$LDFLAG_WERROR])\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n@@ -749,7 +749,7 @@ case $host in\n        esac\n      fi\n \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"],, [[$LDFLAG_WERROR]])\n+     AX_CHECK_LINK_FLAG([-Wl,-headerpad_max_install_names], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"], [], [$LDFLAG_WERROR])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n@@ -816,7 +816,7 @@ if test x$use_lcov = xyes; then\n   AC_SUBST(COV_TOOL_WRAPPER, \"cov_tool_wrapper.sh\")\n   LCOV=\"$LCOV --gcov-tool $(pwd)/$COV_TOOL_WRAPPER\"\n \n-  AX_CHECK_LINK_FLAG([[--coverage]], [LDFLAGS=\"$LDFLAGS --coverage\"],\n+  AX_CHECK_LINK_FLAG([--coverage], [LDFLAGS=\"$LDFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n@@ -869,9 +869,9 @@ if test \"x$enable_gprof\" = xyes; then\n     AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n         [AC_MSG_ERROR(gprof profiling requested but not available)], [[$CXXFLAG_WERROR]])\n \n-    AX_CHECK_LINK_FLAG([[-no-pie]], [GPROF_LDFLAGS=\"-no-pie\"])\n-    AX_CHECK_LINK_FLAG([[-pg]],[GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n-        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$GPROF_LDFLAGS]])\n+    AX_CHECK_LINK_FLAG([-no-pie], [GPROF_LDFLAGS=\"-no-pie\"])\n+    AX_CHECK_LINK_FLAG([-pg], [GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [$GPROF_LDFLAGS])\n fi\n \n if test x$TARGET_OS != xwindows; then\n@@ -891,7 +891,7 @@ if test x$use_hardening != xno; then\n   dnl -fcf-protection used with Clang 7 causes ld to emit warnings:\n   dnl ld: error: ... <corrupt x86 feature size: 0x8>\n   dnl Use CHECK_LINK_FLAG & --fatal-warnings to ensure we won't use the flag in this case.\n-  AX_CHECK_LINK_FLAG([-fcf-protection=full],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([-fcf-protection=full], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"], [], [$LDFLAG_WERROR])\n \n   case $host in\n     *mingw*)\n@@ -916,14 +916,14 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n-  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,separate-code]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,separate-code\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([-Wl,--enable-reloc-section], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,--high-entropy-va], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,-z,relro], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,-z,now], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,-z,separate-code], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,separate-code\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-fPIE -pie], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"], [], [$CXXFLAG_WERROR])\n \n   case $host in\n     *mingw*)\n@@ -936,9 +936,9 @@ dnl These flags are specific to ld64, and may cause issues with other linkers.\n dnl For example: GNU ld will interpret -dead_strip as -de and then try and use\n dnl \"ad_strip\" as the symbol for the entry point.\n if test x$TARGET_OS = xdarwin; then\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([-Wl,-dead_strip], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,-dead_strip_dylibs], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"], [], [$LDFLAG_WERROR])\n+  AX_CHECK_LINK_FLAG([-Wl,-bind_at_load], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"], [], [$LDFLAG_WERROR])\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n@@ -1274,10 +1274,9 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n \n   AC_MSG_CHECKING([whether main function is needed for fuzz binary])\n   AX_CHECK_LINK_FLAG(\n-    [[-fsanitize=$use_sanitizers]],\n+    [-fsanitize=$use_sanitizers],\n     [AC_MSG_RESULT([no])],\n-    [AC_MSG_RESULT([yes])\n-     CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"],\n+    [AC_MSG_RESULT([yes]); CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"],\n     [],\n     [AC_LANG_PROGRAM([[\n       #include <cstdint>\n@@ -1452,7 +1451,7 @@ dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])],[[$CXXFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]],[RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],,[[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([-Wl,--exclude-libs,ALL], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"], [], [$LDFLAG_WERROR])\n fi\n \n if test x$use_tests = xyes; then"
      }
    ]
  },
  {
    "sha": "b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
    "node_id": "C_kwDOABII59oAKGIzZGQ2YzFkMGY5MWE1OTAwMWMyYWU3YmEyYmFmMzM4YzI5OTFiZDA",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T12:44:47Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:01:59Z"
      },
      "message": "build: AX_CHECK_COMPILE_FLAG() serial 6",
      "tree": {
        "sha": "7b061fd430d4859955949196b5c70dd91c0a3bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b061fd430d4859955949196b5c70dd91c0a3bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxcACgkQLuufXMCV\nJsFoIA/7B0eE9mgsKG+TFj0RtUi6+XS1EMVDU2JEZAuInbHG3y1HevCAyCpQmZHw\nl5rtZN+63mCLTvIH6LJAzAhj1Ik4ZhmyNSLcrTq40+1orHk1O0wTEAgX3s88rTty\nQ/Sl92kuw4f7nackLPPj1CbFXnbiAWPqlU4KNhhWAEhOq+9mmKttHlvsKSnkv0+v\nwA7O604iZOKGxFqTGlrIkyoC604BIVUhOCJuFhgL4/zOHJ6bmw6FTZP/LI41rCWp\n0oZIyyjlgRIqO769a8Hn5JuyDXGEKM2E+oUPxksVHu2nyhYOMg3ERBcXbf303AfU\nXBH3CD6UReB/u/40Sac2Go6MRsv+KQLq/oEaACT2Fch/v0lAOT/CyFP8/+DpRq58\nH8xMgtvL1H74fzwWY0W5ukr4rrS8Cr96jAS40RIuh/PyRaHisNEjyGyreHKOHzwS\nKirQBefbR4T74bxpkI12rBGJCdJP9mC0j5cVAP9IXvAa1ujKXNEalCEp3SToNgJl\n57N991b0kKLdd8EP0V3LweSPO8pTFsQsife2jMy/HPzHoLF2PINR/ov4B1Os7Zaw\nA2V84UVdOnXK8A0xAPkBob4sYGyMTFZgLnAnXCM9osmNBNWUwddm3fK0260wk6ym\npiRSUQ+VAC8UkhkKpZUiLjE/bKEnKUp/l9MHM7sIvD7TE1d/wRE=\n=5bDY\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b061fd430d4859955949196b5c70dd91c0a3bc5\nparent 5e6bc437c56efd63338d1e38d67bbb144b2f4e5c\nauthor fanquake <fanquake@gmail.com> 1630586687 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682519 +0800\n\nbuild: AX_CHECK_COMPILE_FLAG() serial 6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6bc437c56efd63338d1e38d67bbb144b2f4e5c"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 6,
      "deletions": 27
    },
    "files": [
      {
        "sha": "bd753b34d7dc57063b0b65f1441dde0889e1cd26",
        "filename": "build-aux/m4/ax_check_compile_flag.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 27,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0/build-aux/m4/ax_check_compile_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0/build-aux/m4/ax_check_compile_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_compile_flag.m4?ref=b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_check_compile_flag.html\n+#  https://www.gnu.org/software/autoconf-archive/ax_check_compile_flag.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -29,33 +29,12 @@\n #   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n #   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n #\n-#   This program is free software: you can redistribute it and/or modify it\n-#   under the terms of the GNU General Public License as published by the\n-#   Free Software Foundation, either version 3 of the License, or (at your\n-#   option) any later version.\n-#\n-#   This program is distributed in the hope that it will be useful, but\n-#   WITHOUT ANY WARRANTY; without even the implied warranty of\n-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n-#   Public License for more details.\n-#\n-#   You should have received a copy of the GNU General Public License along\n-#   with this program. If not, see <http://www.gnu.org/licenses/>.\n-#\n-#   As a special exception, the respective Autoconf Macro's copyright owner\n-#   gives unlimited permission to copy, distribute and modify the configure\n-#   scripts that are the output of Autoconf when processing the Macro. You\n-#   need not follow the terms of the GNU General Public License when using\n-#   or distributing such scripts, even though portions of the text of the\n-#   Macro appear in them. The GNU General Public License (GPL) does govern\n-#   all other use of the material that constitutes the Autoconf Macro.\n-#\n-#   This special exception to the GPL applies to versions of the Autoconf\n-#   Macro released by the Autoconf Archive. When you make and distribute a\n-#   modified version of the Autoconf Macro, you may extend this special\n-#   exception to the GPL to apply to your modified version as well.\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n \n-#serial 4\n+#serial 6\n \n AC_DEFUN([AX_CHECK_COMPILE_FLAG],\n [AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF"
      }
    ]
  },
  {
    "sha": "5ced92528362d8a9ea3c15a9752f3dc184108060",
    "node_id": "C_kwDOABII59oAKDVjZWQ5MjUyODM2MmQ4YTllYTNjMTVhOTc1MmYzZGMxODQxMDgwNjA",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T13:04:47Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:01:59Z"
      },
      "message": "build: cleanup AX_CHECK_COMPILE_FLAG() usage\n\nThere should be no functional change.",
      "tree": {
        "sha": "9298e737f4a0960dba5f46c0d4748c67c538d0dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9298e737f4a0960dba5f46c0d4748c67c538d0dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ced92528362d8a9ea3c15a9752f3dc184108060",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxcACgkQLuufXMCV\nJsE2GRAAmUErACrIBFVF9+eNP2KhUx7VsYvLt9xxPq3vMECDRSn43Dqxx1kBG/oJ\nm8e+LECMkN/HMZBz4TY1rQJjVA4PRfvmUX6AEefKK7Kx9SiASrMv36q6WeWCkSee\nRHGrmo64i8Vuj2wduMbRgBdBM2L/Er50cvgSzf18Cuh0kDoUF7PjMjIljXYyLmGe\nRsARcf1Dgehud399eB9PstFisMHDmlD4vcZuWZSpUft1BLt6MINvMJHuhT0o1tzl\n1qR25FHhOC60bvFxn9/c0n1SzOxf00zw1qCPajNHybilmywhWt/qldzIbFY1hpkk\nxdQjgdbOGVfpehg1FXX1jdhAMv1LUMAxMyuc3dYTjkFO9aHn27pnDOHYQzVhebtp\n6bNcPaCDVLPJawECkJ86HdhtPlsu2/oj7I3uzI3ftomMwLFLElLP8ArR14hbRN2S\nqtqYQ0jguybLK/KkxFUYkisqf7aBHmeRiM3wHB9qLHjNRHpO6E1wHIMoWJRabSSi\nFrqFZAv4BY8zwoY3SuFGExl4LJi7VRTRRnSSaR7B08hsTOJhjCPmRpsXI7H2jeB5\nmNthrwzFcy3zSQSQHg+uJ2ZNw+fNZJ+RLkMMS+EwzfIK5YQXPISsgrF9TLAhYtfO\nT+cxn7U81SZWzfJyUmkaNPpnvWRPBvqUVv2nCZhay/RIs3q5St4=\n=B/hD\n-----END PGP SIGNATURE-----",
        "payload": "tree 9298e737f4a0960dba5f46c0d4748c67c538d0dc\nparent b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0\nauthor fanquake <fanquake@gmail.com> 1630587887 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682519 +0800\n\nbuild: cleanup AX_CHECK_COMPILE_FLAG() usage\n\nThere should be no functional change.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ced92528362d8a9ea3c15a9752f3dc184108060",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ced92528362d8a9ea3c15a9752f3dc184108060",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ced92528362d8a9ea3c15a9752f3dc184108060/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3dd6c1d0f91a59001c2ae7ba2baf338c2991bd0"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "d9083a38eedebb37221f021135f9c4718769c63a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 44,
        "deletions": 44,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ced92528362d8a9ea3c15a9752f3dc184108060/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ced92528362d8a9ea3c15a9752f3dc184108060/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5ced92528362d8a9ea3c15a9752f3dc184108060",
        "patch": "@@ -332,7 +332,7 @@ dnl Note that this is not necessarily a check to see if -Werror is supported, bu\n dnl a compile with -Werror can succeed. This is important because the compiler may already be\n dnl warning about something unrelated, for example about some path issue. If that is the case,\n dnl -Werror cannot be used because all of those warnings would be turned into errors.\n-AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n+AX_CHECK_COMPILE_FLAG([-Werror], [CXXFLAG_WERROR=\"-Werror\"], [CXXFLAG_WERROR=\"\"])\n \n dnl Check for a flag to turn linker warnings into errors. When flags are passed to linkers via the\n dnl compiler driver using a -Wl,-foo flag, linker warnings may be swallowed rather than bubbling up.\n@@ -355,28 +355,28 @@ if test \"x$enable_debug\" = xyes; then\n   fi\n \n   dnl Disable all optimizations\n-  AX_CHECK_COMPILE_FLAG([-O0], [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-O0], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -O0\"], [], [$CXXFLAG_WERROR])\n \n   dnl Prefer -g3, fall back to -g if that is unavailable.\n   AX_CHECK_COMPILE_FLAG(\n     [-g3],\n-    [[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"]],\n-    [AX_CHECK_COMPILE_FLAG([-g],[[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g\"]],,[[$CXXFLAG_WERROR]])],\n-    [[$CXXFLAG_WERROR]])\n+    [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g3\"],\n+    [AX_CHECK_COMPILE_FLAG([-g], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g\"], [], [$CXXFLAG_WERROR])],\n+    [$CXXFLAG_WERROR])\n \n   AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-ftrapv],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-ftrapv], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"], [], [$CXXFLAG_WERROR])\n fi\n \n if test x$use_sanitizers != x; then\n   dnl First check if the compiler accepts flags. If an incompatible pair like\n   dnl -fsanitize=address,thread is used here, this check will fail. This will also\n   dnl fail if a bad argument is passed, e.g. -fsanitize=undfeined\n   AX_CHECK_COMPILE_FLAG(\n-    [[-fsanitize=$use_sanitizers]],\n-    [[SANITIZER_CXXFLAGS=-fsanitize=$use_sanitizers]],\n+    [-fsanitize=$use_sanitizers],\n+    [SANITIZER_CXXFLAGS=\"-fsanitize=$use_sanitizers\"],\n     [AC_MSG_ERROR([compiler did not accept requested flags])])\n \n   dnl Some compilers (e.g. GCC) require additional libraries like libasan,\n@@ -412,46 +412,46 @@ if test \"x$enable_werror\" = \"xyes\"; then\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wall], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wextra], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wgnu], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"], [], [$CXXFLAG_WERROR])\n   dnl some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n-  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wshadow-field],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wloop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wloop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-member-function],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-branches],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-branches\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-cond],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wlogical-op],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wvla], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wshadow-field], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wloop-analysis], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wredundant-decls], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-member-function], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wdate-time], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wduplicated-branches], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-branches\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wduplicated-cond], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wlogical-op], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"], [], [$CXXFLAG_WERROR])\n   dnl -Wsuggest-override is broken with GCC before 9.2\n   dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n-  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n+  AX_CHECK_COMPILE_FLAG([-Wsuggest-override], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"], [], [$CXXFLAG_WERROR],\n                         [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n \n   if test x$suppress_external_warnings != xno ; then\n-    AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_COMPILE_FLAG([-Wdocumentation], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"], [], [$CXXFLAG_WERROR])\n   fi\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n   dnl set the -Wno-foo case if it works.\n-  AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-parameter], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_COMPILE_FLAG([-Wself-assign], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"], [], [$CXXFLAG_WERROR])\n   if test x$suppress_external_warnings != xyes ; then\n-    AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy], [NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"], [], [$CXXFLAG_WERROR])\n   fi\n fi\n \n dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n-AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers],[[CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers], [CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"], [], [$CXXFLAG_WERROR])\n \n enable_sse42=no\n enable_sse41=no\n@@ -465,10 +465,10 @@ dnl be compiled with them, rather that specific objects/libs may use them after\n dnl compatibility.\n \n dnl x86\n-AX_CHECK_COMPILE_FLAG([-msse4.2],[[SSE42_CXXFLAGS=\"-msse4.2\"]],,[[$CXXFLAG_WERROR]])\n-AX_CHECK_COMPILE_FLAG([-msse4.1],[[SSE41_CXXFLAGS=\"-msse4.1\"]],,[[$CXXFLAG_WERROR]])\n-AX_CHECK_COMPILE_FLAG([-mavx -mavx2],[[AVX2_CXXFLAGS=\"-mavx -mavx2\"]],,[[$CXXFLAG_WERROR]])\n-AX_CHECK_COMPILE_FLAG([-msse4 -msha],[[SHANI_CXXFLAGS=\"-msse4 -msha\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-msse4.2], [SSE42_CXXFLAGS=\"-msse4.2\"], [], [$CXXFLAG_WERROR])\n+AX_CHECK_COMPILE_FLAG([-msse4.1], [SSE41_CXXFLAGS=\"-msse4.1\"], [], [$CXXFLAG_WERROR])\n+AX_CHECK_COMPILE_FLAG([-mavx -mavx2], [AVX2_CXXFLAGS=\"-mavx -mavx2\"], [], [$CXXFLAG_WERROR])\n+AX_CHECK_COMPILE_FLAG([-msse4 -msha], [SHANI_CXXFLAGS=\"-msse4 -msha\"], [], [$CXXFLAG_WERROR])\n \n enable_clmul=\n AX_CHECK_COMPILE_FLAG([-mpclmul], [enable_clmul=yes], [], [$CXXFLAG_WERROR], [AC_LANG_PROGRAM([\n@@ -558,7 +558,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n # ARM\n-AX_CHECK_COMPILE_FLAG([-march=armv8-a+crc+crypto],[[ARM_CRC_CXXFLAGS=\"-march=armv8-a+crc+crypto\"]],,[[$CXXFLAG_WERROR]])\n+AX_CHECK_COMPILE_FLAG([-march=armv8-a+crc+crypto], [ARM_CRC_CXXFLAGS=\"-march=armv8-a+crc+crypto\"], [], [$CXXFLAG_WERROR])\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $ARM_CRC_CXXFLAGS\"\n@@ -867,7 +867,7 @@ if test \"x$enable_gprof\" = xyes; then\n     fi\n     use_hardening=no\n     AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n-        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$CXXFLAG_WERROR]])\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [$CXXFLAG_WERROR])\n \n     AX_CHECK_LINK_FLAG([-no-pie], [GPROF_LDFLAGS=\"-no-pie\"])\n     AX_CHECK_LINK_FLAG([-pg], [GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n@@ -876,17 +876,17 @@ fi\n \n if test x$TARGET_OS != xwindows; then\n   dnl All windows code is PIC, forcing it on just adds useless compile warnings\n-  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n+  AX_CHECK_COMPILE_FLAG([-fPIC], [PIC_FLAGS=\"-fPIC\"])\n fi\n \n dnl All versions of gcc that we commonly use for building are subject to bug\n dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348. To work around that, set\n dnl -fstack-reuse=none for all gcc builds. (Only gcc understands this flag)\n-AX_CHECK_COMPILE_FLAG([-fstack-reuse=none],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n+AX_CHECK_COMPILE_FLAG([-fstack-reuse=none], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-reuse=none\"])\n if test x$use_hardening != xno; then\n   use_hardening=yes\n-  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n-  AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n+  AX_CHECK_COMPILE_FLAG([-Wstack-protector], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n+  AX_CHECK_COMPILE_FLAG([-fstack-protector-all], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n   dnl -fcf-protection used with Clang 7 causes ld to emit warnings:\n   dnl ld: error: ... <corrupt x86 feature size: 0x8>\n@@ -1449,8 +1449,8 @@ AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"]\n \n dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n-  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n-  [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])],[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden], [CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n+  [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])], [$CXXFLAG_WERROR])\n   AX_CHECK_LINK_FLAG([-Wl,--exclude-libs,ALL], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"], [], [$LDFLAG_WERROR])\n fi\n \n@@ -1612,7 +1612,7 @@ if test \"x$use_ccache\" != \"xno\"; then\n   fi\n   AC_MSG_RESULT($use_ccache)\n   if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_top_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_top_srcdir)=.\"], [], [$CXXFLAG_WERROR])\n     AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B],[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_top_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n   fi\n fi"
      }
    ]
  },
  {
    "sha": "b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
    "node_id": "C_kwDOABII59oAKGI0ZGJhMGM2Yzc2MTk3NTJiOWYwZWQ1MjdkOGJlNGRkNTI4OTIzYjE",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T13:06:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:01:59Z"
      },
      "message": "build: AX_CHECK_PREPROC_FLAG() serial 6",
      "tree": {
        "sha": "3b3e1142ad8fd5431180b114555bc2a8acd079e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b3e1142ad8fd5431180b114555bc2a8acd079e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxgACgkQLuufXMCV\nJsEWaRAAr41yIbODSDEp1PDV1EmZIN8sNV2L0szhP0b8OxQ+2lqtnJ+xHxSNV7LK\nzdHOpR7gcuXwpp6aRgO/TPkvRY1iWJmFS7o80FADuxULKPFi+TzXM7Dd6fZ4MYJf\njev+pqr4qaMd/VOOQftZ5zcXcxiN4J1deGOYh0KTP/7oRJiaFnoACkc3LOeVAVjZ\ncov4X9XOywRBIw+IMoGXdaIqTc50+ZJP8CSTjWOAzhk/D2jLKJihBhB1jixfBLHB\nsmivzxo+nfq0Yq32UNEM2NLkM14E8H2DaUKZgM/rp6Vccq0b2jIzcRTGjMzJXBj3\nx4neas8sBQ0vcVPf1xWSfy8C/GO4QnA5bXtKv/bGG/Ba8LvR7cSqpn7bIs5CBPAm\nRqDuvpwvjBc6XIPSgDeUlP35cZ8I7PQlvqNwMPQc5rumJtRwuLROnkVnYEDKhu/n\nMujMZsTdp/jjjFGoKGuw0bzS96USFlxdJzlQuUmEG/LzCSPoTwRREaBhPZ9qLXa0\nDlel/gKgjyECa/LJt9AaOJ6cZYnSkmlgMH6P8ST36Cz67aQ9Kg9aY4uQncgm2Tfq\nbILLcdQ+tx7Kkd3hCzpWx+NL7gwkRiGsATmKCqG1X5ZDx9StdOJuZeTH4aLa3aXa\nbdMbtuX/qVzs/7Zixk+kAqEn1Z5WpVBEU6V4TNgjRq1v7Oyyp40=\n=bq+j\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b3e1142ad8fd5431180b114555bc2a8acd079e6\nparent 5ced92528362d8a9ea3c15a9752f3dc184108060\nauthor fanquake <fanquake@gmail.com> 1630588006 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682519 +0800\n\nbuild: AX_CHECK_PREPROC_FLAG() serial 6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4dba0c6c7619752b9f0ed527d8be4dd528923b1/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ced92528362d8a9ea3c15a9752f3dc184108060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ced92528362d8a9ea3c15a9752f3dc184108060",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ced92528362d8a9ea3c15a9752f3dc184108060"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 6,
      "deletions": 27
    },
    "files": [
      {
        "sha": "e43560fbd3b66812d2737c7c38c66a4a2aa1d244",
        "filename": "build-aux/m4/ax_check_preproc_flag.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 27,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4dba0c6c7619752b9f0ed527d8be4dd528923b1/build-aux/m4/ax_check_preproc_flag.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4dba0c6c7619752b9f0ed527d8be4dd528923b1/build-aux/m4/ax_check_preproc_flag.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_check_preproc_flag.m4?ref=b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#   http://www.gnu.org/software/autoconf-archive/ax_check_preproc_flag.html\n+#  https://www.gnu.org/software/autoconf-archive/ax_check_preproc_flag.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -29,33 +29,12 @@\n #   Copyright (c) 2008 Guido U. Draheim <guidod@gmx.de>\n #   Copyright (c) 2011 Maarten Bosmans <mkbosmans@gmail.com>\n #\n-#   This program is free software: you can redistribute it and/or modify it\n-#   under the terms of the GNU General Public License as published by the\n-#   Free Software Foundation, either version 3 of the License, or (at your\n-#   option) any later version.\n-#\n-#   This program is distributed in the hope that it will be useful, but\n-#   WITHOUT ANY WARRANTY; without even the implied warranty of\n-#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n-#   Public License for more details.\n-#\n-#   You should have received a copy of the GNU General Public License along\n-#   with this program. If not, see <http://www.gnu.org/licenses/>.\n-#\n-#   As a special exception, the respective Autoconf Macro's copyright owner\n-#   gives unlimited permission to copy, distribute and modify the configure\n-#   scripts that are the output of Autoconf when processing the Macro. You\n-#   need not follow the terms of the GNU General Public License when using\n-#   or distributing such scripts, even though portions of the text of the\n-#   Macro appear in them. The GNU General Public License (GPL) does govern\n-#   all other use of the material that constitutes the Autoconf Macro.\n-#\n-#   This special exception to the GPL applies to versions of the Autoconf\n-#   Macro released by the Autoconf Archive. When you make and distribute a\n-#   modified version of the Autoconf Macro, you may extend this special\n-#   exception to the GPL to apply to your modified version as well.\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n \n-#serial 4\n+#serial 6\n \n AC_DEFUN([AX_CHECK_PREPROC_FLAG],\n [AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF"
      }
    ]
  },
  {
    "sha": "407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
    "node_id": "C_kwDOABII59oAKDQwN2YzYTQ5NWIwZTA0ZGEwY2Q4ZWE0OWRiNDI4NDg0ZmNiNWQyYmY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-09-02T13:08:41Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:02:00Z"
      },
      "message": "build: cleanup AX_CHECK_PREPROC_FLAG() usage\n\nThere should be no functional change.",
      "tree": {
        "sha": "99650a8ecf6f2393669d961ef42fd16fbe301719",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99650a8ecf6f2393669d961ef42fd16fbe301719"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxgACgkQLuufXMCV\nJsEQ0Q//Vt7ptwMBrQsUGi+b2lmsqp9vi9K1NjZVDYVJ/PW1aSdVKh0gYbgHyvuo\nkpj49avwD8LdD4b7VnChXsefwtcm2152PJ9dVMoLe/xPbPZh6ihY8eEynsaLpzGq\nlarf3YB4gAy1AiYGOOW0ci8RUPhmV0CkvyYnwNiOMxUQtucZ8cEwJJXp8xHORzMy\nTP//kFndfsyHFG4fsA7MuOZbNNWYj33lfHnsA0GdyaqSHCL0037Fa5tDw799AN4S\nd3ENGXnmuhopPUFLMW+FHzPT2OM/Nc6YVnoYpxVcjcyI7taZLF2r4bzB/3451WAC\nM336b+OKY/r2ammlgbmUZ7LVsT5A/Kw0vM/KKese36XSS5cbHgjQWfCAxZ9V1TXE\nXCTw6vEq+h097SpPaBfn/IRope5tPume4r1b35UH9H3QR/koDVIoWfeXqOVheBSB\nyV8eS5ojMSRNIrKMEW4JiBk3Do/AoPHd60eKkqjVbhgzuuowKHYYNlcYtDJxElns\nBCm9SgZVEQqKIDV21CzNgp0SHe7vbHfsQMMpeeqkUZqRRRBMseqk8cbRIpuPFHzW\nj21wpNEK5Q37TehQ1lFKCIDWO8ur0EhhMaOO74hDOcFqXLP/zp6br/M2+hERZ54n\nvbQ5OSkLhg9jEP2viTWCwUF6gI9a4dwwTP32ZkwoG38nwWL3Cmk=\n=zj+n\n-----END PGP SIGNATURE-----",
        "payload": "tree 99650a8ecf6f2393669d961ef42fd16fbe301719\nparent b4dba0c6c7619752b9f0ed527d8be4dd528923b1\nauthor fanquake <fanquake@gmail.com> 1630588121 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682520 +0800\n\nbuild: cleanup AX_CHECK_PREPROC_FLAG() usage\n\nThere should be no functional change.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/407f3a495b0e04da0cd8ea49db428484fcb5d2bf/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4dba0c6c7619752b9f0ed527d8be4dd528923b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4dba0c6c7619752b9f0ed527d8be4dd528923b1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bd599f13f5f2940154d7e08c897b698be8103dbc",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/407f3a495b0e04da0cd8ea49db428484fcb5d2bf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/407f3a495b0e04da0cd8ea49db428484fcb5d2bf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
        "patch": "@@ -364,9 +364,9 @@ if test \"x$enable_debug\" = xyes; then\n     [AX_CHECK_COMPILE_FLAG([-g], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -g\"], [], [$CXXFLAG_WERROR])],\n     [$CXXFLAG_WERROR])\n \n-  AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_PREPROC_FLAG([-DDEBUG], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"], [], [$CXXFLAG_WERROR])\n+  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"], [], [$CXXFLAG_WERROR])\n   AX_CHECK_COMPILE_FLAG([-ftrapv], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"], [], [$CXXFLAG_WERROR])\n fi\n \n@@ -1270,7 +1270,7 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   use_zmq=no\n   enable_fuzz_binary=yes\n \n-  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"], [], [$CXXFLAG_WERROR])\n \n   AC_MSG_CHECKING([whether main function is needed for fuzz binary])\n   AX_CHECK_LINK_FLAG(\n@@ -1613,7 +1613,7 @@ if test \"x$use_ccache\" != \"xno\"; then\n   AC_MSG_RESULT($use_ccache)\n   if test \"x$use_ccache\" = \"xyes\"; then\n     AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B], [DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_top_srcdir)=.\"], [], [$CXXFLAG_WERROR])\n-    AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B],[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_top_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n+    AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B], [DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_top_srcdir)=.\"], [], [$CXXFLAG_WERROR])\n   fi\n fi\n "
      }
    ]
  },
  {
    "sha": "05923e7c62eb45eedaa457fda537e93de146a04f",
    "node_id": "C_kwDOABII59oAKDA1OTIzZTdjNjJlYjQ1ZWVkYWE0NTdmZGE1MzdlOTNkZTE0NmEwNGY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-07T11:18:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:02:00Z"
      },
      "message": "build: AC_PATH_PROG(S) consistently quote arguments",
      "tree": {
        "sha": "0d2b5fcd6e805776fc6223b641432091cd6ae7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d2b5fcd6e805776fc6223b641432091cd6ae7cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05923e7c62eb45eedaa457fda537e93de146a04f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxgACgkQLuufXMCV\nJsG+fhAApqTPrX3DCq0OjmBVGgL19lZ70TRJE35lcC3iri2LztQzIA1kQ7PpB3GB\nBAsH6jaLjMZiljS7SKLBBSmP+EZFeG3XGm3LMYYSqKAkQa/NyZJmhsSKxFBBTyvR\ncDAArIJ6n7pLVfrBJJ//8KSWU2KpokS4Sto5RumrQKYQBXWQJktE2M53Pn91dRF+\nZRcsMjHU2nIsvz3k2OIj1oaNd9SohUE1kAJcl02AzTKrgSpXgM5XbaEKmzGufNp4\nEy2lwFrs5QyB9v3zIT1qGKBxdMzsTqur4mkcNah5B78GUnXYQJyX4gHFjiGP917P\nkHYsTUWRUnHZBHg7Fs2Y6wTpSD8xvvdc4PLfYolj7k36hFYJYKCpdValGhrsH9JA\nXAIEZsJhOU6UJumlNCh92HxtQmTN3/ilXS0L2idM9e8RtgDHiryOObACTbfJIrd+\n/mCFBHkAREWbuxWbOcVcTCe8ilzvuOPowD/IIEO0nJNaNgHIDzcSY6l6WJiem8Ev\nag0cTubz9vZUTIljNXQwflsZDF3yzEIzt/K6ljH3if7QomCc9Zw8h2SL5klvoScQ\n/P323tLLyLOdFcHS253wXtSIXM2WT0b4ONg/3pnWwTZQXyPAJT+mDV7u9HH5ilcb\nMOviHFhqglDL6jC6TUwleGlRAU/+Vx/BhiuBlcA1dpfQZyMTCe8=\n=hyQP\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d2b5fcd6e805776fc6223b641432091cd6ae7cf\nparent 407f3a495b0e04da0cd8ea49db428484fcb5d2bf\nauthor fanquake <fanquake@gmail.com> 1633605494 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682520 +0800\n\nbuild: AC_PATH_PROG(S) consistently quote arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05923e7c62eb45eedaa457fda537e93de146a04f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05923e7c62eb45eedaa457fda537e93de146a04f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05923e7c62eb45eedaa457fda537e93de146a04f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/407f3a495b0e04da0cd8ea49db428484fcb5d2bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/407f3a495b0e04da0cd8ea49db428484fcb5d2bf"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7ea165e0a0795013557a0017e54268433e6c44c6",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05923e7c62eb45eedaa457fda537e93de146a04f/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05923e7c62eb45eedaa457fda537e93de146a04f/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=05923e7c62eb45eedaa457fda537e93de146a04f",
        "patch": "@@ -36,9 +36,9 @@ dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n   BITCOIN_QT_CHECK([\n     if test \"x$3\" != x; then\n-      AC_PATH_PROGS($1,$2,,$3)\n+      AC_PATH_PROGS([$1], [$2], [], [$3])\n     else\n-      AC_PATH_PROGS($1,$2)\n+      AC_PATH_PROGS([$1], [$2])\n     fi\n     if test \"x$$1\" = x && test \"x$4\" != xyes; then\n       BITCOIN_QT_FAIL([$1 not found])"
      },
      {
        "sha": "097d6e58ffd27aaee8c461d616d43afe5f687131",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05923e7c62eb45eedaa457fda537e93de146a04f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05923e7c62eb45eedaa457fda537e93de146a04f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=05923e7c62eb45eedaa457fda537e93de146a04f",
        "patch": "@@ -105,16 +105,16 @@ AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_TOOL(LLVM_COV, llvm-cov)\n-AC_PATH_PROG(LCOV, lcov)\n+AC_PATH_PROG([LCOV], [lcov])\n dnl Python 3.6 is specified in .python-version and should be used if available, see doc/dependencies.md\n AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9 python3.10 python3.11 python3 python])\n-AC_PATH_PROG(GENHTML, genhtml)\n+AC_PATH_PROG([GENHTML], [genhtml])\n AC_PATH_PROG([GIT], [git])\n-AC_PATH_PROG(CCACHE,ccache)\n-AC_PATH_PROG(XGETTEXT,xgettext)\n-AC_PATH_PROG(HEXDUMP,hexdump)\n+AC_PATH_PROG([CCACHE], [ccache])\n+AC_PATH_PROG([XGETTEXT], [xgettext])\n+AC_PATH_PROG([HEXDUMP], [hexdump])\n AC_PATH_TOOL(OBJCOPY, objcopy)\n-AC_PATH_PROG(DOXYGEN, doxygen)\n+AC_PATH_PROG([DOXYGEN], [doxygen])\n AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n@@ -647,7 +647,7 @@ case $host in\n      dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([-static], [LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n-     AC_PATH_PROG([MAKENSIS], [makensis], none)\n+     AC_PATH_PROG([MAKENSIS], [makensis], [none])\n      if test x$MAKENSIS = xnone; then\n        AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n      fi\n@@ -674,7 +674,7 @@ case $host in\n      TARGET_OS=darwin\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n-       AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n+       AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg], [rsvg-convert])\n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n          dnl These Homebrew packages may be keg-only, meaning that they won't be found\n@@ -734,11 +734,11 @@ case $host in\n            AC_PATH_TOOL([DSYMUTIL], [dsymutil], dsymutil)\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n-           AC_PATH_PROGS([XORRISOFS], [xorrisofs], xorrisofs)\n-           AC_PATH_PROGS([DMG], [dmg], dmg)\n-           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n-           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n-           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n+           AC_PATH_PROGS([XORRISOFS], [xorrisofs], [xorrisofs])\n+           AC_PATH_PROGS([DMG], [dmg], [dmg])\n+           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg], [rsvg-convert])\n+           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert], [convert])\n+           AC_PATH_PROGS([TIFFCP], [tiffcp], [tiffcp])\n \n            dnl libtool will try to strip the static lib, which is a problem for\n            dnl cross-builds because strip attempts to call a hard-coded ld,"
      }
    ]
  },
  {
    "sha": "50d99f202d8ed0a699870f82d8f823a69eb16189",
    "node_id": "C_kwDOABII59oAKDUwZDk5ZjIwMmQ4ZWQwYTY5OTg3MGY4MmQ4ZjgyM2E2OWViMTYxODk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-07T11:37:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:02:00Z"
      },
      "message": "build: consistently quote AC_PATH_TOOL arguments",
      "tree": {
        "sha": "2029bd98483f535f9643381d7c9382bdf6b5298d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2029bd98483f535f9643381d7c9382bdf6b5298d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50d99f202d8ed0a699870f82d8f823a69eb16189",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNyxgACgkQLuufXMCV\nJsFzGxAAq+K4FhS6SFSYk1ALOORJlD/mWvTSAIfyVy0zcIeyBjak5+72zsf6Mqh2\nJfFQQ3Qunu6OVXlfV7sMZRvxNOAReEwvN0sU/w+PeNbrA8gF4KOWqbmLEogoFRB0\nsWYj0gx4xZusQIkEwHPRlX1fLpS+ZXZiDIu9BrKIiXVAb+ghDoO7xek8Trf7k4bi\nc3uH50hRv1GDKb5TdJW88mQRMYsj60Q2jpdvlKzpCvFW8yzVw7w+TbelGhnhbK4v\naIDCU7qmSQRYadxheqXNTS+zYhgk5KpJFPFi0JsfglvcKGe5KVvWCTcdUBEBZZMs\nuE9WjKr8BRzped7iJFpgZCrHm6lX+pNxLQv6ten72auzO/wUMFMLHu6cMfYLK1pX\nwdufQeTDzKDF3/jTIvMW0RaJMEHHlGqP3gj0PTaeth2SaC+gNsQ8ALCBlEgKiCV1\noq2ONv1Sb8/RvT+NfEaL6kb7/9L4zKkJnJ+1udEkXEQ4co04sBmlhzTxQTF1p4T9\nBN8dsDVvzIWW5UkO+xX6z+i8xbrnURnJe5bqy8eA5Q87rBGn+VYTTdvMk3DQ7DS4\nriq4LL8njAfAEa0Xmqhf6ue+o/GFXYllXBfhcL47HMT9qCoUgCgvBdxylCfVDpPT\nCptGSQQRAU7mjdvzUvWlhTiVS3iSuH5PHecNtFEo1ARwmtCUwr0=\n=92gs\n-----END PGP SIGNATURE-----",
        "payload": "tree 2029bd98483f535f9643381d7c9382bdf6b5298d\nparent 05923e7c62eb45eedaa457fda537e93de146a04f\nauthor fanquake <fanquake@gmail.com> 1633606630 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682520 +0800\n\nbuild: consistently quote AC_PATH_TOOL arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d99f202d8ed0a699870f82d8f823a69eb16189",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50d99f202d8ed0a699870f82d8f823a69eb16189",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d99f202d8ed0a699870f82d8f823a69eb16189/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05923e7c62eb45eedaa457fda537e93de146a04f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05923e7c62eb45eedaa457fda537e93de146a04f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05923e7c62eb45eedaa457fda537e93de146a04f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8b38a8212fe44a62b425e0541fc172c50cc953a8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50d99f202d8ed0a699870f82d8f823a69eb16189/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50d99f202d8ed0a699870f82d8f823a69eb16189/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=50d99f202d8ed0a699870f82d8f823a69eb16189",
        "patch": "@@ -100,11 +100,11 @@ dnl Libtool init checks.\n LT_INIT([pic-only])\n \n dnl Check/return PATH for base programs.\n-AC_PATH_TOOL(AR, ar)\n-AC_PATH_TOOL(RANLIB, ranlib)\n-AC_PATH_TOOL(STRIP, strip)\n-AC_PATH_TOOL(GCOV, gcov)\n-AC_PATH_TOOL(LLVM_COV, llvm-cov)\n+AC_PATH_TOOL([AR], [ar])\n+AC_PATH_TOOL([RANLIB], [ranlib])\n+AC_PATH_TOOL([STRIP], [strip])\n+AC_PATH_TOOL([GCOV], [gcov])\n+AC_PATH_TOOL([LLVM_COV], [llvm-cov])\n AC_PATH_PROG([LCOV], [lcov])\n dnl Python 3.6 is specified in .python-version and should be used if available, see doc/dependencies.md\n AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9 python3.10 python3.11 python3 python])\n@@ -113,7 +113,7 @@ AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG([CCACHE], [ccache])\n AC_PATH_PROG([XGETTEXT], [xgettext])\n AC_PATH_PROG([HEXDUMP], [hexdump])\n-AC_PATH_TOOL(OBJCOPY, objcopy)\n+AC_PATH_TOOL([OBJCOPY], [objcopy])\n AC_PATH_PROG([DOXYGEN], [doxygen])\n AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n@@ -652,7 +652,7 @@ case $host in\n        AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n      fi\n \n-     AC_PATH_TOOL(WINDRES, windres, none)\n+     AC_PATH_TOOL([WINDRES], [windres], [none])\n      if test x$WINDRES = xnone; then\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n@@ -731,9 +731,9 @@ case $host in\n            BUILD_OS=darwin\n            ;;\n          *)\n-           AC_PATH_TOOL([DSYMUTIL], [dsymutil], dsymutil)\n-           AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n-           AC_PATH_TOOL([OTOOL], [otool], otool)\n+           AC_PATH_TOOL([DSYMUTIL], [dsymutil], [dsymutil])\n+           AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], [install_name_tool])\n+           AC_PATH_TOOL([OTOOL], [otool], [otool])\n            AC_PATH_PROGS([XORRISOFS], [xorrisofs], [xorrisofs])\n            AC_PATH_PROGS([DMG], [dmg], [dmg])\n            AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg], [rsvg-convert])"
      }
    ]
  },
  {
    "sha": "a17a3f9d6289233f8bf32264216a90ad15381446",
    "node_id": "C_kwDOABII59oAKGExN2EzZjlkNjI4OTIzM2Y4YmYzMjI2NDIxNmE5MGFkMTUzODE0NDY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-10-08T00:13:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T02:05:36Z"
      },
      "message": "build: consistently quote AC_MSG_CHECKING() arguments",
      "tree": {
        "sha": "f5b9aa4a7bba13baeb9e3bcb57c7c32bdb7074ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5b9aa4a7bba13baeb9e3bcb57c7c32bdb7074ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a17a3f9d6289233f8bf32264216a90ad15381446",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGNy/MACgkQLuufXMCV\nJsG0UxAAoua88g1MADrr+8Y+yTK+MI4wUGOxXvXKyFVZ74CQbY3UwyIDca2TUd71\nDuqffjhaciJU/1cfhLKrcD3XYrBM/eZanfTeselM5op2Z1Huc6WxwlxZSI1gRg/a\ng/vRSpSG52/x+of7c2s2N62q8alSjYS9Er/TaClfaj5+BN9+InJBDCvqvNYKPHpr\nl/x75B3sjO3msoCIw8tF8jTHEXZnGDKsgEbzkIH1ldW+oMG3JpPMUUpczZrLREoU\nYfmaSeKJdWceLqrIXs9JoTl3hCoETyC7lLWt1Cu08XGOGIZjzqLiB8DgT+AOp0Bj\nJ7+EDC9bwB1QLB1uVU4YvnvzUATHOKqzTIXiqMwA8ilcKuMXBHDNDHyWOHNpRdQn\ndSVr2BN9KC9hDRf3eREDxs8Qcv8edQWw0sUFSxz51tDUifHTrNNjf2iBSdjWLJDv\nGpLdC893Em+/seWQeQoQq0m/x8D+gHwbb8mAexHU1El9Y4dO08GJFTAU7nQxF59u\nhcovjhMQLM+WSdkRvoRIWolRLBASt1vlOcyIDd/lS1ZRBwmig5jPoxgSsg0aUWOQ\nU4xuX3k0IUerNCeQFgV8KhPKB60IRh3/DeaLJB/R9fgnWutO1mRBxtCsmmpKrayq\n3ZF56uoa24vuAN05Zm3DBUZdW0kQcerIb8xiCZay4CjFzjMMaNM=\n=v1dR\n-----END PGP SIGNATURE-----",
        "payload": "tree f5b9aa4a7bba13baeb9e3bcb57c7c32bdb7074ee\nparent 50d99f202d8ed0a699870f82d8f823a69eb16189\nauthor fanquake <fanquake@gmail.com> 1633652016 +0800\ncommitter fanquake <fanquake@gmail.com> 1636682736 +0800\n\nbuild: consistently quote AC_MSG_CHECKING() arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a3f9d6289233f8bf32264216a90ad15381446",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a17a3f9d6289233f8bf32264216a90ad15381446",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a3f9d6289233f8bf32264216a90ad15381446/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50d99f202d8ed0a699870f82d8f823a69eb16189",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50d99f202d8ed0a699870f82d8f823a69eb16189",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50d99f202d8ed0a699870f82d8f823a69eb16189"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "91b19879037eddc866eac71dded62c3c6aa18998",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a17a3f9d6289233f8bf32264216a90ad15381446/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a17a3f9d6289233f8bf32264216a90ad15381446/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=a17a3f9d6289233f8bf32264216a90ad15381446",
        "patch": "@@ -176,7 +176,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n   if test \"x$use_hardening\" != xno; then\n     BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n+    AC_MSG_CHECKING([whether -fPIE can be used with this Qt config])\n     TEMP_CPPFLAGS=$CPPFLAGS\n     TEMP_CXXFLAGS=$CXXFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n@@ -200,7 +200,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     ])\n   else\n     BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n+    AC_MSG_CHECKING([whether -fPIC is needed with this Qt config])\n     TEMP_CPPFLAGS=$CPPFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([["
      },
      {
        "sha": "6b080de143b5c9e7a02a1845017b89a3a7945b0c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 26,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a17a3f9d6289233f8bf32264216a90ad15381446/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a17a3f9d6289233f8bf32264216a90ad15381446/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a17a3f9d6289233f8bf32264216a90ad15381446",
        "patch": "@@ -490,7 +490,7 @@ fi\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SSE42_CXXFLAGS\"\n-AC_MSG_CHECKING(for SSE4.2 intrinsics)\n+AC_MSG_CHECKING([for SSE4.2 intrinsics])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <stdint.h>\n     #if defined(_MSC_VER)\n@@ -512,7 +512,7 @@ CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SSE41_CXXFLAGS\"\n-AC_MSG_CHECKING(for SSE4.1 intrinsics)\n+AC_MSG_CHECKING([for SSE4.1 intrinsics])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <stdint.h>\n     #include <immintrin.h>\n@@ -527,7 +527,7 @@ CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $AVX2_CXXFLAGS\"\n-AC_MSG_CHECKING(for AVX2 intrinsics)\n+AC_MSG_CHECKING([for AVX2 intrinsics])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <stdint.h>\n     #include <immintrin.h>\n@@ -542,7 +542,7 @@ CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $SHANI_CXXFLAGS\"\n-AC_MSG_CHECKING(for SHA-NI intrinsics)\n+AC_MSG_CHECKING([for SHA-NI intrinsics])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <stdint.h>\n     #include <immintrin.h>\n@@ -562,7 +562,7 @@ AX_CHECK_COMPILE_FLAG([-march=armv8-a+crc+crypto], [ARM_CRC_CXXFLAGS=\"-march=arm\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $ARM_CRC_CXXFLAGS\"\n-AC_MSG_CHECKING(for AArch64 CRC32 intrinsics)\n+AC_MSG_CHECKING([for AArch64 CRC32 intrinsics])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <arm_acle.h>\n     #include <arm_neon.h>\n@@ -967,16 +967,15 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n-AC_MSG_CHECKING(for __builtin_clzl)\n-\n+AC_MSG_CHECKING([for __builtin_clzl])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n  (void) __builtin_clzl(0);\n   ]])],\n  [ AC_MSG_RESULT(yes); have_clzl=yes; AC_DEFINE(HAVE_BUILTIN_CLZL, 1, [Define this symbol if you have __builtin_clzl])],\n  [ AC_MSG_RESULT(no); have_clzl=no;]\n )\n \n-AC_MSG_CHECKING(for __builtin_clzll)\n+AC_MSG_CHECKING([for __builtin_clzll])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n   (void) __builtin_clzll(0);\n   ]])],\n@@ -985,23 +984,23 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n )\n \n dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n-AC_MSG_CHECKING(for getmemoryinfo)\n+AC_MSG_CHECKING([for getmemoryinfo])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ int f = malloc_info(0, NULL); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOC_INFO, 1,[Define this symbol if you have malloc_info]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n dnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\n-AC_MSG_CHECKING(for mallopt M_ARENA_MAX)\n+AC_MSG_CHECKING([for mallopt M_ARENA_MAX])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ mallopt(M_ARENA_MAX, 1); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n dnl Check for posix_fallocate\n-AC_MSG_CHECKING(for posix_fallocate)\n+AC_MSG_CHECKING([for posix_fallocate])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                    // same as in src/util/system.cpp\n                    #ifdef __linux__\n@@ -1089,12 +1088,12 @@ fi\n \n dnl check for gmtime_r(), fallback to gmtime_s() if that is unavailable\n dnl fail if neither are available.\n-AC_MSG_CHECKING(for gmtime_r)\n+AC_MSG_CHECKING([for gmtime_r])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n   [[ gmtime_r((const time_t *) nullptr, (struct tm *) nullptr); ]])],\n   [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GMTIME_R, 1, [Define this symbol if gmtime_r is available]) ],\n   [ AC_MSG_RESULT(no);\n-    AC_MSG_CHECKING(for gmtime_s);\n+    AC_MSG_CHECKING([for gmtime_s]);\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n        [[ gmtime_s((struct tm *) nullptr, (const time_t *) nullptr); ]])],\n        [ AC_MSG_RESULT(yes)],\n@@ -1104,7 +1103,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n )\n \n dnl Check for different ways of gathering OS randomness\n-AC_MSG_CHECKING(for Linux getrandom syscall)\n+AC_MSG_CHECKING([for Linux getrandom syscall])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n   #include <linux/random.h>]],\n@@ -1113,22 +1112,22 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for getentropy)\n+AC_MSG_CHECKING([for getentropy])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY, 1,[Define this symbol if the BSD getentropy system call is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for getentropy via random.h)\n+AC_MSG_CHECKING([for getentropy via random.h])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  #include <sys/random.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY_RAND, 1,[Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for sysctl)\n+AC_MSG_CHECKING([for sysctl])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n  [[ #ifdef __linux__\n@@ -1139,7 +1138,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for sysctl KERN_ARND)\n+AC_MSG_CHECKING([for sysctl KERN_ARND])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],\n  [[ #ifdef __linux__\n@@ -1151,30 +1150,30 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for if type char equals int8_t)\n+AC_MSG_CHECKING([for if type char equals int8_t])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n   #include <type_traits>]],\n  [[ static_assert(std::is_same<int8_t, char>::value, \"\"); ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(CHAR_EQUALS_INT8, 1,[Define this symbol if type char equals int8_t]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n-AC_MSG_CHECKING(for fdatasync)\n+AC_MSG_CHECKING([for fdatasync])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ fdatasync(0); ]])],\n  [ AC_MSG_RESULT(yes); HAVE_FDATASYNC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_FDATASYNC=0 ]\n )\n AC_DEFINE_UNQUOTED([HAVE_FDATASYNC], [$HAVE_FDATASYNC], [Define to 1 if fdatasync is available.])\n \n-AC_MSG_CHECKING(for F_FULLFSYNC)\n+AC_MSG_CHECKING([for F_FULLFSYNC])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [[ fcntl(0, F_FULLFSYNC, 0); ]])],\n  [ AC_MSG_RESULT(yes); HAVE_FULLFSYNC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_FULLFSYNC=0 ]\n )\n \n-AC_MSG_CHECKING(for O_CLOEXEC)\n+AC_MSG_CHECKING([for O_CLOEXEC])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [[ open(\"\", O_CLOEXEC); ]])],\n  [ AC_MSG_RESULT(yes); HAVE_O_CLOEXEC=1 ],\n@@ -1183,7 +1182,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n AC_DEFINE_UNQUOTED([HAVE_O_CLOEXEC], [$HAVE_O_CLOEXEC], [Define to 1 if O_CLOEXEC flag is available.])\n \n dnl crc32c platform checks\n-AC_MSG_CHECKING(for __builtin_prefetch)\n+AC_MSG_CHECKING([for __builtin_prefetch])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n   char data = 0;\n   const char* address = &data;\n@@ -1193,7 +1192,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n  [ AC_MSG_RESULT(no); HAVE_BUILTIN_PREFETCH=0 ]\n )\n \n-AC_MSG_CHECKING(for _mm_prefetch)\n+AC_MSG_CHECKING([for _mm_prefetch])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <xmmintrin.h>]], [[\n   char data = 0;\n   const char* address = &data;\n@@ -1203,7 +1202,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <xmmintrin.h>]], [[\n  [ AC_MSG_RESULT(no); HAVE_MM_PREFETCH=0 ]\n )\n \n-AC_MSG_CHECKING(for strong getauxval support in the system headers)\n+AC_MSG_CHECKING([for strong getauxval support in the system headers])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <sys/auxv.h>\n   ]], [[\n@@ -1598,7 +1597,7 @@ AC_MSG_RESULT($build_bitcoin_libs)\n AC_LANG_POP\n \n if test \"x$use_ccache\" != \"xno\"; then\n-  AC_MSG_CHECKING(if ccache should be used)\n+  AC_MSG_CHECKING([if ccache should be used])\n   if test x$CCACHE = x; then\n     if test \"x$use_ccache\" = \"xyes\"; then\n       AC_MSG_ERROR([ccache not found.]);"
      }
    ]
  },
  {
    "sha": "cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
    "node_id": "C_kwDOABII59oAKGNkYjQ3ZTE4Yjc3NmIyNmZlNmQ4YTBmZWFhNzM0ZjY1YTgxYjY3Njk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-09T06:03:42Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:31:55Z"
      },
      "message": "build: consistently quote AC_DEFINE() arguments",
      "tree": {
        "sha": "849c63c25f655977b410dd0ba32e0f596128f6e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/849c63c25f655977b410dd0ba32e0f596128f6e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOClwACgkQLuufXMCV\nJsHObQ//QiX6TtBmMDVY+ED5dt0peSlkco//VQACSYmOF9fgM8npjEtTF4X8JALV\n93rw0UGxVxD6fTz0BFyAvptwXJC0gxBQudEvh5hy4wlr4x4eu2l2QkcalCFeWcTY\nq79EifrqU3EGtt9gmA/P1KZkp2VbYfidqK8n7oTyisuxqcq6JjJKTPDWK94jWkhS\ngOs1Ko9nhxdJm3mXJlgktKtTq9o9bM5WrUK/IZJKUFR3jQB62yOtvjuuMyEQr4zN\nKogXml/uC5+x4GcJwuGRWUQAMdR7tiZaLEw9PT3c3vlN66BrbVIDy5/3WqTpGw0H\n/DaEEuqmw8yX+0bgv1aoMVboB4o3XlW7To5f6wEbkJQwSwauzWgvtkN6CDmHMv8I\nMPpH5zqI6nt+h3bG8s7SfAR+DtGxMRMg+bO8iFaDTaTB9UzaqMTCbm8ShbhUXdAo\n7ByVGUxeaHmpgIlojPp1MQyqwMEejn+9n9bDclK9sFuMTm1DASaBWjA5BshvIS7G\n/bvHX0oVE8bbEeRZ5ayxXRu5Z49Hfv3H6Nfs7znxm5Jlo5KRTYqqAUgLqq08vFyQ\n5rIXYPDnbm2Ln2jm5bxS1hXFhaVfS5D2fkRta1U77o3DWC49sGuMfQ6A7amBKKDu\nhn2UP2T7YpdAeqE/RE9n3qAprXoxPBQsgC+Sk+4LItMydsfxg3M=\n=0tsL\n-----END PGP SIGNATURE-----",
        "payload": "tree 849c63c25f655977b410dd0ba32e0f596128f6e6\nparent a17a3f9d6289233f8bf32264216a90ad15381446\nauthor fanquake <fanquake@gmail.com> 1636437822 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698715 +0800\n\nbuild: consistently quote AC_DEFINE() arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb47e18b776b26fe6d8a0feaa734f65a81b6769/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a17a3f9d6289233f8bf32264216a90ad15381446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a17a3f9d6289233f8bf32264216a90ad15381446",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a17a3f9d6289233f8bf32264216a90ad15381446"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "969000ca8d2adefbde9ea8b6a0852398a079329b",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdb47e18b776b26fe6d8a0feaa734f65a81b6769/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdb47e18b776b26fe6d8a0feaa734f65a81b6769/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
        "patch": "@@ -136,34 +136,34 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       fi\n     fi\n \n-    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n+    AC_DEFINE([QT_STATICPLUGIN], [1], [Define this symbol if qt plugins are static])\n     if test \"x$TARGET_OS\" != xandroid; then\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n-      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+      AC_DEFINE([QT_QPA_PLATFORM_MINIMAL], [1], [Define this symbol if the minimal qt platform exists])\n     fi\n     if test \"x$TARGET_OS\" = xwindows; then\n       dnl Linking against wtsapi32 is required. See #17749 and\n       dnl https://bugreports.qt.io/browse/QTBUG-27097.\n       AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n-      AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n+      AC_DEFINE([QT_QPA_PLATFORM_WINDOWS], [1], [Define this symbol if the qt platform is windows])\n     elif test \"x$TARGET_OS\" = xlinux; then\n       dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n       AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n-      AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n+      AC_DEFINE([QT_QPA_PLATFORM_XCB], [1], [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n       AX_CHECK_LINK_FLAG([-framework Carbon], [QT_LIBS=\"$QT_LIBS -framework Carbon\"], [AC_MSG_ERROR(could not link against Carbon framework)])\n       AX_CHECK_LINK_FLAG([-framework IOSurface], [QT_LIBS=\"$QT_LIBS -framework IOSurface\"], [AC_MSG_ERROR(could not link against IOSurface framework)])\n       AX_CHECK_LINK_FLAG([-framework Metal], [QT_LIBS=\"$QT_LIBS -framework Metal\"], [AC_MSG_ERROR(could not link against Metal framework)])\n       AX_CHECK_LINK_FLAG([-framework QuartzCore], [QT_LIBS=\"$QT_LIBS -framework QuartzCore\"], [AC_MSG_ERROR(could not link against QuartzCore framework)])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n       _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n-      AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n+      AC_DEFINE([QT_QPA_PLATFORM_COCOA], [1], [Define this symbol if the qt platform is cocoa])\n     elif test \"x$TARGET_OS\" = xandroid; then\n       QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n-      AC_DEFINE(QT_QPA_PLATFORM_ANDROID, 1, [Define this symbol if the qt platform is android])\n+      AC_DEFINE([QT_QPA_PLATFORM_ANDROID], [1], [Define this symbol if the qt platform is android])\n     fi\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS"
      },
      {
        "sha": "494713b9d57a86fca2c6c3cb8c31b79d612e5962",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdb47e18b776b26fe6d8a0feaa734f65a81b6769/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdb47e18b776b26fe6d8a0feaa734f65a81b6769/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
        "patch": "@@ -258,7 +258,7 @@ AC_ARG_ENABLE([asm],\n   [use_asm=yes])\n \n if test \"x$use_asm\" = xyes; then\n-  AC_DEFINE(USE_ASM, 1, [Define this symbol to build in assembly routines])\n+  AC_DEFINE([USE_ASM], [1], [Define this symbol to build in assembly routines])\n fi\n \n AC_ARG_ENABLE([zmq],\n@@ -485,7 +485,7 @@ AX_CHECK_COMPILE_FLAG([-mpclmul], [enable_clmul=yes], [], [$CXXFLAG_WERROR], [AC\n \n if test x$enable_clmul = xyes; then\n   CLMUL_CXXFLAGS=\"-mpclmul\"\n-  AC_DEFINE(HAVE_CLMUL, 1, [Define this symbol if clmul instructions can be used])\n+  AC_DEFINE([HAVE_CLMUL], [1], [Define this symbol if clmul instructions can be used])\n fi\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n@@ -520,7 +520,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m128i l = _mm_set1_epi32(0);\n     return _mm_extract_epi32(l, 3);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_sse41=yes; AC_DEFINE(ENABLE_SSE41, 1, [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n+ [ AC_MSG_RESULT(yes); enable_sse41=yes; AC_DEFINE([ENABLE_SSE41], [1], [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n  [ AC_MSG_RESULT(no)]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n@@ -535,7 +535,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m256i l = _mm256_set1_epi32(0);\n     return _mm256_extract_epi32(l, 7);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_avx2=yes; AC_DEFINE(ENABLE_AVX2, 1, [Define this symbol to build code that uses AVX2 intrinsics]) ],\n+ [ AC_MSG_RESULT(yes); enable_avx2=yes; AC_DEFINE([ENABLE_AVX2], [1], [Define this symbol to build code that uses AVX2 intrinsics]) ],\n  [ AC_MSG_RESULT(no)]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n@@ -552,7 +552,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m128i k = _mm_set1_epi32(2);\n     return _mm_extract_epi32(_mm_sha256rnds2_epu32(i, i, k), 0);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_shani=yes; AC_DEFINE(ENABLE_SHANI, 1, [Define this symbol to build code that uses SHA-NI intrinsics]) ],\n+ [ AC_MSG_RESULT(yes); enable_shani=yes; AC_DEFINE([ENABLE_SHANI], [1], [Define this symbol to build code that uses SHA-NI intrinsics]) ],\n  [ AC_MSG_RESULT(no)]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n@@ -971,31 +971,31 @@ AC_MSG_CHECKING([for __builtin_clzl])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n  (void) __builtin_clzl(0);\n   ]])],\n- [ AC_MSG_RESULT(yes); have_clzl=yes; AC_DEFINE(HAVE_BUILTIN_CLZL, 1, [Define this symbol if you have __builtin_clzl])],\n+ [ AC_MSG_RESULT(yes); have_clzl=yes; AC_DEFINE([HAVE_BUILTIN_CLZL], [1], [Define this symbol if you have __builtin_clzl])],\n  [ AC_MSG_RESULT(no); have_clzl=no;]\n )\n \n AC_MSG_CHECKING([for __builtin_clzll])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n   (void) __builtin_clzll(0);\n   ]])],\n- [ AC_MSG_RESULT(yes); have_clzll=yes; AC_DEFINE(HAVE_BUILTIN_CLZLL, 1, [Define this symbol if you have __builtin_clzll])],\n+ [ AC_MSG_RESULT(yes); have_clzll=yes; AC_DEFINE([HAVE_BUILTIN_CLZLL], [1], [Define this symbol if you have __builtin_clzll])],\n  [ AC_MSG_RESULT(no); have_clzll=no;]\n )\n \n dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n AC_MSG_CHECKING([for getmemoryinfo])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ int f = malloc_info(0, NULL); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOC_INFO, 1,[Define this symbol if you have malloc_info]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_MALLOC_INFO], [1], [Define this symbol if you have malloc_info]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n dnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\n AC_MSG_CHECKING([for mallopt M_ARENA_MAX])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ mallopt(M_ARENA_MAX, 1); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_MALLOPT_ARENA_MAX], [1], [Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n@@ -1011,7 +1011,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                    #endif // __linux__\n                    #include <fcntl.h>]],\n                    [[ int f = posix_fallocate(0, 0, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_POSIX_FALLOCATE, 1,[Define this symbol if you have posix_fallocate]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_POSIX_FALLOCATE], [1], [Define this symbol if you have posix_fallocate]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n@@ -1021,7 +1021,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   int main(){}\n   ])],\n   [\n-    AC_DEFINE(HAVE_DEFAULT_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n+    AC_DEFINE([HAVE_DEFAULT_VISIBILITY_ATTRIBUTE], [1], [Define if the visibility attribute is supported.])\n     AC_MSG_RESULT(yes)\n   ],\n   [\n@@ -1038,7 +1038,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   int main(){}\n   ])],\n   [\n-    AC_DEFINE(HAVE_DLLEXPORT_ATTRIBUTE,1,[Define if the dllexport attribute is supported.])\n+    AC_DEFINE([HAVE_DLLEXPORT_ATTRIBUTE], [1], [Define if the dllexport attribute is supported.])\n     AC_MSG_RESULT(yes)\n   ],\n   [AC_MSG_RESULT(no)]\n@@ -1074,7 +1074,7 @@ if test \"x$use_thread_local\" = xyes || test \"x$use_thread_local\" = xauto; then\n           AC_MSG_RESULT(no)\n           ;;\n         *)\n-          AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+          AC_DEFINE([HAVE_THREAD_LOCAL], [1], [Define if thread_local is supported.])\n           AC_MSG_RESULT(yes)\n           ;;\n       esac\n@@ -1091,7 +1091,7 @@ dnl fail if neither are available.\n AC_MSG_CHECKING([for gmtime_r])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n   [[ gmtime_r((const time_t *) nullptr, (struct tm *) nullptr); ]])],\n-  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GMTIME_R, 1, [Define this symbol if gmtime_r is available]) ],\n+  [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GMTIME_R], [1], [Define this symbol if gmtime_r is available]) ],\n   [ AC_MSG_RESULT(no);\n     AC_MSG_CHECKING([for gmtime_s]);\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n@@ -1108,22 +1108,22 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n   #include <linux/random.h>]],\n  [[ syscall(SYS_getrandom, nullptr, 32, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYS_GETRANDOM, 1,[Define this symbol if the Linux getrandom system call is available]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYS_GETRANDOM], [1], [Define this symbol if the Linux getrandom system call is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n AC_MSG_CHECKING([for getentropy])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY, 1,[Define this symbol if the BSD getentropy system call is available]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GETENTROPY], [1], [Define this symbol if the BSD getentropy system call is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n AC_MSG_CHECKING([for getentropy via random.h])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  #include <sys/random.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY_RAND, 1,[Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GETENTROPY_RAND], [1], [Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n@@ -1134,7 +1134,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n     #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n     #endif\n     sysctl(nullptr, 2, nullptr, nullptr, nullptr, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL, 1,[Define this symbol if the BSD sysctl() is available]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYSCTL], [1], [Define this symbol if the BSD sysctl() is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n@@ -1146,15 +1146,15 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n     #endif\n     static int name[2] = {CTL_KERN, KERN_ARND};\n     sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYSCTL_ARND], [1], [Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n AC_MSG_CHECKING([for if type char equals int8_t])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n   #include <type_traits>]],\n  [[ static_assert(std::is_same<int8_t, char>::value, \"\"); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(CHAR_EQUALS_INT8, 1,[Define this symbol if type char equals int8_t]) ],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE([CHAR_EQUALS_INT8], [1], [Define this symbol if type char equals int8_t]) ],\n  [ AC_MSG_RESULT(no)]\n )\n \n@@ -1208,7 +1208,7 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE(HAVE_STRONG_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval)]) ],\n+ [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE([HAVE_STRONG_GETAUXVAL], [1], [Define this symbol to build code that uses getauxval)]) ],\n  [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n@@ -1234,7 +1234,7 @@ AC_LINK_IFELSE(\n )\n \n if test \"x$have_any_system\" != \"xno\"; then\n-  AC_DEFINE(HAVE_SYSTEM, 1, Define to 1 if std::system or ::wsystem is available.)\n+  AC_DEFINE([HAVE_SYSTEM], [1], [Define to 1 if std::system or ::wsystem is available.])\n fi\n \n dnl SUPPRESSED_CPPFLAGS=SUPPRESS_WARNINGS([$SOME_CPPFLAGS])\n@@ -1412,7 +1412,7 @@ if test x$use_boost = xyes; then\n fi\n \n if test \"x$use_external_signer\" != xno; then\n-  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n+  AC_DEFINE([ENABLE_EXTERNAL_SIGNER], [], [Define if external signer support is enabled])\n fi\n AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n \n@@ -1434,7 +1434,7 @@ if test \"x$seccomp_found\" != \"xno\"; then\n     ]])],[\n       AC_MSG_RESULT(yes)\n       seccomp_found=\"yes\"\n-      AC_DEFINE(USE_SYSCALL_SANDBOX, 1, [Define this symbol to build with syscall sandbox support.])\n+      AC_DEFINE([USE_SYSCALL_SANDBOX], [1], [Define this symbol to build with syscall sandbox support.])\n     ],[\n       AC_MSG_RESULT(no)\n       seccomp_found=\"no\"\n@@ -1589,7 +1589,7 @@ AC_MSG_RESULT($build_bitcoin_util)\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n-  AC_DEFINE(HAVE_CONSENSUS_LIB, 1, [Define this symbol if the consensus lib has been built])\n+  AC_DEFINE([HAVE_CONSENSUS_LIB], [1], [Define this symbol if the consensus lib has been built])\n   AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])\n fi\n AC_MSG_RESULT($build_bitcoin_libs)\n@@ -1689,7 +1689,7 @@ if test x$bitcoin_enable_qt != xno; then\n   dnl enable dbus support\n   AC_MSG_CHECKING([whether to build GUI with support for D-Bus])\n   if test x$bitcoin_enable_qt_dbus != xno; then\n-    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])\n+    AC_DEFINE([USE_DBUS], [1], [Define if dbus support should be compiled in])\n   fi\n   AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n \n@@ -1702,7 +1702,7 @@ if test x$bitcoin_enable_qt != xno; then\n     use_qr=no\n   else\n     if test x$use_qr != xno; then\n-      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])\n+      AC_DEFINE([USE_QRCODE], [1], [Define if QR support should be compiled in])\n       use_qr=yes\n     fi\n   fi\n@@ -1783,15 +1783,15 @@ dnl for minisketch\n AM_CONDITIONAL([ENABLE_CLMUL],[test x$enable_clmul = xyes])\n AM_CONDITIONAL([HAVE_CLZ],[test x$have_clzl$have_clzll = xyesyes])\n \n-AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n-AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n-AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n-AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n-AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\n-AC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])\n-AC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])\n+AC_DEFINE([CLIENT_VERSION_MAJOR], [_CLIENT_VERSION_MAJOR], [Major version])\n+AC_DEFINE([CLIENT_VERSION_MINOR], [_CLIENT_VERSION_MINOR], [Minor version])\n+AC_DEFINE([CLIENT_VERSION_BUILD], [_CLIENT_VERSION_BUILD], [Version Build])\n+AC_DEFINE([CLIENT_VERSION_IS_RELEASE], [_CLIENT_VERSION_IS_RELEASE], [Version is release])\n+AC_DEFINE([COPYRIGHT_YEAR], [_COPYRIGHT_YEAR], [Copyright year])\n+AC_DEFINE([COPYRIGHT_HOLDERS], [\"_COPYRIGHT_HOLDERS\"], [Copyright holder(s) before %s replacement])\n+AC_DEFINE([COPYRIGHT_HOLDERS_SUBSTITUTION], [\"_COPYRIGHT_HOLDERS_SUBSTITUTION\"], [Replacement for %s in copyright holders string])\n define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])\n-AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n+AC_DEFINE([COPYRIGHT_HOLDERS_FINAL], [\"_COPYRIGHT_HOLDERS_FINAL\"], [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)"
      }
    ]
  },
  {
    "sha": "e6749a4f997b0cfa5562e4871b6b7298022cbd31",
    "node_id": "C_kwDOABII59oAKGU2NzQ5YTRmOTk3YjBjZmE1NTYyZTQ4NzFiNmI3Mjk4MDIyY2JkMzE",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-09T06:07:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:31:59Z"
      },
      "message": "build: consistently quote arguments in AM_CONDITIONAL()",
      "tree": {
        "sha": "8b57fd529720549387b37ccee3b2cab0e00dc07c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b57fd529720549387b37ccee3b2cab0e00dc07c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6749a4f997b0cfa5562e4871b6b7298022cbd31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOCl8ACgkQLuufXMCV\nJsEiVxAApOH8b46ehtZY/MSXz6AmdC7BakLj3uf19gQ13Z5PD7fs34qa5HACzIlc\nAmmrPbq1bBLc1MD2xtS/yCsziWC47EyVgOcVHbRxMvlb5i0HUFQABdmgwW/2YgUO\ntdkf7gFwaLeDKA5feAb+jDN/ucQkAwL0tDrLvEwYUCiyThB3OsybjGPuBWlGT7Y7\nv/OHbm+PJi1upnjPhJPVnZ9IykY90/dfvVj0nEj/h7M54MRTmk+7sav153zjIakB\nvVhMmogrMjBjkR8M84QSa0U8w2VLAqndmldDM/izUmPtwQLZ55Z8FiTL2zT6xy/J\n5DhJKatenOL2yEsbyPujQC24AU2vv9bhhjDKV0oIC2iraAJGImSkjLVUkDCbev/Z\nJyHyPHQHrjWC4zqWZcS7iuelJKCAuex3OYzqiMRIbvEos06HIdJStZsrEh4cY6G0\nD452zRPBFp4HukGMlEkkh/j1iTnwuJ3YyMOnqnzCgTjJo6frgyN1H0e2bQLyf7hv\nT3txwxgzLBBqF9Rm2smSRCc/ktpP/K6ytlPYkVzsAytfBx4/0Ml8eJAh1+srSh3u\ng+Lm6DHyYqFaUaciypVy5+jQF06i5px7UCh9LAB7C2/WEaNH13tj6skygZkeitN4\njuwUzchqW/r7cTfy5+E877g0/A/sW0j/3bVa/70J/0denCoL8QQ=\n=hZD/\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b57fd529720549387b37ccee3b2cab0e00dc07c\nparent cdb47e18b776b26fe6d8a0feaa734f65a81b6769\nauthor fanquake <fanquake@gmail.com> 1636438022 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698719 +0800\n\nbuild: consistently quote arguments in AM_CONDITIONAL()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6749a4f997b0cfa5562e4871b6b7298022cbd31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6749a4f997b0cfa5562e4871b6b7298022cbd31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6749a4f997b0cfa5562e4871b6b7298022cbd31/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdb47e18b776b26fe6d8a0feaa734f65a81b6769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdb47e18b776b26fe6d8a0feaa734f65a81b6769"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "6211c25500c18f7b0ccc4826ba551e316dd43aa5",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6749a4f997b0cfa5562e4871b6b7298022cbd31/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6749a4f997b0cfa5562e4871b6b7298022cbd31/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e6749a4f997b0cfa5562e4871b6b7298022cbd31",
        "patch": "@@ -289,7 +289,7 @@ AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n                     [do not install man pages (default is to install)])],,\n     enable_man=yes)\n-AM_CONDITIONAL(ENABLE_MAN, test \"$enable_man\" != no)\n+AM_CONDITIONAL([ENABLE_MAN], [test \"$enable_man\" != no])\n \n dnl Enable debug\n AC_ARG_ENABLE([debug],\n@@ -1551,7 +1551,7 @@ else\n   build_multiprocess=no\n fi\n \n-AM_CONDITIONAL([BUILD_MULTIPROCESS],[test \"x$build_multiprocess\" = xyes])\n+AM_CONDITIONAL([BUILD_MULTIPROCESS], [test \"x$build_multiprocess\" = xyes])\n AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"x$build_multiprocess\" = xyes])\n AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"x$build_multiprocess\" = xyes])\n \n@@ -1755,33 +1755,33 @@ AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_LINUX], [test x$TARGET_OS = xlinux])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n-AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n+AM_CONDITIONAL([ENABLE_WALLET], [test x$enable_wallet = xyes])\n AM_CONDITIONAL([USE_SQLITE], [test \"x$use_sqlite\" = \"xyes\"])\n AM_CONDITIONAL([USE_BDB], [test \"x$use_bdb\" = \"xyes\"])\n-AM_CONDITIONAL([ENABLE_TRACING],[test x$have_sdt = xyes])\n-AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n-AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n-AM_CONDITIONAL([ENABLE_FUZZ_BINARY],[test x$enable_fuzz_binary = xyes])\n-AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n-AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n-AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n+AM_CONDITIONAL([ENABLE_TRACING], [test x$have_sdt = xyes])\n+AM_CONDITIONAL([ENABLE_TESTS], [test x$BUILD_TEST = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ], [test x$enable_fuzz = xyes])\n+AM_CONDITIONAL([ENABLE_FUZZ_BINARY], [test x$enable_fuzz_binary = xyes])\n+AM_CONDITIONAL([ENABLE_QT], [test x$bitcoin_enable_qt = xyes])\n+AM_CONDITIONAL([ENABLE_QT_TESTS], [test x$BUILD_TEST_QT = xyes])\n+AM_CONDITIONAL([ENABLE_BENCH], [test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n-AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n-AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n-AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n-AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n-AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n-AM_CONDITIONAL([ENABLE_AVX2],[test x$enable_avx2 = xyes])\n-AM_CONDITIONAL([ENABLE_SHANI],[test x$enable_shani = xyes])\n-AM_CONDITIONAL([ENABLE_ARM_CRC],[test x$enable_arm_crc = xyes])\n-AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n-AM_CONDITIONAL([WORDS_BIGENDIAN],[test x$ac_cv_c_bigendian = xyes])\n-AM_CONDITIONAL([USE_NATPMP],[test x$use_natpmp = xyes])\n-AM_CONDITIONAL([USE_UPNP],[test x$use_upnp = xyes])\n+AM_CONDITIONAL([USE_LCOV], [test x$use_lcov = xyes])\n+AM_CONDITIONAL([USE_LIBEVENT], [test x$use_libevent = xyes])\n+AM_CONDITIONAL([HARDEN], [test x$use_hardening = xyes])\n+AM_CONDITIONAL([ENABLE_SSE42], [test x$enable_sse42 = xyes])\n+AM_CONDITIONAL([ENABLE_SSE41], [test x$enable_sse41 = xyes])\n+AM_CONDITIONAL([ENABLE_AVX2], [test x$enable_avx2 = xyes])\n+AM_CONDITIONAL([ENABLE_SHANI], [test x$enable_shani = xyes])\n+AM_CONDITIONAL([ENABLE_ARM_CRC], [test x$enable_arm_crc = xyes])\n+AM_CONDITIONAL([USE_ASM], [test x$use_asm = xyes])\n+AM_CONDITIONAL([WORDS_BIGENDIAN], [test x$ac_cv_c_bigendian = xyes])\n+AM_CONDITIONAL([USE_NATPMP], [test x$use_natpmp = xyes])\n+AM_CONDITIONAL([USE_UPNP], [test x$use_upnp = xyes])\n \n dnl for minisketch\n-AM_CONDITIONAL([ENABLE_CLMUL],[test x$enable_clmul = xyes])\n-AM_CONDITIONAL([HAVE_CLZ],[test x$have_clzl$have_clzll = xyesyes])\n+AM_CONDITIONAL([ENABLE_CLMUL], [test x$enable_clmul = xyes])\n+AM_CONDITIONAL([HAVE_CLZ], [test x$have_clzl$have_clzll = xyesyes])\n \n AC_DEFINE([CLIENT_VERSION_MAJOR], [_CLIENT_VERSION_MAJOR], [Major version])\n AC_DEFINE([CLIENT_VERSION_MINOR], [_CLIENT_VERSION_MINOR], [Minor version])"
      }
    ]
  },
  {
    "sha": "80762dfc45077ece3ef65bcce6b57552e87071b1",
    "node_id": "C_kwDOABII59oAKDgwNzYyZGZjNDUwNzdlY2UzZWY2NWJjY2U2YjU3NTUyZTg3MDcxYjE",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-09T06:09:26Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:31:59Z"
      },
      "message": "build: consistently quote arguments in AC_ARG_VAR()",
      "tree": {
        "sha": "bd502b2842eeb33d748fbb810472306c32589bb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd502b2842eeb33d748fbb810472306c32589bb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80762dfc45077ece3ef65bcce6b57552e87071b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOCl8ACgkQLuufXMCV\nJsG+8RAAriSVk3k4lZhybTdnRTUnVC7mfwJOYRjnyQeg5ocQzcNcdaT23p55zalO\neakFlzakHmC/DWU9znWHghbbXpkX0ftsfZwMm/WjYipmb2I6ORVaFd+Rn8TcRcj7\nlTtxMlkhaOkqejffR0mpPo/QIhIEYD709QZcuRH+Z2XGacD/Qc0L5DJz1QAYkS+r\nvKJBvq2AA5ndW+fpF68mYH+51wtWKRTwgWorrvIXPPPjAFkSVKVKNc9xPHJ4viiJ\nzwBZ1cILPg5WA4Rsul2PrbsyQp7G11B41vXuKG8yM5y9jEcQ3/uouCfkR0i53U2z\nLTZ/KJiJQwT0iVMoFrY2WLV4heYek5adBpuS1MkrBcZXNYPuep7/12EJOgrUeFsC\nCU1mBk5zmBkdV2dZUedCnxhWf4QHt7djofUw1NJFHHrpGVrVPyLkrVOEpDHJ9fq+\nkAUqCrLUroDFKeq+mao4VmPZQiqnITct2slBeIJ/JehtThi4u1uf59/6xbNOLtTb\nrAPXgMYjGijhb6DevrWPsCmc++OLfTSQUC5qR/tx5ZXS+qS+Z6BUHvfJ/51vv769\nI3n1l2nta1D687oCa/5ATrwN1pY7Nv+JHEVlwEMsWb0LrrX/TTozIONhFAF++6dO\n/RE1TssJL4ONWlZMEq4r+X+zpB3ojCAIcm76wSgVzNn35/ktpus=\n=aNmi\n-----END PGP SIGNATURE-----",
        "payload": "tree bd502b2842eeb33d748fbb810472306c32589bb7\nparent e6749a4f997b0cfa5562e4871b6b7298022cbd31\nauthor fanquake <fanquake@gmail.com> 1636438166 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698719 +0800\n\nbuild: consistently quote arguments in AC_ARG_VAR()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80762dfc45077ece3ef65bcce6b57552e87071b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80762dfc45077ece3ef65bcce6b57552e87071b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80762dfc45077ece3ef65bcce6b57552e87071b1/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6749a4f997b0cfa5562e4871b6b7298022cbd31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6749a4f997b0cfa5562e4871b6b7298022cbd31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6749a4f997b0cfa5562e4871b6b7298022cbd31"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da6e7064a7e53dcb52fd016cb24df72fe3134bde",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80762dfc45077ece3ef65bcce6b57552e87071b1/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80762dfc45077ece3ef65bcce6b57552e87071b1/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=80762dfc45077ece3ef65bcce6b57552e87071b1",
        "patch": "@@ -3,8 +3,8 @@ dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n AC_DEFUN([BITCOIN_FIND_BDB48],[\n-  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n-  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR([BDB_CFLAGS], [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR([BDB_LIBS], [Linker flags for BerkeleyDB, bypasses autodetection])\n \n   if test \"x$use_bdb\" = \"xno\"; then\n     use_bdb=no"
      },
      {
        "sha": "e6b6a6c25397e2db6325b55f99bad0f0a3be8b86",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80762dfc45077ece3ef65bcce6b57552e87071b1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80762dfc45077ece3ef65bcce6b57552e87071b1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=80762dfc45077ece3ef65bcce6b57552e87071b1",
        "patch": "@@ -30,7 +30,7 @@ BITCOIN_MP_NODE_NAME=bitcoin-node\n BITCOIN_MP_GUI_NAME=bitcoin-gui\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n-AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n+AC_ARG_VAR([ARFLAGS], [Flags for the archiver, defaults to <cr> if not set])\n if test \"x${ARFLAGS+set}\" != \"xset\"; then\n   ARFLAGS=\"cr\"\n fi\n@@ -117,7 +117,7 @@ AC_PATH_TOOL([OBJCOPY], [objcopy])\n AC_PATH_PROG([DOXYGEN], [doxygen])\n AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n-AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n+AC_ARG_VAR([PYTHONPATH], [Augments the default search path for python module files])\n \n AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--disable-wallet],"
      }
    ]
  },
  {
    "sha": "c39732694df77f2585bcf7d1f621048cf6468879",
    "node_id": "C_kwDOABII59oAKGMzOTczMjY5NGRmNzdmMjU4NWJjZjdkMWY2MjEwNDhjZjY0Njg4Nzk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-10T03:48:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:31:59Z"
      },
      "message": "build: consistently quote AC_CHECK_PROG() arguments",
      "tree": {
        "sha": "d50079b19d70022a29e67060e71000b6a5c5b256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d50079b19d70022a29e67060e71000b6a5c5b256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c39732694df77f2585bcf7d1f621048cf6468879",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOCl8ACgkQLuufXMCV\nJsHUUQ//XG39sDp9MNvdfqdbNovHy4uFY5CIljrjRGIfpBFssCP3yTy3jGrKPE9w\n68+hh8GFsr8nj00fFHEoHJVKZoiuAxiY8azkXEGtupHN06v9Y/F15kUZx6a+NyFk\ngrzb+fylYkRRLDGEDd1LTyNLOv8f+XqEl6Fu48tD9mjhAzj5SzsbsVY5iEjadZlr\noJWzwvT8+7MmdQEp60nzJk+QGSlgnLJIHzSwwAGJEDLX8kuQnQ9nZuveus+RHC9U\nYRt1x+DBjssoiptcF8MPVMwehQCS2XiTXU4o0YlbS9Iqoevn6O/b1FX2qu3o/zas\nGun2NPFHF29KC1Olc6XSB4/5wR5D0FY/tmqJU6KsXiyBphyN21fj1cNU0NMiYitB\noCmjV7tuUSnTFHe5oY9A8SyoObRqDQhMrh6JHbODfc2Mz7iQ+JuHU766wdE85x0H\nXBDR52JzajKGGDpp0JJ9LnxWhHUfFBaSi4gcGN5tHY1G6k8wFGbstFPB7mhq8p0a\n8aHSLvANn/GImsDrLQD6KZih9x5wcRjf5u+qx9+UqjxgVvPaVw9YOQU1U9pzdeob\nQesHN8/yv8b04rxN984Hg+qBWzffsAr/oEW95txTHC2tFUa9BaBFqZJA3l+e/fM3\ntUtPSQDorbKxXXRMH/NVBbYHm7EmPF11KDAbWxhDoVyG2fKs4/Q=\n=WwRV\n-----END PGP SIGNATURE-----",
        "payload": "tree d50079b19d70022a29e67060e71000b6a5c5b256\nparent 80762dfc45077ece3ef65bcce6b57552e87071b1\nauthor fanquake <fanquake@gmail.com> 1636516135 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698719 +0800\n\nbuild: consistently quote AC_CHECK_PROG() arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39732694df77f2585bcf7d1f621048cf6468879",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c39732694df77f2585bcf7d1f621048cf6468879",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39732694df77f2585bcf7d1f621048cf6468879/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80762dfc45077ece3ef65bcce6b57552e87071b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80762dfc45077ece3ef65bcce6b57552e87071b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80762dfc45077ece3ef65bcce6b57552e87071b1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a9d13da4b19393d12524acf022281f024af37b80",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c39732694df77f2585bcf7d1f621048cf6468879/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c39732694df77f2585bcf7d1f621048cf6468879/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c39732694df77f2585bcf7d1f621048cf6468879",
        "patch": "@@ -675,7 +675,7 @@ case $host in\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n        AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg], [rsvg-convert])\n-       AC_CHECK_PROG([BREW],brew, brew)\n+       AC_CHECK_PROG([BREW], [brew], [brew])\n        if test x$BREW = xbrew; then\n          dnl These Homebrew packages may be keg-only, meaning that they won't be found\n          dnl in expected paths because they may conflict with system files. Ask"
      }
    ]
  },
  {
    "sha": "efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
    "node_id": "C_kwDOABII59oAKGVmZDRmZTE1NmEwOWU1ODEyYzAyZmMzZDU5YmFjNjAxZWQyYzZjYmY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-10T04:09:11Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:31:59Z"
      },
      "message": "build: consistently quote AC_MSG_* arguments",
      "tree": {
        "sha": "9adad086c9390db1f1b597f3302f2d19ddfe2aeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9adad086c9390db1f1b597f3302f2d19ddfe2aeb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOCl8ACgkQLuufXMCV\nJsHhHQ/+OZeXLAMmXYm6GA05Ts0b69pFl94kdq+RfGhUp/SUkFUk/Sfick6c+YcP\nZq+QN/YcY2E7en0Yee+oT6uKCzJR1jM3D1VvgHdpoLN+HUK108YWt0tHn/fiRKLE\n3nXOtj62VIawktCz4JDc4saqRiBxCMzNvU/0rw2+EbfDduiokPmq0dvo2PiWRwAP\nJhOI9hXqUb3Ch9/uV4MSDiplgu5mZlbr7mmospegCG3rZ+RBNa9OFnxam2zhnXq8\nEAc8Kqd2LMoP/brACrQvIgzhv5J04UDQq33ng4oRQtuQxg/Dow8/GTnTAgh0Gjct\nENgABLqDvipi8pf4eMK/gjWp1jPF1I8GBjl/yG/aS3uHdSQAjz4feRegehbsQ2cW\nxH7+wViaE2W+Hpmy9sHLCyb/o+y17gu7lxpevrUiUA/EeCWYsLxqyGS9nWYGfhbF\nZnAtwjPeCFutuIityjCOPvPLPPg4gJm8TlQ+oCQVSYpNQcE5qxRl4QxBPK+E5Ecp\nHH8UeVWyYC69AlfxNviI8v4QtQWWyyt2jp/C1iEPeJ9NrDmhCLi2f27lbWHg7ctx\n2/x6YkBhMklgTlVqE+RQGR5gAVOd9/YwVMd+Q2U19Srf5YTos8vulnAzLtg1GCYr\nhKolDstFlxYAOjWO+Hw0h5mrWSlV2nbuqnE3FJYdUppeIoP/Pb0=\n=/yJP\n-----END PGP SIGNATURE-----",
        "payload": "tree 9adad086c9390db1f1b597f3302f2d19ddfe2aeb\nparent c39732694df77f2585bcf7d1f621048cf6468879\nauthor fanquake <fanquake@gmail.com> 1636517351 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698719 +0800\n\nbuild: consistently quote AC_MSG_* arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c39732694df77f2585bcf7d1f621048cf6468879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39732694df77f2585bcf7d1f621048cf6468879",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c39732694df77f2585bcf7d1f621048cf6468879"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 113,
      "deletions": 113
    },
    "files": [
      {
        "sha": "8b90ee3dc420bb52bf19379d0e923ec1bee94d26",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
        "patch": "@@ -192,8 +192,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         choke\n         #endif\n       ]])],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n-      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n+      [ AC_MSG_RESULT([yes]); QT_PIE_FLAGS=$PIE_FLAGS ],\n+      [ AC_MSG_RESULT([no]); QT_PIE_FLAGS=$PIC_FLAGS]\n     )\n     CPPFLAGS=$TEMP_CPPFLAGS\n     CXXFLAGS=$TEMP_CXXFLAGS\n@@ -214,8 +214,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         choke\n         #endif\n       ]])],\n-      [ AC_MSG_RESULT(no)],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n+      [ AC_MSG_RESULT([no])],\n+      [ AC_MSG_RESULT([yes]); QT_PIE_FLAGS=$PIC_FLAGS]\n     )\n     CPPFLAGS=$TEMP_CPPFLAGS\n     ])\n@@ -239,7 +239,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     ;;\n     *mingw*)\n        BITCOIN_QT_CHECK([\n-         AX_CHECK_LINK_FLAG([-mwindows], [QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"], [AC_MSG_WARN(-mwindows linker support not detected)])\n+         AX_CHECK_LINK_FLAG([-mwindows], [QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"], [AC_MSG_WARN([-mwindows linker support not detected])])\n        ])\n   esac\n "
      },
      {
        "sha": "d71ce0063f8d0bca04e3b3f53cb537668c9d45be",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 108,
        "deletions": 108,
        "changes": 216,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
        "patch": "@@ -400,7 +400,7 @@ fi\n ERROR_CXXFLAGS=\n if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n-    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n+    AC_MSG_ERROR([enable-werror set but -Werror is not usable])\n   fi\n   ERROR_CXXFLAGS=$CXXFLAG_WERROR\n \n@@ -505,8 +505,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     l = _mm_crc32_u64(l, 0);\n     return l;\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_sse42=yes],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); enable_sse42=yes],\n+ [ AC_MSG_RESULT([no])]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n@@ -520,8 +520,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m128i l = _mm_set1_epi32(0);\n     return _mm_extract_epi32(l, 3);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_sse41=yes; AC_DEFINE([ENABLE_SSE41], [1], [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); enable_sse41=yes; AC_DEFINE([ENABLE_SSE41], [1], [Define this symbol to build code that uses SSE4.1 intrinsics]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n@@ -535,8 +535,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m256i l = _mm256_set1_epi32(0);\n     return _mm256_extract_epi32(l, 7);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_avx2=yes; AC_DEFINE([ENABLE_AVX2], [1], [Define this symbol to build code that uses AVX2 intrinsics]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); enable_avx2=yes; AC_DEFINE([ENABLE_AVX2], [1], [Define this symbol to build code that uses AVX2 intrinsics]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n@@ -552,8 +552,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     __m128i k = _mm_set1_epi32(2);\n     return _mm_extract_epi32(_mm_sha256rnds2_epu32(i, i, k), 0);\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_shani=yes; AC_DEFINE([ENABLE_SHANI], [1], [Define this symbol to build code that uses SHA-NI intrinsics]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); enable_shani=yes; AC_DEFINE([ENABLE_SHANI], [1], [Define this symbol to build code that uses SHA-NI intrinsics]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n@@ -574,8 +574,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #error \"crc32c library does not support hardware acceleration on 32-bit ARM\"\n #endif\n   ]])],\n- [ AC_MSG_RESULT(yes); enable_arm_crc=yes; ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); enable_arm_crc=yes; ],\n+ [ AC_MSG_RESULT([no])]\n )\n CXXFLAGS=\"$TEMP_CXXFLAGS\"\n \n@@ -628,33 +628,33 @@ AC_ARG_WITH([daemon],\n case $host in\n   *mingw*)\n      TARGET_OS=windows\n-     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR(libkernel32 missing))\n-     AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR(libuser32 missing))\n-     AC_CHECK_LIB([gdi32],    [main],, AC_MSG_ERROR(libgdi32 missing))\n-     AC_CHECK_LIB([comdlg32], [main],, AC_MSG_ERROR(libcomdlg32 missing))\n-     AC_CHECK_LIB([winmm],    [main],, AC_MSG_ERROR(libwinmm missing))\n-     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW],, AC_MSG_ERROR(libshell32 missing))\n-     AC_CHECK_LIB([comctl32], [main],, AC_MSG_ERROR(libcomctl32 missing))\n-     AC_CHECK_LIB([ole32],    [CoCreateInstance],, AC_MSG_ERROR(libole32 missing))\n-     AC_CHECK_LIB([oleaut32], [main],, AC_MSG_ERROR(liboleaut32 missing))\n-     AC_CHECK_LIB([uuid],     [main],, AC_MSG_ERROR(libuuid missing))\n-     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],, AC_MSG_ERROR(libadvapi32 missing))\n-     AC_CHECK_LIB([ws2_32],   [WSAStartup],, AC_MSG_ERROR(libws2_32 missing))\n-     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],, AC_MSG_ERROR(libshlwapi missing))\n-     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],, AC_MSG_ERROR(libiphlpapi missing))\n+     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR([libkernel32 missing]))\n+     AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR([libuser32 missing]))\n+     AC_CHECK_LIB([gdi32],    [main],, AC_MSG_ERROR([libgdi32 missing]))\n+     AC_CHECK_LIB([comdlg32], [main],, AC_MSG_ERROR([libcomdlg32 missing]))\n+     AC_CHECK_LIB([winmm],    [main],, AC_MSG_ERROR([libwinmm missing]))\n+     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW],, AC_MSG_ERROR([libshell32 missing]))\n+     AC_CHECK_LIB([comctl32], [main],, AC_MSG_ERROR([libcomctl32 missing]))\n+     AC_CHECK_LIB([ole32],    [CoCreateInstance],, AC_MSG_ERROR([libole32 missing]))\n+     AC_CHECK_LIB([oleaut32], [main],, AC_MSG_ERROR([liboleaut32 missing]))\n+     AC_CHECK_LIB([uuid],     [main],, AC_MSG_ERROR([libuuid missing]))\n+     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],, AC_MSG_ERROR([libadvapi32 missing]))\n+     AC_CHECK_LIB([ws2_32],   [WSAStartup],, AC_MSG_ERROR([libws2_32 missing]))\n+     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],, AC_MSG_ERROR([libshlwapi missing]))\n+     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],, AC_MSG_ERROR([libiphlpapi missing]))\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n      AX_CHECK_LINK_FLAG([-static], [LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])\n \n      AC_PATH_PROG([MAKENSIS], [makensis], [none])\n      if test x$MAKENSIS = xnone; then\n-       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")\n+       AC_MSG_WARN([makensis not found. Cannot create installer.])\n      fi\n \n      AC_PATH_TOOL([WINDRES], [windres], [none])\n      if test x$WINDRES = xnone; then\n-       AC_MSG_ERROR(\"windres not found\")\n+       AC_MSG_ERROR([windres not found])\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN\"\n@@ -769,7 +769,7 @@ case $host in\n         *i686*)\n           ANDROID_ARCH=i686\n           ;;\n-        *) AC_MSG_ERROR(\"Could not determine Android arch\") ;;\n+        *) AC_MSG_ERROR([Could not determine Android arch]) ;;\n       esac\n      ;;\n    *linux*)\n@@ -783,13 +783,13 @@ fi\n \n if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n+    AC_MSG_ERROR([lcov testing requested but lcov not found])\n   fi\n   if test x$PYTHON = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but python not found\")\n+    AC_MSG_ERROR([lcov testing requested but python not found])\n   fi\n   if test x$GENHTML = x; then\n-    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n+    AC_MSG_ERROR([lcov testing requested but genhtml not found])\n   fi\n \n   AC_MSG_CHECKING([whether compiler is Clang])\n@@ -817,9 +817,9 @@ if test x$use_lcov = xyes; then\n   LCOV=\"$LCOV --gcov-tool $(pwd)/$COV_TOOL_WRAPPER\"\n \n   AX_CHECK_LINK_FLAG([--coverage], [LDFLAGS=\"$LDFLAGS --coverage\"],\n-    [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n+    [AC_MSG_ERROR([lcov testing requested but --coverage linker flag does not work])])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n-    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])\n+    [AC_MSG_ERROR([lcov testing requested but --coverage flag does not work])])\n   CXXFLAGS=\"$CXXFLAGS -Og\"\n fi\n \n@@ -863,15 +863,15 @@ if test \"x$enable_gprof\" = xyes; then\n     dnl -pie by default, in which case it needs to be turned off with -no-pie.\n \n     if test x$use_hardening = xyes; then\n-        AC_MSG_ERROR(gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof)\n+        AC_MSG_ERROR([gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof])\n     fi\n     use_hardening=no\n     AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n-        [AC_MSG_ERROR(gprof profiling requested but not available)], [$CXXFLAG_WERROR])\n+        [AC_MSG_ERROR([gprof profiling requested but not available])], [$CXXFLAG_WERROR])\n \n     AX_CHECK_LINK_FLAG([-no-pie], [GPROF_LDFLAGS=\"-no-pie\"])\n     AX_CHECK_LINK_FLAG([-pg], [GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n-        [AC_MSG_ERROR(gprof profiling requested but not available)], [$GPROF_LDFLAGS])\n+        [AC_MSG_ERROR([gprof profiling requested but not available])], [$GPROF_LDFLAGS])\n fi\n \n if test x$TARGET_OS != xwindows; then\n@@ -927,7 +927,7 @@ if test x$use_hardening != xno; then\n \n   case $host in\n     *mingw*)\n-       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(libssp missing))\n+       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR([libssp missing]))\n     ;;\n   esac\n fi\n@@ -971,32 +971,32 @@ AC_MSG_CHECKING([for __builtin_clzl])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n  (void) __builtin_clzl(0);\n   ]])],\n- [ AC_MSG_RESULT(yes); have_clzl=yes; AC_DEFINE([HAVE_BUILTIN_CLZL], [1], [Define this symbol if you have __builtin_clzl])],\n- [ AC_MSG_RESULT(no); have_clzl=no;]\n+ [ AC_MSG_RESULT([yes]); have_clzl=yes; AC_DEFINE([HAVE_BUILTIN_CLZL], [1], [Define this symbol if you have __builtin_clzl])],\n+ [ AC_MSG_RESULT([no]); have_clzl=no;]\n )\n \n AC_MSG_CHECKING([for __builtin_clzll])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n   (void) __builtin_clzll(0);\n   ]])],\n- [ AC_MSG_RESULT(yes); have_clzll=yes; AC_DEFINE([HAVE_BUILTIN_CLZLL], [1], [Define this symbol if you have __builtin_clzll])],\n- [ AC_MSG_RESULT(no); have_clzll=no;]\n+ [ AC_MSG_RESULT([yes]); have_clzll=yes; AC_DEFINE([HAVE_BUILTIN_CLZLL], [1], [Define this symbol if you have __builtin_clzll])],\n+ [ AC_MSG_RESULT([no]); have_clzll=no;]\n )\n \n dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n AC_MSG_CHECKING([for getmemoryinfo])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ int f = malloc_info(0, NULL); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_MALLOC_INFO], [1], [Define this symbol if you have malloc_info]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_MALLOC_INFO], [1], [Define this symbol if you have malloc_info]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n dnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\n AC_MSG_CHECKING([for mallopt M_ARENA_MAX])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [[ mallopt(M_ARENA_MAX, 1); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_MALLOPT_ARENA_MAX], [1], [Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_MALLOPT_ARENA_MAX], [1], [Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n dnl Check for posix_fallocate\n@@ -1011,8 +1011,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                    #endif // __linux__\n                    #include <fcntl.h>]],\n                    [[ int f = posix_fallocate(0, 0, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_POSIX_FALLOCATE], [1], [Define this symbol if you have posix_fallocate]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_POSIX_FALLOCATE], [1], [Define this symbol if you have posix_fallocate]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for default visibility attribute])\n@@ -1022,10 +1022,10 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   ])],\n   [\n     AC_DEFINE([HAVE_DEFAULT_VISIBILITY_ATTRIBUTE], [1], [Define if the visibility attribute is supported.])\n-    AC_MSG_RESULT(yes)\n+    AC_MSG_RESULT([yes])\n   ],\n   [\n-    AC_MSG_RESULT(no)\n+    AC_MSG_RESULT([no])\n     if test x$use_reduce_exports = xyes; then\n       AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])\n     fi\n@@ -1039,9 +1039,9 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   ])],\n   [\n     AC_DEFINE([HAVE_DLLEXPORT_ATTRIBUTE], [1], [Define if the dllexport attribute is supported.])\n-    AC_MSG_RESULT(yes)\n+    AC_MSG_RESULT([yes])\n   ],\n-  [AC_MSG_RESULT(no)]\n+  [AC_MSG_RESULT([no])]\n )\n \n dnl thread_local is currently disabled when building with glibc back compat.\n@@ -1066,21 +1066,21 @@ if test \"x$use_thread_local\" = xyes || test \"x$use_thread_local\" = xauto; then\n           dnl mingw32's implementation of thread_local has also been shown to behave\n           dnl erroneously under concurrent usage; see:\n           dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n-          AC_MSG_RESULT(no)\n+          AC_MSG_RESULT([no])\n           ;;\n         *freebsd*)\n           dnl FreeBSD's implementation of thread_local is also buggy (per\n           dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n-          AC_MSG_RESULT(no)\n+          AC_MSG_RESULT([no])\n           ;;\n         *)\n           AC_DEFINE([HAVE_THREAD_LOCAL], [1], [Define if thread_local is supported.])\n-          AC_MSG_RESULT(yes)\n+          AC_MSG_RESULT([yes])\n           ;;\n       esac\n     ],\n     [\n-      AC_MSG_RESULT(no)\n+      AC_MSG_RESULT([no])\n     ]\n   )\n   LDFLAGS=\"$TEMP_LDFLAGS\"\n@@ -1091,13 +1091,13 @@ dnl fail if neither are available.\n AC_MSG_CHECKING([for gmtime_r])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n   [[ gmtime_r((const time_t *) nullptr, (struct tm *) nullptr); ]])],\n-  [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GMTIME_R], [1], [Define this symbol if gmtime_r is available]) ],\n-  [ AC_MSG_RESULT(no);\n+  [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_GMTIME_R], [1], [Define this symbol if gmtime_r is available]) ],\n+  [ AC_MSG_RESULT([no]);\n     AC_MSG_CHECKING([for gmtime_s]);\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <ctime>]],\n        [[ gmtime_s((struct tm *) nullptr, (const time_t *) nullptr); ]])],\n-       [ AC_MSG_RESULT(yes)],\n-       [ AC_MSG_RESULT(no); AC_MSG_ERROR(Both gmtime_r and gmtime_s are unavailable) ]\n+       [ AC_MSG_RESULT([yes])],\n+       [ AC_MSG_RESULT([no]); AC_MSG_ERROR([Both gmtime_r and gmtime_s are unavailable]) ]\n     )\n   ]\n )\n@@ -1108,23 +1108,23 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n   #include <sys/syscall.h>\n   #include <linux/random.h>]],\n  [[ syscall(SYS_getrandom, nullptr, 32, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYS_GETRANDOM], [1], [Define this symbol if the Linux getrandom system call is available]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_SYS_GETRANDOM], [1], [Define this symbol if the Linux getrandom system call is available]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for getentropy])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GETENTROPY], [1], [Define this symbol if the BSD getentropy system call is available]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_GETENTROPY], [1], [Define this symbol if the BSD getentropy system call is available]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for getentropy via random.h])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  #include <sys/random.h>]],\n  [[ getentropy(nullptr, 32) ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_GETENTROPY_RAND], [1], [Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_GETENTROPY_RAND], [1], [Define this symbol if the BSD getentropy system call is available with sys/random.h]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for sysctl])\n@@ -1134,8 +1134,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n     #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n     #endif\n     sysctl(nullptr, 2, nullptr, nullptr, nullptr, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYSCTL], [1], [Define this symbol if the BSD sysctl() is available]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_SYSCTL], [1], [Define this symbol if the BSD sysctl() is available]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for sysctl KERN_ARND])\n@@ -1146,38 +1146,38 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n     #endif\n     static int name[2] = {CTL_KERN, KERN_ARND};\n     sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_SYSCTL_ARND], [1], [Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_SYSCTL_ARND], [1], [Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for if type char equals int8_t])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n   #include <type_traits>]],\n  [[ static_assert(std::is_same<int8_t, char>::value, \"\"); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([CHAR_EQUALS_INT8], [1], [Define this symbol if type char equals int8_t]) ],\n- [ AC_MSG_RESULT(no)]\n+ [ AC_MSG_RESULT([yes]); AC_DEFINE([CHAR_EQUALS_INT8], [1], [Define this symbol if type char equals int8_t]) ],\n+ [ AC_MSG_RESULT([no])]\n )\n \n AC_MSG_CHECKING([for fdatasync])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ fdatasync(0); ]])],\n- [ AC_MSG_RESULT(yes); HAVE_FDATASYNC=1 ],\n- [ AC_MSG_RESULT(no); HAVE_FDATASYNC=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_FDATASYNC=1 ],\n+ [ AC_MSG_RESULT([no]); HAVE_FDATASYNC=0 ]\n )\n AC_DEFINE_UNQUOTED([HAVE_FDATASYNC], [$HAVE_FDATASYNC], [Define to 1 if fdatasync is available.])\n \n AC_MSG_CHECKING([for F_FULLFSYNC])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [[ fcntl(0, F_FULLFSYNC, 0); ]])],\n- [ AC_MSG_RESULT(yes); HAVE_FULLFSYNC=1 ],\n- [ AC_MSG_RESULT(no); HAVE_FULLFSYNC=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_FULLFSYNC=1 ],\n+ [ AC_MSG_RESULT([no]); HAVE_FULLFSYNC=0 ]\n )\n \n AC_MSG_CHECKING([for O_CLOEXEC])\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [[ open(\"\", O_CLOEXEC); ]])],\n- [ AC_MSG_RESULT(yes); HAVE_O_CLOEXEC=1 ],\n- [ AC_MSG_RESULT(no); HAVE_O_CLOEXEC=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_O_CLOEXEC=1 ],\n+ [ AC_MSG_RESULT([no]); HAVE_O_CLOEXEC=0 ]\n )\n AC_DEFINE_UNQUOTED([HAVE_O_CLOEXEC], [$HAVE_O_CLOEXEC], [Define to 1 if O_CLOEXEC flag is available.])\n \n@@ -1188,8 +1188,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n   const char* address = &data;\n   __builtin_prefetch(address, 0, 0);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_BUILTIN_PREFETCH=1 ],\n- [ AC_MSG_RESULT(no); HAVE_BUILTIN_PREFETCH=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_BUILTIN_PREFETCH=1 ],\n+ [ AC_MSG_RESULT([no]); HAVE_BUILTIN_PREFETCH=0 ]\n )\n \n AC_MSG_CHECKING([for _mm_prefetch])\n@@ -1198,8 +1198,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <xmmintrin.h>]], [[\n   const char* address = &data;\n   _mm_prefetch(address, _MM_HINT_NTA);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_MM_PREFETCH=1 ],\n- [ AC_MSG_RESULT(no); HAVE_MM_PREFETCH=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_MM_PREFETCH=1 ],\n+ [ AC_MSG_RESULT([no]); HAVE_MM_PREFETCH=0 ]\n )\n \n AC_MSG_CHECKING([for strong getauxval support in the system headers])\n@@ -1208,8 +1208,8 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE([HAVE_STRONG_GETAUXVAL], [1], [Define this symbol to build code that uses getauxval)]) ],\n- [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n+ [ AC_MSG_RESULT([yes]); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE([HAVE_STRONG_GETAUXVAL], [1], [Define this symbol to build code that uses getauxval)]) ],\n+ [ AC_MSG_RESULT([no]); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n have_any_system=no\n@@ -1219,8 +1219,8 @@ AC_LINK_IFELSE(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); have_any_system=yes],\n-    [ AC_MSG_RESULT(no) ]\n+    [ AC_MSG_RESULT([yes]); have_any_system=yes],\n+    [ AC_MSG_RESULT([no]) ]\n )\n \n AC_MSG_CHECKING([for ::_wsystem])\n@@ -1229,8 +1229,8 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); have_any_system=yes],\n-    [ AC_MSG_RESULT(no) ]\n+    [ AC_MSG_RESULT([yes]); have_any_system=yes],\n+    [ AC_MSG_RESULT([no]) ]\n )\n \n if test \"x$have_any_system\" != \"xno\"; then\n@@ -1251,7 +1251,7 @@ AC_DEFUN([SUPPRESS_WARNINGS],\n \n dnl enable-fuzz should disable all other targets\n if test \"x$enable_fuzz\" = \"xyes\"; then\n-  AC_MSG_WARN(enable-fuzz will disable all other targets and force --enable-fuzz-binary=yes)\n+  AC_MSG_WARN([enable-fuzz will disable all other targets and force --enable-fuzz-binary=yes])\n   build_bitcoin_utils=no\n   build_bitcoin_cli=no\n   build_bitcoin_tx=no\n@@ -1347,8 +1347,8 @@ if test x$use_ebpf != xno; then\n       [#include <sys/sdt.h>],\n       [DTRACE_PROBE(\"context\", \"event\");]\n     )],\n-    [AC_MSG_RESULT(yes); have_sdt=yes; AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])],\n-    [AC_MSG_RESULT(no); have_sdt=no;]\n+    [AC_MSG_RESULT([yes]); have_sdt=yes; AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])],\n+    [AC_MSG_RESULT([no]); have_sdt=no;]\n   )\n fi\n \n@@ -1372,9 +1372,9 @@ if test x$have_miniupnpc != xno; then\n       #  error miniUPnPc API version is too old\n       #endif\n     ]])],[\n-      AC_MSG_RESULT(yes)\n+      AC_MSG_RESULT([yes])\n     ],[\n-    AC_MSG_RESULT(no)\n+    AC_MSG_RESULT([no])\n     AC_MSG_WARN([miniUPnPc API version < 10 is unsupported, disabling UPnP support.])\n     have_miniupnpc=no\n   ])\n@@ -1399,7 +1399,7 @@ if test x$use_boost = xyes; then\n   dnl Check for Boost headers\n   AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n   if test x$want_boost = xno; then\n-    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n+    AC_MSG_ERROR([only libbitcoinconsensus can be built without Boost])\n   fi\n   AX_BOOST_SYSTEM\n   AX_BOOST_FILESYSTEM\n@@ -1420,7 +1420,7 @@ dnl Do not compile with syscall sandbox support when compiling under the sanitiz\n dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n dnl (such as execve when the sanitizers execute llvm-symbolizer).\n if test x$use_sanitizers != x; then\n-  AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n+  AC_MSG_WARN([Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).])\n   seccomp_found=no\n fi\n if test \"x$seccomp_found\" != \"xno\"; then\n@@ -1432,11 +1432,11 @@ if test \"x$seccomp_found\" != \"xno\"; then\n       #  error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n       #endif\n     ]])],[\n-      AC_MSG_RESULT(yes)\n+      AC_MSG_RESULT([yes])\n       seccomp_found=\"yes\"\n       AC_DEFINE([USE_SYSCALL_SANDBOX], [1], [Define this symbol to build with syscall sandbox support.])\n     ],[\n-      AC_MSG_RESULT(no)\n+      AC_MSG_RESULT([no])\n       seccomp_found=\"no\"\n   ])\n fi\n@@ -1456,7 +1456,7 @@ fi\n if test x$use_tests = xyes; then\n \n   if test x$HEXDUMP = x; then\n-    AC_MSG_ERROR(hexdump is required for tests)\n+    AC_MSG_ERROR([hexdump is required for tests])\n   fi\n \n   if test x$use_boost = xyes; then\n@@ -1475,9 +1475,9 @@ if test x$use_tests = xyes; then\n           #include <boost/test/unit_test.hpp>\n \n          ])],\n-      [AC_MSG_RESULT(yes)]\n+      [AC_MSG_RESULT([yes])]\n       [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n-      [AC_MSG_RESULT(no)])\n+      [AC_MSG_RESULT([no])])\n     LIBS=\"$TEMP_LIBS\"\n     CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n@@ -1619,39 +1619,39 @@ fi\n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n-  AC_MSG_RESULT(yes)\n+  AC_MSG_RESULT([yes])\n   AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n   enable_wallet=yes\n \n else\n-  AC_MSG_RESULT(no)\n+  AC_MSG_RESULT([no])\n fi\n \n dnl enable upnp support\n AC_MSG_CHECKING([whether to build with support for UPnP])\n if test x$have_miniupnpc = xno; then\n   if test x$use_upnp = xyes; then\n-     AC_MSG_ERROR(\"UPnP requested but cannot be built. Use --without-miniupnpc.\")\n+     AC_MSG_ERROR([UPnP requested but cannot be built. Use --without-miniupnpc])\n   fi\n-  AC_MSG_RESULT(no)\n+  AC_MSG_RESULT([no])\n   use_upnp=no\n else\n   if test x$use_upnp != xno; then\n-    AC_MSG_RESULT(yes)\n+    AC_MSG_RESULT([yes])\n     AC_MSG_CHECKING([whether to build with UPnP enabled by default])\n     use_upnp=yes\n     upnp_setting=0\n     if test x$use_upnp_default != xno; then\n       use_upnp_default=yes\n       upnp_setting=1\n     fi\n-    AC_MSG_RESULT($use_upnp_default)\n+    AC_MSG_RESULT([$use_upnp_default])\n     AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n     if test x$TARGET_OS = xwindows; then\n       MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"\n     fi\n   else\n-    AC_MSG_RESULT(no)\n+    AC_MSG_RESULT([no])\n   fi\n fi\n \n@@ -1691,7 +1691,7 @@ if test x$bitcoin_enable_qt != xno; then\n   if test x$bitcoin_enable_qt_dbus != xno; then\n     AC_DEFINE([USE_DBUS], [1], [Define if dbus support should be compiled in])\n   fi\n-  AC_MSG_RESULT($bitcoin_enable_qt_dbus)\n+  AC_MSG_RESULT([$bitcoin_enable_qt_dbus])\n \n   dnl enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n@@ -1709,7 +1709,7 @@ if test x$bitcoin_enable_qt != xno; then\n   AC_MSG_RESULT([$use_qr])\n \n   if test x$XGETTEXT = x; then\n-    AC_MSG_WARN(\"xgettext is required to update qt translations\")\n+    AC_MSG_WARN([xgettext is required to update qt translations])\n   fi\n \n   AC_MSG_CHECKING([whether to build test_bitcoin-qt])"
      }
    ]
  },
  {
    "sha": "34094aff1348bd038ea2c5572c614631c7db3d6f",
    "node_id": "C_kwDOABII59oAKDM0MDk0YWZmMTM0OGJkMDM4ZWEyYzU1NzJjNjE0NjMxYzdkYjNkNmY",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-10T04:13:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-11-12T06:32:00Z"
      },
      "message": "build: consistently quote AC_CHECK_LIB() arguments",
      "tree": {
        "sha": "b8c3f3868954846b6ae5812701ba828acfda257d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8c3f3868954846b6ae5812701ba828acfda257d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34094aff1348bd038ea2c5572c614631c7db3d6f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmGOCmAACgkQLuufXMCV\nJsGFUBAAqOYju65e0OvjfLRDPcLobW8jnL4K0UY4r+6+7uhzZrEA7oWsyXQxu12M\nhxnW7lB4wLz8kWcehIOUUIfzHeKlhD2wLJM4UCMzmMSAwUqq5c+bWyM8pFgi3Pvx\nklhIw9RcxP+0ex74/YGiXLns+Hrw4s21iD7NWufjFrB6EJcFbh9U57RHaYu0Tu+R\ncsWIOlUV0/TuRYWknqc5VXz/d7nU0Y5iGN9fnCBmDh5UWHHey2j67dvsWmA622g3\nykCSGJGOAyfljY/aN5vrnM+CwodZSyiD7eH9s2XQccx6qGBpUhqzikCqfrsuAVLY\np4yFSJGX7ipwylJIz+898JNxsCUTCLLfvHmhALGz3IQjWWusuSpE7ieEK5EVpvbv\nHqVI743ke4A2BYpOZaPPkPm1H30mBrxyAQfwblWuSkJElvSPf06UVaer3YwpxdSm\n+nrDnxWZiWo23BTRxMvlKm6CBci3nOUXKy9Skgzg6upyhGtDsSuMlOaAK0zl42Uj\nikMvHtwbrvrI+YNNoxYc6bNf2sTjrrNRm92YsWYZ7zEetiY1LERYmy85rSC4MXVo\n4P/AsPPCsNcBjh96dnb4FfPTOSVtL9BRugeULJPuNdDlbt3xm/lO8vNHav9b7y43\nSuoRmH44oQaBqUqh5czGjmmw0aFVhltFNv5kguD+qhFJavtrwfY=\n=XuPn\n-----END PGP SIGNATURE-----",
        "payload": "tree b8c3f3868954846b6ae5812701ba828acfda257d\nparent efd4fe156a09e5812c02fc3d59bac601ed2c6cbf\nauthor fanquake <fanquake@gmail.com> 1636517612 +0800\ncommitter fanquake <fanquake@gmail.com> 1636698720 +0800\n\nbuild: consistently quote AC_CHECK_LIB() arguments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34094aff1348bd038ea2c5572c614631c7db3d6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34094aff1348bd038ea2c5572c614631c7db3d6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34094aff1348bd038ea2c5572c614631c7db3d6f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efd4fe156a09e5812c02fc3d59bac601ed2c6cbf"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6d721ad0a6fb02cbb84f0908cded19b63b8ccc95",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34094aff1348bd038ea2c5572c614631c7db3d6f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34094aff1348bd038ea2c5572c614631c7db3d6f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=34094aff1348bd038ea2c5572c614631c7db3d6f",
        "patch": "@@ -628,20 +628,20 @@ AC_ARG_WITH([daemon],\n case $host in\n   *mingw*)\n      TARGET_OS=windows\n-     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR([libkernel32 missing]))\n-     AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR([libuser32 missing]))\n-     AC_CHECK_LIB([gdi32],    [main],, AC_MSG_ERROR([libgdi32 missing]))\n-     AC_CHECK_LIB([comdlg32], [main],, AC_MSG_ERROR([libcomdlg32 missing]))\n-     AC_CHECK_LIB([winmm],    [main],, AC_MSG_ERROR([libwinmm missing]))\n-     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW],, AC_MSG_ERROR([libshell32 missing]))\n-     AC_CHECK_LIB([comctl32], [main],, AC_MSG_ERROR([libcomctl32 missing]))\n-     AC_CHECK_LIB([ole32],    [CoCreateInstance],, AC_MSG_ERROR([libole32 missing]))\n-     AC_CHECK_LIB([oleaut32], [main],, AC_MSG_ERROR([liboleaut32 missing]))\n-     AC_CHECK_LIB([uuid],     [main],, AC_MSG_ERROR([libuuid missing]))\n-     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],, AC_MSG_ERROR([libadvapi32 missing]))\n-     AC_CHECK_LIB([ws2_32],   [WSAStartup],, AC_MSG_ERROR([libws2_32 missing]))\n-     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],, AC_MSG_ERROR([libshlwapi missing]))\n-     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],, AC_MSG_ERROR([libiphlpapi missing]))\n+     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],      [], [AC_MSG_ERROR([libkernel32 missing])])\n+     AC_CHECK_LIB([user32],   [main],                    [], [AC_MSG_ERROR([libuser32 missing])])\n+     AC_CHECK_LIB([gdi32],    [main],                    [], [AC_MSG_ERROR([libgdi32 missing])])\n+     AC_CHECK_LIB([comdlg32], [main],                    [], [AC_MSG_ERROR([libcomdlg32 missing])])\n+     AC_CHECK_LIB([winmm],    [main],                    [], [AC_MSG_ERROR([libwinmm missing])])\n+     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW], [], [AC_MSG_ERROR([libshell32 missing])])\n+     AC_CHECK_LIB([comctl32], [main],                    [], [AC_MSG_ERROR([libcomctl32 missing])])\n+     AC_CHECK_LIB([ole32],    [CoCreateInstance],        [], [AC_MSG_ERROR([libole32 missing])])\n+     AC_CHECK_LIB([oleaut32], [main],                    [], [AC_MSG_ERROR([liboleaut32 missing])])\n+     AC_CHECK_LIB([uuid],     [main],                    [], [AC_MSG_ERROR([libuuid missing])])\n+     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],    [], [AC_MSG_ERROR([libadvapi32 missing])])\n+     AC_CHECK_LIB([ws2_32],   [WSAStartup],              [], [AC_MSG_ERROR([libws2_32 missing])])\n+     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],     [], [AC_MSG_ERROR([libshlwapi missing])])\n+     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],    [], [AC_MSG_ERROR([libiphlpapi missing])])\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n@@ -927,7 +927,7 @@ if test x$use_hardening != xno; then\n \n   case $host in\n     *mingw*)\n-       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR([libssp missing]))\n+       AC_CHECK_LIB([ssp], [main], [], [AC_MSG_ERROR([libssp missing])])\n     ;;\n   esac\n fi"
      }
    ]
  }
]