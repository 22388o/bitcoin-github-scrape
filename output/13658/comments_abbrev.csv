Empact,2018-07-13T18:45:20Z,"This refactor raises the following questions:\n* Why does rpc `importmulti` call `pwallet->ReacceptWalletTransactions` before aborting on `pwallet->IsAbortingRescan()`. Should it flip that ordering like the others do?\n* Why do 3 of the 5 calls call `pwallet->ReacceptWalletTransactions`, while rpc `importwallet` calls `pwallet->MarkDirty()` and rpc `importprivkey` calls neither? This seems like ",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-404919955,404919955,
Empact,2018-07-13T19:00:16Z,Updated to minimize `git diff --color-moved=dimmed_zebra --minimal head^^`,https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-404923884,404923884,
DrahtBot,2018-07-13T19:20:18Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #12705 ([WIP] Importmulti private key support by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-404928944,404928944,
sipa,2018-07-14T01:10:12Z,"I don't like this. Code that interacts with the wallet should be in the wallet, not in the RPC code. I'm aware that there is an enormous amount of internal logic already in the RPC code, but we should be moving stuff in the other direction.\n\n",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-404987909,404987909,
MarcoFalke,2018-07-14T11:53:03Z,"utACK second commit, if the first one is dropped.",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405018225,405018225,
Empact,2018-07-14T17:09:27Z,"Dropped the first commit, and added handling of the ShutdownRequested rescan abort condition:\nhttps://github.com/bitcoin/bitcoin/blob/b25a4c2284babdf1e8cf0ec3b1402200dd25f33f/src/wallet/wallet.cpp#L1759-L1763",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405036701,405036701,
Empact,2018-07-14T17:28:20Z,Added full handing of rescan failure conditions to `CWallet::CreateWalletFromFile`,https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405037837,405037837,
promag,2018-07-14T20:20:12Z,"Kind of NACK the current approach. If you want to touch this consider improving `CWallet::ScanForWalletTransactions` signature, like:\n```cpp\nenum WalletScanError\n{\n    NONE = 0, // when ScanForWalletTransactions return is true\n    ABORTED,\n    SHUTDOWN_REQUEST,\n};\nstruct WalletScanResult {\n    WalletScanError error;\n    std::string message;\n    // other outputs\n};\nbool CW",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405047491,405047491,
Empact,2018-07-14T20:44:35Z,"@promag I did something like that here #13076, and while I think the result is ok, I've been thinking more of updating it to return bool as prompted by jimpo in #13582:\nhttps://github.com/bitcoin/bitcoin/pull/13582#issuecomment-401889114\n\nHave that follow-up in mind.",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405048767,405048767,
Empact,2018-07-14T20:47:33Z,I'll split these up for separate consideration.,https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405048905,405048905,
promag,2018-07-14T21:16:38Z,@Empact my suggestion is in line with @jimpo suggestion.,https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405050416,405050416,
promag,2018-07-17T11:16:38Z,"utACK 3fe836b.\n\nSide note, not sure if this should be tagged moveonly.\n\n",https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405547135,405547135,
MarcoFalke,2018-07-17T12:16:22Z,utACK 3fe836b78d504942e8850b607453886969f57e27,https://github.com/bitcoin/bitcoin/pull/13658#issuecomment-405561604,405561604,
MarcoFalke,2018-07-13T16:56:47Z,"Is there any reason why not just leave this here? It could very well be used by the gui or some other interface to the wallet in the future and had to be moved back. Generally, I'd prefer if code was only moved when necessary, since unnecessary code movement/refactoring makes backports easier to mess up and consumes scarce review resources.",https://github.com/bitcoin/bitcoin/pull/13658#discussion_r202412914,202412914,src/wallet/wallet.h
Empact,2018-07-13T18:39:04Z,"This move reduces the surface area of CWallet, which is pretty sprawling at the moment (wallet.cpp is ~4500 lines, the 3rd-largest *.cpp file, and the largest outside `/qt/`), and localizes this code to one implementation file from being more broadly available (wallet.h is included into 26 files).\n\nGrant the concerns you note are serious, and we should draw the line somewhere, but if the codeb",https://github.com/bitcoin/bitcoin/pull/13658#discussion_r202439254,202439254,src/wallet/wallet.h
MarcoFalke,2018-07-13T18:49:04Z,"> I've thought of implementing a web site to helps rank PRs by ACKs and other indications of importance. Current solutions like: https://github.com/bitcoin/bitcoin/projects/8 are pretty limited and not decentralized and ACKs are not currently well-exposed across PRs in aggregate.\n\nAre you aware of https://bitcoinacks.com/?desc=1&flt3_label_not_contains=Needs+rebase&flt0_merged_empty=1&flt4_ci_",https://github.com/bitcoin/bitcoin/pull/13658#discussion_r202441739,202441739,src/wallet/wallet.h
Empact,2018-07-13T19:01:05Z,"Nice, hadn't see that. üëç ",https://github.com/bitcoin/bitcoin/pull/13658#discussion_r202444691,202444691,src/wallet/wallet.h
laanwj,2018-07-25T13:31:17Z,"good to move this locally, it's a really aspecific constant name",https://github.com/bitcoin/bitcoin/pull/13658#discussion_r205108304,205108304,src/wallet/wallet.h
