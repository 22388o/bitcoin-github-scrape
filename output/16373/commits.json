[
  {
    "sha": "75a5e478b631d3d0821d003300c4eae3c8433973",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWE1ZTQ3OGI2MzFkM2QwODIxZDAwMzMwMGM0ZWFlM2M4NDMzOTcz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-20T20:01:30Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-12-18T14:03:36Z"
      },
      "message": "Change bumpfee to use watch-only funds for legacy watchonly wallets",
      "tree": {
        "sha": "70c72c6992b5c03cafa07bc4a9ba4d2590e74bd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70c72c6992b5c03cafa07bc4a9ba4d2590e74bd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a5e478b631d3d0821d003300c4eae3c8433973",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a5e478b631d3d0821d003300c4eae3c8433973",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a5e478b631d3d0821d003300c4eae3c8433973",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a5e478b631d3d0821d003300c4eae3c8433973/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1705f1949a14fb1d5213b44b4787bee07681526f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1705f1949a14fb1d5213b44b4787bee07681526f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1705f1949a14fb1d5213b44b4787bee07681526f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b93b9ef1bca676088fadba67f4bca51082127b49",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a5e478b631d3d0821d003300c4eae3c8433973/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a5e478b631d3d0821d003300c4eae3c8433973/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=75a5e478b631d3d0821d003300c4eae3c8433973",
        "patch": "@@ -47,7 +47,8 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet.IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    if (!wallet.IsAllFromMe(*wtx.tx, filter)) {\n         errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n@@ -78,7 +79,8 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     CFeeRate incrementalRelayFee = std::max(wallet.chain().relayIncrementalFee(), CFeeRate(WALLET_INCREMENTAL_RELAY_FEE));\n \n     // Given old total fee and transaction size, calculate the old feeRate\n-    CAmount old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    CAmount old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n     const int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // Min total fee is old fee + relay fee\n@@ -195,7 +197,8 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // calculate the old fee and fee-rate\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet->GetLegacyScriptPubKeyMan() && wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n@@ -308,7 +311,8 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     }\n \n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n \n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument."
      },
      {
        "sha": "d7e30ef88ad3067022e27b145e501d78d83b92f1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a5e478b631d3d0821d003300c4eae3c8433973/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a5e478b631d3d0821d003300c4eae3c8433973/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=75a5e478b631d3d0821d003300c4eae3c8433973",
        "patch": "@@ -3380,10 +3380,12 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n+    CCoinControl coin_control;\n+    coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     // optional parameters\n     CAmount totalFee = 0;\n-    CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n+\n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,"
      }
    ]
  },
  {
    "sha": "e9b4f9419cc778b5164708991a55014abef6c5f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWI0Zjk0MTljYzc3OGI1MTY0NzA4OTkxYTU1MDE0YWJlZjZjNWY5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-20T20:18:34Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-12-18T14:03:36Z"
      },
      "message": "bumpfee: Return PSBT when wallet has privkeys disabled",
      "tree": {
        "sha": "bec88882a97e6dd12bff34795c1e9846a37b926d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bec88882a97e6dd12bff34795c1e9846a37b926d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9b4f9419cc778b5164708991a55014abef6c5f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4f9419cc778b5164708991a55014abef6c5f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b4f9419cc778b5164708991a55014abef6c5f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4f9419cc778b5164708991a55014abef6c5f9/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75a5e478b631d3d0821d003300c4eae3c8433973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a5e478b631d3d0821d003300c4eae3c8433973",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a5e478b631d3d0821d003300c4eae3c8433973"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 30,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fb057226b3185d4d1fe5c9bbf63a50c5a82c7fa1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 14,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9b4f9419cc778b5164708991a55014abef6c5f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9b4f9419cc778b5164708991a55014abef6c5f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e9b4f9419cc778b5164708991a55014abef6c5f9",
        "patch": "@@ -3365,10 +3365,11 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n-            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n-            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n-            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n+            \"  \\\"psbt\\\":    \\\"psbt\\\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string) The id of the new transaction. Only returned when wallet private keys are enabled.\\n\"\n+            \"  \\\"origfee\\\":  n,        (numeric) The fee of the replaced transaction.\\n\"\n+            \"  \\\"fee\\\":      n,        (numeric) The fee of the new transaction.\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty).\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -3470,17 +3471,32 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // sign bumped transaction\n-    if (!feebumper::SignTransaction(*pwallet, mtx)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n-    }\n-    // commit the bumped transaction\n-    uint256 txid;\n-    if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n-    }\n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"txid\", txid.GetHex());\n+\n+    // If wallet private keys are enabled, return the new transaction id,\n+    // otherwise return the base64-encoded unsigned PSBT of the new transaction.\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!feebumper::SignTransaction(*pwallet, mtx)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        }\n+\n+        uint256 txid;\n+        if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+        }\n+\n+        result.pushKV(\"txid\", txid.GetHex());\n+    } else {\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool complete = false;\n+        const TransactionError err = FillPSBT(pwallet, psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        CHECK_NONFATAL(err == TransactionError::OK);\n+        CHECK_NONFATAL(!complete);\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n     result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n     result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "091a876664af4427db670ea8244d713b1b840048",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTFhODc2NjY0YWY0NDI3ZGI2NzBlYTgyNDRkNzEzYjFiODQwMDQ4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-11-28T12:02:58Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-12-18T14:03:36Z"
      },
      "message": "Test watchonly wallet bumpfee with PSBT return\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>",
      "tree": {
        "sha": "0fd39f2321d851e3525aa667ddcd5e4604be436a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fd39f2321d851e3525aa667ddcd5e4604be436a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/091a876664af4427db670ea8244d713b1b840048",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/091a876664af4427db670ea8244d713b1b840048",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/091a876664af4427db670ea8244d713b1b840048",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/091a876664af4427db670ea8244d713b1b840048/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9b4f9419cc778b5164708991a55014abef6c5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b4f9419cc778b5164708991a55014abef6c5f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b4f9419cc778b5164708991a55014abef6c5f9"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4eb0d19a4fa31196a27da99600dd0744ce592442",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/091a876664af4427db670ea8244d713b1b840048/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/091a876664af4427db670ea8244d713b1b840048/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=091a876664af4427db670ea8244d713b1b840048",
        "patch": "@@ -78,6 +78,7 @@ def run_test(self):\n         test_small_output_fails(rbf_node, dest_address)\n         test_dust_to_fee(rbf_node, dest_address)\n         test_settxfee(rbf_node, dest_address)\n+        test_watchonly_psbt(self, peer_node, rbf_node, dest_address)\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n@@ -103,6 +104,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n     assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n+    assert \"psbt\" not in bumped_tx\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n@@ -280,6 +282,86 @@ def test_maxtxfee_fails(test, rbf_node, dest_address):\n     test.restart_node(1, test.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+def test_watchonly_psbt(test, peer_node, rbf_node, dest_address):\n+    priv_rec_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\"\n+    pub_rec_desc = rbf_node.getdescriptorinfo(priv_rec_desc)[\"descriptor\"]\n+    priv_change_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/*)#j6uzqvuh\"\n+    pub_change_desc = rbf_node.getdescriptorinfo(priv_change_desc)[\"descriptor\"]\n+    # Create a wallet with private keys that can sign PSBTs\n+    rbf_node.createwallet(wallet_name=\"signer\", disable_private_keys=False, blank=True)\n+    signer = rbf_node.get_wallet_rpc(\"signer\")\n+    assert signer.getwalletinfo()['private_keys_enabled']\n+    result = signer.importmulti([{\n+        \"desc\": priv_rec_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0,1],\n+        \"internal\": False,\n+        \"keypool\": False # Keys can only be imported to the keypool when private keys are disabled\n+    },\n+    {\n+        \"desc\": priv_change_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0, 0],\n+        \"internal\": True,\n+        \"keypool\": False\n+    }])\n+    assert_equal(result, [{'success': True}, {'success': True}])\n+\n+    # Create another wallet with just the public keys, which creates PSBTs\n+    rbf_node.createwallet(wallet_name=\"watcher\", disable_private_keys=True, blank=True)\n+    watcher = rbf_node.get_wallet_rpc(\"watcher\")\n+    assert not watcher.getwalletinfo()['private_keys_enabled']\n+\n+    result = watcher.importmulti([{\n+        \"desc\": pub_rec_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0,10],\n+        \"internal\": False,\n+        \"keypool\": True,\n+        \"watchonly\": True\n+    },\n+    {\n+        \"desc\": pub_change_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0, 10],\n+        \"internal\": True,\n+        \"keypool\": True,\n+        \"watchonly\": True\n+    }])\n+    assert_equal(result, [{'success': True}, {'success': True}])\n+\n+    funding_address1 = watcher.getnewaddress(address_type='bech32')\n+    funding_address2 = watcher.getnewaddress(address_type='bech32')\n+    peer_node.sendmany(\"\", {funding_address1: 0.001, funding_address2: 0.001})\n+    peer_node.generate(1)\n+    test.sync_all()\n+\n+    # Create single-input PSBT for transaction to be bumped\n+    psbt = watcher.walletcreatefundedpsbt([], {dest_address:0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n+    psbt_signed = signer.walletprocesspsbt(psbt=psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+    psbt_final = watcher.finalizepsbt(psbt_signed[\"psbt\"])\n+    original_txid = watcher.sendrawtransaction(psbt_final[\"hex\"])\n+    assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n+\n+    # Bump fee, obnoxiously high to add additional watchonly input\n+    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\":0.005})\n+    assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n+    assert \"txid\" not in bumped_psbt\n+    assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])\n+    assert not watcher.finalizepsbt(bumped_psbt[\"psbt\"])[\"complete\"]\n+\n+    # Sign bumped transaction\n+    bumped_psbt_signed = signer.walletprocesspsbt(psbt=bumped_psbt[\"psbt\"], sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+    bumped_psbt_final = watcher.finalizepsbt(bumped_psbt_signed[\"psbt\"])\n+    assert bumped_psbt_final[\"complete\"]\n+\n+    # Broadcast bumped transaction\n+    bumped_txid = watcher.sendrawtransaction(bumped_psbt_final[\"hex\"])\n+    assert bumped_txid in rbf_node.getrawmempool()\n+    assert original_txid not in rbf_node.getrawmempool()\n+\n+    rbf_node.unloadwallet(\"watcher\")\n+    rbf_node.unloadwallet(\"signer\")\n \n def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds"
      }
    ]
  }
]