DrahtBot,2019-07-11 19:52:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17809](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17809.html) (rpc: Auto-format RPCResult by MarcoFalke)\n",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510630006,510630006,
ryanofsky,2019-07-11 20:04:35,Concept ACK. Seems reasonable and reasonably simple.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510633904,510633904,
promag,2019-07-12 00:41:33,"Concept ACK, how about a new RPC?",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510702235,510702235,
Sjors,2019-07-12 08:42:56,"Concept ACK. In general it's useful to be able to opt-out of sending a transaction. There could be a boolean option `broadcast` (default `yes`) for that. When a transaction is incomplete, returning a PSBT makes sense; perhaps not necesaary to make that explicit. When it's complete, returning both a hex and a psbt makes sense to me.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510804466,510804466,
instagibbs,2019-07-12 14:07:30,"@Sjors it's not quite not a ""not broadcast"" argument, since it's also not being submitted to wallet(`walletbroadcast` for reference). Going to keep the name/process for now unless I get a better suggestion.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510899888,510899888,
instagibbs,2019-07-12 14:09:50,@promag an additional RPC seems pretty heavy-weight. I think this feature is unobtrusive as-is. I'm -0 on the suggestion for now.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510900706,510900706,
instagibbs,2019-07-12 14:13:53,Pushed tests,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510902224,510902224,
promag,2019-07-12 14:16:56,"@instagibbs just asking because there's quite some PSBT calls:\n```\nanalyzepsbt\ncombinepsbt\nconverttopsbt\ncreatepsbt\ndecodepsbt\nfinalizepsbt\njoinpsbts\nutxoupdatepsbt\nwalletcreatefundedpsbt\nwalletprocesspsbt\n```\n\nOne disadvantage with this approach is that if you use the new option in a <0.19 it will commit the transaction, otherwise this looks fine.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510903282,510903282,
instagibbs,2019-07-12 14:21:33,"re:PSBT calls, it's a bit odd that for this one you don't actually supply the PSBT to bump(it's a fully-formed tx in wallet/mempool).\n\n> One disadvantage with this approach is that if you use the new option in a <0.19 it will commit the transaction\n\nOk that's a solid point. I'll see about splitting it out.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510904936,510904936,
Sjors,2019-07-12 14:31:06,"> you don't actually supply the PSBT to bump(it's a fully-formed tx in wallet/mempool).\n\nBut the mempool doesn't track BIP32 paths.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510908528,510908528,
promag,2019-07-12 15:29:06,@instagibbs a new parameter instead of the options key wouldn't have the above issue.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-510929801,510929801,
instagibbs,2019-07-16 00:28:18,"made the parameter its own top-level named argument to avoid potential footguns, h/t  @promag ",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-511617718,511617718,
promag,2019-07-23 19:12:31,"@ryanofsky oh right, strict option! I still prefer the new parameter along with named parameters.\n\nBTW, what if the new parameter is `commit = true` instead?",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-514344407,514344407,
ryanofsky,2019-07-24 17:09:50,"> BTW, what if the new parameter is commit = true instead?\n\nNot sure if this question is for me, but that seems fine. I don't have any preference between options vs params or `return_psbt` vs `commit`, they all seem fine. I do think having separate `bumpfee` and `bumpfeepsbt` methods would be most discoverable solution and most consistent with other psbt functions, but I know our current RPC a",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-514719003,514719003,
instagibbs,2019-07-26 17:42:18,"I find `commit` easier to remember but not particularly self-descriptive for a user. -0 on the change, but others feel free to bikeshed :)",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-515540266,515540266,
Sjors,2019-08-15 17:15:55,"I ended up with `add_to_wallet` in #16378, and if the transaction is complete I return the hex in addition to PSBT.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-521721806,521721806,
promag,2019-08-15 23:22:31,"Yap, my point is that the new option ""decides what to do"" instead of ""what to return"". `add_to_wallet` LGTM.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-521830850,521830850,
meshcollider,2019-08-16 21:56:08,Concept ACK with a bit of light code review,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-522163775,522163775,
instagibbs,2019-08-17 15:07:19,updated to `add_to_wallet` argument name/logic.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-522245556,522245556,
instagibbs,2019-10-24 16:16:53,can I get a fresh round of concept ACKs from people in this thread? I'll rebase if people like it.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-545993318,545993318,
Sjors,2019-10-24 18:56:33,Still concept ACK.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-546055429,546055429,
instagibbs,2019-10-25 17:42:51,rebased,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-546446666,546446666,
instagibbs,2019-11-18 15:09:38,"after working on https://github.com/bitcoin/bitcoin/pull/17492 I think the best thing to do is remove all arguments here, and just let the ""are privkeys disabled for this wallet"" be the logic switch since that is the standard check now for this type of behavior.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-555056751,555056751,
instagibbs,2019-11-20 20:20:33,switched implementation to simply use the fact that a wallet has privkeys disabled or not to return a PSBT or attempt to make a finalized transaction. New test incoming.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-556343277,556343277,
instagibbs,2019-11-21 16:10:30,"rebased on master, fixed travis, added test.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-557155360,557155360,
meshcollider,2019-11-27 08:28:29,"utACK  b2ee422be790f07a9006111e73fedb8c11d20f41\n\nHaven't reviewed the test yet",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-558983318,558983318,
instagibbs,2019-11-27 14:16:56,@Sjors addressed all issues,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559105493,559105493,
instagibbs,2019-11-27 15:16:46,restarted single job which failed to fetch packages,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559129722,559129722,
Sjors,2019-11-27 20:13:14,"The test passes, but when I use the `bumpfee` RPC it still shows the original fee as 0. Some details that may be relevant: I used a Trezor set to testnet and imported keys into a regtest watch-only wallet, using the HWI incantation. I funded it, got that transaction confirmed, and then spent a small fraction (so there's change). The fee was 10 sat / byte. I then bumped the fee of that last transac",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559236104,559236104,
Sjors,2019-11-28 11:18:15,"An easier way to write the test, and also more true to real world usage, is to import a descriptor with private keys into wallet A and then import the same descriptor with just the public keys into wallet B. You can use wallet A to sign PSBTs created with wallet B.\n\nHere's a test vector: https://github.com/bitcoin/bitcoin/pull/16546/commits/234f30a3524b9c2a7759ee5a1681f88cdbdde0c9#diff-579fcca",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559453388,559453388,
Sjors,2019-11-28 11:54:14,"I reimplemented your test using a signer and an equivalent watch-only wallet: https://github.com/bitcoin/bitcoin/compare/master...Sjors:2019/11/bump_psbt\n\nThat doesn't reproduce my issue, so for now I assume there's a problem with my own wallet.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559464944,559464944,
instagibbs,2019-11-28 15:40:41,@Sjors I'm not a super fan of magically-derived priv/pubkey pairs in tests(xprv vs xpub) but I'll take a look.,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559538406,559538406,
instagibbs,2019-12-02 14:57:35,"took a cleaned up version of the @Sjors test linked here https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-559464944\n\nI checked by hand the tpub/tprv matches ;)",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-560431681,560431681,
Sjors,2019-12-03 08:52:21,Code review ACK fc7fb79,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-561064076,561064076,
instagibbs,2019-12-03 14:38:36,un-magicified the tprv/tpub stuff h/t @Sjors for `getdescriptorinfo` idea to convert,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-561196256,561196256,
instagibbs,2019-12-03 16:22:06,rebased,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-561243471,561243471,
achow101,2019-12-06 18:27:34,ACK 99513d717c09dd6d4dfe15d168dda7129db30e20,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-562685635,562685635,
instagibbs,2019-12-09 21:59:51,"Found a bug, we weren't allowed to select new watchonly inputs. Fixed, enhanced test to catch this, and fixed @jonatack nits",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-563459721,563459721,
jonatack,2019-12-17 19:46:31,"Rebased 7f26d0d064a2f55cafbb220750fe977c81031113 to master, built, and ran all tests successfully.",https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-566719994,566719994,
instagibbs,2019-12-18 14:05:14,fixed up tests and slight code cleanup as per @jonatack nits,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-567045210,567045210,
achow101,2020-01-03 23:00:27,ACK 091a876664af4427db670ea8244d713b1b840048,https://github.com/bitcoin/bitcoin/pull/16373#issuecomment-570723568,570723568,
luke-jr,2019-08-19 23:56:51,This seems like it shouldn't be a positional parameter...,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r315458905,315458905,src/wallet/rpcwallet.cpp
luke-jr,2019-08-19 23:57:29,Maybe `ISMINE_WATCH_ONLY` should only be or'd when `add_to_wallet` is false?,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r315459046,315459046,src/wallet/feebumper.cpp
luke-jr,2019-08-19 23:58:24,Suggest making the option leave it unsigned too. User can always pass it back in to a signing RPC.,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r315459261,315459261,src/wallet/rpcwallet.cpp
instagibbs,2019-08-21 20:51:19,fwiw that point was discussed above,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r316396535,316396535,src/wallet/rpcwallet.cpp
instagibbs,2019-08-21 20:51:21,"seems reasonable, will update",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r316396547,316396547,src/wallet/feebumper.cpp
instagibbs,2019-08-21 20:52:10,"meh, ~0",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r316396860,316396860,src/wallet/rpcwallet.cpp
luke-jr,2019-09-02 14:30:02,"I don't understand the point above. We call `RPCTypeCheckObj` with `fStrict`=`true`, so unrecognised keys will error...",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r319981243,319981243,src/wallet/rpcwallet.cpp
promag,2019-09-02 14:37:54,Yeah I missed that (the strict option) when I left my comment and then @ryanofsky corrected me.,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r319984094,319984094,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 08:52:26,nit: `may return`,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339292754,339292754,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 08:53:14,nit: `of the bumped transaction`,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339292775,339292775,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 09:32:32,Light preference for only allowing this on native watch-only wallets.,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339293782,339293782,src/wallet/feebumper.cpp
Sjors,2019-10-26 09:37:55,"+1 for moving to options dictionary.\n\nIt could also default to true for watch-only wallets, though not for external signer wallets (#16546), so maybe keep it simple :-)",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339293910,339293910,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 09:39:58,nit: I find it more readable to have the variable name before the value (as it would be for named params),https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339293994,339293994,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 09:50:28,Other psbt methods do not set `bip32derivs` to `true` by default (though I'm starting to regret [recommending that](https://github.com/bitcoin/bitcoin/pull/13557#pullrequestreview-135905054)). To be consistent it should be an option.,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339294285,339294285,src/wallet/rpcwallet.cpp
Sjors,2019-10-26 10:10:48,See #17264,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r339294817,339294817,src/wallet/rpcwallet.cpp
instagibbs,2019-11-20 20:07:04,"> I find it more readable to have the variable name before the value\n\nFollowing convention here\n\n> To be consistent it should be an option\n\nIMO nah, especially after I nuke all the additional arguments",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r348719976,348719976,src/wallet/rpcwallet.cpp
Sjors,2019-11-27 10:07:08,Nit: check this first,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r351197151,351197151,src/wallet/rpcwallet.cpp
Sjors,2019-11-27 10:47:12,"If you add `assert_greater_than(bumped_psbt[""origfee""], 0)` it will throw `AssertionError: -0.00099000 <= 0`",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r351216650,351216650,test/functional/wallet_bumpfee.py
instagibbs,2019-11-27 14:15:55,done,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r351311396,351311396,src/wallet/rpcwallet.cpp
instagibbs,2019-11-27 14:16:02,fixed and added the test,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r351311451,351311451,test/functional/wallet_bumpfee.py
achow101,2019-12-05 16:21:05,Could you use ISMINE_ALL to avoid conflicts with future ScriptPubKeyMan?,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r354411199,354411199,src/wallet/feebumper.cpp
instagibbs,2019-12-06 17:29:59,I'm checking for legacy spkm instead.,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r354947264,354947264,src/wallet/feebumper.cpp
jonatack,2019-12-09 10:39:31,"Content and spacing suggestion:\n```diff\n-            ""  \""psbt\"":    \""psbt\"",    (string) The base64-encoded unsigned PSBT of new transaction. Only returned when private keys are disabled for the wallet.\n""\n-            ""  \""txid\"":    \""value\"",   (string)  The id of the new transaction. Only returned for wallets with private keys enabled.\n""\n-            ""  \""origfee\"":  n,         (num",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r355375215,355375215,src/wallet/rpcwallet.cpp
jonatack,2019-12-09 10:51:04,"Perhaps add a code comment here:\n```diff\n+    // If wallet private keys are enabled, return the new transaction id,\n+    // otherwise return the base64-encoded unsigned PSBT of the new transaction.\n```",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r355380579,355380579,src/wallet/rpcwallet.cpp
jonatack,2019-12-09 11:00:51,suggestion: s/to be bumped transaction/transaction to be bumped/,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r355385401,355385401,test/functional/wallet_bumpfee.py
jonatack,2019-12-17 14:28:17,"can do more compact tests that are stricter\n```diff\n     pub_change_desc = rbf_node.getdescriptorinfo(priv_change_desc)[""descriptor""]\n+    success = [{'success': True}, {'success': True}]\n+\n     # Create a wallet with private keys that can sign PSBTs\n     rbf_node.createwallet(wallet_name=""signer"", disable_private_keys=False, blank=True)\n     signer = rbf_node.get_wallet_rpc(""signer""",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358821037,358821037,test/functional/wallet_bumpfee.py
jonatack,2019-12-17 17:32:12,"nit: test failure messages here and lines 314 and 353 can be more useful using `assert_equal`, e.g.\n```diff\n-    assert signer.getwalletinfo()['private_keys_enabled']\n+    assert_equal(True, signer.getwalletinfo()['private_keys_enabled'])\n```",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358929751,358929751,test/functional/wallet_bumpfee.py
jonatack,2019-12-17 17:48:59,"was this line intended to be\n```python\nassert_equal(True, bumped_psbt_final[""complete""])\n```\nor?",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358937435,358937435,test/functional/wallet_bumpfee.py
jonatack,2019-12-17 18:56:26,"For info, the new test when run on master ab4e6ad7629430d02d101417e010228c1099f0ae without the other changes raises on feebumping with this `feebumper::Result PreconditionChecks` error ""Transaction contains inputs that don't belong to this wallet"", in the same place as my earlier comment https://github.com/bitcoin/bitcoin/pull/16373#pullrequestreview-328827090:\n```python\n# wallet_bumpfee.py\n",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358969132,358969132,src/wallet/feebumper.cpp
jonatack,2019-12-17 18:57:14,"For info, this is where the new test fails on current master without the other changes.",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358969464,358969464,test/functional/wallet_bumpfee.py
jonatack,2019-12-17 19:20:10,"pico-nit: `pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` isn't an optional rpc parameter\n```diff\n-    // optional parameters\n     CAmount totalFee = 0;\n     CCoinControl coin_control;\n-    coin_control.m_signal_bip125_rbf = true;\n     coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    coin_control.m_signal_bip125_rbf = true; ",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r358980577,358980577,src/wallet/rpcwallet.cpp
instagibbs,2019-12-17 21:16:45,"`assert bumped_psbt_final[""complete""]`, will fix!",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359032539,359032539,test/functional/wallet_bumpfee.py
instagibbs,2019-12-17 21:17:28,should we make `assert_true` as a helper?,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359032899,359032899,test/functional/wallet_bumpfee.py
instagibbs,2019-12-18 14:03:49,fixed,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359358912,359358912,src/wallet/rpcwallet.cpp
instagibbs,2019-12-18 14:04:11,fixed,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359359089,359359089,test/functional/wallet_bumpfee.py
instagibbs,2019-12-18 14:04:31,"I don't think this makes it any easier to understand, it's boolean and the line is printed on failure",https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359359240,359359240,test/functional/wallet_bumpfee.py
instagibbs,2019-12-18 14:04:40,done,https://github.com/bitcoin/bitcoin/pull/16373#discussion_r359359312,359359312,test/functional/wallet_bumpfee.py
