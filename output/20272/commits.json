[
  {
    "sha": "711f73fe4410c8517f1848f5b5261b791cd60b23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTFmNzNmZTQ0MTBjODUxN2YxODQ4ZjViNTI2MWI3OTFjZDYwYjIz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T13:38:58Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T13:38:58Z"
      },
      "message": "net: fix build by adding missing thread safety annotations\n\nFix the following:\n\n```\nsrc/net_processing.cpp:2724:13: error: calling function 'ProcessGetData' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n            ProcessGetData(pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n            ^\nsrc/net_processing.cpp:3798:13: error: calling function 'ProcessGetData' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n            ProcessGetData(*pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n            ^\n```\n\nClang 12",
      "tree": {
        "sha": "1cca5d72a29ecf09a6b62d8360244638e0600061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cca5d72a29ecf09a6b62d8360244638e0600061"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/711f73fe4410c8517f1848f5b5261b791cd60b23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cGAkACgkQVN8G9ktV\ny79NDiAAhDWlMj6ZJ1D/RskVPbqe+OxzRkUqTDkttL/ZUGy2RAlazKLJCIlzuUPh\ncXmz9+tB0OWXiPDm5XUOS9i6A51FGapd91X/OwGPEWfyfAvbBsBM4Wc//Kv6dpSs\n63Gvit7dKWfsVwdKW4R/CGNlTsyA1+NTnnwcuwcrn9D/BX0K4dfwuSr9cl0E4UO6\np72Zb+4YfqWhc1Bl87oLM4l0KdooF3ZQpaLotk4MGNSvymoxoDQlLeHfj7Zr9I3n\nfJF/hZskmWF3tZIiLOnL+xWWaLpBVEl3CxTr86KLckYIsLqMV+yH0hMa9yqR1gk0\nomuykiamuOiAtgvi2MHQWmvvb3go6vlMuA3bjkmbP4TBHf3t6BGNk2BzMbzZI1SC\ney3erN76WzrtEgzEDtVZxgSUlSwr20fijgmLQULlMgdWFnuF1jO7j+5RzwtncsVT\nAS5+G5LVq9R9kmdpUMDpcCAh4glQyScn1fzZlz239bsbuf/EG00zAQIsUamOBMnf\npfok3qcjZTIeAkCLTvtYjdfC34Hx8qSECUdx/yVF6t5I1SlIW1xufe8XV6Ux2n2k\nNK2cThISjy0oKNXmRzTf8MqIEiiY77nN9AsmBC20NBe73wvvu68q+1UC+dI0Nl3h\nqk4aNTDX2YZjVh5kSbXxkRrcGemPCd7c/tOn9RpvsPwcIm+k1yflB9FJFSVenAdN\ntGOcvKK5XoNeO3QeHc6jaPSWyMgYKf5k3nbdLhTtCDrvKJXkhya4biwKWC3SvUjp\nFtm9aTtAyvbDGA61nkS0hBVgh9yTKBAv2w+lFkI/0u18XXe9EN2ayW8QZplnPmb/\nDKY5g0cwWlMCCVeEtIhDJKT8NfVeDzBU+y0pzMlWFzAIGdXwbVFDPh3TzVCo8siV\nPo34oXN6oXz3PWTL9qStlImTEAQrOzXCZsODyPgNTpVwO6pajDiiBTchMrnXYph4\nuzVaqa9VAEO7ZmNJOWiY8UUjgG2/GycQ52QBn6KEz0kSKfTpFoLb7ka8gvgcyFA/\nK83oov3PPVmSqiXzWhO9zhQG3sRa6MWZLv2T4E5BojrxlOiUn9Ug9P1qVNbLxUYF\nX6Xt5/b/ddvS8CWp62BcNmXg5MZ4tyeZVa0A90/NxKMpq/pyLQd5dD01Bi9nr+xR\nQg3CdxvHhP1ZiSew7tkTynSPp+EsQtmDXgnmaKFdlWdXNBYHDKsxZv36tIW63NDF\nScgQRZ7uP7EuuilcIY/50FCyaOokCOd5hLg5vA9Z8cnqg1HzuUY5uPCg+ZuzGK5q\nkqtKeuawPGErQMLXKS4gjHXyEjByxJAsShNBIi2pZALXKa8b6erVnKjJ295irHyS\nGEVvWL9W4DojYjYnNy1jybLfwZczMA==\n=aFHK\n-----END PGP SIGNATURE-----",
        "payload": "tree 1cca5d72a29ecf09a6b62d8360244638e0600061\nparent 42b66a6b814bca130a9ccf0a3f747cf33d628232\nauthor Vasil Dimov <vd@FreeBSD.org> 1604065138 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604065138 +0100\n\nnet: fix build by adding missing thread safety annotations\n\nFix the following:\n\n```\nsrc/net_processing.cpp:2724:13: error: calling function 'ProcessGetData' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n            ProcessGetData(pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n            ^\nsrc/net_processing.cpp:3798:13: error: calling function 'ProcessGetData' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n            ProcessGetData(*pfrom, *peer, m_chainparams, m_connman, m_mempool, interruptMsgProc);\n            ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f73fe4410c8517f1848f5b5261b791cd60b23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/711f73fe4410c8517f1848f5b5261b791cd60b23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f73fe4410c8517f1848f5b5261b791cd60b23/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42b66a6b814bca130a9ccf0a3f747cf33d628232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42b66a6b814bca130a9ccf0a3f747cf33d628232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42b66a6b814bca130a9ccf0a3f747cf33d628232"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a0e77dae1b26e664a546c01748e5c5bad9ea169f",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/711f73fe4410c8517f1848f5b5261b791cd60b23/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/711f73fe4410c8517f1848f5b5261b791cd60b23/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=711f73fe4410c8517f1848f5b5261b791cd60b23",
        "patch": "@@ -65,7 +65,9 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     * @param[in]   pfrom           The node which we have received messages from.\n     * @param[in]   interrupt       Interrupt condition for processing threads\n     */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n+\n     /**\n     * Send queued protocol messages to be sent to a give node.\n     *\n@@ -84,8 +86,12 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n \n     /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    void ProcessMessage(CNode& pfrom,\n+                        const std::string& msg_type,\n+                        CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received,\n+                        const std::atomic<bool>& interruptMsgProc)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     /**\n      * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node"
      }
    ]
  },
  {
    "sha": "300e0103badde77f868b0d17ba47ede1d7ac7937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDBlMDEwM2JhZGRlNzdmODY4YjBkMTdiYTQ3ZWRlMWQ3YWM3OTM3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T13:43:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:28Z"
      },
      "message": "index: fix build by adding missing thread safety annotation\n\nFix the following:\n\n```\nsrc/index/base.cpp:273:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "a21482058cb66a0f5ced94065fce9f7246ce3609",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a21482058cb66a0f5ced94065fce9f7246ce3609"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/300e0103badde77f868b0d17ba47ede1d7ac7937",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCgACgkQVN8G9ktV\ny7/J5iAAq3jFKrzhjKbKyjh8PsgGTQ/TZf4SQVunACFV/5VdzcnWy4gLpL/uFk0y\nzg/vHsafKdNEzQaVXzQSFFmWraT75QFJacMa+0c3yJaE9saWtxqwjaLqIh5ghfdX\nZQ2DT3cjlGFSv7jGfcrqFrXYUMiUV/f6mhZtdx7vPkrA00RnY1kSq416Yqz9fZTf\n0lnuvF4BvPrxoEjvZKZmYXAGLdfxprOwHdoICWNmg9g4oYt7D2tBEnuKynL0Jzf/\ntLDmET+MobK8coQbzB9NUjsPWoiT4L1zYlgk0RgzkvOxPn0NhG6lMKdKkHUAJh5k\n/A08Ex+ffIx5FIwqKcPWtXbBP46fi0CSIK4w/XRo/EcFjBzQdZEa03jIpilNAt7e\nghdWyjXToZMa6qNNfe8BQqYjGDnCiU2jq71XZ0g8Y9xSFUslOm20SjyJU0Fb8Nr2\nF584iPf2K+CO2J37uV0JYOkL4LzPNu7yPJFgmmaHyFcixh2oovuuwAuJPppTAQ7K\nwQG7ik3H/eEqBlTMoghggBNbiHbm4faxsaVTODvyfb/+HHy3Lu4eR5gOexaQQO8U\n4Wq7VLS02Je2xoXRGhR4zz+5+pZNgzPVoSGMaaDLHSOJkuedtO1wX+BTwbmXa96a\nu/8xrehEj0TL62Qt7HtpsqaypVp4rcXOHPIe8Jm48moheb4iWr3j8QRxyeDFNByi\n9i72VM7Vnk9MI8PtoWkjBBUr/GiTRmK99w5nlgDaxvbuJi07EOfygz6GBVr8vZpC\nGJOu7MvdeXgFDSNOfB+ujV2XwQAziZ7zyrNUOeH9oLSg8WXZuLRl/FbGeRYWr/QZ\ndkGTOoQREdBy5BELRY4ov4Sw4nx9ebWseguZqb2OAn7+KaqhzEM4d8vhrM0GhXED\nV03bC2QktwIOH5lMXELqrDPXIcSetX5bjz5SLSORQBdl5TqD0m64AQI9EaS7qC8a\ndcm6pfo8TVscv6sDgFZRGVRhjt9aDzx0r3mf38KOz1n4dLeJ0Dh2Dps1ok+2+5OT\nFPt8YiDS5PyPJhJ5zsQKQ0BKZfCjGbdvFH52HOICp8a5MECZ1vknQYeIFriFxLkO\nryOwvNpkXAwTcXLw71nyyQ1QnN3BI+TjnX2jc3Kxsktmsvr8LkFNDgY/NPiEPctZ\n5oKyH3M1pjOP3Ax5HU65G2aJfG9p5uxbkgj9uN81gHDD40Y5jqeolD4xc1bukwSa\nwuDoyTg0HSBYp2aF8zwBT9FBvTB1MvsU/weg4Pp4JUEvc2WY+2DgxdoLnkrlcsT9\nd7HmoIqD4Kyj4je+WErKPaJWc03ZbX7v9IV14lZTYQr1svfpLygbcDjYYTkNAPxw\najF91JTYZzBlCDhSiuo1191guwIzxA==\n=FmhF\n-----END PGP SIGNATURE-----",
        "payload": "tree a21482058cb66a0f5ced94065fce9f7246ce3609\nparent 711f73fe4410c8517f1848f5b5261b791cd60b23\nauthor Vasil Dimov <vd@FreeBSD.org> 1604065415 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072488 +0100\n\nindex: fix build by adding missing thread safety annotation\n\nFix the following:\n\n```\nsrc/index/base.cpp:273:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/300e0103badde77f868b0d17ba47ede1d7ac7937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/300e0103badde77f868b0d17ba47ede1d7ac7937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/300e0103badde77f868b0d17ba47ede1d7ac7937/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "711f73fe4410c8517f1848f5b5261b791cd60b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f73fe4410c8517f1848f5b5261b791cd60b23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711f73fe4410c8517f1848f5b5261b791cd60b23"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 56,
      "deletions": 27
    },
    "files": [
      {
        "sha": "72769bcdc6e14d56a557701d7a1fbeac89961a60",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -109,7 +109,7 @@ class BaseIndex : public CValidationInterface\n     /// sync once and only needs to process blocks in the ValidationInterface\n     /// queue. If the index is catching up from far behind, this method does\n     /// not block and immediately returns false.\n-    bool BlockUntilSyncedToCurrentChain() const;\n+    bool BlockUntilSyncedToCurrentChain() const EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     void Interrupt();\n "
      },
      {
        "sha": "d3330b17aee4bb19decc8956dcb35cb86a33cb2a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -376,6 +376,7 @@ static bool rest_mempool_contents(const util::Ref& context, HTTPRequest* req, co\n }\n \n static bool rest_tx(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n+    EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     if (!CheckWarmup(req))\n         return false;"
      },
      {
        "sha": "7e6a03d614af902ed631348481ce7005f9162538",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -155,7 +155,7 @@ static RPCHelpMan getrawtransaction()\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     const NodeContext& node = EnsureNodeContext(request.context);\n "
      },
      {
        "sha": "33b202bdf5a9cb1271b30a012a8bc3b27c27d983",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -12,7 +12,7 @@\n \n BOOST_AUTO_TEST_SUITE(txindex_tests)\n \n-BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     TxIndex txindex(1 << 20, true);\n "
      },
      {
        "sha": "b221cc56ec584a74769d1f7a50d4f5b04f91cac3",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -733,7 +733,8 @@ RPCHelpMan dumpwallet()\n                     HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\")\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;"
      },
      {
        "sha": "b24ac4af3c3f4bef1de2cf691b2041ec13ebbb3e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 23,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/300e0103badde77f868b0d17ba47ede1d7ac7937/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/300e0103badde77f868b0d17ba47ede1d7ac7937/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=300e0103badde77f868b0d17ba47ede1d7ac7937",
        "patch": "@@ -467,7 +467,8 @@ static RPCHelpMan sendtoaddress()\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"\\\" \\\"\\\" false true 2 \" + (CURRENCY_ATOM + \"/B\"))\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -546,7 +547,8 @@ static RPCHelpMan listaddressgroupings()\n                     HelpExampleCli(\"listaddressgroupings\", \"\")\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -707,7 +709,8 @@ static RPCHelpMan getreceivedbyaddress()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 6\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -746,7 +749,8 @@ static RPCHelpMan getreceivedbylabel()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -787,7 +791,8 @@ static RPCHelpMan getbalance()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -827,7 +832,8 @@ static RPCHelpMan getunconfirmedbalance()\n                 {},\n                 RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n                 RPCExamples{\"\"},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -897,7 +903,8 @@ static RPCHelpMan sendmany()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\":0.01,\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\":0.02}, 6, \\\"testing\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1213,7 +1220,8 @@ static RPCHelpMan listreceivedbyaddress()\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1256,7 +1264,8 @@ static RPCHelpMan listreceivedbylabel()\n             + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1437,7 +1446,8 @@ static RPCHelpMan listtransactions()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1555,7 +1565,8 @@ static RPCHelpMan listsinceblock()\n             + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n@@ -1697,7 +1708,8 @@ static RPCHelpMan gettransaction()\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" false true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1771,7 +1783,8 @@ static RPCHelpMan abandontransaction()\n                     HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -1810,7 +1823,8 @@ static RPCHelpMan backupwallet()\n                     HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -2161,7 +2175,8 @@ static RPCHelpMan lockunspent()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -2371,7 +2386,8 @@ static RPCHelpMan getbalances()\n         RPCExamples{\n             HelpExampleCli(\"getbalances\", \"\") +\n             HelpExampleRpc(\"getbalances\", \"\")},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!rpc_wallet) return NullUniValue;\n@@ -2447,7 +2463,8 @@ static RPCHelpMan getwalletinfo()\n                     HelpExampleCli(\"getwalletinfo\", \"\")\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -2878,7 +2895,8 @@ static RPCHelpMan listunspent()\n             + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -3044,7 +3062,12 @@ static RPCHelpMan listunspent()\n     };\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n+static void FundTransaction(CWallet* const pwallet,\n+                            CMutableTransaction& tx,\n+                            CAmount& fee_out,\n+                            int& change_position,\n+                            UniValue options,\n+                            CCoinControl& coinControl) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -3241,7 +3264,8 @@ static RPCHelpMan fundrawtransaction()\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -3423,7 +3447,8 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n     \"\\nBump the fee, get the new transaction\\'s\" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n             HelpExampleCli(method_name, \"<txid>\")\n         },\n-        [want_psbt](const RPCHelpMan& self, const JSONRPCRequest& request) mutable -> UniValue\n+        [want_psbt](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) mutable -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n@@ -4068,7 +4093,8 @@ static RPCHelpMan send()\n             \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n         + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n         },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n         {\n             RPCTypeCheck(request.params, {\n                 UniValueType(), // ARR or OBJ, checked later\n@@ -4381,7 +4407,8 @@ static RPCHelpMan walletcreatefundedpsbt()\n                             \"\\nCreate a transaction with no inputs\\n\"\n                             + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;"
      }
    ]
  },
  {
    "sha": "91038740ac6024727cc1d80fb48fc592ac256c69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTAzODc0MGFjNjAyNDcyN2NjMWQ4MGZiNDhmYzU5MmFjMjU2YzY5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T13:53:26Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:28Z"
      },
      "message": "rpc: add missing negative capability on blockheaderToJSON()\n\nFix the following:\n\n```\nsrc/rpc/blockchain.cpp:121:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main); // For performance reasons\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "603076e1ce6e56b2d68ac381e17facece38078b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/603076e1ce6e56b2d68ac381e17facece38078b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91038740ac6024727cc1d80fb48fc592ac256c69",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCgACgkQVN8G9ktV\ny7+vRR//Qu64WOrlYZ9K8Apvcc0VcoIFwjhoNPsGjALuSH+dINYTv4EKrwiIRwP8\n51tZUinKibX3URpOuvwbKcZvUkDkTT77AcRhumdMhzAbm+BdqbPvQstSW4uyaVIP\n/AfHLm4bByAgBs3/5aKOQMZATpCSbhiOgaIZF/jQXEZ1Kx7HcxZPBamwt6WasURO\nB4h0Ga17NtYehmdaAu2OT0KtOKjhwMfNIpj9ywJAmHQ+Pyy1MyHCGpWzR8CY1VBo\nblT/jgKh2NneZWeNQ5IVB6hxxoKVTb0zjlD3o65Zz2yVl7l5Dndcg1LEH2hmh1yg\nUn70WKG1wkrZ9ZFCIyQNyNqb7Ad+g3mvaQ9jNFV30+xBN4/lFTtALoxVgnmGBSk0\nNn7r7uysFGA3gsAECEeZPpyNlhXGPGu+vT1t7yO0xnjidKpY7tSvbbMT83KYjQR/\nAnIO1PhllJai1RtRIITjsC/BgASOyyk/qGZ2cnNUO1JjVCiy9+u/J9yiXiiILgH4\ncp7lTRABMXpXSfWp0B0xTaUC2KhkNe0S4Q5GiMnSqdvwNiPy1s25zEY99E4xTw9B\nD+IMFail+L9ZMZ918VUXsKSbyag0PXdLQmJIlGsb4AYruxyK6WIpCc547UuCrkJG\nSoPSUm0tOQ31xo5pvtTnW/u8nhAzXSTiFaWA5+ol2wcr2c6faUmFuZoAGJvBH6jM\nvpoo0IrJF3m4UEtOw96HjKmZQKy2B5UdQKWxW/V5twIgazYi7XKv1gaKTkcDb17K\nohOQfklZVG6B7ulk5F6jujjTKN21vPLyfv6LjiOGBA5XKkZAGuUWl+uNmGw199nV\nQG1UD6Y91HfJtM8zVXETqJaUAXzyfG4kvDgJGFuAPlAb0Zr1bVwPLPa0h3qfpImo\n39njK2f3x6C8UpXWUMM046GvUZvmvUdUsT/Vk+9swBIFTPaH7/XLnIVfbHKxSJ+r\nMd+rzYKN4lmqUM0uP/AX61UKRTHaQtPpE/3IygKL1iuMTSDvE1WCAA3YH2IOmLkM\nkCscoyzWc/TU/00MChssw2IazDTuYRpkkKaSq8S708Ug4miyev408ivNq4jcS3aZ\nDiqXudBzwCLcezs3MzN8Vt1SpQbvLm3aNdHnlpCEBRrUwZF7sM5T/6Kubxf4/9s5\nTEXs6Zu68GNdAKYfou0BgunhRCYmLQ/O1LRSW7FEbJO2PwiI/evMwGdr4Uk2Sn5M\nHZ0sVrnQ45FxUitbUdJZDoKIwB0W8Qp/DuCtGjDY40Vp+qf1opIzUwjiB/xmqcMk\nmzfSmQA/MkA5LunHGxjCHRAIXoCdgkaDtJCfRT2P0bCfzFMiAF/TJj74ph0PqQts\nuEdTu7s0pmXcUm0CxqzH5YgWeHVGTg==\n=M3Gh\n-----END PGP SIGNATURE-----",
        "payload": "tree 603076e1ce6e56b2d68ac381e17facece38078b3\nparent 300e0103badde77f868b0d17ba47ede1d7ac7937\nauthor Vasil Dimov <vd@FreeBSD.org> 1604066006 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072488 +0100\n\nrpc: add missing negative capability on blockheaderToJSON()\n\nFix the following:\n\n```\nsrc/rpc/blockchain.cpp:121:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main); // For performance reasons\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91038740ac6024727cc1d80fb48fc592ac256c69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91038740ac6024727cc1d80fb48fc592ac256c69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91038740ac6024727cc1d80fb48fc592ac256c69/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "300e0103badde77f868b0d17ba47ede1d7ac7937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/300e0103badde77f868b0d17ba47ede1d7ac7937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/300e0103badde77f868b0d17ba47ede1d7ac7937"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f2653d631c890381b5ae76c6cdc5daf35af4b814",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91038740ac6024727cc1d80fb48fc592ac256c69/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91038740ac6024727cc1d80fb48fc592ac256c69/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=91038740ac6024727cc1d80fb48fc592ac256c69",
        "patch": "@@ -46,7 +46,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool);\n UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose = false, bool include_mempool_sequence = false);\n \n /** Block header to JSON */\n-UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex) LOCKS_EXCLUDED(cs_main);\n+UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);"
      }
    ]
  },
  {
    "sha": "a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWMxYWI3ODBjMjFjZmVmODJmNzU3ZDE5M2JhNzljMjU3ZmZiNmJh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T13:56:13Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:29Z"
      },
      "message": "rpc: add missing negative capability on blockToJSON()\n\nFix the following:\n\n```\nrpc/blockchain.cpp:150:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main); // For performance reasons\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "8f6f2397976784608ae16c181593d173779ca1b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f6f2397976784608ae16c181593d173779ca1b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCkACgkQVN8G9ktV\ny7/4rR/+Kww4qjj91DcaDgvwy/l/6+DNPvjSl/M5Dk18IrGHCXiQC/LWpsDZvOkw\nYEZCSNx80tDSI8ge7GxnpielZvAFvUzP2ap7N7xp6K6uFM1dxBbCYkEr7ENtIHM0\n5nmDFOi+ZN/E7tTU577MJMv9fAgYRY4lFSfw33rdNRtaqIq9ppf+b5QwAmYf1qwq\n9qbT/1kXxMaQoc5H5XjE9+hc/2TPBFQAzB5zBEz+HeALqfvZM9KIs3K0pGwbPyA4\neHRMxOZyJewwk9Sjf+R4I1/tsrUD9chx/+q1QuU4xhEkMQZPeV2Tp3FBqCOtel3M\ndHfTIoyTXLz/0hyGKyxLtzOBgUZ2vCNv86TgprX77usNQQUZVrCaUNufhvV1zX0h\nnhoJgPlAoaKz29mDwgG6UEXh1mjVnn80me23h4WMu8BfqxRKj4rmqNLFnWtubv9d\n3ppgsJJEgIlzae3AC12KYwmPO2b6ljuP2mwhsbEdzOZFCw9GvsEV0RIjmmHdvAiz\nD5dHEXtMVwrwrjl8SYZzvuOOdIw6cAL0Thj2RNUymgKJj+ts5+o2PVQ4UVpUhE6Y\ntehYXhBVR4+m7GmEzBYk3dCkuQ7kjp5AYzc64yNfDjYhSCFRSlgoJeuGOHUHC4Np\noIKgSCtNfxQuXgv6m0Shjp6zcamd7eEUdXaayiD5EdA4LU34aOd6LrRuvykzX1r8\n8cnCytI8lCGjEF2MjKzMzKLnimtESHDoFHI3VrYcnIN6WheaQS5wIpun2EVDjORg\nwm2B2ojsyTkHp2laWhG4tV82ghHRxc1sTDSsbJ0iSpjrQbzyIcWi31QV+h590his\nrgSm4PyU9etJ2jTDQopY0WMljrrhCuSI35hiQEfhhXtppgQdT1wPURrEyweB+bP/\ntxOWsghuFVBMGyGtMWZlExDAgozfAoQONGKnXQ6RB4vjRqO62yLXImzKXCJn8lZU\nPjh9h+XjQiT8BZNuApb0kaO3gtr/8/yb5XHgIpHh7/WRTb0PGuQuKa/SK5j5PLN0\nxfTJ5SrbYzc58m2FtkwGor6mYEt1ThrY/vsPaadF0UtR3vQeJhLrTmiGKiwAH8Fh\nxIdG7DgP0Gkq7i5omVjmgKCu2SQdzZEcG+cEKiwW+53hVJZ+KgPFUBTcyUav/S5/\nP/LVrLwQMaBEc805AcOal8oPeoB4vUps15VdBm1M4M/EaOmNUsJMj3RSQO4MDiIN\nRPWtIFzUhRSQJnIV+eq/PacyffANQEhi0OoUlDIYfaU4lWJb3hHniOway1/kT2yB\n/vhraDrXYCdyC8OzLX9X0e5AuC1qqKpK2LHHdK7qi6ZfwhGGw0H/BiXawdfd+6Da\nVM0GSWGoL+dsGfvuYpiUwqpz3O4jLQ==\n=COQd\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f6f2397976784608ae16c181593d173779ca1b8\nparent 91038740ac6024727cc1d80fb48fc592ac256c69\nauthor Vasil Dimov <vd@FreeBSD.org> 1604066173 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072489 +0100\n\nrpc: add missing negative capability on blockToJSON()\n\nFix the following:\n\n```\nrpc/blockchain.cpp:150:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main); // For performance reasons\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c1ab780c21cfef82f757d193ba79c257ffb6ba/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91038740ac6024727cc1d80fb48fc592ac256c69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91038740ac6024727cc1d80fb48fc592ac256c69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91038740ac6024727cc1d80fb48fc592ac256c69"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2750d31e8eccac2a498f5889aefd004eedc23b07",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c1ab780c21cfef82f757d193ba79c257ffb6ba/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c1ab780c21cfef82f757d193ba79c257ffb6ba/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
        "patch": "@@ -25,7 +25,8 @@ static void BlockToJsonVerbose(benchmark::Bench& bench)\n     blockindex.phashBlock = &blockHash;\n     blockindex.nBits = 403014710;\n \n-    bench.run([&] {\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        AssertLockNotHeld(cs_main);\n         (void)blockToJSON(block, &blockindex, &blockindex, /*verbose*/ true);\n     });\n }"
      },
      {
        "sha": "22eca663bdd283faa9cfbae40c145689dd0ed579",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c1ab780c21cfef82f757d193ba79c257ffb6ba/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c1ab780c21cfef82f757d193ba79c257ffb6ba/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
        "patch": "@@ -37,7 +37,10 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(const CBlockIndex*);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block,\n+                     const CBlockIndex* tip,\n+                     const CBlockIndex* blockindex,\n+                     bool txDetails = false) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);"
      }
    ]
  },
  {
    "sha": "7057de918c67aed8fed9ffcc5dedbdb3589aea11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDU3ZGU5MThjNjdhZWQ4ZmVkOWZmY2M1ZGVkYmRiMzU4OWFlYTEx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T14:03:54Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:29Z"
      },
      "message": "rpc: add missing annotation to sendrawtransaction()\n\nFix the following:\n\n```\nsrc/rpc/rawtransaction.cpp:864:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "a6ba085d04de9b0cf760beffb0cb076af2e0b7d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6ba085d04de9b0cf760beffb0cb076af2e0b7d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7057de918c67aed8fed9ffcc5dedbdb3589aea11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCkACgkQVN8G9ktV\ny7+HNx//ZIVSgC6QwU5QasktFjz72555vstjVBE+ENEopH1Zf6t5Tnxsz4WX1nMV\nt3ZWT3b0puw1BZkDhyP8SWsWZCx+NxGGZkgIcR41cw94nIypflVEgMp+OIMGM2ho\nK2zbVRwCncbBiziKfqrQake0Zg1BJgb6yH7dckMjPX7huYfuN6XdK2DE5RUmPpPM\ng5yy4fUXc0z1N/cwz9rHI6gu4eLfqF1qwKeoIOsDmV2ri+qjvAVzyi1w7w/VCc5S\n8VB0aLuREP9m0yG0nit1l6j5SYCiE0d7eD/cZz/wgJehvLuR5lSYV82QuhBXi7f/\nGQVEnSQ2SMhs7nCUMebEpO/f6Ayu0J6L2hL0ZVJm/ka32Ow58dayXoaKwOooiQfF\n+Near6dVtL+yF4K78Izs3CvELvbst0ewCXS4Kq/Sb0VHx20GbQZ4lmjjIF3rGV4W\nHZYj0GoQc6U02sWYB3jArMw5tmlKOy5igab1+NQMGmulFzil07FxVRi+6dokEBIw\n6vtZTRVaEAYz45IntqqYZz4rvWrpsf0N/V25KfUu6UAaLuB+PJICYS9GjTSpl/tZ\nbj1TvABaenz8pJuKMMI4bQ4cLxjI0P7P4HGV95xu8UKVehZfQtu/MWBwUgUxFnq4\nykkiry6Og71ZkM+b/4kSWcd6fq6Bm6ww5vtDFHhtgax2J7zigNYw7Jlz4P/OFlJD\nLcdNw9yJTfrbyfZZOZkREpOkwUcq5SPpvS4fvxZUdQf210QH4wcM/0TrAGXdi5un\n96l0niN9CoKNiP5NDsC97ec5tvoX//A3XDGg+NzBmw06qTfaxH8tOxXSfwhOk7Id\nL5uHGlxVdl93davgPz1Fm13nYvMXiKgoXRfb0ILMyWjFr1pe4W7MT8oGE23Dp6qk\n1g9ZQdtjW5XenTDcEZ+C4lx/v3iMZSUwGWR8TVTkQslrQ7HVx/KR/87yDlws9zhg\nei+QZG+PtcdVow2t8PTcv5SEtrcVVnMRK1kfrwlSUakt5Qm7rVCmcQn+q6CdSWOK\nJarohU04YRMNWSSK8tm+tlXh0/U6lE5tbTw+LV/XHT7AX0UwZYtdEdAVaMGY0P5C\nzNBFjy1xVMq+SYUeKB0nuyD6fLGRVDui4ceZ5qh7sm68JFbIfFRhmLYdiNBzmOFC\nLFtJaV6/D8RPAURsoN/5fhSWYG0Y8ixkRCyTQbzwNrFR7+eZwVBEE3Z8pRI5dWxR\nUH0Ypt+oUMOGRq1MDVUV+mUntFZFZItk+N0YWbP+GP9coCP+mrAeYSPP2rSxyJi5\nkZFO6A7OIyIb0HqC/Ql4yHwBrfUpbfNohvZMwRzMKVBtX43U1pOTxUIVz+yoEEpB\nqjHRem9KSXdLEbU8KmlDhvZofNbYGg==\n=880+\n-----END PGP SIGNATURE-----",
        "payload": "tree a6ba085d04de9b0cf760beffb0cb076af2e0b7d2\nparent a9c1ab780c21cfef82f757d193ba79c257ffb6ba\nauthor Vasil Dimov <vd@FreeBSD.org> 1604066634 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072489 +0100\n\nrpc: add missing annotation to sendrawtransaction()\n\nFix the following:\n\n```\nsrc/rpc/rawtransaction.cpp:864:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7057de918c67aed8fed9ffcc5dedbdb3589aea11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7057de918c67aed8fed9ffcc5dedbdb3589aea11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7057de918c67aed8fed9ffcc5dedbdb3589aea11/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c1ab780c21cfef82f757d193ba79c257ffb6ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c1ab780c21cfef82f757d193ba79c257ffb6ba"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d60ffc8bbd8b59918f5c2f4969b4852c109ffb9d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7057de918c67aed8fed9ffcc5dedbdb3589aea11/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7057de918c67aed8fed9ffcc5dedbdb3589aea11/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7057de918c67aed8fed9ffcc5dedbdb3589aea11",
        "patch": "@@ -840,7 +840,7 @@ static RPCHelpMan sendrawtransaction()\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     RPCTypeCheck(request.params, {\n         UniValue::VSTR,"
      }
    ]
  },
  {
    "sha": "f13350e9ce33a90659dd327745dd5568f2f3162a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTMzNTBlOWNlMzNhOTA2NTlkZDMyNzc0NWRkNTU2OGYyZjMxNjJh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T14:18:29Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:30Z"
      },
      "message": "init: add missing annotations to init.cpp and validation.cpp\n\nFix the following:\n\n```\nsrc/validation.cpp:2861:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:2873:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:3714:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:3843:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "b8e0c9deab8d674b4ac0fc2f755ba18368c3e6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e0c9deab8d674b4ac0fc2f755ba18368c3e6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13350e9ce33a90659dd327745dd5568f2f3162a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCoACgkQVN8G9ktV\ny7/qSiAAn2xuPmoD/RUc1V2Jjai6rPExzZVpvHDZKV22LIffZ15Y05PLegOfCM0Q\ny1zA4zFReIe8/nxCXZ/cqAovqc6JcLifNCamCNe4rxd/liz81PBWiAjFwqN9MP26\nruYOuaEFRYyVPgclQwLQYcrAfrdjmZ5eYwo/MHO/HHpxL+O0CyCLsVqjwNOuOFBA\nGkAAJLRf4/l/hoYv8iVEzIm+r7YJ82JfmyrYsGoT9gqr300YUnol9vL1qmI48t9q\nFxg2DCABiVFx7MAHHsbc+qA11QKmKZe96OoGCYUf9CMMDPeI570ApE7yFyHLID0E\n8H+gzmKAc51u7LhacSCR9nKvXdceUbtkviVqFZJYkBmxaDp1+VGO9Z/IeijZdHF1\nXWhguMRG6MY0qKtxrtophjthPFWm0oSH+5lDEgrDdZA0IGq4M9G12YFrDEyPjhYr\n913eVLCaByodRQSfUYLfd4d8g8lxqqRMEm2RkTz3PLzm0TdNpPGOT+B1q/Sul8ZG\nsmsacqqnRIitLwBytJYXu4PpcyD32hoaw7ypMwMCbBI00vICFDgTE62Q8a5WUWVV\nXMgTfW8zwkRZqn9uuXIvV7TcD3vt4Mu6GShOEJBHGL2RKVaH3PH6/RjKAP70IVop\nPrVoKMjb13v3zDhi8+2YMH7f1/rp4xscMGvxSc4Lbs/1uoQE6MrKy0f24d38CRZr\naGBpzkFWTa8Hf8js3u5IE2QivF3TdpUpPOQa1HsAVp/KSSTXga4GsYRt8UQY9Rmw\nYTuKjaiU+GVb1A1b5B56i1e4M6+o4TlosbCvX3P/yMDCml8cMrX4vYUDEdWQkOi0\n9bAaQfzB/zwVOg6Lp4Vbl/UjZxcZhAimmT8zFAa5XQeDDn86AlYNwepE7Ge2yPY4\nko8Ns6zrjI6j/84Y2hP2ea7Vmj3XmJQZ5exPDmcqVRVkk3dQ5YYf7Ca+P4LnQpEy\nwml9boVUNSd63UlMsTxobXQ5vFyaIokoEhxERCrNRiwDPvo6K1PXYqa6VUH7YLyU\nt+VL7POir6Vo8/C5cFlmmePqVt4aJQwOYGcs0dLxn1sBjVyBNxmKLSC5cOqLN3t4\nPi4ocKm0rr4u/CCd5hGheejVmpBxigsigRa6SFf5/q3EFllmdHlthlLyE+CMIUrx\nzGB+TSmRunOS0LV/RCjEIzo0Xn79xr/bSaEN1yyums/muS4aPRfI7w1rUhlbKO8R\nA9GBvZ664i4CyX9zuxnAmFSpVmM3SgrhAG9sY/g0Y+yTcgRF7X1W+Z13l374wem8\n91quazxfOsi8hLtTnkH2IxruJN7tj7dkKlS1awYit1gboNpKpRWPcQuJMDjUHG76\n+/6Dp65XHOgg9gtHpjHqvoQbxosIQw==\n=/Jyf\n-----END PGP SIGNATURE-----",
        "payload": "tree b8e0c9deab8d674b4ac0fc2f755ba18368c3e6ce\nparent 7057de918c67aed8fed9ffcc5dedbdb3589aea11\nauthor Vasil Dimov <vd@FreeBSD.org> 1604067509 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072490 +0100\n\ninit: add missing annotations to init.cpp and validation.cpp\n\nFix the following:\n\n```\nsrc/validation.cpp:2861:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:2873:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:3714:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\nsrc/validation.cpp:3843:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13350e9ce33a90659dd327745dd5568f2f3162a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13350e9ce33a90659dd327745dd5568f2f3162a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13350e9ce33a90659dd327745dd5568f2f3162a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7057de918c67aed8fed9ffcc5dedbdb3589aea11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7057de918c67aed8fed9ffcc5dedbdb3589aea11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7057de918c67aed8fed9ffcc5dedbdb3589aea11"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 50,
      "deletions": 26
    },
    "files": [
      {
        "sha": "8c8fab3a8f26241635d4122d3691338de4217e1a",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -14,7 +14,7 @@\n \n #include <vector>\n \n-static void AssembleBlock(benchmark::Bench& bench)\n+static void AssembleBlock(benchmark::Bench& bench) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     TestingSetup test_setup{\n         CBaseChainParams::REGTEST,"
      },
      {
        "sha": "610d3af431b19a642aeb9c923da0b9c6357e69ad",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -691,7 +691,9 @@ static void StartupNotify(const ArgsManager& args)\n }\n #endif\n \n-static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles, const ArgsManager& args)\n+static void ThreadImport(ChainstateManager& chainman,\n+                         std::vector<fs::path> vImportFiles,\n+                         const ArgsManager& args) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n@@ -1877,9 +1879,10 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         vImportFiles.push_back(strFile);\n     }\n \n-    g_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\", [=, &chainman, &args] {\n-        ThreadImport(chainman, vImportFiles, args);\n-    });\n+    g_load_block = std::thread(&TraceThread<std::function<void()>>, \"loadblk\",\n+                               [=, &chainman, &args]() EXCLUSIVE_LOCKS_REQUIRED(!cs_main) {\n+                                   ThreadImport(chainman, vImportFiles, args);\n+                               });\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "5f3d80ed1857720ec70b0a9b86a95e70c3b232a8",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -131,7 +131,7 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\n //     QT_QPA_PLATFORM=xcb     src/qt/test/test_bitcoin-qt  # Linux\n //     QT_QPA_PLATFORM=windows src/qt/test/test_bitcoin-qt  # Windows\n //     QT_QPA_PLATFORM=cocoa   src/qt/test/test_bitcoin-qt  # macOS\n-void TestGUI(interfaces::Node& node)\n+static void TestGUI(interfaces::Node& node) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n@@ -269,7 +269,7 @@ void TestGUI(interfaces::Node& node)\n \n } // namespace\n \n-void WalletTests::walletTests()\n+void WalletTests::walletTests() EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n #ifdef Q_OS_MAC\n     if (QApplication::platformName() == \"minimal\") {"
      },
      {
        "sha": "0d1668b46cdf1e5cd6afbafef71db27daad06f4c",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -20,7 +20,10 @@ BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n \n struct BuildChainTestingSetup : public TestChain100Setup {\n     CBlock CreateBlock(const CBlockIndex* prev, const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey);\n-    bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key, size_t length, std::vector<std::shared_ptr<CBlock>>& chain);\n+    bool BuildChain(const CBlockIndex* pindex,\n+                    const CScript& coinbase_script_pub_key,\n+                    size_t length,\n+                    std::vector<std::shared_ptr<CBlock>>& chain) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n };\n \n static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,"
      },
      {
        "sha": "51167ad7d1d52bd82999822d4745df23df58d678",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -94,7 +94,7 @@ BOOST_AUTO_TEST_CASE(findAncestorByHash)\n     BOOST_CHECK(!chain->findAncestorByHash(active[10]->GetBlockHash(), active[20]->GetBlockHash()));\n }\n \n-BOOST_AUTO_TEST_CASE(findCommonAncestor)\n+BOOST_AUTO_TEST_CASE(findCommonAncestor) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     auto chain = interfaces::MakeChain(m_node);\n     auto& active = ChainActive();"
      },
      {
        "sha": "b03a60f97f5af9cb50e5ca28ed87eb13a16639b5",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -18,6 +18,7 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const C\n BOOST_AUTO_TEST_SUITE(txvalidationcache_tests)\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Make sure skipping validation of transactions that were\n     // validated going into the memory pool does not allow"
      },
      {
        "sha": "ffbf5ef76d85f11bcde34710ec207a807b3c46b2",
        "filename": "src/test/util/mining.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/util/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/util/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.h?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -5,21 +5,25 @@\n #ifndef BITCOIN_TEST_UTIL_MINING_H\n #define BITCOIN_TEST_UTIL_MINING_H\n \n+#include <sync.h>\n+\n #include <memory>\n #include <string>\n \n+extern RecursiveMutex cs_main;\n+\n class CBlock;\n class CScript;\n class CTxIn;\n struct NodeContext;\n \n /** Returns the generated coin */\n-CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n+CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n /** Prepare a block to be mined */\n std::shared_ptr<CBlock> PrepareBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);\n \n /** RPC-like helper function, returns the generated coin */\n-CTxIn generatetoaddress(const NodeContext&, const std::string& address);\n+CTxIn generatetoaddress(const NodeContext&, const std::string& address) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n #endif // BITCOIN_TEST_UTIL_MINING_H"
      },
      {
        "sha": "9e9560c5ab5a8c3423458de45e420da4bb05b8c2",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -113,7 +113,7 @@ struct TestChain100Setup : public RegTestingSetup {\n      * scriptPubKey, and try to add it to the current chain.\n      */\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n-                                 const CScript& scriptPubKey);\n+                                 const CScript& scriptPubKey) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     ~TestChain100Setup();\n "
      },
      {
        "sha": "85ba6698db9ccc4db03d6f8d773e79f903f8831f",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -148,7 +148,7 @@ void MinerTestingSetup::BuildChain(const uint256& root, int height, const unsign\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // build a large-ish chain that's likely to have some forks\n     std::vector<std::shared_ptr<const CBlock>> blocks;\n@@ -183,7 +183,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     // will subscribe to events generated during block validation and assert on ordering invariance\n     std::vector<std::thread> threads;\n     for (int i = 0; i < 10; i++) {\n-        threads.emplace_back([&]() {\n+        threads.emplace_back([&]() EXCLUSIVE_LOCKS_REQUIRED(!cs_main) {\n             bool ignored;\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n@@ -229,10 +229,11 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n  * or consistent with the chain state after the reorg, and not just consistent\n  * with some intermediate state during the reorg.\n  */\n-BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     bool ignored;\n-    auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n+    auto ProcessBlock = [&](std::shared_ptr<const CBlock> block)\n+                            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> bool {\n         return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n "
      },
      {
        "sha": "952b2ab8ee4174be8831c59e33685872709ef479",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -20,7 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n //! Basic tests for ChainstateManager.\n //!\n //! First create a legacy (IBD) chainstate, then create a snapshot chainstate.\n-BOOST_AUTO_TEST_CASE(chainstatemanager)\n+BOOST_AUTO_TEST_CASE(chainstatemanager) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     ChainstateManager manager;\n     CTxMemPool mempool;"
      },
      {
        "sha": "2e99b5034d859be92663ea19e8b78830ba68a56b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -2857,7 +2857,7 @@ static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     return fNotify;\n }\n \n-static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n+static void LimitValidationInterfaceQueue() EXCLUSIVE_LOCKS_REQUIRED(!cs_main) {\n     AssertLockNotHeld(cs_main);\n \n     if (GetMainSignals().CallbacksPending() > 10) {"
      },
      {
        "sha": "0ecd607f18504de17c91442fb376a104eacf6138",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -179,7 +179,11 @@ CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMe\n  * May not be called with cs_main held. May not be called in a\n  * validationinterface callback.\n  */\n-bool ActivateBestChain(BlockValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n+bool ActivateBestChain(BlockValidationState& state,\n+                       const CChainParams& chainparams,\n+                       std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>())\n+    EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n+\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n@@ -661,7 +665,7 @@ class CChainState {\n     bool ActivateBestChain(\n         BlockValidationState& state,\n         const CChainParams& chainparams,\n-        std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n+        std::shared_ptr<const CBlock> pblock) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -911,7 +915,10 @@ class ChainstateManager\n      * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n      * @returns     If the block was processed, independently of block validity\n      */\n-    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+    bool ProcessNewBlock(const CChainParams& chainparams,\n+                         const std::shared_ptr<const CBlock> pblock,\n+                         bool fForceProcessing,\n+                         bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     /**\n      * Process incoming block headers.\n@@ -924,7 +931,11 @@ class ChainstateManager\n      * @param[in]  chainparams The params for the chain we want to connect to\n      * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n      */\n-    bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\n+    bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block,\n+                                BlockValidationState& state,\n+                                const CChainParams& chainparams,\n+                                const CBlockIndex** ppindex = nullptr)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n     //! Load the block tree and coins database from disk, initializing state if we're running with -reindex\n     bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      },
      {
        "sha": "fa598be1d0cadf65279b0ae7fb04d401f266796c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13350e9ce33a90659dd327745dd5568f2f3162a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13350e9ce33a90659dd327745dd5568f2f3162a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=f13350e9ce33a90659dd327745dd5568f2f3162a",
        "patch": "@@ -76,6 +76,7 @@ static void AddKey(CWallet& wallet, const CKey& key)\n }\n \n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n+EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* oldTip = ::ChainActive().Tip();\n@@ -175,7 +176,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     }\n }\n \n-BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* oldTip = ::ChainActive().Tip();\n@@ -240,7 +241,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n // greater or equal than key birthday. Previously there was a bug where\n // importwallet RPC would start the scan at the latest block with timestamp less\n // than or equal to key birthday.\n-BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n@@ -517,7 +518,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet.reset();\n     }\n \n-    CWalletTx& AddTx(CRecipient recipient)\n+    CWalletTx& AddTx(CRecipient recipient) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n     {\n         CTransactionRef tx;\n         CAmount fee;\n@@ -549,7 +550,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     std::unique_ptr<CWallet> wallet;\n };\n \n-BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n+BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\n "
      }
    ]
  },
  {
    "sha": "a6b05418c3932f05b389a67c23ba7327e4527056",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmIwNTQxOGMzOTMyZjA1YjM4OWE2N2MyM2JhNzMyN2U0NTI3MDU2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T14:36:24Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:31Z"
      },
      "message": "rpc: annotate SyncWithValidationInterfaceQueue()\n\nFix the following:\n\n```\nsrc/validationinterface.cpp:162:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "034d77be51d3f74e3ce99d58cc6cfd61a6a66dae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/034d77be51d3f74e3ce99d58cc6cfd61a6a66dae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6b05418c3932f05b389a67c23ba7327e4527056",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCsACgkQVN8G9ktV\ny7/b0h/7Bn0PzVjqlkXesT2RluBC01hcCHBhu13LLs6/qwAiEPwf3m7tBR8eE1lr\ngNDBig7Z8mOLfs6Jr0UoDgOj7P8mK3M6PgSBGF/hsooERg2WmRQC2AzxYLI49bFJ\nWoSOvlFRpm2onRK+KnpK+QG8vf3xFpfbFEx10Oh3hnG7cXwO6F2k55AXzRnkp9CT\nN61CKoGwtGqxQWHfDfthB9w82iAcgBt+dmJRDxMXjrt4ubkONTzUZf+tDL8dUt9s\nAObmNa7a1k1yoJZXgC6jAoJhXPE+BtLB231rfqnN4gfVvakX3HEOD6T1h13rf4pN\n7mPLYrXI7yPmGi91X3sauuPtIQdOKanxdJinIHpdrE8JMB2bIDrNyfuDKuJbyVHv\nva52Xmh4Giacv1rsiiOO7QfFTxUx9zhnD479sATWuuzwDNyor+YNHdn+WBAxzprj\ni3AySTTPCOigzcoHVf4beXlozDR5UNgaES0+t6df5+rCHbTXoHDZUCgdQnMHv2Vq\nGLLjvNRkjjN4LXaT3JqCvc0PuvOdMMJmnKvf5aYven4hADGE3SJ+n9rPNIfUiN45\nx182p+8rF7ZSJZ3TJtyu+zs8DMOWEBGeiTFEvzsucfHfoInk0nw4c4cuLynYNiF8\nm5HgbO2oFWlgOmhfjcoYBGCGFjBWhReOGc3Z4g6QomTrJUVbUmprthDet0QKO/Si\nsz37TFyY3yZD1jw8OMnJ+HQuAklygkf5EWtWMrKKPzUfre5nZeAuOBAJI+i7TBRK\n8qZpD/bknkW7erOJTpkmBMWJwNZkIe7P5TK0imbXwKe0b2aZR3JjuJvnAD+dF2T+\nlQuIztqXPqxeMJvKiMPFF9ZOyAmhvZzE00T4f8kiuIP1DEpwFlZM9Wa0NG9QdK3d\nABuuwl97rdQ+c8e6/xbG7L/jfGePkKZqeLE9LJEQ/w96H2RrdlLrw0MCb942yr9T\nynvnEN6a0yFQLjCzNanX5GLM/ocE1c6FLVDSdmKsQx+II9Vz32855hg+lXVg43dD\nZLuA+nIWZeOwJKMo/x9uzVfeW50+2uEeUoKcxIWfxDM5L3eJzUc/DukSe4EtEER6\n5DVv+O8jyrgEoEs/H/3meoma/nN8OYILP3cw5eImgrHpeKAWBYc/C6OYMVB6b807\ny8CHzBu8Sik8l+M+ZH1xfWO2dwU2YJZsyZuB/CtrcQVQUl86/toWKdO3HGxmO6a3\nc/crCs9ySjlF9qzPDVdoxupuxb8Hz/76au7INftPmDDORDS2klGp1aL8I6D2seQx\ngiq2J0wSmx1d2vr56x3A3+T3YDzA7RACIFuSfwhV7Z3oQg/bXLMemg4Yts5JBW9E\nxYvIca51dtIOWBGuC2Om6O2NNQJKTw==\n=gqX7\n-----END PGP SIGNATURE-----",
        "payload": "tree 034d77be51d3f74e3ce99d58cc6cfd61a6a66dae\nparent f13350e9ce33a90659dd327745dd5568f2f3162a\nauthor Vasil Dimov <vd@FreeBSD.org> 1604068584 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072491 +0100\n\nrpc: annotate SyncWithValidationInterfaceQueue()\n\nFix the following:\n\n```\nsrc/validationinterface.cpp:162:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_main' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_main);\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b05418c3932f05b389a67c23ba7327e4527056",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b05418c3932f05b389a67c23ba7327e4527056",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b05418c3932f05b389a67c23ba7327e4527056/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13350e9ce33a90659dd327745dd5568f2f3162a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13350e9ce33a90659dd327745dd5568f2f3162a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13350e9ce33a90659dd327745dd5568f2f3162a"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 31,
      "deletions": 11
    },
    "files": [
      {
        "sha": "98895555f82f47768c1119babf896fd68c5ecd88",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b05418c3932f05b389a67c23ba7327e4527056/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b05418c3932f05b389a67c23ba7327e4527056/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=a6b05418c3932f05b389a67c23ba7327e4527056",
        "patch": "@@ -12,7 +12,10 @@\n #include <validationinterface.h>\n #include <wallet/wallet.h>\n \n-static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const bool add_watchonly, const bool add_mine)\n+static void WalletBalance(benchmark::Bench& bench,\n+                          const bool set_dirty,\n+                          const bool add_watchonly,\n+                          const bool add_mine) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     TestingSetup test_setup{\n         CBaseChainParams::REGTEST,\n@@ -53,10 +56,25 @@ static void WalletBalance(benchmark::Bench& bench, const bool set_dirty, const b\n     });\n }\n \n-static void WalletBalanceDirty(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ true, /* add_watchonly */ true, /* add_mine */ true); }\n-static void WalletBalanceClean(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ true); }\n-static void WalletBalanceMine(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ false, /* add_mine */ true); }\n-static void WalletBalanceWatch(benchmark::Bench& bench) { WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ false); }\n+static void WalletBalanceDirty(benchmark::Bench& bench) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n+{\n+    WalletBalance(bench, /* set_dirty */ true, /* add_watchonly */ true, /* add_mine */ true);\n+}\n+\n+static void WalletBalanceClean(benchmark::Bench& bench) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n+{\n+    WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ true);\n+}\n+\n+static void WalletBalanceMine(benchmark::Bench& bench) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n+{\n+    WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ false, /* add_mine */ true);\n+}\n+\n+static void WalletBalanceWatch(benchmark::Bench& bench) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n+{\n+    WalletBalance(bench, /* set_dirty */ false, /* add_watchonly */ true, /* add_mine */ false);\n+}\n \n BENCHMARK(WalletBalanceDirty);\n BENCHMARK(WalletBalanceClean);"
      },
      {
        "sha": "f1e0e84b206b0f7e3c6085b71c29ae7aa373fb87",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b05418c3932f05b389a67c23ba7327e4527056/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b05418c3932f05b389a67c23ba7327e4527056/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=a6b05418c3932f05b389a67c23ba7327e4527056",
        "patch": "@@ -362,6 +362,7 @@ class ChainImpl : public Chain\n         return MakeUnique<NotificationsHandlerImpl>(std::move(notifications));\n     }\n     void waitForNotificationsIfTipChanged(const uint256& old_tip) override\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n     {\n         if (!old_tip.IsNull()) {\n             LOCK(::cs_main);"
      },
      {
        "sha": "86dabe53053331f672167b85e45ad72baf8bec63",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b05418c3932f05b389a67c23ba7327e4527056/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b05418c3932f05b389a67c23ba7327e4527056/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a6b05418c3932f05b389a67c23ba7327e4527056",
        "patch": "@@ -382,7 +382,8 @@ static RPCHelpMan syncwithvalidationinterfacequeue()\n                     HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n                 },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request)\n+            EXCLUSIVE_LOCKS_REQUIRED(!cs_main) -> UniValue\n {\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;"
      },
      {
        "sha": "5c6f9e7138af8e4805bc932773120396e77a23b1",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b05418c3932f05b389a67c23ba7327e4527056/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b05418c3932f05b389a67c23ba7327e4527056/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=a6b05418c3932f05b389a67c23ba7327e4527056",
        "patch": "@@ -58,7 +58,7 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  *     });\n  *     promise.get_future().wait();\n  */\n-void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main);\n+void SyncWithValidationInterfaceQueue() EXCLUSIVE_LOCKS_REQUIRED(!cs_main);\n \n /**\n  * Implement this to subscribe to events generated in validation"
      },
      {
        "sha": "ed0c1287e4f3781ad09ad910479b0f9925c9109d",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b05418c3932f05b389a67c23ba7327e4527056/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b05418c3932f05b389a67c23ba7327e4527056/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=a6b05418c3932f05b389a67c23ba7327e4527056",
        "patch": "@@ -47,7 +47,7 @@ static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n     return wallet;\n }\n \n-static void TestUnloadWallet(std::shared_ptr<CWallet>&& wallet)\n+static void TestUnloadWallet(std::shared_ptr<CWallet>&& wallet) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     SyncWithValidationInterfaceQueue();\n     wallet->m_chain_notifications_handler.reset();\n@@ -707,7 +707,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n //! wallet rescan and notifications are immediately synced, to verify the wallet\n //! must already have a handler in place for them, and there's no gap after\n //! rescanning where new transactions in new blocks could be lost.\n-BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     // Create new wallet with known key and unload it.\n     auto chain = interfaces::MakeChain(m_node);\n@@ -778,7 +778,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n     // deadlock during the sync and simulates a new block notification happening\n     // as soon as possible.\n     addtx_count = 0;\n-    auto handler = HandleLoadWallet([&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->wallet()->cs_wallet) {\n+    auto handler = HandleLoadWallet([&](std::unique_ptr<interfaces::Wallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->wallet()->cs_wallet, !cs_main) {\n             BOOST_CHECK(rescan_completed);\n             m_coinbase_txns.push_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n             block_tx = TestSimpleSpend(*m_coinbase_txns[2], 0, coinbaseKey, GetScriptForRawPubKey(key.GetPubKey()));\n@@ -801,7 +801,7 @@ BOOST_FIXTURE_TEST_CASE(CreateWalletFromFile, TestChain100Setup)\n     TestUnloadWallet(std::move(wallet));\n }\n \n-BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup)\n+BOOST_FIXTURE_TEST_CASE(ZapSelectTx, TestChain100Setup) EXCLUSIVE_LOCKS_REQUIRED(!cs_main)\n {\n     auto chain = interfaces::MakeChain(m_node);\n     auto wallet = TestLoadWallet(*chain);"
      }
    ]
  },
  {
    "sha": "7def9855a97ab6b142c90dd60f9ca0bb756dec36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGVmOTg1NWE5N2FiNmIxNDJjOTBkZDYwZjljYTBiYjc1NmRlYzM2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T14:45:05Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-30T15:41:31Z"
      },
      "message": "wallet: add missing annotations\n\nFix the following:\n\n```\nsrc/wallet/bdb.cpp:428:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_db' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_db);\n    ^\n```\n\nClang 12",
      "tree": {
        "sha": "347043ee15a72c2e817b066e747c25a6bbf50cd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347043ee15a72c2e817b066e747c25a6bbf50cd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7def9855a97ab6b142c90dd60f9ca0bb756dec36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+cNCsACgkQVN8G9ktV\ny7+EYx//TCRUrnD9YVYcjS7YdR+Fj0sVa6ZnA1mostU0kB1aLukvwQPTSSdKAbO8\noh/ZA8xz0GyE498TQNV9CZ26AEc/9giLBWq8zlbPWyK3J22w2y5GeiecVJ02Ihvf\nOnVDcYa3hH0ADx98tHbbWcn/5Y/zodqvc7tpwU3MeaKWn4IfXlbDvLERdJ1ZSv6B\nPUMiSG6RUz9CCJNYARxaj4cQn2SpghZle3sj0QVjEZ/+CNCoQAkaED/4smSaoK1u\no5KOu1F+Hm3z7xwA3dDVscT2xtzD/NBFqN566uRyBOToK2ri3qYqP/kQmnhSfCn7\nfH//h0zjPjjkHYzTlvkyTM3k7ekbUsG76a3N3NXUIwM46cqr5yjvhMK/oYoUJ87e\nMjbFVUzBqHQmlnmVuAcpDgvrW+Sc9nzRSYeucqYUWcMmjGyLSJ0OOpMKtMeQdfo3\ng9/C13aRGc2EbJjpszPtLYgvz3kxvMrLhr7B67hZ84Lf1VcO4o4I3gkNqQwOm4c2\nGm0TJ6vHX9gYMlnOmpwEZu80uIbH4xlren4z8AEthoN2gc1HQZ4alan4FRiY3HtT\n3Ym/iABSWPGKnSzlC99O6iC6ak7ATtz7qDljQLm6JXIKh/uesqQ201zqLMt3JwkR\nSj/OL2kSMRZuQjSb4UPkXuKI+byN/Z/OsuLZmya6oM/E2KTY6lNAbAcUpJ4t4siE\nlKoBtaj3s0LqOXHJ58hRg87Twh/WN4okgdUv3/zvo3BEEPNW+OQMvIG+Lf/1R89u\nwoyZf3WGwtKrJaz/c0wW/hXBdIGti4o6OqpoCQvRPMgFCOWXQkvGKwEEUy5gzJe0\nq1q1iUg2d6KLFzjMqyt2ImGqz7trhkm9OvLHKNa05jDqaLyuK6BB6zRQEH9GqSqB\nD1zemXp035Nlviply5Aqv9YtwB2RQ6nB8A/uQLkTV9eNmW0hFoARdP1w1gmT2YGN\nPHZfKvBJq6KU1wzMT3nZo7EpPA/mKvYu+iDrkx8mffDq72A3B/0wbmTNVN+z2HnK\nqGhgGrRJ7Z1jBBFYAsxGNbVI09tp0xqmaCpPjSNiNumxLzbN745TLV7Dm8t2ZDQN\nsXGhU2jKLd3UewcJ/+h0MzDtod2h2IcOYQeY6P6rDzUxRcXx05bbrYuxFgZtpCFM\n+bo9VbKQ78URkQ+7b1fR4IHwWXS67b0Bw/uP5mkIbz16e2mro81AT33pw97Bikk6\nNwV0gnJnmIhD/G40+MrOvkChH10APtwGR+FcSBxQ5FgfxaIAIIdk74auQ2b8Z7uQ\nEBDVJfDyCVCzMMnM3FW4XHJz8tMw+pnVUkTifeLfuxrKWhD/0Q5zBJmsvmThoyOk\n3vuxUmaD5zmiNFj4XldwtGCFRLRR0A==\n=Yz5m\n-----END PGP SIGNATURE-----",
        "payload": "tree 347043ee15a72c2e817b066e747c25a6bbf50cd1\nparent a6b05418c3932f05b389a67c23ba7327e4527056\nauthor Vasil Dimov <vd@FreeBSD.org> 1604069105 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604072491 +0100\n\nwallet: add missing annotations\n\nFix the following:\n\n```\nsrc/wallet/bdb.cpp:428:5: error: calling function 'AssertLockNotHeldInternal<AnnotatedMixin<std::__1::recursive_mutex>>' requires negative capability '!cs_db' [-Werror,-Wthread-safety-analysis]\n    AssertLockNotHeld(cs_db);\n    ^\n```\n\nClang 12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7def9855a97ab6b142c90dd60f9ca0bb756dec36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7def9855a97ab6b142c90dd60f9ca0bb756dec36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7def9855a97ab6b142c90dd60f9ca0bb756dec36/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6b05418c3932f05b389a67c23ba7327e4527056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b05418c3932f05b389a67c23ba7327e4527056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b05418c3932f05b389a67c23ba7327e4527056"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3054214bec2dff6507016e46088bfd519ea02bab",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7def9855a97ab6b142c90dd60f9ca0bb756dec36/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7def9855a97ab6b142c90dd60f9ca0bb756dec36/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=7def9855a97ab6b142c90dd60f9ca0bb756dec36",
        "patch": "@@ -422,7 +422,7 @@ void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n     }\n }\n \n-void BerkeleyEnvironment::ReloadDbEnv()\n+void BerkeleyEnvironment::ReloadDbEnv() EXCLUSIVE_LOCKS_REQUIRED(!cs_db)\n {\n     // Make sure that no Db's are in use\n     AssertLockNotHeld(cs_db);\n@@ -650,7 +650,7 @@ void BerkeleyDatabase::Close()\n     env->Flush(true);\n }\n \n-void BerkeleyDatabase::ReloadDbEnv()\n+void BerkeleyDatabase::ReloadDbEnv() EXCLUSIVE_LOCKS_REQUIRED(!cs_db)\n {\n     env->ReloadDbEnv();\n }"
      }
    ]
  }
]