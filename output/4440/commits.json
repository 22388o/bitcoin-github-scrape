[
  {
    "sha": "16f33f163d4e2c10320a96a22bbab71c9a0df195",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmYzM2YxNjNkNGUyYzEwMzIwYTk2YTIyYmJhYjcxYzlhMGRmMTk1",
    "commit": {
      "author": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-06-29T01:14:36Z"
      },
      "committer": {
        "name": "kazcw",
        "email": "keziahw@gmail.com",
        "date": "2014-06-29T02:16:15Z"
      },
      "message": "fix RPC error replies\n\nAfter pull #4288, RPC messages indicating errors have a Content-Length unrelated\nto their actual contents, rendering bitcoin-cli and curl unable to decode the\nreply.\n\nThis patch sets the Content-Length field based on the actual content returned.\n\nAdditionally, pull #4288 clobbered the error descriptions provided in\nErrorReply, which bitcoin-cli relies upon; this patch moves #4288 http-error\ndescriptions to an HTTPError method, allowing HTTPReply to pass content on\nunchanged.",
      "tree": {
        "sha": "79b08ef53736fad40976c529142530cd42689f1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79b08ef53736fad40976c529142530cd42689f1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16f33f163d4e2c10320a96a22bbab71c9a0df195",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f33f163d4e2c10320a96a22bbab71c9a0df195",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16f33f163d4e2c10320a96a22bbab71c9a0df195",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16f33f163d4e2c10320a96a22bbab71c9a0df195/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b8fc9d8ad4791269fb8439126b5ceff39217f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b8fc9d8ad4791269fb8439126b5ceff39217f56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b8fc9d8ad4791269fb8439126b5ceff39217f56"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 29,
      "deletions": 23
    },
    "files": [
      {
        "sha": "dd8692e802b58ff79ed5fef218621863a805cee3",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=16f33f163d4e2c10320a96a22bbab71c9a0df195",
        "patch": "@@ -54,8 +54,19 @@ static string rfc1123Time()\n     return DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", GetTime());\n }\n \n-string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n-                 bool headersOnly, const char *contentType)\n+static const char *httpStatusDescription(int nStatus)\n+{\n+    switch (nStatus) {\n+        case HTTP_OK: return \"OK\";\n+        case HTTP_BAD_REQUEST: return \"Bad Request\";\n+        case HTTP_FORBIDDEN: return \"Forbidden\";\n+        case HTTP_NOT_FOUND: return \"Not Found\";\n+        case HTTP_INTERNAL_SERVER_ERROR: return \"Internal Server Error\";\n+        default: return \"\";\n+    }\n+}\n+\n+string HTTPError(int nStatus, bool keepalive, bool headersOnly)\n {\n     if (nStatus == HTTP_UNAUTHORIZED)\n         return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n@@ -75,20 +86,13 @@ string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n             \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n             \"</HTML>\\r\\n\", rfc1123Time(), FormatFullVersion());\n \n-    const char *cStatus;\n-         if (nStatus == HTTP_OK) cStatus = \"OK\";\n-    else if (nStatus == HTTP_BAD_REQUEST) cStatus = \"Bad Request\";\n-    else if (nStatus == HTTP_FORBIDDEN) cStatus = \"Forbidden\";\n-    else if (nStatus == HTTP_NOT_FOUND) cStatus = \"Not Found\";\n-    else if (nStatus == HTTP_INTERNAL_SERVER_ERROR) cStatus = \"Internal Server Error\";\n-    else cStatus = \"\";\n-\n-    bool useInternalContent = false;\n-    if (nStatus != HTTP_OK) {\n-        contentType = \"text/plain\";\n-        useInternalContent = true;\n-    }\n+    return HTTPReply(nStatus, httpStatusDescription(nStatus), keepalive,\n+                     headersOnly, \"text/plain\");\n+}\n \n+string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n+                 bool headersOnly, const char *contentType)\n+{\n     return strprintf(\n             \"HTTP/1.1 %d %s\\r\\n\"\n             \"Date: %s\\r\\n\"\n@@ -99,14 +103,14 @@ string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n             \"\\r\\n\"\n             \"%s\",\n         nStatus,\n-        cStatus,\n+        httpStatusDescription(nStatus),\n         rfc1123Time(),\n         keepalive ? \"keep-alive\" : \"close\",\n-        strMsg.size(),\n+        (headersOnly ? 0 : strMsg.size()),\n         contentType,\n         FormatFullVersion(),\n-        (headersOnly ? \"\" :\n-            (useInternalContent ? cStatus : strMsg.c_str())));\n+        (headersOnly ? \"\" : strMsg.c_str())\n+        );\n }\n \n bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,"
      },
      {
        "sha": "5627077bfbf4333db305d9f9d6c80e78587f1079",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=16f33f163d4e2c10320a96a22bbab71c9a0df195",
        "patch": "@@ -141,6 +141,8 @@ class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidi\n };\n \n std::string HTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n+std::string HTTPError(int nStatus, bool keepalive,\n+                      bool headerOnly = false);\n std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive,\n                       bool headerOnly = false,\n                       const char *contentType = \"application/json\");"
      },
      {
        "sha": "f47b3385da6eb72890630c7bea15e8badd8917ba",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16f33f163d4e2c10320a96a22bbab71c9a0df195/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=16f33f163d4e2c10320a96a22bbab71c9a0df195",
        "patch": "@@ -481,7 +481,7 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n     {\n         // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n         if (!fUseSSL)\n-            conn->stream() << HTTPReply(HTTP_FORBIDDEN, \"\", false) << std::flush;\n+            conn->stream() << HTTPError(HTTP_FORBIDDEN, false) << std::flush;\n         conn->close();\n     }\n     else {\n@@ -807,7 +807,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n     // Check authorization\n     if (mapHeaders.count(\"authorization\") == 0)\n     {\n-        conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;\n+        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n         return false;\n     }\n \n@@ -820,7 +820,7 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n         if (mapArgs[\"-rpcpassword\"].size() < 20)\n             MilliSleep(250);\n \n-        conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;\n+        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n         return false;\n     }\n \n@@ -888,7 +888,7 @@ void ServiceConnection(AcceptedConnection *conn)\n             if (!HTTPReq_JSONRPC(conn, strRequest, mapHeaders, fRun))\n                 break;\n         } else {\n-            conn->stream() << HTTPReply(HTTP_NOT_FOUND, \"\", false) << std::flush;\n+            conn->stream() << HTTPError(HTTP_NOT_FOUND, false) << std::flush;\n             break;\n         }\n     }"
      }
    ]
  }
]