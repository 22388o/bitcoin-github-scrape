jonasschnelli,2017-08-08T20:53:51Z,"~~Rebased, overhauled and removed WIP tag.\nConforms now to BIP159.\nAdded 0.16 milestone tag.~~",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-321078772,321078772,
jonasschnelli,2017-08-11T19:34:37Z,~~Added a fingerprinting counter-measure which protects from leaking the prune depth by finding it through getdata requests (21c347c8c1a9ee4803b8f8f124185c218e01db76).~~,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-321900407,321900407,
jonasschnelli,2017-09-28T04:10:43Z,Fixed travis trailing whitespace in test issue.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-332722581,332722581,
jonasschnelli,2017-09-29T02:56:13Z,"~~Thanks for the review @TheBlueMatt. I agree with all you points and most things can now go away since the NODE_NETWORK_LIMITED_HIGH flag (1152 blocks minimum) is gone.~~\n\n~~Will overhaul and simplify it now.~~",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-333018185,333018185,
jonasschnelli,2017-10-01T04:22:37Z,Simplified the PR and addressed @TheBlueMatt and @fanquake points.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-333352493,333352493,
jonasschnelli,2017-10-04T03:53:25Z,"> This change prefers connecting to full nodes rather than pruned nodes even if fully synced. Why is that the desired approach?\n> [...]\n> I find that the required services/relevant services/alternative services stuff is getting confusing. If I'm reading it right, the order of preference is... [...]\n\nWe probably should avoid an abrupt change for pruned peers. This approach (alternative serv",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334043193,334043193,
jonasschnelli,2017-10-04T05:25:14Z,Addressed @theuni & @TheBlueMatt points. Now mentions BIP159 in `protocol.h` (found by @jimpo).,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334053167,334053167,
theuni,2017-10-04T21:04:42Z,"""Set NODE_NETWORK_LIMITED bit in pruned mode"" commit message is confusing now. Mind rewording it to reflect the new behavior?",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334289031,334289031,
jonasschnelli,2017-10-04T21:17:37Z,@theuni: overhauled that commit message.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334292226,334292226,
TheBlueMatt,2017-10-05T14:55:34Z,"The nRelevantServices stuff is somewhat already a mess, and trying to work within the current code is just getting messier :/. I spent a bit of time rewriting it and (mostly) like the outcome, its at https://github.com/TheBlueMatt/bitcoin/commit/2017-09-service-flags-cleanups - and I think basing this PR on it would simplify this one a lot. It sucks to add some functions to protocol.h/cpp, especia",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334490761,334490761,
theuni,2017-10-05T14:59:29Z,"Agree with @TheBlueMatt on taking that as a starting point. We discussed it a little, and I think defining functions for the filtered use-cases makes life much easier. @jonasschnelli it's kinda intrusive on the PR, but would it be possible to work that in?\n\nAs for making net not aware of service bits, I'm working on breaking addrman out right now. Should be pretty painless and a nice improveme",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-334492023,334492023,
jonasschnelli,2017-10-14T05:05:40Z,"Rebased (since #11456 is now merged). Tried to keep calls to `InitialBlockDownload()` to a minimum, therefore added `initialBlockDownloadCompleted` (bool) to `protocol.h`. Not sure if this is the best idea (ping @TheBlueMatt & @theuni).",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-336610623,336610623,
fanquake,2017-11-04T09:25:45Z,This needs a rebase.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-341883431,341883431,
gmaxwell,2017-11-10T02:33:17Z,"Perhaps this should be split into ""set the limited flag"" PR and make use of it, the setting is ultra trivial and could even be considered for backport, esp since the anti-fingerprinting part is a bugfix.\n\nThe actual use of the flag in our connection I think needs work,  we should be using our current time and our current headers to decide if LIMITED peers are likely useful to us. IsInitialBloc",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-343357330,343357330,
jonasschnelli,2017-11-15T20:45:30Z,"Rebased and worked in @TheBlueMatt and @gmaxwell point.\nIt's still based on `IsInitialBlockDownload()` but I have plans to implement @gmaxwell idea (which makes sense to me) to rely on out time and headers. ",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-344722807,344722807,
Sjors,2017-11-20T17:24:21Z,"This 288 blocks limit seems a bit overzealous, but I suppose it can be expanded later if nodes just assume 288 for un-upgraded peers.\n\nI couldn't find the discussion that led to that [change in BIP159](https://github.com/bitcoin/bips/commit/ee45bbc7c4962d4b551d730469749bb35df18757#diff-6535b2c529c4fce0dc36d586cc0b05f4), so maybe this was already brought up.\n\nThe node on my laptop is pruned",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-345766694,345766694,
Sjors,2017-11-20T17:38:26Z,"Found this (Google is more helpful when you search by name than by BIP number): https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014314.html (should be added to the References section in the BIP?)\n\nFrom that discussion:\n> The peak at syncing is at ~24 hours\n\nThis explains why even 288 is very useful (worth mentioning in the BIP).\n\nThere was some discussion around whic",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-345770763,345770763,
jonasschnelli,2017-11-20T20:05:47Z,"I think we should only discuss the implementation here. The BIP discussion belongs to the mailing list (https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/thread.html#14315).\n\nRevealing the prune depth is considered a fingerprinting weakness.\n\nThe current BIP and implementation is extendable. I'd like to start with a sane buffer 24h of blocks (144) + 144 block reorganisation ",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-345814463,345814463,
jonasschnelli,2017-12-12T19:42:48Z,"Rebased and removed the now merged signalling part.\nThis PR adds address relay and eventually connecting to NODE_NETWORK_LIMITED if we are out of IBD.\nNot sure, but maybe @gmaxwell [idea ](https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-343357330) should be implemented later?",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-351171415,351171415,
NicolasDorier,2017-12-14T07:03:22Z,Code review ACK. Might need in a follow up PR to kick limited peers when we go back in IBD though.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-351626166,351626166,
jonasschnelli,2018-01-09T07:01:36Z,"Rebased (needed due to the the node network test overhaul).\nFixed @jimpo's points.",https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-356197529,356197529,
jonasschnelli,2018-02-09T09:02:11Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-364375158,364375158,
laanwj,2018-02-14T16:15:37Z,utACK 3f56df5,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-365658285,365658285,
jonasschnelli,2018-02-17T10:30:41Z,Added a commit that hides the new `protocol.h/.cpp` global (`g_initial_block_download_completed`) behinds a setter (@laanwj / https://github.com/bitcoin/bitcoin/pull/10387#discussion_r168228007).,https://github.com/bitcoin/bitcoin/pull/10387#issuecomment-366432079,366432079,
fanquake,2017-09-26T02:46:55Z,nit: sending,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r140946427,140946427,src/net_processing.cpp
fanquake,2017-09-26T02:48:51Z,s/to must be available/required,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r140946594,140946594,src/validation.h
TheBlueMatt,2017-09-28T22:35:51Z,Looks like a rebase error - these functions were moved to the PeerLogicValidation.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141752640,141752640,src/net_processing.h
TheBlueMatt,2017-09-28T22:38:53Z,"Hmm, this feels pretty strange to me. Service bits indicate a commitment to provide certain services, not your current state. More importantly, IBD is always neccessarily fuzzy - we can't know how ""in sync"" we are.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141753062,141753062,src/net_processing.cpp
TheBlueMatt,2017-09-28T22:42:05Z,"Why? The BIP seems somewhat unclear here, but I'd stronlgy prefer that NODE_NETWORK_LIMITED simply be always set to indicate that we can always provide the most recent 288 blocks, irrespective of if we're pruned or not.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141753516,141753516,src/net_processing.cpp
TheBlueMatt,2017-09-28T22:45:31Z,"This seems entirely redundant - even if by super rare chance we end up due to reorg short of 288 blocks, we won't be *very* short of 288 blocks, and will be caught back up within the next block or two, might as well just always set NODE_NETWORK_LIMITED (you can static_assert MIN_BLOCKS_TO_KEEP is at least 288 if you really want to have a check).",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141754105,141754105,src/net_processing.cpp
TheBlueMatt,2017-09-28T22:52:04Z,"If you're gonna update this maybe overhaul the text? The concept of ""want network services but don't provide them"" doesn't really make sense anymore (especially with NODE_NETWORK_LIMITED). Maybe just say ""indicates peer is capable of serving the full historical block chain"".",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141755077,141755077,src/protocol.h
TheBlueMatt,2017-09-28T22:55:49Z,"I'm entirely unconvinced NODE_NETWORK_LIMITED needs this (and would prefer to avoid adding it until we need it, though its no big deal to add it).",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141755735,141755735,src/net.cpp
TheBlueMatt,2017-09-28T22:56:51Z,Why do we need to do this? You can't prune deeper than 128 and NODE_NETWORK is already unset for manually-pruned nodes.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141755926,141755926,src/rpc/blockchain.cpp
TheBlueMatt,2017-09-28T23:01:50Z,"This should use pfrom->GetLocalServices() not connman->GetLocalServices() - our decisions should be based on what we told the peer we support, not what we would tell a new peer to support.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r141756696,141756696,src/net_processing.cpp
TheBlueMatt,2017-10-03T14:02:04Z,"Hmm, I thought we were just going to alays set this? Why bother *only* setting it when pruned - a node that is not pruned is also capable of serving the last 288 blocks, which is the way I read the definition of NODE_NETWORK_LIMITED.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142410638,142410638,src/init.cpp
theuni,2017-10-03T17:34:14Z,"I agree. Came to complain about the same thing.\n\nNODE_NETWORK implies NODE_NETWORK_LIMITED, so _LIMITED should always be set.\nOtherwise, we're introducing negative service flags, which is a bad idea imo.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142469469,142469469,src/init.cpp
jimpo,2017-10-03T17:47:51Z,Perhaps reference BIP 159 in the comment here for additional explanation?,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142472985,142472985,src/protocol.h
jimpo,2017-10-03T17:51:01Z,We can avoid obtaining this lock if the alternative services is already NODE_NETWORK_LIMITED.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142473809,142473809,src/net_processing.cpp
theuni,2017-10-03T17:56:20Z,I'd rather not use fClient as a proxy for NODE_NETWORK_LIMITED. It deserves its own classification.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142475171,142475171,src/net_processing.cpp
theuni,2017-10-03T18:07:24Z,"nit: a default of without_foo = False isn't no bad thing for nobody.\n\nwith_time=True please :)",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142478180,142478180,test/functional/test_framework/mininode.py
jimpo,2017-10-03T18:08:14Z,"In this clause, should `nRequiredServices` get set to NODE_NETWORK_LIMITED if peer is in sync? Essentially, replace `REQUIRED_SERVICES` below with a value that goes from NODE_NETWORK to NODE_NETWORK_LIMITED when peer is out of IBD.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142478386,142478386,src/net.cpp
theuni,2017-10-03T18:40:13Z,"Yes, this needs its own bool so that fClient gets checked when testing for our initial headers-sync peer. Then, fPreferredDownload is only set to false if we're still in IBD.\n\nThat way, we request from this peer as if they were a regular full node as long as we're synced.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142486951,142486951,src/net_processing.cpp
jonasschnelli,2017-10-04T03:46:38Z,Okay. Agree... will change it.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142575819,142575819,src/init.cpp
jonasschnelli,2017-10-04T04:00:01Z,I think we should not connect to NODE_NETWORK_LIMITED peers if IBD is still ongoing. NODE_NETWORK_LIMITED implementations really should make sure to not serve deeper then >288 blocks (fingerprinted). Seems useless to me connect until clear IBD.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142576781,142576781,src/net_processing.cpp
jonasschnelli,2017-10-04T05:11:40Z,"IMO we want pruned peers for header sync... but right, we need a protection to not request blocks from limited peers during IBD.\nWhat about adding an `fLimitedNode` bool and check it at the point we populate vGetData with block requests?\n\nSeems also simpler and more constant (NODE_NETWORK_LIMITED is not really a ""client"").\n\nI changed this PR and applied my approach which I have written a",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142581998,142581998,src/net_processing.cpp
jimpo,2017-10-04T21:25:56Z,"Yeah, I understand that, but unless I'm missing something, this code is run every time there is a new block after IBD is done instead of happening only once. It seems possible to change the logic to exit before obtaining the lock if AlternativeServices has already been switched from NODE_NETWORK to NODE_NETWORK_LIMITED.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142797136,142797136,src/net_processing.cpp
jimpo,2017-10-04T21:39:32Z,"Seems that we would never connect to limited nodes because of the code on lines 1840-1847. `nRequiredServices` is set to either `nRelevantServices` or `REQUIRED_SERVICES`, never `nAlternativeServices`.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r142800110,142800110,src/net.cpp
promag,2017-10-07T08:35:09Z,Remove `== True`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326141,143326141,test/functional/test_framework/mininode.py
promag,2017-10-07T08:35:27Z,Remove `== True`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326146,143326146,test/functional/test_framework/mininode.py
promag,2017-10-07T08:35:38Z,Remove `== true`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326148,143326148,src/net.cpp
promag,2017-10-07T08:35:46Z,Remove `== true`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326152,143326152,src/net.cpp
promag,2017-10-07T08:36:35Z,"Nit, space after `#` here and below.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326166,143326166,test/functional/node_network_limited.py
promag,2017-10-07T08:37:06Z,`self.restart_node(0)`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r143326177,143326177,test/functional/node_network_limited.py
TheBlueMatt,2017-11-06T22:05:22Z,"This would result in us *only* connecting to NODE_NETWORK_LIMITED after IBD - I think this should be:\n```\nif (services & NODE_NETWORK_LIMITED && initialBlockDownloadCompleted) return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\nreturn ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n```",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r149217800,149217800,src/protocol.h
TheBlueMatt,2017-11-06T22:36:49Z,"The commit message is weird here - this function is intended to be used to decide whether a node may be a useful feeler, and thus the commit message should be about relayed addresses *from* nodes with NODE_NETWORK_LIMITED set. But since we also use it in ADDR message processing, it kinda means both - I think we should change the ADDR message processing to MayHaveUsefulAddressDB || HasAllDesirableS",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r149224854,149224854,src/protocol.h
gmaxwell,2017-11-10T02:34:00Z,"This needs to disconnect, I think.  Otherwise we DOS attack our peer, causing them to take a 20 minute timeout on their attempted request to fetch a block they think we're doing to provide.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r150142173,150142173,src/net_processing.cpp
promag,2017-11-29T01:21:25Z,service bit (singular)?,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r153672196,153672196,doc/bips.md
promag,2017-11-29T01:25:45Z,Add space after `#` so that the arrows below point to the correct bits.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r153672712,153672712,test/functional/node_network_limited.py
TheBlueMatt,2017-12-12T19:16:31Z,"Can you move this update to UpdatedBlockTip? (it already has an fInitialDownload instead of having to call IsInitialDownload, even).",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156467289,156467289,src/net_processing.cpp
jonasschnelli,2017-12-12T19:40:09Z,"This code part doesn't add a new call, it just preserves the state of the result of `IsInitialBlockDownload()` in the new `IsInitialBlockDownload` variable.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156474035,156474035,src/net_processing.cpp
jonasschnelli,2017-12-12T19:40:53Z,Fixed,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156474256,156474256,src/protocol.h
NicolasDorier,2017-12-13T02:44:44Z,On https://github.com/bitcoin/bitcoin/pull/10387/files#diff-eff7adeaec73a769788bb78858815c91R1625 you are defining a limitedPeer as one which does not have `NODE_NETWORK` and which have `NODE_NETWORK_LIMITED`. Which is different from this logic which check only if `NODE_NETWORK_LIMITED` is available. I think the logic should be consistent.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156552549,156552549,src/protocol.h
jonasschnelli,2017-12-13T06:12:59Z,"I can't follow you comment.\n`pfrom->fLimitedNode` is set to true if the peer does not signal `NODE_NETWORK` but signals `NODE_NETWORK_LIMITED`.\nAt this point `GetDesirableServiceFlags()`, we should return `NODE_NETWORK_LIMITED` (not `NODE_NETWORK`) if we are out of IBD. I think this is correct,... ",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156571525,156571525,src/protocol.h
NicolasDorier,2017-12-13T06:32:43Z,"I am not talking about the return value, in other words, this is what I would have done:\n\n```\nvar limited =  (!(services & NODE_NETWORK) && (services & NODE_NETWORK_LIMITED));\nif (limited && initialBlockDownloadCompleted) return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\nreturn ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n```\n\nThe reason is that this is how you define if a pe",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156573530,156573530,src/protocol.h
jonasschnelli,2017-12-13T06:52:34Z,I don't think we should check for `!(services & NODE_NETWORK)` because we also want to connect to NODE_NETWORK peers... but we are also happy by connecting to a peer that has `NODE_NETWORK_LIMITED` but not `NODE_NETWORK`.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156575785,156575785,src/protocol.h
NicolasDorier,2017-12-13T07:38:15Z,"Imagine the following scenario:\n\n* You are not in IBD, connect to peers only with `NODE_NETWORK|NODE_NETWORK_LIMITED`\n* For some reason, you start being in IBD once again.\n\nNow your node is stuck because of [this](https://github.com/bitcoin/bitcoin/pull/10387/files#diff-eff7adeaec73a769788bb78858815c91R3598).\n\nAn alternative fix would be to only check for `NODE_NETWORK_LIMITED` [here",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156581389,156581389,src/protocol.h
TheBlueMatt,2017-12-13T16:50:10Z,"Yes, I'm suggesting you move the update of initialBlockDownloadCompleted to UpdatedBlockTip instead of BlockChecked.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156716617,156716617,src/net_processing.cpp
jonasschnelli,2017-12-13T19:32:01Z,"> In general I think it is weird that we treat differently NODE_NETWORK|NODE_NETWORK_LIMITED peer from NODE_NETWORK peers.\n\nI think we have to. Otherwise we would never connect to pruned peers... what we want is also considering connecting to pruned if we are not deeper then 144 blocks from the expected tip.\n\n> For some reason, you start being in IBD once again.\n\nI think there you are ",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156759256,156759256,src/protocol.h
jonasschnelli,2017-12-13T19:33:00Z,I see. Fixed.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156759517,156759517,src/net_processing.cpp
NicolasDorier,2017-12-14T03:54:02Z,"`NODE_NETWORK|NODE_NETWORK_LIMITED` makes no sense to me. I was under the impression that if a peer was serving only limited block it would be `NODE_NETWORK_LIMITED`. If the peer can serve more, it would be `NODE_NETWORK`.\n\nSo what is the meaning of a peer `NODE_NETWORK|NODE_NETWORK_LIMITED` ? I would argue that this mean they can serve historical blocks, so they should be considered as if the",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156848811,156848811,src/protocol.h
jonasschnelli,2017-12-14T06:06:54Z,"As of BIP159, `NODE_NETWORK_LIMITED` signals that a peer has the last 288 blocks. This is ""always"" true for a NODE_NETWORK peer. This was chosen because services are a bit-set and bits should not depend on each other.\n\nConclusion:\n* `NODE_NETWORK` (unpruned peer, can serve the complete history)\n* `NODE_NETWORK_LIMITED ^NODE_NETWORK` (no NODE_NETWORK) (can serve the last 288 blocks but can'",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156861038,156861038,src/protocol.h
NicolasDorier,2017-12-14T07:01:39Z,"OK I got it now. Thanks for explanation, this is fine to me.",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r156866958,156866958,src/protocol.h
jimpo,2018-01-04T08:22:07Z,nit: I believe it should be `g_initial_block_download_completed` per style guidelines.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r159598321,159598321,src/protocol.h
jimpo,2018-01-04T08:23:51Z,nit: `m_limited_node`?,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r159598539,159598539,src/net.h
jimpo,2018-01-04T08:32:08Z,nit: Please put parentheses around `services & NODE_NETWORK_LIMITED` so it's easier to visually parse. And put the return on the next line as this one is rather long.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r159599631,159599631,src/protocol.h
jimpo,2018-01-04T19:45:18Z,"I think it's more clear to call with keyword arguments for boolean options: `deserialize(f, with_time=False)`. Same for invocations below.\n  ",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r159738970,159738970,test/functional/test_framework/messages.py
laanwj,2018-02-14T16:13:26Z,Agree; using a named argument would make this code more readable.,https://github.com/bitcoin/bitcoin/pull/10387#discussion_r168225372,168225372,test/functional/test_framework/messages.py
laanwj,2018-02-14T16:19:39Z,"I don't like that we need to introduce a global here, especially one that has to be accessible externally (in the header file).\nAny drawback to moving `GetDesirableServiceFlags` to the .cpp instead?",https://github.com/bitcoin/bitcoin/pull/10387#discussion_r168228007,168228007,src/protocol.h
