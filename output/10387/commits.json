[
  {
    "sha": "31c45a927eaac934fb237433f156907092bf1d11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWM0NWE5MjdlYWFjOTM0ZmIyMzc0MzNmMTU2OTA3MDkyYmYxZDEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-14T04:17:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:07Z"
      },
      "message": "Accept addresses with NODE_NETWORK_LIMITED flag",
      "tree": {
        "sha": "bd56a61a56a182b2fb8078c0c058a14919e06e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd56a61a56a182b2fb8078c0c058a14919e06e4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31c45a927eaac934fb237433f156907092bf1d11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YicACgkQHrd2uwPH\nki0sxw//QstZfryFaABRLDvs7l9NQdsL9X4IW4S32A5XGAzA/K0qlu55Pfwn0k/6\nz+w+Qb+HnyH4sgsSykIWXmVOAt9W+TCLhICtLCzwbMAU/978KxDcTVP+xY50HJU7\nC9Zv8SuGT+M4zyQLyuG7oQkCjdnNWsMVZcFMQjV9C6BQjzpNZjQIaWLtwjOKzbIt\nO7XcggQmrI2uu/BMuhgWOVjcJlu3HMyDbVfCR7zQ4v5QbPBT2OVmhXxui29QygBY\ni/JbVpvvVqyCSGtnVmjuvmlyFqjHFNUMYSUBrTCCSFba6Z53BXADHwOJdKDDuVVA\nRdwNhnlq1XNv1XDCcTJ2FaMSdhEJqtjYR0y5nRZbDy1YVP02KBhZEnUvdsVdICM8\nkMS0pvMNyybaADaGdQX6oDoUiHsZWNOBctwI99/n8IfW5mqaNDWwGkCVMTwh0Aya\nBuTJz4m7f/ZWyHeCiZNMAOf4B2EqHKUfdvRLyaOwJPCvpoCQZkc1LmsthGcrtMBT\nQKs/H3KFfTuuHnUoKdO5T/yHKm0b5n6TzKKzp3yMOZ8o8xsNfCGxTSFg90l8XShr\nzEo/GCvf1Ns2nm5adqDEviw4MWBTzQZp9YZKxZMJwBKobhlui5FK15WuPIQGfOfQ\nC5od3l+AW1XikTCVzcECt57Yxv2xI7EaBJOd2MOIifyzK3wJaXM=\n=9+q8\n-----END PGP SIGNATURE-----",
        "payload": "tree bd56a61a56a182b2fb8078c0c058a14919e06e4e\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507954671 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166567 +1100\n\nAccept addresses with NODE_NETWORK_LIMITED flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31c45a927eaac934fb237433f156907092bf1d11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f6337129121c7d3b4ea7cc106d6829b74ba0c4af",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c45a927eaac934fb237433f156907092bf1d11/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c45a927eaac934fb237433f156907092bf1d11/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=31c45a927eaac934fb237433f156907092bf1d11",
        "patch": "@@ -1801,7 +1801,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // We only bother storing full nodes, though this may include\n             // things which we would not make an outbound connection to, in\n             // part because we may make feeler connections to them.\n-            if (!MayHaveUsefulAddressDB(addr.nServices))\n+            if (!MayHaveUsefulAddressDB(addr.nServices) && !HasAllDesirableServiceFlags(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)"
      },
      {
        "sha": "ec5f55e4f6784cc44e0f2fcd7adc087c3be021cf",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c45a927eaac934fb237433f156907092bf1d11/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c45a927eaac934fb237433f156907092bf1d11/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=31c45a927eaac934fb237433f156907092bf1d11",
        "patch": "@@ -316,10 +316,10 @@ static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n- * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ * robust address-storage DB.\n  */\n static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n-    return services & NODE_NETWORK;\n+    return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n /** A CService with information about it as peer */"
      }
    ]
  },
  {
    "sha": "6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmU1N2JkYWFjMTdkNDlhZjllYzdmMzZjMTQxNGQ1ZDJiY2VjNTY0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-14T04:48:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:10Z"
      },
      "message": "Connect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD",
      "tree": {
        "sha": "468056c4529bc345ea568336de7ffd17324f2daa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/468056c4529bc345ea568336de7ffd17324f2daa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YioACgkQHrd2uwPH\nki3BKBAAxCtbr18qHYrtVI6/uj3+H6W6fwNoxNk4qP7C8BZaz0LGVqvp/Rqy6rXz\n5e1adTLWIxNdLhLwBeEmW2HF9ddWQl8MrJmTqIpRUUy91bq2kYSFosr6nJES/+WC\nfL9scsk6oYlUqocKBrlLsmFM7Vmsj9vb9ZTmUR96C+TbsFO35o0l+HrvMod7A7EK\nZd5Z2xPc52Dq9csbBdI9LLGBRItdu3l1io3KHngQ8cxwqa/WquHoQJA5gB+6Cvyr\nB5PDlPy52cdFFpXHrvuXA79UboFJJz+yr+IAxdcHhhmJE3KNpU9WkjSN1bSaK8Aw\ny4h6SCcW8q+3j8IGyA8FjRsobmfgTsQCH8fqw2mNoeCoa2edj62V8GF1L18tn7aV\nF0Jm6tWfbmeI/BMnLE/faqW4an7TsSNyHQKlZs8gZ+4WLinIrNTETmKT/TrZBvhJ\n+bRAvpRTbGq2ev5JhCrrrNtarVwd52IXeyjqybsjhxSoFg9Z2zvz6i/q2qEytsNE\nD74mwzRwGNDIc1KunJbipDmlj9ML9kU6p/s+byltN8tKivGQ07lo4rXsKHD3L4Zp\ny/sTQpH4y7kmozwISbztJ1MtHEjNGkgaKkqadiTi/c+bGjUKDq0uPCdsVtBqXwKj\nuEzXlIMjo3EB6UoC5wZRZW8fXSg54+4m2eSnWaizkuSyK+L5UKI=\n=mtYR\n-----END PGP SIGNATURE-----",
        "payload": "tree 468056c4529bc345ea568336de7ffd17324f2daa\nparent 31c45a927eaac934fb237433f156907092bf1d11\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507956480 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166570 +1100\n\nConnect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31c45a927eaac934fb237433f156907092bf1d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31c45a927eaac934fb237433f156907092bf1d11"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b4b43c3badf00019d155fbdde6740bce45ad41c1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -2710,6 +2710,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     m_manual_connection = false;\n     fClient = false; // set by version message\n+    m_limited_node = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;"
      },
      {
        "sha": "db0a1e62bbc49add71ea1604e225718ef4aa9445",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -643,6 +643,7 @@ class CNode\n     bool fOneShot;\n     bool m_manual_connection;\n     bool fClient;\n+    bool m_limited_node; //after BIP159\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;"
      },
      {
        "sha": "55d404d91ed2c2773f043849d3de263934597deb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -892,6 +892,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n+    g_initial_block_download_completed = !fInitialDownload;\n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain.\n         std::vector<uint256> vHashes;\n@@ -1642,7 +1643,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->cleanSubVer = cleanSubVer;\n         }\n         pfrom->nStartingHeight = nStartingHeight;\n-        pfrom->fClient = !(nServices & NODE_NETWORK);\n+\n+        // set nodes not relaying blocks and tx and not serving (parts) of the historical blockchain as \"clients\"\n+        pfrom->fClient = (!(nServices & NODE_NETWORK) && !(nServices & NODE_NETWORK_LIMITED));\n+\n+        // set nodes not capable of serving the complete blockchain history as \"limited nodes\"\n+        pfrom->m_limited_node = (!(nServices & NODE_NETWORK) && (nServices & NODE_NETWORK_LIMITED));\n+\n         {\n             LOCK(pfrom->cs_filter);\n             pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n@@ -3611,7 +3618,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         // Message: getdata (blocks)\n         //\n         std::vector<CInv> vGetData;\n-        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);"
      },
      {
        "sha": "ea78ab6856f6d13924327dd00f66eafebfd9a7a4",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -12,6 +12,8 @@\n # include <arpa/inet.h>\n #endif\n \n+std::atomic<bool> g_initial_block_download_completed(false);\n+\n namespace NetMsgType {\n const char *VERSION=\"version\";\n const char *VERACK=\"verack\";"
      },
      {
        "sha": "4907c38e5c3d18294bc762c91db73bb3d75ca619",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -15,6 +15,7 @@\n #include <uint256.h>\n #include <version.h>\n \n+#include <atomic>\n #include <stdint.h>\n #include <string>\n \n@@ -277,6 +278,7 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+extern std::atomic<bool> g_initial_block_download_completed;\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *\n@@ -302,6 +304,9 @@ enum ServiceFlags : uint64_t {\n  * should be updated appropriately to filter for the same nodes.\n  */\n static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n+        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n+    }\n     return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n }\n "
      }
    ]
  },
  {
    "sha": "fa999affad115c09743f8b1f5812326c19753ba9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk5OWFmZmFkMTE1YzA5NzQzZjhiMWY1ODEyMzI2YzE5NzUzYmE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-11T12:59:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] Allow addrman loopback tests (add debug option -addrmantest)",
      "tree": {
        "sha": "11e8bb9fd8461423b5cea415be01f38cff9a82d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11e8bb9fd8461423b5cea415be01f38cff9a82d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa999affad115c09743f8b1f5812326c19753ba9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki0tVRAAizI+OXlmNTwm6focVpgGZJ0O6S1yMnA+j2t92ug6hurknYL6lKtsPi3i\ngd3+t6rNCrF599dAjoL53L0H0UojMmZYfZ5fI/aeXimviPluQKk8KE3AhOfGVCth\nEiv2kglNhqNTL38tAMAJqoYHo48dLyfTyj4fvpovdi//fSC/lP8EIjAtpFFh+RTh\npkVoXeEwQTiNrdQwqP/geU5iJsQ1U1Sb6YF8kT6QDcA/hugsFK5+KYWtWlyopzP0\nGYe1vmta3kKyFyDeVRQL4cohe7Ywx7ZBdVRVg3R7UXiV+UWWlLxuCZxpfq46hOzp\nvMH3h3Vu7lI6gRgSWLd66CK9AjtLOFg99a6/OQZEULdlcdgmZUuNRiOV4Qv2ct4Q\nF1DsHRCc8yXqMwJpMJHE/4okggqKbxRYNhmOxDMFBLPlQGkpsxIrAAHiqzwOXNjw\nGOs3YlN7hji5EytPJ4RN7FAd8Uj5m+Dnz3blDJ6tTr8iVHd7Rdb3KyZ11y3QY5iE\nce7kEAdtSzh+LL2DsPRVJtAHHZ0WKalx925vdFduBXjh7wzQN1Ugb2yk8e+0Ogxt\nF1B7KS1d0KR0+J8XaJMgVdN8oUpKdF8ecZpZd9CXoDTrcQIWp9OugLQ6VwJFZ6fl\nW9LhDRVWVPvj2kTFQeGkQ0jaP0qy7ZrhkOZM8CS6/7ZXMImE1gQ=\n=twNB\n-----END PGP SIGNATURE-----",
        "payload": "tree 11e8bb9fd8461423b5cea415be01f38cff9a82d7\nparent 6fe57bdaac17d49af9ec7f36c1414d5d2bcec564\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1494507597 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] Allow addrman loopback tests (add debug option -addrmantest)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa999affad115c09743f8b1f5812326c19753ba9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "79365d49352f60b2e3f7ff7fce8603867d48eb99",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa999affad115c09743f8b1f5812326c19753ba9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa999affad115c09743f8b1f5812326c19753ba9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa999affad115c09743f8b1f5812326c19753ba9",
        "patch": "@@ -447,6 +447,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n     }\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");"
      },
      {
        "sha": "ea6360f38869dae4e39b90a5f051ca1891320165",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa999affad115c09743f8b1f5812326c19753ba9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa999affad115c09743f8b1f5812326c19753ba9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa999affad115c09743f8b1f5812326c19753ba9",
        "patch": "@@ -181,6 +181,10 @@ void AdvertiseLocal(CNode *pnode)\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n         CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n+            // use IPv4 loopback during addrmantest\n+            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode->GetLocalServices());\n+        }\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n@@ -189,7 +193,7 @@ void AdvertiseLocal(CNode *pnode)\n         {\n             addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n-        if (addrLocal.IsRoutable())\n+        if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n         {\n             LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n             FastRandomContext insecure_rand;"
      }
    ]
  },
  {
    "sha": "158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNThlMWE2ZjBmNTEyOTZmODBmYzU1ZTRlM2I3NzEyMTI4ZjdhNjhi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-11T19:54:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] fix mininode CAddress ser/deser",
      "tree": {
        "sha": "3e73e70ea5c92260d06ba111f097d417bb249720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e73e70ea5c92260d06ba111f097d417bb249720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki25pw//bhUEf6glsHGat1G1hYAd5IINq5CEi1P4TKLlcCWeYNITDdTn2zeTsALj\n/crfVXMPZFFvXuw/8mP55USmRivrGT1exwmhCiYtHOo7kJFdrwrAE/YZEqwu5oMv\nCQ6I7N6e3H+Y7fLCh1yQHh608+yiVuIdXKv+KBsx0V0Su5OhCdxJdZk6G37FCXXX\nzNFx/bBq+SzLJYdGe2yjHWL1clHLX3nlY7PivTdFkHvww1AxANLbvwhqDLc83Lj/\nUKrsWRdliHfy7UL5ELFZl7kjWfX1Gwb6rKtPraVOtB6XFeVoVtKy8HsTWKjDE4Dg\nQAn70D/W3VoMpJChctI/fZW/ECJMqueJUVZacrDWGiFp476KE/6Kb/E2GgbYLoZa\nYHnBAtjUpMmdLpXELpIeoBAPR1m1PNEcMAtZvtD0mGBnipn623K4QQgOowUUQmBx\nol+5kmNl1BP1ClSLV0tfzFEcWuSFteQVyPoQ52NqaBTEqC1U6ksZixwU+ws+tT4i\nJ9uVg9/38lcUx9bZvrk0PuDLRrivfej+rEIaAgpg0igHZ8ifCcYJiEmwfv+I08Rj\n3hnJX1zSb0EDFKRDn97d3cjK9FON/mpt0l+pFzZOEGCl9EOq8qgzYCk3RFGs9gk5\nBiYNvAoOldBb/u0Ym5fl7MMFNYNChNzb3RD7EWi5t5/DCwa0egA=\n=MBEy\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e73e70ea5c92260d06ba111f097d417bb249720\nparent fa999affad115c09743f8b1f5812326c19753ba9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513022053 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] fix mininode CAddress ser/deser\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa999affad115c09743f8b1f5812326c19753ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa999affad115c09743f8b1f5812326c19753ba9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ca92c51d3ef0d573dfe0ed60fd3b56663d56c9e3",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "patch": "@@ -181,19 +181,24 @@ def ToHex(obj):\n \n class CAddress():\n     def __init__(self):\n+        self.time = 0\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n-    def deserialize(self, f):\n+    def deserialize(self, f, with_time=True):\n+        if with_time:\n+            self.time = struct.unpack(\"<i\", f.read(4))[0]\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.pchReserved = f.read(12)\n         self.ip = socket.inet_ntoa(f.read(4))\n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n-    def serialize(self):\n+    def serialize(self, with_time=True):\n         r = b\"\"\n+        if with_time:\n+            r += struct.pack(\"<i\", self.time)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += self.pchReserved\n         r += socket.inet_aton(self.ip)\n@@ -853,11 +858,11 @@ def deserialize(self, f):\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n         self.addrTo = CAddress()\n-        self.addrTo.deserialize(f)\n+        self.addrTo.deserialize(f, False)\n \n         if self.nVersion >= 106:\n             self.addrFrom = CAddress()\n-            self.addrFrom.deserialize(f)\n+            self.addrFrom.deserialize(f, False)\n             self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n             self.strSubVer = deser_string(f)\n         else:\n@@ -885,8 +890,8 @@ def serialize(self):\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += struct.pack(\"<q\", self.nTime)\n-        r += self.addrTo.serialize()\n-        r += self.addrFrom.serialize()\n+        r += self.addrTo.serialize(False)\n+        r += self.addrFrom.serialize(False)\n         r += struct.pack(\"<Q\", self.nNonce)\n         r += ser_string(self.strSubVer)\n         r += struct.pack(\"<i\", self.nStartingHeight)"
      }
    ]
  },
  {
    "sha": "3f56df5b7564878330ddddddec8afa923a4f8390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjU2ZGY1Yjc1NjQ4NzgzMzBkZGRkZGRlYzhhZmE5MjNhNGY4Mzkw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-09T07:00:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] add NODE_NETWORK_LIMITED address relay and sync test",
      "tree": {
        "sha": "2aff96e797d1be11aa9bbdc2d470fcac45eea49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aff96e797d1be11aa9bbdc2d470fcac45eea49d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki3HLw//btyASIjITadfiMW34iRGZabZIcbk53TEY1iatsQs6Y5muebH0IXgltTM\nyT2CnW8hYXti9jqiHpfk5zy/t5pztTkVPooPSiMccerFtza7E1Blr2FhpDyO7DTt\nWm0iS4paHQIh0iCyRz3lrGesnC16trMjefzgfdSdFhsBfpy5WZj7ruWp0sUVG/Ec\nvVah7DL1+HgFWbITwVBdzcWK6Rdhy/YYQLb2dZrCbirAHBl/DbL3K8pLnWcCT9K0\nXU0IbgUZCik3bS4ciDt7LqeD4/xlYPVXkOi2V0TKy4WvtfqS/z6fkuKY11Ovd3bx\nKOjNNmu+Skvfw6i/DAJh6owb8bJRg7yGVK46DXVfj4d7ja1eqPWQ+MD/NzPRFe4w\nKJdPvtKyrpNB4yYVEqS6nfPfSH5SwYXSeV6QVtgmnZYA0zhq+O6X6gfBeNQm9XDr\nxn8jIG8i3yt6IaRDCXg4ne/Alcb1wJBiEU9cT5gb504oA0zb5nUXReUSD5PyZiav\nsJ1HWux5TNN7I0hAbCfIzDzuRYY6CLxRWjpNv38VLx04QnNLrI1OqeuVDd9oiNK5\nAMn/6NaTA4UDuKVUfd9EX7Khu+G2vCrW79rbNk0Ukioq1YkeMsr56cue2xvzoaK9\n7WaQgBU/3+JONYAuuUKommtfjlYGwp2A38ibNGPX2WyzcEgc0tM=\n=rWKc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2aff96e797d1be11aa9bbdc2d470fcac45eea49d\nparent 158e1a6f0f51296f80fc55e4e3b7712128f7a68b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1515481235 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] add NODE_NETWORK_LIMITED address relay and sync test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56df5b7564878330ddddddec8afa923a4f8390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/158e1a6f0f51296f80fc55e4e3b7712128f7a68b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 70,
      "deletions": 8
    },
    "files": [
      {
        "sha": "81a41d6a977b3c604d34de3de24c931a1536c794",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 70,
        "deletions": 8,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f56df5b7564878330ddddddec8afa923a4f8390/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f56df5b7564878330ddddddec8afa923a4f8390/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=3f56df5b7564878330ddddddec8afa923a4f8390",
        "patch": "@@ -8,16 +8,21 @@\n and that it responds to getdata requests for blocks correctly:\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n-from test_framework.messages import CInv, msg_getdata\n-from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n+from test_framework.messages import CInv, msg_getdata, msg_verack\n+from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, P2PInterface, wait_until, mininode_lock, network_thread_start, network_thread_join\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks\n \n class P2PIgnoreInv(P2PInterface):\n+    firstAddrnServices = 0\n     def on_inv(self, message):\n         # The node will send us invs for other blocks. Ignore them.\n         pass\n-\n+    def on_addr(self, message):\n+        self.firstAddrnServices = message.addrs[0].nServices\n+    def wait_for_addr(self, timeout=5):\n+        test_function = lambda: self.last_message.get(\"addr\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n     def send_getdata_for_block(self, blockhash):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n@@ -26,12 +31,24 @@ def send_getdata_for_block(self, blockhash):\n class NodeNetworkLimitedTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [['-prune=550']]\n+        self.num_nodes = 3\n+        self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n+\n+    def disconnect_all(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[1], 0)\n+        disconnect_nodes(self.nodes[2], 1)\n+        disconnect_nodes(self.nodes[2], 0)\n+        disconnect_nodes(self.nodes[0], 2)\n+        disconnect_nodes(self.nodes[1], 2)\n+\n+    def setup_network(self):\n+        super(NodeNetworkLimitedTest, self).setup_network()\n+        self.disconnect_all()\n \n     def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        NetworkThread().start()\n+        network_thread_start()\n         node.wait_for_verack()\n \n         expected_services = NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED\n@@ -43,7 +60,9 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        blocks = self.nodes[0].generate(292)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        blocks = self.nodes[1].generate(292)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrive block at tip-288.\")\n         node.send_getdata_for_block(blocks[1])  # last block in valid range\n@@ -53,5 +72,48 @@ def run_test(self):\n         node.send_getdata_for_block(blocks[0])  # first block outside of the 288+2 limit\n         node.wait_for_disconnect(5)\n \n+        self.log.info(\"Check local address relay, do a fresh connection.\")\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+        node1 = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n+        network_thread_start()\n+        node1.wait_for_verack()\n+        node1.send_message(msg_verack())\n+\n+        node1.wait_for_addr()\n+        #must relay address with NODE_NETWORK_LIMITED\n+        assert_equal(node1.firstAddrnServices, 1036)\n+\n+        self.nodes[0].disconnect_p2ps()\n+        node1.wait_for_disconnect()\n+\n+        # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n+        # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n+        connect_nodes_bi(self.nodes, 0, 2)\n+        try:\n+            sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n+        except:\n+            pass\n+        # node2 must remain at heigh 0\n+        assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n+\n+        # now connect also to node 1 (non pruned)\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        # sync must be possible\n+        sync_blocks(self.nodes)\n+\n+        # disconnect all peers\n+        self.disconnect_all()\n+\n+        # mine 10 blocks on node 0 (pruned node)\n+        self.nodes[0].generate(10)\n+\n+        # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+\n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      }
    ]
  },
  {
    "sha": "eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjkxODM1MzVkNWZjMmRmZThjMGUyNjM3OGYyNjIxZDM0NzNjMzAz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T10:28:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T10:28:50Z"
      },
      "message": "Add setter for g_initial_block_download_completed",
      "tree": {
        "sha": "70b48dc82edef8dd5d44424e46143fff8e0581c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70b48dc82edef8dd5d44424e46143fff8e0581c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqIA/IACgkQHrd2uwPH\nki2RdQ//eqwdT+MIHSdttrUKM/7BTc0v4vZbKEJ3b3b6+h3bOdr9Y+4H3XmQKAWL\nrSjhnBuww5Nc9ArsF9W5HgGqbNwTdSa0AraH1qymVysYrxrX5WHMsJFbPQc5IAZY\nlNUUEDx4zy9Gdb9WEMyFYXLsOG3f7g0ynymBDYgrZQSNUSUD+qeO+uTg7AZQDD/y\nNsozJKnI49TztrlV0Re3SqLRfAi3CqTMi1JAAyDGplc+34INbLk2lKCm0fhfbqSK\n9AuCtOUkzWpySfSZsIz6TOxiOWNuQFibCSHwoZ6Z0kvq8bnlxViVRDo9nRNRmkWF\nVbdyQ1/MND1wp1/wta66LBqpcrpDLtd6NMrKOMW4gb6mIWmk9xYwPUErUF+7taMz\nmfSe2MVH2pSj8Ce+ZBaivWUOcJIe5/Hroo97m48ZUPHvP0Zik2wMZeb1ErghGOOI\n+4DpNmJoX4XiHdJgbzdkaSBnWtr0QeKXzGPNhyniz3N/irtYoGEP+HlWeIaJBTxB\nIckvRG26ZcUp1ectXSDctiO60ItkxxWuVLAM7uzHcOXWaruHVnbQ0ykITzYGLXtb\nOcUJTDjdSMKCJazDKVJ/DWkiO+GNN9hFVH3iZFwlxDKxzTs89HqqDKkRyDVOVUXj\nyWY0kUtTFvfkwXWU3vi1qbImLgWr16lQokHSM9nBNP37IG1sRQM=\n=IR3z\n-----END PGP SIGNATURE-----",
        "payload": "tree 70b48dc82edef8dd5d44424e46143fff8e0581c5\nparent 3f56df5b7564878330ddddddec8afa923a4f8390\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518863330 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518863330 +1100\n\nAdd setter for g_initial_block_download_completed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56df5b7564878330ddddddec8afa923a4f8390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56df5b7564878330ddddddec8afa923a4f8390"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5a7c998af7ac0d799bb73dc6be9ca85776ba5f4a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -892,7 +892,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n-    g_initial_block_download_completed = !fInitialDownload;\n+    SetServiceFlagsIBDCache(!fInitialDownload);\n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain.\n         std::vector<uint256> vHashes;"
      },
      {
        "sha": "2ec26fbd3e5fb5c7a63a7b36029c1df31218c2b0",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -12,7 +12,7 @@\n # include <arpa/inet.h>\n #endif\n \n-std::atomic<bool> g_initial_block_download_completed(false);\n+static std::atomic<bool> g_initial_block_download_completed(false);\n \n namespace NetMsgType {\n const char *VERSION=\"version\";\n@@ -129,6 +129,17 @@ bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n }\n \n \n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n+        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n+    }\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+void SetServiceFlagsIBDCache(bool state) {\n+    g_initial_block_download_completed = state;\n+}\n+\n \n CAddress::CAddress() : CService()\n {"
      },
      {
        "sha": "e518d1194401b0ba21355656c27c8374654af2c2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -278,7 +278,6 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n-extern std::atomic<bool> g_initial_block_download_completed;\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *\n@@ -303,12 +302,10 @@ extern std::atomic<bool> g_initial_block_download_completed;\n  * If the NODE_NONE return value is changed, contrib/seeds/makeseeds.py\n  * should be updated appropriately to filter for the same nodes.\n  */\n-static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n-    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n-        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n-    }\n-    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n-}\n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services);\n+\n+/** Set the current IBD status in order to figure out the desirable service flags */\n+void SetServiceFlagsIBDCache(bool status);\n \n /**\n  * A shortcut for (services & GetDesirableServiceFlags(services))"
      }
    ]
  }
]