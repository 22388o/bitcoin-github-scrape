[
  {
    "sha": "7cc75c9ba38e516067e5a4ab84311c62ddddced7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2M3NWM5YmEzOGU1MTYwNjdlNWE0YWI4NDMxMWM2MmRkZGRjZWQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-16T15:42:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T16:05:28Z"
      },
      "message": "util: Avoid invalid integer negation in FormatMoney: make FormatMoney(const CAmount& n) well-defined also when n is std::numeric_limits<CAmount>::min()",
      "tree": {
        "sha": "f0f5f34a5fdb9d4b1f53955cb2ae6044fa426575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0f5f34a5fdb9d4b1f53955cb2ae6044fa426575"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cc75c9ba38e516067e5a4ab84311c62ddddced7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc75c9ba38e516067e5a4ab84311c62ddddced7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cc75c9ba38e516067e5a4ab84311c62ddddced7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc75c9ba38e516067e5a4ab84311c62ddddced7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f41df1ead4b6a83a51fc41966b111c8459c313"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "30b0fb5bfe516b5bdf6fe2317252b2b0ff4b3952",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "patch": "@@ -84,8 +84,7 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n     (void)DecompressAmount(u64);\n     (void)FormatISO8601Date(i64);\n     (void)FormatISO8601DateTime(i64);\n-    // FormatMoney(i) not defined when i == std::numeric_limits<int64_t>::min()\n-    if (i64 != std::numeric_limits<int64_t>::min()) {\n+    {\n         int64_t parsed_money;\n         if (ParseMoney(FormatMoney(i64), parsed_money)) {\n             assert(parsed_money == i64);"
      },
      {
        "sha": "5a46002a79d38708bed10aabcc72ca83c6454419",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "patch": "@@ -1180,6 +1180,16 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n     BOOST_CHECK_EQUAL(FormatMoney(COIN/1000000), \"0.000001\");\n     BOOST_CHECK_EQUAL(FormatMoney(COIN/10000000), \"0.0000001\");\n     BOOST_CHECK_EQUAL(FormatMoney(COIN/100000000), \"0.00000001\");\n+\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::max()), \"92233720368.54775807\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::max() - 1), \"92233720368.54775806\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::max() - 2), \"92233720368.54775805\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::max() - 3), \"92233720368.54775804\");\n+    // ...\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::min() + 3), \"-92233720368.54775805\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::min() + 2), \"-92233720368.54775806\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::min() + 1), \"-92233720368.54775807\");\n+    BOOST_CHECK_EQUAL(FormatMoney(std::numeric_limits<CAmount>::min()), \"-92233720368.54775808\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)"
      },
      {
        "sha": "3f9ce7dce4c265cf72679531b6162dd9a5148384",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "patch": "@@ -9,13 +9,17 @@\n #include <util/strencodings.h>\n #include <util/string.h>\n \n-std::string FormatMoney(const CAmount& n)\n+std::string FormatMoney(const CAmount n)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n-    int64_t n_abs = (n > 0 ? n : -n);\n-    int64_t quotient = n_abs/COIN;\n-    int64_t remainder = n_abs%COIN;\n+    static_assert(COIN > 1);\n+    int64_t quotient = n / COIN;\n+    int64_t remainder = n % COIN;\n+    if (n < 0) {\n+        quotient = -quotient;\n+        remainder = -remainder;\n+    }\n     std::string str = strprintf(\"%d.%08d\", quotient, remainder);\n \n     // Right-trim excess zeros before the decimal point:"
      },
      {
        "sha": "2aedbee358ce503c7673f78aff77609d2641851c",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cc75c9ba38e516067e5a4ab84311c62ddddced7/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "patch": "@@ -17,7 +17,7 @@\n /* Do not use these functions to represent or parse monetary amounts to or from\n  * JSON but use AmountFromValue and ValueFromAmount for that.\n  */\n-std::string FormatMoney(const CAmount& n);\n+std::string FormatMoney(const CAmount n);\n /** Parse an amount denoted in full coins. E.g. \"0.0034\" supplied on the command line. **/\n [[nodiscard]] bool ParseMoney(const std::string& str, CAmount& nRet);\n "
      }
    ]
  },
  {
    "sha": "1f05dbd06d896849d16b026bfc3315ee8b73a89f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA1ZGJkMDZkODk2ODQ5ZDE2YjAyNmJmYzMzMTVlZThiNzNhODlm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-16T16:44:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2021-03-02T16:05:28Z"
      },
      "message": "util: Avoid invalid integer negation in ValueFromAmount: make ValueFromAmount(const CAmount& n) well-defined also when n is std::numeric_limits<CAmount>::min()",
      "tree": {
        "sha": "eda7a641dfa820f8c7f39cada9f04f28a547f663",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eda7a641dfa820f8c7f39cada9f04f28a547f663"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f05dbd06d896849d16b026bfc3315ee8b73a89f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f05dbd06d896849d16b026bfc3315ee8b73a89f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f05dbd06d896849d16b026bfc3315ee8b73a89f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f05dbd06d896849d16b026bfc3315ee8b73a89f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cc75c9ba38e516067e5a4ab84311c62ddddced7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cc75c9ba38e516067e5a4ab84311c62ddddced7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 25,
      "deletions": 22
    },
    "files": [
      {
        "sha": "01340ae2ee01d302dcfb5f088b5b4f6bb7e64747",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=1f05dbd06d896849d16b026bfc3315ee8b73a89f",
        "patch": "@@ -40,7 +40,7 @@ std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strN\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp\n-UniValue ValueFromAmount(const CAmount& amount);\n+UniValue ValueFromAmount(const CAmount amount);\n std::string FormatScript(const CScript& script);\n std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);"
      },
      {
        "sha": "d3034ae25d5718fee3c9b8dedde7070b391002d5",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=1f05dbd06d896849d16b026bfc3315ee8b73a89f",
        "patch": "@@ -14,17 +14,20 @@\n #include <undo.h>\n #include <univalue.h>\n #include <util/check.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n \n-UniValue ValueFromAmount(const CAmount& amount)\n+UniValue ValueFromAmount(const CAmount amount)\n {\n-    bool sign = amount < 0;\n-    int64_t n_abs = (sign ? -amount : amount);\n-    int64_t quotient = n_abs / COIN;\n-    int64_t remainder = n_abs % COIN;\n+    static_assert(COIN > 1);\n+    int64_t quotient = amount / COIN;\n+    int64_t remainder = amount % COIN;\n+    if (amount < 0) {\n+        quotient = -quotient;\n+        remainder = -remainder;\n+    }\n     return UniValue(UniValue::VNUM,\n-            strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n+            strprintf(\"%s%d.%08d\", amount < 0 ? \"-\" : \"\", quotient, remainder));\n }\n \n std::string FormatScript(const CScript& script)"
      },
      {
        "sha": "5bc99ddcb9b8ee17445119d2e6f8dba5f89d835e",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=1f05dbd06d896849d16b026bfc3315ee8b73a89f",
        "patch": "@@ -131,8 +131,7 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n     (void)SipHashUint256Extra(u64, u64, u256, u32);\n     (void)ToLower(ch);\n     (void)ToUpper(ch);\n-    // ValueFromAmount(i) not defined when i == std::numeric_limits<int64_t>::min()\n-    if (i64 != std::numeric_limits<int64_t>::min()) {\n+    {\n         int64_t parsed_money;\n         if (ParseMoney(ValueFromAmount(i64).getValStr(), parsed_money)) {\n             assert(parsed_money == i64);"
      },
      {
        "sha": "41e16874055d0d1901eb6c6c8e028c68f8da40b4",
        "filename": "src/test/fuzz/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/fuzz/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/fuzz/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/transaction.cpp?ref=1f05dbd06d896849d16b026bfc3315ee8b73a89f",
        "patch": "@@ -100,16 +100,7 @@ FUZZ_TARGET_INIT(transaction, initialize_transaction)\n     (void)IsWitnessStandard(tx, coins_view_cache);\n \n     UniValue u(UniValue::VOBJ);\n-    // ValueFromAmount(i) not defined when i == std::numeric_limits<int64_t>::min()\n-    bool skip_tx_to_univ = false;\n-    for (const CTxOut& txout : tx.vout) {\n-        if (txout.nValue == std::numeric_limits<int64_t>::min()) {\n-            skip_tx_to_univ = true;\n-        }\n-    }\n-    if (!skip_tx_to_univ) {\n-        TxToUniv(tx, /* hashBlock */ {}, u);\n-        static const uint256 u256_max(uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n-        TxToUniv(tx, u256_max, u);\n-    }\n+    TxToUniv(tx, /* hashBlock */ {}, u);\n+    static const uint256 u256_max(uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    TxToUniv(tx, u256_max, u);\n }"
      },
      {
        "sha": "810665877d2e6e2fd041793a082dfcb7bfb7e32d",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f05dbd06d896849d16b026bfc3315ee8b73a89f/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1f05dbd06d896849d16b026bfc3315ee8b73a89f",
        "patch": "@@ -174,6 +174,16 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000000).write(), \"0.00000100\");\n     BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000000).write(), \"0.00000010\");\n     BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000000).write(), \"0.00000001\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::max()).write(), \"92233720368.54775807\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::max() - 1).write(), \"92233720368.54775806\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::max() - 2).write(), \"92233720368.54775805\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::max() - 3).write(), \"92233720368.54775804\");\n+    // ...\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::min() + 3).write(), \"-92233720368.54775805\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::min() + 2).write(), \"-92233720368.54775806\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::min() + 1).write(), \"-92233720368.54775807\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::min()).write(), \"-92233720368.54775808\");\n }\n \n static UniValue ValueFromString(const std::string &str)"
      }
    ]
  }
]