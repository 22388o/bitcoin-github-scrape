laanwj,2020-11-19 15:28:19,I think something is wrong if such a large value is passed in the first place. But the code change looks correct to me anyhow.,https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-730450623,730450623,
practicalswift,2020-11-19 16:05:51,"@laanwj I agree it should be rare, but there is at least one real world scenario where such an extreme value can be passed without it being a bug at the call site. In `PrioritiseTransaction` we call `FormatMoney(nFeeDelta)` on fee deltas. Fee deltas are allowed to be outside of the normal `MoneyRange(â€¦)` as pointed out by luke-jr in another PR.\n\nAFAICT we don't put a lower or upper bound on fe",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-730474951,730474951,
RandyMcMillan,2020-11-20 06:45:00,"I wasn't able to find a test that covered the negative COIN value scenarios.\nWouldn't It would make sense to test those scenarios since they show up on a basic truth table?\n\n###  n % COIN\n\n```  \n n %  COIN -->   1  \n n % -COIN -->   1  \n-n %  COIN -->  -1  \n-n % -COIN -->  -1  \n\n```",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-730921161,730921161,
practicalswift,2020-11-20 22:00:56,@RandyMcMillan I'm not sure I can think of a scenario when the constant `COIN` would be `<= 0` but I've added a `static_assert` to make the assumption of `COIN > 0` crystal clear for readers of the code :),https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-731429339,731429339,
RandyMcMillan,2020-11-20 22:12:23,Thanks - I was just thinking thru different scenarios for testing. Negative moduli aren't something that comes up very often. :) ,https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-731433810,731433810,
DrahtBot,2020-11-21 04:29:53,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20391 (wallet: introduce setfeerate (an improved settxfee, in sat/vB) by jonatack)\n* #20286 (rpc: deprecate `addresses` ",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-731506963,731506963,
laanwj,2020-11-23 15:12:45,Thanks. Code review ACK 8d9979e04afdb081d923f79b581586330968ff56,https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-732223294,732223294,
practicalswift,2020-11-25 08:44:15,"@luke-jr Do you mean in `FormatMoney`? Leaving the sign in `quotient` would change the output compared to how it works today, no? This PR is meant as a pure refactoring (aside from the avoidance of the invalid integer negation): I don't want to introduce any change to the output format in this PR.",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-733557257,733557257,
luke-jr,2020-11-25 15:28:41,"Right now, we're checking `amount < 0` explicitly and prefixing `-`. If we simply don't negate `quotient`, strprintf will do the `-` for us...",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-733776128,733776128,
practicalswift,2020-11-26 09:34:38,"@luke-jr I'll let others chime in, and I'll happily adjust to the consensus opinion regarding the suggested extra refactoring :)",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-734185870,734185870,
practicalswift,2020-11-30 16:05:41,Thanks for reviewing! Nits addressed (+ rebase: sorry!). Please re-review :),https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-735879713,735879713,
practicalswift,2020-12-02 14:57:17,"When fuzzing the RPC interface I stumbled upon this case again: `decoderawtransaction ff0000000001000000000000008004ff0400fffe001f00` will trigger the problematic code path :)\n\nIf anyone wants to test this PR vs `master`:\n\n```\n$ git checkout master\n$ CC=clang CXX=clang++ ./configure --with-sanitizers=address,undefined\n$ make\n$ src/bitcoind &\n$ src/bitcoin-cli decoderawtransaction",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-737282283,737282283,
practicalswift,2021-01-15 13:13:14,"This PR has three stale ACKs (@laanwj, @MarcoFalke, @luke-jr) and I believe all feedback has been addressed.\n\nAnything left to do here? :)\n\nWould be nice to have this addressed to be able to fuzz direct and indirect callers of `FormatMoney` and `ValueFromAmount` with UBSan enabled without hitting these invalid integer negations over and over from different call sites :)",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-760934405,760934405,
practicalswift,2021-02-28 17:58:33,"This PR has three stale ACKs and I believe all feedback has been addressed.\n\nReady for merge after re-review?",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-787492803,787492803,
laanwj,2021-03-03 18:03:57,"re-ACK 1f05dbd06d896849d16b026bfc3315ee8b73a89f\n",https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-789941720,789941720,
laanwj,2020-11-20 05:42:52,"It kind of feels weird to me how quotient and remainder are treated as positive/negative separately here. It's only ever possible for either both of them to be positive (defining positive as >=0), or both of them to be negative, right? Depending on `amount`'s sign.\n\n(also maybe we need a compile time assertion that COIN is `>1` or we're back in the same place :laughing: )",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r527423204,527423204,src/core_write.cpp
MarcoFalke,2020-11-20 10:47:55,"Couldn't this just call FormatMoney?\n```suggestion\n    return UniValue(UniValue::VNUM, FormatMoney(amount));\n```",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r527608526,527608526,src/core_write.cpp
practicalswift,2020-11-20 21:36:07,Good points. Feedback addressed!,https://github.com/bitcoin/bitcoin/pull/20406#discussion_r527983691,527983691,src/core_write.cpp
practicalswift,2020-11-20 21:39:05,"Good point. The only difference between them is that `FormatMoney` chops off some trailing zeroes (`""0.01""` instead of `""0.01000000""`) to make the output more human-friendly. That should be OK also for JSON consumption. Now calling `FormatMoney`.",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r527984988,527984988,src/core_write.cpp
practicalswift,2020-11-20 22:55:45,"Oh, turns out we have quite a few assumptions about the exact number of trailing zeroes in the tests that read `test/util/data/*.json`. Reverting to the previous version!",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r528013586,528013586,src/core_write.cpp
laanwj,2020-11-23 09:33:29,"Yes, many clients assume the number of zeros is equal to the subdivision. This is why we don't use the human-readable function for the JSON formatting.",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r528568865,528568865,src/core_write.cpp
laanwj,2020-11-23 09:34:11,"Shouldn't this be `> 1` not `> 0`? If COIN=1, the same undefined behavior is back.",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r528569247,528569247,src/util/moneystr.cpp
practicalswift,2020-11-23 10:48:58,Now asserting `COIN > 1` :),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r528614423,528614423,src/util/moneystr.cpp
MarcoFalke,2020-11-30 14:59:09,Seems redundant. I can't imagine why anyone would want to set COIN to 0 or negative. Literally every test will fail if it was changed anyay.,https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532659564,532659564,src/core_write.cpp
MarcoFalke,2020-11-30 15:00:08,"style-nit: Could avoid the `if` below\n\n```suggestion\n    int64_t quotient{std::abs(amount / COIN)};\n```",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532660363,532660363,src/core_write.cpp
MarcoFalke,2020-11-30 15:01:03,"```suggestion\n    BOOST_CHECK_EQUAL(ValueFromAmount(std::numeric_limits<CAmount>::min()).write(), ""-92233720368.54775808"");      \n```\n\nwhat is the point of the comment? I think the code is self-explanatory.",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532661066,532661066,src/test/rpc_tests.cpp
MarcoFalke,2020-11-30 15:01:27,"same here\n```suggestion\n    int64_t remainder{std::abs(n % COIN)};\n```",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532661365,532661365,src/util/moneystr.cpp
practicalswift,2020-11-30 15:10:03,"The compile-time assertion was suggested by @laanwj in https://github.com/bitcoin/bitcoin/pull/20406#discussion_r527423204. As noted in https://github.com/bitcoin/bitcoin/pull/20406#issuecomment-731429339 I don't have any strong opinion. I'll let others chime in, but leaving as-is for now :)",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532667563,532667563,src/core_write.cpp
practicalswift,2020-11-30 15:12:21,"I see your point, but leaving as-is in order to not invalidate ACK:s. Will fix if I touch the code for other reasons :)",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532669339,532669339,src/test/rpc_tests.cpp
jonatack,2020-11-30 15:24:00,"`CAmount` is a cheaply-copied type; while refactoring `ValueFromAmount` could pass by value; same for `FormatMoney`\n```suggestion\nUniValue ValueFromAmount(CAmount amount)\n```",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532678215,532678215,src/core_write.cpp
luke-jr,2020-11-30 15:24:39,"```C++\nUniValue ValueFromAmount(const CAmount& amount)\n{\n    int64_t quotient = amount / COIN;\n    int64_t remainder = std::abs(amount % COIN);\n    static_assert(COIN == 100000000);  // required for format-string below\n    return UniValue(UniValue::VNUM, strprintf(""%d.%08d"", quotient, remainder));\n}\n```",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532678729,532678729,src/core_write.cpp
MarcoFalke,2020-11-30 15:29:33,That doesn't work because the sign is lost whenever quotient is `0` (there is no negative zero),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532682693,532682693,src/core_write.cpp
luke-jr,2020-11-30 15:49:15,"Aww, it was *so* close to being a simple/elegant solution, but you're right...",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532697783,532697783,src/core_write.cpp
practicalswift,2020-11-30 16:04:36,Now fixed :),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532709651,532709651,src/test/rpc_tests.cpp
practicalswift,2020-11-30 16:04:51,Feedback addressed :),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532709853,532709853,src/core_write.cpp
jonatack,2020-11-30 16:18:28,Thanks! Can you please drop the `const` here and in FormatMoney (discussion why: https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532720175,532720175,src/core_io.h
practicalswift,2020-11-30 16:46:08,`void f(const int i)` vs `void f(int i)` is a matter of taste :)  Leaving as-is for now. As always with taste issues: if someone feels strongly about such a choice the right forum is probably a PR updating the developer notes :),https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532740880,532740880,src/core_io.h
luke-jr,2020-11-30 17:28:06,"IMO `const` should be used for the definition, but not declaration, when appropriate. In the definition, it instructs the compiler to error if you attempt to change it (eg, a bug). In the declaration, it has no effect at all.",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r532771038,532771038,src/core_io.h
laanwj,2020-12-17 18:40:59,"FWIW the original idea with passing a reference here is that if CAmount is a more complex object, a copy is not needed. At the time, this helped e.g. sidechains and altcoins with different concept of amount (say, a variable length integer) easier use the code. I don't care much about this, but just thought I'd mention.\n\nI agree with @luke-jr that const in by-value definitions doesn't do anythi",https://github.com/bitcoin/bitcoin/pull/20406#discussion_r545317106,545317106,src/core_io.h
MarcoFalke,2020-12-17 18:50:55,Seems unrelated to a bugfix in any case,https://github.com/bitcoin/bitcoin/pull/20406#discussion_r545324048,545324048,src/core_io.h
