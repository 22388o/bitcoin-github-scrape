Zero-1729,2021-08-04 07:48:09,"@MarcoFalke Yeah, it works. It also applies to the change made in `test_framework/bdb.py`.\n\nI could just switch them to use `bytes_obj.hex().encode()` as suggested. It shouldn't really affect the consistency of the bytes<->hex conversion as we are just accessing the built-in `bytes` and then `str` methods. Plus, it looks cleaner.",https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-892443802,892443802,
practicalswift,2021-08-04 08:46:06,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-892480743,892480743,
Saviour1001,2021-08-04 09:34:43,Tested the changes on my end and works correctly.,https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-892512906,892512906,
Zero-1729,2021-08-04 19:03:44,"> `binascii` is still used in Python files outside of the test framework, e.g. in `contrib` and `test/util` (I didn't think about those in the issue, my bad...). If you want, you can also tackle those in this PR, if not, a follow-up is also okay I guess.\n\nYeah, initially after running `git grep binascii` I noticed those instances outside of the `test/functional` and `test_framework`. I think i",https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-892899665,892899665,
DrahtBot,2021-08-05 10:32:28,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-893350327,893350327,
MarcoFalke,2021-08-05 10:49:43,"No idea what is going on with GitHub, this was merged 35 minutes ago: f4328ebef52f51a5ee45cc42815c91ccd28b0669",https://github.com/bitcoin/bitcoin/pull/22619#issuecomment-893359736,893359736,
MarcoFalke,2021-08-04 05:40:37,"```suggestion\n        assert_equal(response_bytes.hex().encode(), response_hex_bytes)\n```\n\nIs it possible to use the member method? (Didn't check myself)",https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682302650,682302650,test/functional/interface_rest.py
Zero-1729,2021-08-04 07:34:22,"Yes, just tested on my end to verify, it has the same effect. Nice catch!\n\nMakes sense, as `bytes.hex(bytes_obj) == bytes_obj.hex()` and by extension `bytes_obj.hex().encode() == binascii.hexlify(bytes_obj)`.",https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682363138,682363138,test/functional/interface_rest.py
theStack,2021-08-04 11:09:59,"```suggestion\n        pk2 = pk_obj.get_bytes().hex()\n```",https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682517466,682517466,test/functional/rpc_createmultisig.py
theStack,2021-08-04 11:13:51,"nit: Possible alternative, though I think both variants are fine:\n```suggestion\n        assert_equal(response_bytes.hex(), response_hex_bytes.decode())\n```",https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682519764,682519764,test/functional/interface_rest.py
Zero-1729,2021-08-04 18:52:24,"Yeah, I didn't want to disrupt the flow; it looked like the asserts in the file were of the kind `assert_equal(actual, desired)` (for the most part), i.e. the left arg being compared to the right.\n\nIf that doesn't matter much I'll just change it.",https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682875693,682875693,test/functional/interface_rest.py
Zero-1729,2021-08-04 19:05:27,Oops! fixed.,https://github.com/bitcoin/bitcoin/pull/22619#discussion_r682884157,682884157,test/functional/rpc_createmultisig.py
