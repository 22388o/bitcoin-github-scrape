promag,2018-10-18T21:37:20Z,ACK bc60c61.,https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431172639,431172639,
sipa,2018-10-18T21:42:15Z,"Interestingly, this becomes well defined in C++14: https://en.cppreference.com/w/cpp/language/operator_arithmetic#Bitwise_shift_operators",https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431174009,431174009,
laanwj,2018-10-18T21:51:16Z,AHHHHH not another one,https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431176348,431176348,
practicalswift,2018-10-18T22:15:04Z,"@laanwj Having an UBSAN build running the functional tests would help us guard against the introduction of new UB:s in the code base.\n\nI've said it before but I find it troubling that we don't use all relevant sanitizers (ASAN, UBSAN, etc.) in Travis. I hope to be able to help change that: please review or concept ACK the PR #14252 which introduces an UBSAN Travis build running the functional ",https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431182379,431182379,
laanwj,2018-10-18T22:26:42Z,but this is a constant ! shouldn't it be possible to detect this statically?,https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431185071,431185071,
practicalswift,2018-10-18T22:39:09Z,"@laanwj Yes, absolutely. Dynamic analysis and static analysis are just two different approaches to attacking the same problem: both should be used. (Just to be clear: obviously _this_ specific case cannot be detected by dynamic analysis.)\n\nI was talking about dynamic analysis here since I believe the sanitizers would likely give us the most bang for the buck (especially ASAN and UBSAN) in term",https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431187623,431187623,
ken2812221,2018-10-20T00:19:44Z,ACK bc60c61,https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431532322,431532322,
sipa,2018-10-20T01:45:23Z,ACK,https://github.com/bitcoin/bitcoin/pull/14513#issuecomment-431538898,431538898,
