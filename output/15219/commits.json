[
  {
    "sha": "948d8f4f10c31220ba4b6779cc862e2b6a0af5f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDhkOGY0ZjEwYzMxMjIwYmE0YjY3NzljYzg2MmUyYjZhMGFmNWY2",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-21T00:34:08Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-21T01:13:22Z"
      },
      "message": "lint: Enable python linters via an array\n\nThis assures consistent recording of the enabled linters.",
      "tree": {
        "sha": "405f08fc7f039cc50c096101cf8b602fa8381e91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/405f08fc7f039cc50c096101cf8b602fa8381e91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlxFHNcACgkQTYykuhgE\nCQbbSBAAoYTs6LRQkovJfFKbkCqoWxZOg9y5O3i0usKWp6cGESP1WaeCoG4QBpJE\nUz1vTUHnrKB6t6caA0MJskdZsXdX7etsZhBdecRN3kFWAqUXShjzy6+FgF2yGw0G\nmz2SXy+OUD0wFUD6Z2SlOWUjGeR3TYTy+9iG2CHm4wOcu1VjZREjIvkYBsERn0L0\nidsRPNxWfPQpITkUT5ebgpGQD3eVVguFpBcZfVYdSLw0S6cuhCCERXOEuX23Tlar\nFRTu5XDiELT//PzwBWhGU1j/b09jSFFZ/sGeBdOy2m6Q11G/+Kh0oEEfqx3lF029\n9gNWV/1LQJi+x18p+fgnJdeMBeMFuEhRkdBKqbxQXI8fSnMjykBVYcIIPaHecrE1\nwGZKNJYjNOVRrHe8F46O+l9Eqa9K55AXGDquUdusL0p2cxEvCqnTUYnmr3XjQJAl\nhLG7ifPj+DVeEqmjceRRf5lTqFh+xkubTRQIWu3JuliDsEdsxRWks8K66NdRIaE/\nMitxmQ1ieW68j6CCAZTZUfPAYOqUlvQhb77f58aw3qc+S4Hf1NA0GLD3hBOtuSPi\ncXhVlwxj6Op52kXGw5npMtkcMbAeLBkg9KcpiLvv99nMydBRKVKTb4EXxFqSCGvE\nlTk72FdqPKVc5tEjtXWagAZbpxzdLN/iH9odyYknRXIOmlqPKv4=\n=8MTq\n-----END PGP SIGNATURE-----",
        "payload": "tree 405f08fc7f039cc50c096101cf8b602fa8381e91\nparent 978682b9dccfb48425c0129431bb108e78e33e4e\nauthor Ben Woosley <ben.woosley@gmail.com> 1548030848 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1548033202 -0800\n\nlint: Enable python linters via an array\n\nThis assures consistent recording of the enabled linters.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "978682b9dccfb48425c0129431bb108e78e33e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/978682b9dccfb48425c0129431bb108e78e33e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/978682b9dccfb48425c0129431bb108e78e33e4e"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 75,
      "deletions": 73
    },
    "files": [
      {
        "sha": "f5b851aeabc6e392a075fe3cc7b40cb5ef3a24fb",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 75,
        "deletions": 73,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/948d8f4f10c31220ba4b6779cc862e2b6a0af5f6/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=948d8f4f10c31220ba4b6779cc862e2b6a0af5f6",
        "patch": "@@ -1,4 +1,4 @@\n-#!/bin/sh\n+#!/usr/bin/env bash\n #\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n@@ -8,77 +8,79 @@\n \n export LC_ALL=C\n \n-# E101 indentation contains mixed spaces and tabs\n-# E112 expected an indented block\n-# E113 unexpected indentation\n-# E115 expected an indented block (comment)\n-# E116 unexpected indentation (comment)\n-# E125 continuation line with same indent as next logical line\n-# E129 visually indented line with same indent as next logical line\n-# E131 continuation line unaligned for hanging indent\n-# E133 closing bracket is missing indentation\n-# E223 tab before operator\n-# E224 tab after operator\n-# E242 tab after ','\n-# E266 too many leading '#' for block comment\n-# E271 multiple spaces after keyword\n-# E272 multiple spaces before keyword\n-# E273 tab after keyword\n-# E274 tab before keyword\n-# E275 missing whitespace after keyword\n-# E304 blank lines found after function decorator\n-# E306 expected 1 blank line before a nested definition\n-# E401 multiple imports on one line\n-# E402 module level import not at top of file\n-# F403 'from foo_module import *' used; unable to detect undefined names\n-# F405 foo_function may be undefined, or defined from star imports: bar_module\n-# E502 the backslash is redundant between brackets\n-# E701 multiple statements on one line (colon)\n-# E702 multiple statements on one line (semicolon)\n-# E703 statement ends with a semicolon\n-# E711 comparison to None should be 'if cond is None:'\n-# E714 test for object identity should be \"is not\"\n-# E721 do not compare types, use \"isinstance()\"\n-# E741 do not use variables named \"l\", \"O\", or \"I\"\n-# E742 do not define classes named \"l\", \"O\", or \"I\"\n-# E743 do not define functions named \"l\", \"O\", or \"I\"\n-# E901 SyntaxError: invalid syntax\n-# E902 TokenError: EOF in multi-line string\n-# F401 module imported but unused\n-# F402 import module from line N shadowed by loop variable\n-# F404 future import(s) name after other statements\n-# F406 \"from module import *\" only allowed at module level\n-# F407 an undefined __future__ feature name was imported\n-# F601 dictionary key name repeated with different values\n-# F602 dictionary key variable name repeated with different values\n-# F621 too many expressions in an assignment with star-unpacking\n-# F622 two or more starred expressions in an assignment (a, *b, *c = d)\n-# F631 assertion test is a tuple, which are always True\n-# F701 a break statement outside of a while or for loop\n-# F702 a continue statement outside of a while or for loop\n-# F703 a continue statement in a finally block in a loop\n-# F704 a yield or yield from statement outside of a function\n-# F705 a return statement with arguments inside a generator\n-# F706 a return statement outside of a function/method\n-# F707 an except: block as not the last exception handler\n-# F811 redefinition of unused name from line N\n-# F812 list comprehension redefines 'foo' from line N\n-# F821 undefined name 'Foo'\n-# F822 undefined name name in __all__\n-# F823 local variable name \u2026 referenced before assignment\n-# F831 duplicate argument name in function definition\n-# F841 local variable 'foo' is assigned to but never used\n-# W191 indentation contains tabs\n-# W291 trailing whitespace\n-# W292 no newline at end of file\n-# W293 blank line contains whitespace\n-# W504 line break after binary operator\n-# W601 .has_key() is deprecated, use \"in\"\n-# W602 deprecated form of raising exception\n-# W603 \"<>\" is deprecated, use \"!=\"\n-# W604 backticks are deprecated, use \"repr()\"\n-# W605 invalid escape sequence \"x\"\n-# W606 'async' and 'await' are reserved keywords starting with Python 3.7\n+enabled=(\n+    E101 # indentation contains mixed spaces and tabs\n+    E112 # expected an indented block\n+    E113 # unexpected indentation\n+    E115 # expected an indented block (comment)\n+    E116 # unexpected indentation (comment)\n+    E125 # continuation line with same indent as next logical line\n+    E129 # visually indented line with same indent as next logical line\n+    E131 # continuation line unaligned for hanging indent\n+    E133 # closing bracket is missing indentation\n+    E223 # tab before operator\n+    E224 # tab after operator\n+    E242 # tab after ','\n+    E266 # too many leading '#' for block comment\n+    E271 # multiple spaces after keyword\n+    E272 # multiple spaces before keyword\n+    E273 # tab after keyword\n+    E274 # tab before keyword\n+    E275 # missing whitespace after keyword\n+    E304 # blank lines found after function decorator\n+    E306 # expected 1 blank line before a nested definition\n+    E401 # multiple imports on one line\n+    E402 # module level import not at top of file\n+    E502 # the backslash is redundant between brackets\n+    E701 # multiple statements on one line (colon)\n+    E702 # multiple statements on one line (semicolon)\n+    E703 # statement ends with a semicolon\n+    E711 # comparison to None should be 'if cond is None:'\n+    E714 # test for object identity should be \"is not\"\n+    E721 # do not compare types, use \"isinstance()\"\n+    E741 # do not use variables named \"l\", \"O\", or \"I\"\n+    E742 # do not define classes named \"l\", \"O\", or \"I\"\n+    E743 # do not define functions named \"l\", \"O\", or \"I\"\n+    E901 # SyntaxError: invalid syntax\n+    E902 # TokenError: EOF in multi-line string\n+    F401 # module imported but unused\n+    F402 # import module from line N shadowed by loop variable\n+    F403 # 'from foo_module import *' used; unable to detect undefined names\n+    F404 # future import(s) name after other statements\n+    F405 # foo_function may be undefined, or defined from star imports: bar_module\n+    F406 # \"from module import *\" only allowed at module level\n+    F407 # an undefined __future__ feature name was imported\n+    F601 # dictionary key name repeated with different values\n+    F602 # dictionary key variable name repeated with different values\n+    F621 # too many expressions in an assignment with star-unpacking\n+    F622 # two or more starred expressions in an assignment (a, *b, *c = d)\n+    F631 # assertion test is a tuple, which are always True\n+    F701 # a break statement outside of a while or for loop\n+    F702 # a continue statement outside of a while or for loop\n+    F703 # a continue statement in a finally block in a loop\n+    F704 # a yield or yield from statement outside of a function\n+    F705 # a return statement with arguments inside a generator\n+    F706 # a return statement outside of a function/method\n+    F707 # an except: block as not the last exception handler\n+    F811 # redefinition of unused name from line N\n+    F812 # list comprehension redefines 'foo' from line N\n+    F821 # undefined name 'Foo'\n+    F822 # undefined name name in __all__\n+    F823 # local variable name \u2026 referenced before assignment\n+    F831 # duplicate argument name in function definition\n+    F841 # local variable 'foo' is assigned to but never used\n+    W191 # indentation contains tabs\n+    W291 # trailing whitespace\n+    W292 # no newline at end of file\n+    W293 # blank line contains whitespace\n+    W504 # line break after binary operator\n+    W601 # .has_key() is deprecated, use \"in\"\n+    W602 # deprecated form of raising exception\n+    W603 # \"<>\" is deprecated, use \"!=\"\n+    W604 # backticks are deprecated, use \"repr()\"\n+    W605 # invalid escape sequence \"x\"\n+    W606 # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n \n if ! command -v flake8 > /dev/null; then\n     echo \"Skipping Python linting since flake8 is not installed. Install by running \\\"pip3 install flake8\\\"\"\n@@ -88,4 +90,4 @@ elif PYTHONWARNINGS=\"ignore\" flake8 --version | grep -q \"Python 2\"; then\n     exit 0\n fi\n \n-PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=E101,E112,E113,E115,E116,E125,E129,E131,E133,E223,E224,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E711,E714,E721,E741,E742,E743,E901,E902,F401,F402,F403,F404,F405,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W191,W291,W292,W293,W504,W601,W602,W603,W604,W605,W606 \"${@:-.}\"\n+PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=$(IFS=\",\"; echo \"${enabled[*]}\") \"${@:-.}\""
      }
    ]
  }
]