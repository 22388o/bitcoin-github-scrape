[
  {
    "sha": "fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdiNjI2ZDdhMTUwZTVjYmQ0ZDE2M2QyZGFiNmY4YTU1ZmMyY2M0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T12:05:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:55:51Z"
      },
      "message": "node: Add chainman alias for g_chainman",
      "tree": {
        "sha": "cdd1af4dac61f7738037603d88c19f25767e118a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd1af4dac61f7738037603d88c19f25767e118a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUikZwwAp/frf66uufOHJy70b9KCMW6zg3Kue/sNq7tzUro4GM3nH4Nm3mPE8My6\nzpbBRCEXC/B4/GG1GZHPfQldCWRgvy97B2dXAgc+VELNUunk+2kJz07dPsDWxqSQ\n0qSVolOdOd+n4IMZ4Kh3XYzJdrlIJSNIIcfI2qC0QQaOLSf6mTkP0UsGgt/fgvje\nXnSf0iycd05UY3nOjguyiLJKAb+5CV5MALeYZGyfa13KQZo6ApIj4JU6/NfbxvL9\ndCjoYGjOX2bv+rWCqwwod4Q3e29xe1qKR8kdsLAZhq6kk3hxn7AX4lCHQDNuiFIN\nMn5LJp+Z0LXnpHWF/ztYi9IijIhJ95WabBAbrZnWYjy4c009N0Yfo+l9xrmGhz9u\n2zxUxTc2ttqA7KQbOQe9FtEbCKDiKanrwK7J5E2VnXfzMiD5juVZ025xCI+kGgED\nZLEg4BEhoUZcMPm/5QMk5afkWf24ZtK3hGprP3jpfoCtVg1lOvwypOA9c3iR5kG8\nLloqSBjF\n=f1mO\n-----END PGP SIGNATURE-----",
        "payload": "tree cdd1af4dac61f7738037603d88c19f25767e118a\nparent cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615\nauthor MarcoFalke <falke.marco@gmail.com> 1587211552 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069351 -0400\n\nnode: Add chainman alias for g_chainman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe22a5f9e1d9e2d3dc8ce177e6c8eb04bc96615"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 32,
      "deletions": 19
    },
    "files": [
      {
        "sha": "88cb0fc09e90d35d06ba00566ccb219605c22599",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "patch": "@@ -244,9 +244,9 @@ void Shutdown(NodeContext& node)\n     }\n \n     // FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing\n-    {\n+    if (node.chainman) {\n         LOCK(cs_main);\n-        for (CChainState* chainstate : g_chainman.GetAll()) {\n+        for (CChainState* chainstate : node.chainman->GetAll()) {\n             if (chainstate->CanFlushToDisk()) {\n                 chainstate->ForceFlushStateToDisk();\n             }\n@@ -271,9 +271,9 @@ void Shutdown(NodeContext& node)\n     // up with our current chain to avoid any strange pruning edge cases and make\n     // next startup faster by avoiding rescan.\n \n-    {\n+    if (node.chainman) {\n         LOCK(cs_main);\n-        for (CChainState* chainstate : g_chainman.GetAll()) {\n+        for (CChainState* chainstate : node.chainman->GetAll()) {\n             if (chainstate->CanFlushToDisk()) {\n                 chainstate->ForceFlushStateToDisk();\n                 chainstate->ResetCoinsViews();\n@@ -299,7 +299,8 @@ void Shutdown(NodeContext& node)\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     node.args = nullptr;\n-    if (node.mempool) node.mempool = nullptr;\n+    node.mempool = nullptr;\n+    node.chainman = nullptr;\n     node.scheduler.reset();\n \n     try {\n@@ -689,7 +690,7 @@ static void CleanupBlockRevFiles()\n     }\n }\n \n-static void ThreadImport(std::vector<fs::path> vImportFiles)\n+static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     util::ThreadRename(\"loadblk\");\n@@ -741,9 +742,9 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n \n     // We can't hold cs_main during ActivateBestChain even though we're accessing\n-    // the g_chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n     // the relevant pointers before the ABC call.\n-    for (CChainState* chainstate : WITH_LOCK(::cs_main, return g_chainman.GetAll())) {\n+    for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n         BlockValidationState state;\n         if (!chainstate->ActivateBestChain(state, chainparams, nullptr)) {\n             LogPrintf(\"Failed to connect best block (%s)\\n\", state.ToString());\n@@ -1377,6 +1378,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     // which are all started after this, may use it from the node context.\n     assert(!node.mempool);\n     node.mempool = &::mempool;\n+    assert(!node.chainman);\n+    node.chainman = &g_chainman;\n+    ChainstateManager& chainman = EnsureChainman(node);\n \n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n@@ -1557,7 +1561,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n             const int64_t load_block_index_start_time = GetTimeMillis();\n             try {\n                 LOCK(cs_main);\n-                g_chainman.InitializeChainstate();\n+                chainman.InitializeChainstate();\n                 UnloadBlockIndex();\n \n                 // new CBlockTreeDB tries to delete the existing file, which\n@@ -1612,7 +1616,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n \n                 bool failed_chainstate_init = false;\n \n-                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                for (CChainState* chainstate : chainman.GetAll()) {\n                     LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n                     chainstate->InitCoinsDB(\n                         /* cache_size_bytes */ nCoinDBCache,\n@@ -1667,7 +1671,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n             bool failed_rewind{false};\n             // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant\n             // chainstates beforehand.\n-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return g_chainman.GetAll())) {\n+            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {\n                 if (!fReset) {\n                     // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n                     // It both disconnects blocks based on the chainstate, and drops block data in\n@@ -1692,7 +1696,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n             try {\n                 LOCK(cs_main);\n \n-                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n                         if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n@@ -1798,7 +1802,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n         nLocalServices = ServiceFlags(nLocalServices & ~NODE_NETWORK);\n         if (!fReindex) {\n             LOCK(cs_main);\n-            for (CChainState* chainstate : g_chainman.GetAll()) {\n+            for (CChainState* chainstate : chainman.GetAll()) {\n                 uiInterface.InitMessage(_(\"Pruning blockstore...\").translated);\n                 chainstate->PruneAndFlush();\n             }\n@@ -1841,7 +1845,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n+    threadGroup.create_thread([=, &chainman] { ThreadImport(chainman, vImportFiles); });\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "c45d9e66893f2285b008c8aaf212bca46d646b90",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_NODE_CONTEXT_H\n #define BITCOIN_NODE_CONTEXT_H\n \n+#include <cassert>\n #include <memory>\n #include <vector>\n \n@@ -13,6 +14,7 @@ class BanMan;\n class CConnman;\n class CScheduler;\n class CTxMemPool;\n+class ChainstateManager;\n class PeerLogicValidation;\n namespace interfaces {\n class Chain;\n@@ -33,6 +35,7 @@ struct NodeContext {\n     std::unique_ptr<CConnman> connman;\n     CTxMemPool* mempool{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<PeerLogicValidation> peer_logic;\n+    ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;\n@@ -46,4 +49,10 @@ struct NodeContext {\n     ~NodeContext();\n };\n \n+inline ChainstateManager& EnsureChainman(const NodeContext& node)\n+{\n+    assert(node.chainman);\n+    return *node.chainman;\n+}\n+\n #endif // BITCOIN_NODE_CONTEXT_H"
      },
      {
        "sha": "b885b9218bce220e3fe958ecf819fa4716cee7de",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "patch": "@@ -134,7 +134,8 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n-    g_chainman.InitializeChainstate();\n+    m_node.chainman = &::g_chainman;\n+    m_node.chainman->InitializeChainstate();\n     ::ChainstateActive().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n     assert(!::ChainstateActive().CanFlushToDisk());\n@@ -181,7 +182,8 @@ TestingSetup::~TestingSetup()\n     m_node.mempool = nullptr;\n     m_node.scheduler.reset();\n     UnloadBlockIndex();\n-    g_chainman.Reset();\n+    m_node.chainman->Reset();\n+    m_node.chainman = nullptr;\n     pblocktree.reset();\n }\n "
      },
      {
        "sha": "ff6755b00f48543a9f53896ff11607339090b22a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "patch": "@@ -43,6 +43,7 @@ class CConnman;\n class CScriptCheck;\n class CBlockPolicyEstimator;\n class CTxMemPool;\n+class ChainstateManager;\n class TxValidationState;\n struct ChainTxData;\n \n@@ -493,9 +494,6 @@ enum class CoinsCacheSizeState\n     OK = 0\n };\n \n-// Defined below, but needed for `friend` usage in CChainState.\n-class ChainstateManager;\n-\n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n  * current best chain."
      }
    ]
  },
  {
    "sha": "fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTA1ZmRmMGYxOWZhNGI1NTdjYzVlOWJhNDM2ZTMyMTViODNjNGU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T12:29:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:55:58Z"
      },
      "message": "net: Pass chainman into PeerLogicValidation",
      "tree": {
        "sha": "f3b562b5218391c67cb60fe98093f526e4608237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3b562b5218391c67cb60fe98093f526e4608237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiPagwAkDKSdrGC7iZhvFAH+9ZKEcpxmhVqy+SAfd79vPjMnag0FLBjoj5MCjWm\nIDcd9vULidZfUxTKUQ1i7lmY8gtQcDQE+uY09WBv4+Ut4VurzZH+67pXWw1x2jl2\nDD/NKfWXswgzt0/S7jsa08IOZeh6O8suvD256+xyaWLv/E5CZhHjjb9m+Sxh8M8g\nF0QCSTgqTX7pMpLorI9dJLD/7JiBJb5Mx4N78T80B8D9Th89echbUFuJofAxILQ2\nGt9w62OKy83i0w0QVmHCcCjsUYJPG6Gz1REhGTzIAbFfGoRkI+ahOIOJfq7XLkII\nFYgGV6leBauHQGNMYY9w7SFdQe+jnJLwX+ibruqjcGMJtarV7VRqLE1cXl65YUND\nL3LNyK5PcXtwnPubp8g91tw7zdFewS3STX7h11F/reebWgN2NnQMZYZ4CPWOCNlS\n+DnIo/hCC4k2w02bThapr1BjEp3TbqtNBVgmgYnuK/R59XyIvtzkbIciWjsTGb1R\nCjUnE8B1\n=gOi1\n-----END PGP SIGNATURE-----",
        "payload": "tree f3b562b5218391c67cb60fe98093f526e4608237\nparent fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4\nauthor MarcoFalke <falke.marco@gmail.com> 1587212943 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069358 -0400\n\nnet: Pass chainman into PeerLogicValidation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7b626d7a150e5cbd4d163d2dab6f8a55fc2cc4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "2ff275ebef1cef4ca025b0ba1b2943ff742c64bc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -1382,7 +1382,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n     node.chainman = &g_chainman;\n     ChainstateManager& chainman = EnsureChainman(node);\n \n-    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n+    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.chainman, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "7c564787b253ef657f7a5be4b63839e1faec79f5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -1150,9 +1150,10 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler& scheduler, CTxMemPool& pool)\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool)\n     : connman(connmanIn),\n       m_banman(banman),\n+      m_chainman(chainman),\n       m_mempool(pool),\n       m_stale_tip_check_time(0)\n {\n@@ -2078,7 +2079,7 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     connman->PushMessage(pfrom, std::move(msg));\n }\n \n-bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, ChainstateManager& chainman, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(msg_type), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2989,7 +2990,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, mempool, connman, banman, interruptMsgProc);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, chainman, mempool, connman, banman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -3531,7 +3532,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_mempool, connman, m_banman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_chainman, m_mempool, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      },
      {
        "sha": "ec758c7537d66922761f444324ebd2a5fc8195a5",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -12,6 +12,7 @@\n #include <validationinterface.h>\n \n class CTxMemPool;\n+class ChainstateManager;\n \n extern RecursiveMutex cs_main;\n extern RecursiveMutex g_cs_orphans;\n@@ -27,12 +28,13 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n private:\n     CConnman* const connman;\n     BanMan* const m_banman;\n+    ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n \n     bool CheckIfBanned(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n public:\n-    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, CTxMemPool& pool);\n+    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool);\n \n     /**\n      * Overridden from CValidationInterface."
      },
      {
        "sha": "348b170536bce9d17d2c37644a18c35d3a9b44d3",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -78,7 +78,7 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -148,7 +148,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidat\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n@@ -323,7 +323,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.mempool);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "665a6224b413926722655e8a4e0f251032485279",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -29,7 +29,7 @@\n #include <string>\n #include <vector>\n \n-bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n+bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, ChainstateManager& chainman, CTxMemPool& mempool, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc);\n \n namespace {\n \n@@ -74,7 +74,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     p2p_node.SetSendVersion(PROTOCOL_VERSION);\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n-        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n+        (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.chainman, *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n     } catch (const std::ios_base::failure&) {\n     }\n     SyncWithValidationInterfaceQueue();"
      },
      {
        "sha": "82017393dd20a5916814d515d655b642700fdf84",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "patch": "@@ -161,7 +161,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.mempool->setSanityCheck(1.0);\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.mempool);\n+    m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n     {\n         CConnman::Options options;\n         options.m_msgproc = m_node.peer_logic.get();"
      }
    ]
  },
  {
    "sha": "fa84b1cd846f6499b741710fd478ec9ad49b5120",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg0YjFjZDg0NmY2NDk5Yjc0MTcxMGZkNDc4ZWM5YWQ0OWI1MTIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T12:27:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:55:59Z"
      },
      "message": "validation: Make LoadBlockIndex() a member of ChainstateManager",
      "tree": {
        "sha": "ba6d89958fe86a9e24614875bc73d7205011c8c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6d89958fe86a9e24614875bc73d7205011c8c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa84b1cd846f6499b741710fd478ec9ad49b5120",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjT5Qv9GJWZflIu+8f7apKpbkWfIJdhvNfI7KOlkjMCgqdxUbBBXn0lcSUe2tkm\nOVE7B6SidUfspc/l06OL91K/IVwicJdZNAasu4aSjfpeeElUaWerrqEbUzbnZ352\n255NR4UUNOANT22TzqWrzVO23znvNulvh/s6M/2pgZOP4JoII/f9zbZYzh/cHR7Z\n+hQAoVBcU92crBQ2I8wWb5U6rxBbRmuu3+4rW/Fv9MGHNhpmIzib5Um5rNsdKRwF\nbHNKYTtNKButGtQS5gi89ybcudsdBOmrbB7qoZMVXeMQIMO2mCrCcxcBnwifpzuz\nZuWdgOuVNKsARpw/rJxqh8xRGaD0JQQxMrpBoaYUpAFktRoKykHtzykpfDfpNEA4\nMZuvuvVTn0XjDHGQFREXXaByM1l7gb7KTG3J9hH4Q8BU4F/VjQJyCnrV+F978PhF\n63PBf7+65TVaeVOoNVq9sMBWVwfhR5+yMphQmE52AoocMXCu2rduda05qm37ZB3V\nGl8w1XyL\n=tXe5\n-----END PGP SIGNATURE-----",
        "payload": "tree ba6d89958fe86a9e24614875bc73d7205011c8c7\nparent fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6\nauthor MarcoFalke <falke.marco@gmail.com> 1587212866 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069359 -0400\n\nvalidation: Make LoadBlockIndex() a member of ChainstateManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84b1cd846f6499b741710fd478ec9ad49b5120",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa84b1cd846f6499b741710fd478ec9ad49b5120",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84b1cd846f6499b741710fd478ec9ad49b5120/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa05fdf0f19fa4b557cc5e9ba436e3215b83c4e6"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "37e625129550f70921f7d94b4caf36574226d6b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa84b1cd846f6499b741710fd478ec9ad49b5120",
        "patch": "@@ -1582,7 +1582,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node)\n                 // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n                 // From here on out fReindex and fReset mean something different!\n-                if (!LoadBlockIndex(chainparams)) {\n+                if (!chainman.LoadBlockIndex(chainparams)) {\n                     if (ShutdownRequested()) break;\n                     strLoadError = _(\"Error loading block database\");\n                     break;"
      },
      {
        "sha": "830bb80732f32e580edbd712f0cc7bf5a0bdc230",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa84b1cd846f6499b741710fd478ec9ad49b5120",
        "patch": "@@ -4154,9 +4154,9 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    if (!g_chainman.m_blockman.LoadBlockIndex(\n+    if (!chainman.m_blockman.LoadBlockIndex(\n             chainparams.GetConsensus(), *pblocktree,\n             ::ChainstateActive().setBlockIndexCandidates)) {\n         return false;\n@@ -4182,8 +4182,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_RE\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<const uint256, CBlockIndex*>& item : g_chainman.BlockIndex())\n-    {\n+    for (const std::pair<const uint256, CBlockIndex*>& item : chainman.BlockIndex()) {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             setBlkDataFiles.insert(pindex->nFile);\n@@ -4600,14 +4599,15 @@ void UnloadBlockIndex()\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex(const CChainParams& chainparams)\n+bool ChainstateManager::LoadBlockIndex(const CChainParams& chainparams)\n {\n+    AssertLockHeld(cs_main);\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = LoadBlockIndexDB(chainparams);\n+        bool ret = LoadBlockIndexDB(*this, chainparams);\n         if (!ret) return false;\n-        needs_init = g_chainman.m_blockman.m_block_index.empty();\n+        needs_init = m_blockman.m_block_index.empty();\n     }\n \n     if (needs_init) {"
      },
      {
        "sha": "f2712cb5fa984ec46db838003a91e3b1865961b4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa84b1cd846f6499b741710fd478ec9ad49b5120/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa84b1cd846f6499b741710fd478ec9ad49b5120",
        "patch": "@@ -193,9 +193,6 @@ fs::path GetBlockPosFilename(const FlatFilePos &pos);\n void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n-/** Load the block tree and coins database from disk,\n- * initializing state if we're running with -reindex. */\n-bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n@@ -868,6 +865,9 @@ class ChainstateManager\n     CChain& ValidatedChain() const { return ValidatedChainstate().m_chain; }\n     CBlockIndex* ValidatedTip() const { return ValidatedChain().Tip(); }\n \n+    //! Load the block tree and coins database from disk, initializing state if we're running with -reindex\n+    bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     //! Unload block index and chain data before shutdown.\n     void Unload() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n "
      }
    ]
  },
  {
    "sha": "fa24d4909864096934577abc26cfa9be47f634ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI0ZDQ5MDk4NjQwOTY5MzQ1NzdhYmMyNmNmYTliZTQ3ZjYzNGJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T13:14:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:56:16Z"
      },
      "message": "validation: Make PruneOneBlockFile() a member of ChainstateManager",
      "tree": {
        "sha": "2b2051c38236fff57d11382751c66d0c4e9adc80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b2051c38236fff57d11382751c66d0c4e9adc80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa24d4909864096934577abc26cfa9be47f634ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjMbAv+L5wOw7gyJQWr0P5Q8285vfAvBoZ5HANvl/t//8Atv4Bh96Jt5UXmLUut\nCmw+C4nH+bac6JmV/jIuQKaA8/5QC98YgAleEXPhgoT+vuOYR3qTMrFrl3TCFBZW\ndFd9hoggA54zxkySxnfnMTVSKHtgNAHM9pC/cLkaMQ4gtjEtV6RIoaVbp/yhEWKs\nvX4hiDOA/jhL7hCwWl1MV5KBSpDofj1mn2tZKffw/B7cWQSa+ld6PZ4x6ulRisZ9\nRO+hNMCNKDp9KBFRFLnIDTYBO3e0OWbBnBczdi580z22r8417jkSapjp7sJnmRc7\nq/24fxOAG9T0gyC/lbVwhWPtfE3zCNzozYsQB25K0roXArldZw8B4TNQEZKe62ak\nctRK0gO06wcK9kt7Oy20rHQ6XaWFEdBcaFS1Yqnq0lQIADJU4i8MIVNrXhL4J61O\nv9ZxmRptZMR3TG9daLgH6zGdlg+DYgw8p2Nnwtg0aUAFhsOMPObOIUg1siQ7e2kt\n28bkszh+\n=7Pg9\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b2051c38236fff57d11382751c66d0c4e9adc80\nparent fa84b1cd846f6499b741710fd478ec9ad49b5120\nauthor MarcoFalke <falke.marco@gmail.com> 1587215669 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069376 -0400\n\nvalidation: Make PruneOneBlockFile() a member of ChainstateManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24d4909864096934577abc26cfa9be47f634ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa24d4909864096934577abc26cfa9be47f634ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24d4909864096934577abc26cfa9be47f634ba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa84b1cd846f6499b741710fd478ec9ad49b5120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa84b1cd846f6499b741710fd478ec9ad49b5120",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa84b1cd846f6499b741710fd478ec9ad49b5120"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 19,
      "deletions": 21
    },
    "files": [
      {
        "sha": "e684a7f7e645306534527aeca179d75b63fe8e4b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24d4909864096934577abc26cfa9be47f634ba/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24d4909864096934577abc26cfa9be47f634ba/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa24d4909864096934577abc26cfa9be47f634ba",
        "patch": "@@ -196,8 +196,8 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n std::unique_ptr<CBlockTreeDB> pblocktree;\n \n // See definition for documentation\n-static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n-static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n+static void FindFilesToPruneManual(ChainstateManager& chainman, std::set<int>& setFilesToPrune, int nManualPruneHeight);\n+static void FindFilesToPrune(ChainstateManager& chainman, std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n bool CheckInputScripts(const CTransaction& tx, TxValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = nullptr);\n static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n@@ -2282,11 +2282,11 @@ bool CChainState::FlushStateToDisk(\n             if (nManualPruneHeight > 0) {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune (manual)\", BCLog::BENCH);\n \n-                FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n+                FindFilesToPruneManual(g_chainman, setFilesToPrune, nManualPruneHeight);\n             } else {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune\", BCLog::BENCH);\n \n-                FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n+                FindFilesToPrune(g_chainman, setFilesToPrune, chainparams.PruneAfterHeight());\n                 fCheckForPruning = false;\n             }\n             if (!setFilesToPrune.empty()) {\n@@ -3895,12 +3895,12 @@ uint64_t CalculateCurrentUsage()\n     return retval;\n }\n \n-/* Prune a block file (modify associated database entries)*/\n-void PruneOneBlockFile(const int fileNumber)\n+void ChainstateManager::PruneOneBlockFile(const int fileNumber)\n {\n+    AssertLockHeld(cs_main);\n     LOCK(cs_LastBlockFile);\n \n-    for (const auto& entry : g_chainman.BlockIndex()) {\n+    for (const auto& entry : m_blockman.m_block_index) {\n         CBlockIndex* pindex = entry.second;\n         if (pindex->nFile == fileNumber) {\n             pindex->nStatus &= ~BLOCK_HAVE_DATA;\n@@ -3914,12 +3914,12 @@ void PruneOneBlockFile(const int fileNumber)\n             // to be downloaded again in order to consider its chain, at which\n             // point it would be considered as a candidate for\n             // m_blocks_unlinked or setBlockIndexCandidates.\n-            auto range = g_chainman.m_blockman.m_blocks_unlinked.equal_range(pindex->pprev);\n+            auto range = m_blockman.m_blocks_unlinked.equal_range(pindex->pprev);\n             while (range.first != range.second) {\n                 std::multimap<CBlockIndex *, CBlockIndex *>::iterator _it = range.first;\n                 range.first++;\n                 if (_it->second == pindex) {\n-                    g_chainman.m_blockman.m_blocks_unlinked.erase(_it);\n+                    m_blockman.m_blocks_unlinked.erase(_it);\n                 }\n             }\n         }\n@@ -3941,7 +3941,7 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n }\n \n /* Calculate the block/rev files to delete based on height specified by user with RPC command pruneblockchain */\n-static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight)\n+static void FindFilesToPruneManual(ChainstateManager& chainman, std::set<int>& setFilesToPrune, int nManualPruneHeight)\n {\n     assert(fPruneMode && nManualPruneHeight > 0);\n \n@@ -3955,7 +3955,7 @@ static void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPr\n     for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n             continue;\n-        PruneOneBlockFile(fileNumber);\n+        chainman.PruneOneBlockFile(fileNumber);\n         setFilesToPrune.insert(fileNumber);\n         count++;\n     }\n@@ -3988,7 +3988,7 @@ void PruneBlockFilesManual(int nManualPruneHeight)\n  *\n  * @param[out]   setFilesToPrune   The set of file indices that can be unlinked will be returned\n  */\n-static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n+static void FindFilesToPrune(ChainstateManager& chainman, std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight)\n {\n     LOCK2(cs_main, cs_LastBlockFile);\n     if (::ChainActive().Tip() == nullptr || nPruneTarget == 0) {\n@@ -4030,7 +4030,7 @@ static void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfte\n             if (vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n                 continue;\n \n-            PruneOneBlockFile(fileNumber);\n+            chainman.PruneOneBlockFile(fileNumber);\n             // Queue up the files for removal\n             setFilesToPrune.insert(fileNumber);\n             nCurrentUsage -= nBytesToPrune;"
      },
      {
        "sha": "1de773b7f6fc830d92d5153061bfd43691fea3a6",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24d4909864096934577abc26cfa9be47f634ba/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24d4909864096934577abc26cfa9be47f634ba/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa24d4909864096934577abc26cfa9be47f634ba",
        "patch": "@@ -214,11 +214,6 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pin\n /** Calculate the amount of disk space the block & undo files currently use */\n uint64_t CalculateCurrentUsage();\n \n-/**\n- *  Mark one block file as pruned.\n- */\n-void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n /**\n  *  Actually unlink the specified files\n  */\n@@ -865,6 +860,9 @@ class ChainstateManager\n     CChain& ValidatedChain() const { return ValidatedChainstate().m_chain; }\n     CBlockIndex* ValidatedTip() const { return ValidatedChain().Tip(); }\n \n+    //! Mark one block file as pruned (modify associated database entries)\n+    void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     //! Load the block tree and coins database from disk, initializing state if we're running with -reindex\n     bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      },
      {
        "sha": "3654420eb21b1c1376316959f5eb6b944f64dd68",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa24d4909864096934577abc26cfa9be47f634ba/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa24d4909864096934577abc26cfa9be47f634ba/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa24d4909864096934577abc26cfa9be47f634ba",
        "patch": "@@ -118,7 +118,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Prune the older block file.\n     {\n         LOCK(cs_main);\n-        PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+        EnsureChainman(m_node).PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n     }\n     UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n \n@@ -144,7 +144,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     // Prune the remaining block file.\n     {\n         LOCK(cs_main);\n-        PruneOneBlockFile(newTip->GetBlockPos().nFile);\n+        EnsureChainman(m_node).PruneOneBlockFile(newTip->GetBlockPos().nFile);\n     }\n     UnlinkPrunedFiles({newTip->GetBlockPos().nFile});\n \n@@ -181,7 +181,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // Prune the older block file.\n     {\n         LOCK(cs_main);\n-        PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+        EnsureChainman(m_node).PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n     }\n     UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n "
      }
    ]
  },
  {
    "sha": "fa1d97b25686a5caca623599f6d608fd08616fe8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFkOTdiMjU2ODZhNWNhY2E2MjM1OTlmNmQ2MDhmZDA4NjE2ZmU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T13:55:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:56:16Z"
      },
      "message": "validation: Make ProcessNewBlock*() members of ChainstateManager",
      "tree": {
        "sha": "512acf98aae5436c61ba7870c0876ea611ae1210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/512acf98aae5436c61ba7870c0876ea611ae1210"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1d97b25686a5caca623599f6d608fd08616fe8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiE4AwAuqDOFOrK4x5ssKdXEKM7U73o2jD2IS+QkPKWOMpngkMPtYzz59dcleIf\nBRxzoGpKsLqkVI1RZJZ0LfG6NSxirohu29SGhPKhb/yhxwvQ8uYb54LcOM66YXY5\npKo2lba5BbpQ8txyppDiyXSlYQt3NYLE/sT134TweDqSyjZZFtrimv2N+XFT0/Nq\nVDMLU+ydosZii2CodeeHyI40qYKDmjccVRfGFwjB9K5hKFjX24KCGGCj94HrBVDR\nwznfzkXEfigntg2SV0ggESZTPCe2OYc9wxk0TRTMgHcsmO7tjSt7/lv6ADM2465q\nUkN5/yP60AC1ytowz4UL+Zmu9oClygNmQ6gBOWIWP1/nXWaNDWfC9LMoqDUEb4NE\n1sMo62ueiGnsQPq7j0RZY6juzTqi99f6VcFqBsXiPc7QQXr2FkwpGipa+BiWbsY/\njvBYD5rNJ2t7E2zzNG7+8+RrABrqyW8I5C3WTUGkJEZKE13KCRb4b770FKrcxUbB\nyUsQkfWx\n=nxIf\n-----END PGP SIGNATURE-----",
        "payload": "tree 512acf98aae5436c61ba7870c0876ea611ae1210\nparent fa24d4909864096934577abc26cfa9be47f634ba\nauthor MarcoFalke <falke.marco@gmail.com> 1587218157 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069376 -0400\n\nvalidation: Make ProcessNewBlock*() members of ChainstateManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d97b25686a5caca623599f6d608fd08616fe8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d97b25686a5caca623599f6d608fd08616fe8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d97b25686a5caca623599f6d608fd08616fe8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa24d4909864096934577abc26cfa9be47f634ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa24d4909864096934577abc26cfa9be47f634ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa24d4909864096934577abc26cfa9be47f634ba"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 81,
      "deletions": 69
    },
    "files": [
      {
        "sha": "c31cb7672b40e11a17bc33b81db48aac7d83f644",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -1736,7 +1736,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n+bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, ChainstateManager& chainman, CTxMemPool& mempool, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool via_compact_block)\n {\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     size_t nCount = headers.size();\n@@ -1796,7 +1796,7 @@ bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& m\n     }\n \n     BlockValidationState state;\n-    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+    if (!chainman.ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n         if (state.IsInvalid()) {\n             MaybePunishNodeForBlock(pfrom->GetId(), state, via_compact_block, \"invalid header received\");\n             return false;\n@@ -2846,7 +2846,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n \n         const CBlockIndex *pindex = nullptr;\n         BlockValidationState state;\n-        if (!ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n+        if (!chainman.ProcessNewBlockHeaders({cmpctblock.header}, state, chainparams, &pindex)) {\n             if (state.IsInvalid()) {\n                 MaybePunishNodeForBlock(pfrom->GetId(), state, /*via_compact_block*/ true, \"invalid header via cmpctblock\");\n                 return true;\n@@ -2998,7 +2998,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n             // will be detected and the peer will be banned.\n-            return ProcessHeadersMessage(pfrom, connman, mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n+            return ProcessHeadersMessage(pfrom, connman, chainman, mempool, {cmpctblock.header}, chainparams, /*via_compact_block=*/true);\n         }\n \n         if (fBlockReconstructed) {\n@@ -3018,7 +3018,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -3108,7 +3108,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            chainman.ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -3142,7 +3142,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, connman, mempool, headers, chainparams, /*via_compact_block=*/false);\n+        return ProcessHeadersMessage(pfrom, connman, chainman, mempool, headers, chainparams, /*via_compact_block=*/false);\n     }\n \n     if (msg_type == NetMsgType::BLOCK)\n@@ -3171,7 +3171,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        chainman.ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {"
      },
      {
        "sha": "50cea07e0a68ca02f0a7787f9b1ad7894fe05eb0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -71,6 +71,12 @@ CTxMemPool& EnsureMemPool(const util::Ref& context)\n     return *node.mempool;\n }\n \n+ChainstateManager& EnsureChainman(const util::Ref& context)\n+{\n+    NodeContext& node = EnsureNodeContext(context);\n+    return EnsureChainman(node);\n+}\n+\n /* Calculate the difficulty for a given block index.\n  */\n double GetDifficulty(const CBlockIndex* blockindex)"
      },
      {
        "sha": "5c9a43b13ee742ff847aa826771bad5fa9becf5c",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -16,6 +16,7 @@ extern RecursiveMutex cs_main;\n class CBlock;\n class CBlockIndex;\n class CTxMemPool;\n+class ChainstateManager;\n class UniValue;\n struct NodeContext;\n namespace util {\n@@ -52,5 +53,6 @@ void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES],\n \n NodeContext& EnsureNodeContext(const util::Ref& context);\n CTxMemPool& EnsureMemPool(const util::Ref& context);\n+ChainstateManager& EnsureChainman(const util::Ref& context);\n \n #endif"
      },
      {
        "sha": "3612f14bbfb63d22d7eefda2a7c492fa875a2094",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -101,7 +101,7 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, uint256& block_hash)\n+static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t& max_tries, unsigned int& extra_nonce, uint256& block_hash)\n {\n     block_hash.SetNull();\n \n@@ -124,14 +124,15 @@ static bool GenerateBlock(CBlock& block, uint64_t& max_tries, unsigned int& extr\n     }\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    if (!ProcessNewBlock(chainparams, shared_pblock, true, nullptr))\n+    if (!chainman.ProcessNewBlock(chainparams, shared_pblock, true, nullptr)) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+    }\n \n     block_hash = block.GetHash();\n     return true;\n }\n \n-static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n+static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& mempool, const CScript& coinbase_script, int nGenerate, uint64_t nMaxTries)\n {\n     int nHeightEnd = 0;\n     int nHeight = 0;\n@@ -151,7 +152,7 @@ static UniValue generateBlocks(const CTxMemPool& mempool, const CScript& coinbas\n         CBlock *pblock = &pblocktemplate->block;\n \n         uint256 block_hash;\n-        if (!GenerateBlock(*pblock, nMaxTries, nExtraNonce, block_hash)) {\n+        if (!GenerateBlock(chainman, *pblock, nMaxTries, nExtraNonce, block_hash)) {\n             break;\n         }\n \n@@ -228,8 +229,9 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n     }\n \n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n-    return generateBlocks(mempool, coinbase_script, num_blocks, max_tries);\n+    return generateBlocks(chainman, mempool, coinbase_script, num_blocks, max_tries);\n }\n \n static UniValue generatetoaddress(const JSONRPCRequest& request)\n@@ -266,10 +268,11 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     }\n \n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     CScript coinbase_script = GetScriptForDestination(destination);\n \n-    return generateBlocks(mempool, coinbase_script, nGenerate, nMaxTries);\n+    return generateBlocks(chainman, mempool, coinbase_script, nGenerate, nMaxTries);\n }\n \n static UniValue generateblock(const JSONRPCRequest& request)\n@@ -370,7 +373,7 @@ static UniValue generateblock(const JSONRPCRequest& request)\n     uint64_t max_tries{1000000};\n     unsigned int extra_nonce{0};\n \n-    if (!GenerateBlock(block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n+    if (!GenerateBlock(EnsureChainman(request.context), block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Failed to make block.\");\n     }\n \n@@ -947,7 +950,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n@@ -986,7 +989,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n     }\n \n     BlockValidationState state;\n-    ProcessNewBlockHeaders({h}, state, Params());\n+    EnsureChainman(request.context).ProcessNewBlockHeaders({h}, state, Params());\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n         throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());"
      },
      {
        "sha": "7dff2e6e8693215a26a3f9c5d026d4bb5339ffa6",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -94,7 +94,7 @@ bool BuildChainTestingSetup::BuildChain(const CBlockIndex* pindex,\n         CBlockHeader header = block->GetBlockHeader();\n \n         BlockValidationState state;\n-        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex)) {\n+        if (!EnsureChainman(m_node).ProcessNewBlockHeaders({header}, state, Params(), &pindex)) {\n             return false;\n         }\n     }\n@@ -171,7 +171,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainA_last_header = last_header;\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BOOST_REQUIRE(EnsureChainman(m_node).ProcessNewBlock(Params(), block, true, nullptr));\n     }\n     for (size_t i = 0; i < 2; i++) {\n         const auto& block = chainA[i];\n@@ -189,7 +189,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     uint256 chainB_last_header = last_header;\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n-        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+        BOOST_REQUIRE(EnsureChainman(m_node).ProcessNewBlock(Params(), block, true, nullptr));\n     }\n     for (size_t i = 0; i < 3; i++) {\n         const auto& block = chainB[i];\n@@ -220,7 +220,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // Reorg back to chain A.\n      for (size_t i = 2; i < 4; i++) {\n          const auto& block = chainA[i];\n-         BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+         BOOST_REQUIRE(EnsureChainman(m_node).ProcessNewBlock(Params(), block, true, nullptr));\n      }\n \n      // Check that chain A and B blocks can be retrieved."
      },
      {
        "sha": "57eee94330abb5db4bcd51d57dc153c6c3fb5916",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -253,7 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        BOOST_CHECK(EnsureChainman(m_node).ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "dac7f1a07b8100f3ed099251e4e38e8f35017559",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -31,7 +31,7 @@ CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    bool processed{EnsureChainman(node).ProcessNewBlock(Params(), block, true, nullptr)};\n     assert(processed);\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "3b7a7c8d1219da9e7e45ef383dec881e8f2a412a",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -228,7 +228,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    EnsureChainman(m_node).ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "45e0c5484e3491e8bbaf256d8313a28bdafd24a4",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -163,10 +163,10 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n \n     // Process all the headers so we understand the toplogy of the chain\n-    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+    BOOST_CHECK(EnsureChainman(m_node).ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    BOOST_CHECK(ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n+    BOOST_CHECK(EnsureChainman(m_node).ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored));\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -183,18 +183,18 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     // will subscribe to events generated during block validation and assert on ordering invariance\n     std::vector<std::thread> threads;\n     for (int i = 0; i < 10; i++) {\n-        threads.emplace_back([&blocks]() {\n+        threads.emplace_back([&]() {\n             bool ignored;\n             FastRandomContext insecure;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[insecure.randrange(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                EnsureChainman(m_node).ProcessNewBlock(Params(), block, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    bool processed = EnsureChainman(m_node).ProcessNewBlock(Params(), block, true, &ignored);\n                     assert(processed);\n                 }\n             }\n@@ -232,8 +232,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n-    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n-        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n+        return EnsureChainman(m_node).ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "dbdf5028fd5d70e1cc79bb2ce0921bf4fcdab65c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -3691,13 +3691,14 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n+bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n+    AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n-            bool accepted = g_chainman.m_blockman.AcceptBlockHeader(\n+            bool accepted = m_blockman.AcceptBlockHeader(\n                 header, state, chainparams, &pindex);\n             ::ChainstateActive().CheckBlockIndex(chainparams.GetConsensus());\n \n@@ -3819,7 +3820,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n "
      },
      {
        "sha": "dcd4ddfa89157e4ff4e9022373533151beebaec8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d97b25686a5caca623599f6d608fd08616fe8/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d97b25686a5caca623599f6d608fd08616fe8/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa1d97b25686a5caca623599f6d608fd08616fe8",
        "patch": "@@ -150,41 +150,6 @@ extern bool fPruneMode;\n /** Number of MiB of block files that we're trying to stay below. */\n extern uint64_t nPruneTarget;\n \n-/**\n- * Process an incoming block. This only returns after the best known valid\n- * block is made active. Note that it does not, however, guarantee that the\n- * specific block passed to it has been checked for validity!\n- *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n- *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n- *\n- * May not be called in a\n- * validationinterface callback.\n- *\n- * @param[in]   pblock  The block we want to process.\n- * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @returns     If the block was processed, independently of block validity\n- */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n-\n-/**\n- * Process incoming block headers.\n- *\n- * May not be called in a\n- * validationinterface callback.\n- *\n- * @param[in]  block The block headers themselves\n- * @param[out] state This may be set to an Error state if any error occurred processing them\n- * @param[in]  chainparams The params for the chain we want to connect to\n- * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n- */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\n-\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n@@ -860,6 +825,41 @@ class ChainstateManager\n     CChain& ValidatedChain() const { return ValidatedChainstate().m_chain; }\n     CBlockIndex* ValidatedTip() const { return ValidatedChain().Tip(); }\n \n+    /**\n+     * Process an incoming block. This only returns after the best known valid\n+     * block is made active. Note that it does not, however, guarantee that the\n+     * specific block passed to it has been checked for validity!\n+     *\n+     * If you want to *possibly* get feedback on whether pblock is valid, you must\n+     * install a CValidationInterface (see validationinterface.h) - this will have\n+     * its BlockChecked method called whenever *any* block completes validation.\n+     *\n+     * Note that we guarantee that either the proof-of-work is valid on pblock, or\n+     * (and possibly also) BlockChecked will have been called.\n+     *\n+     * May not be called in a\n+     * validationinterface callback.\n+     *\n+     * @param[in]   pblock  The block we want to process.\n+     * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+     * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n+     * @returns     If the block was processed, independently of block validity\n+     */\n+    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+\n+    /**\n+     * Process incoming block headers.\n+     *\n+     * May not be called in a\n+     * validationinterface callback.\n+     *\n+     * @param[in]  block The block headers themselves\n+     * @param[out] state This may be set to an Error state if any error occurred processing them\n+     * @param[in]  chainparams The params for the chain we want to connect to\n+     * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n+     */\n+    bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr) LOCKS_EXCLUDED(cs_main);\n+\n     //! Mark one block file as pruned (modify associated database entries)\n     void PruneOneBlockFile(const int fileNumber) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "fab6b9d18fd48bbbd1939b1173723bc04c5824b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI2YjlkMThmZDQ4YmJiZDE5MzliMTE3MzcyM2JjMDRjNTgyNGI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T13:15:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-21T13:56:25Z"
      },
      "message": "validation: Mark g_chainman DEPRECATED",
      "tree": {
        "sha": "67af182252ed176b4585a9d68fb7cc4db91be679",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67af182252ed176b4585a9d68fb7cc4db91be679"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6b9d18fd48bbbd1939b1173723bc04c5824b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiWdgv/egDkHxCvmkLu3UtX9A95tXmbLyugQC3zM/ZdUN+fiVhMj5T7xFL9GE3m\nSy5xixexxKeecevUIs78Q8yWdE2a5z93ZzvrS2GIRnZCTh1vX+dr5a29mVSOLV0K\nT8XtzlnjXbyrJGeZVXnX2uoNICE0c+vEOkROJnlwyT1nUJ2Gm7itozhlSmUcbvFo\nLy868mm1yNMHYZAybeb+7gMKu1n1PK2X3lP09jzRCsGzif8u5SPU+lxabgeATTsQ\n5VXhIvEDd1G3QPrm7CKODuyDzrwtl4loZpFYmvQhJMh6q0RhpmH7F8Pzz69mQw+K\nNIONN/xET/4Zar+46CUy0F+7Lb27s2hzD1lmu3LSkC3btAy7c8XJXWcN0mzPJxAZ\n7AyFmdN4sSeJS+0VFlhnB9qkyBCVQcpwcLOLlL8apwmnF7bczSr/2rfIN9Vetxzv\nsleIXRLKsEm5rmTBhz8Chjm7Z69JLI/yRLOHFWfEw1K9zVYCjDJUVXkv5UXcpwXT\nszFVmk3F\n=BX86\n-----END PGP SIGNATURE-----",
        "payload": "tree 67af182252ed176b4585a9d68fb7cc4db91be679\nparent fa1d97b25686a5caca623599f6d608fd08616fe8\nauthor MarcoFalke <falke.marco@gmail.com> 1587215749 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1590069385 -0400\n\nvalidation: Mark g_chainman DEPRECATED\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6b9d18fd48bbbd1939b1173723bc04c5824b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6b9d18fd48bbbd1939b1173723bc04c5824b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6b9d18fd48bbbd1939b1173723bc04c5824b5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1d97b25686a5caca623599f6d608fd08616fe8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d97b25686a5caca623599f6d608fd08616fe8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d97b25686a5caca623599f6d608fd08616fe8"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8112e38704ea1a7494c5720f2d69c8e61a05697a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab6b9d18fd48bbbd1939b1173723bc04c5824b5/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab6b9d18fd48bbbd1939b1173723bc04c5824b5/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fab6b9d18fd48bbbd1939b1173723bc04c5824b5",
        "patch": "@@ -873,6 +873,7 @@ class ChainstateManager\n     void Reset();\n };\n \n+/** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */\n extern ChainstateManager g_chainman GUARDED_BY(::cs_main);\n \n /** @returns the most-work valid chainstate. */"
      }
    ]
  }
]