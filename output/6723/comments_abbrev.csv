jonasschnelli,2015-09-25T16:53:42Z,"Seems to be NACK territory.\n\nCoupling the wallets `-maxtxfee` to mempool seems as a step in the wrong direction. `-maxtxfee` is a protection of the wallet part.\nIf we are unhappy with `minRelayTxFee.GetFee(nSize) * 10000` as max mempool fee, we should think about adding another `-arg` or searching after a better non-magic-number solution.\n",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143279084,143279084,
MarcoFalke,2015-09-25T17:00:37Z,"Yes, maybe you are right. I created the PR to point out a bug in the wallet:\n\nLocally created transaction (Qt, sendtoaddress, rawtransaction, ...) are usually added to the mempool. The problem appears when the mempool uses different rules than Qt to determine if a transaction is ""valid"": A ""valid"" transaction created (by e.g. Qt) may be rejected AFTER being added to the wallet. This leads to the",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143283076,143283076,
sipa,2015-09-25T17:01:02Z,Agree with Jonas.\n,https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143283399,143283399,
jonasschnelli,2015-09-25T17:05:17Z,"@MarcoFalke: if this is the cases (didn't check myself), than the wallet should reject a transaction that cannot be added to the local mempool. In future, a mempool could be optional for the (QT)wallet, ... maybe the wallet should check if the transaction was broadcasted over the network (by checking if some invs of some nodes come in). If no invs of the just sent tx are coming in (after reasonabl",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143286393,143286393,
gmaxwell,2015-09-25T17:37:36Z,I think the whole maximum behavior is not worth having if it introduces another economically varying parameter that must be maintained.\n\nI've tested rawtx and it correctly does not add the transaction to the wallet.\n\nI don't think this behavior really should be applied to non-raw-tx as there is no mechanism to override and it should have better ways to avoid crazy fees.  This really only exist,https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143297836,143297836,
MarcoFalke,2015-09-25T18:48:56Z,"> @jonasschnelli  didn't check myself\n\nSteps to reproduce on 48efbdb:\n\n```\n-> settxfee 0.04\n<- true\n\n-> sendtoaddress mwEHWzBhaPYiErWWhmWW7QCjGoKNPaQQax 16\n<- Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here. (code -4)\n```\n\",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143319643,143319643,
sipa,2015-09-25T18:59:17Z,"An alternative (not for this PR) would be to have a way of calling\nAcceptToMemoryPool in a dummy mode, where everything is done except\nactually adding to the mempool. Such a function could optionally return a\ndata structure with information about the transaction's effects that can\nonly be computed with the UTXO set present, such as fees, age of inputs, ...\n\nThat could move the high fee detec",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143322318,143322318,
MarcoFalke,2015-09-26T17:45:14Z,"Closing per ""I don't think this behavior really should be applied to non-raw-tx"".\n",https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-143475219,143475219,
MarcoFalke,2016-03-14T00:35:15Z,This was merged as #7084 instead.\n,https://github.com/bitcoin/bitcoin/pull/6723#issuecomment-196089068,196089068,
MarcoFalke,2015-09-25T16:42:31Z,Including `wallet.h` here makes the smallest diff but I am not sure if this complies with bitcoin coding guidelines? Also travis fails because I did not yet consider no-wallet builds.\n,https://github.com/bitcoin/bitcoin/pull/6723#discussion_r40449623,40449623,src/main.cpp
