glozow,2021-10-01 16:07:01,"bench results on master:\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|                8.34 |      119,851,301.59 |    0.0% |      0.01 | `MempoolCheck`\n\nresults on top of this PR:\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-932360429,932360429,
flack,2021-10-01 17:19:19,"Sorry for being off-topic, but just because I always twitch slightly when I see it: The bench output is already formatted in [Markdown extended syntax](https://www.markdownguide.org/extended-syntax/), so if you just paste it into the comment box, without backticks around it (and without leading whitespace), it renders a bit nicer. And it's easier to do, because less steps :-)\n\n|               ",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-932416452,932416452,
DrahtBot,2021-10-01 17:29:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23173](https://github.com/bitcoin/bitcoin/pull/23173) (Add `ChainstateManager::ProcessTransaction` by jnewbery)\n* [#226",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-932423499,932423499,
glozow,2021-10-04 12:41:55,"@flack good tip, fixed\n\n@theStack @jnewbery thanks for your reviews, I think I've incorporated all suggestions :)\n\n> Is the next step here to change check() to take a const CCoinsViewCache& and int64_t height and remove the dependency on validation entirely?\n\nYes I thought I had included that commit here but apparently I hadn't - last push added it.",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-933445201,933445201,
jnewbery,2021-10-04 13:27:35,"> > Is the next step here to change check() to take a const CCoinsViewCache& and int64_t height and remove the dependency on validation entirely?\n\n> Yes I thought I had included that commit here but apparently I hadn't - last push added it.\n\nIt might actually be better to defer that commit until after #23173 so fewer changes are needed to net_processing. Entirely up to you.",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-933486307,933486307,
jnewbery,2021-10-04 15:45:40,reACK 082c5bf099c64e3d27abe9b68a71ce500b693e7e,https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-933614426,933614426,
GeneFerneau,2021-10-06 03:00:44,"tACK [082c5bf](https://github.com/bitcoin/bitcoin/pull/23157/commits/082c5bf099c64e3d27abe9b68a71ce500b693e7e)\n\nRan the bench a few times before and after the optimization:\n\n## Before optimization refactor\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|               81.2",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-935322192,935322192,
LarryRuane,2021-10-06 16:43:21,"concept ACK\nI'll try to do a code review, but FWIW, my working clone is usually built with optimization disabled (`-O0`) to make debugging easier, and there's an even bigger improvement that way (approximately 18x):\n\nbefore:\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|--------:|----------:|:----------\n|     ",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-936659052,936659052,
glozow,2021-10-20 09:16:11,">  It seems like the difference in benchmark results is almost only caused by the very last commit.\n\nThat sounds strange to me, but I guess it's plausible that the bench only sees a speedup because of the parameter change rather than ordered traversal. Even so, I'd want to remove all that unnecessary code...\n\n",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-947480706,947480706,
theStack,2021-10-20 14:18:30,"> That sounds strange to me, but I guess it's plausible that the bench only sees a speedup because of the parameter change rather than ordered traversal. Even so, I'd want to remove all that unnecessary code...\n\nAgree, removing unnecessary code is always a good thing! I didn't intend to sound concept NACKy, this was just a hint that the posted benchmark results have to be taken with a grain of",https://github.com/bitcoin/bitcoin/pull/23157#issuecomment-947713643,947713643,
theStack,2021-10-03 22:27:02,This vector doesn't seem to be used anywhere after being filled (aka [WOM](https://en.m.wikipedia.org/wiki/Write-only_memory_(joke)))?,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r720916478,720916478,src/bench/mempool_stress.cpp
glozow,2021-10-04 09:29:11,"oops :sweat_smile: was originally going to use this to evict transactions in random order, will remove",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721193126,721193126,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 09:38:53,"Consider making const and using current variable naming style:\n\n```c++\n    const int child_txs{bench.complexityN() > 1 ?\n                        static_cast<int>(bench.complexityN()) :\n                        2000};\n```",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721200535,721200535,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 09:40:41,"```suggestion\n    const std::vector<CTransactionRef> ordered_coins = CreateOrderedCoins(det_rand, childTxs, /* min_ancestors */ 5);\n```",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721201942,721201942,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 09:40:49,"```suggestion\n    const auto extra_args = {""-checkmempool=1""}; // Always check\n```",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721202043,721202043,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 09:41:28,"I think it helps readability to have a linebreak between the setup and the bench run:\n\n```suggestion\n    for (auto& tx : ordered_coins) AddTx(tx, pool);\n\n    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n```",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721202532,721202532,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 09:46:35,Remove this along with `std::iota` (https://github.com/bitcoin/bitcoin/pull/23157/files#r721193126),https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721206321,721206321,src/bench/mempool_stress.cpp
jnewbery,2021-10-04 10:09:09,"I don't understand what ""non-contextual check()"" is referring to here.",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721222770,721222770,src/txmempool.cpp
jnewbery,2021-10-04 10:10:38,This comment could explain why parents have been checked before their children (because we sorted by depth before iterating through entries).,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721223840,721223840,src/txmempool.cpp
jnewbery,2021-10-04 10:13:55,Remove extra newline :),https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721225993,721225993,src/txmempool.cpp
jnewbery,2021-10-04 10:20:51,"Can this assert and the `assert(active_coins_tip.HaveCoin(txin.prevout));` in the else branch below now be merged into a single `assert(mempoolDuplicate.HaveCoin(txin.prevout));`?\n\nIf I understand correctly, the `mempoolDuplicate` coins cache is a copy of the `active_chains_tip` cache, so should have all of the coins in the UTXO set. That means `mempoolDuplicate` should have all of the coins t",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721230523,721230523,src/txmempool.cpp
jnewbery,2021-10-04 10:28:33,"I know you just moved this code, but I think we should remove `tx.IsCoinBase()` from here, and add an `assert(!tx.IsCoinBase());`. The mempool shouldn't contain coinbase transactions.\n\nNo need to do it as part of this PR. Can be a follow-up.",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721235682,721235682,src/txmempool.cpp
glozow,2021-10-04 12:31:43,did ternary operator on one line,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721317603,721317603,src/bench/mempool_stress.cpp
glozow,2021-10-04 12:31:51,Done,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721317697,721317697,src/bench/mempool_stress.cpp
glozow,2021-10-04 12:31:57,Done,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721317769,721317769,src/bench/mempool_stress.cpp
glozow,2021-10-04 12:32:06,"Agree, done",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721317858,721317858,src/bench/mempool_stress.cpp
glozow,2021-10-04 12:32:18,"Done, sorry for the sloppiness",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721318009,721318009,src/bench/mempool_stress.cpp
glozow,2021-10-04 12:32:44,Leftover from previous iteration of the PR - removed now,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721318286,721318286,src/txmempool.cpp
glozow,2021-10-04 12:32:53,Done,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721318384,721318384,src/txmempool.cpp
glozow,2021-10-04 12:33:03,Fixed,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721318517,721318517,src/txmempool.cpp
glozow,2021-10-04 12:34:02,"Yes, it can, but I thought people might find it scary. I've grouped this and the !IsCoinbase check you suggested into one ""simplify logic"" commit. ",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721319192,721319192,src/txmempool.cpp
glozow,2021-10-04 12:34:18,"Agree, added.",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721319410,721319410,src/txmempool.cpp
jnewbery,2021-10-04 12:46:05,"After this commit, `UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)` is no longer used:\n\n```diff\ndiff --git a/src/validation.cpp b/src/validation.cpp\nindex 4504d2ca0a..c552577229 100644\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -1225,6 +1225,7 @@ void CChainState::InvalidBlockFound(CBlockIndex* pindex, const BlockValidationSt\n     }\n }\n \n+",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721328836,721328836,src/txmempool.cpp
glozow,2021-10-04 12:51:39,oh good point! removed now,https://github.com/bitcoin/bitcoin/pull/23157#discussion_r721333376,721333376,src/txmempool.cpp
SachinMeier,2021-10-06 00:45:29,"Nit: This could be simplified to: \n```cpp \nint childTxs = bench.complexityN() > 1 ? static_cast<int>(bench.complexityN()) : 800;\n```\nas it is on line 105",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r722805484,722805484,src/bench/mempool_stress.cpp
mjdietzx,2021-10-28 22:04:40,"Why is this sanity check necessary? It's not like `GetSortedDepthAndScore()` is complicated or has non-deterministic behavior, right?\n\nAnd why do we really need to fail if somehow we do encounter this case? The only down-side I see is marking this as a ""check later"" transaction which is just a minor performance hit?\n\nAre there any race conditions where we could possibly see this assert thr",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r738806372,738806372,src/txmempool.cpp
mjdietzx,2021-10-28 22:15:09,"Alright, I'm reviewing commit by commit, and now in e8639ec26aaf4de3fae280963434bf1cf2017b6f I am starting to understand why we have this assert.\n\nBut, I'm still wondering, why have this assert if `assert(mempoolDuplicate.HaveCoin(txin.prevout));` will take care of the job should we run into any problems? I still don't see why this is beneficial\n\n",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r738811117,738811117,src/txmempool.cpp
glozow,2021-10-29 09:45:11,"It's not strictly necessary, no. It's just a relatively cheap-to-run sanity check. It can make things easier to debug if we have any problems, but yes it can be removed and this code would still be checking the same things.",https://github.com/bitcoin/bitcoin/pull/23157#discussion_r739091181,739091181,src/txmempool.cpp
