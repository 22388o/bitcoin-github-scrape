[
  {
    "sha": "03cac0bb8e9cab02c456cbe71a0519aec92a6150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2NhYzBiYjhlOWNhYjAyYzQ1NmNiZTcxYTA1MTlhZWM5MmE2MTUw",
    "commit": {
      "author": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2012-12-19T20:21:21Z"
      },
      "committer": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2012-12-19T21:12:58Z"
      },
      "message": "changed CreateNewBlock to return a CBlockTemplate object, which includes per-tx fee and sigop count data",
      "tree": {
        "sha": "9dd3dfd63a244690a13c2622873f2bf3f855be71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd3dfd63a244690a13c2622873f2bf3f855be71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03cac0bb8e9cab02c456cbe71a0519aec92a6150",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03cac0bb8e9cab02c456cbe71a0519aec92a6150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03cac0bb8e9cab02c456cbe71a0519aec92a6150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03cac0bb8e9cab02c456cbe71a0519aec92a6150/comments",
    "author": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6940626d08e313c5e1cd99c63aeca9da45d5b7a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6940626d08e313c5e1cd99c63aeca9da45d5b7a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6940626d08e313c5e1cd99c63aeca9da45d5b7a4"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 67,
      "deletions": 47
    },
    "files": [
      {
        "sha": "20480f029cb6f1b62ce9bb9f715a302e5391a189",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "patch": "@@ -3732,12 +3732,13 @@ class TxPriorityCompare\n     }\n };\n \n-CBlock* CreateNewBlock(CReserveKey& reservekey)\n+CBlockTemplate* CreateNewBlock(CReserveKey& reservekey)\n {\n     // Create new block\n-    auto_ptr<CBlock> pblock(new CBlock());\n-    if (!pblock.get())\n+    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n+    if(!pblocktemplate.get())\n         return NULL;\n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Create coinbase tx\n     CTransaction txNew;\n@@ -3748,6 +3749,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n     // Add our coinbase tx as first transaction\n     pblock->vtx.push_back(txNew);\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOps.push_back(-1); // updated at end\n \n     // Largest block you're willing to create:\n     unsigned int nBlockMaxSize = GetArg(\"-blockmaxsize\", MAX_BLOCK_SIZE_GEN/2);\n@@ -3925,6 +3928,8 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n \n             // Added\n             pblock->vtx.push_back(tx);\n+            pblocktemplate->vTxFees.push_back(nTxFees);\n+            pblocktemplate->vTxSigOps.push_back(nTxSigOps);\n             nBlockSize += nTxSize;\n             ++nBlockTx;\n             nBlockSigOps += nTxSigOps;\n@@ -3959,13 +3964,15 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n         printf(\"CreateNewBlock(): total size %\"PRI64u\"\\n\", nBlockSize);\n \n         pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n+        pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         pblock->UpdateTime(pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock.get());\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n         pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;\n+        pblocktemplate->vTxSigOps[0] = pblock->vtx[0].GetLegacySigOpCount();\n \n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;\n@@ -3975,7 +3982,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");\n     }\n \n-    return pblock.release();\n+    return pblocktemplate.release();\n }\n \n \n@@ -4118,10 +4125,11 @@ void static BitcoinMiner(CWallet *pwallet)\n         unsigned int nTransactionsUpdatedLast = nTransactionsUpdated;\n         CBlockIndex* pindexPrev = pindexBest;\n \n-        auto_ptr<CBlock> pblock(CreateNewBlock(reservekey));\n-        if (!pblock.get())\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(reservekey));\n+        if (!pblocktemplate.get())\n             return;\n-        IncrementExtraNonce(pblock.get(), pindexPrev, nExtraNonce);\n+        CBlock *pblock = &pblocktemplate->block;\n+        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n \n         printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n@@ -4134,7 +4142,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n         char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n \n-        FormatHashBuffers(pblock.get(), pmidstate, pdata, phash1);\n+        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n \n         unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n         unsigned int& nBlockBits = *(unsigned int*)(pdata + 64 + 8);\n@@ -4170,7 +4178,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     assert(hash == pblock->GetHash());\n \n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                    CheckWork(pblock.get(), *pwalletMain, reservekey);\n+                    CheckWork(pblock, *pwalletMain, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n                     break;\n                 }"
      },
      {
        "sha": "d34778d12f898569474cf8b8209bacebf89aa74e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "patch": "@@ -108,6 +108,8 @@ class CTxUndo;\n class CCoinsView;\n class CCoinsViewCache;\n \n+struct CBlockTemplate;\n+\n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWallet* pwalletIn);\n /** Unregister a wallet from core */\n@@ -139,7 +141,7 @@ void ThreadImport(void *parg);\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */\n-CBlock* CreateNewBlock(CReserveKey& reservekey);\n+CBlockTemplate* CreateNewBlock(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n /** Do mining precalculation */\n@@ -1975,4 +1977,11 @@ extern CCoinsViewCache *pcoinsTip;\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern CBlockTreeDB *pblocktree;\n \n+struct CBlockTemplate\n+{\n+    CBlock block;\n+    std::vector<int64_t> vTxFees;\n+    std::vector<int64_t> vTxSigOps;\n+};\n+\n #endif"
      },
      {
        "sha": "e4b487aea4b4c845573e88984a9570be3454a658",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "patch": "@@ -103,7 +103,7 @@ Value getwork(const Array& params, bool fHelp)\n \n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n     static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n-    static vector<CBlock*> vNewBlock;\n+    static vector<CBlockTemplate*> vNewBlockTemplate;\n     static CReserveKey reservekey(pwalletMain);\n \n     if (params.size() == 0)\n@@ -112,17 +112,17 @@ Value getwork(const Array& params, bool fHelp)\n         static unsigned int nTransactionsUpdatedLast;\n         static CBlockIndex* pindexPrev;\n         static int64 nStart;\n-        static CBlock* pblock;\n+        static CBlockTemplate* pblocktemplate;\n         if (pindexPrev != pindexBest ||\n             (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n         {\n             if (pindexPrev != pindexBest)\n             {\n                 // Deallocate old blocks since they're obsolete now\n                 mapNewBlock.clear();\n-                BOOST_FOREACH(CBlock* pblock, vNewBlock)\n-                    delete pblock;\n-                vNewBlock.clear();\n+                BOOST_FOREACH(CBlockTemplate* pblocktemplate, vNewBlockTemplate)\n+                    delete pblocktemplate;\n+                vNewBlockTemplate.clear();\n             }\n \n             // Clear pindexPrev so future getworks make a new block, despite any failures from here on\n@@ -134,14 +134,15 @@ Value getwork(const Array& params, bool fHelp)\n             nStart = GetTime();\n \n             // Create new block\n-            pblock = CreateNewBlock(reservekey);\n-            if (!pblock)\n+            pblocktemplate = CreateNewBlock(reservekey);\n+            if (!pblocktemplate)\n                 throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n-            vNewBlock.push_back(pblock);\n+            vNewBlockTemplate.push_back(pblocktemplate);\n \n             // Need to update only after we know CreateNewBlock succeeded\n             pindexPrev = pindexPrevNew;\n         }\n+        CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n         // Update nTime\n         pblock->UpdateTime(pindexPrev);\n@@ -248,7 +249,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     static unsigned int nTransactionsUpdatedLast;\n     static CBlockIndex* pindexPrev;\n     static int64 nStart;\n-    static CBlock* pblock;\n+    static CBlockTemplate* pblocktemplate;\n     if (pindexPrev != pindexBest ||\n         (nTransactionsUpdated != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n@@ -261,18 +262,19 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         nStart = GetTime();\n \n         // Create new block\n-        if(pblock)\n+        if(pblocktemplate)\n         {\n-            delete pblock;\n-            pblock = NULL;\n+            delete pblocktemplate;\n+            pblocktemplate = NULL;\n         }\n-        pblock = CreateNewBlock(reservekey);\n-        if (!pblock)\n+        pblocktemplate = CreateNewBlock(reservekey);\n+        if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n         // Need to update only after we know CreateNewBlock succeeded\n         pindexPrev = pindexPrevNew;\n     }\n+    CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n     pblock->UpdateTime(pindexPrev);"
      },
      {
        "sha": "bc2a05a6b36cc06f7f37a1c489f6e0d43b164c58",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03cac0bb8e9cab02c456cbe71a0519aec92a6150/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "patch": "@@ -49,19 +49,20 @@ struct {\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     CReserveKey reservekey(pwalletMain);\n-    CBlock *pblock;\n+    CBlockTemplate *pblocktemplate;\n     CTransaction tx;\n     CScript script;\n     uint256 hash;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n+        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n         pblock->nTime = pindexBest->GetMedianTimePast()+1;\n         pblock->vtx[0].vin[0].scriptSig = CScript();\n@@ -75,10 +76,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         assert(ProcessBlock(NULL, pblock));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n-    delete pblock;\n+    delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n     tx.vin.resize(1);\n@@ -95,8 +96,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, tx);\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // block size > limit\n@@ -115,15 +116,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, tx);\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // child with higher priority than parent\n@@ -140,8 +141,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // coinbase in mempool\n@@ -151,8 +152,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool\n@@ -169,8 +170,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash,tx);\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // double spend txn pair in mempool\n@@ -183,18 +184,18 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, tx);\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = pindexBest->nHeight;\n     pindexBest->nHeight = 209999;\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     pindexBest->nHeight = 210000;\n-    BOOST_CHECK(pblock = CreateNewBlock(reservekey));\n-    delete pblock;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(reservekey));\n+    delete pblocktemplate;\n     pindexBest->nHeight = nHeight;\n }\n "
      }
    ]
  },
  {
    "sha": "0f927ceb5b90ec02be36ddb20b2f4cff82589265",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjkyN2NlYjViOTBlYzAyYmUzNmRkYjIwYjJmNGNmZjgyNTg5MjY1",
    "commit": {
      "author": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2012-12-19T20:44:25Z"
      },
      "committer": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2012-12-19T21:12:58Z"
      },
      "message": "use fee/sigop data in BlockTemplate struct instead of (not always correctly) calculating it ourselves",
      "tree": {
        "sha": "bd894e52b8b77d97278ddebc53084323c8e700e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd894e52b8b77d97278ddebc53084323c8e700e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f927ceb5b90ec02be36ddb20b2f4cff82589265",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f927ceb5b90ec02be36ddb20b2f4cff82589265",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f927ceb5b90ec02be36ddb20b2f4cff82589265",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f927ceb5b90ec02be36ddb20b2f4cff82589265/comments",
    "author": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03cac0bb8e9cab02c456cbe71a0519aec92a6150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03cac0bb8e9cab02c456cbe71a0519aec92a6150"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "47ca13528fb14a1ac639a7adefa28ded1c1514d4",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f927ceb5b90ec02be36ddb20b2f4cff82589265/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f927ceb5b90ec02be36ddb20b2f4cff82589265/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0f927ceb5b90ec02be36ddb20b2f4cff82589265",
        "patch": "@@ -283,7 +283,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     Array transactions;\n     map<uint256, int64_t> setTxIndex;\n     int i = 0;\n-    CCoinsViewCache &view = *pcoinsTip;\n     BOOST_FOREACH (CTransaction& tx, pblock->vtx)\n     {\n         uint256 txHash = tx.GetHash();\n@@ -308,13 +307,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"depends\", deps));\n \n-        int64_t nSigOps = tx.GetLegacySigOpCount();\n-        if (tx.HaveInputs(view))\n-        {\n-            entry.push_back(Pair(\"fee\", (int64_t)(tx.GetValueIn(view) - tx.GetValueOut())));\n-            nSigOps += tx.GetP2SHSigOpCount(view);\n-        }\n-        entry.push_back(Pair(\"sigops\", nSigOps));\n+        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[&tx - pblock->vtx.data()]));\n+        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[&tx - pblock->vtx.data()]));\n \n         transactions.push_back(entry);\n     }"
      }
    ]
  },
  {
    "sha": "f3d872d1eabeb5c999162f709626ee20c8789c42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Q4NzJkMWVhYmViNWM5OTkxNjJmNzA5NjI2ZWUyMGM4Nzg5YzQy",
    "commit": {
      "author": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2013-01-04T04:58:36Z"
      },
      "committer": {
        "name": "Forrest Voight",
        "email": "forrest@forre.st",
        "date": "2013-01-04T04:58:40Z"
      },
      "message": "moved \"index_in_template\" to a separate variable to clarify what it is",
      "tree": {
        "sha": "11595906474f239d434c6d80f51d8d2a57ded751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11595906474f239d434c6d80f51d8d2a57ded751"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3d872d1eabeb5c999162f709626ee20c8789c42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d872d1eabeb5c999162f709626ee20c8789c42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3d872d1eabeb5c999162f709626ee20c8789c42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3d872d1eabeb5c999162f709626ee20c8789c42/comments",
    "author": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "forrestv",
      "id": 59872,
      "node_id": "MDQ6VXNlcjU5ODcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/59872?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forrestv",
      "html_url": "https://github.com/forrestv",
      "followers_url": "https://api.github.com/users/forrestv/followers",
      "following_url": "https://api.github.com/users/forrestv/following{/other_user}",
      "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions",
      "organizations_url": "https://api.github.com/users/forrestv/orgs",
      "repos_url": "https://api.github.com/users/forrestv/repos",
      "events_url": "https://api.github.com/users/forrestv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forrestv/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f927ceb5b90ec02be36ddb20b2f4cff82589265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f927ceb5b90ec02be36ddb20b2f4cff82589265",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f927ceb5b90ec02be36ddb20b2f4cff82589265"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "778e0acbd23aba390b3d30e7bb61ed322c36d994",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3d872d1eabeb5c999162f709626ee20c8789c42/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3d872d1eabeb5c999162f709626ee20c8789c42/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f3d872d1eabeb5c999162f709626ee20c8789c42",
        "patch": "@@ -307,8 +307,9 @@ Value getblocktemplate(const Array& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"depends\", deps));\n \n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[&tx - pblock->vtx.data()]));\n-        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[&tx - pblock->vtx.data()]));\n+        int index_in_template = &tx - pblock->vtx.data();\n+        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOps[index_in_template]));\n \n         transactions.push_back(entry);\n     }"
      }
    ]
  }
]