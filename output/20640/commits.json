[
  {
    "sha": "9068f7467db9db87b574811224961e391c63dd69",
    "node_id": "C_kwDOABII59oAKDkwNjhmNzQ2N2RiOWRiODdiNTc0ODExMjI0OTYxZTM5MWM2M2RkNjk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-13T00:37:40Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-28T23:51:39Z"
      },
      "message": "wallet: CreateTransactionInternal(): return out-params as (optional) struct",
      "tree": {
        "sha": "6b403c7322866c8c1da0ea9a75fa9e70adfc734f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b403c7322866c8c1da0ea9a75fa9e70adfc734f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9068f7467db9db87b574811224961e391c63dd69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9068f7467db9db87b574811224961e391c63dd69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9068f7467db9db87b574811224961e391c63dd69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9068f7467db9db87b574811224961e391c63dd69/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 46,
      "deletions": 19
    },
    "files": [
      {
        "sha": "18799aeda39b03c2c929d2ca9d380c0164007012",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 19,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9068f7467db9db87b574811224961e391c63dd69/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9068f7467db9db87b574811224961e391c63dd69/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=9068f7467db9db87b574811224961e391c63dd69",
        "patch": "@@ -633,19 +633,22 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, const uin\n     return locktime;\n }\n \n-static bool CreateTransactionInternal(\n+static std::optional<CreatedTransactionResult> CreateTransactionInternal(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n-        CTransactionRef& tx,\n-        CAmount& nFeeRet,\n-        int& nChangePosInOut,\n+        int nChangePos,\n         bilingual_str& error,\n         const CCoinControl& coin_control,\n         FeeCalculation& fee_calc_out,\n         bool sign) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     AssertLockHeld(wallet.cs_wallet);\n \n+    // out variables, to be packed into returned result structure\n+    CTransactionRef tx;\n+    CAmount nFeeRet;\n+    int nChangePosInOut = nChangePos;\n+\n     CMutableTransaction txNew; // The resulting transaction that we make\n     txNew.nLockTime = GetLocktimeForNewTransaction(wallet.chain(), wallet.GetLastBlockHash(), wallet.GetLastBlockHeight());\n \n@@ -720,12 +723,12 @@ static bool CreateTransactionInternal(\n     // provided one\n     if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n         error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n-        return false;\n+        return std::nullopt;\n     }\n     if (feeCalc.reason == FeeReason::FALLBACK && !wallet.m_allow_fallback_fee) {\n         // eventually allow a fallback fee\n         error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Calculate the cost of change\n@@ -752,7 +755,7 @@ static bool CreateTransactionInternal(\n         if (IsDust(txout, wallet.chain().relayDustFee()))\n         {\n             error = _(\"Transaction amount too small\");\n-            return false;\n+            return std::nullopt;\n         }\n         txNew.vout.push_back(txout);\n     }\n@@ -771,7 +774,7 @@ static bool CreateTransactionInternal(\n     if (!SelectCoins(wallet, vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n     {\n         error = _(\"Insufficient funds\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Always make a change output\n@@ -788,7 +791,7 @@ static bool CreateTransactionInternal(\n     else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n     {\n         error = _(\"Change index out of range\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     assert(nChangePosInOut != -1);\n@@ -816,7 +819,7 @@ static bool CreateTransactionInternal(\n     int nBytes = tx_sizes.vsize;\n     if (nBytes == -1) {\n         error = _(\"Missing solving data for estimating transaction size\");\n-        return false;\n+        return std::nullopt;\n     }\n     nFeeRet = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n \n@@ -880,7 +883,7 @@ static bool CreateTransactionInternal(\n                     } else {\n                         error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                     }\n-                    return false;\n+                    return std::nullopt;\n                 }\n             }\n             ++i;\n@@ -890,12 +893,12 @@ static bool CreateTransactionInternal(\n \n     // Give up if change keypool ran out and change is required\n     if (scriptChange.empty() && nChangePosInOut != -1) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     if (sign && !wallet.SignTransaction(txNew)) {\n         error = _(\"Signing transaction failed\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Return the constructed transaction data.\n@@ -906,19 +909,19 @@ static bool CreateTransactionInternal(\n         (!sign && tx_sizes.weight > MAX_STANDARD_TX_WEIGHT))\n     {\n         error = _(\"Transaction too large\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     if (nFeeRet > wallet.m_default_max_tx_fee) {\n         error = TransactionErrorString(TransactionError::MAX_FEE_EXCEEDED);\n-        return false;\n+        return std::nullopt;\n     }\n \n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         if (!wallet.chain().checkChainLimits(tx)) {\n             error = _(\"Transaction has too long of a mempool chain\");\n-            return false;\n+            return std::nullopt;\n         }\n     }\n \n@@ -935,9 +938,11 @@ static bool CreateTransactionInternal(\n               feeCalc.est.fail.start, feeCalc.est.fail.end,\n               (feeCalc.est.fail.totalConfirmed + feeCalc.est.fail.inMempool + feeCalc.est.fail.leftMempool) > 0.0 ? 100 * feeCalc.est.fail.withinTarget / (feeCalc.est.fail.totalConfirmed + feeCalc.est.fail.inMempool + feeCalc.est.fail.leftMempool) : 0.0,\n               feeCalc.est.fail.withinTarget, feeCalc.est.fail.totalConfirmed, feeCalc.est.fail.inMempool, feeCalc.est.fail.leftMempool);\n-    return true;\n+    return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut);\n }\n \n+// TODO: also return std::optional<CreatedTransactionResult> here in order\n+//       to eliminate the out parameters and to simplify the function\n bool CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n@@ -963,7 +968,14 @@ bool CreateTransaction(\n \n     int nChangePosIn = nChangePosInOut;\n     Assert(!tx); // tx is an out-param. TODO change the return type from bool to tx (or nullptr)\n-    bool res = CreateTransactionInternal(wallet, vecSend, tx, nFeeRet, nChangePosInOut, error, coin_control, fee_calc_out, sign);\n+    std::optional<CreatedTransactionResult> txr_ungrouped = CreateTransactionInternal(wallet, vecSend, nChangePosInOut, error, coin_control, fee_calc_out, sign);\n+    bool res = false;\n+    if (txr_ungrouped) {\n+        tx = txr_ungrouped->tx;\n+        nFeeRet = txr_ungrouped->fee;\n+        nChangePosInOut = txr_ungrouped->change_pos;\n+        res = true;\n+    }\n     // try with avoidpartialspends unless it's enabled already\n     if (res && nFeeRet > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         CCoinControl tmp_cc = coin_control;\n@@ -972,7 +984,12 @@ bool CreateTransaction(\n         CTransactionRef tx2;\n         int nChangePosInOut2 = nChangePosIn;\n         bilingual_str error2; // fired and forgotten; if an error occurs, we discard the results\n-        if (CreateTransactionInternal(wallet, vecSend, tx2, nFeeRet2, nChangePosInOut2, error2, tmp_cc, fee_calc_out, sign)) {\n+        std::optional<CreatedTransactionResult> txr_grouped = CreateTransactionInternal(wallet, vecSend, nChangePosInOut2, error2, tmp_cc, fee_calc_out, sign);\n+        if (txr_grouped) {\n+            tx2 = txr_grouped->tx;\n+            nFeeRet2 = txr_grouped->fee;\n+            nChangePosInOut2 = txr_grouped->change_pos;\n+\n             // if fee of this alternative one is within the range of the max fee, we use this one\n             const bool use_aps = nFeeRet2 <= nFeeRet + wallet.m_max_aps_fee;\n             wallet.WalletLogPrintf(\"Fee non-grouped = %lld, grouped = %lld, using %s\\n\", nFeeRet, nFeeRet2, use_aps ? \"grouped\" : \"non-grouped\");"
      },
      {
        "sha": "c4566188d1127f5c1d37bbb66058487b7770b2e7",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9068f7467db9db87b574811224961e391c63dd69/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9068f7467db9db87b574811224961e391c63dd69/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=9068f7467db9db87b574811224961e391c63dd69",
        "patch": "@@ -125,6 +125,16 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n                  const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n \n+struct CreatedTransactionResult\n+{\n+    CTransactionRef tx;\n+    CAmount fee;\n+    int change_pos;\n+\n+    CreatedTransactionResult(CTransactionRef tx, CAmount fee, int change_pos)\n+        : tx(tx), fee(fee), change_pos(change_pos) {}\n+};\n+\n /**\n  * Create a new transaction paying the recipients with a set of coins\n  * selected by SelectCoins(); Also create the change output, when needed"
      }
    ]
  },
  {
    "sha": "d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
    "node_id": "C_kwDOABII59oAKGQwZDg5ZjBkNjljNWFhMzM4MTUyOTM1ZjQ2ZjNjNGFiZTc3YjNmNGM",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-13T02:15:40Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-28T23:54:09Z"
      },
      "message": "wallet: CreateTransaction(): return out-params as (optional) struct",
      "tree": {
        "sha": "60b3d9171af7ad160c9e040c527b9eb646ea8d73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60b3d9171af7ad160c9e040c527b9eb646ea8d73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9068f7467db9db87b574811224961e391c63dd69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9068f7467db9db87b574811224961e391c63dd69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9068f7467db9db87b574811224961e391c63dd69"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 49,
      "deletions": 69
    },
    "files": [
      {
        "sha": "70c263d11b84a5b415ff96ec0795bbd0fe634507",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -217,21 +217,20 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     // We cannot source new unconfirmed inputs(bip125 rule 2)\n     new_coin_control.m_min_depth = 1;\n \n-    CTransactionRef tx_new;\n-    CAmount fee_ret;\n-    int change_pos_in_out = -1; // No requested location for change\n+    constexpr int RANDOM_CHANGE_POSITION = -1;\n     bilingual_str fail_reason;\n     FeeCalculation fee_calc_out;\n-    if (!CreateTransaction(wallet, recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, fee_calc_out, false)) {\n+    std::optional<CreatedTransactionResult> txr = CreateTransaction(wallet, recipients, RANDOM_CHANGE_POSITION, fail_reason, new_coin_control, fee_calc_out, false);\n+    if (!txr) {\n         errors.push_back(Untranslated(\"Unable to create transaction.\") + Untranslated(\" \") + fail_reason);\n         return Result::WALLET_ERROR;\n     }\n \n     // Write back new fee if successful\n-    new_fee = fee_ret;\n+    new_fee = txr->fee;\n \n     // Write back transaction\n-    mtx = CMutableTransaction(*tx_new);\n+    mtx = CMutableTransaction(*txr->tx);\n     // Mark new tx not replaceable, if requested.\n     if (!coin_control.m_signal_bip125_rbf.value_or(wallet.m_signal_rbf)) {\n         for (auto& input : mtx.vin) {"
      },
      {
        "sha": "0f60d4283e883c289a829bda6977606318f6104d",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -244,13 +244,14 @@ class WalletImpl : public Wallet\n         bilingual_str& fail_reason) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        CTransactionRef tx;\n         FeeCalculation fee_calc_out;\n-        if (!CreateTransaction(*m_wallet, recipients, tx, fee, change_pos,\n-                fail_reason, coin_control, fee_calc_out, sign)) {\n-            return {};\n-        }\n-        return tx;\n+        std::optional<CreatedTransactionResult> txr = CreateTransaction(*m_wallet, recipients, change_pos,\n+                fail_reason, coin_control, fee_calc_out, sign);\n+        if (!txr) return {};\n+        fee = txr->fee;\n+        change_pos = txr->change_pos;\n+\n+        return txr->tx;\n     }\n     void commitTransaction(CTransactionRef tx,\n         WalletValueMap value_map,"
      },
      {
        "sha": "a845ea715412894042a2fd3b3198a19c81e755d2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -422,15 +422,14 @@ UniValue SendMoney(CWallet& wallet, const CCoinControl &coin_control, std::vecto\n     std::shuffle(recipients.begin(), recipients.end(), FastRandomContext());\n \n     // Send\n-    CAmount nFeeRequired = 0;\n-    int nChangePosRet = -1;\n+    constexpr int RANDOM_CHANGE_POSITION = -1;\n     bilingual_str error;\n-    CTransactionRef tx;\n     FeeCalculation fee_calc_out;\n-    const bool fCreated = CreateTransaction(wallet, recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, true);\n-    if (!fCreated) {\n+    std::optional<CreatedTransactionResult> txr = CreateTransaction(wallet, recipients, RANDOM_CHANGE_POSITION, error, coin_control, fee_calc_out, true);\n+    if (!txr) {\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n     }\n+    CTransactionRef tx = txr->tx;\n     wallet.CommitTransaction(tx, std::move(map_value), {} /* orderForm */);\n     if (verbose) {\n         UniValue entry(UniValue::VOBJ);"
      },
      {
        "sha": "5a5d88948a3e2a635cec6f72f2759504bbb5920a",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 39,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -941,66 +941,44 @@ static std::optional<CreatedTransactionResult> CreateTransactionInternal(\n     return CreatedTransactionResult(tx, nFeeRet, nChangePosInOut);\n }\n \n-// TODO: also return std::optional<CreatedTransactionResult> here in order\n-//       to eliminate the out parameters and to simplify the function\n-bool CreateTransaction(\n+std::optional<CreatedTransactionResult> CreateTransaction(\n         CWallet& wallet,\n         const std::vector<CRecipient>& vecSend,\n-        CTransactionRef& tx,\n-        CAmount& nFeeRet,\n-        int& nChangePosInOut,\n+        int nChangePos,\n         bilingual_str& error,\n         const CCoinControl& coin_control,\n         FeeCalculation& fee_calc_out,\n         bool sign)\n {\n     if (vecSend.empty()) {\n         error = _(\"Transaction must have at least one recipient\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     if (std::any_of(vecSend.cbegin(), vecSend.cend(), [](const auto& recipient){ return recipient.nAmount < 0; })) {\n         error = _(\"Transaction amounts must not be negative\");\n-        return false;\n+        return std::nullopt;\n     }\n \n     LOCK(wallet.cs_wallet);\n \n-    int nChangePosIn = nChangePosInOut;\n-    Assert(!tx); // tx is an out-param. TODO change the return type from bool to tx (or nullptr)\n-    std::optional<CreatedTransactionResult> txr_ungrouped = CreateTransactionInternal(wallet, vecSend, nChangePosInOut, error, coin_control, fee_calc_out, sign);\n-    bool res = false;\n-    if (txr_ungrouped) {\n-        tx = txr_ungrouped->tx;\n-        nFeeRet = txr_ungrouped->fee;\n-        nChangePosInOut = txr_ungrouped->change_pos;\n-        res = true;\n-    }\n+    std::optional<CreatedTransactionResult> txr_ungrouped = CreateTransactionInternal(wallet, vecSend, nChangePos, error, coin_control, fee_calc_out, sign);\n+    if (!txr_ungrouped) return std::nullopt;\n     // try with avoidpartialspends unless it's enabled already\n-    if (res && nFeeRet > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n+    if (txr_ungrouped->fee > 0 /* 0 means non-functional fee rate estimation */ && wallet.m_max_aps_fee > -1 && !coin_control.m_avoid_partial_spends) {\n         CCoinControl tmp_cc = coin_control;\n         tmp_cc.m_avoid_partial_spends = true;\n-        CAmount nFeeRet2;\n-        CTransactionRef tx2;\n-        int nChangePosInOut2 = nChangePosIn;\n         bilingual_str error2; // fired and forgotten; if an error occurs, we discard the results\n-        std::optional<CreatedTransactionResult> txr_grouped = CreateTransactionInternal(wallet, vecSend, nChangePosInOut2, error2, tmp_cc, fee_calc_out, sign);\n+        std::optional<CreatedTransactionResult> txr_grouped = CreateTransactionInternal(wallet, vecSend, nChangePos, error2, tmp_cc, fee_calc_out, sign);\n         if (txr_grouped) {\n-            tx2 = txr_grouped->tx;\n-            nFeeRet2 = txr_grouped->fee;\n-            nChangePosInOut2 = txr_grouped->change_pos;\n-\n             // if fee of this alternative one is within the range of the max fee, we use this one\n-            const bool use_aps = nFeeRet2 <= nFeeRet + wallet.m_max_aps_fee;\n-            wallet.WalletLogPrintf(\"Fee non-grouped = %lld, grouped = %lld, using %s\\n\", nFeeRet, nFeeRet2, use_aps ? \"grouped\" : \"non-grouped\");\n-            if (use_aps) {\n-                tx = tx2;\n-                nFeeRet = nFeeRet2;\n-                nChangePosInOut = nChangePosInOut2;\n-            }\n+            const bool use_aps = txr_grouped->fee <= txr_ungrouped->fee + wallet.m_max_aps_fee;\n+            wallet.WalletLogPrintf(\"Fee non-grouped = %lld, grouped = %lld, using %s\\n\",\n+                txr_ungrouped->fee, txr_grouped->fee, use_aps ? \"grouped\" : \"non-grouped\");\n+            if (use_aps) return txr_grouped;\n         }\n     }\n-    return res;\n+    return txr_ungrouped;\n }\n \n bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n@@ -1024,11 +1002,12 @@ bool FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& nFeeRet,\n     // CreateTransaction call and LockCoin calls (when lockUnspents is true).\n     LOCK(wallet.cs_wallet);\n \n-    CTransactionRef tx_new;\n     FeeCalculation fee_calc_out;\n-    if (!CreateTransaction(wallet, vecSend, tx_new, nFeeRet, nChangePosInOut, error, coinControl, fee_calc_out, false)) {\n-        return false;\n-    }\n+    std::optional<CreatedTransactionResult> txr = CreateTransaction(wallet, vecSend, nChangePosInOut, error, coinControl, fee_calc_out, false);\n+    if (!txr) return false;\n+    CTransactionRef tx_new = txr->tx;\n+    nFeeRet = txr->fee;\n+    nChangePosInOut = txr->change_pos;\n \n     if (nChangePosInOut != -1) {\n         tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout[nChangePosInOut]);"
      },
      {
        "sha": "fbe2cc8e319d858bee16b784d88e69274cd04b3a",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -10,6 +10,8 @@\n #include <wallet/transaction.h>\n #include <wallet/wallet.h>\n \n+#include <optional>\n+\n /** Get the marginal bytes if spending the specified output from this transaction */\n int GetTxSpendSize(const CWallet& wallet, const CWalletTx& wtx, unsigned int out, bool use_max_sig = false);\n \n@@ -138,9 +140,9 @@ struct CreatedTransactionResult\n /**\n  * Create a new transaction paying the recipients with a set of coins\n  * selected by SelectCoins(); Also create the change output, when needed\n- * @note passing nChangePosInOut as -1 will result in setting a random position\n+ * @note passing nChangePos as -1 will result in setting a random position\n  */\n-bool CreateTransaction(CWallet& wallet, const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign = true);\n+std::optional<CreatedTransactionResult> CreateTransaction(CWallet& wallet, const std::vector<CRecipient>& vecSend, int nChangePos, bilingual_str& error, const CCoinControl& coin_control, FeeCalculation& fee_calc_out, bool sign = true);\n \n /**\n  * Insert additional inputs into the transaction by"
      },
      {
        "sha": "e9bbd377e4c722395e0e15a60fb2d549828c2231",
        "filename": "src/wallet/test/spend_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/test/spend_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/test/spend_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/spend_tests.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -26,21 +26,20 @@ BOOST_FIXTURE_TEST_CASE(SubtractFee, TestChain100Setup)\n     // instead of the miner.\n     auto check_tx = [&wallet](CAmount leftover_input_amount) {\n         CRecipient recipient{GetScriptForRawPubKey({}), 50 * COIN - leftover_input_amount, true /* subtract fee */};\n-        CTransactionRef tx;\n-        CAmount fee;\n-        int change_pos = -1;\n+        constexpr int RANDOM_CHANGE_POSITION = -1;\n         bilingual_str error;\n         CCoinControl coin_control;\n         coin_control.m_feerate.emplace(10000);\n         coin_control.fOverrideFeeRate = true;\n         // We need to use a change type with high cost of change so that the leftover amount will be dropped to fee instead of added as a change output\n         coin_control.m_change_type = OutputType::LEGACY;\n         FeeCalculation fee_calc;\n-        BOOST_CHECK(CreateTransaction(*wallet, {recipient}, tx, fee, change_pos, error, coin_control, fee_calc));\n-        BOOST_CHECK_EQUAL(tx->vout.size(), 1);\n-        BOOST_CHECK_EQUAL(tx->vout[0].nValue, recipient.nAmount + leftover_input_amount - fee);\n-        BOOST_CHECK_GT(fee, 0);\n-        return fee;\n+        std::optional<CreatedTransactionResult> txr = CreateTransaction(*wallet, {recipient}, RANDOM_CHANGE_POSITION, error, coin_control, fee_calc);\n+        BOOST_CHECK(txr.has_value());\n+        BOOST_CHECK_EQUAL(txr->tx->vout.size(), 1);\n+        BOOST_CHECK_EQUAL(txr->tx->vout[0].nValue, recipient.nAmount + leftover_input_amount - txr->fee);\n+        BOOST_CHECK_GT(txr->fee, 0);\n+        return txr->fee;\n     };\n \n     // Send full input amount to recipient, check that only nonzero fee is"
      },
      {
        "sha": "190bd94cec53a7d993375916c3022b8ba40a60ef",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0d89f0d69c5aa338152935f46f3c4abe77b3f4c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d0d89f0d69c5aa338152935f46f3c4abe77b3f4c",
        "patch": "@@ -514,13 +514,14 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     CWalletTx& AddTx(CRecipient recipient)\n     {\n         CTransactionRef tx;\n-        CAmount fee;\n-        int changePos = -1;\n         bilingual_str error;\n         CCoinControl dummy;\n         FeeCalculation fee_calc_out;\n         {\n-            BOOST_CHECK(CreateTransaction(*wallet, {recipient}, tx, fee, changePos, error, dummy, fee_calc_out));\n+            constexpr int RANDOM_CHANGE_POSITION = -1;\n+            std::optional<CreatedTransactionResult> txr = CreateTransaction(*wallet, {recipient}, RANDOM_CHANGE_POSITION, error, dummy, fee_calc_out);\n+            BOOST_CHECK(txr.has_value());\n+            tx = txr->tx;\n         }\n         wallet->CommitTransaction(tx, {}, {});\n         CMutableTransaction blocktx;"
      }
    ]
  }
]