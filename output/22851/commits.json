[
  {
    "sha": "343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDNmOTgwYjZjNGYwZmI1YWU3ZWYxODkzZGY2MTEzMmQxNGFlYjNk",
    "commit": {
      "author": {
        "name": "Jesse Posner",
        "email": "jesse.posner@gmail.com",
        "date": "2020-11-20T23:20:38Z"
      },
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2021-09-01T03:27:20Z"
      },
      "message": "Add Python ChaCha20 implementation with a 64-bit nonce\n\nThis commit adds an implementation of ChaCha20 (with a 64-bit nonce) in\nPython, and replaces the specialized ChaCha20 implementation in\n`test/functional/test_framework/muhash.py`.\n\nUpdate chacha20 python implementation\n\nupdated `keystream` function for better code readability",
      "tree": {
        "sha": "e624c8ec292076f6ead1b16b0ac113d758d48f84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e624c8ec292076f6ead1b16b0ac113d758d48f84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d/comments",
    "author": {
      "login": "jesseposner",
      "id": 12010116,
      "node_id": "MDQ6VXNlcjEyMDEwMTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/12010116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesseposner",
      "html_url": "https://github.com/jesseposner",
      "followers_url": "https://api.github.com/users/jesseposner/followers",
      "following_url": "https://api.github.com/users/jesseposner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesseposner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesseposner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesseposner/subscriptions",
      "organizations_url": "https://api.github.com/users/jesseposner/orgs",
      "repos_url": "https://api.github.com/users/jesseposner/repos",
      "events_url": "https://api.github.com/users/jesseposner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesseposner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "siv2r",
      "id": 56887198,
      "node_id": "MDQ6VXNlcjU2ODg3MTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siv2r",
      "html_url": "https://github.com/siv2r",
      "followers_url": "https://api.github.com/users/siv2r/followers",
      "following_url": "https://api.github.com/users/siv2r/following{/other_user}",
      "gists_url": "https://api.github.com/users/siv2r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siv2r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
      "organizations_url": "https://api.github.com/users/siv2r/orgs",
      "repos_url": "https://api.github.com/users/siv2r/repos",
      "events_url": "https://api.github.com/users/siv2r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siv2r/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d32009f1a3b091299ff4a9345195b2359125f98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d32009f1a3b091299ff4a9345195b2359125f98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d32009f1a3b091299ff4a9345195b2359125f98"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 111,
      "deletions": 47
    },
    "files": [
      {
        "sha": "3b35ccdf35bb491c6c61a9bad895ffc80fb6e3f2",
        "filename": "test/functional/test_framework/chacha20.py",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d/test/functional/test_framework/chacha20.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d/test/functional/test_framework/chacha20.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/chacha20.py?ref=343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
        "patch": "@@ -0,0 +1,107 @@\n+# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Native Python ChaCha20 implementation with a 64-bit nonce.\"\"\"\n+\n+import csv\n+import itertools\n+import os\n+import sys\n+import unittest\n+\n+from . import chacha20_bindings\n+\n+class ChaCha20:\n+    \"\"\"\n+    Class representing a ChaCha20 cipher instance.\n+\n+    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439 for the implementation details.\n+    \"\"\"\n+\n+    def __init__(self, key_bytes, nonce_int):\n+        # split 256-bit key into list of 8 32-bit integers\n+        assert len(key_bytes) == 32\n+        self.key = self.__le_bytes_to_int32_words(key_bytes, 8)\n+\n+        # split 64-bit nonce into list of 2 32-bit integers\n+        nonce_bytes = nonce_int.to_bytes(8, byteorder='little')\n+        assert len(nonce_bytes) == 8\n+        self.nonce = self.__le_bytes_to_int32_words(nonce_bytes, 2)\n+\n+    def encrypt(self, plaintext, counter_init=0):\n+        \"\"\"Encrypt the plaintext\"\"\"\n+        byte_length = len(plaintext)\n+        stream = self.keystream(byte_length, counter_init)\n+        ciphertext = [plaintext[i] ^ stream[i] for i in range(byte_length)]\n+\n+        return bytes(ciphertext)\n+\n+    def keystream(self, length, counter_init=0):\n+        \"\"\"Returns the keystream for a given length\"\"\"\n+        out = b''\n+\n+        for i in itertools.count():\n+            counter_bytes = (counter_init + i).to_bytes(8, byteorder='little')\n+            counter = self.__le_bytes_to_int32_words(counter_bytes, 2)\n+            out += self.__serialize(self.__block(counter))\n+\n+            if(len(out) >= length):\n+                return out[:length]\n+\n+    def decrypt(self, ciphertext, counter=1):\n+        \"\"\"Decrypt the ciphertext\"\"\"\n+        return self.encrypt(ciphertext, counter)\n+\n+    def __block(self, counter):\n+        # See RFC 8439 section 2.3 for chacha20 parameters\n+        BLOCK_CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n+        init = BLOCK_CONSTANTS + self.key + counter + self.nonce\n+        s = init.copy()\n+\n+        for _ in range(10):\n+            self.__doubleround(s)\n+        for i in range(16):\n+            s[i] = (s[i] + init[i]) & 0xffffffff\n+\n+        return s\n+\n+    @staticmethod\n+    def __serialize(block):\n+        return b''.join([(word).to_bytes(4, 'little') for word in block])\n+\n+    @staticmethod\n+    def __le_bytes_to_int32_words(le_bytes, length):\n+        return [int.from_bytes(le_bytes[i * 4:i * 4 + 4], byteorder='little') for i in range(length)]\n+\n+    @staticmethod\n+    def __doubleround(s):\n+        \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n+        \"\"\"\n+        QUARTER_ROUNDS = [\n+            # columns\n+            (0, 4, 8, 12),\n+            (1, 5, 9, 13),\n+            (2, 6, 10, 14),\n+            (3, 7, 11, 15),\n+            # diagonals\n+            (0, 5, 10, 15),\n+            (1, 6, 11, 12),\n+            (2, 7, 8, 13),\n+            (3, 4, 9, 14)\n+        ]\n+\n+        for a, b, c, d in QUARTER_ROUNDS:\n+            s[a] = (s[a] + s[b]) & 0xffffffff\n+            s[d] = ChaCha20.__rot32(s[d] ^ s[a], 16)\n+            s[c] = (s[c] + s[d]) & 0xffffffff\n+            s[b] = ChaCha20.__rot32(s[b] ^ s[c], 12)\n+            s[a] = (s[a] + s[b]) & 0xffffffff\n+            s[d] = ChaCha20.__rot32(s[d] ^ s[a], 8)\n+            s[c] = (s[c] + s[d]) & 0xffffffff\n+            s[b] = ChaCha20.__rot32(s[b] ^ s[c], 7)\n+\n+    @staticmethod\n+    def __rot32(v, bits):\n+        \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n+        bits %= 32  # Make sure the term below does not throw an exception\n+        return ((v << bits) & 0xffffffff) | (v >> (32 - bits))"
      },
      {
        "sha": "567269875d90a22b87fd74362fe264a381342acc",
        "filename": "test/functional/test_framework/muhash.py",
        "status": "modified",
        "additions": 4,
        "deletions": 47,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d/test/functional/test_framework/muhash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d/test/functional/test_framework/muhash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/muhash.py?ref=343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
        "patch": "@@ -6,57 +6,14 @@\n import hashlib\n import unittest\n \n+from .chacha20 import ChaCha20\n from .util import modinv\n \n-def rot32(v, bits):\n-    \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n-    bits %= 32  # Make sure the term below does not throw an exception\n-    return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n-\n-def chacha20_doubleround(s):\n-    \"\"\"Apply a ChaCha20 double round to 16-element state array s.\n-\n-    See https://cr.yp.to/chacha/chacha-20080128.pdf and https://tools.ietf.org/html/rfc8439\n-    \"\"\"\n-    QUARTER_ROUNDS = [(0, 4, 8, 12),\n-                      (1, 5, 9, 13),\n-                      (2, 6, 10, 14),\n-                      (3, 7, 11, 15),\n-                      (0, 5, 10, 15),\n-                      (1, 6, 11, 12),\n-                      (2, 7, 8, 13),\n-                      (3, 4, 9, 14)]\n-\n-    for a, b, c, d in QUARTER_ROUNDS:\n-        s[a] = (s[a] + s[b]) & 0xffffffff\n-        s[d] = rot32(s[d] ^ s[a], 16)\n-        s[c] = (s[c] + s[d]) & 0xffffffff\n-        s[b] = rot32(s[b] ^ s[c], 12)\n-        s[a] = (s[a] + s[b]) & 0xffffffff\n-        s[d] = rot32(s[d] ^ s[a], 8)\n-        s[c] = (s[c] + s[d]) & 0xffffffff\n-        s[b] = rot32(s[b] ^ s[c], 7)\n \n def chacha20_32_to_384(key32):\n-    \"\"\"Specialized ChaCha20 implementation with 32-byte key, 0 IV, 384-byte output.\"\"\"\n-    # See RFC 8439 section 2.3 for chacha20 parameters\n-    CONSTANTS = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n-\n-    key_bytes = [0]*8\n-    for i in range(8):\n-        key_bytes[i] = int.from_bytes(key32[(4 * i):(4 * (i+1))], 'little')\n-\n-    INITIALIZATION_VECTOR = [0] * 4\n-    init = CONSTANTS + key_bytes + INITIALIZATION_VECTOR\n-    out = bytearray()\n-    for counter in range(6):\n-        init[12] = counter\n-        s = init.copy()\n-        for _ in range(10):\n-            chacha20_doubleround(s)\n-        for i in range(16):\n-            out.extend(((s[i] + init[i]) & 0xffffffff).to_bytes(4, 'little'))\n-    return bytes(out)\n+    \"\"\"Generate ChaCha20 keystream with 32-byte key, 0 IV, 384-byte output.\"\"\"\n+    c = ChaCha20(key32, 0)\n+    return c.keystream(384)\n \n def data_to_num3072(data):\n     \"\"\"Hash a 32-byte array data to a 3072-bit number using 6 Chacha20 operations.\"\"\""
      }
    ]
  },
  {
    "sha": "f451cdafebe1ca0859e90f461b91e86afc461bed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDUxY2RhZmViZTFjYTA4NTllOTBmNDYxYjkxZTg2YWZjNDYxYmVk",
    "commit": {
      "author": {
        "name": "Jesse Posner",
        "email": "jesse.posner@gmail.com",
        "date": "2020-11-20T23:26:27Z"
      },
      "committer": {
        "name": "siv2r",
        "email": "siv2ram@gmail.com",
        "date": "2021-09-01T03:57:15Z"
      },
      "message": "Add python tests, cpp test and Makefile\n\nAdds a CSV file with the ChaCha20 test vectors from\n`src/test/crypto_tests.cpp`, and tests the python implementation against\nthose vectors.\n\nAdds pybind11 bindings for the `src/crypto/chacha20.h`\nimplementation and tests this wrapped implementation against the test\nvectors defined in the CSV.\n\nThese tests requires a build step and this commit adds a Makefile for\nperforming this step. The Makefile currently only works with macOS. On\nLinux, `-underfined dynamic lookup` should be replaced with `-fPIC`.",
      "tree": {
        "sha": "757437fdbf945c4ee0b46e96632ee8e1198cb0e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/757437fdbf945c4ee0b46e96632ee8e1198cb0e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f451cdafebe1ca0859e90f461b91e86afc461bed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f451cdafebe1ca0859e90f461b91e86afc461bed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f451cdafebe1ca0859e90f461b91e86afc461bed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f451cdafebe1ca0859e90f461b91e86afc461bed/comments",
    "author": {
      "login": "jesseposner",
      "id": 12010116,
      "node_id": "MDQ6VXNlcjEyMDEwMTE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/12010116?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jesseposner",
      "html_url": "https://github.com/jesseposner",
      "followers_url": "https://api.github.com/users/jesseposner/followers",
      "following_url": "https://api.github.com/users/jesseposner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jesseposner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jesseposner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jesseposner/subscriptions",
      "organizations_url": "https://api.github.com/users/jesseposner/orgs",
      "repos_url": "https://api.github.com/users/jesseposner/repos",
      "events_url": "https://api.github.com/users/jesseposner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jesseposner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "siv2r",
      "id": 56887198,
      "node_id": "MDQ6VXNlcjU2ODg3MTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/56887198?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/siv2r",
      "html_url": "https://github.com/siv2r",
      "followers_url": "https://api.github.com/users/siv2r/followers",
      "following_url": "https://api.github.com/users/siv2r/following{/other_user}",
      "gists_url": "https://api.github.com/users/siv2r/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/siv2r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/siv2r/subscriptions",
      "organizations_url": "https://api.github.com/users/siv2r/orgs",
      "repos_url": "https://api.github.com/users/siv2r/repos",
      "events_url": "https://api.github.com/users/siv2r/events{/privacy}",
      "received_events_url": "https://api.github.com/users/siv2r/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/343f980b6c4f0fb5ae7ef1893df61132d14aeb3d"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 109,
      "deletions": 0
    },
    "files": [
      {
        "sha": "963ae878658e80a0a55a13a88dd5a6cd6f379b50",
        "filename": "test/functional/test_framework/Makefile",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/Makefile?ref=f451cdafebe1ca0859e90f461b91e86afc461bed",
        "patch": "@@ -0,0 +1,5 @@\n+all:\n+\tc++ -O3 -Wall -shared -std=c++11 -undefined dynamic_lookup `python3 -m pybind11 --includes` -I../../../src ../../../src/crypto/chacha20.cpp chacha20_bindings.cpp -o chacha20_bindings`python3-config --extension-suffix`\n+\n+clean:\n+\trm -f *`python3-config --extension-suffix`"
      },
      {
        "sha": "d217ed8c59d346d3b661999ec97f3944dd20c34a",
        "filename": "test/functional/test_framework/chacha20.py",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/chacha20.py?ref=f451cdafebe1ca0859e90f461b91e86afc461bed",
        "patch": "@@ -105,3 +105,64 @@ def __rot32(v, bits):\n         \"\"\"Rotate the 32-bit value v left by bits bits.\"\"\"\n         bits %= 32  # Make sure the term below does not throw an exception\n         return ((v << bits) & 0xffffffff) | (v >> (32 - bits))\n+\n+class TestFrameworkChaCha20(unittest.TestCase):\n+    def test_cpp(self):\n+        all_vectors = self.csv_vectors()\n+\n+        for vector in all_vectors:\n+            c = chacha20_bindings.ChaCha20()\n+\n+            c.SetKey(vector['key_bytes'])\n+            c.SetIV(vector['nonce_int'])\n+            c.Seek(vector['counter_int'])\n+\n+            if len(vector['msg_bytes']) == 0:\n+                out = c.Keystream(len(vector['expected_bytes']))\n+            else:\n+                out = c.Crypt(vector['msg_bytes'])\n+\n+            error_msg = \"ChaCha20 cpp failed for the test vector of index {}\".format(\n+                vector['idx'])\n+            self.assertEqual(out, vector['expected_bytes'], error_msg)\n+\n+    def test_python(self):\n+        all_vectors = self.csv_vectors()\n+\n+        for vector in all_vectors:\n+            c = ChaCha20(vector['key_bytes'], vector['nonce_int'])\n+\n+            if len(vector['msg_bytes']) == 0:\n+                out = c.keystream(\n+                    len(vector['expected_bytes']), vector['counter_int'])\n+            else:\n+                out = c.encrypt(vector['msg_bytes'], vector['counter_int'])\n+\n+            error_msg = \"ChaCha20 python failed for the test vector of index {}\".format(\n+                vector['idx'])\n+            self.assertEqual(out, vector['expected_bytes'], error_msg)\n+\n+    def csv_vectors(self):\n+        all_vectors = list()\n+\n+        with open(\n+            os.path.join(sys.path[0], 'test_framework',\n+                         'chacha20_test_vectors.csv'),\n+            newline='',\n+            encoding='utf8'\n+        ) as csv_file:\n+            csv_reader = csv.DictReader(csv_file)\n+\n+            for row in csv_reader:\n+                vector = dict()\n+\n+                vector['idx'] = int(row['index'])\n+                vector['msg_bytes'] = bytes.fromhex(row['message'])\n+                vector['key_bytes'] = bytes.fromhex(row['key'])\n+                vector['nonce_int'] = int(row['nonce'], 16)\n+                vector['counter_int'] = int(row['counter'])\n+                vector['expected_bytes'] = bytes.fromhex(row['output'])\n+\n+                all_vectors.append(vector)\n+\n+        return all_vectors"
      },
      {
        "sha": "19ecea9445189bfbaef40fbd1ebc33daeca8c679",
        "filename": "test/functional/test_framework/chacha20_bindings.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20_bindings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20_bindings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/chacha20_bindings.cpp?ref=f451cdafebe1ca0859e90f461b91e86afc461bed",
        "patch": "@@ -0,0 +1,34 @@\n+#include <pybind11/pybind11.h>\n+#include \"../../../src/crypto/chacha20.h\"\n+#include <iostream>\n+\n+namespace py = pybind11;\n+\n+PYBIND11_MODULE(chacha20_bindings, m) {\n+    py::class_<ChaCha20>(m, \"ChaCha20\")\n+        .def(py::init<>()) // empty constructor\n+        .def(\"SetKey\", [](ChaCha20 &c, const py::bytes &b) {\n+            std::string s = std::string(b);\n+            unsigned char* k = reinterpret_cast<unsigned char*>(&s[0]);\n+\n+            c.SetKey(k, s.size());\n+        })\n+        .def(\"SetIV\", &ChaCha20::SetIV)\n+        .def(\"Seek\", &ChaCha20::Seek)\n+        .def(\"Keystream\", [](ChaCha20 &c, size_t l) {\n+            unsigned char out[l];\n+\n+            c.Keystream(out, l);\n+\n+            return py::bytes(reinterpret_cast<char const*>(out), l);\n+        })\n+        .def(\"Crypt\", [](ChaCha20 &c, const py::bytes &b) {\n+            std::string s = std::string(b);\n+            unsigned char* m = reinterpret_cast<unsigned char*>(&s[0]);\n+            unsigned char out[s.size()];\n+\n+            c.Crypt(m, out, s.size());\n+\n+            return py::bytes(reinterpret_cast<char const*>(out), s.size());\n+        });\n+}"
      },
      {
        "sha": "1fafd44cb1be4dc9bf64b6395e3834de4bfd9fa3",
        "filename": "test/functional/test_framework/chacha20_test_vectors.csv",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20_test_vectors.csv",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_framework/chacha20_test_vectors.csv",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/chacha20_test_vectors.csv?ref=f451cdafebe1ca0859e90f461b91e86afc461bed",
        "patch": "@@ -0,0 +1,8 @@\n+index,message,key,nonce,counter,output\n+0,4c616469657320616e642047656e746c656d656e206f662074686520636c617373206f66202739393a204966204920636f756c64206f6666657220796f75206f6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73637265656e20776f756c642062652069742e,000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,0x4a000000,1,6e2e359a2568f98041ba0728dd0d6981e97e7aec1d4360c20a27afccfd9fae0bf91b65c5524733ab8f593dabcd62b3571639d624e65152ab8f530c359f0861d807ca0dbf500d6a6156a38e088a22b65e52bc514d16ccf806818ce91ab77937365af90bbf74a35be6b40b8eedf2785e42874d\n+1,,000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,0x4a000000,1,224f51f3401bd9e12fde276fb8631ded8c131f823d2c06e27e4fcaec9ef3cf788a3b0aa372600a92b57974cded2b9334794cba40c63e34cdea212c4cf07d41b769a6749f3f630f4122cafe28ec4dc47e26d4346d70b98c73f3e9c53ac40c5945398b6eda1a832c89c167eacd901d7e2bf363\n+2,,0000000000000000000000000000000000000000000000000000000000000000,0,0,76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\n+3,,0000000000000000000000000000000000000000000000000000000000000001,0,0,4540f05a9f1fb296d7736e7b208e3c96eb4fe1834688d2604f450952ed432d41bbe2a0b6ea7566d2a5d1e7e20d42af2c53d792b1c43fea817e9ad275ae546963\n+4,,0000000000000000000000000000000000000000000000000000000000000000,0x0100000000000000,0,de9cba7bf3d69ef5e786dc63973f653a0b49e015adbff7134fcb7df137821031e85a050278a7084527214f73efc7fa5b5277062eb7a0433e445f41e3\n+5,,0000000000000000000000000000000000000000000000000000000000000000,1,0,ef3fdfd6c61578fbf5cf35bd3dd33b8009631634d21e42ac33960bd138e50d32111e4caf237ee53ca8ad6426194a88545ddc497a0b466e7d6bbdb0041b2f586b\n+6,,000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,0x0706050403020100,0,f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025d3ce042c566ab2c507b138db853e3d6959660996546cc9c4a6eafdc777c040d70eaf46f76dad3979e5c5360c3317166a1c894c94a371876a94df7628fe4eaaf2ccb27d5aaae0ad7ad0f9d4b6ad3b54098746d4524d38407a6deb3ab78fab78c9"
      },
      {
        "sha": "73ad5103638aa577f084f52f63001114f1010e5b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f451cdafebe1ca0859e90f461b91e86afc461bed/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f451cdafebe1ca0859e90f461b91e86afc461bed",
        "patch": "@@ -69,6 +69,7 @@\n TEST_FRAMEWORK_MODULES = [\n     \"address\",\n     \"blocktools\",\n+    \"chacha20\",\n     \"muhash\",\n     \"key\",\n     \"script\","
      }
    ]
  }
]