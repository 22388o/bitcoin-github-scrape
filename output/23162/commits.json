[
  {
    "sha": "a6d9675d604827892e31a47994af3b64440f66db",
    "node_id": "C_kwDOABII59oAKGE2ZDk2NzVkNjA0ODI3ODkyZTMxYTQ3OTk0YWYzYjY0NDQwZjY2ZGI",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-10-01T19:59:48Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-10-02T03:39:58Z"
      },
      "message": "contrib: Ask for captcha in signet getcoins.py\n\nAs the faucet will always ask for a captcha now, the current script is\nno longer usable.\n\nChange the script to print the captcha in dot-matrix to the terminal,\nusing unicode Braille characters.",
      "tree": {
        "sha": "ad08ccbbd2902231fe9427b66acbfca4b3d6f6dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad08ccbbd2902231fe9427b66acbfca4b3d6f6dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d9675d604827892e31a47994af3b64440f66db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d9675d604827892e31a47994af3b64440f66db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d9675d604827892e31a47994af3b64440f66db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d9675d604827892e31a47994af3b64440f66db/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46b4937bc16cbccabaf27ca9c1d605646bdea67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46b4937bc16cbccabaf27ca9c1d605646bdea67e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46b4937bc16cbccabaf27ca9c1d605646bdea67e"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 91,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3d0aa5d132f095e2046f3ed0a1e380c5833d2dd7",
        "filename": "contrib/signet/getcoins.py",
        "status": "modified",
        "additions": 91,
        "deletions": 3,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d9675d604827892e31a47994af3b64440f66db/contrib/signet/getcoins.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d9675d604827892e31a47994af3b64440f66db/contrib/signet/getcoins.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/getcoins.py?ref=a6d9675d604827892e31a47994af3b64440f66db",
        "patch": "@@ -4,18 +4,77 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import argparse\n+import io\n+import requests\n import subprocess\n import sys\n-import requests\n \n DEFAULT_GLOBAL_FAUCET = 'https://signetfaucet.com/claim'\n+DEFAULT_GLOBAL_CAPTCHA = 'https://signetfaucet.com/captcha'\n GLOBAL_FIRST_BLOCK_HASH = '00000086d6b2636cb2a392d45edc4ec544a10024d30141c9adf4bfd9de533b53'\n \n+# braille unicode block\n+BASE = 0x2800\n+BIT_PER_PIXEL = [\n+    [0x01, 0x08],\n+    [0x02, 0x10],\n+    [0x04, 0x20],\n+    [0x40, 0x80],\n+]\n+BW = 2\n+BH = 4\n+\n+# imagemagick or compatible fork (used for converting SVG)\n+CONVERT = 'convert'\n+\n+class PPMImage:\n+    '''\n+    Load a PPM image (Pillow-ish API).\n+    '''\n+    def __init__(self, f):\n+        if f.readline() != b'P6\\n':\n+            raise ValueError('Invalid ppm format: header')\n+        line = f.readline()\n+        (width, height) = (int(x) for x in line.rstrip().split(b' '))\n+        if f.readline() != b'255\\n':\n+            raise ValueError('Invalid ppm format: color depth')\n+        data = f.read(width * height * 3)\n+        stride = width * 3\n+        self.size = (width, height)\n+        self._grid = [[tuple(data[stride * y + 3 * x:stride * y + 3 * (x + 1)]) for x in range(width)] for y in range(height)]\n+\n+    def getpixel(self, pos):\n+        return self._grid[pos[1]][pos[0]]\n+\n+def print_image(img, threshold=128):\n+    '''Print black-and-white image to terminal in braille unicode characters.'''\n+    x_blocks = (img.size[0] + BW - 1) // BW\n+    y_blocks = (img.size[1] + BH - 1) // BH\n+\n+    for yb in range(y_blocks):\n+        line = []\n+        for xb in range(x_blocks):\n+            ch = BASE\n+            for y in range(BH):\n+                for x in range(BW):\n+                    try:\n+                        val = img.getpixel((xb * BW + x, yb * BH + y))\n+                    except IndexError:\n+                        pass\n+                    else:\n+                        if val[0] < threshold:\n+                            ch |= BIT_PER_PIXEL[y][x]\n+            line.append(chr(ch))\n+        print(''.join(line))\n+\n parser = argparse.ArgumentParser(description='Script to get coins from a faucet.', epilog='You may need to start with double-dash (--) when providing bitcoin-cli arguments.')\n parser.add_argument('-c', '--cmd', dest='cmd', default='bitcoin-cli', help='bitcoin-cli command to use')\n parser.add_argument('-f', '--faucet', dest='faucet', default=DEFAULT_GLOBAL_FAUCET, help='URL of the faucet')\n+parser.add_argument('-g', '--captcha', dest='captcha', default=DEFAULT_GLOBAL_CAPTCHA, help='URL of the faucet captcha, or empty if no captcha is needed')\n parser.add_argument('-a', '--addr', dest='addr', default='', help='Bitcoin address to which the faucet should send')\n parser.add_argument('-p', '--password', dest='password', default='', help='Faucet password, if any')\n+parser.add_argument('-n', '--amount', dest='amount', default='0.001', help='Amount to request (0.001-0.1, default is 0.001)')\n+parser.add_argument('-i', '--imagemagick', dest='imagemagick', default=CONVERT, help='Path to imagemagick convert utility')\n parser.add_argument('bitcoin_cli_args', nargs='*', help='Arguments to pass on to bitcoin-cli (default: -signet)')\n \n args = parser.parse_args()\n@@ -43,14 +102,43 @@ def bitcoin_cli(rpc_command_and_params):\n     if curr_signet_hash != GLOBAL_FIRST_BLOCK_HASH:\n         print('The global faucet cannot be used with a custom Signet network. Please use the global signet or setup your custom faucet to use this functionality.\\n')\n         exit(1)\n+else:\n+    # For custom faucets, don't request captcha by default.\n+    if args.captcha == DEFAULT_GLOBAL_CAPTCHA:\n+        args.captcha = ''\n \n if args.addr == '':\n     # get address for receiving coins\n     args.addr = bitcoin_cli(['getnewaddress', 'faucet', 'bech32'])\n \n-data = {'address': args.addr, 'password': args.password}\n+data = {'address': args.addr, 'password': args.password, 'amount': args.amount}\n+\n+# Store cookies\n+# for debugging: print(session.cookies.get_dict())\n+session = requests.Session()\n+\n+if args.captcha != '': # Retrieve a captcha\n+    try:\n+        res = session.get(args.captcha)\n+    except:\n+        print('Unexpected error when contacting faucet:', sys.exc_info()[0])\n+        exit(1)\n+\n+    # Convert SVG image to PPM, and load it\n+    try:\n+        rv = subprocess.run([args.imagemagick, '-', '-depth', '8', 'ppm:-'], input=res.content, check=True, capture_output=True)\n+    except FileNotFoundError:\n+        print('The binary', args.imagemagick, 'could not be found. Please make sure ImageMagick (or a compatible fork) is installed and that the correct path is specified.')\n+        exit(1)\n+    img = PPMImage(io.BytesIO(rv.stdout))\n+\n+    # Terminal interaction\n+    print_image(img)\n+    print('Enter captcha: ', end='')\n+    data['captcha'] = input()\n+\n try:\n-    res = requests.post(args.faucet, data=data)\n+    res = session.post(args.faucet, data=data)\n except:\n     print('Unexpected error when contacting faucet:', sys.exc_info()[0])\n     exit(1)"
      }
    ]
  }
]