[
  {
    "sha": "c7933899e93b38f444d87b12858fd5a124f2066c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzkzMzg5OWU5M2IzOGY0NDRkODdiMTI4NThmZDVhMTI0ZjIwNjZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-02T10:02:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-02T10:52:01Z"
      },
      "message": "refactor: Replace thread_local use with a mutex-protected map\n\nThis replaces the only use of `thread_local` with a mutex-protected map.\n\nThis leaks per thread, but because bitcoin's threads are static and\npermanent, this is not a problem in practice. Add a note to the thread\nrename function to only call it for permanent threads, just in case.\n\nAlso removes associated build system functionality.\n\nCloses #18678.",
      "tree": {
        "sha": "ca655083ef25ea325ae11d921a777aa1ef7fc4cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca655083ef25ea325ae11d921a777aa1ef7fc4cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7933899e93b38f444d87b12858fd5a124f2066c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7933899e93b38f444d87b12858fd5a124f2066c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7933899e93b38f444d87b12858fd5a124f2066c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7933899e93b38f444d87b12858fd5a124f2066c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afed2e98b0e3a059adf0b1f88ce2551e3b09733c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afed2e98b0e3a059adf0b1f88ce2551e3b09733c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afed2e98b0e3a059adf0b1f88ce2551e3b09733c"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 43,
      "deletions": 79
    },
    "files": [
      {
        "sha": "d8a5cb39858a6afefc40755cc5a1bfdf26dc685d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -204,12 +204,6 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n-AC_ARG_ENABLE([threadlocal],\n-  [AS_HELP_STRING([--enable-threadlocal],\n-  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enabled if there is platform support and glibc-back-compat is not enabled)])],\n-  [use_thread_local=$enableval],\n-  [use_thread_local=auto])\n-\n AC_ARG_ENABLE([asm],\n   [AS_HELP_STRING([--disable-asm],\n   [disable assembly routines (enabled by default)])],\n@@ -891,48 +885,6 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n-dnl thread_local is currently disabled when building with glibc back compat.\n-dnl Our minimum supported glibc is 2.17, however support for thread_local\n-dnl did not arrive in glibc until 2.18.\n-if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && test \"x$use_glibc_compat\" = xno; }; then\n-  TEMP_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n-  AC_MSG_CHECKING([for thread_local support])\n-  AC_LINK_IFELSE([AC_LANG_SOURCE([\n-    #include <thread>\n-    static thread_local int foo = 0;\n-    static void run_thread() { foo++;}\n-    int main(){\n-    for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n-    return foo;\n-    }\n-    ])],\n-    [\n-     case $host in\n-       *mingw*)\n-          dnl mingw32's implementation of thread_local has also been shown to behave\n-          dnl erroneously under concurrent usage; see:\n-          dnl https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n-          AC_MSG_RESULT(no)\n-          ;;\n-        *freebsd*)\n-          dnl FreeBSD's implementation of thread_local is also buggy (per\n-          dnl https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n-          AC_MSG_RESULT(no)\n-          ;;\n-        *)\n-          AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n-          AC_MSG_RESULT(yes)\n-          ;;\n-      esac\n-    ],\n-    [\n-      AC_MSG_RESULT(no)\n-    ]\n-  )\n-  LDFLAGS=\"$TEMP_LDFLAGS\"\n-fi\n-\n dnl check for gmtime_r(), fallback to gmtime_s() if that is unavailable\n dnl fail if neither are available.\n AC_MSG_CHECKING(for gmtime_r)"
      },
      {
        "sha": "41c066affe058ddaed9af70ba271e0f5753a6a3b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -525,11 +525,7 @@ void SetupServerArgs(NodeContext& node)\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-#ifdef HAVE_THREAD_LOCAL\n     gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-#else\n-    hidden_args.emplace_back(\"-logthreadnames\");\n-#endif\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -867,9 +863,7 @@ void InitLogging()\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = gArgs.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n-#ifdef HAVE_THREAD_LOCAL\n     LogInstance().m_log_threadnames = gArgs.GetBoolArg(\"-logthreadnames\", DEFAULT_LOGTHREADNAMES);\n-#endif\n \n     fLogIPs = gArgs.GetBoolArg(\"-logips\", DEFAULT_LOGIPS);\n "
      },
      {
        "sha": "f6b43a1c1f463b022887e4238136ea7035a09e3a",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -18,9 +18,6 @@\n #include <system_error>\n \n #ifdef DEBUG_LOCKCONTENTION\n-#if !defined(HAVE_THREAD_LOCAL)\n-static_assert(false, \"thread_local is not supported\");\n-#endif\n void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n {\n     LogPrintf(\"LOCKCONTENTION: %s\\n\", pszName);"
      },
      {
        "sha": "30c0402c6196b90629ca7bec875a7b5b3380b337",
        "filename": "src/test/util_threadnames_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/src/test/util_threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/src/test/util_threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_threadnames_tests.cpp?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -55,11 +55,6 @@ BOOST_AUTO_TEST_CASE(util_threadnames_test_rename_threaded)\n {\n     BOOST_CHECK_EQUAL(util::ThreadGetInternalName(), \"\");\n \n-#if !defined(HAVE_THREAD_LOCAL)\n-    // This test doesn't apply to platforms where we don't have thread_local.\n-    return;\n-#endif\n-\n     std::set<std::string> names = RenameEnMasse(100);\n \n     BOOST_CHECK_EQUAL(names.size(), 100);"
      },
      {
        "sha": "9e2e53e22b57519d637722b9156b3eaaaf6cde17",
        "filename": "src/util/threadnames.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 16,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/src/util/threadnames.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/src/util/threadnames.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/threadnames.cpp?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -7,6 +7,8 @@\n #endif\n \n #include <thread>\n+#include <mutex>\n+#include <unordered_map>\n \n #if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n #include <pthread.h>\n@@ -36,31 +38,51 @@ static void SetThreadName(const char* name)\n #endif\n }\n \n-// If we have thread_local, just keep thread ID and name in a thread_local\n-// global.\n-#if defined(HAVE_THREAD_LOCAL)\n+/** A singleton to keep track of thread names. This is created at first use and\n+ * leaks at shutdown to avoid initialization/destruction order problems.\n+ */\n+class ThreadNames {\n+    std::mutex cs;\n+    std::unordered_map<std::thread::id, std::string> names;\n \n-static thread_local std::string g_thread_name;\n-const std::string& util::ThreadGetInternalName() { return g_thread_name; }\n-//! Set the in-memory internal name for this thread. Does not affect the process\n-//! name.\n-static void SetInternalName(std::string name) { g_thread_name = std::move(name); }\n+public:\n+    //! Static function to ensure creation at first use.\n+    static ThreadNames *Instance()\n+    {\n+        static ThreadNames *self = new ThreadNames();\n+        return self;\n+    }\n \n-// Without thread_local available, don't handle internal name at all.\n-#else\n+    std::string GetName()\n+    {\n+        const std::lock_guard<std::mutex> lock(cs);\n+        auto i = names.find(std::this_thread::get_id());\n+        if (i != names.end()) {\n+            return i->second;\n+        } else {\n+            return \"\";\n+        }\n+    }\n \n-static const std::string empty_string;\n-const std::string& util::ThreadGetInternalName() { return empty_string; }\n-static void SetInternalName(std::string name) { }\n-#endif\n+    void SetName(std::string name)\n+    {\n+        const std::lock_guard<std::mutex> lock(cs);\n+        names[std::this_thread::get_id()] = std::move(name);\n+    }\n+};\n+\n+std::string util::ThreadGetInternalName()\n+{\n+    return ThreadNames::Instance()->GetName();\n+}\n \n void util::ThreadRename(std::string&& name)\n {\n     SetThreadName((\"b-\" + name).c_str());\n-    SetInternalName(std::move(name));\n+    ThreadNames::Instance()->SetName(name);\n }\n \n void util::ThreadSetInternalName(std::string&& name)\n {\n-    SetInternalName(std::move(name));\n+    ThreadNames::Instance()->SetName(name);\n }"
      },
      {
        "sha": "c16658cb45df60bd4950dcda8f6a3e97395ab8c3",
        "filename": "src/util/threadnames.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7933899e93b38f444d87b12858fd5a124f2066c/src/util/threadnames.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7933899e93b38f444d87b12858fd5a124f2066c/src/util/threadnames.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/threadnames.h?ref=c7933899e93b38f444d87b12858fd5a124f2066c",
        "patch": "@@ -12,14 +12,18 @@ namespace util {\n //! as its system thread name.\n //! @note Do not call this for the main thread, as this will interfere with\n //! UNIX utilities such as top and killall. Use ThreadSetInternalName instead.\n+//! @note Call this only for permanent threads. An entry is created in an internal\n+//! data structure that is never freed.\n void ThreadRename(std::string&&);\n \n //! Set the internal (in-memory) name of the current thread only.\n+//! @note Call this only for permanent threads. An entry is created in an internal\n+//! data structure that is never freed.\n void ThreadSetInternalName(std::string&&);\n \n //! Get the thread's internal (in-memory) name; used e.g. for identification in\n //! logging.\n-const std::string& ThreadGetInternalName();\n+std::string ThreadGetInternalName();\n \n } // namespace util\n "
      }
    ]
  }
]