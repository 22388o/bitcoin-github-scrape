[
  {
    "sha": "f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2IyODIzYTVhNWIyZmM0ZDdkMDUzZjQ0OWZhZjM2NzZjMGVmZDNh",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-28T20:41:46Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:17:38Z"
      },
      "message": "CheckProof method for CBlockHeader and CBlockIndex",
      "tree": {
        "sha": "91ee86e9d0d94ccc2eb81d2e029401ee4b13b33a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ee86e9d0d94ccc2eb81d2e029401ee4b13b33a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e731f24b5a5c894e013a6d752f1cd409303e916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e731f24b5a5c894e013a6d752f1cd409303e916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e731f24b5a5c894e013a6d752f1cd409303e916"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0a8bcaaa14629dd1b65ed1d69660dd6272589808",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n+#include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -477,6 +478,11 @@ class CBlockHeader\n     {\n         return (int64_t)nTime;\n     }\n+\n+    bool CheckProof() const\n+    {\n+        return CheckProofOfWork(GetHash(), nBits);\n+    }\n };\n \n "
      },
      {
        "sha": "072d498b2e863c15d5c2fc6c2d95abd31a085634",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "patch": "@@ -1096,7 +1096,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     }\n \n     // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (!block.CheckProof())\n         return error(\"ReadBlockFromDisk : Errors in block header\");\n \n     return true;\n@@ -2223,7 +2223,7 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n+    if (fCheckPOW && !block.CheckProof())\n         return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n "
      },
      {
        "sha": "5c128a2170f562e877e8c7eaa816262352c7d192",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "patch": "@@ -690,6 +690,11 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n+    bool CheckProof() const\n+    {\n+        return CheckProofOfWork(GetBlockHash(), nBits);\n+    }\n+\n     uint256 GetBlockWork() const\n     {\n         return GetProofIncrement(nBits);"
      },
      {
        "sha": "428a307d0396a15a77673157c62201a303543cce",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "patch": "@@ -219,8 +219,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                if (!pindexNew->CheckProof())\n+                    return error(\"LoadBlockIndex() : CheckProof failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {"
      }
    ]
  },
  {
    "sha": "8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTBmM2ZlZjE3ZGFlY2ZhMWJhYmVhZmNlMzliMmI2ZjkzNGNjM2Yw",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-14T15:49:24Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T01:57:30Z"
      },
      "message": "Create Proof class",
      "tree": {
        "sha": "f2bd1afd26b1b84bb54681b75192eb4a2b24e446",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2bd1afd26b1b84bb54681b75192eb4a2b24e446"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7b2823a5a5b2fc4d7d053f449faf3676c0efd3a"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 118,
      "deletions": 103
    },
    "files": [
      {
        "sha": "3294d91f56dc0e127dd38716abb5c0ce8505d19e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -147,14 +147,12 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n-  pow.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\\n   rpcmisc.cpp \\\n   rpcnet.cpp \\\n   rpcrawtransaction.cpp \\\n   rpcserver.cpp \\\n-  timedata.cpp \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   $(JSON_H) \\\n@@ -205,8 +203,10 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   keystore.cpp \\\n   netbase.cpp \\\n+  pow.cpp \\\n   protocol.cpp \\\n   script.cpp \\\n+  timedata.cpp \\\n   $(BITCOIN_CORE_H)\n \n # util: shared between all executables."
      },
      {
        "sha": "b7a5501353f0b5132ef4a72bd7e1b19bf8c74253",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -86,9 +86,7 @@ class CMainParams : public CChainParams {\n         genesis.hashPrevBlock = 0;\n         genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n         genesis.nVersion = 1;\n-        genesis.nTime    = 1231006505;\n-        genesis.nBits    = 0x1d00ffff;\n-        genesis.nNonce   = 2083236893;\n+        genesis.proof = CProof(1231006505, 0x1d00ffff, 2083236893);\n \n         hashGenesisBlock = genesis.GetHash();\n         assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n@@ -146,8 +144,7 @@ class CTestNetParams : public CMainParams {\n         nTargetSpacing = 10 * 60;\n \n         // Modify the testnet genesis block so the timestamp is valid for a later start.\n-        genesis.nTime = 1296688602;\n-        genesis.nNonce = 414098458;\n+        genesis.proof = CProof(1296688602, 0x1d00ffff, 414098458);\n         hashGenesisBlock = genesis.GetHash();\n         assert(hashGenesisBlock == uint256(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -195,9 +192,7 @@ class CRegTestParams : public CTestNetParams {\n         nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         nTargetSpacing = 10 * 60;\n         bnProofOfWorkLimit = ~uint256(0) >> 1;\n-        genesis.nTime = 1296688602;\n-        genesis.nBits = 0x207fffff;\n-        genesis.nNonce = 2;\n+        genesis.proof = CProof(1296688602, 0x207fffff, 2);\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));"
      },
      {
        "sha": "75501b68cfb660a7b14130ef427173e75e9d221b",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -211,7 +211,7 @@ uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n \n uint256 CBlockHeader::GetHash() const\n {\n-    return Hash(BEGIN(nVersion), END(nNonce));\n+    return SerializeHash(*this);\n }\n \n uint256 CBlock::BuildMerkleTree() const\n@@ -272,7 +272,7 @@ std::string CBlock::ToString() const\n         nVersion,\n         hashPrevBlock.ToString(),\n         hashMerkleRoot.ToString(),\n-        nTime, nBits, nNonce,\n+        proof.nTime, proof.nBits, proof.nNonce,\n         vtx.size());\n     for (unsigned int i = 0; i < vtx.size(); i++)\n     {"
      },
      {
        "sha": "4509a470a2b639dc8f1a622c84754f9fd200bdc8",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -435,9 +435,7 @@ class CBlockHeader\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n-    uint32_t nTime;\n-    uint32_t nBits;\n-    uint32_t nNonce;\n+    CProof proof;\n \n     CBlockHeader()\n     {\n@@ -452,36 +450,32 @@ class CBlockHeader\n         nVersion = this->nVersion;\n         READWRITE(hashPrevBlock);\n         READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        READWRITE(proof);\n     }\n \n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n         hashPrevBlock = 0;\n         hashMerkleRoot = 0;\n-        nTime = 0;\n-        nBits = 0;\n-        nNonce = 0;\n+        proof.SetNull();\n     }\n \n     bool IsNull() const\n     {\n-        return (nBits == 0);\n+        return proof.IsNull();\n     }\n \n     uint256 GetHash() const;\n \n     int64_t GetBlockTime() const\n     {\n-        return (int64_t)nTime;\n+        return proof.GetBlockTime();\n     }\n \n     bool CheckProof() const\n     {\n-        return CheckProofOfWork(GetHash(), nBits);\n+        return proof.CheckSolution(GetHash());\n     }\n };\n \n@@ -527,9 +521,7 @@ class CBlock : public CBlockHeader\n         block.nVersion       = nVersion;\n         block.hashPrevBlock  = hashPrevBlock;\n         block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n+        block.proof          = proof;\n         return block;\n     }\n "
      },
      {
        "sha": "55605fcfc0568209e3dd2b6c23ab3054a1d815fd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -12,7 +12,6 @@\n #include \"checkqueue.h\"\n #include \"init.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -2312,7 +2311,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n             return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n-        if (!CheckMinWork(block.nBits, pcheckpoint->nBits, deltaTime))\n+        if (!CheckMinWork(block.proof.nBits, pcheckpoint->proof.nBits, deltaTime))\n         {\n             return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n@@ -2330,7 +2329,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if (block.proof.nBits != block.proof.GetNextChallenge(pindexPrev))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "5562fbd2e415d0127aec6234ffca4f8c79a1cc2a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 22,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -604,9 +604,7 @@ class CBlockIndex\n     // block header\n     int nVersion;\n     uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n+    CProof proof;\n \n     // (memory only) Sequencial id assigned to distinguish order in which blocks are received.\n     uint32_t nSequenceId;\n@@ -628,9 +626,7 @@ class CBlockIndex\n \n         nVersion       = 0;\n         hashMerkleRoot = 0;\n-        nTime          = 0;\n-        nBits          = 0;\n-        nNonce         = 0;\n+        proof.SetNull();\n     }\n \n     CBlockIndex()\n@@ -644,9 +640,7 @@ class CBlockIndex\n \n         nVersion       = block.nVersion;\n         hashMerkleRoot = block.hashMerkleRoot;\n-        nTime          = block.nTime;\n-        nBits          = block.nBits;\n-        nNonce         = block.nNonce;\n+        proof          = block.proof;\n     }\n \n     CDiskBlockPos GetBlockPos() const {\n@@ -674,9 +668,7 @@ class CBlockIndex\n         if (pprev)\n             block.hashPrevBlock = pprev->GetBlockHash();\n         block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n+        block.proof          = proof;\n         return block;\n     }\n \n@@ -687,17 +679,17 @@ class CBlockIndex\n \n     int64_t GetBlockTime() const\n     {\n-        return (int64_t)nTime;\n+        return proof.GetBlockTime();\n     }\n \n     bool CheckProof() const\n     {\n-        return CheckProofOfWork(GetBlockHash(), nBits);\n+        return proof.CheckSolution(GetBlockHash());\n     }\n \n     uint256 GetBlockWork() const\n     {\n-        return GetProofIncrement(nBits);\n+        return proof.GetProofIncrement();\n     }\n \n     enum { nMedianTimeSpan=11 };\n@@ -798,9 +790,7 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(this->nVersion);\n         READWRITE(hashPrev);\n         READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        READWRITE(proof);\n     }\n \n     uint256 GetBlockHash() const\n@@ -809,13 +799,10 @@ class CDiskBlockIndex : public CBlockIndex\n         block.nVersion        = nVersion;\n         block.hashPrevBlock   = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;\n-        block.nTime           = nTime;\n-        block.nBits           = nBits;\n-        block.nNonce          = nNonce;\n+        block.proof           = proof;\n         return block.GetHash();\n     }\n \n-\n     std::string ToString() const\n     {\n         std::string str = \"CDiskBlockIndex(\";"
      },
      {
        "sha": "4aed61c4133996e6fc71439cfec6474c809579f7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -307,9 +307,9 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n-        pblock->nNonce         = 0;\n+        pblock->proof.UpdateTime(pindexPrev);\n+        pblock->proof.nBits = pblock->proof.GetNextChallenge(pindexPrev);\n+        pblock->proof.nNonce = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CBlockIndex indexDummy(*pblock);\n@@ -466,7 +466,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n+            uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n             uint256 hash;\n             uint32_t nNonce = 0;\n             uint32_t nOldNonce = 0;\n@@ -481,7 +481,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                     if (hash <= hashTarget)\n                     {\n                         // Found a solution\n-                        pblock->nNonce = nNonce;\n+                        pblock->proof.nNonce = nNonce;\n                         assert(hash == pblock->GetHash());\n \n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n@@ -540,11 +540,11 @@ void static BitcoinMiner(CWallet *pwallet)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, pindexPrev);\n+                pblock->proof.UpdateTime(pindexPrev);\n                 if (Params().AllowMinDifficultyBlocks())\n                 {\n                     // Changing pblock->nTime can change work required on testnet:\n-                    hashTarget.SetCompact(pblock->nBits);\n+                    hashTarget.SetCompact(pblock->proof.nBits);\n                 }\n             }\n         }"
      },
      {
        "sha": "49d18c4cc4976d37f56317f9cda91fdf5e0ef618",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 14,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -12,7 +12,36 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+CProof::CProof()\n+{\n+    SetNull();\n+}\n+\n+CProof::CProof(unsigned int nTime, unsigned int nBits, unsigned int nNonce)\n+{\n+    this->nTime = nTime;\n+    this->nBits = nBits;\n+    this->nNonce = nNonce;\n+}\n+\n+void CProof::SetNull()\n+{\n+    nTime = 0;\n+    nBits = 0;\n+    nNonce = 0;\n+}\n+\n+bool CProof::IsNull() const\n+{\n+    return (nBits == 0);\n+}\n+\n+int64_t CProof::GetBlockTime() const\n+{\n+    return (int64_t)nTime;\n+}\n+\n+unsigned int CProof::GetNextChallenge(const CBlockIndex* pindexLast) const\n {\n     unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n \n@@ -28,18 +57,18 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n+            if (GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->proof.nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n-                return pindex->nBits;\n+                return pindex->proof.nBits;\n             }\n         }\n-        return pindexLast->nBits;\n+        return pindexLast->proof.nBits;\n     }\n \n     // Go back by what we want to be 14 days worth of blocks\n@@ -59,7 +88,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     // Retarget\n     uint256 bnNew;\n     uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n+    bnNew.SetCompact(pindexLast->proof.nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n     bnNew /= Params().TargetTimespan();\n@@ -70,13 +99,14 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n     LogPrintf(\"Params().TargetTimespan() = %d    nActualTimespan = %d\\n\", Params().TargetTimespan(), nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->proof.nBits, bnOld.ToString());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n     return bnNew.GetCompact();\n }\n \n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CProof::CheckSolution(const uint256 hash) const\n {\n     bool fNegative;\n     bool fOverflow;\n@@ -85,11 +115,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CProof::CheckSolution() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (hash > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CProof::CheckSolution() : hash doesn't match nBits\");\n \n     return true;\n }\n@@ -127,16 +157,16 @@ bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime)\n     return bnNewBlock <= bnResult;\n }\n \n-void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n+void CProof::UpdateTime(const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n     if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n+        nBits = GetNextChallenge(pindexPrev);\n }\n \n-uint256 GetProofIncrement(unsigned int nBits)\n+uint256 CProof::GetProofIncrement() const\n {\n     uint256 bnTarget;\n     bool fNegative;"
      },
      {
        "sha": "2596177dc840d5bde14bbdd385efb9f8fb31508a",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 29,
        "deletions": 7,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -6,21 +6,43 @@\n #ifndef BITCOIN_POW_H\n #define BITCOIN_POW_H\n \n+#include \"serialize.h\"\n+\n #include <stdint.h>\n \n class CBlockIndex;\n class CBlockHeader;\n class uint256;\n \n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n-\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n /** Check the work is more than the minimum a received block needs, without knowing its direct parent */\n bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime);\n \n-void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n-\n-uint256 GetProofIncrement(unsigned int nBits);\n+class CProof\n+{\n+public:\n+    uint32_t nTime;\n+    uint32_t nBits;\n+    uint32_t nNonce;\n+\n+    CProof();\n+    bool CheckSolution(const uint256 hash) const;\n+    void UpdateTime(const CBlockIndex* pindexPrev);\n+    uint256 GetProofIncrement() const;\n+    int64_t GetBlockTime() const;\n+    bool IsNull() const;\n+    void SetNull();\n+\n+    IMPLEMENT_SERIALIZE;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n+    }\n+\n+    CProof(unsigned int nTime, unsigned int nBits, unsigned int nNonce);\n+    unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n+};\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "d59ac2b484b075d12ad26c0372ee06a9ad5424d9",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -29,11 +29,10 @@ double GetDifficulty(const CBlockIndex* blockindex)\n         else\n             blockindex = chainActive.Tip();\n     }\n-\n-    int nShift = (blockindex->nBits >> 24) & 0xff;\n+    int nShift = (blockindex->proof.nBits >> 24) & 0xff;\n \n     double dDiff =\n-        (double)0x0000ffff / (double)(blockindex->nBits & 0x00ffffff);\n+        (double)0x0000ffff / (double)(blockindex->proof.nBits & 0x00ffffff);\n \n     while (nShift < 29)\n     {\n@@ -67,9 +66,9 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     BOOST_FOREACH(const CTransaction&tx, block.vtx)\n         txs.push_back(tx.GetHash().GetHex());\n     result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n+    result.push_back(Pair(\"time\", block.proof.GetBlockTime()));\n+    result.push_back(Pair(\"nonce\", (uint64_t)block.proof.nNonce));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.proof.nBits)));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n "
      },
      {
        "sha": "6f59864f96fca16e7799e326ddfd2262c36defa3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -9,7 +9,6 @@\n #include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n-#include \"pow.h\"\n #include \"core_io.h\"\n #include \"util.h\"\n #ifdef ENABLE_WALLET\n@@ -458,8 +457,8 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Update nTime\n-    UpdateTime(pblock, pindexPrev);\n-    pblock->nNonce = 0;\n+    pblock->proof.UpdateTime(pindexPrev);\n+    pblock->proof.nNonce = 0;\n \n     Array transactions;\n     map<uint256, int64_t> setTxIndex;\n@@ -496,8 +495,6 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     Object aux;\n     aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n \n-    uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-\n     static Array aMutable;\n     if (aMutable.empty())\n     {\n@@ -513,14 +510,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n+    result.push_back(Pair(\"target\", uint256().SetCompact(pblock->proof.nBits).GetHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n+    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->proof.nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n     return result;"
      },
      {
        "sha": "bd3b3aafbef8c88edda1bcf78b3cb889d50b16db",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -11,7 +11,6 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n-#include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n #include \"util.h\""
      },
      {
        "sha": "49b632c1c5040ed97f46516920c6fd52c1efdb69",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -6,8 +6,6 @@\n // Unit tests for block.CheckBlock()\n //\n \n-\n-\n #include \"main.h\"\n #include \"utiltime.h\"\n \n@@ -58,7 +56,7 @@ BOOST_AUTO_TEST_CASE(May15)\n         CValidationState state;\n \n         // After May 15'th, big blocks are OK:\n-        forkingBlock.nTime = tMay15; // Invalidates PoW\n+        forkingBlock.proof.nTime = tMay15; // Invalidates PoW\n         BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n     }\n "
      },
      {
        "sha": "bf078b49278a12fa7693d5a87f4184dc405c6aa7",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -67,7 +67,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->proof.nTime = chainActive.Tip()->GetMedianTimePast()+1;\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-        pblock->nNonce = blockinfo[i].nonce;\n+        pblock->proof.nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n         BOOST_CHECK(state.IsValid());"
      },
      {
        "sha": "29dc6818a0dcd2e70a8630954a2fd270abcab9e6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "patch": "@@ -6,7 +6,6 @@\n #include \"txdb.h\"\n \n #include \"core.h\"\n-#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <boost/thread.hpp>\n@@ -213,9 +212,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nUndoPos       = diskindex.nUndoPos;\n                 pindexNew->nVersion       = diskindex.nVersion;\n                 pindexNew->hashMerkleRoot = diskindex.hashMerkleRoot;\n-                pindexNew->nTime          = diskindex.nTime;\n-                pindexNew->nBits          = diskindex.nBits;\n-                pindexNew->nNonce         = diskindex.nNonce;\n+                pindexNew->proof          = diskindex.proof;\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n "
      }
    ]
  },
  {
    "sha": "cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWZhZTZmYzBhZmRhMWE5YTRkYjljMjU0ZWM3OGYwYWM0YTEyZjEz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-29T20:20:40Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T02:21:09Z"
      },
      "message": "hide Proof::GetNextChallenge()",
      "tree": {
        "sha": "89b8f1d459774cb27d6503e105737461833822b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89b8f1d459774cb27d6503e105737461833822b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a0f3fef17daecfa1babeafce39b2b6f934cc3f0"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ff1a53c939bf2beff00887f15b9698293d22746",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "patch": "@@ -2329,7 +2329,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.proof.nBits != block.proof.GetNextChallenge(pindexPrev))\n+        if (!block.proof.CheckChallenge(pindexPrev))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "744f8f55c92b131b4a6f53b4327d2bc1c49812cd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "patch": "@@ -308,7 +308,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         pblock->proof.UpdateTime(pindexPrev);\n-        pblock->proof.nBits = pblock->proof.GetNextChallenge(pindexPrev);\n+        pblock->proof.ResetChallenge(pindexPrev);\n         pblock->proof.nNonce = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n "
      },
      {
        "sha": "fa564370048a1d380505ab10846e6113f26001c8",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "patch": "@@ -166,6 +166,16 @@ void CProof::UpdateTime(const CBlockIndex* pindexPrev)\n         nBits = GetNextChallenge(pindexPrev);\n }\n \n+void CProof::ResetChallenge(const CBlockIndex* pindexPrev)\n+{\n+    nBits = GetNextChallenge(pindexPrev);\n+}\n+\n+bool CProof::CheckChallenge(const CBlockIndex* pindexPrev) const\n+{\n+    return nBits == GetNextChallenge(pindexPrev);\n+}\n+\n uint256 CProof::GetProofIncrement() const\n {\n     uint256 bnTarget;"
      },
      {
        "sha": "53566f1b552caac33330c92d25dde6ce28495b2e",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "patch": "@@ -19,13 +19,16 @@ bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime);\n \n class CProof\n {\n+    unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n public:\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n \n     CProof();\n     bool CheckSolution(const uint256 hash) const;\n+    void ResetChallenge(const CBlockIndex* pindexPrev);\n+    bool CheckChallenge(const CBlockIndex* pindexPrev) const;\n     void UpdateTime(const CBlockIndex* pindexPrev);\n     uint256 GetProofIncrement() const;\n     int64_t GetBlockTime() const;\n@@ -42,7 +45,6 @@ class CProof\n     }\n \n     CProof(unsigned int nTime, unsigned int nBits, unsigned int nNonce);\n-    unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n };\n \n #endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "685a91857d58c22277bd4198f0b45b4f0c10f7df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODVhOTE4NTdkNThjMjIyNzdiZDQxOThmMGI0NWI0ZjBjMTBmN2Rm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-29T20:11:13Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T02:21:09Z"
      },
      "message": "CheckMinWork(uint, uint, int64) -> Proof::CheckMinChallenge(Proof&)",
      "tree": {
        "sha": "765ef67f2a154215a307093bb8cb389abbcfbffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/765ef67f2a154215a307093bb8cb389abbcfbffa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/685a91857d58c22277bd4198f0b45b4f0c10f7df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/685a91857d58c22277bd4198f0b45b4f0c10f7df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/685a91857d58c22277bd4198f0b45b4f0c10f7df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/685a91857d58c22277bd4198f0b45b4f0c10f7df/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cefae6fc0afda1a9a4db9c254ec78f0ac4a12f13"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c060f9f60fd6c4771741e7533e6508d041a9a372",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "patch": "@@ -2311,7 +2311,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n             return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n-        if (!CheckMinWork(block.proof.nBits, pcheckpoint->proof.nBits, deltaTime))\n+        if (!block.proof.CheckMinChallenge(pcheckpoint->proof))\n         {\n             return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n                              REJECT_INVALID, \"bad-diffbits\");"
      },
      {
        "sha": "7bb9c0862e690002cd47083cb3ea618c4d4d421a",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "patch": "@@ -124,12 +124,14 @@ bool CProof::CheckSolution(const uint256 hash) const\n     return true;\n }\n \n+// Check the work is more than the minimum a received block needs, without knowing its direct parent */\n //\n // true if nBits is greater than the minimum amount of work that could\n-// possibly be required deltaTime after minimum work required was nBase\n+// possibly be required deltaTime after minimum work required was checkpoint.nBits\n //\n-bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime)\n+bool CProof::CheckMinChallenge(const CProof& checkpoint) const\n {\n+    int64_t deltaTime = GetBlockTime() - checkpoint.GetBlockTime();\n     bool fOverflow = false;\n     uint256 bnNewBlock;\n     bnNewBlock.SetCompact(nBits, NULL, &fOverflow);\n@@ -143,7 +145,7 @@ bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime)\n         return bnNewBlock <= bnLimit;\n \n     uint256 bnResult;\n-    bnResult.SetCompact(nBase);\n+    bnResult.SetCompact(checkpoint.nBits);\n     while (deltaTime > 0 && bnResult < bnLimit)\n     {\n         // Maximum 400% adjustment..."
      },
      {
        "sha": "4f5bcb7f28216b9d4cf98db10a07370c8c04232a",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "patch": "@@ -14,9 +14,6 @@ class CBlockIndex;\n class CBlockHeader;\n class uint256;\n \n-/** Check the work is more than the minimum a received block needs, without knowing its direct parent */\n-bool CheckMinWork(unsigned int nBits, unsigned int nBase, int64_t deltaTime);\n-\n class CProof\n {\n     unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n@@ -29,6 +26,7 @@ class CProof\n     bool CheckSolution(const uint256 hash) const;\n     void ResetChallenge(const CBlockIndex* pindexPrev);\n     bool CheckChallenge(const CBlockIndex* pindexPrev) const;\n+    bool CheckMinChallenge(const CProof& checkpoint) const; \n     void UpdateTime(const CBlockIndex* pindexPrev);\n     uint256 GetProofIncrement() const;\n     int64_t GetBlockTime() const;"
      },
      {
        "sha": "9a272f5388a5e091360aeaaebdc4d33ca830c1ea",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/685a91857d58c22277bd4198f0b45b4f0c10f7df/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "patch": "@@ -104,9 +104,10 @@ static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2,\n {\n     if (time1 > time2)\n         return CheckNBits(nbits2, time2, nbits1, time1);\n-    int64_t deltaTime = time2-time1;\n \n-    return CheckMinWork(nbits2, nbits1, deltaTime);\n+    CProof proof1 = CProof(time1, nbits1, 0);\n+    CProof proof2 = CProof(time2, nbits2, 0);\n+    return proof2.CheckMinChallenge(proof1);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_checknbits)"
      }
    ]
  },
  {
    "sha": "7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTJlZDdiZDU4MDcyNWIxYzk5MTY0OWJmMTA5YWQ5ZjgyYWY0YTFm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-28T18:32:52Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T02:21:09Z"
      },
      "message": "Remove nNonce variable and parameter",
      "tree": {
        "sha": "80a9728fb060bb9306ecd92a35e9923b70f1c461",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80a9728fb060bb9306ecd92a35e9923b70f1c461"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2ed7bd580725b1c991649bf109ad9f82af4a1f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/685a91857d58c22277bd4198f0b45b4f0c10f7df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/685a91857d58c22277bd4198f0b45b4f0c10f7df"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ac2985d7229bf757ebf57b5e252d291474af3ba5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2ed7bd580725b1c991649bf109ad9f82af4a1f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2ed7bd580725b1c991649bf109ad9f82af4a1f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
        "patch": "@@ -357,7 +357,7 @@ int64_t nHPSTimerStart = 0;\n // nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n // zero.\n //\n-bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)\n+bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n {\n     // Write the first 76 bytes of the block header to a double-SHA256 state.\n     CHash256 hasher;\n@@ -367,21 +367,21 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     hasher.Write((unsigned char*)&ss[0], 76);\n \n     while (true) {\n-        nNonce++;\n+        pblock->proof.nNonce++;\n \n         // Write the last 4 bytes of the block header (the nonce) to a copy of\n         // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)phash);\n+        CHash256(hasher).Write((unsigned char*)&pblock->proof.nNonce, 4).Finalize((unsigned char*)phash);\n \n         // Return the nonce if the hash has at least some zero bits,\n         // caller will check if it has enough to reach the target\n         if (((uint16_t*)phash)[15] == 0)\n             return true;\n \n         // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xffff) == 0)\n+        if ((pblock->proof.nNonce & 0xffff) == 0)\n             return false;\n-        if ((nNonce & 0xfff) == 0)\n+        if ((pblock->proof.nNonce & 0xfff) == 0)\n             boost::this_thread::interruption_point();\n     }\n }\n@@ -468,20 +468,19 @@ void static BitcoinMiner(CWallet *pwallet)\n             int64_t nStart = GetTime();\n             uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n             uint256 hash;\n-            uint32_t nNonce = 0;\n+            pblock->proof.nNonce = 0;\n             uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, nNonce, &hash);\n-                uint32_t nHashesDone = nNonce - nOldNonce;\n-                nOldNonce = nNonce;\n+                bool fFound = ScanHash(pblock, &hash);\n+                uint32_t nHashesDone = pblock->proof.nNonce - nOldNonce;\n+                nOldNonce = pblock->proof.nNonce;\n \n                 // Check if something found\n                 if (fFound)\n                 {\n                     if (hash <= hashTarget)\n                     {\n                         // Found a solution\n-                        pblock->proof.nNonce = nNonce;\n                         assert(hash == pblock->GetHash());\n \n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n@@ -532,7 +531,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Regtest mode doesn't require peers\n                 if (vNodes.empty() && Params().MiningRequiresPeers())\n                     break;\n-                if (nNonce >= 0xffff0000)\n+                if (pblock->proof.nNonce >= 0xffff0000)\n                     break;\n                 if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n                     break;"
      }
    ]
  },
  {
    "sha": "effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmZhNTI4ZmFiZDBmNDFmZTBkNGZkYzEzYTNhMGZlNTNhZmIxMzc5",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-28T18:42:52Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T02:21:09Z"
      },
      "message": "Remove testnet's special case from miner.cpp",
      "tree": {
        "sha": "26179cbf7dcb8c0739d99ff558a654912c11e0e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26179cbf7dcb8c0739d99ff558a654912c11e0e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2ed7bd580725b1c991649bf109ad9f82af4a1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2ed7bd580725b1c991649bf109ad9f82af4a1f"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 19,
      "deletions": 25
    },
    "files": [
      {
        "sha": "cbf316857b8b6096d30787521a6d592d288fc7c1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 25,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
        "patch": "@@ -373,10 +373,17 @@ bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n         // the double-SHA256 state, and compute the result.\n         CHash256(hasher).Write((unsigned char*)&pblock->proof.nNonce, 4).Finalize((unsigned char*)phash);\n \n-        // Return the nonce if the hash has at least some zero bits,\n-        // caller will check if it has enough to reach the target\n-        if (((uint16_t*)phash)[15] == 0)\n-            return true;\n+        // Check if the hash has at least some zero bits,\n+        if (((uint16_t*)phash)[15] == 0) {\n+            // then check if it has enough to reach the target\n+            uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n+            if (*phash <= hashTarget) {\n+                assert(*phash == pblock->GetHash());\n+                LogPrintf(\"hash: %s  \\ntarget: %s\\n\", phash->GetHex(), hashTarget.GetHex());\n+                return true;\n+            }\n+            return false;\n+        }\n \n         // If nothing found after trying for a while, return -1\n         if ((pblock->proof.nNonce & 0xffff) == 0)\n@@ -466,7 +473,6 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n             uint256 hash;\n             pblock->proof.nNonce = 0;\n             uint32_t nOldNonce = 0;\n@@ -478,23 +484,16 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Check if something found\n                 if (fFound)\n                 {\n-                    if (hash <= hashTarget)\n-                    {\n-                        // Found a solution\n-                        assert(hash == pblock->GetHash());\n+                    SetThreadPriority(THREAD_PRIORITY_NORMAL);\n+                    LogPrintf(\"BitcoinMiner:\\n proof-of-work found\\n\");\n+                    ProcessBlockFound(pblock, *pwallet, reservekey);\n+                    SetThreadPriority(THREAD_PRIORITY_LOWEST);\n \n-                        SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                        LogPrintf(\"BitcoinMiner:\\n\");\n-                        LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n-                        SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+                    // In regression test mode, stop mining after a block is found.\n+                    if (Params().MineBlocksOnDemand())\n+                        throw boost::thread_interrupted();\n \n-                        // In regression test mode, stop mining after a block is found.\n-                        if (Params().MineBlocksOnDemand())\n-                            throw boost::thread_interrupted();\n-\n-                        break;\n-                    }\n+                    break;\n                 }\n \n                 // Meter hashes/sec\n@@ -540,11 +539,6 @@ void static BitcoinMiner(CWallet *pwallet)\n \n                 // Update nTime every few seconds\n                 pblock->proof.UpdateTime(pindexPrev);\n-                if (Params().AllowMinDifficultyBlocks())\n-                {\n-                    // Changing pblock->nTime can change work required on testnet:\n-                    hashTarget.SetCompact(pblock->proof.nBits);\n-                }\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "d3d150350f7974648841f46c8d64efe4b13e4213",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2QxNTAzNTBmNzk3NDY0ODg0MWY0NmM4ZDY0ZWZlNGIxM2U0MjEz",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:03:44Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:03:44Z"
      },
      "message": "Small miner optimization",
      "tree": {
        "sha": "d299291e09a8d15c5be5f658daff9e020b00ca0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d299291e09a8d15c5be5f658daff9e020b00ca0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d150350f7974648841f46c8d64efe4b13e4213",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d150350f7974648841f46c8d64efe4b13e4213",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d150350f7974648841f46c8d64efe4b13e4213",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d150350f7974648841f46c8d64efe4b13e4213/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/effa528fabd0f41fe0d4fdc13a3a0fe53afb1379"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3506d4e996c503459b8b22b94e8fe55c23fd1653",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d150350f7974648841f46c8d64efe4b13e4213/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d150350f7974648841f46c8d64efe4b13e4213/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d3d150350f7974648841f46c8d64efe4b13e4213",
        "patch": "@@ -382,7 +382,6 @@ bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n                 LogPrintf(\"hash: %s  \\ntarget: %s\\n\", phash->GetHex(), hashTarget.GetHex());\n                 return true;\n             }\n-            return false;\n         }\n \n         // If nothing found after trying for a while, return -1"
      }
    ]
  },
  {
    "sha": "90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDM4M2RmYjAzZWM2ZDY4NDZkYTkyNWMxOGJhMmYwZTZlNjVjYzA2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-28T19:00:34Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:04:32Z"
      },
      "message": "Remove hash parameter from ScanHash",
      "tree": {
        "sha": "79a3eaa4a9109715a3bd6f7aec30e978c3857503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79a3eaa4a9109715a3bd6f7aec30e978c3857503"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90383dfb03ec6d6846da925c18ba2f0e6e65cc06/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3d150350f7974648841f46c8d64efe4b13e4213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d150350f7974648841f46c8d64efe4b13e4213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d150350f7974648841f46c8d64efe4b13e4213"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "27ce495a8b1e2fb71ecd6370a344176fc6aa3415",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90383dfb03ec6d6846da925c18ba2f0e6e65cc06/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90383dfb03ec6d6846da925c18ba2f0e6e65cc06/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
        "patch": "@@ -357,8 +357,10 @@ int64_t nHPSTimerStart = 0;\n // nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n // zero.\n //\n-bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n+bool static ScanHash(CBlockHeader *pblock)\n {\n+    uint256 hash;\n+\n     // Write the first 76 bytes of the block header to a double-SHA256 state.\n     CHash256 hasher;\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n@@ -371,15 +373,15 @@ bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n \n         // Write the last 4 bytes of the block header (the nonce) to a copy of\n         // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&pblock->proof.nNonce, 4).Finalize((unsigned char*)phash);\n+        CHash256(hasher).Write((unsigned char*)&pblock->proof.nNonce, 4).Finalize((unsigned char*)&hash);\n \n         // Check if the hash has at least some zero bits,\n-        if (((uint16_t*)phash)[15] == 0) {\n+        if (((uint16_t*)&hash)[15] == 0) {\n             // then check if it has enough to reach the target\n             uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n-            if (*phash <= hashTarget) {\n-                assert(*phash == pblock->GetHash());\n-                LogPrintf(\"hash: %s  \\ntarget: %s\\n\", phash->GetHex(), hashTarget.GetHex());\n+            if (hash <= hashTarget) {\n+                assert(hash == pblock->GetHash());\n+                LogPrintf(\"hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n                 return true;\n             }\n         }\n@@ -472,11 +474,10 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            uint256 hash;\n             pblock->proof.nNonce = 0;\n             uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock, &hash);\n+                bool fFound = ScanHash(pblock);\n                 uint32_t nHashesDone = pblock->proof.nNonce - nOldNonce;\n                 nOldNonce = pblock->proof.nNonce;\n "
      }
    ]
  },
  {
    "sha": "c595fd5d6414db0006c594044371bf35ab00c6a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTk1ZmQ1ZDY0MTRkYjAwMDZjNTk0MDQ0MzcxYmYzNWFiMDBjNmEx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-28T19:08:06Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:05:22Z"
      },
      "message": "Move hashmeter inside ScanHash",
      "tree": {
        "sha": "bc837619ca641c2117133ba9fc8ee6e7e66baca6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc837619ca641c2117133ba9fc8ee6e7e66baca6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c595fd5d6414db0006c594044371bf35ab00c6a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c595fd5d6414db0006c594044371bf35ab00c6a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c595fd5d6414db0006c594044371bf35ab00c6a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c595fd5d6414db0006c594044371bf35ab00c6a1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90383dfb03ec6d6846da925c18ba2f0e6e65cc06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90383dfb03ec6d6846da925c18ba2f0e6e65cc06"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 35,
      "deletions": 37
    },
    "files": [
      {
        "sha": "8261f6d30af9745961223bc82f15e94965525b5b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 37,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c595fd5d6414db0006c594044371bf35ab00c6a1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c595fd5d6414db0006c594044371bf35ab00c6a1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=c595fd5d6414db0006c594044371bf35ab00c6a1",
        "patch": "@@ -350,6 +350,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n //\n double dHashesPerSec = 0.0;\n int64_t nHPSTimerStart = 0;\n+uint32_t nOldNonce = 0;\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n@@ -368,6 +369,7 @@ bool static ScanHash(CBlockHeader *pblock)\n     assert(ss.size() == 80);\n     hasher.Write((unsigned char*)&ss[0], 76);\n \n+    bool toReturn = false;\n     while (true) {\n         pblock->proof.nNonce++;\n \n@@ -382,16 +384,46 @@ bool static ScanHash(CBlockHeader *pblock)\n             if (hash <= hashTarget) {\n                 assert(hash == pblock->GetHash());\n                 LogPrintf(\"hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                return true;\n+                toReturn = true;\n+                break;\n             }\n         }\n \n         // If nothing found after trying for a while, return -1\n         if ((pblock->proof.nNonce & 0xffff) == 0)\n-            return false;\n+            break;\n         if ((pblock->proof.nNonce & 0xfff) == 0)\n             boost::this_thread::interruption_point();\n     }\n+\n+    uint32_t nHashesDone = pblock->proof.nNonce - nOldNonce;\n+    nOldNonce = pblock->proof.nNonce;\n+\n+    // Meter hashes/sec\n+    static int64_t nHashCounter;\n+    if (nHPSTimerStart == 0) {\n+        nHPSTimerStart = GetTimeMillis();\n+        nHashCounter = 0;\n+    }\n+    else\n+        nHashCounter += nHashesDone;\n+    if (GetTimeMillis() - nHPSTimerStart > 4000) {\n+        static CCriticalSection cs;\n+        {\n+            LOCK(cs);\n+            if (GetTimeMillis() - nHPSTimerStart > 4000) {\n+                dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n+                nHPSTimerStart = GetTimeMillis();\n+                nHashCounter = 0;\n+                static int64_t nLogTime;\n+                if (GetTime() - nLogTime > 30 * 60) {\n+                    nLogTime = GetTime();\n+                    LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n+                }\n+            }\n+        }\n+    }\n+    return toReturn;\n }\n \n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n@@ -475,14 +507,9 @@ void static BitcoinMiner(CWallet *pwallet)\n             //\n             int64_t nStart = GetTime();\n             pblock->proof.nNonce = 0;\n-            uint32_t nOldNonce = 0;\n             while (true) {\n-                bool fFound = ScanHash(pblock);\n-                uint32_t nHashesDone = pblock->proof.nNonce - nOldNonce;\n-                nOldNonce = pblock->proof.nNonce;\n-\n                 // Check if something found\n-                if (fFound)\n+                if (ScanHash(pblock))\n                 {\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                     LogPrintf(\"BitcoinMiner:\\n proof-of-work found\\n\");\n@@ -496,35 +523,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                     break;\n                 }\n \n-                // Meter hashes/sec\n-                static int64_t nHashCounter;\n-                if (nHPSTimerStart == 0)\n-                {\n-                    nHPSTimerStart = GetTimeMillis();\n-                    nHashCounter = 0;\n-                }\n-                else\n-                    nHashCounter += nHashesDone;\n-                if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                {\n-                    static CCriticalSection cs;\n-                    {\n-                        LOCK(cs);\n-                        if (GetTimeMillis() - nHPSTimerStart > 4000)\n-                        {\n-                            dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                            nHPSTimerStart = GetTimeMillis();\n-                            nHashCounter = 0;\n-                            static int64_t nLogTime;\n-                            if (GetTime() - nLogTime > 30 * 60)\n-                            {\n-                                nLogTime = GetTime();\n-                                LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                            }\n-                        }\n-                    }\n-                }\n-\n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n                 // Regtest mode doesn't require peers"
      }
    ]
  },
  {
    "sha": "4d2c749c2d65ea79affe8fec44d48444b56dafce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDJjNzQ5YzJkNjVlYTc5YWZmZThmZWM0NGQ0ODQ0NGI1NmRhZmNl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-30T09:35:50Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:05:24Z"
      },
      "message": "Replace proof.nNonce >= 0xffff000 with an iteration counter",
      "tree": {
        "sha": "ea95b642289b409bb42a055771e4387e685ed0d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea95b642289b409bb42a055771e4387e685ed0d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d2c749c2d65ea79affe8fec44d48444b56dafce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2c749c2d65ea79affe8fec44d48444b56dafce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2c749c2d65ea79affe8fec44d48444b56dafce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2c749c2d65ea79affe8fec44d48444b56dafce/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c595fd5d6414db0006c594044371bf35ab00c6a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c595fd5d6414db0006c594044371bf35ab00c6a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c595fd5d6414db0006c594044371bf35ab00c6a1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6c2c4c60c19d465a414ffeeb396c6f8e2fc44ea6",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2c749c2d65ea79affe8fec44d48444b56dafce/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2c749c2d65ea79affe8fec44d48444b56dafce/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4d2c749c2d65ea79affe8fec44d48444b56dafce",
        "patch": "@@ -507,7 +507,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             //\n             int64_t nStart = GetTime();\n             pblock->proof.nNonce = 0;\n-            while (true) {\n+            for (int i=0; i < 1000; i++) {\n                 // Check if something found\n                 if (ScanHash(pblock))\n                 {\n@@ -528,8 +528,8 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Regtest mode doesn't require peers\n                 if (vNodes.empty() && Params().MiningRequiresPeers())\n                     break;\n-                if (pblock->proof.nNonce >= 0xffff0000)\n-                    break;\n+                // periodically or after 1000 iterations, \n+                // the block is rebuilt and nNonce starts over at zero.\n                 if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n                     break;\n                 if (pindexPrev != chainActive.Tip())"
      }
    ]
  },
  {
    "sha": "a1c3e450fc42159ce12d9f88950d889d06854cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWMzZTQ1MGZjNDIxNTljZTEyZDlmODg5NTBkODg5ZDA2ODU0Y2Zh",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-28T19:17:43Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:06:40Z"
      },
      "message": "miner.cpp::ScanHash() -> Proof::GenerateSolution()",
      "tree": {
        "sha": "ee1d083f2d35b706c454cadbc1204af5922801fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee1d083f2d35b706c454cadbc1204af5922801fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1c3e450fc42159ce12d9f88950d889d06854cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3e450fc42159ce12d9f88950d889d06854cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3e450fc42159ce12d9f88950d889d06854cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3e450fc42159ce12d9f88950d889d06854cfa/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d2c749c2d65ea79affe8fec44d48444b56dafce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2c749c2d65ea79affe8fec44d48444b56dafce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2c749c2d65ea79affe8fec44d48444b56dafce"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 79,
      "deletions": 78
    },
    "files": [
      {
        "sha": "b0eb56a3484a2d34113b52aae8cef834c9151be0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 78,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a1c3e450fc42159ce12d9f88950d889d06854cfa",
        "patch": "@@ -348,83 +348,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n //\n // Internal miner\n //\n-double dHashesPerSec = 0.0;\n-int64_t nHPSTimerStart = 0;\n-uint32_t nOldNonce = 0;\n-\n-//\n-// ScanHash scans nonces looking for a hash with at least some zero bits.\n-// The nonce is usually preserved between calls, but periodically or if the\n-// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n-// zero.\n-//\n-bool static ScanHash(CBlockHeader *pblock)\n-{\n-    uint256 hash;\n-\n-    // Write the first 76 bytes of the block header to a double-SHA256 state.\n-    CHash256 hasher;\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss << *pblock;\n-    assert(ss.size() == 80);\n-    hasher.Write((unsigned char*)&ss[0], 76);\n-\n-    bool toReturn = false;\n-    while (true) {\n-        pblock->proof.nNonce++;\n-\n-        // Write the last 4 bytes of the block header (the nonce) to a copy of\n-        // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&pblock->proof.nNonce, 4).Finalize((unsigned char*)&hash);\n-\n-        // Check if the hash has at least some zero bits,\n-        if (((uint16_t*)&hash)[15] == 0) {\n-            // then check if it has enough to reach the target\n-            uint256 hashTarget = uint256().SetCompact(pblock->proof.nBits);\n-            if (hash <= hashTarget) {\n-                assert(hash == pblock->GetHash());\n-                LogPrintf(\"hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                toReturn = true;\n-                break;\n-            }\n-        }\n-\n-        // If nothing found after trying for a while, return -1\n-        if ((pblock->proof.nNonce & 0xffff) == 0)\n-            break;\n-        if ((pblock->proof.nNonce & 0xfff) == 0)\n-            boost::this_thread::interruption_point();\n-    }\n-\n-    uint32_t nHashesDone = pblock->proof.nNonce - nOldNonce;\n-    nOldNonce = pblock->proof.nNonce;\n-\n-    // Meter hashes/sec\n-    static int64_t nHashCounter;\n-    if (nHPSTimerStart == 0) {\n-        nHPSTimerStart = GetTimeMillis();\n-        nHashCounter = 0;\n-    }\n-    else\n-        nHashCounter += nHashesDone;\n-    if (GetTimeMillis() - nHPSTimerStart > 4000) {\n-        static CCriticalSection cs;\n-        {\n-            LOCK(cs);\n-            if (GetTimeMillis() - nHPSTimerStart > 4000) {\n-                dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n-                nHPSTimerStart = GetTimeMillis();\n-                nHashCounter = 0;\n-                static int64_t nLogTime;\n-                if (GetTime() - nLogTime > 30 * 60) {\n-                    nLogTime = GetTime();\n-                    LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n-                }\n-            }\n-        }\n-    }\n-    return toReturn;\n-}\n \n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n {\n@@ -509,7 +432,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             pblock->proof.nNonce = 0;\n             for (int i=0; i < 1000; i++) {\n                 // Check if something found\n-                if (ScanHash(pblock))\n+                if (pblock->proof.GenerateSolution(pblock))\n                 {\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                     LogPrintf(\"BitcoinMiner:\\n proof-of-work found\\n\");"
      },
      {
        "sha": "17ef04381a22c03c0fdcce0ae870c7e1313e7e41",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a1c3e450fc42159ce12d9f88950d889d06854cfa",
        "patch": "@@ -12,6 +12,8 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include <boost/thread.hpp>\n+\n CProof::CProof()\n {\n     SetNull();\n@@ -192,3 +194,78 @@ uint256 CProof::GetProofIncrement() const\n     // or ~bnTarget / (nTarget+1) + 1.\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n+\n+// Global variables for the hashmeter\n+double dHashesPerSec = 0.0;\n+int64_t nHPSTimerStart = 0;\n+uint32_t nOldNonce = 0;\n+\n+// GenerateSolution scans nonces looking for a hash with at least some zero bits.\n+// The nonce is usually preserved between calls\n+bool CProof::GenerateSolution(CBlockHeader* pblock)\n+{\n+    uint256 hash;\n+\n+    // Write the first 76 bytes of the block header to a double-SHA256 state.\n+    CHash256 hasher;\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << *pblock;\n+    assert(ss.size() == 80);\n+    hasher.Write((unsigned char*)&ss[0], 76);\n+\n+    bool toReturn = false;\n+    while (true) {\n+        nNonce++;\n+\n+        // Write the last 4 bytes of the block header (the nonce) to a copy of\n+        // the double-SHA256 state, and compute the result.\n+        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)&hash);\n+\n+        // Check if the hash has at least some zero bits,\n+        if (((uint16_t*)&hash)[15] == 0) {\n+            // then check if it has enough to reach the target\n+            uint256 hashTarget = uint256().SetCompact(nBits);\n+            if (hash <= hashTarget) {\n+                assert(hash == pblock->GetHash());\n+                LogPrintf(\"hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n+                toReturn = true;\n+                break;\n+            }\n+        }\n+\n+        // If nothing found after trying for a while, return false\n+        if ((nNonce & 0xffff) == 0)\n+            break;\n+        if ((nNonce & 0xfff) == 0)\n+            boost::this_thread::interruption_point();\n+    }\n+\n+    uint32_t nHashesDone = nNonce - nOldNonce;\n+    nOldNonce = nNonce;\n+\n+    // Meter hashes/sec\n+    static int64_t nHashCounter;\n+    if (nHPSTimerStart == 0) {\n+        nHPSTimerStart = GetTimeMillis();\n+        nHashCounter = 0;\n+    }\n+    else\n+        nHashCounter += nHashesDone;\n+    if (GetTimeMillis() - nHPSTimerStart > 4000) {\n+        static CCriticalSection cs;\n+        {\n+            LOCK(cs);\n+            if (GetTimeMillis() - nHPSTimerStart > 4000) {\n+                dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n+                nHPSTimerStart = GetTimeMillis();\n+                nHashCounter = 0;\n+                static int64_t nLogTime;\n+                if (GetTime() - nLogTime > 30 * 60) {\n+                    nLogTime = GetTime();\n+                    LogPrintf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n+                }\n+            }\n+        }\n+    }\n+    return toReturn;\n+}"
      },
      {
        "sha": "dc8b4bf110e16a77ca64cf0f7052c2b75a9c4cb1",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1c3e450fc42159ce12d9f88950d889d06854cfa/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=a1c3e450fc42159ce12d9f88950d889d06854cfa",
        "patch": "@@ -28,6 +28,7 @@ class CProof\n     bool CheckChallenge(const CBlockIndex* pindexPrev) const;\n     bool CheckMinChallenge(const CProof& checkpoint) const; \n     void UpdateTime(const CBlockIndex* pindexPrev);\n+    bool GenerateSolution(CBlockHeader* pblock);\n     uint256 GetProofIncrement() const;\n     int64_t GetBlockTime() const;\n     bool IsNull() const;"
      }
    ]
  },
  {
    "sha": "597de362c5febeea5aeda62edfddd92eecf5461f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTdkZTM2MmM1ZmViZWVhNWFlZGE2MmVkZmRkZDkyZWVjZjU0NjFm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-29T13:57:45Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:06:43Z"
      },
      "message": "nNonce = 0 -> ResetSolution()",
      "tree": {
        "sha": "82435d7a0c50412f66584d938c81cd6e863bd16c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82435d7a0c50412f66584d938c81cd6e863bd16c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/597de362c5febeea5aeda62edfddd92eecf5461f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597de362c5febeea5aeda62edfddd92eecf5461f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/597de362c5febeea5aeda62edfddd92eecf5461f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597de362c5febeea5aeda62edfddd92eecf5461f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1c3e450fc42159ce12d9f88950d889d06854cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1c3e450fc42159ce12d9f88950d889d06854cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c3e450fc42159ce12d9f88950d889d06854cfa"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5023b2e179f2d6710ab243adab0371518445997d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597de362c5febeea5aeda62edfddd92eecf5461f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597de362c5febeea5aeda62edfddd92eecf5461f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=597de362c5febeea5aeda62edfddd92eecf5461f",
        "patch": "@@ -309,7 +309,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n         pblock->proof.UpdateTime(pindexPrev);\n         pblock->proof.ResetChallenge(pindexPrev);\n-        pblock->proof.nNonce = 0;\n+        pblock->proof.ResetSolution();\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CBlockIndex indexDummy(*pblock);\n@@ -429,7 +429,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            pblock->proof.nNonce = 0;\n+            pblock->proof.ResetSolution();\n             for (int i=0; i < 1000; i++) {\n                 // Check if something found\n                 if (pblock->proof.GenerateSolution(pblock))"
      },
      {
        "sha": "cd01e3232a84b521e34666dde6c0f30fbf0a83d3",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597de362c5febeea5aeda62edfddd92eecf5461f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597de362c5febeea5aeda62edfddd92eecf5461f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=597de362c5febeea5aeda62edfddd92eecf5461f",
        "patch": "@@ -180,6 +180,11 @@ bool CProof::CheckChallenge(const CBlockIndex* pindexPrev) const\n     return nBits == GetNextChallenge(pindexPrev);\n }\n \n+void CProof::ResetSolution()\n+{\n+    nNonce = 0;\n+}\n+\n uint256 CProof::GetProofIncrement() const\n {\n     uint256 bnTarget;"
      },
      {
        "sha": "5dbe761d4962a472a6e99c51d9c41bd04ee398ae",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597de362c5febeea5aeda62edfddd92eecf5461f/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597de362c5febeea5aeda62edfddd92eecf5461f/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=597de362c5febeea5aeda62edfddd92eecf5461f",
        "patch": "@@ -24,6 +24,7 @@ class CProof\n \n     CProof();\n     bool CheckSolution(const uint256 hash) const;\n+    void ResetSolution();\n     void ResetChallenge(const CBlockIndex* pindexPrev);\n     bool CheckChallenge(const CBlockIndex* pindexPrev) const;\n     bool CheckMinChallenge(const CProof& checkpoint) const; "
      },
      {
        "sha": "dd3d8681665af839c635ed6a4ec274f774d89870",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/597de362c5febeea5aeda62edfddd92eecf5461f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/597de362c5febeea5aeda62edfddd92eecf5461f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=597de362c5febeea5aeda62edfddd92eecf5461f",
        "patch": "@@ -458,7 +458,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n     // Update nTime\n     pblock->proof.UpdateTime(pindexPrev);\n-    pblock->proof.nNonce = 0;\n+    pblock->proof.ResetSolution();\n \n     Array transactions;\n     map<uint256, int64_t> setTxIndex;"
      }
    ]
  },
  {
    "sha": "d93c180cdf32141f857c1d61c2e85cae8406ec6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTNjMTgwY2RmMzIxNDFmODU3YzFkNjFjMmU4NWNhZTg0MDZlYzZm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-07-16T15:49:42Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-02T11:06:43Z"
      },
      "message": "Make Proof attributes private",
      "tree": {
        "sha": "93b761807e9bc8d1ab5a08c5d3dc2708a7281338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93b761807e9bc8d1ab5a08c5d3dc2708a7281338"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d93c180cdf32141f857c1d61c2e85cae8406ec6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93c180cdf32141f857c1d61c2e85cae8406ec6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d93c180cdf32141f857c1d61c2e85cae8406ec6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93c180cdf32141f857c1d61c2e85cae8406ec6f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "597de362c5febeea5aeda62edfddd92eecf5461f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/597de362c5febeea5aeda62edfddd92eecf5461f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/597de362c5febeea5aeda62edfddd92eecf5461f"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 81,
      "deletions": 29
    },
    "files": [
      {
        "sha": "88ac20c6407e0fb42b4abb37b9e730723c577328",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -267,12 +267,12 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n std::string CBlock::ToString() const\n {\n     std::stringstream s;\n-    s << strprintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n+    s << strprintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, proof=%u, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,\n         hashPrevBlock.ToString(),\n         hashMerkleRoot.ToString(),\n-        proof.nTime, proof.nBits, proof.nNonce,\n+        proof.ToString(),\n         vtx.size());\n     for (unsigned int i = 0; i < vtx.size(); i++)\n     {"
      },
      {
        "sha": "262520025d857e6f5448885816f68b34470921de",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 1,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -43,6 +43,27 @@ int64_t CProof::GetBlockTime() const\n     return (int64_t)nTime;\n }\n \n+void CProof::SetBlockTime(int64_t nTime)\n+{\n+    this->nTime = nTime;\n+}\n+\n+std::string CProof::ToString() const\n+{\n+    return strprintf(\"CProof(nTime=%u, nBits=%08x, nNonce=%u)\",\n+                     nTime, nBits, nNonce);\n+}\n+\n+std::string CProof::GetChallenge() const\n+{\n+    return strprintf(\"%08x\", nBits);\n+}\n+\n+std::string CProof::GetSolution() const\n+{\n+    return strprintf(\"%08x\", nNonce);\n+}\n+\n unsigned int CProof::GetNextChallenge(const CBlockIndex* pindexLast) const\n {\n     unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n@@ -59,7 +80,7 @@ unsigned int CProof::GetNextChallenge(const CBlockIndex* pindexLast) const\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (GetBlockTime() > pindexLast->GetBlockTime() + Params().TargetSpacing()*2)\n+            if (GetBlockTime() > pindexLast->proof.GetBlockTime() + Params().TargetSpacing()*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n@@ -274,3 +295,39 @@ bool CProof::GenerateSolution(CBlockHeader* pblock)\n     }\n     return toReturn;\n }\n+\n+unsigned int CProof::GetChallengeUint() const\n+{\n+    return nBits;\n+}\n+\n+std::string CProof::GetChallengeHex() const\n+{\n+    return uint256().SetCompact(nBits).GetHex();\n+}\n+\n+uint64_t CProof::GetSolutionInt64() const\n+{\n+    return (uint64_t)nNonce;\n+}\n+\n+double CProof::GetChallengeDouble() const\n+{\n+    double dDiff = (double)0x0000ffff / (double)(nBits & 0x00ffffff);\n+    int nShift = (nBits >> 24) & 0xff;\n+\n+    while (nShift < 29) {\n+        dDiff *= 256.0;\n+        nShift++;\n+    }\n+    while (nShift > 29) {\n+        dDiff /= 256.0;\n+        nShift--;\n+    }\n+    return dDiff;\n+}\n+\n+void CProof::SetSolutionUint(unsigned int solution)\n+{\n+    nNonce = solution;\n+}"
      },
      {
        "sha": "1e50b12efb6d7b9b1a24705a2329dc73b7e4ba8c",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -7,21 +7,23 @@\n #define BITCOIN_POW_H\n \n #include \"serialize.h\"\n+#include \"util.h\"\n \n #include <stdint.h>\n+#include <string>\n \n class CBlockIndex;\n class CBlockHeader;\n class uint256;\n \n class CProof\n {\n-    unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n-public:\n     uint32_t nTime;\n     uint32_t nBits;\n     uint32_t nNonce;\n \n+    unsigned int GetNextChallenge(const CBlockIndex* pindexLast) const;\n+public:\n     CProof();\n     bool CheckSolution(const uint256 hash) const;\n     void ResetSolution();\n@@ -32,8 +34,12 @@ class CProof\n     bool GenerateSolution(CBlockHeader* pblock);\n     uint256 GetProofIncrement() const;\n     int64_t GetBlockTime() const;\n+    void SetBlockTime(int64_t nTime);\n     bool IsNull() const;\n     void SetNull();\n+    std::string GetChallenge() const;\n+    std::string GetSolution() const;\n+    std::string ToString() const;\n \n     IMPLEMENT_SERIALIZE;\n \n@@ -45,6 +51,11 @@ class CProof\n     }\n \n     CProof(unsigned int nTime, unsigned int nBits, unsigned int nNonce);\n+    unsigned int GetChallengeUint() const;\n+    double GetChallengeDouble() const;\n+    std::string GetChallengeHex() const;\n+    uint64_t GetSolutionInt64() const;\n+    void SetSolutionUint(unsigned int solution);\n };\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "f1756e25c2e4bebb5ac56d3b616adc8a8bc69605",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -29,23 +29,7 @@ double GetDifficulty(const CBlockIndex* blockindex)\n         else\n             blockindex = chainActive.Tip();\n     }\n-    int nShift = (blockindex->proof.nBits >> 24) & 0xff;\n-\n-    double dDiff =\n-        (double)0x0000ffff / (double)(blockindex->proof.nBits & 0x00ffffff);\n-\n-    while (nShift < 29)\n-    {\n-        dDiff *= 256.0;\n-        nShift++;\n-    }\n-    while (nShift > 29)\n-    {\n-        dDiff /= 256.0;\n-        nShift--;\n-    }\n-\n-    return dDiff;\n+    return blockindex->proof.GetChallengeDouble();\n }\n \n \n@@ -67,8 +51,8 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n         txs.push_back(tx.GetHash().GetHex());\n     result.push_back(Pair(\"tx\", txs));\n     result.push_back(Pair(\"time\", block.proof.GetBlockTime()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.proof.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.proof.nBits)));\n+    result.push_back(Pair(\"nonce\", block.proof.GetSolutionInt64()));\n+    result.push_back(Pair(\"bits\", block.proof.GetChallenge()));\n     result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n "
      },
      {
        "sha": "452e86596f33172fd352bc5efc6350dfdaeb6c54",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -510,14 +510,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));\n     result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", uint256().SetCompact(pblock->proof.nBits).GetHex()));\n+    result.push_back(Pair(\"target\", pblock->proof.GetChallengeHex()));\n     result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SIZE));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->proof.nBits)));\n+    result.push_back(Pair(\"bits\", pblock->proof.GetChallenge()));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n \n     return result;"
      },
      {
        "sha": "5124f3667f4cae0f429fa7222e23bca5e19e3a90",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -56,7 +56,7 @@ BOOST_AUTO_TEST_CASE(May15)\n         CValidationState state;\n \n         // After May 15'th, big blocks are OK:\n-        forkingBlock.proof.nTime = tMay15; // Invalidates PoW\n+        forkingBlock.proof.SetBlockTime(tMay15); // Invalidates PoW\n         BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n     }\n "
      },
      {
        "sha": "f6d34b353d51eea8120b392c70ef4cec5db4b239",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93c180cdf32141f857c1d61c2e85cae8406ec6f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d93c180cdf32141f857c1d61c2e85cae8406ec6f",
        "patch": "@@ -67,7 +67,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n         pblock->nVersion = 1;\n-        pblock->proof.nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->proof.SetBlockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+        pblock->proof.SetSolutionUint(blockinfo[i].nonce);\n         CMutableTransaction txCoinbase(pblock->vtx[0]);\n         txCoinbase.vin[0].scriptSig = CScript();\n         txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n@@ -77,7 +78,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-        pblock->proof.nNonce = blockinfo[i].nonce;\n         CValidationState state;\n         BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n         BOOST_CHECK(state.IsValid());"
      }
    ]
  }
]