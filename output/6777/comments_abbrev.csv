dexX7,2015-10-08T00:28:11Z,"Tested, `""gettxoutsetinfo""` now works as expected.\n\nBased on a quick scan for `value()` it looks like the only other place where raw iterator data is used, is related to the block index DB: [src/txdb.cpp#L205](https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/txdb.cpp#L205) (which isn't obfuscated)\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146379252,146379252,
jamesob,2015-10-08T00:31:01Z,@dexX7 thanks for testing. I'm going to go ahead and apply the same treatment to the block index DB as well so that we won't have an issue if we decide to obfuscate it in the future.\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146379556,146379556,
sipa,2015-10-08T00:34:05Z,"jamesob: I think the obfuscation/deobfuscation should be done in\nLeveldbwrapper, not in the individual clients.\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146379883,146379883,
jamesob,2015-10-08T00:45:25Z,"Okay @sipa, I'm thinking I'll just subclass leveldb's Iterator for the purposes of `CLevelDBWrapper`, then return that type from `NewIterator`.\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146383381,146383381,
sipa,2015-10-08T00:54:59Z,jamesob: see the code in #2802 for that :)\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146385088,146385088,
jamesob,2015-10-08T01:02:36Z,@sipa ha! and like magic... wish writing code was always this easy ;). Will cherry-pick and layer on modifications if possible.\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146385962,146385962,
laanwj,2015-10-08T14:15:04Z,"Good catch @domob1812 , thanks for fix @jamesob @sipa \n\nI'm getting an issue starting bitcoind on my node w/ obfuscation, though:\n`assertion ""hashPrevBlock == view.GetBestBlock()"" failed: file ""main.cpp"", line 1694, function ""ConnectBlock""\nAbort trap (core dumped)`\n\nNot sure whether it's related to this, will investigate further. From debug.log:\n\n```\n2015-10-08 14:05:08 Using obfuscation ",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146558687,146558687,
laanwj,2015-10-08T14:42:11Z,"Found the issue. Indeed has nothing to do with this pull. On my node I was using a previous version of your patch, using a different `OBFUSCATE_KEY_KEY`. So no, the key was not lost, just misplaced. This shouldn't affect anyone starting with master.\n\n``` patch\n // Prefixed with null character to avoid collisions with other keys\n-const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY = ""\000obfus",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146566931,146566931,
laanwj,2015-10-08T14:48:56Z,Tested ACK. `gettxoutsetinfo` works again after this.\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146568849,146568849,
jamesob,2015-10-08T15:34:33Z,@laanwj good to hear. Thanks for testing.\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146580941,146580941,
jamesob,2015-10-08T16:16:08Z,"I've added some test coverage on the `CLevelDB` utilities. Provided travis is happy, I'm done adding changes.\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146598136,146598136,
jamesob,2015-10-09T17:33:16Z,@sipa any comments here?\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146940499,146940499,
sipa,2015-10-09T17:42:04Z,"Code ACK, I haven't reviewed the tests.\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-146942747,146942747,
jamesob,2015-10-10T21:38:55Z,Ping on this. I think it's ready for merge.\n,https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-147127589,147127589,
laanwj,2015-10-13T10:22:13Z,"@jamesob Yes going to merge this now, I've been sidetracked by the upnp vulnerabilty the last few days.\n",https://github.com/bitcoin/bitcoin/pull/6777#issuecomment-147674057,147674057,
dexX7,2015-10-09T11:12:52Z,Is this always deterministic?\n,https://github.com/bitcoin/bitcoin/pull/6777#discussion_r41619739,41619739,qa/rpc-tests/blockchain.py
dexX7,2015-10-09T11:26:47Z,"Just to clarify: unfortunally it's not (due to the potentially different time to create the blocks + random address generation).\n\nEven if it were, I'm not sure, if such a strong coupling is desired. You might setup the chain or a few blocks manually and use [util.set_node_times](https://github.com/bitcoin/bitcoin/blob/master/qa/rpc-tests/test_framework/util.py#L221) + pre-generated key-pairs, bu",https://github.com/bitcoin/bitcoin/pull/6777#discussion_r41620664,41620664,qa/rpc-tests/blockchain.py
