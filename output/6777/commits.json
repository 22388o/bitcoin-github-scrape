[
  {
    "sha": "3499ce1e1ad87a86598d00b7124072c91ddad833",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk5Y2UxZTFhZDg3YTg2NTk4ZDAwYjcxMjQwNzJjOTFkZGFkODMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-08T00:12:24Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T16:32:27Z"
      },
      "message": "Encapsulate CLevelDB iterators cleanly\n\nConflicts:\n\tsrc/leveldb.cpp\n\tsrc/leveldb.h\n\tsrc/txdb.cpp",
      "tree": {
        "sha": "a85dd4fc69ca25aad28bf5bead2097d9688abece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85dd4fc69ca25aad28bf5bead2097d9688abece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3499ce1e1ad87a86598d00b7124072c91ddad833",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fac576c619f450da8ca09ac8790063b3dea4364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fac576c619f450da8ca09ac8790063b3dea4364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fac576c619f450da8ca09ac8790063b3dea4364"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 89,
      "deletions": 44
    },
    "files": [
      {
        "sha": "a94cfd8a305a90e05015982176cea119b95c3b97",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -131,7 +131,7 @@ std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n \n bool CLevelDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n@@ -145,3 +145,10 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n+ \n+CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n+bool CLevelDBIterator::Valid() { return piter->Valid(); }\n+void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n+void CLevelDBIterator::Next() { piter->Next(); }\n+void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "ece4e4969409f69c1f5be94d2c083eb83bc534e3",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 61,
        "deletions": 4,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -68,7 +68,65 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n+ \n+class CLevelDBIterator\n+{\n+private:\n+    leveldb::Iterator *piter;\n+\n+public:\n+    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+    ~CLevelDBIterator();\n+\n+    bool Valid();\n \n+    void SeekToFirst();\n+    void SeekToLast();\n+\n+    template<typename K> void Seek(const K& key) {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey << key;\n+        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        piter->Seek(slKey);\n+    }\n+\n+    void Next();\n+    void Prev();\n+\n+    template<typename K> bool GetKey(K& key) {\n+        leveldb::Slice slKey = piter->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetKeySize() {\n+        return piter->key().size();\n+    }\n+\n+    template<typename V> bool GetValue(V& value) {\n+        leveldb::Slice slValue = piter->value();\n+        try {\n+            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue >> value;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() {\n+        return piter->value().size();\n+    }\n+\n+};\n+ \n class CLevelDBWrapper\n {\n private:\n@@ -191,11 +249,10 @@ class CLevelDBWrapper\n         return WriteBatch(batch, true);\n     }\n \n-    // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator* NewIterator()\n+    CLevelDBIterator *NewIterator() \n+    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n     {\n-        return pdb->NewIterator(iteroptions);\n-    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "3d20508912ea1dea8ed8b2ee6c7ca0444e0d2109",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 39,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -98,31 +98,19 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->SeekToFirst();\n+    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_COINS) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CCoins coins;\n-                ssValue >> coins;\n-                uint256 txhash;\n-                ssKey >> txhash;\n-                ss << txhash;\n-                ss << VARINT(coins.nVersion);\n-                ss << (coins.fCoinBase ? 'c' : 'n');\n-                ss << VARINT(coins.nHeight);\n+        std::pair<char, uint256> key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && key.first == 'c') {\n+            if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n                     const CTxOut &out = coins.vout[i];\n@@ -133,13 +121,15 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + slValue.size();\n+                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n                 ss << VARINT(0);\n+            } else {\n+                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n             }\n-            pcursor->Next();\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n+        pcursor->Next();\n     }\n     {\n         LOCK(cs_main);\n@@ -189,24 +179,15 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n-    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n-    pcursor->Seek(ssKeySet.str());\n+    pcursor->Seek(make_pair('b', uint256(0)));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_BLOCK_INDEX) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CDiskBlockIndex diskindex;\n-                ssValue >> diskindex;\n-\n+        std::pair<char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == 'b') {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n                 CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n@@ -227,10 +208,10 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n                 pcursor->Next();\n             } else {\n-                break; // if shutdown requested or finished loading block index\n+                return error(\"LoadBlockIndex() : failed to read value\");\n             }\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmRmOGM4MGVlMzIyYWI3NDczMjFkNjFmYWY5YzcyYWY0YTUxNDQ1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T07:44:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T16:32:27Z"
      },
      "message": "Handle obfuscation in CLevelDBIterator",
      "tree": {
        "sha": "b9e94a6249b05fa597d9f3926316215c74710c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9e94a6249b05fa597d9f3926316215c74710c60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3499ce1e1ad87a86598d00b7124072c91ddad833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3499ce1e1ad87a86598d00b7124072c91ddad833"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "32c9345be5c5e10c92c5183a91ef403a60877d19",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -145,7 +145,7 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n- \n+\n CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n bool CLevelDBIterator::Valid() { return piter->Valid(); }\n void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }"
      },
      {
        "sha": "891381c5f2f0d96491ee11f07a6b520a28da4264",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -73,9 +73,16 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n-    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+\n+    /**\n+     * @param[in] piterIn          The original leveldb iterator.\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+        piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n     bool Valid();\n@@ -113,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -251,8 +258,8 @@ class CLevelDBWrapper\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n-    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "4d7ec27aaec5454590ab453c210f9d5ca6de96ac",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -98,7 +98,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -177,9 +177,9 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair('b', uint256(0)));\n+    pcursor->Seek(make_pair('b', uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      }
    ]
  },
  {
    "sha": "14885068726a8e0dc73ffa127225ab80be3e3612",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDg4NTA2ODcyNmE4ZTBkYzczZmZhMTI3MjI1YWI4MGJlM2UzNjEy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T08:22:50Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:56:39Z"
      },
      "message": "Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator\n\nThanks @dexX7.",
      "tree": {
        "sha": "53d5098ed266593cc08c3d72bc6000062c519a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53d5098ed266593cc08c3d72bc6000062c519a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14885068726a8e0dc73ffa127225ab80be3e3612",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf8c80ee322ab747321d61faf9c72af4a51445"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 140,
      "deletions": 8
    },
    "files": [
      {
        "sha": "db97767272b406374792299467f5136c3edf0e4a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -38,7 +38,7 @@\n buildDir = BUILDDIR\n os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n- \n+\n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n     print \"Win tests currently disabled.  Use -win option to enable\"\n@@ -67,6 +67,7 @@\n     'reindex.py',\n     'decodescript.py',\n     'p2p-fullblocktest.py',\n+    'blockchain.py',\n ]\n testScriptsExt = [\n     'bipdersig-p2p.py',\n@@ -98,20 +99,20 @@\n     rpcTestDir = buildDir + '/qa/rpc-tests/'\n     #Run Tests\n     for i in range(len(testScripts)):\n-       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts \n+       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n            or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-            print  \"Running testscript \" + testScripts[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running testscript \" + testScripts[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n \t    #exit if help is called so we print just one set of instructions\n             p = re.compile(\" -h| --help\")\n             if p.match(passOn):\n                 sys.exit(0)\n \n     #Run Extended Tests\n     for i in range(len(testScriptsExt)):\n-        if ('-extended' in opts or testScriptsExt[i] in opts \n+        if ('-extended' in opts or testScriptsExt[i] in opts\n            or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n else:\n     print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "a5c98b777e0d42f900253dd68c614037f592b8c4",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test RPC calls related to blockchain state.\n+#\n+\n+import decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    initialize_chain,\n+    assert_equal,\n+    start_nodes,\n+    connect_nodes_bi,\n+)\n+\n+class BlockchainTest(BitcoinTestFramework):\n+    \"\"\"\n+    Test blockchain-related RPC calls:\n+\n+        - gettxoutsetinfo\n+\n+    \"\"\"\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \" + self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        res = node.gettxoutsetinfo()\n+\n+        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n+        assert_equal(res[u'transactions'], 200)\n+        assert_equal(res[u'height'], 200)\n+        assert_equal(res[u'txouts'], 200)\n+        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(len(res[u'bestblock']), 64)\n+        assert_equal(len(res[u'hash_serialized']), 64)\n+\n+\n+if __name__ == '__main__':\n+    BlockchainTest().main()"
      },
      {
        "sha": "36975548c2119bc662203660c2180ec083968ebb",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 1,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -46,7 +46,86 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n         BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n     }\n }\n-                       \n+\n+// Test batch operations\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        char key = 'i';\n+        uint256 in = GetRandHash();\n+        char key2 = 'j';\n+        uint256 in2 = GetRandHash();\n+        char key3 = 'k';\n+        uint256 in3 = GetRandHash();\n+\n+        uint256 res;\n+        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+\n+        batch.Write(key, in);\n+        batch.Write(key2, in2);\n+        batch.Write(key3, in3);\n+\n+        // Remove key3 before it's even been written\n+        batch.Erase(key3);\n+\n+        dbw.WriteBatch(batch);\n+\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+        BOOST_CHECK(dbw.Read(key2, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n+\n+        // key3 never should've been written\n+        BOOST_CHECK(dbw.Read(key3, res) == false);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        // The two keys are intentionally chosen for ordering\n+        char key = 'j';\n+        uint256 in = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key, in));\n+        char key2 = 'k';\n+        uint256 in2 = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key2, in2));\n+\n+        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+\n+        // Be sure to seek past the obfuscation key (if it exists)\n+        it->Seek(key);\n+\n+        char key_res;\n+        uint256 val_res;\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in.ToString());\n+\n+        it->Next();\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key2);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in2.ToString());\n+\n+        it->Next();\n+        BOOST_CHECK_EQUAL(it->Valid(), false);\n+    }\n+}\n+\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {"
      }
    ]
  },
  {
    "sha": "dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2Q4ZTI3YzY1ZGUwZDJjYjk3MjU4OGE2ZTgxMWNhN2NjZDFiM2Jk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:55:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:56:48Z"
      },
      "message": "Refer to obfuscate_key via pointer in peripheral CLevelDB classes\n\ncc @sipa",
      "tree": {
        "sha": "d53c4b73ad23c520732eb2f79e1a8d9652d5d272",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53c4b73ad23c520732eb2f79e1a8d9652d5d272"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14885068726a8e0dc73ffa127225ab80be3e3612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14885068726a8e0dc73ffa127225ab80be3e3612"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "60101e18cc03e67aba6a4058fea0c8533c713902",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -32,13 +32,13 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(obfuscate_key);\n+        ssValue.Xor(*obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -73,15 +73,15 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n@@ -120,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(obfuscate_key);\n+            ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -210,7 +210,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -237,7 +237,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -252,13 +252,13 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "606313b00453ff7e3b7c6e5f2f01d4fe366dcff6",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);"
      },
      {
        "sha": "5723c92440196a43447975e8537605428c4be7ca",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(db.GetObfuscateKey());\n+    CLevelDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -157,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  }
]