sipa,2020-09-14 05:15:52,"Here is a categorized list of all the commits:\n\n### Refactors (https://github.com/sipa/bitcoin/compare/f8c099e220...450d2b2371) [+50 -39]:\n * 107b57df9f **scripted-diff: put ECDSA in name of signature functions**: In preparation for adding Schnorr versions of `CheckSig`, `VerifySignature`, and `ComputeEntry`, give them an ECDSA specific name. \n * 8bd2b4e784 **refactor: rename scriptPubKey ",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-691815830,691815830,
sipa,2020-09-14 08:34:39,"@jnewbery There are only two of them. The variable name one is very small, and the ECDSA naming one isn't really a standalone useful change. I think that one could be changed into a scripted-diff though.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-691907545,691907545,
instagibbs,2020-09-14 14:14:04,"concept ACK, just confirming for now this PR is identical to the old PR #17977 at https://github.com/bitcoin/bitcoin/pull/19953/commits/111be541b5076e87bf800bc4769685d9b2340aed",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692080594,692080594,
sipa,2020-09-14 18:42:30,"Reordered commits a bit, replaced the ECDSA naming one with a scripted diff, and organized the commits in sections. The end state is identical to what it was before.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692240577,692240577,
benthecarman,2020-09-14 20:37:13,Could the first 2 commits be done as separate PRs? That should slightly reduce the size of this one,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692300062,692300062,
sipa,2020-09-14 20:39:21,@benthecarman That was suggested earlier by @jnewbery. I think splitting off 28 trivial lines of refactors from a 2500-line PR (though 1700 are tests) isn't going to change much. The refactors that were nontrivial and useful as standalone improvements have been split off already and merged (see history of the previous PR).,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692301083,692301083,
sipa,2020-09-16 04:08:07,"I added a unit test too now, with test vectors that were extracted from 20000 runs of the feature_taproot.py test (with the largest tests removed, and larger groups of inputs per transaction), minimized using libfuzzer's coverage tracking to 105.\n\nThe code for doing so is in https://github.com/sipa/bitcoin/commits/taproot-test-creation. I'll clean that code up a bit and integrate some parts of",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693157316,693157316,
jnewbery,2020-09-16 08:52:07,"I was surprised to learn that this was a 2500-line PR. By directory:\n\n- `/test/functional` - 1790 lines\n- `/src/test` - 134 lines\n- `/src` (exc `test`) - 817 lines\n\nSo the majority of code in this PR is tests (which is a good thing!)\n\nI agree with sipa that it's not necessary to split off the first two commits (especially now that they're separated to the top of the branch). Equall",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693269062,693269062,
instagibbs,2020-09-16 11:35:39,No code changes aside from unit test commit https://github.com/bitcoin/bitcoin/pull/19953/commits/9673fd9999a7fef4bfc5b074fa1861938042df10,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693347931,693347931,
DrahtBot,2020-09-19 13:34:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20121 (configure: Allow users to explicitly enable libsecp256k1's GMP bignum support by luke-jr)\n* #20100 (Script: split",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-695214236,695214236,
jaybny,2020-09-22 11:02:40,"#### My expectation was to do a code review for taproot, but unfortunately, I cannot ACK the concept or the approach of this PR at this time. \n\nAfter initial research and deep dive, I ask the following:  \n1. Will a majority of bitcoin users benefit from this PR?  \n_for consensus changes this answer should be a 'YES'_\n2. Does this PR create new security concerns or attack vectors for the ",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-696650924,696650924,
sipa,2020-09-22 12:42:24,"@jaybny All of those questions are about the BIPs themselves, and not about the code changes to implement them, and thus out of scope here. I suggest you discuss them on the bitcoin-dev mailing list, https://bitcoin.stackexchange.com, or other media.\n\nI'll give my answers for your list of short questions, but if you have follow up discussion, please take it elsewhere. It would be distracting to ",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-696695513,696695513,
sipa,2020-09-22 22:21:11,"I addressed comments by @benthecarman and @ysangkok. See ""Updates 2020-09-22"" in the new PR #19997 for the changes that were applied.\n\nI also moved the ""keep spent outputs in PrecomputedTransactionData"" to the refactors section, as it contains no semantics changes, and didn't depend on any earlier commits.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697013149,697013149,
instagibbs,2020-09-23 14:10:01,"reviewed updates to https://github.com/bitcoin/bitcoin/pull/19953/commits/fe5cf2ed6adbf2271553f97c61de4d59bee20c05\n\n`IsOpSuccess` was compared against the BIP directly rather than previous iteration, which I had hand-calculated painstakingly. It matches the BIP.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697415762,697415762,
sipa,2020-09-23 21:25:38,"I addressed comments by @instagibbs, and made the unit test vectors test more and generic and made it qa-assets based (see corresponding PR https://github.com/bitcoin-core/qa-assets/pull/27). Changes are in two new sections in #19997.\n\nI'm still working on polishing up the tooling used to create script_assets_test.json. At this point they don't test anything that (many iterations of) feature_t",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697981325,697981325,
instagibbs,2020-09-24 13:43:18,"re-ACK https://github.com/bitcoin/bitcoin/pull/19953/commits/528ed883558b0bdac97fa64ada560906c322d021\n\n",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-698352605,698352605,
sipa,2020-09-25 03:45:58,"I addressed comments by @promag, added a functional test to verify CLEANSTACK is consensus-enforced in tapscript, and gave tapscript's MINIMALIF a separate error code (effectively addressing #20009 to the extent it affects this PR).",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-698703640,698703640,
instagibbs,2020-09-25 12:11:40,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/80efcba5e7ad84f68f5cd59c05fc87134fc9fb69,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-698893603,698893603,
sipa,2020-10-02 08:23:04,"A few updates (see https://github.com/bitcoin/bitcoin/pull/19997 for detailed history):\n* Fixed/clarified a few code comments addressing anonymous review\n* A few generic improvements to the functional test (include ECDSA tests with uncompressed pubkeys, cache witnesses)\n* Added support to the functional test to dump its generated tests in json format compatible with the unit test, and a fuzz",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-702595992,702595992,
benthecarman,2020-10-02 12:09:27,reACK `c849dae`,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-702698495,702698495,
instagibbs,2020-10-02 14:16:47,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/c849dae8ce05ef5c92df6ec1bb77b9ea2e38240a,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-702759759,702759759,
gruve-p,2020-10-02 14:25:41,Ack https://github.com/bitcoin/bitcoin/pull/19953/commits/c849dae8ce05ef5c92df6ec1bb77b9ea2e38240a,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-702764639,702764639,
sipa,2020-10-06 22:04:35,Addressed comments by @decryp2kanon and @promag. See detailed history in #19997.,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-704577840,704577840,
instagibbs,2020-10-07 01:52:01,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/7dfb7239773e7974bdb61f648bf8351a808a63a5,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-704645268,704645268,
benthecarman,2020-10-07 04:35:20,reACK 7dfb723,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-704685630,704685630,
sipa,2020-10-07 19:36:47,I addressed comments by @jonatack. See detailed history in #19997.,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-705150707,705150707,
benthecarman,2020-10-08 07:47:22,reACK 07dd29e ,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-705394994,705394994,
instagibbs,2020-10-08 11:21:28,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/07dd29e1b50b8fcba91c36386ed5267a2e60c240,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-705504394,705504394,
sipa,2020-10-09 01:38:59,"I made a few more changes related to signature checking:\n\n* The `key_version` (currently always 0) is no longer passed as an argument into `SignatureHashSchnorr`, because if a new one was introduced, it would need a new SigVersion as well. So instead use the latter to derive the `key_version`. @ariard This partially reverts an earlier comment you had, but I think the comments make it clearer s",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-705917051,705917051,
benthecarman,2020-10-09 08:47:51,reACK 4a7e017,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-706055597,706055597,
instagibbs,2020-10-09 12:32:29,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/4a7e0171c0eec437c5de2b0eb316c5088e5b07b0,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-706153809,706153809,
gruve-p,2020-10-09 12:38:07,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/4a7e0171c0eec437c5de2b0eb316c5088e5b07b0,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-706156185,706156185,
sipa,2020-10-12 09:21:47,Addressed comments by @fjahr and @kallewoof above. Details are in #19997.,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-706997520,706997520,
kallewoof,2020-10-12 09:30:34,"Re-ACK sans the fuccess typo.\n\n<details><summary>Local diff between 4a7e0171c0eec437c5de2b0eb316c5088e5b07b0 and cc036c251c16eda1cdc558db2049e8db0f3a50b7 (but don't take my word for it)</summary>\n<p>\n\n```diff\ndiff --git a/src/pubkey.cpp b/src/pubkey.cpp\nindex 689328765..4d734fc89 100644\n--- a/src/pubkey.cpp\n+++ b/src/pubkey.cpp\n@@ -173,7 +173,8 @@ XOnlyPubKey::XOnlyPubKey(Span<",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707002605,707002605,
benthecarman,2020-10-12 14:36:21,reACK cc036c2,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707159658,707159658,
fjahr,2020-10-13 00:17:28,"Code review ACK cc036c251c16eda1cdc558db2049e8db0f3a50b7\n\nHope I can get enough testing in soon to get to a full ACK.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707410196,707410196,
sipa,2020-10-13 00:25:22,"I addressed comments by @jnewbery, @instagibbs, and @achow101 above. The changes to the final tree are listed in #19997.",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707412343,707412343,
instagibbs,2020-10-13 01:07:44,reACK https://github.com/bitcoin/bitcoin/pull/19953/commits/0e2a5e448f426219a6464b9aaadcc715534114e6,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707423354,707423354,
benthecarman,2020-10-13 01:26:53,reACK 0e2a5e4,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707428439,707428439,
kallewoof,2020-10-13 02:14:57,reACK 0e2a5e448f426219a6464b9aaadcc715534114e6,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707441509,707441509,
jonasnick,2020-10-13 07:06:56,ACK 0e2a5e448f426219a6464b9aaadcc715534114e6 almost only looked at bip340/libsecp related code,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707538417,707538417,
jonatack,2020-10-13 16:35:44,"ACK 0e2a5e448f426219a6464b9aaadcc715534114e6 modulo the last four commits (tests) that I plan to finish reviewing tomorrow\n",https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-707864888,707864888,
fjahr,2020-10-13 22:28:06,reACK 0e2a5e448f426219a6464b9aaadcc715534114e6,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-708043623,708043623,
hebasto,2020-10-18 18:03:20,This regression introduced in 4567ba034c5ae6e6cc161360f7425c9e844738f0 is fixed in #20180.,https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-711341984,711341984,
jnewbery,2020-09-14 07:44:52,Does it make sense to remove the requirement for the `-enable-experimental` flag to build the schnorrsig module?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487713900,487713900,configure.ac
fanquake,2020-09-14 07:50:45,"This was [discussed in the previous PR](https://github.com/bitcoin/bitcoin/pull/17977/files#r475990462).\n\nluke-jr\n> Should this be non-experimental before merging?\n\ngmaxwell\n> I don't think so: It probably shouldn't be marked non-experimental until after it deployed for activation in Bitcoin because it wouldn't be good to encourage third party users of it while it is still easy to make",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487717197,487717197,configure.ac
flack,2020-09-14 12:42:00,"maybe move that block down into the one below, then you don't have to check `stack.size() >= 2` twice",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487880593,487880593,src/policy/policy.cpp
sipa,2020-09-14 16:30:54,"I would rather not, because if later changes do add supported annexes, it'll need to revert to this flow anyway (where the branch dealing with annexes pops it from the stack, and the next if looks at the stack size after removing it).",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r488066922,488066922,src/policy/policy.cpp
benthecarman,2020-09-19 22:57:31,`VerifySchnorr` has `assert(sigbytes.size() == 64);` so false won't be returned. Should either change this comment or change the assertion to `if (sigbytes.size() != 64) return false;`,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491588125,491588125,src/pubkey.h
benthecarman,2020-09-20 01:08:55,nit: would be easier for people to check if this was correct if they were ordered the same as the BIP,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638161,491638161,src/script/script.cpp
benthecarman,2020-09-20 01:10:59,"nit: when referring to other op codes in the error messages they are normally prefixed with `OP_`, to be consistent this could be changed to `OP_SUCCESSx reserved for...`",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638297,491638297,src/script/script_error.cpp
ysangkok,2020-09-22 18:19:07,inconsistent capitalization and hyphenation,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492941551,492941551,test/functional/test_framework/key.py
ysangkok,2020-09-22 18:21:15,"unclear whether it will be negated again if it is already negated, or if it will be negated if it is not already negated",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492942832,492942832,test/functional/test_framework/key.py
ysangkok,2020-09-22 18:23:22,simpler to just use `bytes(32)`. python wouldn't let you have uninitialized memory.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944176,492944176,test/functional/test_framework/key.py
ysangkok,2020-09-22 18:23:55,why call magic methods directly when you can use `next(reader)`? arguably more readable.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944523,492944523,test/functional/test_framework/key.py
ysangkok,2020-09-22 18:29:46,parens unnecessary,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948353,492948353,test/functional/test_framework/key.py
ysangkok,2020-09-22 18:30:25,parens unnecessary,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948800,492948800,test/functional/test_framework/key.py
sipa,2020-09-22 22:15:28,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064062,493064062,src/pubkey.h
sipa,2020-09-22 22:16:30,"Done. I intentionally didn't change the implementation in test_framework, as this provides weak additional evidence that the semantics didn't change compared to the older code.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064438,493064438,src/script/script.cpp
sipa,2020-09-22 22:16:38,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064475,493064475,src/script/script_error.cpp
sipa,2020-09-22 22:16:51,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064570,493064570,test/functional/test_framework/key.py
sipa,2020-09-22 22:17:20,"Changed the interface to not take a negated argument, but infer it from the key. This should be cleaner and simpler.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064790,493064790,test/functional/test_framework/key.py
sipa,2020-09-22 22:17:28,TIL. Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064821,493064821,test/functional/test_framework/key.py
sipa,2020-09-22 22:17:51,"This was copied from the BIP340 reference code. You may want to update it there too.\n\nDone.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064966,493064966,test/functional/test_framework/key.py
sipa,2020-09-22 22:18:01,"Done, in many places.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065018,493065018,test/functional/test_framework/key.py
sipa,2020-09-22 22:18:09,Done in many places.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065062,493065062,test/functional/test_framework/key.py
instagibbs,2020-09-23 18:55:22,pico-nit: This is only one output. This probably belongs https://github.com/bitcoin/bitcoin/pull/19953/commits/34da2198264cf90a7ae7f50a912a599f6fd66291#diff-be2905e2f5218ecdbe4e55637dac75f3R1415,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493822427,493822427,src/script/interpreter.cpp
instagibbs,2020-09-23 19:11:39,pico-nit: why not just `assert(sigversion != SigVersion:: TAPROOT)`?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493833809,493833809,src/script/interpreter.cpp
instagibbs,2020-09-23 19:19:47,"```suggestion\n    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, 0x00 /* key_version */, this->txdata)) return false;\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493838107,493838107,src/script/interpreter.cpp
instagibbs,2020-09-23 20:09:15,Why no `MINIMALIF`?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493865077,493865077,src/test/script_tests.cpp
benthecarman,2020-09-23 20:17:27,"If a new sig version is added in the future, we probably want it to fail here.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493869440,493869440,src/script/interpreter.cpp
instagibbs,2020-09-23 20:19:51,"eh ok, guess crashing would be best in this case",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493870676,493870676,src/script/interpreter.cpp
instagibbs,2020-09-23 20:20:43,"... because it's not used for consensus, along with CLEANSTACK et al. Right.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871166,493871166,src/test/script_tests.cpp
sipa,2020-09-23 20:21:15,"Yeah, I'm intentionally only using equality checks with sigversion (all over interpreter.cpp), so that there are no surprises when a new one is added.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871451,493871451,src/script/interpreter.cpp
promag,2020-09-23 20:47:12,"34da2198264cf90a7ae7f50a912a599f6fd66291\n\nNo need to be exhaustive?\n```cpp\nuses_bip341_taproot = true;\nif (uses_bip143_segwit) break;\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493885215,493885215,src/script/interpreter.cpp
promag,2020-09-23 20:53:38,"34da2198264cf90a7ae7f50a912a599f6fd66291\n\nThen change to `const PrecomputedTransactionData& cache` instead?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493888647,493888647,src/script/interpreter.cpp
sipa,2020-09-23 21:18:39,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901353,493901353,src/script/interpreter.cpp
sipa,2020-09-23 21:18:46,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901411,493901411,src/script/interpreter.cpp
sipa,2020-09-23 21:18:59,Added a comment in script/interpreter.h.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901512,493901512,src/test/script_tests.cpp
sipa,2020-09-23 21:30:34,"No, one input can be segwit and another can be taproot.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493906842,493906842,src/script/interpreter.cpp
benthecarman,2020-09-23 21:41:19,"This should just be an optimization, ie if there are 100 inputs and the first is segwit v0 and the second is segwit v1, with @promag's suggestion it would then stop checking with both `uses_bip341_taproot` and `uses_bip143_segwit` set correctly, vs with the current implementation it would continue and check the remaining 98 inputs.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493911557,493911557,src/script/interpreter.cpp
sipa,2020-09-23 21:44:56,"Oh, I misread. Indeed, that's a potentially useful and simple optimization. I'll implement it when I make further changes.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493913215,493913215,src/script/interpreter.cpp
sipa,2020-09-25 03:43:44,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730343,494730343,src/script/interpreter.cpp
sipa,2020-09-25 03:43:56,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730380,494730380,src/script/interpreter.cpp
ysangkok,2020-09-28 18:37:15,"This line is very compact.\n\nLooks like those numeric literals are based on SIGHASH_INPUT_MASK. If they are, could they not be constructed from it? It is weird to have logic based partly on the enum, and partly on hard coded numeric literals.\n\nI think this could be split up into two if's, each returning false. Then, each of those branches could be explaining the situation and the reason for",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r496155450,496155450,src/script/interpreter.cpp
sipa,2020-09-28 18:44:59,"That would be incorrect.\n\nde-morganing it gives you `!(hash_type <= 0x03) && !(hash_type >= 0x81 && hash_type <= 0x83)`, which is a conjunction at the top level. Splitting that up into two separate `if`s would make it a disjunction.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r496159580,496159580,src/script/interpreter.cpp
decryp2kanon,2020-10-02 09:20:16,"just curious, why January 1, 2008?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r498710487,498710487,src/chainparams.cpp
instagibbs,2020-10-02 14:16:27,Copying `DEPLOYMENT_TESTDUMMY` I suspect,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r498849526,498849526,src/chainparams.cpp
sipa,2020-10-02 16:21:31,"Indeed, just whatever time sufficiently in the past.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r498921722,498921722,src/chainparams.cpp
decryp2kanon,2020-10-03 09:39:29,nit: a new line?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r499133023,499133023,src/test/script_tests.cpp
decryp2kanon,2020-10-03 09:43:16,nit: new line?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r499133297,499133297,test/functional/test_framework/key.py
promag,2020-10-05 20:12:35,"6577f465f3dad2460b2bee02ca662c7ebbe72e4c\nnit, avoids copying `ScriptExecutionData` and error is still the last one.\n```cpp\nbool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* error = nullptr);\nbool EvalScript(std::vector<std::",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r499844996,499844996,src/script/interpreter.h
sipa,2020-10-05 20:53:07,"That won't work, `EvalScript` needs a mutable `ScriptExecutionData` object.\n\nIt would be slightly cleaner to split the execdata into a fixed-at-VerifyScript-time part and a changed-during-execution part, but that'd be a even more annoying interface change.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r499865869,499865869,src/script/interpreter.h
jonatack,2020-10-06 19:43:52,"1ef50ed µ-nit\n```suggestion\n            const COutPoint& prevout = txin.prevout;\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500552248,500552248,src/validation.cpp
jonatack,2020-10-06 19:48:03,"1ef50ed perhaps, per https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500578940\n```suggestion\nvoid PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent_outputs)\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500554420,500554420,src/script/interpreter.cpp
jonatack,2020-10-06 20:19:25,"31c322a perhaps use constexpr\n```suggestion\nstatic constexpr unsigned int ANNEX_TAG = 0x50;\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500571274,500571274,src/script/script.h
jonatack,2020-10-06 20:29:29,"In commits 31c322a (`in_pos, hash_type, sigversion`) and 332dc13bdc (`key_version`) perhaps remove constness for by-value arguments, e.g. per discussion at https://github.com/bitcoin/bitcoin/pull/19845#discussion_r489776345\n```suggestion\nbool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata, const T& tx_to, uint32_t in_pos, uint8_t hash_type, SigVersion sigversion, u",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500576577,500576577,src/script/interpreter.cpp
jonatack,2020-10-06 20:33:33,"1ef50ed perhaps, per https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500578940\n```diff\n-template void PrecomputedTransactionData::Init(const CTransaction& txTo, std::vector<CTxOut> spent_outputs);\n-template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo, std::vector<CTxOut> spent_outputs);\n+template void PrecomputedTransactionData::Init(const CTransaction& ",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500578719,500578719,src/script/interpreter.cpp
jonatack,2020-10-06 20:34:03,"1ef50ed perhaps, as the caller is `txdata.Init(tx, std::move(spent_outputs));`, if we want to force callers to move it\n\n```suggestion\n    void Init(const T& tx, std::vector<CTxOut>&& spent_outputs);\n```\n",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500578940,500578940,src/script/interpreter.h
sipa,2020-10-06 20:52:59,"Actually, it's possible to avoid the copy still by just making it mutable, and using your idea of a wrapper to provide a default:\n\nhttps://github.com/sipa/bitcoin/commit/09b24d503a7b9baace0be3f51e53f2a095cf160b\n\n```patch\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex 9d25ec156a..f4cf24fee5 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpre",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500588835,500588835,src/script/interpreter.h
sipa,2020-10-06 21:59:29,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500620335,500620335,src/test/script_tests.cpp
sipa,2020-10-06 21:59:36,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500620389,500620389,test/functional/test_framework/key.py
sipa,2020-10-06 22:02:40,"I've incorporated this patch, as I think it conceptually makes sense: `ScriptExecutionData`'s contents has a linear history, so there is no need to pass it as `const`.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500621654,500621654,src/script/interpreter.h
jonatack,2020-10-07 09:52:26,"c018355 perhaps use the same param name in the definition `XOnlyPubKey::XOnlyPubKey(Span<const unsigned char> in)` as in the declaration\n",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500883991,500883991,src/pubkey.h
jonatack,2020-10-07 09:57:40,c018355 perhaps use `constexpr` for these two declarations,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500887241,500887241,src/script/sigcache.cpp
jonatack,2020-10-07 10:19:58,"3c2d549 constness not present in the declaration on by-value argument\n```suggestion\nbool XOnlyPubKey::CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, bool parity) const\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r500900420,500900420,src/pubkey.cpp
jonatack,2020-10-07 14:44:02,"332dc13b perhaps use same doc style as other members of this struct, and also per `doc/developer-notes.md` ""To describe a member or variable""\n```diff\n-    /** Whether m_validation_weight_left is initialized. */\n+    //! Whether m_validation_weight_left is initialized.\n     bool m_validation_weight_left_init = false;\n-    /** How much validation weight is left (decremented for every succe",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501071063,501071063,src/script/interpreter.h
jonatack,2020-10-07 15:38:35,"332dc13bd 4 instances of `sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0` in `EvalScript()`, could (very optionally) factor out to a const bool localvar",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501113435,501113435,src/script/interpreter.cpp
jonatack,2020-10-07 15:57:10,"332dc13b currently low-risk here, but perhaps avoid future possibility of use before set\n```suggestion\n    uint8_t ext_flag{0};\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501127015,501127015,src/script/interpreter.cpp
jonatack,2020-10-07 16:33:01,"332dc13bdc perhaps add this additional code documentation from BIP342 to clarify the intention of the code\n```diff\n                         // Tapscript requires minimal IF/NOTIF inputs as a consensus rule.\n                         if (sigversion == SigVersion::TAPSCRIPT) {\n+                            // The input argument to the OP_IF and OP_NOTIF opcodes must be either\n+              ",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501152092,501152092,src/script/interpreter.cpp
jonatack,2020-10-07 16:44:00,"332dc13bdc perhaps add this additional info from BIP 342\n```diff\n-        assert(key_version == 0); // key_version must be 0 for now\n+        // key_version must be 0 for now, representing the current version of\n+        // public keys in the tapscript signature opcode execution.\n+        assert(key_version == 0);\n\n```\n",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501159080,501159080,src/script/interpreter.cpp
jonatack,2020-10-07 17:26:53,"332dc13b maybe simplify\n```diff\n     return opcode == 80 || opcode == 98 || (opcode >= 126 && opcode <= 129) ||\n-           (opcode >= 131 && opcode <= 134) || (opcode >= 137 && opcode <= 138) ||\n-           (opcode >= 141 && opcode <= 142) || (opcode >= 149 && opcode <= 153) ||\n+           (opcode >= 131 && opcode <= 134) || opcode == 137 || opcode == 138 ||\n+           opcode == 141 ",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501185979,501185979,src/script/script.cpp
instagibbs,2020-10-07 18:15:58,"IIRC the text as-is completely ""matches"" the BIP text, meaning if it gives a range here, it gives a range in the BIP text. I think as-is is easier to pattern match.\n\n> 80, 98, 126-129, 131-134, 137-138, 141-142, 149-153, 187-254",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501215517,501215517,src/script/script.cpp
jonatack,2020-10-07 18:23:22,"True, though the BIP prose here is inconsistent (see the first 2 elements) and could be updated. The code could opt for the simpler version. Not a biggie though--I hesitated to comment on it.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501221893,501221893,src/script/script.cpp
sipa,2020-10-07 19:00:50,I'd rather be explicit in every calling site about which sigversions are affected.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501242957,501242957,src/script/interpreter.cpp
sipa,2020-10-07 19:03:08,"I believe that not initializing a variable is better than initializing it incorrectly. The former lets you use tooling (ubsan, valgrind) to detect invalid usage, instead of creating a potentially very hard to discover bug (I don't think it matters much here, as it's a very simple case, but as a matter of principle I dislike initialization of variables just to avoid a risk of them being uninitializ",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501244312,501244312,src/script/interpreter.cpp
sipa,2020-10-07 19:30:22,"I prefer to keep it exactly as in the BIP for now, but no reason the BIP can't be updated to be more clear.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501258827,501258827,src/script/script.cpp
sipa,2020-10-07 19:34:14,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501260989,501260989,src/validation.cpp
sipa,2020-10-07 19:34:21,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261053,501261053,src/script/interpreter.cpp
sipa,2020-10-07 19:34:27,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261091,501261091,src/script/script.h
sipa,2020-10-07 19:34:36,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261184,501261184,src/script/interpreter.cpp
sipa,2020-10-07 19:34:43,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261274,501261274,src/script/interpreter.cpp
sipa,2020-10-07 19:34:50,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261337,501261337,src/script/interpreter.h
sipa,2020-10-07 19:35:01,Renamed them both to `bytes`.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261435,501261435,src/pubkey.h
sipa,2020-10-07 19:35:09,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261517,501261517,src/script/sigcache.cpp
sipa,2020-10-07 19:35:16,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261574,501261574,src/pubkey.cpp
sipa,2020-10-07 19:35:25,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261663,501261663,src/script/interpreter.h
sipa,2020-10-07 19:35:36,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261750,501261750,src/script/interpreter.cpp
sipa,2020-10-07 19:35:45,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r501261833,501261833,src/script/interpreter.cpp
jnewbery,2020-10-09 14:50:35,"Why is `tapleaf_hash` passed as a pointer with a non-null check? This function is always called with a non-null `tapleaf_hash`, so it'd make more sense to pass by reference.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502483744,502483744,src/script/interpreter.cpp
fjahr,2020-10-10 22:48:12,"in 6b0f2a4320aebe1b802763a559cbaf3c348c2ffc:\n\nNot sure if it's needed but could add an assert for extra caution:\n```\nassert(txdata.m_spent_outputs.size() == tx.vin.size());\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502840625,502840625,src/validation.cpp
fjahr,2020-10-11 08:42:34,"in 68f87cb0da326bcaa2570ed6299a7ee1c6d7b5f6:\n\nnit: this could be at the beginning of the else block I think",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502885312,502885312,src/script/interpreter.cpp
fjahr,2020-10-11 19:26:46,"in c3825c1bc41815d9b27d9a5dc36e46165b2f5861:\n\n```suggestion\n * success variable indicates whether the signature check itself succeeded.\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502955684,502955684,src/script/interpreter.cpp
fjahr,2020-10-11 20:45:03,"in 58c90569f75221bc4652cbde5cad4dbae543a1ca:\n\nnit\n```suggestion\n# The DEFAULT_CONTEXT object specifies a standard signing process, with many overridable knobs.\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502963706,502963706,test/functional/feature_taproot.py
fjahr,2020-10-11 21:00:45,"in 58c90569f75221bc4652cbde5cad4dbae543a1ca:\n\nThere are already some 101 blocks mined on the taproot node to fund it earlier and then funds are transferred to the non-taproot node to fund it. I guess this generate can be removed and the blocks could be mined earlier?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502965296,502965296,test/functional/feature_taproot.py
fjahr,2020-10-11 21:16:36,"in 58c90569f75221bc4652cbde5cad4dbae543a1ca:\n\n```suggestion\n            unspents.sort(key=lambda x: int(x[""amount""] * 100000000), reverse=True)\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502966921,502966921,test/functional/feature_taproot.py
fjahr,2020-10-11 21:47:36,"in 58c90569f75221bc4652cbde5cad4dbae543a1ca:\n\nprobably?\n```suggestion\n        add_spender(spenders, ""opsuccess/unexecif"", standard=False, tap=tap, leaf=""unexecif_success"", failure={""leaf"": ""unexecif_nop""}, **ERR_CLEANSTACK)\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r502969975,502969975,test/functional/feature_taproot.py
kallewoof,2020-10-12 06:54:59,"50f0a10f7b2e45491775c1166c4593e7fa8cfd4b\n\n```suggestion\n    if (hash_type >= 0x84 || (hash_type >= 0x04 && hash_type <= 0x80)) return false;\n```\nseems slightly more straightforward, IMO.\n\nInterpreting it becomes ""If the hash type is above 0x84 or within 0x04 and 0x80"" vs ""if it is NOT the case that the hash type is <= 0x03 or within 0x81 and 0x83"".",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503074547,503074547,src/script/interpreter.cpp
kallewoof,2020-10-12 07:07:58,"This seems to disappear in a later commit so not really an issue, but I'm curious why this isn't `const auto& witstack = tx_to.[...]` which should effectively have the same result, except as a C++ ref rather than a pointer.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503080494,503080494,src/script/interpreter.cpp
sipa,2020-10-12 08:24:07,"This is no longer the case after later commits, where actual script semantics are added.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503121398,503121398,src/script/interpreter.cpp
sipa,2020-10-12 09:20:22,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157129,503157129,src/script/interpreter.cpp
sipa,2020-10-12 09:20:31,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157211,503157211,test/functional/feature_taproot.py
sipa,2020-10-12 09:20:41,"Nice, done.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157327,503157327,test/functional/feature_taproot.py
sipa,2020-10-12 09:20:51,"Indded, fixed.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157420,503157420,test/functional/feature_taproot.py
sipa,2020-10-12 09:21:00,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157515,503157515,test/functional/feature_taproot.py
sipa,2020-10-12 09:21:10,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157634,503157634,src/script/interpreter.cpp
sipa,2020-10-12 09:21:19,Added.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503157724,503157724,src/validation.cpp
instagibbs,2020-10-12 11:41:05,"```suggestion\n * success variable indicates whether the signature check itself succeeded.\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503236815,503236815,src/script/interpreter.cpp
achow101,2020-10-12 18:57:13,"In 614479450e911dba6938bb7feb85088229faf9b1 ""Implement Taproot signature hashing (BIP 341)""\n\nnit: remove `key_version` here. It is removed in the next commit anyways.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503477740,503477740,src/script/interpreter.cpp
achow101,2020-10-12 19:39:26,"In 4e6196e53109ab4ebcfe64a88be6fcf2e3d7e2a6 ""Implement Taproot validation (BIP 341)""\n\nnit: move this change to the commit `ANNEX_TAG` was introduced.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503495197,503495197,src/script/script.h
sipa,2020-10-13 00:21:17,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503600575,503600575,src/script/interpreter.cpp
sipa,2020-10-13 00:21:23,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503600601,503600601,src/script/script.h
sipa,2020-10-13 00:21:33,Fixed.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503600634,503600634,src/script/interpreter.cpp
sipa,2020-10-13 00:21:44,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r503600678,503600678,src/script/interpreter.cpp
achow101,2020-10-13 19:57:56,"In 3c226639eb134314a0640d34e4ccb6148dbde22f ""tests: add BIP340 Schnorr signature support to test framework""\n\nnit: The code here seems to be entirely unnecessary as `lift_x` ensures the evenness of `y` is correct. I commented out these 2 lines and no tests failed.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504219510,504219510,test/functional/test_framework/key.py
achow101,2020-10-13 20:31:52,"In 3c226639eb134314a0640d34e4ccb6148dbde22f ""tests: add BIP340 Schnorr signature support to test framework""\n\nnit: This should be `self.fail` rather than `assertFalse`.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504240763,504240763,test/functional/test_framework/key.py
sipa,2020-10-13 23:02:43,"I think the only thing that's wrong here is the comment: with this change, it's not longer ""correcting"" the oddness; it's just negating if an odd Y coordinate is desired.\n\nThe code is necessary though, but possibly untested. It's what constructs a point from a compressed public key. It's only used for ECDSA (as BIP340 public keys are x-only, not compressed), and unused in the current tests (wh",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504306999,504306999,test/functional/test_framework/key.py
sipa,2020-10-13 23:27:31,"Indeed, will fix in a follow-up.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504314957,504314957,test/functional/test_framework/key.py
jamesob,2020-10-14 15:11:02,"Note to other reviewers: even though this is a move from existing code, I was still curious about whether this assert is safe. There are three call-sites for `CheckInputScripts()`; here they are with the various ways they ensure the input coins aren't already spent (and so this assert won't blow up): \n- `MemPoolAccept::PolicyScriptChecks()`: only ever called from `MemPoolAccept::AcceptSingleTran",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504758194,504758194,src/validation.cpp
jamesob,2020-10-14 17:02:56,Note to reviewers: serializes as `[hash][out_index]` per `COutPoint` ([c.f. BIP](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message)).,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504835231,504835231,src/script/interpreter.cpp
jamesob,2020-10-14 17:03:49,Note to reviewers: serializes as `[amount i.e. nValue][scriptPubKey]` per `CTxOut` ([c.f. BIP](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message)).,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504835738,504835738,src/script/interpreter.cpp
jamesob,2020-10-14 17:12:21,"So far as I can tell, the [ordering of serialization](https://github.com/jamesob/bitcoin/blob/301959fa7482cf749504864789e6f9f4470b8bb6/src/serialize.h#L238) is reversed here relative to what [the BIP](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message) says (""the SHA256 of *(compact_size(size of annex) || annex)*""). Existing serialization looks like it has the ",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504840884,504840884,src/script/interpreter.cpp
sipa,2020-10-14 17:30:49,"I don't understand. Why would the length go after the data? Nothing serializes that way, and the functional tests would fail if that was the case.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504851774,504851774,src/script/interpreter.cpp
jamesob,2020-10-14 17:46:21,"Based on the serialization code I link to, it looks as though the size is being written after the data itself (which is the reverse of what the BIP says), but maybe I'm missing something?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504860824,504860824,src/script/interpreter.cpp
sipa,2020-10-14 17:53:36,"That serialization code you link to:\n* Is serializing a `Span<const unsigned char>` as a fixed length object, without any length at all. It's invoking the `Stream` function `write(const unsigned char* data, size_t length)`, which writes the `length` bytes starting at `data`. It doesn't write the length itself.\n* Isn't used here (witstack.back() is a `std::vector<unsigned char>`, not a `Span<co",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504865277,504865277,src/script/interpreter.cpp
jamesob,2020-10-14 17:55:12,Hm yeah I guess I must be wrong because the tests encode in [the right order](https://github.com/bitcoin/bitcoin/pull/19953/commits/f06e6d03452cf5e0b1a0863afb08c9e6d3ef452e#diff-3f25b0e0fbc5dd36a62417827b38517c9c5bdbfc3f4787d5925527c344bda104R775) (per `ser_string`'s [definition](https://github.com/jamesob/bitcoin/blob/301959fa7482cf749504864789e6f9f4470b8bb6/test/functional/test_framework/message,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r504866309,504866309,src/script/interpreter.cpp
ajtowns,2020-10-15 07:01:53,Would have expected `VerifyTaprootCommitment` to take `script` as a `const valtype&` -- future taproot versions might not look like current script at all.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r505234502,505234502,src/script/interpreter.cpp
ajtowns,2020-10-15 07:05:10,"Could move declaration of `exec_script` closer to its assignment, and make it `const CScript exec_script(script_bytes.begin(), script_bytes.end());` for the p2wsh and p2tr cases.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r505237399,505237399,src/script/interpreter.cpp
sipa,2020-10-15 21:56:24,"Without #13062 that's annoying to do, as it means constructing both a `valtype` and a `CScript` with the same data. You're right that future version leafs may not want a script at all, but until then, little reason to add this complication.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r505887585,505887585,src/script/interpreter.cpp
sipa,2020-10-15 21:58:34,"Yeah, not sure that's worth changing without other improvements though.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r505888403,505888403,src/script/interpreter.cpp
fanquake,2020-10-16 03:33:30,This is being addressed in #20161.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r506026632,506026632,test/functional/test_framework/key.py
fanquake,2020-10-16 06:30:33,This comment is also being addressed in #20161.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r506084829,506084829,test/functional/test_framework/key.py
ariard,2020-10-19 23:54:53,"I'm not sure how to read this description compared to  the effective return. `tweak` is returned in 4th position, after internal `pubkey` in 2nd and the negation flag in 3rd. Further it seems `leaves` are sorted on `(script, version, merklebranch)` and doesn't rely on `negation flag`/ `innerkey`.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508128183,508128183,test/functional/test_framework/script.py
ariard,2020-10-20 00:07:45,nit: `need_vin_vout_mismatch` isn't commented,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508131987,508131987,test/functional/feature_taproot.py
ariard,2020-10-20 01:10:31,"A code comment to hint about the `+1` would be great. Like ""Exclude parity bit from internal pubkey""",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508149564,508149564,src/script/interpreter.cpp
ariard,2020-10-20 01:21:09,"As a side-note, it could be worthy to document what is meaned here by ""syntactic correctness"" if it's consensus criticial. AFAICT, pubkey must be superior to 0 ?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508152499,508152499,src/pubkey.h
ariard,2020-10-20 01:23:25,Can future upgradable public key define their own sigops rules without branching inside the `if (success)` branch ?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508153060,508153060,src/script/interpreter.cpp
ariard,2020-10-20 01:24:41,Can we enforce this assign-once property with either some cpp magic or compiler option ? I've no idea.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508153422,508153422,src/script/interpreter.cpp
sipa,2020-10-20 22:28:46,"They can certainly define their own cost rules, as long as the cost is at least 50 vbytes per check. I'm not sure what you mean by ""without branching"".",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508877783,508877783,src/script/interpreter.cpp
sipa,2020-10-20 22:32:23,I'm sure there are ways to solve these softforkability guarantees more generically by encapsulating modifiable properties in an object... but the risks from refactoring consensus code to allow that are probably far bigger than the risk a bug would be missed in future consensus logic (probably a very rare event).,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508879192,508879192,src/script/interpreter.cpp
sipa,2020-10-20 22:36:27,"See #20207. All of this was just outdated, thanks for noticing.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508880630,508880630,test/functional/test_framework/script.py
sipa,2020-10-20 22:36:40,Added in #20207. ,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508880698,508880698,test/functional/feature_taproot.py
sipa,2020-10-20 22:37:13,"I added a bunch of comments around this in #20207. The first byte contains both the leaf version and the parity bit, btw.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508880919,508880919,src/script/interpreter.cpp
sipa,2020-10-20 22:37:25,Added comments in #20207.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508880996,508880996,src/pubkey.h
ariard,2020-10-21 01:24:56,"I meaned that we do the sigops/witnesssize ratio test before the pubkey size one. If a future softforked new pubkey type comes with its own new ratio test, maybe the code structure isn't going to be adequate ?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r508934109,508934109,src/script/interpreter.cpp
MarcoFalke,2020-10-21 09:49:33,"nit in commit e9a021d7e6:\n\nWhy not directly assign this with the correct value?\n\n```cpp\nconst bool p2sh{prevScript.IsPayToScriptHash()};",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509143288,509143288,src/policy/policy.cpp
MarcoFalke,2020-10-21 09:59:27,"same commit:\n\nYou are modifying what this function is doing, so the comment in validation is no longer applicable and should probably be adjusted.\n\n```\n    // Check for non-standard witness in P2WSH\n```",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509149586,509149586,src/policy/policy.cpp
MarcoFalke,2020-10-21 15:23:41,"I can't run the tests here:\n\n\n```\ntest]$ python -m unittest functional/test_framework/key.py \n.E\n======================================================================\nERROR: test_schnorr_testvectors (functional.test_framework.key.TestFrameworkKey)\nImplement the BIP340 test vectors (read from bip340_test_vectors.csv).\n--------------------------------------------------------------",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509382262,509382262,test/functional/test_framework/key.py
MarcoFalke,2020-10-21 15:25:29,should this assert that they are of the same length? Or at least comment that this will truncate the longer one,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509383731,509383731,test/functional/test_framework/key.py
MarcoFalke,2020-10-21 15:46:32,Can you explain why legacy whitelist is needed for this test?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509400019,509400019,test/functional/feature_taproot.py
MarcoFalke,2020-10-21 15:47:07,The nodes are already connected. Can you explain why the nodes need to be connected twice?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509400473,509400473,test/functional/feature_taproot.py
MarcoFalke,2020-10-21 16:13:59,nit: FUZZ_SUITE_LDFLAGS_COMMON,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509420029,509420029,src/Makefile.test.include
MarcoFalke,2020-10-21 19:40:18,"Can you explain what the point of this unit test is? It seems that the python test is used to generate inputs for the fuzz test, which is used to minimize the corpus. The resulting corpus is fed into the unit test.\n\nHowever, the unit test and fuzz test do the same thing. If they didn't, the fuzz test couldn't be used to capture the coverage.\n\nI think the unit test (all changes in this comm",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509617693,509617693,src/test/script_tests.cpp
sipa,2020-10-21 20:02:32,"Personal style, I guess. I don't think there is much of an objective difference.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509638288,509638288,src/policy/policy.cpp
sipa,2020-10-21 20:18:21,"If the fuzz tests would assert the return code directly, they wouldn't be usable in fuzzing mode, and likely cause people to file bug reports if they'd try to run them. As is, the fuzz tests are just for assessing coverage, and can be used either as test directly (only covering things caught by sanitizers), or used to minimize a corpus generated externally (with known validity/invalidity). Only th",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509659095,509659095,src/test/script_tests.cpp
sipa,2020-10-21 20:23:13,See follow-up in https://github.com/bitcoin/bitcoin/pull/20207.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509663835,509663835,src/policy/policy.cpp
sipa,2020-10-21 20:23:34,"Ok, I wasn't aware of that mode being supported. Added in #20207.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509664115,509664115,test/functional/test_framework/key.py
sipa,2020-10-21 20:23:40,Done.,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509664224,509664224,test/functional/test_framework/key.py
sipa,2020-10-21 20:24:34,"I'm not sure, it may have been needed in an old version of this code. It doesn't seem needed anymore; addressed in #20207.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509664858,509664858,test/functional/feature_taproot.py
sipa,2020-10-21 20:25:48,"I probably copied it from somewhere ¯\\_(ツ)_/¯\n\nFixed in #20207.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509666184,509666184,test/functional/feature_taproot.py
sipa,2020-10-21 20:26:24,"Done, in #20207.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509666790,509666790,src/Makefile.test.include
MarcoFalke,2020-10-21 20:27:49,"Overall less verbose and one less LOC, but obviously a style question. Resolving.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509667995,509667995,src/policy/policy.cpp
MarcoFalke,2020-10-21 20:28:45,Which commit? I can't seem to find the one that touches validation.cpp,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509668512,509668512,src/policy/policy.cpp
MarcoFalke,2020-10-21 20:34:44,"One side-effect is that it speeds up tx-relay, but tx relay isn't tested in this script, so seems good to remove",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509672176,509672176,test/functional/feature_taproot.py
MarcoFalke,2020-10-21 20:40:53,"> with known validity/invalidity\n\nOh, I missed that the validity flag is included in the seed itself. Makes sense now.\n\n> The unit test can be run without building in fuzz mode.\n\nHeh, I am pretty sure the developers that have the seed dir cloned, run the unit tests, but not the fuzz tests is an empty set.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509677397,509677397,src/test/script_tests.cpp
sipa,2020-10-21 20:45:25,"Oops, done for real now.",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509681391,509681391,src/policy/policy.cpp
MarcoFalke,2020-10-21 20:46:21,"heh, thanks!",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r509682026,509682026,src/policy/policy.cpp
kiminuo,2021-06-24 14:14:57,https://github.com/bitcoin/bitcoin/blob/b2f5c38333fd2ec03fd1299a1bce507b25753f45/src/pubkey.h#L253 - is the asterisk in `*this` intentional?,https://github.com/bitcoin/bitcoin/pull/19953#discussion_r657988147,657988147,src/pubkey.h
dgpv,2021-08-31 15:34:49,"Post-merge comment/question after stumbling upon this while looking at the test framework code:\n\nIs using 32 zero bytes instead of correct BIP341 behaviour (i.e. failing) intentional here ?\n\nThe code does not seem accidental, as it is not copied from legacy sighash function, and if I stick `assert 0` here, the test/functional/feature_taproot.py test fails, but it is not clear from the back",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r699444745,699444745,test/functional/test_framework/script.py
dgpv,2021-08-31 18:57:47,"@sipa, can you please comment on this ?",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r699594466,699594466,test/functional/test_framework/script.py
ajtowns,2021-09-01 01:19:44,"I think it's testing that a SIGHASH_SINGLE signature without a corresponding output will fail, even if you generate an otherwise reasonable looking signature. If you change it to `bytes(42 for _ in range(32))` rather than an `assert 0`, the tests will still pass, demonstrating the exact value used isn't important. (If you change the length to something other than 32, you'll get an assertion failur",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r699774939,699774939,test/functional/test_framework/script.py
dgpv,2021-09-01 06:35:53,"It is very much looks like you are correct, these two tests depend on this behavior of `TaprootSignatureHash`.\n\nWithout any comment explaining this, It will confuse people who read only a part of the code. Some people might copy that code and have problems later. I only cross-referenced this code with C++ implementation in Core while writing my own implementation in python, but I think it is d",https://github.com/bitcoin/bitcoin/pull/19953#discussion_r699885812,699885812,test/functional/test_framework/script.py
