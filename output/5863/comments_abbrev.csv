sipa,2015-03-07T13:30:14Z,"Looks good, overall. I wouldn't worry about the inefficient mapBlockIndex iteration for now, that can be improved later. I haven't tested yet.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-77689327,77689327,
morcos,2015-03-13T17:24:42Z,"We've added 6 new commits.\n1 addresses some of the feedback so far (will be squashed)\n2,3 are already in master and will be dropped when we rebase\n4 adds an RPC test. It is very expensive, so please be wary running it.\n5 fixes a bug that was preventing us from reorg'ing to a chain for which we needed to redownload pruned blocks. (will be squashed)\n6 is the code change from #5890 and can be dr",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-79158060,79158060,
morcos,2015-03-19T15:43:44Z,"Addressed some of the feedback and made a few other slight improvements.\nOf note, as discussed on IRC, passing -prune=N and -reindex will cause all block and undo files to be deleted.  This happens regardless of whether you were previously pruned and actually needed to do this or not.  This was added in the last commit.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-83639289,83639289,
rustyrussell,2015-03-25T11:21:09Z,"v0.9.0rc2-2621-g40ba177.  Bootstrapping with ""prune=1000"", (and some minor added debug prints which shouldn't have affected anything, but never know):\n\nbitcoind: coins.cpp:150: virtual bool CCoinsViewCache::BatchWrite(CCoinsMap&, const uint256&): Assertion `it->second.flags & CCoinsCacheEntry::FRESH' failed.\n\nUnf. didn't have ulimit -c unlimited.  Rerunning, it seems be gathering blocks like n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-85987895,85987895,
ajweiss,2015-03-25T15:05:29Z,"Hey Rusty,\n\nYou don't happen to have the debug.log laying around from when it crashed,\ndo you?  Would you be willing to share it?\n\nThanks!\n--adam\n\nOn Wed, Mar 25, 2015 at 7:21 AM, Rusty Russell notifications@github.com\nwrote:\n\n> Hmm, bootstrapping with ""prune=1000"", (and some minor added debug prints\n> which shouldn't have affected anything, but never know):\n> \n> bitcoind: coins.cpp:",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86072095,86072095,
ajweiss,2015-03-25T15:24:16Z,"Also, what version are you running?  If you're running this pull, you should see a version string like this:\n\n```\n2015-03-25 15:22:05 Bitcoin version v0.10.99.0-40ba177-dirty (2015-03-19 11:28:32 -0400)\n```\n\nThe ""v0.9.0rc2-2621-g40ba177"" that appears in your comment references a version that is quite old.  Also, did you update your comment after the fact?  For some reason, github never inclu",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86081177,86081177,
rustyrussell,2015-03-26T00:28:41Z,"https://github.com/sdaftuar/bitcoin/tree/autoprune == 40ba177 which is what I was running (and, AFAICT, what is proposed in this pull request).\n\nUnf. I didn't save debug.log :(\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86264679,86264679,
rustyrussell,2015-03-26T00:35:02Z,"Hmm, next run got killed by the OOM killer.  Perhaps this first assert() was due to OOM (512M mem, 512M swap).\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86265588,86265588,
ajweiss,2015-03-26T00:52:33Z,"I see an 0.9.0rc2 in the version string you posted.  Did you back port or\nrebase?\n\nOn Wed, Mar 25, 2015, 8:35 PM Rusty Russell notifications@github.com\nwrote:\n\n> Hmm, next run got killed by the OOM killer. Perhaps this first assert()\n> was due to OOM (512M mem, 512M swap).\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/bitcoin/bitcoin/pull/5863#issuecomm",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86267908,86267908,
rustyrussell,2015-03-26T01:45:17Z,"Neither.  git describe uses the previous tag it knows about.  For some reason it doesn't know about more recent tags.  But I'm on commit 40ba177537a6cb032a03648208add12695c635e8.\n\nThe good news: it happened again!  bitcoind: coins.cpp:150: virtual bool CCoinsViewCache::BatchWrite(CCoinsMap&, const uint256&): Assertion `it->second.flags & CCoinsCacheEntry::FRESH' failed.\n\nHere's the last 100 li",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86289804,86289804,
ajweiss,2015-03-26T02:06:38Z,"Do you have the head of this log where it prints the version string?   core\nfile/backtrace?\nOn Mar 25, 2015 9:45 PM, ""Rusty Russell"" notifications@github.com wrote:\n\n> Neither. git describe uses the previous tag it knows about. For some\n> reason it doesn't know about more recent tags. But I'm on commit 40ba177\n> https://github.com/bitcoin/bitcoin/commit/40ba177537a6cb032a03648208add12695c635",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86293036,86293036,
ajweiss,2015-03-26T02:48:24Z,"Also, my idea of a ""canonical environment"" is a commodity x86_64 based PC\nmade in the last few years with 4-8gb of ram running a recent version of\nDebian or Ubuntu with bitcoind being run in the bare environment with no\ncontainers or VMs.  Can you please describe in detail how your environment\ndiffers?  (ie; if it's cloud, who and what region.  if it's aws; magnetic\nor ssd, enhanced ebs or no",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86309604,86309604,
rustyrussell,2015-03-26T03:00:49Z,"Got a core file, but backtrace was useless without debugging info :(  So I've reconfigured with --enable-debug (and --disable-wallet). Seems repeatable, so I'll expect something soon.  If not, I'll erase the blockchain and try again.\n\nHardware:\n   I'm running this on a minimal digital ocean droplet, so 512M ram, 1.5G swap, 20GB total hdd.  Hence the desire to test pruning.\n\nSetup:\n$ cat .bit",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86314941,86314941,
rustyrussell,2015-03-26T03:11:36Z,```\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 7.7 (wheezy)\nRelease:    7.7\nCodename:   wheezy\n$ uname -a\nLinux Petty1 3.2.0-4-686-pae #1 SMP Debian 3.2.54-2 i686 GNU/Linux\n$ bitcoind --version\nBitcoin Core Daemon version v0.10.99.0-40ba177\nCopyright (C) 2009-2015 The Bitcoin Core Developers\n\nThis is experimental software.\n\,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86319737,86319737,
ajweiss,2015-03-26T03:11:38Z,"I don't see any immediate problems with the diff, but I agree, better safe\nthan sorry.  Hopefully you'll get a backtrace, and if it's not obvious,\ndon't forget to mind the threads.\n\nThanks a lot!\nOn Mar 25, 2015 11:00 PM, ""Rusty Russell"" notifications@github.com wrote:\n\n> Reconfigured with --enable-debug (and --disable-wallet) as before. Got a\n> core file, but backtrace was useless without",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86319752,86319752,
fanquake,2015-03-26T06:22:12Z,Can this be rebased?\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86358281,86358281,
rustyrussell,2015-03-26T10:04:37Z,"$ tail bitcoind-out-4 \nbitcoind: coins.cpp:150: virtual bool CCoinsViewCache::BatchWrite(CCoinsMap&, const uint256&): Assertion `it->second.flags & CCoinsCacheEntry::FRESH' failed.\n$ gdb bitcoin/src/bitcoind core\n(gdb) thread apply all bt\n\nThread 11 (Thread 0xaef05b70 (LWP 31697)):\n#0  0xb702a424 in __kernel_vsyscall ()\n#1  0xb6c2423a in __pthread_cond_wait (cond=0xbfb8f740, mutex=0xbfb8f72",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86432901,86432901,
morcos,2015-03-26T15:26:50Z,"Thanks a lot for your debugging help.  I think we found the problem.  If we prune inside ConnectBlock (as undo files allocate more space) then we flush pcoinsTip, which breaks the assumptions made inside flushing the child cache after ConnectBlock is finished.  Will work on a solution.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86568450,86568450,
rustyrussell,2015-03-27T03:24:27Z,"Thanks, have commented that out and re-running now.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86806402,86806402,
rustyrussell,2015-03-30T03:02:06Z,"Sorry for delayed update.  It's still running fine, commenting out that line seems to have fixed it.  Thanks!\n\nIt's within 15% of the target, too (1000M):\n\ndu -sk .bitcoin/blocks\n1137288 .bitcoin/blocks\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-87524367,87524367,
sdaftuar,2015-04-03T21:10:10Z,"We've updated this pull:\n- rebased off of #5959 \n- squashed all the commits that have been previously pushed\n- adds a commit that changes the tests in CheckBlockIndex (and adds a couple) to be consistent with how the data structures are used when pruning.  This also fixes a bug we introduced in LoadBlockIndexDB.  Ultimately we'd squash this, but we've left this as a separate commit to try to ma",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-89421073,89421073,
morcos,2015-04-03T23:22:56Z,"OK here are 3 more commits:\n- tiny optimization to be squashed\n- A change to where pruning occurs so we're no longer flushing pcoinsTip from underneath child caches\n- A renaming of functions\n\nSorry for the annoying 3rd commit, but it seemed like the Autoprune function call was no longer the right name.  The functionality has now changed a bit with the 2nd commit.  We only check for pruning in",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-89450053,89450053,
morcos,2015-04-04T00:07:21Z,and a bug fix...\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-89468258,89468258,
laanwj,2015-04-13T13:35:13Z,How close is this to being mergeable? Any known issues or regressions left?\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92353499,92353499,
ondra-novak,2015-04-13T14:00:15Z,"I downloaded master, merged this pull, compiled, started. \n\nSeems, it works. But works differently than I expected. I expected, that it will actually ""prune"" blocks, not simply erase them. So i expected, that genesis block remains untouched, because its coinbase transaction was never spent. \n\nhttps://blockchain.info/block/00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048\n\nAppa",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92366072,92366072,
sdaftuar,2015-04-13T14:53:25Z,"There is one minor bug that came up recently which we'll be fixing today (an edge case when a block is re-processed).  A few things that I think should happen before merging:\n\n1) I don't think anyone has re-ACK'ed after we rebased and pushed up more commits a couple weeks ago.  In particular, it would be nice if someone could review the changes to CheckBlockIndex and maybe also the refactoring o",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92388235,92388235,
laanwj,2015-04-13T15:19:56Z,"@sdaftuar OK, thanks for the information. The reason I'm asking is that I'd like to avoid this slipping to the last minute of the merge window, as it did for 0.10. Having the code simmer in master for a while before the release ensures more testing. So let's try to get this merged by the end of April.\n\n@ondra-novak Pruning of the UTXO set (""ultraprune"") was implemented by @sipa a long time ago. ",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92398850,92398850,
rustyrussell,2015-04-14T02:19:11Z,"FWIW, I've been running 386039510b56ba7a224d009e5deb53f0f5b12274 with no problems on multiple nodes for a while.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92563113,92563113,
ondra-novak,2015-04-14T08:09:57Z,"@laanwj Thank you for clarification. Now I understand why there are some limitations in this solution. I mean for example why the wallet is disabled while prune is active (the wallet need to access to those files to reconstruct the transaction history, but theoretically the wallet still should be able to run above the valid UTXO-DB).\n\nUnfortunately it seems, that this solution solves one problem",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92687224,92687224,
sipa,2015-04-14T08:18:45Z,"@ondra-novak In theory, the Bitcoin Core wallet can function perfectly on top of a pruned block chain. It just can't rescan missing transactions from pruned history. That means being unable to import a new key or wallet into the software, unless one knows it has no incoming payments. But working as a normal wallet, with locally-generated keys should be possible. A pruned Bitcoin Core instance stil",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92690801,92690801,
ondra-novak,2015-04-14T08:38:10Z,"@sipa ""That means being unable to import a new key or wallet into the software, unless one knows it has no incoming payment"" Are you sure about this? If you have database of ALL unspent outputs, you can simply search it for outputs owned by the imported address and find balance and all incoming payments (not outgoing of course)\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92696153,92696153,
sipa,2015-04-14T08:45:47Z,"With the UTXO set you can indeed find the currently spendable coins. That\nis not how the Bitcoin Core wallet works, however. It uses a ledger-based\napproach that lists all historical transactions.\n\nYou're better off using a different wallet which supports that model if you\nwant it. As I said, that is perfectly possible, and remains possible after\npruning.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-92698606,92698606,
sdaftuar,2015-04-16T20:06:23Z,"To follow up on my earlier comment, after further review we decided that no additional bug fix was needed to handle re-processing blocks.  Also, #5875 would be nice, but isn't a blocker, as only pruning nodes are affected; this pull shouldn't introduce any issues for non-pruning nodes' ability to deal with duplicate blocks.\n\nWe added comments to the rpc test, squashed all our commits down, and r",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93828024,93828024,
jonasschnelli,2015-04-16T20:26:27Z,Just started running a mainnet node (with this PR on top) with a fresh datadir. Will report.\n\nSome minor things:\n- would it make sense to add `prune.py` to `qa/pull-tester/rpc-test.sh` and disable it when running all tests (should only start with `qa/pull-tester/rpc-tests.sh pruning`)\n- `/rest/tx` and `/rest/block` should be disabled when pruning is on. `/rest/chaininfos` and upcoming mempool ,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93831811,93831811,
jonasschnelli,2015-04-17T11:47:19Z,"The prune.py test did fail: https://gist.github.com/jonasschnelli/13b077c7215f012fe44d (didn't analyzed it).\n\nYesterday i started a fresh node and it took around 6h to catch up. Everything worked as expected. I did some RPC and REST calls and found out, that it might be enough to just inform the users when tx or block hash was not found that autoprune is enabled. On the other hand this reveals t",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93970863,93970863,
sipa,2015-04-17T11:55:48Z,"@jonasschnelli I don't think we should be adding stuff to getinfo - the call is already very overloaded, and needs access to pretty every piece of data (mempool, blockchain, database, wallet, network). If you want to add something, add it to getblockchaininfo or something.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93972083,93972083,
morcos,2015-04-17T12:38:22Z,"@sipa, hmm, i do think that until prune mode allows you to have a more regular node such as supporting NODE_NETWORK and a wallet, it might make sense to report that state in the most general place possible, such as getinfo.  we could move it when it becomes a less defining characteristic of your node.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93977782,93977782,
jonasschnelli,2015-04-17T12:45:25Z,20mins leaks detecting during fresh datadir catchup showed no issues. Memory behavior as expected.\n![bildschirmfoto 2015-04-17 um 14 43 11](https://cloud.githubusercontent.com/assets/178464/7202189/49ddc73a-e510-11e4-90f7-5e9807fd60c5.png)\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93978740,93978740,
morcos,2015-04-17T12:47:44Z,"@jonasschnelli , re: pruning.py failing.  Were you running it on a decently equipped machine?  What happens is the reorg's are so large that they take a long time, and then the rpc calls (such as to getblocks() in this case) time out.  I increased the timeout from 30s to 5min, which gave some buffer on my machine, but perhaps that wasn't enough for general usage.   If you wouldn't mind trying incr",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93979089,93979089,
jonasschnelli,2015-04-17T12:53:07Z,"@morcos The machine should be sufficient: Intel Xeon E31245 3.30GHz, 16GB RAM.\nI now increased timewait from 300 to 1000 and started again. Will report.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-93979916,93979916,
jonasschnelli,2015-04-17T18:34:31Z,@morcos: prune.py test still fails: https://gist.github.com/jonasschnelli/03afc81383ec537eb4d2\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-94047254,94047254,
jonasschnelli,2015-04-19T18:15:44Z,@morcos: after changing `timewait`to 3000 the `prune.py` test ran successfully (https://gist.github.com/jonasschnelli/90ac6516780607011b26). Took ~1h36'.\n\nMy fullnode with autoprune mode is running smooth sind 2.5days.\nNice work. Hopefully this gets merged soon!\nTested ACK.\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-94302349,94302349,
sipa,2015-04-19T18:18:30Z,"Concept ACK. Code review ACK. Only lightly tested, sorry.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-94302594,94302594,
sdaftuar,2015-04-22T14:57:52Z,"This needed to be rebased, so I did so and updated the pull.  I also added a commit to try to reduce surprise in the event that someone uses -reindex and -prune at the same time: now, we only will delete all the block files if block file 0 is missing: in that case, we know that reindex will not find the files anyway, so there is no harm in deleting them (and this way a pruning node isn't tying up ",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95221526,95221526,
sipa,2015-04-22T16:45:06Z,"Ok, I've run out of nits (see above). I think this is safe to merge - especially in case pruning itself is not enabled.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95260297,95260297,
sdaftuar,2015-04-22T19:49:10Z,"@sipa Thanks for all the review, I've gone ahead and fixed those nits and squashed everything back down to one commit.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95315275,95315275,
sipa,2015-04-22T22:20:14Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95355009,95355009,
laanwj,2015-04-24T08:29:06Z,"Works for me - did full testnet and mainnet sync, which succeeded, and disk usage remained within the configured bound. Also tried various RPCs on a pruned node and was unable to crash it.\n\nTested ACK.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95851875,95851875,
gavinandresen,2015-04-24T14:25:39Z,"Post-pull ACK; copied my -txindex=1 main net datadir, ran pruned (it told me I had to -reindex, as expected), running pruned nicely on my Mac.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95947711,95947711,
cozz,2015-04-24T16:14:52Z,"I have a question:\nNot relaying blocks sounds really bad, couldnt we still announce it, if you know that the other guy has at least all blocks until our prune-threshold?\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95981988,95981988,
sipa,2015-04-24T16:21:13Z,"We should work on that, yes.\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-95983860,95983860,
dacox,2015-05-12T01:56:13Z,"I have a question also:\n\nDoes the -prune=N option work from a cold start, or does it require a full sync first?\n\nI recently installed bitcoind on a 40GB droplet with -prune=30000 and it keeps running out of disk space.\n\nI have tried with the prune option as a cli argument to bitcoind, and also as an option in the config file.\n\nCheers\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-101097456,101097456,
laanwj,2015-05-12T12:35:31Z,"@dacox That should work. `-prune=N` means it will only retain the last N MB of blocks during a full sync. This size does not include the UTXO database, block index, wallet and miscellaneous files so keep some margin. But 30000 MB on a 40000 MB medium should work.\nWhat version of bitcoin core are you using? Is `-prune` shown in the `-help` output?\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-101259945,101259945,
dacox,2015-05-12T16:38:14Z,"According to `bitcoind -help` it's Bitcoin Core Daemon version v0.10.1.0-gd8ac901\n\nI grabbed it from the PPA, and I saw that this PR was merged in before the release was tagged. \n\nHowever, I do not see a reference to -prune in the help output\n\nEdit:  I see the problem, the 0.10 branch was branched off of master quite some time before this PR. For some reason I thought it was in 0.10\n",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-101343245,101343245,
wtogami,2015-05-14T07:58:09Z,"> RPC/REST interfaces currently do not distinguish between unknown blocks/tx and pruned blocks/tx.\n> It's unclear if a specific error should be returned, or perhaps the block/tx query interfaces be disabled\n>  for pruned nodes.\n\nCould this be improved by keeping the headers of pruned blocks and somehow marking those blocks as pruned?  That would allow distinguishing the difference between prun",https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-101962160,101962160,
jonasschnelli,2015-05-14T08:40:31Z,@wtogami: I think this is okay now. Check https://github.com/bitcoin/bitcoin/pull/6058\n,https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-101973087,101973087,
sipa,2015-03-07T13:17:45Z,Comment is outdated now.\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r25995924,25995924,src/main.cpp
sipa,2015-03-07T13:20:06Z,Style nit: { on the same line.\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r25995941,25995941,src/main.cpp
sipa,2015-03-07T13:20:20Z,Style nit: spaces around =\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r25995943,25995943,src/main.cpp
sipa,2015-03-07T13:22:20Z,This seems like a pretty normal condition during initial sync; does that require an unconditional log message?\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r25995955,25995955,src/main.cpp
fanquake,2015-03-08T07:09:18Z,Can you use //! so it will get picked up by doxygen\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r26002908,26002908,src/chainparams.cpp
morcos,2015-03-26T15:30:12Z,"In the meantime, you could try commenting out this call to Autoprune.  It should still keep you very close to the target and ought to fix the problem.\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r27223454,27223454,src/main.cpp
jonasschnelli,2015-04-17T11:55:24Z,little nit: missing indent.\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28587528,28587528,src/init.cpp
sipa,2015-04-17T11:57:30Z,"If testnet is reset, it will just be a separate network (testnet4?), so that shouldn't be a concern.\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28587682,28587682,src/chainparams.cpp
sipa,2015-04-17T12:00:28Z,"This doesn't seem to be what ""reindexing"" means, so I think this may be against user expectations. Perhaps introduce a new option (""-reset"" ?), which wipes everything. Then you can just say that reindexing is not compatible with pruned mode.\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28587833,28587833,src/init.cpp
jonasschnelli,2015-04-17T12:02:09Z,Agreed. I just wiped my 6h sync by trying to see what -reindex does in pruned mode. :)\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28587889,28587889,src/init.cpp
sipa,2015-04-17T12:13:29Z,"This is painful to see, but I see no better way for now.\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28588444,28588444,src/main.cpp
morcos,2015-04-17T12:14:17Z,"We can do that, but we didn't really change the behavior of reindex.  All we did was delete the old data files which wouldn't have been found or used anyway and would just have gotten in the way of the new files being written.  \n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28588484,28588484,src/init.cpp
morcos,2015-04-17T12:21:59Z,"I wrote an in-memory reverse lookup, which gets populated on startup.  On my computer the brute force way takes about 20ms, whereas the reverse lookup takes 200us.  The problem is the size of the in-memory structure, it will only get populated if you're in prune mode, but if you're keeping the whole current blockchain for instance, I think its about 10MB.   I decided to punt on the problem for now",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28588891,28588891,src/main.cpp
sipa,2015-04-17T12:27:20Z,"Would it be possible to just check whether a block entry's file is pruned or not, whenever the block or undo data is requested, and do the updating to mapBlocksUnlinked lazily in that case?\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28589209,28589209,src/main.cpp
sipa,2015-04-22T11:03:52Z,"I agree it doesn't effectively change any behaviour of -reindex, but I'd argue that -reindex itself has unexpected behaviour already in case of pruning. Anyway, not a big concern - maybe we can improve this after merge but before release.\n",https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28862466,28862466,src/init.cpp
sipa,2015-04-22T22:18:19Z,This variable name is slightly confusing. It's the last height that's allowed to be pruned (the test below using it is correct).\n,https://github.com/bitcoin/bitcoin/pull/5863#discussion_r28920432,28920432,src/main.cpp
