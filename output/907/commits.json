[
  {
    "sha": "c4341fa6abf7510c6de72cd435f4d4146dce74c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDM0MWZhNmFiZjc1MTBjNmRlNzJjZDQzNWY0ZDQxNDZkY2U3NGMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-27T16:55:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-27T20:04:32Z"
      },
      "message": "Add mruset and use it for setInventoryKnown",
      "tree": {
        "sha": "99280bb817318cf04b6d9de6b4df82a171218168",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99280bb817318cf04b6d9de6b4df82a171218168"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4341fa6abf7510c6de72cd435f4d4146dce74c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4341fa6abf7510c6de72cd435f4d4146dce74c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4341fa6abf7510c6de72cd435f4d4146dce74c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4341fa6abf7510c6de72cd435f4d4146dce74c2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbbd42a535813b2d7e30dba44c5c36b70833fe55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbbd42a535813b2d7e30dba44c5c36b70833fe55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbbd42a535813b2d7e30dba44c5c36b70833fe55"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 157,
      "deletions": 1
    },
    "files": [
      {
        "sha": "04388fc4b0d7542826c0e6711c8ed0664e52624e",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4341fa6abf7510c6de72cd435f4d4146dce74c2/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4341fa6abf7510c6de72cd435f4d4146dce74c2/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=c4341fa6abf7510c6de72cd435f4d4146dce74c2",
        "patch": "@@ -118,6 +118,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/init.h \\\n     src/headers.h \\\n     src/irc.h \\\n+    src/mruset.h \\\n     src/json/json_spirit_writer_template.h \\\n     src/json/json_spirit_writer.h \\\n     src/json/json_spirit_value.h \\"
      },
      {
        "sha": "0cf65853c4e15cd46addf9b2e94f0afb5d2ddd1e",
        "filename": "src/mruset.h",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=c4341fa6abf7510c6de72cd435f4d4146dce74c2",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_MRUSET_H\n+#define BITCOIN_MRUSET_H\n+\n+#include <set>\n+#include <deque>\n+\n+template <typename T> class mruset\n+{\n+public:\n+    typedef T key_type;\n+    typedef T value_type;\n+    typedef typename std::set<T>::iterator iterator;\n+    typedef typename std::set<T>::const_iterator const_iterator;\n+    typedef typename std::set<T>::size_type size_type;\n+\n+protected:\n+    std::set<T> set;\n+    std::deque<T> queue;\n+    size_type nMaxSize;\n+\n+public:\n+    mruset(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }\n+    iterator begin() const { return set.begin(); }\n+    iterator end() const { return set.end(); }\n+    size_type size() const { return set.size(); }\n+    bool empty() const { return set.empty(); }\n+    iterator find(const key_type& k) const { return set.find(k); }\n+    size_type count(const key_type& k) const { return set.count(k); }\n+    bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }\n+    bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }\n+    bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }\n+    std::pair<iterator, bool> insert(const key_type& x)\n+    {\n+        std::pair<iterator, bool> ret = set.insert(x);\n+        if (ret.second)\n+        {\n+            if (nMaxSize && queue.size() == nMaxSize)\n+            {\n+                set.erase(queue.front());\n+                queue.pop_front();\n+            }\n+            queue.push_back(x);\n+        }\n+        return ret;\n+    }\n+    size_type max_size() const { return nMaxSize; }\n+    size_type max_size(size_type s)\n+    {\n+        if (s)\n+            while (queue.size() >= s)\n+            {\n+                set.erase(queue.front());\n+                queue.pop_front();\n+            }\n+        nMaxSize = s;\n+        return nMaxSize;\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "d3e10f5a8928064ded4658b19676561e58fb6e1d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c4341fa6abf7510c6de72cd435f4d4146dce74c2",
        "patch": "@@ -14,6 +14,7 @@\n #include <arpa/inet.h>\n #endif\n \n+#include \"mruset.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n \n@@ -154,7 +155,7 @@ class CNode\n     std::set<uint256> setKnown;\n \n     // inventory based relay\n-    std::set<CInv> setInventoryKnown;\n+    mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n@@ -193,6 +194,7 @@ class CNode\n         fGetAddr = false;\n         vfSubscribe.assign(256, false);\n         nMisbehavior = 0;\n+        setInventoryKnown.max_size(SendBufferSize() / 1000);\n \n         // Be shy and don't send version until we hear\n         if (!fInbound)"
      },
      {
        "sha": "ca5a1f1b122410755fd34322415d5b355c2bbadb",
        "filename": "src/test/mruset_tests.cpp",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4341fa6abf7510c6de72cd435f4d4146dce74c2/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=c4341fa6abf7510c6de72cd435f4d4146dce74c2",
        "patch": "@@ -0,0 +1,90 @@\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+#include \"mruset.h\"\n+#include \"util.h\"\n+\n+#define NUM_TESTS 16\n+#define MAX_SIZE 100\n+\n+class mrutester\n+{\n+private:\n+    mruset<int> mru;\n+    std::set<int> set;\n+\n+public:\n+    mrutester() { mru.max_size(MAX_SIZE); }\n+    int size() const { return set.size(); }\n+\n+    void insert(int n)\n+    {\n+        mru.insert(n);\n+        set.insert(n);\n+        BOOST_CHECK(mru == set);\n+    }\n+};\n+\n+BOOST_AUTO_TEST_SUITE(mruset_tests)\n+\n+// Test that an mruset behaves like a set, as long as no more than MAX_SIZE elements are in it\n+BOOST_AUTO_TEST_CASE(mruset_like_set)\n+{\n+\n+    for (int nTest=0; nTest<NUM_TESTS; nTest++)\n+    {\n+        mrutester tester;\n+        while (tester.size() < MAX_SIZE)\n+            tester.insert(GetRandInt(2 * MAX_SIZE));\n+    }\n+\n+}\n+\n+// Test that an mruset's size never exceeds its max_size\n+BOOST_AUTO_TEST_CASE(mruset_limited_size)\n+{\n+    for (int nTest=0; nTest<NUM_TESTS; nTest++)\n+    {\n+        mruset<int> mru(MAX_SIZE);\n+        for (int nAction=0; nAction<3*MAX_SIZE; nAction++)\n+        {\n+            int n = GetRandInt(2 * MAX_SIZE);\n+            mru.insert(n);\n+            BOOST_CHECK(mru.size() <= MAX_SIZE);\n+        }\n+    }\n+}\n+\n+// 16-bit permutation function\n+int static permute(int n)\n+{\n+    // hexadecimals of pi; verified to be linearly independent\n+    static const int table[16] = {0x243F, 0x6A88, 0x85A3, 0x08D3, 0x1319, 0x8A2E, 0x0370, 0x7344,\n+                                  0xA409, 0x3822, 0x299F, 0x31D0, 0x082E, 0xFA98, 0xEC4E, 0x6C89};\n+\n+    int ret = 0;\n+    for (int bit=0; bit<16; bit++)\n+         if (n & (1<<bit))\n+             ret ^= table[bit];\n+\n+    return ret;\n+}\n+\n+// Test that an mruset acts like a moving window, if no duplcate elements are added\n+BOOST_AUTO_TEST_CASE(mruset_window)\n+{\n+    mruset<int> mru(MAX_SIZE);\n+    for (int n=0; n<10*MAX_SIZE; n++)\n+    {\n+        mru.insert(permute(n));\n+\n+        set<int> tester;\n+        for (int m=max(0,n-MAX_SIZE+1); m<=n; m++)\n+            tester.insert(permute(m));\n+\n+        BOOST_CHECK(mru == tester);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]