[
  {
    "sha": "aaa2fd1d2a6a7ff751f95b694117e082da048411",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWEyZmQxZDJhNmE3ZmY3NTFmOTViNjk0MTE3ZTA4MmRhMDQ4NDEx",
    "commit": {
      "author": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-24T13:46:33Z"
      },
      "committer": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-24T13:46:52Z"
      },
      "message": "move only Block/Undo checked",
      "tree": {
        "sha": "cc86f3ffc5b76cac98103ba496962debd5fc940d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc86f3ffc5b76cac98103ba496962debd5fc940d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaa2fd1d2a6a7ff751f95b694117e082da048411",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa2fd1d2a6a7ff751f95b694117e082da048411",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaa2fd1d2a6a7ff751f95b694117e082da048411",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa2fd1d2a6a7ff751f95b694117e082da048411/comments",
    "author": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65526fc8666fef35ef908dbc225f706bef642c7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65526fc8666fef35ef908dbc225f706bef642c7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65526fc8666fef35ef908dbc225f706bef642c7e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "77600cbe1048860b8110daec8e7fec2576ccea3e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa2fd1d2a6a7ff751f95b694117e082da048411/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa2fd1d2a6a7ff751f95b694117e082da048411/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=aaa2fd1d2a6a7ff751f95b694117e082da048411",
        "patch": "@@ -92,6 +92,39 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n+{\n+    CBlock block;\n+    if (IsBlockPruned(pblockindex)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n+    }\n+\n+    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n+        // Block not found on disk. This could be because we have the block\n+        // header in our index but don't have the block (for example if a\n+        // non-whitelisted node sends us an unrequested long chain of valid\n+        // blocks, we add the headers to our index, but don't accept the\n+        // block).\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Block not found on disk\");\n+    }\n+\n+    return block;\n+}\n+\n+static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n+{\n+    CBlockUndo blockUndo;\n+    if (IsBlockPruned(pblockindex)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Undo data not available (pruned data)\");\n+    }\n+\n+    if (!UndoReadFromDisk(blockUndo, pblockindex)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Can't read undo data from disk\");\n+    }\n+\n+    return blockUndo;\n+}\n+\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)\n {\n     // Serialize passed information without accessing chain state of the active chain!\n@@ -810,39 +843,6 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n     return blockheaderToJSON(tip, pblockindex);\n }\n \n-static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n-{\n-    CBlock block;\n-    if (IsBlockPruned(pblockindex)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Block not available (pruned data)\");\n-    }\n-\n-    if (!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus())) {\n-        // Block not found on disk. This could be because we have the block\n-        // header in our index but don't have the block (for example if a\n-        // non-whitelisted node sends us an unrequested long chain of valid\n-        // blocks, we add the headers to our index, but don't accept the\n-        // block).\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Block not found on disk\");\n-    }\n-\n-    return block;\n-}\n-\n-static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n-{\n-    CBlockUndo blockUndo;\n-    if (IsBlockPruned(pblockindex)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Undo data not available (pruned data)\");\n-    }\n-\n-    if (!UndoReadFromDisk(blockUndo, pblockindex)) {\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Can't read undo data from disk\");\n-    }\n-\n-    return blockUndo;\n-}\n-\n static UniValue getblock(const JSONRPCRequest& request)\n {\n     const RPCHelpMan help{\"getblock\","
      }
    ]
  },
  {
    "sha": "dd83c4c925218604216279ceae67ec9294be952f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDgzYzRjOTI1MjE4NjA0MjE2Mjc5Y2VhZTY3ZWM5Mjk0YmU5NTJm",
    "commit": {
      "author": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-24T13:48:39Z"
      },
      "committer": {
        "name": "Felix Weis",
        "email": "mail@felixweis.com",
        "date": "2019-05-24T13:48:39Z"
      },
      "message": "getblock: tx fee calculation for verbosity 2 via Undo data, new verbosity level 3 showing prevout info for inputs",
      "tree": {
        "sha": "8e446f37ce145731e2702b4cf9f797b6b1216a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e446f37ce145731e2702b4cf9f797b6b1216a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd83c4c925218604216279ceae67ec9294be952f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd83c4c925218604216279ceae67ec9294be952f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd83c4c925218604216279ceae67ec9294be952f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd83c4c925218604216279ceae67ec9294be952f/comments",
    "author": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "FelixWeis",
      "id": 551068,
      "node_id": "MDQ6VXNlcjU1MTA2OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/551068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixWeis",
      "html_url": "https://github.com/FelixWeis",
      "followers_url": "https://api.github.com/users/FelixWeis/followers",
      "following_url": "https://api.github.com/users/FelixWeis/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixWeis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixWeis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixWeis/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixWeis/orgs",
      "repos_url": "https://api.github.com/users/FelixWeis/repos",
      "events_url": "https://api.github.com/users/FelixWeis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixWeis/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaa2fd1d2a6a7ff751f95b694117e082da048411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa2fd1d2a6a7ff751f95b694117e082da048411",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaa2fd1d2a6a7ff751f95b694117e082da048411"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 102,
      "deletions": 64
    },
    "files": [
      {
        "sha": "02cda2a3a89a0e848fd034f92c1caa06847506ee",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd83c4c925218604216279ceae67ec9294be952f/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd83c4c925218604216279ceae67ec9294be952f/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=dd83c4c925218604216279ceae67ec9294be952f",
        "patch": "@@ -18,6 +18,7 @@ class CTransaction;\n struct CMutableTransaction;\n class uint256;\n class UniValue;\n+class CTxUndo;\n \n // core_read.cpp\n CScript ParseScript(const std::string& s);\n@@ -45,6 +46,6 @@ std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n std::string SighashToStr(unsigned char sighash_type);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n void ScriptToUniv(const CScript& script, UniValue& out, bool include_address);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0, const int verbosity = 2, const CTxUndo * txundo = nullptr);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "fc6bf5b79d4999b9a2ae66a4bb294c7512e400f2",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd83c4c925218604216279ceae67ec9294be952f/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd83c4c925218604216279ceae67ec9294be952f/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=dd83c4c925218604216279ceae67ec9294be952f",
        "patch": "@@ -11,10 +11,12 @@\n #include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n+#include <undo.h>\n #include <univalue.h>\n-#include <util/system.h>\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n@@ -176,7 +178,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"addresses\", a);\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags, int verbosity, const CTxUndo * txundo)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -187,6 +189,10 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n     UniValue vin(UniValue::VARR);\n+\n+    CAmount amt_total_in = 0;\n+    CAmount amt_total_out = 0;\n+\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n@@ -206,6 +212,20 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n                 }\n                 in.pushKV(\"txinwitness\", txinwitness);\n             }\n+            if (txundo != nullptr) {\n+                auto prevout = txundo->vprevout[i];\n+                amt_total_in += prevout.out.nValue;\n+                if (verbosity >= 3) {\n+                    UniValue p(UniValue::VOBJ);\n+                    p.pushKV(\"height\", (int64_t)prevout.nHeight);\n+                    p.pushKV(\"value\", ValueFromAmount(prevout.out.nValue));\n+                    p.pushKV(\"coinbase\", (bool)prevout.fCoinBase);\n+                    UniValue o(UniValue::VOBJ);\n+                    ScriptPubKeyToUniv(prevout.out.scriptPubKey, o, true);\n+                    p.pushKV(\"scriptPubKey\", o);\n+                    in.pushKV(\"prevout\", p);\n+                }\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);\n@@ -225,9 +245,17 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n         ScriptPubKeyToUniv(txout.scriptPubKey, o, true);\n         out.pushKV(\"scriptPubKey\", o);\n         vout.push_back(out);\n+\n+        amt_total_out += txout.nValue;\n     }\n     entry.pushKV(\"vout\", vout);\n \n+    if (txundo != nullptr && !tx.IsCoinBase()) {\n+        CAmount fees = amt_total_in - amt_total_out;\n+        assert(MoneyRange(fees));\n+        entry.pushKV(\"fees\", ValueFromAmount(fees));\n+    }\n+\n     if (!hashBlock.IsNull())\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n "
      },
      {
        "sha": "6f360108894d1c32d8baa88f8d836bf3f3987de6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 60,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd83c4c925218604216279ceae67ec9294be952f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd83c4c925218604216279ceae67ec9294be952f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=dd83c4c925218604216279ceae67ec9294be952f",
        "patch": "@@ -154,7 +154,7 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n     return result;\n }\n \n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails)\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, const int verbosity)\n {\n     // Serialize passed information without accessing chain state of the active chain!\n     AssertLockNotHeld(cs_main); // For performance reasons\n@@ -172,17 +172,29 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n     result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n     result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n-    for(const auto& tx : block.vtx)\n-    {\n-        if(txDetails)\n-        {\n+\n+    if (verbosity >= 2) {\n+        const CBlockUndo blockUndo = GetUndoChecked(blockindex);\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+\n+            const auto& tx = block.vtx.at(i);\n+            const CTxUndo* ptr_txundo;\n             UniValue objTx(UniValue::VOBJ);\n-            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags());\n+\n+            if (!tx->IsCoinBase()) {\n+                ptr_txundo = &blockUndo.vtxundo.at(i - 1);\n+            }\n+\n+            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags(), verbosity, ptr_txundo);\n             txs.push_back(objTx);\n         }\n-        else\n+    } else {\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n             txs.push_back(tx->GetHash().GetHex());\n+        }\n     }\n+\n     result.pushKV(\"tx\", txs);\n     result.pushKV(\"time\", block.GetBlockTime());\n     result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n@@ -845,58 +857,55 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n \n static UniValue getblock(const JSONRPCRequest& request)\n {\n-    const RPCHelpMan help{\"getblock\",\n-                \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-                \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n-                \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n-                {\n-                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n-                    {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n-                },\n-                {\n-                    RPCResult{\"for verbosity = 0\",\n-            \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"\n-                    },\n-                    RPCResult{\"for verbosity = 1\",\n-            \"{\\n\"\n-            \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n-            \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n-            \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n-            \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n-            \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n-            \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n-            \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n-            \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n-            \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"     ,...\\n\"\n-            \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n-            \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n-            \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n-            \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n-            \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n-            \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n-            \"}\\n\"\n-                    },\n-                    RPCResult{\"for verbosity = 2\",\n-            \"{\\n\"\n-            \"  ...,                     Same output as verbosity = 1.\\n\"\n-            \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n-            \"         ,...\\n\"\n-            \"  ],\\n\"\n-            \"  ,...                     Same output as verbosity = 1.\\n\"\n-            \"}\\n\"\n-                    },\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-            + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n-                },\n+    const RPCHelpMan help{\n+        \"getblock\",\n+        \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n+        \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n+        \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\"\n+        \"If verbosity is 3, returns an Object with information about block <hash> and information about each transaction prevout information for inputs. \\n\",\n+        {\n+            {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The block hash\"},\n+            {\"verbosity\", RPCArg::Type::NUM, /* default */ \"1\", \"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data\"},\n+        },\n+        {\n+            RPCResult{\"for verbosity = 0\",\n+                \"\\\"data\\\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\\n\"},\n+            RPCResult{\"for verbosity = 1\",\n+                \"{\\n\"\n+                \"  \\\"hash\\\" : \\\"hash\\\",     (string) the block hash (same as provided)\\n\"\n+                \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n+                \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n+                \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n+                \"  \\\"weight\\\" : n           (numeric) The block weight as defined in BIP 141\\n\"\n+                \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n+                \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n+                \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n+                \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n+                \"  \\\"tx\\\" : [               (array of string) The transaction ids\\n\"\n+                \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n+                \"     ,...\\n\"\n+                \"  ],\\n\"\n+                \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+                \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n+                \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n+                \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n+                \"  \\\"chainwork\\\" : \\\"xxxx\\\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\\n\"\n+                \"  \\\"nTx\\\" : n,             (numeric) The number of transactions in the block.\\n\"\n+                \"  \\\"previousblockhash\\\" : \\\"hash\\\",  (string) The hash of the previous block\\n\"\n+                \"  \\\"nextblockhash\\\" : \\\"hash\\\"       (string) The hash of the next block\\n\"\n+                \"}\\n\"},\n+            RPCResult{\"for verbosity = 2\",\n+                \"{\\n\"\n+                \"  ...,                     Same output as verbosity = 1.\\n\"\n+                \"  \\\"tx\\\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \\\"tx\\\" result.\\n\"\n+                \"         ,...\\n\"\n+                \"  ],\\n\"\n+                \"  ,...                     Same output as verbosity = 1.\\n\"\n+                \"}\\n\"},\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\") + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")},\n     };\n \n     if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n@@ -936,7 +945,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n         return strHex;\n     }\n \n-    return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n+    return blockToJSON(block, tip, pblockindex, verbosity);\n }\n \n struct CCoinsStats"
      },
      {
        "sha": "56551935f7d98285de369ecf23ea7d43e09eb1ec",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd83c4c925218604216279ceae67ec9294be952f/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd83c4c925218604216279ceae67ec9294be952f/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=dd83c4c925218604216279ceae67ec9294be952f",
        "patch": "@@ -32,7 +32,7 @@ double GetDifficulty(const CBlockIndex* blockindex);\n void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, bool txDetails = false) LOCKS_EXCLUDED(cs_main);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIndex* blockindex, int verbosity = 0) LOCKS_EXCLUDED(cs_main);\n \n /** Mempool information to JSON */\n UniValue MempoolInfoToJSON(const CTxMemPool& pool);"
      }
    ]
  }
]