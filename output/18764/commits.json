[
  {
    "sha": "eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWFhYTU4ZDJjY2MyNDNhNzUwNmQzNGJjYTQ3YzY3ODg2N2Q2ZGQ1",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-25T11:44:44Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-07T12:34:55Z"
      },
      "message": "test: replace inv type magic numbers by constants",
      "tree": {
        "sha": "674f8d72a49729f20138ef0acf81403277f37389",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/674f8d72a49729f20138ef0acf81403277f37389"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1cd2b5a97f435b75f860a1a4d95e15a2c3b270b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1cd2b5a97f435b75f860a1a4d95e15a2c3b270b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1cd2b5a97f435b75f860a1a4d95e15a2c3b270b"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 40,
      "deletions": 36
    },
    "files": [
      {
        "sha": "5d782026dc1135902d56159145b3956a66a6ba3e",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -15,7 +15,7 @@\n \n # Avoid wildcard * imports\n from test_framework.blocktools import (create_block, create_coinbase)\n-from test_framework.messages import CInv\n+from test_framework.messages import CInv, MSG_BLOCK\n from test_framework.mininode import (\n     P2PInterface,\n     mininode_lock,\n@@ -198,7 +198,7 @@ def run_test(self):\n \n         getdata_request = msg_getdata()\n         for block in blocks:\n-            getdata_request.inv.append(CInv(2, block))\n+            getdata_request.inv.append(CInv(MSG_BLOCK, block))\n         self.nodes[2].p2p.send_message(getdata_request)\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the"
      },
      {
        "sha": "9579a1715d3c19954694625184956886d59b8076",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -13,7 +13,7 @@\n from collections import defaultdict\n import time\n \n-from test_framework.messages import CInv, msg_getdata\n+from test_framework.messages import CInv, MSG_BLOCK, msg_getdata\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, mine_large_block\n@@ -84,7 +84,7 @@ def run_test(self):\n         # the same big old block too many times (expect: disconnect)\n \n         getdata_request = msg_getdata()\n-        getdata_request.inv.append(CInv(2, big_old_block))\n+        getdata_request.inv.append(CInv(MSG_BLOCK, big_old_block))\n \n         max_bytes_per_day = 800*1024*1024\n         daily_buffer = 144 * 4000000\n@@ -109,15 +109,15 @@ def run_test(self):\n         # Requesting the current block on p2p_conns[1] should succeed indefinitely,\n         # even when over the max upload target.\n         # We'll try 800 times\n-        getdata_request.inv = [CInv(2, big_new_block)]\n+        getdata_request.inv = [CInv(MSG_BLOCK, big_new_block)]\n         for i in range(800):\n             p2p_conns[1].send_and_ping(getdata_request)\n             assert_equal(p2p_conns[1].block_receive_map[big_new_block], i+1)\n \n         self.log.info(\"Peer 1 able to repeatedly download new block\")\n \n         # But if p2p_conns[1] tries for an old block, it gets disconnected too.\n-        getdata_request.inv = [CInv(2, big_old_block)]\n+        getdata_request.inv = [CInv(MSG_BLOCK, big_old_block)]\n         p2p_conns[1].send_message(getdata_request)\n         p2p_conns[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n@@ -145,12 +145,12 @@ def run_test(self):\n         self.nodes[0].add_p2p_connection(TestP2PConn())\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit\n-        getdata_request.inv = [CInv(2, big_new_block)]\n+        getdata_request.inv = [CInv(MSG_BLOCK, big_new_block)]\n         for i in range(20):\n             self.nodes[0].p2p.send_and_ping(getdata_request)\n             assert_equal(self.nodes[0].p2p.block_receive_map[big_new_block], i+1)\n \n-        getdata_request.inv = [CInv(2, big_old_block)]\n+        getdata_request.inv = [CInv(MSG_BLOCK, big_old_block)]\n         self.nodes[0].p2p.send_and_ping(getdata_request)\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1) #node is still connected because of the whitelist\n "
      },
      {
        "sha": "1990b9d3d125bafe9f946d647196c58310300979",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -10,7 +10,7 @@\n import random\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n+from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n@@ -44,7 +44,7 @@ def on_headers(self, message):\n \n     def on_inv(self, message):\n         for x in self.last_message[\"inv\"].inv:\n-            if x.type == 2:\n+            if x.type == MSG_BLOCK:\n                 self.block_announced = True\n                 self.announced_blockhashes.add(x.hash)\n \n@@ -380,7 +380,7 @@ def test_compactblock_requests(self, test_node, segwit=True):\n             block = self.build_block_on_tip(node, segwit=segwit)\n \n             if announce == \"inv\":\n-                test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                test_node.send_message(msg_inv([CInv(MSG_BLOCK, block.sha256)]))\n                 wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n@@ -564,7 +564,8 @@ def test_incorrect_blocktxn_response(self, test_node):\n \n         # We should receive a getdata request\n         test_node.wait_for_getdata([block.sha256], timeout=10)\n-        assert test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2 | MSG_WITNESS_FLAG\n+        assert test_node.last_message[\"getdata\"].inv[0].type == MSG_BLOCK or \\\n+               test_node.last_message[\"getdata\"].inv[0].type == MSG_BLOCK | MSG_WITNESS_FLAG\n \n         # Deliver the block\n         if version == 2:"
      },
      {
        "sha": "805cb1e84f6d8f38ea5070e23bc517a146f8d9df",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n import time\n \n-from test_framework.messages import msg_feefilter\n+from test_framework.messages import MSG_TX, msg_feefilter\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n@@ -31,7 +31,7 @@ def __init__(self):\n \n     def on_inv(self, message):\n         for i in message.inv:\n-            if (i.type == 1):\n+            if (i.type == MSG_TX):\n                 self.txinvs.append(hashToHex(i.hash))\n \n     def clear_invs(self):"
      },
      {
        "sha": "d743abe681fa1990bf84ea9ad7d5340b319b3af0",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -11,7 +11,7 @@\n import time\n \n from test_framework.blocktools import (create_block, create_coinbase)\n-from test_framework.messages import CInv\n+from test_framework.messages import CInv, MSG_BLOCK\n from test_framework.mininode import (\n     P2PInterface,\n     msg_headers,\n@@ -48,7 +48,7 @@ def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n     # Send a getdata request for a given block hash\n     def send_block_request(self, block_hash, node):\n         msg = msg_getdata()\n-        msg.inv.append(CInv(2, block_hash))  # 2 == \"Block\"\n+        msg.inv.append(CInv(MSG_BLOCK, block_hash))\n         node.send_message(msg)\n \n     # Send a getheaders request for a given single block hash"
      },
      {
        "sha": "e4e269e8711ebbdbfd0fa2e06bab6ed24f6f2b49",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -206,10 +206,10 @@ def test_msgtype(self):\n     def test_large_inv(self):\n         conn = self.nodes[0].add_p2p_connection(P2PInterface())\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (0 -> 20): message inv size() = 50001']):\n-            msg = messages.msg_inv([messages.CInv(1, 1)] * 50001)\n+            msg = messages.msg_inv([messages.CInv(messages.MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (20 -> 40): message getdata size() = 50001']):\n-            msg = messages.msg_getdata([messages.CInv(1, 1)] * 50001)\n+            msg = messages.msg_getdata([messages.CInv(messages.MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (40 -> 60): headers message size = 2001']):\n             msg = messages.msg_headers([messages.CBlockHeader()] * 2001)"
      },
      {
        "sha": "da30ad59778b7c468196d2ab8a0d9ee77ee766e8",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\n \n-from test_framework.messages import msg_getdata, CInv\n+from test_framework.messages import msg_getdata, CInv, MSG_TX\n from test_framework.mininode import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -37,7 +37,7 @@ def run_test(self):\n             txid = gen_node.sendtoaddress(gen_node.getnewaddress(), 0.01)\n \n             want_tx = msg_getdata()\n-            want_tx.inv.append(CInv(t=1, h=int(txid, 16)))\n+            want_tx.inv.append(CInv(t=MSG_TX, h=int(txid, 16)))\n             inbound_peer.last_message.pop('notfound', None)\n             inbound_peer.send_and_ping(want_tx)\n "
      },
      {
        "sha": "9c8c36c89e2d8e6ffe95e3ab215b8b4693e85d0b",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -8,7 +8,7 @@\n and that it responds to getdata requests for blocks correctly:\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n-from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_NETWORK_LIMITED, NODE_WITNESS\n+from test_framework.messages import CInv, MSG_BLOCK, msg_getdata, msg_verack, NODE_NETWORK_LIMITED, NODE_WITNESS\n from test_framework.mininode import P2PInterface, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -31,7 +31,7 @@ def wait_for_addr(self, timeout=5):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n     def send_getdata_for_block(self, blockhash):\n         getdata_request = msg_getdata()\n-        getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n+        getdata_request.inv.append(CInv(MSG_BLOCK, int(blockhash, 16)))\n         self.send_message(getdata_request)\n \n class NodeNetworkLimitedTest(BitcoinTestFramework):"
      },
      {
        "sha": "8a989097b4b59a28fb11dc84926354daa4a5e58c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -22,6 +22,8 @@\n     CTxOut,\n     CTxWitness,\n     MAX_BLOCK_BASE_SIZE,\n+    MSG_BLOCK,\n+    MSG_TX,\n     MSG_WITNESS_FLAG,\n     NODE_NETWORK,\n     NODE_WITNESS,\n@@ -157,7 +159,7 @@ def on_getdata(self, message):\n     def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True):\n         with mininode_lock:\n             self.last_message.pop(\"getdata\", None)\n-        self.send_message(msg_inv(inv=[CInv(1, tx.sha256)]))\n+        self.send_message(msg_inv(inv=[CInv(MSG_TX, tx.sha256)]))\n         if success:\n             self.wait_for_getdata([tx.sha256], timeout)\n         else:\n@@ -173,7 +175,7 @@ def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n         if use_header:\n             self.send_message(msg)\n         else:\n-            self.send_message(msg_inv(inv=[CInv(2, block.sha256)]))\n+            self.send_message(msg_inv(inv=[CInv(MSG_BLOCK, block.sha256)]))\n             self.wait_for_getheaders()\n             self.send_message(msg)\n         self.wait_for_getdata([block.sha256])\n@@ -576,7 +578,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n         # the getdata is just for the non-witness portion.\n         self.old_node.announce_tx_and_wait_for_getdata(tx)\n-        assert self.old_node.last_message[\"getdata\"].inv[0].type == 1\n+        assert self.old_node.last_message[\"getdata\"].inv[0].type == MSG_TX\n \n         # Since we haven't delivered the tx yet, inv'ing the same tx from\n         # a witness transaction ought not result in a getdata.\n@@ -1310,9 +1312,9 @@ def test_tx_relay_after_segwit_activation(self):\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n-        self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n+        self.old_node.wait_for_inv([CInv(MSG_TX, tx2.sha256)])  # wait until tx2 was inv'ed\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n-        self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n+        self.old_node.wait_for_inv([CInv(MSG_TX, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n         # hash, size, vsize"
      },
      {
        "sha": "481b1c184161769379d2de25709ab3914743a804",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -92,6 +92,7 @@\n     NODE_WITNESS,\n     P2PInterface,\n     mininode_lock,\n+    MSG_BLOCK,\n     msg_block,\n     msg_getblocks,\n     msg_getdata,\n@@ -120,7 +121,7 @@ def send_get_data(self, block_hashes):\n         \"\"\"Request data for a list of block hashes.\"\"\"\n         msg = msg_getdata()\n         for x in block_hashes:\n-            msg.inv.append(CInv(2, x))\n+            msg.inv.append(CInv(MSG_BLOCK, x))\n         self.send_message(msg)\n \n     def send_get_headers(self, locator, hashstop):\n@@ -131,7 +132,7 @@ def send_get_headers(self, locator, hashstop):\n \n     def send_block_inv(self, blockhash):\n         msg = msg_inv()\n-        msg.inv = [CInv(2, blockhash)]\n+        msg.inv = [CInv(MSG_BLOCK, blockhash)]\n         self.send_message(msg)\n \n     def send_header_for_blocks(self, new_blocks):"
      },
      {
        "sha": "10f5eea0e5ef0fb007559643c9581d005fc1bd63",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -63,7 +63,7 @@ def test_tx_requests(self):\n         txid = 0xdeadbeef\n \n         self.log.info(\"Announce the txid from each incoming peer to node 0\")\n-        msg = msg_inv([CInv(t=1, h=txid)])\n+        msg = msg_inv([CInv(t=MSG_TX, h=txid)])\n         for p in self.nodes[0].p2ps:\n             p.send_and_ping(msg)\n \n@@ -104,7 +104,7 @@ def test_inv_block(self):\n \n         self.log.info(\n             \"Announce the transaction to all nodes from all {} incoming peers, but never send it\".format(NUM_INBOUND))\n-        msg = msg_inv([CInv(t=1, h=txid)])\n+        msg = msg_inv([CInv(t=MSG_TX, h=txid)])\n         for p in self.peers:\n             p.send_and_ping(msg)\n \n@@ -135,13 +135,13 @@ def test_in_flight_max(self):\n         with mininode_lock:\n             p.tx_getdata_count = 0\n \n-        p.send_message(msg_inv([CInv(t=1, h=i) for i in txids]))\n+        p.send_message(msg_inv([CInv(t=MSG_TX, h=i) for i in txids]))\n         wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT, lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT)\n \n         self.log.info(\"Now check that if we send a NOTFOUND for a transaction, we'll get one more request\")\n-        p.send_message(msg_notfound(vec=[CInv(t=1, h=txids[0])]))\n+        p.send_message(msg_notfound(vec=[CInv(t=MSG_TX, h=txids[0])]))\n         wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT + 1, timeout=10, lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT + 1)\n@@ -154,7 +154,7 @@ def test_in_flight_max(self):\n \n     def test_spurious_notfound(self):\n         self.log.info('Check that spurious notfound is ignored')\n-        self.nodes[0].p2ps[0].send_message(msg_notfound(vec=[CInv(1, 1)]))\n+        self.nodes[0].p2ps[0].send_message(msg_notfound(vec=[CInv(MSG_TX, 1)]))\n \n     def run_test(self):\n         # Setup the p2p connections"
      },
      {
        "sha": "c32316884836c01d20d7c6f8eeb54e5289c7cab2",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeaaa58d2ccc243a7506d34bca47c678867d6dd5/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "patch": "@@ -54,7 +54,7 @@\n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n-from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv\n+from test_framework.messages import CBlockHeader, CInv, MSG_BLOCK, msg_block, msg_headers, msg_inv\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -210,7 +210,7 @@ def run_test(self):\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n+            test_node.send_message(msg_inv([CInv(MSG_BLOCK, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n         with mininode_lock:"
      }
    ]
  },
  {
    "sha": "b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzVlMWQyNDcxYzNkOWUwYjZjYzRiOTRmNDcyNmE3ZTZlYTMyMjA2",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-04-25T12:12:58Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-07T12:34:55Z"
      },
      "message": "test: add inventory type constant MSG_CMPCT_BLOCK",
      "tree": {
        "sha": "8f08c7abda5cbd718aae150bd923d84562dc18e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f08c7abda5cbd718aae150bd923d84562dc18e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeaaa58d2ccc243a7506d34bca47c678867d6dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeaaa58d2ccc243a7506d34bca47c678867d6dd5"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d77a744758c85f4efc5895b7f4d13115c28114d2",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
        "patch": "@@ -10,7 +10,7 @@\n import random\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n+from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n@@ -307,7 +307,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         # Now fetch the compact block using a normal non-announce getdata\n         with mininode_lock:\n             test_node.clear_block_announcement()\n-            inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n+            inv = CInv(MSG_CMPCT_BLOCK, block_hash)\n             test_node.send_message(msg_getdata([inv]))\n \n         wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n@@ -634,7 +634,7 @@ def test_compactblocks_not_at_tip(self, test_node):\n             wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n-        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        test_node.send_message(msg_getdata([CInv(MSG_CMPCT_BLOCK, int(new_blocks[0], 16))]))\n         wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n@@ -643,7 +643,7 @@ def test_compactblocks_not_at_tip(self, test_node):\n         test_node.clear_block_announcement()\n         with mininode_lock:\n             test_node.last_message.pop(\"block\", None)\n-        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        test_node.send_message(msg_getdata([CInv(MSG_CMPCT_BLOCK, int(new_blocks[0], 16))]))\n         wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()"
      },
      {
        "sha": "f97fb89c27ba73def67342fef7e92633ad270772",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
        "patch": "@@ -54,6 +54,7 @@\n MSG_TX = 1\n MSG_BLOCK = 2\n MSG_FILTERED_BLOCK = 3\n+MSG_CMPCT_BLOCK = 4\n MSG_WITNESS_FLAG = 1 << 30\n MSG_TYPE_MASK = 0xffffffff >> 2\n "
      }
    ]
  },
  {
    "sha": "4a614ff88ac71d6457513a4f7aa8a3235874ff3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTYxNGZmODhhYzcxZDY0NTc1MTNhNGY3YWE4YTMyMzU4NzRmZjNm",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-07T12:32:44Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-05-07T12:34:55Z"
      },
      "message": "test: explicit imports from test_framework.messages in p2p_invalid_messages.py",
      "tree": {
        "sha": "7eaeaf5fec5600864aca0f0460ee0d0161d32091",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7eaeaf5fec5600864aca0f0460ee0d0161d32091"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a614ff88ac71d6457513a4f7aa8a3235874ff3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a614ff88ac71d6457513a4f7aa8a3235874ff3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a614ff88ac71d6457513a4f7aa8a3235874ff3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a614ff88ac71d6457513a4f7aa8a3235874ff3f/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b35e1d2471c3d9e0b6cc4b94f4726a7e6ea32206"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "81302374c9d975b0887d54d791a2b50c350e5a1c",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a614ff88ac71d6457513a4f7aa8a3235874ff3f/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a614ff88ac71d6457513a4f7aa8a3235874ff3f/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=4a614ff88ac71d6457513a4f7aa8a3235874ff3f",
        "patch": "@@ -7,7 +7,16 @@\n import struct\n import sys\n \n-from test_framework import messages\n+from test_framework.messages import (\n+    CBlockHeader,\n+    CInv,\n+    msg_getdata,\n+    msg_headers,\n+    msg_inv,\n+    msg_ping,\n+    MSG_TX,\n+    ser_string,\n+)\n from test_framework.mininode import (\n     NetworkThread,\n     P2PDataStore,\n@@ -25,7 +34,7 @@ def __init__(self, *, str_data):\n         self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n \n     def serialize(self):\n-        return messages.ser_string(self.str_data)\n+        return ser_string(self.str_data)\n \n     def __repr__(self):\n         return \"{}(data={})\".format(self.msgtype, self.str_data)\n@@ -135,7 +144,7 @@ def run_test(self):\n             # For some reason unknown to me, we sometimes have to push additional data to the\n             # peer in order for it to realize a disconnect.\n             try:\n-                node.p2p.send_message(messages.msg_ping(nonce=123123))\n+                node.p2p.send_message(msg_ping(nonce=123123))\n             except IOError:\n                 pass\n \n@@ -158,7 +167,7 @@ async def swap_magic_bytes():\n         asyncio.run_coroutine_threadsafe(swap_magic_bytes(), NetworkThread.network_event_loop).result()\n \n         with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART ping']):\n-            conn.send_message(messages.msg_ping(nonce=0xff))\n+            conn.send_message(msg_ping(nonce=0xff))\n             conn.wait_for_disconnect(timeout=1)\n             self.nodes[0].disconnect_p2ps()\n \n@@ -206,13 +215,13 @@ def test_msgtype(self):\n     def test_large_inv(self):\n         conn = self.nodes[0].add_p2p_connection(P2PInterface())\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (0 -> 20): message inv size() = 50001']):\n-            msg = messages.msg_inv([messages.CInv(messages.MSG_TX, 1)] * 50001)\n+            msg = msg_inv([CInv(MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (20 -> 40): message getdata size() = 50001']):\n-            msg = messages.msg_getdata([messages.CInv(messages.MSG_TX, 1)] * 50001)\n+            msg = msg_getdata([CInv(MSG_TX, 1)] * 50001)\n             conn.send_and_ping(msg)\n         with self.nodes[0].assert_debug_log(['Misbehaving', 'peer=4 (40 -> 60): headers message size = 2001']):\n-            msg = messages.msg_headers([messages.CBlockHeader()] * 2001)\n+            msg = msg_headers([CBlockHeader()] * 2001)\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()\n "
      }
    ]
  }
]