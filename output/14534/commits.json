[
  {
    "sha": "0ad199b543465f6aead05ee9014907eca36049e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWQxOTliNTQzNDY1ZjZhZWFkMDVlZTkwMTQ5MDdlY2EzNjA0OWU1",
    "commit": {
      "author": {
        "name": "John Bampton",
        "email": "jbampton@users.noreply.github.com",
        "date": "2018-10-20T22:12:00Z"
      },
      "committer": {
        "name": "John Bampton",
        "email": "jbampton@users.noreply.github.com",
        "date": "2018-10-21T00:54:35Z"
      },
      "message": "Enable flake8 rule E225 which checks for missing whitespace around operators\n\nLint Python code for rule E225",
      "tree": {
        "sha": "873f2113f57000bd0255f1d0b39b9bde6469998e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/873f2113f57000bd0255f1d0b39b9bde6469998e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ad199b543465f6aead05ee9014907eca36049e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ad199b543465f6aead05ee9014907eca36049e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ad199b543465f6aead05ee9014907eca36049e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ad199b543465f6aead05ee9014907eca36049e5/comments",
    "author": {
      "login": "jbampton",
      "id": 418747,
      "node_id": "MDQ6VXNlcjQxODc0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/418747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbampton",
      "html_url": "https://github.com/jbampton",
      "followers_url": "https://api.github.com/users/jbampton/followers",
      "following_url": "https://api.github.com/users/jbampton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbampton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbampton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbampton/subscriptions",
      "organizations_url": "https://api.github.com/users/jbampton/orgs",
      "repos_url": "https://api.github.com/users/jbampton/repos",
      "events_url": "https://api.github.com/users/jbampton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbampton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jbampton",
      "id": 418747,
      "node_id": "MDQ6VXNlcjQxODc0Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/418747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbampton",
      "html_url": "https://github.com/jbampton",
      "followers_url": "https://api.github.com/users/jbampton/followers",
      "following_url": "https://api.github.com/users/jbampton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbampton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbampton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbampton/subscriptions",
      "organizations_url": "https://api.github.com/users/jbampton/orgs",
      "repos_url": "https://api.github.com/users/jbampton/repos",
      "events_url": "https://api.github.com/users/jbampton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbampton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96c409c919b97c8c645f7e42b35c6e5c2d2e2160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96c409c919b97c8c645f7e42b35c6e5c2d2e2160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96c409c919b97c8c645f7e42b35c6e5c2d2e2160"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 52,
      "deletions": 51
    },
    "files": [
      {
        "sha": "99210d948121f109b5ec4200b06f349fca72e9ff",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -33,7 +33,7 @@ def content_hash(filename):\n \n outputArray = []\n for folder in folders:\n-    absFolder=os.path.join(basePath, folder)\n+    absFolder = os.path.join(basePath, folder)\n     for file in os.listdir(absFolder):\n         extension = os.path.splitext(file)[1]\n         if extension.lower() == '.png':"
      },
      {
        "sha": "1fb1824af5253881c6cb4c3a94963477fd117222",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -28,7 +28,7 @@ def check_ELF_PIE(executable):\n     ok = False\n     for line in stdout.splitlines():\n         line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+        if len(line) >= 2 and line[0] == 'Type:' and line[1] == 'DYN':\n             ok = True\n     return ok\n \n@@ -97,7 +97,7 @@ def check_ELF_RELRO(executable):\n         raise IOError('Error opening file')\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n+        if len(tokens) > 1 and tokens[1] == '(BIND_NOW)' or (len(tokens) > 2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n             have_bindnow = True\n     return have_gnu_relro and have_bindnow\n \n@@ -129,9 +129,9 @@ def get_PE_dll_characteristics(executable):\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'architecture:':\n+        if len(tokens) >= 2 and tokens[0] == 'architecture:':\n             arch = tokens[1].rstrip(',')\n-        if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n+        if len(tokens) >= 2 and tokens[0] == 'DllCharacteristics':\n             bits = int(tokens[1],16)\n     return (arch,bits)\n "
      },
      {
        "sha": "62d6ffc2cf81e460424fbb0a2126d8973ee100ab",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -114,7 +114,7 @@ def read_symbols(executable, imports=True):\n         line = line.split()\n         if 'Machine:' in line:\n             arch = line[-1]\n-        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n+        if len(line) > 7 and re.match('[0-9]+:$', line[0]):\n             (sym, _, version) = line[7].partition('@')\n             is_import = line[6] == 'UND'\n             if version.startswith('@'):\n@@ -142,7 +142,7 @@ def read_libraries(filename):\n     libraries = []\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n+        if len(tokens) > 2 and tokens[1] == '(NEEDED)':\n             match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n             if match:\n                 libraries.append(match.group(1))"
      },
      {
        "sha": "8f7374c2915363798c47f2ce58180bc43ae250e9",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -164,8 +164,8 @@ def main():\n     args.is_bionic = b'bionic' in subprocess.check_output(['lsb_release', '-cs'])\n \n     if args.buildsign:\n-        args.build=True\n-        args.sign=True\n+        args.build = True\n+        args.sign = True\n \n     if args.kvm and args.docker:\n         raise Exception('Error: cannot have both kvm and docker')"
      },
      {
        "sha": "8d1c68bb719f50889bbf380ad4b17d0a5d7ae3d0",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -201,7 +201,7 @@ class DeploymentInfo(object):\n def getFrameworks(binaryPath, verbose):\n     if verbose >= 3:\n         print(\"Inspecting with otool: \" + binaryPath)\n-    otoolbin=os.getenv(\"OTOOL\", \"otool\")\n+    otoolbin = os.getenv(\"OTOOL\", \"otool\")\n     otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n     o_stdout, o_stderr = otool.communicate()\n     if otool.returncode != 0:\n@@ -228,7 +228,7 @@ def getFrameworks(binaryPath, verbose):\n     return libraries\n \n def runInstallNameTool(action, *args):\n-    installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n+    installnametoolbin = os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n     subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n \n def changeInstallName(oldName, newName, binaryPath, verbose):\n@@ -247,7 +247,7 @@ def changeIdentification(id, binaryPath, verbose):\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath, verbose):\n-    stripbin=os.getenv(\"STRIP\", \"strip\")\n+    stripbin = os.getenv(\"STRIP\", \"strip\")\n     if verbose >= 3:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n@@ -467,7 +467,7 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n             if dependency.frameworkName not in deploymentInfo.deployedFrameworks:\n                 deployFrameworks([dependency], appBundleInfo.path, destinationPath, strip, verbose, deploymentInfo)\n \n-qt_conf=\"\"\"[Paths]\n+qt_conf = \"\"\"[Paths]\n Translations=Resources\n Plugins=PlugIns\n \"\"\""
      },
      {
        "sha": "fb617d143962ac4bb0d2e57c9f26d9eb7f466bb6",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -44,7 +44,7 @@\n pchOnionCat = bytearray([0xFD,0x87,0xD8,0x7E,0xEB,0x43])\n \n def name_to_ipv6(addr):\n-    if len(addr)>6 and addr.endswith('.onion'):\n+    if len(addr) > 6 and addr.endswith('.onion'):\n         vchAddr = b32decode(addr[0:-6], True)\n         if len(vchAddr) != 16-len(pchOnionCat):\n             raise ValueError('Invalid onion %s' % vchAddr)\n@@ -113,7 +113,7 @@ def process_nodes(g, f, structname, defaultport):\n     g.write('\\n};\\n')\n \n def main():\n-    if len(sys.argv)<2:\n+    if len(sys.argv) < 2:\n         print(('Usage: %s <path_to_nodes_txt>' % sys.argv[0]), file=sys.stderr)\n         sys.exit(1)\n     g = sys.stdout"
      },
      {
        "sha": "378f9ce5a5cd104af2c0f0168d93924fbd27152a",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -11,9 +11,9 @@\n import dns.resolver\n import collections\n \n-NSEEDS=512\n+NSEEDS = 512\n \n-MAX_SEEDS_PER_ASN=2\n+MAX_SEEDS_PER_ASN = 2\n \n MIN_BLOCKS = 337600\n \n@@ -104,7 +104,7 @@ def filtermultiport(ips):\n     hist = collections.defaultdict(list)\n     for ip in ips:\n         hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]\n+    return [value[0] for (key,value) in list(hist.items()) if len(value) == 1]\n \n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):"
      },
      {
        "sha": "3c711f7231459f36ced29ba72096589ca04b21d5",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -100,7 +100,7 @@ def b58decode_chk(v):\n def get_bcaddress_version(strAddress):\n     \"\"\" Returns None if strAddress is invalid.  Otherwise returns integer version of address. \"\"\"\n     addr = b58decode_chk(strAddress)\n-    if addr is None or len(addr)!=21:\n+    if addr is None or len(addr) != 21:\n         return None\n     version = addr[0]\n     return ord(version)"
      },
      {
        "sha": "dd75c20ec5b20869455d64a82f9c8c95ec540135",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -173,7 +173,7 @@ def gen_invalid_base58_vector(template):\n         suffix = bytearray(template[2])\n \n     val = b58encode_chk(prefix + payload + suffix)\n-    if random.randint(0,10)<1: # line corruption\n+    if random.randint(0,10) < 1: # line corruption\n         if randbool(): # add random character to end\n             val += random.choice(b58chars)\n         else: # replace random character in the middle"
      },
      {
        "sha": "101700efec9fa92a106f8e6421e5dd648adc0143",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -11,8 +11,8 @@\n import os\n import sys\n \n-OUT_CPP=\"qt/bitcoinstrings.cpp\"\n-EMPTY=['\"\"']\n+OUT_CPP = \"qt/bitcoinstrings.cpp\"\n+EMPTY = ['\"\"']\n \n def parse_po(text):\n     \"\"\"\n@@ -53,7 +53,7 @@ def parse_po(text):\n files = sys.argv[1:]\n \n # xgettext -n --keyword=_ $FILES\n-XGETTEXT=os.getenv('XGETTEXT', 'xgettext')\n+XGETTEXT = os.getenv('XGETTEXT', 'xgettext')\n if not XGETTEXT:\n     print('Cannot extract strings: xgettext utility is not installed or not configured.',file=sys.stderr)\n     print('Please install package \"gettext\" and re-run \\'./configure\\'.',file=sys.stderr)"
      },
      {
        "sha": "b0db65173ca4daba8888b0f7d36e4daacd477828",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -82,7 +82,7 @@ def run_test(self):\n \n         self.log.info(\"Test 4: Non-NULLDUMMY base multisig transaction is invalid after activation\")\n         test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, amount=46)\n-        test6txs=[CTransaction(test4tx)]\n+        test6txs = [CTransaction(test4tx)]\n         trueDummy(test4tx)\n         assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])"
      },
      {
        "sha": "eb1f2e622b407731cdd39c7f8e24fa46e50b9869",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -471,7 +471,7 @@ def run_test(self):\n         uncompressed_solvable_address = [key_to_p2pkh(pubkeys[6])]\n \n         spendable_after_addwitnessaddress = []      # These outputs should be seen after importaddress\n-        solvable_after_addwitnessaddress=[]         # These outputs should be seen after importaddress but not spendable\n+        solvable_after_addwitnessaddress = []       # These outputs should be seen after importaddress but not spendable\n         unseen_anytime = []                         # These outputs should never be seen\n         solvable_anytime = []                       # These outputs should be solvable after importpubkey\n         unseen_anytime = []                         # These outputs should never be seen"
      },
      {
        "sha": "be299f96a548bff97ad66b99d5386c9f39f51668",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -31,13 +31,13 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock != None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock != None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n@@ -48,13 +48,13 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock != None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n+        assert(conn.sock != None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n@@ -65,7 +65,7 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock==None) #now the connection must be closed after the response\n+        assert(conn.sock == None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n@@ -88,7 +88,7 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n         assert(b'\"error\":null' in out1)\n-        assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n+        assert(conn.sock != None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)"
      },
      {
        "sha": "ee2057ccf5add1ff9924ff9eb14ece15e0ac3e69",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -443,7 +443,7 @@ def build_block_with_transactions(self, node, utxo, num_transactions):\n     # node needs, and that responding to them causes the block to be\n     # reconstructed.\n     def test_getblocktxn_requests(self, node, test_node, version):\n-        with_witness = (version==2)\n+        with_witness = (version == 2)\n \n         def test_getblocktxn_response(compact_block, peer, expected_result):\n             msg = msg_cmpctblock(compact_block.to_p2p())\n@@ -560,7 +560,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         # verifying that the block isn't marked bad permanently. This is good\n         # enough for now.\n         msg = msg_blocktxn()\n-        if version==2:\n+        if version == 2:\n             msg = msg_witness_blocktxn()\n         msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n         test_node.send_and_ping(msg)\n@@ -575,7 +575,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n \n         # Deliver the block\n-        if version==2:\n+        if version == 2:\n             test_node.send_and_ping(msg_witness_block(block))\n         else:\n             test_node.send_and_ping(msg_block(block))"
      },
      {
        "sha": "3c95bbe414ae44e9cf51193d137f5ddf19035d5f",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -135,7 +135,7 @@ def decodescript_script_pub_key(self):\n         # just imagine that the pub keys used below are different.\n         # the purpose of this test is to check that a segwit script is not returned for bare multisig scripts\n         # with an uncompressed pubkey in them.\n-        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_uncompressed_public_key +'52ae')\n+        rpc_result = self.nodes[0].decodescript('52' + push_public_key + push_uncompressed_public_key + '52ae')\n         assert_equal('2 ' + public_key + ' ' + uncompressed_public_key + ' 2 OP_CHECKMULTISIG', rpc_result['asm'])\n         # uncompressed pubkeys are invalid for checksigs in segwit scripts.\n         # decodescript should not return a P2WPKH equivalent."
      },
      {
        "sha": "039a5184a85afa7b340b56ac589ceeb1ba2d1f24",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -271,7 +271,7 @@ def run_test(self):\n         for i, out in enumerate(dec_tx['vout']):\n             totalOut += out['value']\n             if out['scriptPubKey']['addresses'][0] in outputs:\n-                matchingOuts+=1\n+                matchingOuts += 1\n             else:\n                 assert_equal(i, rawtxfund['changepos'])\n \n@@ -302,7 +302,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n             if out['scriptPubKey']['addresses'][0] in outputs:\n-                matchingOuts+=1\n+                matchingOuts += 1\n \n         assert_equal(matchingOuts, 1)\n         assert_equal(len(dec_tx['vout']), 2)\n@@ -311,7 +311,7 @@ def run_test(self):\n         for vinOut in dec_tx['vin']:\n             for vinIn in inputs:\n                 if vinIn['txid'] == vinOut['txid']:\n-                    matchingIns+=1\n+                    matchingIns += 1\n \n         assert_equal(matchingIns, 2) #we now must see two vins identical to vins given as params\n \n@@ -335,7 +335,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n             if out['scriptPubKey']['addresses'][0] in outputs:\n-                matchingOuts+=1\n+                matchingOuts += 1\n \n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)"
      },
      {
        "sha": "3cee6cdb4f8471e954252f25806c323c2373401a",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         node1_addr = self.nodes[1].getnewaddress()\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n-        txid2 =self.nodes[0].sendtoaddress(node2_addr, 13)\n+        txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n         self.nodes[0].generate(6)\n         self.sync_all()\n         vout1 = find_output(self.nodes[1], txid1, 13)"
      },
      {
        "sha": "0a5792da30609682452aeefeaddece5b5b09e96e",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -147,7 +147,7 @@ def run_test(self):\n             addrinfo = self.nodes[0].getaddressinfo(addr)\n             pubkey = addrinfo[\"scriptPubKey\"]\n \n-            self.log.info('sendrawtransaction with missing prevtx info (%s)' %(type))\n+            self.log.info('sendrawtransaction with missing prevtx info (%s)' % (type))\n \n             # Test `signrawtransactionwithwallet` invalid `prevtxs`\n             inputs  = [ {'txid' : txid, 'vout' : 3, 'sequence' : 1000}]\n@@ -402,7 +402,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n+        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n \n         # 9. invalid parameters - sequence number out of range\n@@ -418,7 +418,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n+        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n \n         ####################################"
      },
      {
        "sha": "e9772b396921f872d067689a724d5ae461d211ac",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -39,7 +39,7 @@ def get_socket_inodes(pid):\n     return inodes\n \n def _remove_empty(array):\n-    return [x for x in array if x !='']\n+    return [x for x in array if x != '']\n \n def _convert_ip_port(array):\n     host,port = array.split(':')"
      },
      {
        "sha": "550941da4af44f88bac5aae3052f2c76eecaa295",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -101,7 +101,7 @@ def __new__(cls, n):\n OP_1NEGATE = CScriptOp(0x4f)\n OP_RESERVED = CScriptOp(0x50)\n OP_1 = CScriptOp(0x51)\n-OP_TRUE=OP_1\n+OP_TRUE = OP_1\n OP_2 = CScriptOp(0x52)\n OP_3 = CScriptOp(0x53)\n OP_4 = CScriptOp(0x54)"
      },
      {
        "sha": "09233aa74771fb5816c38d6ebe0f9b0b03547ee3",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n         nB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txB, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n         nC = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txC, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n \n-        inputs =[]\n+        inputs = []\n         # spend 10btc outputs from txA and txB\n         inputs.append({\"txid\":txA, \"vout\":nA})\n         inputs.append({\"txid\":txB, \"vout\":nB})\n@@ -145,7 +145,7 @@ def run_test(self):\n \n         # Create a double spend of AB1 by spending again from only A's 10 output\n         # Mine double spend from node 1\n-        inputs =[]\n+        inputs = []\n         inputs.append({\"txid\":txA, \"vout\":nA})\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")"
      },
      {
        "sha": "8843b6b315ec57e02049ea47763d0d33e31e39dc",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -109,7 +109,7 @@ def run_test(self):\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n-            vaddr= self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n+            vaddr = self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n             addrs.append(vaddr)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "b8bde5f8c4f5ea9e5e2e4310d5d58dd9e8cec666",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n+        change_addrV = self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n@@ -61,7 +61,7 @@ def run_test(self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n+        change_addrV = self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()"
      },
      {
        "sha": "0abfd5e487db5848a19446c90e85c136217cef07",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ad199b543465f6aead05ee9014907eca36049e5/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ad199b543465f6aead05ee9014907eca36049e5/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=0ad199b543465f6aead05ee9014907eca36049e5",
        "patch": "@@ -19,6 +19,7 @@ export LC_ALL=C\n # E133 closing bracket is missing indentation\n # E223 tab before operator\n # E224 tab after operator\n+# E225 missing whitespace around operator\n # E242 tab after ','\n # E266 too many leading '#' for block comment\n # E271 multiple spaces after keyword\n@@ -87,4 +88,4 @@ elif PYTHONWARNINGS=\"ignore\" flake8 --version | grep -q \"Python 2\"; then\n     exit 0\n fi\n \n-PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=E101,E112,E113,E115,E116,E125,E129,E131,E133,E223,E224,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E714,E721,E741,E742,E743,E901,E902,F401,F402,F403,F404,F405,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W191,W291,W292,W293,W504,W601,W602,W603,W604,W605,W606 \"${@:-.}\"\n+PYTHONWARNINGS=\"ignore\" flake8 --ignore=B,C,E,F,I,N,W --select=E101,E112,E113,E115,E116,E125,E129,E131,E133,E223,E224,E225,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E714,E721,E741,E742,E743,E901,E902,F401,F402,F403,F404,F405,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W191,W291,W292,W293,W504,W601,W602,W603,W604,W605,W606 \"${@:-.}\""
      }
    ]
  }
]