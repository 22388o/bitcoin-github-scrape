[
  {
    "sha": "e4daecda0bcd47a2672eb625232f00e388a3cd87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGRhZWNkYTBiY2Q0N2EyNjcyZWI2MjUyMzJmMDBlMzg4YTNjZDg3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-10-12T13:18:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2013-10-15T09:09:29Z"
      },
      "message": "Reimplement CBlockLocator's chain-related logic in CChain.\n\nThis removes a few unused CBlockLocator methods, and moves the\nconstruction and fork-finding logic to CChain (which can do these\nmore efficiently, as it has a height-indexable chain available).\nIt also makes CBlockLocator independent from the validation code.",
      "tree": {
        "sha": "cc58a832fbf4ccac98abdb3c2c6f16fe120f3c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc58a832fbf4ccac98abdb3c2c6f16fe120f3c45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4daecda0bcd47a2672eb625232f00e388a3cd87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4daecda0bcd47a2672eb625232f00e388a3cd87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4daecda0bcd47a2672eb625232f00e388a3cd87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4daecda0bcd47a2672eb625232f00e388a3cd87/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2ba55c42b563418e7be4adb38cdbf1852e6c78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ba55c42b563418e7be4adb38cdbf1852e6c78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ba55c42b563418e7be4adb38cdbf1852e6c78d"
      }
    ],
    "stats": {
      "total": 162,
      "additions": 54,
      "deletions": 108
    },
    "files": [
      {
        "sha": "8736031da442befc1cb36ecaba7f921ae0574fca",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "patch": "@@ -16,7 +16,7 @@\n #include <db_cxx.h>\n \n class CAddrMan;\n-class CBlockLocator;\n+struct CBlockLocator;\n class CDiskBlockIndex;\n class CMasterKey;\n class COutPoint;"
      },
      {
        "sha": "fce5992255db727de2c048e34cfdd815877b1dde",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "patch": "@@ -116,7 +116,7 @@ void Shutdown()\n     {\n         LOCK(cs_main);\n         if (pwalletMain)\n-            pwalletMain->SetBestChain(CBlockLocator(chainActive.Tip()));\n+            pwalletMain->SetBestChain(chainActive.GetLocator());\n         if (pblocktree)\n             pblocktree->Flush();\n         if (pcoinsTip)\n@@ -912,7 +912,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 strErrors << _(\"Cannot write default address\") << \"\\n\";\n         }\n \n-        pwalletMain->SetBestChain(CBlockLocator(chainActive.Tip()));\n+        pwalletMain->SetBestChain(chainActive.GetLocator());\n     }\n \n     LogPrintf(\"%s\", strErrors.str().c_str());\n@@ -928,7 +928,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         CWalletDB walletdb(strWalletFile);\n         CBlockLocator locator;\n         if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n+            pindexRescan = chainActive.FindFork(locator);\n         else\n             pindexRescan = chainActive.Genesis();\n     }\n@@ -939,7 +939,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         nStart = GetTimeMillis();\n         pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n         LogPrintf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-        pwalletMain->SetBestChain(CBlockLocator(chainActive.Tip()));\n+        pwalletMain->SetBestChain(chainActive.GetLocator());\n         nWalletDBUpdated++;\n     }\n "
      },
      {
        "sha": "cfa99b34b8ad3fb8e0df7ec3caefe88d3ee3b77c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 85,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "patch": "@@ -190,105 +190,61 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n \n //////////////////////////////////////////////////////////////////////////////\n //\n-// CBlockLocator implementation\n+// CChain implementation\n //\n \n-CBlockLocator::CBlockLocator(uint256 hashBlock)\n-{\n-    std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n-    if (mi != mapBlockIndex.end())\n-        Set((*mi).second);\n+CBlockIndex *CChain::SetTip(CBlockIndex *pindex) {\n+    if (pindex == NULL) {\n+        vChain.clear();\n+        return NULL;\n+    }\n+    vChain.resize(pindex->nHeight + 1);\n+    while (pindex && vChain[pindex->nHeight] != pindex) {\n+        vChain[pindex->nHeight] = pindex;\n+        pindex = pindex->pprev;\n+    }\n+    return pindex;\n }\n \n-void CBlockLocator::Set(const CBlockIndex* pindex)\n-{\n-    vHave.clear();\n+CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n     int nStep = 1;\n-    while (pindex)\n-    {\n-        vHave.push_back(pindex->GetBlockHash());\n+    std::vector<uint256> vHave;\n+    vHave.reserve(32);\n \n-        // Exponentially larger steps back\n-        for (int i = 0; pindex && i < nStep; i++)\n+    if (!pindex)\n+        pindex = Tip();\n+    while (pindex) {\n+        vHave.push_back(pindex->GetBlockHash());\n+        // Stop when we have added the genesis block.\n+        if (pindex->nHeight == 0)\n+            break;\n+        // Exponentially larger steps back, plus the genesis block.\n+        int nHeight = std::max(pindex->nHeight - nStep, 0);\n+        // In case pindex is not in this chain, iterate pindex->pprev to find blocks.\n+        while (pindex->nHeight > nHeight && !Contains(pindex))\n             pindex = pindex->pprev;\n+        // If pindex is in this chain, use direct height-based access.\n+        if (pindex->nHeight > nHeight)\n+            pindex = (*this)[nHeight];\n         if (vHave.size() > 10)\n             nStep *= 2;\n     }\n-    vHave.push_back(Params().HashGenesisBlock());\n-}\n \n-int CBlockLocator::GetDistanceBack()\n-{\n-    // Retrace how far back it was in the sender's branch\n-    int nDistance = 0;\n-    int nStep = 1;\n-    BOOST_FOREACH(const uint256& hash, vHave)\n-    {\n-        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-        if (mi != mapBlockIndex.end())\n-        {\n-            CBlockIndex* pindex = (*mi).second;\n-            if (chainActive.Contains(pindex))\n-                return nDistance;\n-        }\n-        nDistance += nStep;\n-        if (nDistance > 10)\n-            nStep *= 2;\n-    }\n-    return nDistance;\n+    return CBlockLocator(vHave);\n }\n \n-CBlockIndex *CBlockLocator::GetBlockIndex()\n-{\n+CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n     // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, vHave)\n-    {\n+    BOOST_FOREACH(const uint256& hash, locator.vHave) {\n         std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n             CBlockIndex* pindex = (*mi).second;\n-            if (chainActive.Contains(pindex))\n+            if (Contains(pindex))\n                 return pindex;\n         }\n     }\n-    return chainActive.Genesis();\n-}\n-\n-uint256 CBlockLocator::GetBlockHash()\n-{\n-    // Find the first block the caller has in the main chain\n-    BOOST_FOREACH(const uint256& hash, vHave)\n-    {\n-        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-        if (mi != mapBlockIndex.end())\n-        {\n-            CBlockIndex* pindex = (*mi).second;\n-            if (chainActive.Contains(pindex))\n-                return hash;\n-        }\n-    }\n-    return Params().HashGenesisBlock();\n-}\n-\n-int CBlockLocator::GetHeight()\n-{\n-    CBlockIndex* pindex = GetBlockIndex();\n-    if (!pindex)\n-        return 0;\n-    return pindex->nHeight;\n-}\n-\n-CBlockIndex *CChain::SetTip(CBlockIndex *pindex) {\n-    if (pindex == NULL) {\n-        std::vector<CBlockIndex*>().swap(vChain);\n-        return NULL;\n-    }\n-    vChain.resize(pindex->nHeight + 1);\n-    while (pindex && vChain[pindex->nHeight] != pindex) {\n-        vChain[pindex->nHeight] = pindex;\n-        pindex = pindex->pprev;\n-    }\n-    return pindex;\n+    return Genesis();\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -2156,10 +2112,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n \n     // Update best block in wallet (so we can detect restored wallets)\n     if ((pindexNew->nHeight % 20160) == 0 || (!fIsInitialDownload && (pindexNew->nHeight % 144) == 0))\n-    {\n-        const CBlockLocator locator(pindexNew);\n-        ::SetBestChain(locator);\n-    }\n+        ::SetBestChain(chainActive.GetLocator(pindexNew));\n \n     // New best block\n     nTimeBestReceived = GetTime();\n@@ -2525,7 +2478,7 @@ void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd)\n     pnode->pindexLastGetBlocksBegin = pindexBegin;\n     pnode->hashLastGetBlocksEnd = hashEnd;\n \n-    pnode->PushMessage(\"getblocks\", CBlockLocator(pindexBegin), hashEnd);\n+    pnode->PushMessage(\"getblocks\", chainActive.GetLocator(pindexBegin), hashEnd);\n }\n \n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n@@ -3653,7 +3606,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vRecv >> locator >> hashStop;\n \n         // Find the last block the caller has in the main chain\n-        CBlockIndex* pindex = locator.GetBlockIndex();\n+        CBlockIndex* pindex = chainActive.FindFork(locator);\n \n         // Send the rest of the chain\n         if (pindex)\n@@ -3698,7 +3651,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         else\n         {\n             // Find the last block the caller has in the main chain\n-            pindex = locator.GetBlockIndex();\n+            pindex = chainActive.FindFork(locator);\n             if (pindex)\n                 pindex = chainActive.Next(pindex);\n         }"
      },
      {
        "sha": "1cddbae567e83f46c5b6c8e408939600859ddc73",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 17,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "patch": "@@ -22,6 +22,7 @@ class CBlock;\n class CBlockIndex;\n class CKeyItem;\n class CReserveKey;\n+class CBlockLocator;\n \n class CAddress;\n class CInv;\n@@ -1033,6 +1034,12 @@ class CChain {\n \n     /** Set/initialize a chain with a given tip. Returns the forking point. */\n     CBlockIndex *SetTip(CBlockIndex *pindex);\n+\n+    /** Return a CBlockLocator that refers to a block in this chain (by default the tip). */\n+    CBlockLocator GetLocator(const CBlockIndex *pindex = NULL) const;\n+\n+    /** Find the last common block between this chain and a locator. */\n+    CBlockIndex *FindFork(const CBlockLocator &locator) const;\n };\n \n /** The currently-connected chain of blocks. */\n@@ -1051,13 +1058,6 @@ class CBlockLocator\n public:\n     CBlockLocator() {}\n \n-    explicit CBlockLocator(const CBlockIndex* pindex)\n-    {\n-        Set(pindex);\n-    }\n-\n-    explicit CBlockLocator(uint256 hashBlock);\n-\n     CBlockLocator(const std::vector<uint256>& vHaveIn)\n     {\n         vHave = vHaveIn;\n@@ -1080,16 +1080,7 @@ class CBlockLocator\n         return vHave.empty();\n     }\n \n-    /** Given a block initialises the locator to that point in the chain. */\n-    void Set(const CBlockIndex* pindex);\n-    /** Returns the distance in blocks this locator is from our chain head. */\n-    int GetDistanceBack();\n-    /** Returns the first best-chain block the locator contains. */\n-    CBlockIndex* GetBlockIndex();\n-    /** Returns the hash of the first best chain block the locator contains. */\n-    uint256 GetBlockHash();\n-    /** Returns the height of the first best chain block the locator has. */\n-    int GetHeight();\n+    friend class CChain;\n };\n \n "
      },
      {
        "sha": "f7341f7b694b2a7cfecbe58fe2eee32da8e563a6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4daecda0bcd47a2672eb625232f00e388a3cd87/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "patch": "@@ -1169,7 +1169,9 @@ Value listsinceblock(const Array& params, bool fHelp)\n         uint256 blockId = 0;\n \n         blockId.SetHex(params[0].get_str());\n-        pindex = CBlockLocator(blockId).GetBlockIndex();\n+        std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(blockId);\n+        if (it != mapBlockIndex.end())\n+            pindex = it->second;\n     }\n \n     if (params.size() > 1)"
      }
    ]
  },
  {
    "sha": "f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWIxNWE0ZmM5NGNkZDRiNTM1YTJmN2IxZWNjYzA0MzMyMzY3ZDAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-10-12T13:22:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2013-10-15T09:09:29Z"
      },
      "message": "Move CBlockLocator to core.h\n\nAs CBlockLocator is a P2P data structure, and independent from the\nvalidation logic, it can be moved to core.",
      "tree": {
        "sha": "c4adc198ccc98141d97764f24447568b1cc2c7f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4adc198ccc98141d97764f24447568b1cc2c7f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4daecda0bcd47a2672eb625232f00e388a3cd87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4daecda0bcd47a2672eb625232f00e388a3cd87"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 34,
      "deletions": 38
    },
    "files": [
      {
        "sha": "9ee8b2edce3b9c465e5edc24573255dab83bb44f",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
        "patch": "@@ -661,4 +661,38 @@ class CBlock : public CBlockHeader\n     void print() const;\n };\n \n+\n+/** Describes a place in the block chain to another node such that if the\n+ * other node doesn't have the same branch, it can find a recent common trunk.\n+ * The further back it is, the further before the fork it may be.\n+ */\n+struct CBlockLocator\n+{\n+    std::vector<uint256> vHave;\n+\n+    CBlockLocator() {}\n+\n+    CBlockLocator(const std::vector<uint256>& vHaveIn)\n+    {\n+        vHave = vHaveIn;\n+    }\n+\n+    IMPLEMENT_SERIALIZE\n+    (\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(vHave);\n+    )\n+\n+    void SetNull()\n+    {\n+        vHave.clear();\n+    }\n+\n+    bool IsNull()\n+    {\n+        return vHave.empty();\n+    }\n+};\n+\n #endif"
      },
      {
        "sha": "fc60ccc0b542141dfb786c61529dad1cf849b457",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9b15a4fc94cdd4b535a2f7b1eccc04332367d00/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f9b15a4fc94cdd4b535a2f7b1eccc04332367d00",
        "patch": "@@ -22,7 +22,6 @@ class CBlock;\n class CBlockIndex;\n class CKeyItem;\n class CReserveKey;\n-class CBlockLocator;\n \n class CAddress;\n class CInv;\n@@ -1047,43 +1046,6 @@ extern CChain chainActive;\n \n \n \n-/** Describes a place in the block chain to another node such that if the\n- * other node doesn't have the same branch, it can find a recent common trunk.\n- * The further back it is, the further before the fork it may be.\n- */\n-class CBlockLocator\n-{\n-protected:\n-    std::vector<uint256> vHave;\n-public:\n-    CBlockLocator() {}\n-\n-    CBlockLocator(const std::vector<uint256>& vHaveIn)\n-    {\n-        vHave = vHaveIn;\n-    }\n-\n-    IMPLEMENT_SERIALIZE\n-    (\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vHave);\n-    )\n-\n-    void SetNull()\n-    {\n-        vHave.clear();\n-    }\n-\n-    bool IsNull()\n-    {\n-        return vHave.empty();\n-    }\n-\n-    friend class CChain;\n-};\n-\n-\n \n \n "
      }
    ]
  }
]