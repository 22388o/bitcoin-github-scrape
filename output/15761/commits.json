[
  {
    "sha": "9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzE2YjE3MzVmOGU1MzBjZTY4ZDY3OGU5Y2EwZWNlYjJjZWIzNTIw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-06T16:55:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:20:39Z"
      },
      "message": "Move wallet upgrading to its own function",
      "tree": {
        "sha": "a636ac6e00de5846bd6210d31f286bba32decbd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a636ac6e00de5846bd6210d31f286bba32decbd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef45bc9688412da9e13218e08f802125bf589c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef45bc9688412da9e13218e08f802125bf589c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef45bc9688412da9e13218e08f802125bf589c0"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 47,
      "deletions": 36
    },
    "files": [
      {
        "sha": "c37bf0860ccd48a9744a16c465fad558f3ff6969",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 36,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
        "patch": "@@ -3830,42 +3830,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    int prev_version = walletInstance->GetVersion();\n-    if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = FEATURE_LATEST;\n-            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < walletInstance->GetVersion())\n-        {\n-            error = _(\"Cannot downgrade wallet\").translated;\n-            return nullptr;\n-        }\n-        walletInstance->SetMaxVersion(nMaxVersion);\n-    }\n-\n-    // Upgrade to HD if explicit upgrade\n-    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-        LOCK(walletInstance->cs_wallet);\n-\n-        // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-        int max_version = walletInstance->GetVersion();\n-        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n-            return nullptr;\n-        }\n-\n-        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-            if (!spk_man->Upgrade(prev_version, error)) {\n-                return nullptr;\n-            }\n-        }\n+    if (!UpgradeWallet(walletInstance, fFirstRun, error, warnings)) {\n+        return nullptr;\n     }\n \n     if (fFirstRun)\n@@ -4129,6 +4095,48 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n     return &address_book_it->second;\n }\n \n+bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, bool fFirstRun, std::string& error, std::vector<std::string>& warnings)\n+{\n+    int prev_version = walletInstance->GetVersion();\n+    if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = FEATURE_LATEST;\n+            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < walletInstance->GetVersion())\n+        {\n+            error = _(\"Cannot downgrade wallet\").translated;\n+            return false;\n+        }\n+        walletInstance->SetMaxVersion(nMaxVersion);\n+    }\n+\n+    // Upgrade to HD if explicit upgrade\n+    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n+        LOCK(walletInstance->cs_wallet);\n+\n+        // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n+        int max_version = walletInstance->GetVersion();\n+        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n+            return false;\n+        }\n+\n+        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+            if (!spk_man->Upgrade(prev_version, error)) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n void CWallet::postInitProcess()\n {\n     auto locked_chain = chain().lock();"
      },
      {
        "sha": "776187fcac478d4b04ab87e0e9b24036158d5888",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
        "patch": "@@ -1175,6 +1175,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         LogPrintf((\"%s \" + fmt).c_str(), GetDisplayName(), parameters...);\n     };\n \n+    /** Upgrade the wallet */\n+    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, bool first_run, std::string& error, std::vector<std::string>& warnings);\n+\n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;\n "
      }
    ]
  },
  {
    "sha": "183323712398e26ddcf3a9dc048aaa9900a91f5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODMzMjM3MTIzOThlMjZkZGNmM2E5ZGMwNDhhYWE5OTAwYTkxZjVh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-22T04:09:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:21:01Z"
      },
      "message": "Only run UpgradeWallet if the wallet needs to be upgraded",
      "tree": {
        "sha": "08abb2af1305c8248e251de3e233c39d2b42df4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08abb2af1305c8248e251de3e233c39d2b42df4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/183323712398e26ddcf3a9dc048aaa9900a91f5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183323712398e26ddcf3a9dc048aaa9900a91f5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/183323712398e26ddcf3a9dc048aaa9900a91f5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183323712398e26ddcf3a9dc048aaa9900a91f5a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c16b1735f8e530ce68d678e9ca0eceb2ceb3520"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 26,
      "deletions": 29
    },
    "files": [
      {
        "sha": "83c35befd9cb7343f860a2889eefd29cb5829b7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 28,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/183323712398e26ddcf3a9dc048aaa9900a91f5a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/183323712398e26ddcf3a9dc048aaa9900a91f5a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=183323712398e26ddcf3a9dc048aaa9900a91f5a",
        "patch": "@@ -3830,8 +3830,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    if (!UpgradeWallet(walletInstance, fFirstRun, error, warnings)) {\n-        return nullptr;\n+    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n+        if (!UpgradeWallet(walletInstance, error, warnings)) {\n+            return nullptr;\n+        }\n     }\n \n     if (fFirstRun)\n@@ -4095,38 +4097,33 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n     return &address_book_it->second;\n }\n \n-bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, bool fFirstRun, std::string& error, std::vector<std::string>& warnings)\n+bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, std::string& error, std::vector<std::string>& warnings)\n {\n     int prev_version = walletInstance->GetVersion();\n-    if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n+    if (nMaxVersion == 0) // the -upgradewallet without argument case\n     {\n-        int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = FEATURE_LATEST;\n-            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < walletInstance->GetVersion())\n-        {\n-            error = _(\"Cannot downgrade wallet\").translated;\n-            return false;\n-        }\n-        walletInstance->SetMaxVersion(nMaxVersion);\n+        walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+        nMaxVersion = FEATURE_LATEST;\n+        walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n     }\n+    else\n+        walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+    if (nMaxVersion < walletInstance->GetVersion())\n+    {\n+        error = _(\"Cannot downgrade wallet\").translated;\n+        return false;\n+    }\n+    walletInstance->SetMaxVersion(nMaxVersion);\n \n-    // Upgrade to HD if explicit upgrade\n-    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-        LOCK(walletInstance->cs_wallet);\n+    LOCK(walletInstance->cs_wallet);\n \n-        // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-        int max_version = walletInstance->GetVersion();\n-        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-            error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n-            return false;\n-        }\n+    // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n+    int max_version = walletInstance->GetVersion();\n+    if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+        error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n+        return false;\n+    }\n \n         for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n             if (!spk_man->Upgrade(prev_version, error)) {"
      },
      {
        "sha": "669e3a33f28fa36112e34d60f231c3fc04832806",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/183323712398e26ddcf3a9dc048aaa9900a91f5a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/183323712398e26ddcf3a9dc048aaa9900a91f5a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=183323712398e26ddcf3a9dc048aaa9900a91f5a",
        "patch": "@@ -1176,7 +1176,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     };\n \n     /** Upgrade the wallet */\n-    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, bool first_run, std::string& error, std::vector<std::string>& warnings);\n+    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, std::string& error, std::vector<std::string>& warnings);\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;"
      }
    ]
  },
  {
    "sha": "c988f27937bc79c90f4eed48552c72f1b66dc044",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTg4ZjI3OTM3YmM3OWM5MGY0ZWVkNDg1NTJjNzJmMWI2NmRjMDQ0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-22T04:18:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:21:18Z"
      },
      "message": "Have UpgradeWallet take the version to upgrade to and an error message out parameter",
      "tree": {
        "sha": "4a05ce3aa21d6709930c7e2eefe4dcf683a09914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a05ce3aa21d6709930c7e2eefe4dcf683a09914"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c988f27937bc79c90f4eed48552c72f1b66dc044",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c988f27937bc79c90f4eed48552c72f1b66dc044",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c988f27937bc79c90f4eed48552c72f1b66dc044",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c988f27937bc79c90f4eed48552c72f1b66dc044/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "183323712398e26ddcf3a9dc048aaa9900a91f5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183323712398e26ddcf3a9dc048aaa9900a91f5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/183323712398e26ddcf3a9dc048aaa9900a91f5a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a6cd54320579bbfdf0d0652451d492424fdbc06a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c988f27937bc79c90f4eed48552c72f1b66dc044/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c988f27937bc79c90f4eed48552c72f1b66dc044/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c988f27937bc79c90f4eed48552c72f1b66dc044",
        "patch": "@@ -3831,7 +3831,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     }\n \n     if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-        if (!UpgradeWallet(walletInstance, error, warnings)) {\n+        if (!UpgradeWallet(walletInstance, gArgs.GetBoolArg(\"-upgradewallet\", 0), error, warnings)) {\n             return nullptr;\n         }\n     }\n@@ -4097,10 +4097,10 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n     return &address_book_it->second;\n }\n \n-bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, std::string& error, std::vector<std::string>& warnings)\n+bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, int version, std::string& error, std::vector<std::string>& warnings)\n {\n     int prev_version = walletInstance->GetVersion();\n-    int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n+    int nMaxVersion = version;\n     if (nMaxVersion == 0) // the -upgradewallet without argument case\n     {\n         walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);"
      },
      {
        "sha": "a4787a8b21b465606ff0e3b06796292edfec42b3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c988f27937bc79c90f4eed48552c72f1b66dc044/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c988f27937bc79c90f4eed48552c72f1b66dc044/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c988f27937bc79c90f4eed48552c72f1b66dc044",
        "patch": "@@ -1176,7 +1176,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     };\n \n     /** Upgrade the wallet */\n-    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, std::string& error, std::vector<std::string>& warnings);\n+    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, int version, std::string& error, std::vector<std::string>& warnings);\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;"
      }
    ]
  },
  {
    "sha": "1e48796c99b63aa8fa8451ce7b0c20759ea43500",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ4Nzk2Yzk5YjYzYWE4ZmE4NDUxY2U3YjBjMjA3NTllYTQzNTAw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-22T04:23:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:21:41Z"
      },
      "message": "Make UpgradeWallet a member function of CWallet",
      "tree": {
        "sha": "97bd301b647fde5e707961f8bc63912a321cc87e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97bd301b647fde5e707961f8bc63912a321cc87e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e48796c99b63aa8fa8451ce7b0c20759ea43500",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e48796c99b63aa8fa8451ce7b0c20759ea43500",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e48796c99b63aa8fa8451ce7b0c20759ea43500",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e48796c99b63aa8fa8451ce7b0c20759ea43500/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c988f27937bc79c90f4eed48552c72f1b66dc044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c988f27937bc79c90f4eed48552c72f1b66dc044",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c988f27937bc79c90f4eed48552c72f1b66dc044"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c16fb80b9e030af7bd31382d1915d30e38d50e4a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e48796c99b63aa8fa8451ce7b0c20759ea43500/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e48796c99b63aa8fa8451ce7b0c20759ea43500/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1e48796c99b63aa8fa8451ce7b0c20759ea43500",
        "patch": "@@ -3831,7 +3831,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     }\n \n     if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-        if (!UpgradeWallet(walletInstance, gArgs.GetBoolArg(\"-upgradewallet\", 0), error, warnings)) {\n+        if (!UpgradeWallet(gArgs.GetBoolArg(\"-upgradewallet\", 0), error, warnings)) {\n             return nullptr;\n         }\n     }\n@@ -4097,38 +4097,37 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n     return &address_book_it->second;\n }\n \n-bool CWallet::UpgradeWallet(std::shared_ptr<CWallet> walletInstance, int version, std::string& error, std::vector<std::string>& warnings)\n+bool CWallet::UpgradeWallet(int version, std::string& error, std::vector<std::string>& warnings)\n {\n-    int prev_version = walletInstance->GetVersion();\n+    int prev_version = GetVersion();\n     int nMaxVersion = version;\n     if (nMaxVersion == 0) // the -upgradewallet without argument case\n     {\n-        walletInstance->WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+        WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n         nMaxVersion = FEATURE_LATEST;\n-        walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n     }\n     else\n-        walletInstance->WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-    if (nMaxVersion < walletInstance->GetVersion())\n+        WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+    if (nMaxVersion < GetVersion())\n     {\n         error = _(\"Cannot downgrade wallet\").translated;\n         return false;\n     }\n-    walletInstance->SetMaxVersion(nMaxVersion);\n+    SetMaxVersion(nMaxVersion);\n \n-    LOCK(walletInstance->cs_wallet);\n+    LOCK(cs_wallet);\n \n     // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-    int max_version = walletInstance->GetVersion();\n-    if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+    int max_version = GetVersion();\n+    if (!CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n         error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n         return false;\n     }\n \n-        for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-            if (!spk_man->Upgrade(prev_version, error)) {\n-                return false;\n-            }\n+    for (auto spk_man : GetActiveScriptPubKeyMans()) {\n+        if (!spk_man->Upgrade(prev_version, error)) {\n+            return false;\n         }\n     }\n     return true;"
      },
      {
        "sha": "a40c7ffe08c5031d87a9717fb938a52135b48e56",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e48796c99b63aa8fa8451ce7b0c20759ea43500/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e48796c99b63aa8fa8451ce7b0c20759ea43500/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1e48796c99b63aa8fa8451ce7b0c20759ea43500",
        "patch": "@@ -1176,7 +1176,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     };\n \n     /** Upgrade the wallet */\n-    static bool UpgradeWallet(std::shared_ptr<CWallet> wallet, int version, std::string& error, std::vector<std::string>& warnings);\n+    bool UpgradeWallet(int version, std::string& error, std::vector<std::string>& warnings);\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;"
      }
    ]
  },
  {
    "sha": "92263cce5b6c6b66296dadda5f29724611db0160",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjI2M2NjZTViNmM2YjY2Mjk2ZGFkZGE1ZjI5NzI0NjExZGIwMTYw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-06T16:56:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:28:01Z"
      },
      "message": "Add upgradewallet RPC",
      "tree": {
        "sha": "aed3855ac2e08eeb7653e3e012d3f36853de56b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aed3855ac2e08eeb7653e3e012d3f36853de56b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92263cce5b6c6b66296dadda5f29724611db0160",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92263cce5b6c6b66296dadda5f29724611db0160",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92263cce5b6c6b66296dadda5f29724611db0160",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92263cce5b6c6b66296dadda5f29724611db0160/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e48796c99b63aa8fa8451ce7b0c20759ea43500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e48796c99b63aa8fa8451ce7b0c20759ea43500",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e48796c99b63aa8fa8451ce7b0c20759ea43500"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d78d38592de7db3299a84dfd2e3b9fc89084ac7",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92263cce5b6c6b66296dadda5f29724611db0160/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92263cce5b6c6b66296dadda5f29724611db0160/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=92263cce5b6c6b66296dadda5f29724611db0160",
        "patch": "@@ -153,6 +153,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },\n+    { \"upgradewallet\", 0, \"version\" },\n     // Echo with conversion (For testing only)\n     { \"echojson\", 0, \"arg0\" },\n     { \"echojson\", 1, \"arg1\" },"
      },
      {
        "sha": "3d2360cb9a867cc2bc0a00833f60b1c7b8d6df01",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92263cce5b6c6b66296dadda5f29724611db0160/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92263cce5b6c6b66296dadda5f29724611db0160/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=92263cce5b6c6b66296dadda5f29724611db0160",
        "patch": "@@ -4245,6 +4245,45 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue upgradewallet(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"upgradewallet\",\n+        \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified\\n\"\n+        \"New keys may be generated and a new wallet backup will need to be made.\",\n+        {\n+            {\"version\", RPCArg::Type::NUM, /* default */ strprintf(\"%d\", FEATURE_LATEST), \"The version number to upgrade to. Default is the latest wallet version\"}\n+        },\n+        RPCResults{},\n+        RPCExamples{\n+            HelpExampleCli(\"upgradewallet\", \"169900\")\n+            + HelpExampleRpc(\"upgradewallet\", \"169900\")\n+        }\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {UniValue::VNUM}, true);\n+\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    int version = 0;\n+    if (!request.params[0].isNull()) {\n+        version = request.params[0].get_int();\n+    }\n+\n+    std::string error;\n+    std::vector<std::string> warnings;\n+    if (!pwallet->UpgradeWallet(version, error, warnings)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error);\n+    }\n+    return error;\n+}\n+\n UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue importprivkey(const JSONRPCRequest& request);\n@@ -4313,6 +4352,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n     { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\"} },\n+    { \"wallet\",             \"upgradewallet\",                    &upgradewallet,                 {\"version\"} },\n     { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n     { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },"
      }
    ]
  },
  {
    "sha": "0d32d661481f099af572e7a08a50e17bcc165c44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDMyZDY2MTQ4MWYwOTlhZjU3MmU3YTA4YTUwZTE3YmNjMTY1YzQ0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-04-06T16:56:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T17:28:04Z"
      },
      "message": "Remove -upgradewallet startup option",
      "tree": {
        "sha": "0dea76e5e383f305f5a9ff6e9f470b41283e1a8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dea76e5e383f305f5a9ff6e9f470b41283e1a8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d32d661481f099af572e7a08a50e17bcc165c44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d32d661481f099af572e7a08a50e17bcc165c44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d32d661481f099af572e7a08a50e17bcc165c44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d32d661481f099af572e7a08a50e17bcc165c44/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92263cce5b6c6b66296dadda5f29724611db0160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92263cce5b6c6b66296dadda5f29724611db0160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92263cce5b6c6b66296dadda5f29724611db0160"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 3,
      "deletions": 33
    },
    "files": [
      {
        "sha": "aee705a26c89bfe3e614739db25b9c6d5f8bc916",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0d32d661481f099af572e7a08a50e17bcc165c44",
        "patch": "@@ -57,7 +57,6 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n@@ -116,12 +115,6 @@ bool WalletInit::ParameterInteraction() const\n         }\n     }\n \n-    if (is_multiwallet) {\n-        if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n-        }\n-    }\n-\n     if (gArgs.GetBoolArg(\"-sysperms\", false))\n         return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n "
      },
      {
        "sha": "5a74de27900c7b32acf7048b0d1a6baee55a4978",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0d32d661481f099af572e7a08a50e17bcc165c44",
        "patch": "@@ -2586,7 +2586,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\\n\",\n+                \"\\napplied to the new wallet (eg -zapwallettxes, rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },\n@@ -4021,7 +4021,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n     // Do not do anything to non-HD wallets\n     if (!pwallet->CanSupportFeature(FEATURE_HD)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Use the upgradewallet RPC in order to upgrade a non-HD wallet to HD\");\n     }\n \n     EnsureWalletIsUnlocked(pwallet);"
      },
      {
        "sha": "081bb4320bd7e94425589f858b6da9ee8d81d377",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d32d661481f099af572e7a08a50e17bcc165c44/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0d32d661481f099af572e7a08a50e17bcc165c44",
        "patch": "@@ -3830,12 +3830,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-        if (!UpgradeWallet(gArgs.GetBoolArg(\"-upgradewallet\", 0), error, warnings)) {\n-            return nullptr;\n-        }\n-    }\n-\n     if (fFirstRun)\n     {\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n@@ -4121,7 +4115,7 @@ bool CWallet::UpgradeWallet(int version, std::string& error, std::vector<std::st\n     // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n     int max_version = GetVersion();\n     if (!CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-        error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\").translated;\n+        error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use version 169900 or no version specified.\").translated;\n         return false;\n     }\n "
      },
      {
        "sha": "d450f66bb9aa4b4b620d4e8b9bbca06c6df49616",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d32d661481f099af572e7a08a50e17bcc165c44/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d32d661481f099af572e7a08a50e17bcc165c44/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=0d32d661481f099af572e7a08a50e17bcc165c44",
        "patch": "@@ -125,10 +125,6 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-salvagewallet', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n         self.nodes[0].assert_start_raises_init_error(['-salvagewallet=1', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n \n-        self.log.info(\"Do not allow -upgradewallet with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-upgradewallet', '-wallet=w1', '-wallet=w2'], \"Error: -upgradewallet is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-upgradewallet=1', '-wallet=w1', '-wallet=w2'], \"Error: -upgradewallet is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)\n@@ -332,18 +328,5 @@ def wallet_file(name):\n         self.nodes[0].unloadwallet(wallet)\n         self.nodes[1].loadwallet(wallet)\n \n-        # Fail to load if wallet is downgraded\n-        shutil.copytree(os.path.join(self.options.data_wallets_dir, 'high_minversion'), wallet_dir('high_minversion'))\n-        self.restart_node(0, extra_args=['-upgradewallet={}'.format(FEATURE_LATEST)])\n-        assert {'name': 'high_minversion'} in self.nodes[0].listwalletdir()['wallets']\n-        self.log.info(\"Fail -upgradewallet that results in downgrade\")\n-        assert_raises_rpc_error(\n-            -4,\n-            'Wallet loading failed: Error loading {}: Wallet requires newer version of {}'.format(\n-                wallet_dir('high_minversion', 'wallet.dat'), self.config['environment']['PACKAGE_NAME']),\n-            lambda: self.nodes[0].loadwallet(filename='high_minversion'),\n-        )\n-\n-\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  }
]