[
  {
    "sha": "7555922a6680fdfa0c85108041ce3cbd1090855b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTU1OTIyYTY2ODBmZGZhMGM4NTEwODA0MWNlM2NiZDEwOTA4NTVi",
    "commit": {
      "author": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2017-02-25T19:43:22Z"
      },
      "committer": {
        "name": "James Hilliard",
        "email": "james.hilliard1@gmail.com",
        "date": "2017-02-25T21:19:43Z"
      },
      "message": "remove TestBlockValidity from CreateNewBlock critical path",
      "tree": {
        "sha": "93b9fefd833fd166e07006fe3af3328a0de56b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93b9fefd833fd166e07006fe3af3328a0de56b44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7555922a6680fdfa0c85108041ce3cbd1090855b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7555922a6680fdfa0c85108041ce3cbd1090855b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7555922a6680fdfa0c85108041ce3cbd1090855b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7555922a6680fdfa0c85108041ce3cbd1090855b/comments",
    "author": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6206252e5073c1cde2e313f2e5a3ca17582c5823"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 27,
      "deletions": 25
    },
    "files": [
      {
        "sha": "5a37d41cd4b9fec5777f60eefbeaab7ef168c238",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7555922a6680fdfa0c85108041ce3cbd1090855b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7555922a6680fdfa0c85108041ce3cbd1090855b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7555922a6680fdfa0c85108041ce3cbd1090855b",
        "patch": "@@ -127,7 +127,7 @@ void BlockAssembler::resetBlock()\n     blockFinished = false;\n }\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool TestBlock)\n {\n     resetBlock();\n \n@@ -196,9 +196,11 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblock->nNonce         = 0;\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n-    CValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n-        throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+    if (TestBlock) {\n+        CValidationState state;\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+            throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n+        }\n     }\n \n     return std::move(pblocktemplate);"
      },
      {
        "sha": "746dfd12d1bd73ad2c95429fdbdbf870c9cdfcf5",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7555922a6680fdfa0c85108041ce3cbd1090855b/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7555922a6680fdfa0c85108041ce3cbd1090855b/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=7555922a6680fdfa0c85108041ce3cbd1090855b",
        "patch": "@@ -165,7 +165,7 @@ class BlockAssembler\n public:\n     BlockAssembler(const CChainParams& chainparams);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, bool TestBlock = false);\n \n private:\n     // utility functions"
      },
      {
        "sha": "111dff771a4abe3e5c60301763e5d19935f5f90f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7555922a6680fdfa0c85108041ce3cbd1090855b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7555922a6680fdfa0c85108041ce3cbd1090855b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7555922a6680fdfa0c85108041ce3cbd1090855b",
        "patch": "@@ -110,7 +110,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     uint256 hashHighFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -130,7 +130,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -144,7 +144,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -165,7 +165,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -178,7 +178,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     mempool.addUnchecked(tx.GetHash(), entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n \n@@ -201,7 +201,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -232,7 +232,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error);\n     mempool.clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -270,7 +270,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     mempool.clear();\n \n     // block size > limit\n@@ -290,13 +290,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     mempool.clear();\n \n     // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n@@ -313,7 +313,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     mempool.clear();\n \n     // coinbase in mempool, template creation fails\n@@ -324,7 +324,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error);\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool, template creation fails\n@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error);\n     mempool.clear();\n \n     // double spend txn pair in mempool, template creation fails\n@@ -354,7 +354,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true), std::runtime_error);\n     mempool.clear();\n \n     // subsidy changing\n@@ -370,7 +370,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         chainActive.SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     // Extend to a 210000-long block chain.\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n@@ -382,7 +382,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         chainActive.SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     // Delete the dummy blocks again.\n     while (chainActive.Tip()->nHeight > nHeight) {\n         CBlockIndex* del = chainActive.Tip();\n@@ -468,7 +468,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -481,7 +481,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n \n     chainActive.Tip()->nHeight--;"
      },
      {
        "sha": "61efd1df69a553362981b749403ebb6adf487aed",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7555922a6680fdfa0c85108041ce3cbd1090855b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7555922a6680fdfa0c85108041ce3cbd1090855b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7555922a6680fdfa0c85108041ce3cbd1090855b",
        "patch": "@@ -116,7 +116,7 @@ CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey, true);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:"
      }
    ]
  }
]