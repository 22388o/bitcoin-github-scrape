[
  {
    "sha": "fcadb98d89392fae9b1caf4db2310ee49b02da67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2FkYjk4ZDg5MzkyZmFlOWIxY2FmNGRiMjMxMGVlNDliMDJkYTY3",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T11:12:36Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T11:13:25Z"
      },
      "message": "Drop ParseHashUV in favor of calling ParseHashStr\n\nThe one existing call in bitcoin-tx already validates the call will\npass via checkObject.",
      "tree": {
        "sha": "484596ab38dc8d796dd83058a8cb47a79bc178b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/484596ab38dc8d796dd83058a8cb47a79bc178b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcadb98d89392fae9b1caf4db2310ee49b02da67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlsaZOQACgkQTYykuhgE\nCQYgvBAAj6JFC8T8bEaXjCazkwOEksBLyt3TJLZ42ag/lSQicY/21ZM/wp5f7KJi\nrVNWUsojMfPk31xl2JC1fL8iYTiPPWinOrem9Ya4u32Hn3GHu21tumkaMryBp7Np\nudHY96avB+YC6EelYV+yk3T3XsEOZhLXpWWRgLlLb97d+8QXgKDVCQLvAIIzbvWp\nCzv+4bN4bU4Mvc2sZCGbCU2zSriuPzIDs06iBXJG82yDkAKEmYMCLD1UeZdN8w+O\n7pPuuWaS3yyDklyZDtJ/Xp6kAiH6e8lcnHbDYd2uuEtnlgapYA7gX0q+S8GVqsYT\nffDTc098D5h6ioJltLWYaE8blDyxllAjpBLUaG2mEmTOiKX6FdB3VVHn2kMPuMV4\n8AzijqLWUbyNNlu4txTgJNilWt4xtKMHUPb6Pb48Q3BZkR4WpF2DD1xoNOQkUteV\nSSCQYWoju40Fg1TYPJ2Wjx5x7z6M/ofYr95rp/26LQpXpgQ+yPit9JMkApDLesTD\n9lRtG+n+9YxKCyp0NjCl78eWp3EMvUXAjiOJ5UDiaddlG/+/ZjnGoxxniSdzPHor\n32GNjpI3n0IEEt9ORwLcDXKypwzNiXM86A4aI1fcfuw2Ri0TFciZ4RkhzITeRI1Z\nr50tg+G7G/RUJTboYBBPgEXFOjIr3tTbgliv6eSANIRZ+f23OMI=\n=bq5z\n-----END PGP SIGNATURE-----",
        "payload": "tree 484596ab38dc8d796dd83058a8cb47a79bc178b1\nparent 97073f8837f384936ab002c614ed091df9520a61\nauthor Ben Woosley <ben.woosley@gmail.com> 1528456356 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1528456405 -0700\n\nDrop ParseHashUV in favor of calling ParseHashStr\n\nThe one existing call in bitcoin-tx already validates the call will\npass via checkObject.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcadb98d89392fae9b1caf4db2310ee49b02da67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcadb98d89392fae9b1caf4db2310ee49b02da67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcadb98d89392fae9b1caf4db2310ee49b02da67/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97073f8837f384936ab002c614ed091df9520a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97073f8837f384936ab002c614ed091df9520a61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97073f8837f384936ab002c614ed091df9520a61"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 1,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e6eb723cf4aa1555850d01002a0e73e85d9a4f26",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=fcadb98d89392fae9b1caf4db2310ee49b02da67",
        "patch": "@@ -591,7 +591,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid = ParseHashUV(prevOut[\"txid\"], \"txid\");\n+            uint256 txid = ParseHashStr(prevOut[\"txid\"].get_str(), \"txid\");\n \n             int nOut = atoi(prevOut[\"vout\"].getValStr());\n             if (nOut < 0)"
      },
      {
        "sha": "1d87d21d4087ee82b48ad587a81c3741845cc1a6",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=fcadb98d89392fae9b1caf4db2310ee49b02da67",
        "patch": "@@ -22,7 +22,6 @@ CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n-uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n uint256 ParseHashStr(const std::string&, const std::string& strName);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n "
      },
      {
        "sha": "4d851610efb46e65110c94355dbf599b2024617b",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcadb98d89392fae9b1caf4db2310ee49b02da67/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=fcadb98d89392fae9b1caf4db2310ee49b02da67",
        "patch": "@@ -160,14 +160,6 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const std::string& strName)\n-{\n-    std::string strHex;\n-    if (v.isStr())\n-        strHex = v.getValStr();\n-    return ParseHashStr(strHex, strName);  // Note: ParseHashStr(\"\") throws a runtime_error\n-}\n-\n uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false"
      }
    ]
  },
  {
    "sha": "edbacc6c97ad7795359ad6dab9b395250eecd273",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGJhY2M2Yzk3YWQ3Nzk1MzU5YWQ2ZGFiOWIzOTUyNTBlZWNkMjcz",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T09:04:56Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T12:30:48Z"
      },
      "message": "Consolidate hash parsing in core_io.h\n\nThis consolidates separate hash parsing functions from\nrpc/server.cpp, rest.cpp, and core_read.cpp into a low-level\nparser in core_read.cpp, and an rpc-level parser in rpc/server.cpp.\n\nNote the rpc parser calls through to the core_io parser.\n\nBehavior changes are:\n* Hashes are consistently validated to 64 characters, the expected\n  length for 256 bits hexidecimal. Because all newly-tested calls\n  were against txids, this is safe.\n* prioritisetransaction now throws an RPC_INVALID_PARAMETER rather\n  than std::runtime_error on bad hash. This is in the context of rpc,\n  so seems more appropriate.",
      "tree": {
        "sha": "54d6d68d07c32703ddc77d1f47042c98df0a156e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54d6d68d07c32703ddc77d1f47042c98df0a156e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edbacc6c97ad7795359ad6dab9b395250eecd273",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlsadvkACgkQTYykuhgE\nCQbSwQ//bvuK8QdZoNiB21LS7a4xu6e1CJvIB3eQMSZAyXcKku71zVc824AoAf6t\n5kfBL1tYCBAXu11JDW4h7aeB8AgDeVIYhpCtDKnBzCbMfrHDLN2NnHr0XnmCd3cT\n/wAg/Jajql5/0r5ff81hQ8baB5ltig2XtSjUH6oSbyzsNxTK60gNWdU18ZcQ4hLE\nlKoteaP1LiVmVQdXqyRiid4PG+hZqY/8HJGDSxfevvwY/KoQ21QuRSHcTZQ9YYwf\nPUuVfWx8ZX2t+mK2D1/ICr+RslOW46BLi0m4ZSvIw7+FLR2OArIyVvnKy8Zn27J8\nRzB3rbzCaXViUCiqxmhLENmdeR6SKc9xNfwhjUHgB0ijjOprvTZncY0SwMq82jt9\nWoKEi25jx8egkydy4hqywhgdOu40nbxLHaIxKB0LeE2H75JAj/uotifPT/MMxByd\nF6ujFZu4QarN2n4x6DHnlBOoqkRwdpVISMTUgDZ1DNfVeXhQubtl4kcygaKbGvq2\naRKfX5DwcdU2wSkQyulH8tQlDsT+1i+gp/mpXBN2WwubPeedAJicPAMqP2oozcde\n9oLkQ5rvsHtAWSv0w3NRxWIRNUtr557ZP6/UpB5FPf6vkFFl7JlxmvGgADXJ+VUl\nB+l5h7tJ/eatPcQZ8vh75I4ZaN3vb80En8raKDrt+rX5TIil+4I=\n=VBlg\n-----END PGP SIGNATURE-----",
        "payload": "tree 54d6d68d07c32703ddc77d1f47042c98df0a156e\nparent fcadb98d89392fae9b1caf4db2310ee49b02da67\nauthor Ben Woosley <ben.woosley@gmail.com> 1528448696 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1528461048 -0700\n\nConsolidate hash parsing in core_io.h\n\nThis consolidates separate hash parsing functions from\nrpc/server.cpp, rest.cpp, and core_read.cpp into a low-level\nparser in core_read.cpp, and an rpc-level parser in rpc/server.cpp.\n\nNote the rpc parser calls through to the core_io parser.\n\nBehavior changes are:\n* Hashes are consistently validated to 64 characters, the expected\n  length for 256 bits hexidecimal. Because all newly-tested calls\n  were against txids, this is safe.\n* prioritisetransaction now throws an RPC_INVALID_PARAMETER rather\n  than std::runtime_error on bad hash. This is in the context of rpc,\n  so seems more appropriate.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edbacc6c97ad7795359ad6dab9b395250eecd273",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edbacc6c97ad7795359ad6dab9b395250eecd273",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edbacc6c97ad7795359ad6dab9b395250eecd273/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcadb98d89392fae9b1caf4db2310ee49b02da67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcadb98d89392fae9b1caf4db2310ee49b02da67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcadb98d89392fae9b1caf4db2310ee49b02da67"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 26,
      "deletions": 28
    },
    "files": [
      {
        "sha": "920f5f9e49cdfedd6c29492588f5a13518ac1d08",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -591,7 +591,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid = ParseHashStr(prevOut[\"txid\"].get_str(), \"txid\");\n+            uint256 txid;\n+            if (!ParseHashStr(prevOut[\"txid\"].get_str(), txid)) {\n+                throw std::runtime_error(\"txid must be a 64-character hexadecimal string (not '\" + prevOut[\"txid\"].get_str() + \"')\");\n+            }\n \n             int nOut = atoi(prevOut[\"vout\"].getValStr());\n             if (nOut < 0)"
      },
      {
        "sha": "a026c1f99cf9823d8b6fedd7eda1876f65704015",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -22,7 +22,7 @@ CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n-uint256 ParseHashStr(const std::string&, const std::string& strName);\n+bool ParseHashStr(const std::string&, uint256& hash_out);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n \n // core_write.cpp"
      },
      {
        "sha": "6657e4a6f5e542dae8523ce0bff60598e10bfe00",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -160,14 +160,14 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n+bool ParseHashStr(const std::string& strHex, uint256& hash_out)\n {\n-    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n+    if (!IsHex(strHex) || (strHex.size() != 64)) { // Note: IsHex(\"\") is false\n+        return false;\n+    }\n \n-    uint256 result;\n-    result.SetHex(strHex);\n-    return result;\n+    hash_out.SetHex(strHex);\n+    return true;\n }\n \n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)"
      },
      {
        "sha": "a88065699d0ca6a9ea58d4b6fa7a7db42127079b",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -105,15 +105,6 @@ static std::string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const std::string& strReq, uint256& v)\n-{\n-    if (!IsHex(strReq) || (strReq.size() != 64))\n-        return false;\n-\n-    v.SetHex(strReq);\n-    return true;\n-}\n-\n static bool CheckWarmup(HTTPRequest* req)\n {\n     std::string statusmessage;"
      },
      {
        "sha": "47c869ce8d08553a71e61ce4de4485929e319147",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -514,7 +514,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    uint256 hash = ParseHash(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -578,7 +578,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    uint256 hash = ParseHash(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -630,7 +630,7 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n         );\n     }\n \n-    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    uint256 hash = ParseHash(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n "
      },
      {
        "sha": "4335d5afaa3b15ea9d4e2e20a47d534696da63a9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -247,7 +247,7 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n+    uint256 hash = ParseHash(request.params[0], \"txid\");\n     CAmount nAmount = request.params[2].get_int64();\n \n     if (!(request.params[1].isNull() || request.params[1].get_real() == 0)) {"
      },
      {
        "sha": "86fad06d3dc78e72f154434f5e3a3f9a01490b11",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -144,7 +144,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n         );\n \n     bool in_active_chain = true;\n-    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n+    uint256 hash = ParseHash(request.params[0], \"parameter 1\");\n     CBlockIndex* blockindex = nullptr;\n \n     if (hash == Params().GenesisBlock().hashMerkleRoot) {\n@@ -161,7 +161,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     if (!request.params[2].isNull()) {\n         LOCK(cs_main);\n \n-        uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n+        uint256 blockhash = ParseHash(request.params[2], \"parameter 3\");\n         blockindex = LookupBlockIndex(blockhash);\n         if (!blockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");"
      },
      {
        "sha": "05005fb5e1b6dc786187d8cc8155cc4bdef93311",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <rpc/server.h>\n \n+#include <core_io.h>\n #include <fs.h>\n #include <init.h>\n #include <key_io.h>\n@@ -115,7 +116,7 @@ CAmount AmountFromValue(const UniValue& value)\n     return amount;\n }\n \n-uint256 ParseHashV(const UniValue& v, std::string strName)\n+uint256 ParseHash(const UniValue& v, std::string strName)\n {\n     std::string strHex;\n     if (v.isStr())\n@@ -125,13 +126,16 @@ uint256 ParseHashV(const UniValue& v, std::string strName)\n     if (64 != strHex.length())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d)\", strName, 64, strHex.length()));\n     uint256 result;\n-    result.SetHex(strHex);\n+    if (!ParseHashStr(strHex, result)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" invalid\");\n+    }\n     return result;\n }\n uint256 ParseHashO(const UniValue& o, std::string strKey)\n {\n-    return ParseHashV(find_value(o, strKey), strKey);\n+    return ParseHash(find_value(o, strKey), strKey);\n }\n+\n std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)\n {\n     std::string strHex;"
      },
      {
        "sha": "0c7576ef92517556f2069d87b5d5ee3d2dda7f8c",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -189,7 +189,7 @@ extern CRPCTable tableRPC;\n  * Utilities: convert hex-encoded Values\n  * (throws error if not hex).\n  */\n-extern uint256 ParseHashV(const UniValue& v, std::string strName);\n+extern uint256 ParseHash(const UniValue& v, std::string strName);\n extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);"
      },
      {
        "sha": "066e76ceb9c9f75e7f773ea33435aead59c9d2ad",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edbacc6c97ad7795359ad6dab9b395250eecd273/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edbacc6c97ad7795359ad6dab9b395250eecd273/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=edbacc6c97ad7795359ad6dab9b395250eecd273",
        "patch": "@@ -24,7 +24,7 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction, '', 0, 0, 0)\n \n         # Test `prioritisetransaction` invalid `txid`\n-        assert_raises_rpc_error(-1, \"txid must be hexadecimal string\", self.nodes[0].prioritisetransaction, txid='foo', fee_delta=0)\n+        assert_raises_rpc_error(-1, \"txid must be hexadecimal string (not 'foo')\", self.nodes[0].prioritisetransaction, txid='foo', fee_delta=0)\n \n         # Test `prioritisetransaction` invalid `dummy`\n         txid = '1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000'"
      }
    ]
  },
  {
    "sha": "81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWQwZWI4YWY0ZTRjN2UyYmRiNTZmNDk4OWM1NTIyOWI0OWJiNjYz",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T09:57:42Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-06-08T12:30:58Z"
      },
      "message": "Use ParseHash consistently\n\nThese calls were previously unvalidated. As of this change, only\nhashes in test and qt are unvalidated.",
      "tree": {
        "sha": "11298c8e565c4e1ebedffec18782bb38fae0d42f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11298c8e565c4e1ebedffec18782bb38fae0d42f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlsadwIACgkQTYykuhgE\nCQa/Fw/+KSUc/n92mccSg/aYiYrkJGC93yT83FBlkE7UCrWIXL2n1XJOFUqrrbmY\nJYoCV5E1BVVrjysImnY0BVMZb18Vcb/uFA6FrlceIgxwY4hu5gQ12DCGTmYveSfK\nO7telanWHSabLcSJ5NMdvI1AXJEJNbSSHzhxQ9DrsSb3luljzbGbDQUXhd+3XMTv\nvOo0qkeoKta9msARt1FNqhtmGTjETE6Y0oxRaw7RRbucJ6UkQPKszngW5V1g1A+w\nJxfRGDozEUC1bF5p8y9AMZGIjDrsSz0y70nIwU066xvjMee9cgxx5XElNRpnzdUj\nGKvhSqhKCF4850+7/faLn9hFFoWq1kdS5Gu4sMmBwJcjiqFXGs4GSB2dV6Jkyoh2\nUmXbYzYssRLbJH7c3FstdjccUVGo1F0qHlyoZv2YI7YjJWUgGAc0wFCh4wacXrjb\nq5p9HGe76ggm7HJwM4112svcgEv0MpAinIO9CCBhooKLk1b0HbJGtrCz4rsiHEy2\nvcqV8/pDdDbUNwym0Ms3WS8KZ/8KxEcIlTJX7iICxhF422oTTqRpIGznqhANtNHU\nkq8dYMMJEtqod1h04Fe5Tia4Wla1M4hoIcdlII5xd+okxbL56+PjLok5el/YGnqL\nwR5pje3HBpx3iZ9eFyckImXWR1gPIKwjoq0KLWb1bLOqumo8Fvo=\n=+51c\n-----END PGP SIGNATURE-----",
        "payload": "tree 11298c8e565c4e1ebedffec18782bb38fae0d42f\nparent edbacc6c97ad7795359ad6dab9b395250eecd273\nauthor Ben Woosley <ben.woosley@gmail.com> 1528451862 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1528461058 -0700\n\nUse ParseHash consistently\n\nThese calls were previously unvalidated. As of this change, only\nhashes in test and qt are unvalidated.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edbacc6c97ad7795359ad6dab9b395250eecd273",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edbacc6c97ad7795359ad6dab9b395250eecd273",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edbacc6c97ad7795359ad6dab9b395250eecd273"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 18,
      "deletions": 33
    },
    "files": [
      {
        "sha": "cc330091c54b20081a9d82e3855f13cd3278b275",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -240,9 +240,10 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n \n     // extract and validate TXID\n     std::string strTxid = vStrInputParts[0];\n-    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+    uint256 txid;\n+    if (!ParseHashStr(strTxid, txid)) {\n         throw std::runtime_error(\"invalid TX input txid\");\n-    uint256 txid(uint256S(strTxid));\n+    }\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);"
      },
      {
        "sha": "27b63515f61bb0d0fcf734324f2c3fdcec44e5cf",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -422,10 +422,9 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             std::string strTxid = uriParts[i].substr(0, uriParts[i].find('-'));\n             std::string strOutput = uriParts[i].substr(uriParts[i].find('-')+1);\n \n-            if (!ParseInt32(strOutput, &nOutput) || !IsHex(strTxid))\n+            if (!ParseInt32(strOutput, &nOutput) || !ParseHashStr(strTxid, txid))\n                 return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n \n-            txid.SetHex(strTxid);\n             vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n         }\n "
      },
      {
        "sha": "b758f5d7614bf7d8f316ddb5ed579fbe1d676e40",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -706,8 +706,7 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"hash\"));\n \n     bool fVerbose = true;\n     if (!request.params[1].isNull())\n@@ -800,8 +799,7 @@ static UniValue getblock(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"blockhash\"));\n \n     int verbosity = 1;\n     if (!request.params[1].isNull()) {\n@@ -1033,8 +1031,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"txid\"));\n     int n = request.params[1].get_int();\n     COutPoint out(hash, n);\n     bool fMempool = true;\n@@ -1442,8 +1439,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n     {\n@@ -1478,8 +1474,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n     {\n@@ -1518,8 +1513,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = request.params[0].get_str();\n-    uint256 hash(uint256S(strHash));\n+    uint256 hash(ParseHash(request.params[0], \"blockhash\"));\n \n     {\n         LOCK(cs_main);\n@@ -1711,8 +1705,7 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n \n         pindex = chainActive[height];\n     } else {\n-        const std::string strHash = request.params[0].get_str();\n-        const uint256 hash(uint256S(strHash));\n+        const uint256 hash(ParseHash(request.params[0], \"hash\"));\n         pindex = LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");"
      },
      {
        "sha": "5a6f2391753071ff2fca3cf6393d9c2d830d63a7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -455,8 +455,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         {\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n             std::string lpstr = lpval.get_str();\n-\n-            hashWatchedChain.SetHex(lpstr.substr(0, 64));\n+            hashWatchedChain = ParseHash(lpstr.substr(0, 64), \"longpollid\");\n             nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n         }\n         else"
      },
      {
        "sha": "bfa5c77189f35ae5b797061e240654b1df65a059",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -229,9 +229,7 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     UniValue txids = request.params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n-        if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid txid \")+txid.get_str());\n-        uint256 hash(uint256S(txid.get_str()));\n+        uint256 hash(ParseHash(txid, \"txid\"));\n         if (setTxids.count(hash))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated txid: \")+txid.get_str());\n        setTxids.insert(hash);"
      },
      {
        "sha": "b8baeedbcbefe1e886f2ec952bd8895c9a4e6bbd",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -416,8 +416,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHash(request.params[0], \"txid\"));\n     std::vector<uint256> vHash;\n     vHash.push_back(hash);\n     std::vector<uint256> vHashOut;"
      },
      {
        "sha": "ad89eaf52ab6943fbdd381fe0c6c6066166885b8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d0eb8af4e4c7e2bdb56f4989c55229b49bb663/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=81d0eb8af4e4c7e2bdb56f4989c55229b49bb663",
        "patch": "@@ -2231,9 +2231,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     isminefilter filter = ISMINE_SPENDABLE;\n \n     if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n-        uint256 blockId;\n+        uint256 blockId(ParseHash(request.params[0], \"blockhash\"));\n \n-        blockId.SetHex(request.params[0].get_str());\n         paltindex = pindex = LookupBlockIndex(blockId);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -2362,8 +2361,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHash(request.params[0], \"txid\"));\n \n     isminefilter filter = ISMINE_SPENDABLE;\n     if(!request.params[1].isNull())\n@@ -2430,8 +2428,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHash(request.params[0], \"txid\"));\n \n     if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -3701,8 +3698,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n-    uint256 hash;\n-    hash.SetHex(request.params[0].get_str());\n+    uint256 hash(ParseHash(request.params[0], \"txid\"));\n \n     // optional parameters\n     CAmount totalFee = 0;"
      }
    ]
  }
]