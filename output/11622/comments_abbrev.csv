TheBlueMatt,2017-11-06T20:16:25Z,"Concept ACK generally, though I'm curious where you see this going longer-term - do we want to deprecate BIP 70 support (I think I'd be generally in favor of this, it seems to provide almost 0 utility which results in it being mostly unused, and even if it were used broadly, its unclear that it provides any real security benefit) or start shipping binaries without BIP 70 support or will this just ",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-342272682,342272682,
meshcollider,2017-11-06T20:54:39Z,Concept ACK after reading the discussion on IRC,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-342283275,342283275,
promag,2017-11-07T00:47:10Z,Should add to travis matrix?,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-342337801,342337801,
NicolasDorier,2017-11-07T01:01:38Z,"For information, I plan to make BIP70 deprecated into NBitcoin. (By removing it from main lib, and moving it to separate package)\n\nThis led me to too much dependency issues, as well as cross implementation issues as you can't check correctly the signature of the payment request without serializing the payment request exactly as all other implementations does.  (Typically, my implementation wor",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-342340538,342340538,
laanwj,2017-11-07T06:25:00Z,"> Concept ACK generally, though I'm curious where you see this going longer-term\n\nMy opinion on it is really divided. I like BIP70 in concept (automatic refund addresses, key expiration, allowing the wallet to directly authenticate vendors, direct transaction submission), but not the technical implementation, and also not the dependency burden it puts on bitcoin core.\n\nAdditionally it also",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-342387748,342387748,
Sjors,2017-11-09T11:38:37Z,"""this breaks the dependency"" -> ""this *removes* the dependency""?\n\nI know the goal is to get rid of OpenSLL, but what's with Protobuf? Just fewer dependencies, or is there a specific problem with it?\n\nBreaking `bitcoin://1A1...Na&amount=0.001` would be bad; it's used by various services. It's often  embedded in a QR code, which isn't that useful on a desktop, but it can also be a link on a ",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343129272,343129272,
laanwj,2017-11-09T11:44:14Z,"> I know the goal is to get rid of OpenSLL, but what's with Protobuf? Just fewer dependencies, or is there a specific problem with it?\n\nAdvantage of less dependencies is mainly: less stuff to build while cross-compiling, less attack surface (yet another parsing library), etc.\n\n> Breaking bitcoin://1A1...Na&amount=0.001 would be bad; it's used by various services. It's often embedded in a Q",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343130603,343130603,
laanwj,2017-11-09T15:51:13Z,"I've restored BIP21 functionality, sifting through paymentserver.cpp/h to disable the parts relating to payment requests, instead of removing the whole file from the build.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343197207,343197207,
luke-jr,2017-11-10T16:34:03Z,But `if (PaymentServer::ipcSendCommandLine())` is still #ifdef'd out...,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343521544,343521544,
laanwj,2017-11-10T17:13:04Z,"> But if (PaymentServer::ipcSendCommandLine()) is still #ifdef'd out...\n\nWhoops, missed that. Fixed.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343531853,343531853,
sipa,2017-11-11T00:14:17Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343620385,343620385,
jonasschnelli,2017-11-11T06:58:34Z,"Nice!\nConcept ACK. I could see this for 0.16 and a default to disable in 0.17.\n\n> (my personal motivation is that I want to have the option to build the GUI without protobuf and without OpenSSL after the last remnants of OpenSSL use are removed from the rest of the code)\n\nAFAIK OpenSSL (crypto) is still in use for the PRNG seeding (see currently closed #10299, waiting for new approach).",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343645614,343645614,
laanwj,2017-11-11T07:25:37Z,"> AFAIK OpenSSL (crypto) is still in use for the PRNG seeding (see currently closed #10299, waiting for new approach).\n\nAgree. The rand_ stuff should be removed in one go in a separate PR, it's orthogonal to the changes here.\n(I don't change the build system with regard to OpenSSL in this PR)",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343646675,343646675,
Sjors,2017-11-13T12:57:12Z,"I did a `make clean`, `./autogen.sh`, `./configure --disable-bip70` (which shows `with bip70  = no`) and `make deploy`.\n\nI then tested BIP-21 using: `./Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt bitcoin://1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX?amount=0.1`. This worked, but it did throw a warning (?):\n\n> QObject::connect: No such signal PaymentServer::receivedPaymentACK(QString) in qt/paymentserv",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343910977,343910977,
laanwj,2017-11-13T13:25:16Z,"> QObject::connect: No such signal PaymentServer::receivedPaymentACK(QString) in qt/paymentserver.cpp:234\n\nThanks, added, also rebased and squashed.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343917838,343917838,
Sjors,2017-11-13T14:09:45Z,"Warning is gone (also without the `//`, see https://github.com/bitcoin/bitcoin/issues/11645#issuecomment-343920629).",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-343929501,343929501,
fanquake,2017-11-17T14:07:42Z,Concept ACK. Needs another rebase.,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-345252776,345252776,
laanwj,2017-11-28T09:01:42Z,Rebased for the #include change. Might want to re-review include changes.,https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-347456907,347456907,
laanwj,2017-11-29T10:18:51Z,"Going to close this for now, [bitpay going to require BIP70](https://blog.bitpay.com/payment-protocol/) kind of messes up our plans to deprecate BIP70, and I'm not sure this option is worth carrying if that's not the long-term goal.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-347815461,347815461,
Sjors,2017-11-29T12:01:33Z,"In that case, does it make sense to remove the OpenSSL dependency from the BIP70 implementation in some other way?",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-347839998,347839998,
TheBlueMatt,2017-12-04T17:38:44Z,"It is my understanding that there are enough other wallets that do not implement BIP 70 that it probably makes sense to still target deprecating it. Either way, I think we should *at least* be targeting moving towards a world in which the bitcoin URI which generates a payment request includes a signature over the payment request (or a pubkey which will sign it), because the use of https/TLS alone ",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-349041045,349041045,
NicolasDorier,2017-12-05T05:41:35Z,"I disagree. This is just reinventing the wheel. \n\nIf you want to separate the payment processor from the merchant, just make so the payment processor give an https link to the merchant, and show the merchant domain of the merchant (+ certificate information if something could parse it before handling to the app) in the wallet inside the payment confirmation screen.\n\nAdding your own protoco",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-349201724,349201724,
TheBlueMatt,2017-12-06T20:53:27Z,"@NicolasDorier absolutely not...If you are purchasing from a merchant, then you're already interacting with their website and *it* is what gave you the payment link, we should be using that as a root-of-trust where at all possible, not using *both* that *and* existing SSL CAs (after all, no user is going to verify that the merchant XYZ is actually using https://co1nbase.com/ as their payment proce",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-349771240,349771240,
NicolasDorier,2017-12-07T01:42:47Z,"I am not sure I understand.\n\n> I think we should at least be targeting moving towards a world in which the bitcoin URI which generates a payment request includes a signature over the payment request (or a pubkey which will sign it)\n\nWhich I disagree, because the payment request already come from HTTPS link. HTTPS can be used to show who you are paying to on the mobile wallet. (no need of a",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-349834720,349834720,
TheBlueMatt,2017-12-08T00:11:34Z,"@NicolasDorier My point is you start from a root of trust (the bitcoin: URI), which no one is going to do almost anything to cross-check (cause if it references co1nbase.com instead of coinbase.com, who cares? thats the link you got). We should thus be using that as *the* root of trust, instead of introducing a second one (CAs), where if someone has a cert for coinbase.com (either cause they broke",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350133848,350133848,
NicolasDorier,2017-12-08T05:35:43Z,"If you get the signed payment request inside the `bitcoin:`, how does the signer know that the pubkey signing it is from Coinbase? Response to this question is about re-implementing PKI, which browsers does out of the box, or is there any other alternatives?",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350177283,350177283,
TheBlueMatt,2017-12-08T15:29:49Z,"The PKI usage in BIP70 is rarely used to verify the merchant itself, but is instead some third-party payment services provider (eg coinbase/bitpay/etc). Expecting to know which payment services provider a given merchant is using is not realistic for users, so I'm skeptical the PKI usage here is of really any value. Note that probably a better solution than requiring a signature over the payment re",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350291462,350291462,
NicolasDorier,2017-12-08T15:42:40Z,"> The PKI usage in BIP70 is rarely used to verify the merchant itself, but is instead some third-party payment services provider (eg coinbase/bitpay/etc). Expecting to know which payment services provider a given merchant is using is not realistic for users, so I'm skeptical the PKI usage here is of really any value\n\nYes I agree, PKI as used in BIP70 is useless. What I am arguing is that by su",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350294768,350294768,
TheBlueMatt,2017-12-08T15:46:11Z,"> Yes I agree, PKI as used in BIP70 is useless. What I am arguing is that by successfully downloading the payment request over a HTTPS channel, you also verified PKI through whatever arbitrary trust store you use underneath. (OpenSSL, Windows trust store, or iOS trust store)\n\nSo what? You haven't gained anything in doing so aside from validating that your attacker is capable of getting an SSL ",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350295689,350295689,
NicolasDorier,2017-12-08T16:11:02Z,"Ah ok I think I understand you now.\n\n```\nbitcoin://?r=https://paymentprovider/id=invoiceId&merchantPubKey=abc\n```\n\nYou then remove the PKI verification at BIP70 level (which is, as you said and I agree, useless).\nYou replace is by a signature embedded in the payment request of this pubkey.\n\nBy doing so, you are sure that the payment uri and the payment request are at least bound ",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-350302301,350302301,
MarcoFalke,2018-09-19T21:54:03Z,"Why was this closed again? I think having an option that is disabled by default makes it easier for people to compile from source without having to pull in a ton of dependencies and build mess. See e.g. #14273, which could simply be worked around by setting `--disable-bip70`.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-422971569,422971569,
gmaxwell,2018-09-19T22:26:28Z,"AFAIK our BIP70 support isn't compatible with Bitpay anyways (because they require spec violating behaviour), so I don't know if that argument for not having this option applies.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-422979149,422979149,
Sjors,2018-09-20T09:47:55Z,"@gmaxwell I use BitPay occasionally with Bitcoin Core. The payment goes through just fine, but you get an error popup afterwards.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-423117690,423117690,
fanquake,2018-12-09T13:36:52Z,"Removed ""Up for grabs"", this was done in #14451.",https://github.com/bitcoin/bitcoin/pull/11622#issuecomment-445538952,445538952,
luke-jr,2017-11-07T06:30:44Z,"IMO would be cleaner to just `QT_MOC_CPP +=` (and `BITCOIN_QT_CPP +=`) the actual files below, keeping all the stuff together.",https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281249,149281249,src/Makefile.qt.include
luke-jr,2017-11-07T06:31:54Z,"Probably would be better to mention ""(payment protocol)"" here as well.",https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281390,149281390,configure.ac
luke-jr,2017-11-07T06:33:05Z,Might be less messy to just leave the pointer here and not use it.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281544,149281544,src/qt/bitcoin.cpp
luke-jr,2017-11-07T06:34:08Z,Won't this break opening non-BIP70 `bitcoin:` URIs?,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281658,149281658,src/qt/bitcoin.cpp
luke-jr,2017-11-07T06:34:36Z,These changes seem out of place here...?,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281717,149281717,src/qt/coincontroldialog.cpp
luke-jr,2017-11-07T06:34:54Z,More out of place...,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149281751,149281751,src/qt/guiutil.cpp
luke-jr,2017-11-07T06:37:19Z,Do we need to get bswap macros from somewhere else?,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149282105,149282105,src/qt/test/compattests.cpp
luke-jr,2017-11-07T06:38:11Z,Out of place,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149282236,149282236,src/qt/test/wallettests.cpp
laanwj,2017-11-07T06:45:40Z,Yep. Although that breaks the alignment...,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149283105,149283105,configure.ac
laanwj,2017-11-07T06:46:27Z,"Yes, as a by-effect this currently removes `bitcoin:` URL support too.\n(it probably shouldn't)",https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149283172,149283172,src/qt/bitcoin.cpp
laanwj,2017-11-07T06:47:00Z,These extra includes are necessary now that `paymentserver.h` doesn't indirectly include them anymore.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149283246,149283246,src/qt/coincontroldialog.cpp
laanwj,2017-11-07T06:47:36Z,"No, we have our own bswap macros. The only reason this is tested is that there was a collision between our bswap macros and protobuf's. So commenting this out is harmless.",https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149283313,149283313,src/qt/test/compattests.cpp
laanwj,2017-11-07T07:00:50Z,I don't think I agree. Accidentally using it would not generate a compile error in that case anymore.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149284934,149284934,src/qt/bitcoin.cpp
laanwj,2017-11-07T07:08:18Z,"I agree, but I just followed the flow already used in the makefile for the wallet, to not have to move large blocks around (which complicates review). A refactor like that could be done separately.",https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149285774,149285774,src/Makefile.qt.include
promag,2017-11-07T13:11:22Z,Can't we just allow ENABLE_BIP70 if ENABLE_WALLET is true? In that case `#if defined(ENABLE_BIP70)` would be enough all over the place.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149362198,149362198,src/qt/bitcoin.cpp
laanwj,2017-11-07T13:25:13Z,That'd make sense (ENABLE_BIP70 implying ENABLE_WALLET).,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149365586,149365586,src/qt/bitcoin.cpp
Sjors,2017-11-09T11:23:43Z,That would break opening links from a browser or a mail client.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r149935131,149935131,src/qt/bitcoin.cpp
luke-jr,2017-11-11T12:22:38Z,We need this for BIP21 too.,https://github.com/bitcoin/bitcoin/pull/11622#discussion_r150382614,150382614,src/qt/bitcoin.cpp
