[
  {
    "sha": "04c52eb08116198ca0f7728545b3ec26a1d320bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGM1MmViMDgxMTYxOThjYTBmNzcyODU0NWIzZWMyNmExZDMyMGJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-06T18:12:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T09:00:46Z"
      },
      "message": "build: Add --disable-bip70 configure option\n\nThis patch adds a --disable-bip70 configure option that disables BIP70\npayment request support. When disabled, this removes the dependency of\nthe GUI on OpenSSL and Protobuf.",
      "tree": {
        "sha": "8f031f1d35427f348f7b6dbaf1c9dce41b5c3011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f031f1d35427f348f7b6dbaf1c9dce41b5c3011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04c52eb08116198ca0f7728545b3ec26a1d320bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c52eb08116198ca0f7728545b3ec26a1d320bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04c52eb08116198ca0f7728545b3ec26a1d320bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c52eb08116198ca0f7728545b3ec26a1d320bc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26efc220a13aa3413f6e55e311e8991445104f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26efc220a13aa3413f6e55e311e8991445104f82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26efc220a13aa3413f6e55e311e8991445104f82"
      }
    ],
    "stats": {
      "total": 207,
      "additions": 194,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b1ac39eeb3079e9e2e6684d3ae65cf5031b6a3aa",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -198,6 +198,11 @@ AC_ARG_ENABLE([zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n+AC_ARG_ENABLE([bip70],\n+  [AS_HELP_STRING([--disable-bip70],\n+  [disable BIP70 (payment protocol) support in GUI (enabled by default)])],\n+  [enable_bip70=$enableval],\n+  [enable_bip70=yes])\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n@@ -930,7 +935,9 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      if test x$enable_bip70 != xno; then\n+        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n+      fi\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n@@ -990,7 +997,9 @@ else\n     esac\n   fi\n \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  if test x$enable_bip70 != xno; then\n+    BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n+  fi\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n@@ -1052,7 +1061,9 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n+if test x$enable_bip70 != xno; then\n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n+fi\n \n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n@@ -1166,6 +1177,15 @@ if test x$bitcoin_enable_qt != xno; then\n   else\n     AC_MSG_RESULT([no])\n   fi\n+\n+  AC_MSG_CHECKING([whether to build BIP70 support])\n+  if test x$enable_bip70 != xno; then\n+    AC_DEFINE([ENABLE_BIP70],[1],[Define if BIP70 support should be compiled in])\n+    enable_bip70=yes\n+    AC_MSG_RESULT([yes])\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n fi\n \n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n@@ -1197,6 +1217,7 @@ AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n+AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n@@ -1316,6 +1337,7 @@ echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n     echo \"    qt version  = $bitcoin_qt_got_major_vers\"\n+    echo \"    with bip70  = $enable_bip70\"\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\""
      },
      {
        "sha": "f74cd4e122c8d930e5711648531b7a25fe7ccca4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -514,9 +514,11 @@ if HARDEN\n \t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n endif\n \n+if ENABLE_BIP70\n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n+endif\n \n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include"
      },
      {
        "sha": "dae29973d05366b2c47b504183501a657736e07c",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -178,9 +178,15 @@ QT_QRC = qt/bitcoin.qrc\n QT_QRC_LOCALE_CPP = qt/qrc_bitcoin_locale.cpp\n QT_QRC_LOCALE = qt/bitcoin_locale.qrc\n \n+if ENABLE_BIP70\n PROTOBUF_CC = qt/paymentrequest.pb.cc\n PROTOBUF_H = qt/paymentrequest.pb.h\n PROTOBUF_PROTO = qt/paymentrequest.proto\n+else\n+PROTOBUF_CC =\n+PROTOBUF_H =\n+PROTOBUF_PROTO =\n+endif\n \n BITCOIN_QT_H = \\\n   qt/addressbookpage.h \\\n@@ -329,7 +335,6 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n-  qt/paymentrequestplus.cpp \\\n   qt/paymentserver.cpp \\\n   qt/receivecoinsdialog.cpp \\\n   qt/receiverequestdialog.cpp \\\n@@ -348,13 +353,19 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n \n+BITCOIN_QT_WALLET_BIP70_CPP = \\\n+  qt/paymentrequestplus.cpp\n+\n BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n if TARGET_WINDOWS\n BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n endif\n if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n-endif\n+if ENABLE_BIP70\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_BIP70_CPP)\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n RES_IMAGES = \n "
      },
      {
        "sha": "ddbdd027715ad691a90d0b5e87932a7b2954ec1a",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -12,9 +12,12 @@ TEST_QT_MOC_CPP = \\\n \n if ENABLE_WALLET\n TEST_QT_MOC_CPP += \\\n-  qt/test/moc_paymentservertests.cpp \\\n   qt/test/moc_wallettests.cpp\n-endif\n+if ENABLE_BIP70\n+TEST_QT_MOC_CPP += \\\n+  qt/test/moc_paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n TEST_QT_H = \\\n   qt/test/compattests.h \\\n@@ -43,10 +46,13 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n   $(TEST_BITCOIN_H)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n-  qt/test/paymentservertests.cpp \\\n   qt/test/wallettests.cpp \\\n   wallet/test/wallet_test_fixture.cpp\n-endif\n+if ENABLE_BIP70\n+qt_test_test_bitcoin_qt_SOURCES += \\\n+  qt/test/paymentservertests.cpp\n+endif # ENABLE_BIP70\n+endif # ENABLE_WALLET\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n "
      },
      {
        "sha": "b46f58e261557c334543e04d7ef402b980c09ff7",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -476,7 +476,9 @@ void BitcoinApplication::initializeResult(bool success)\n         // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n+#ifdef ENABLE_BIP70\n         PaymentServer::LoadRootCAs();\n+#endif\n         paymentServer->setOptionsModel(optionsModel);\n #endif\n \n@@ -492,10 +494,12 @@ void BitcoinApplication::initializeResult(bool success)\n             window->addWallet(BitcoinGUI::DEFAULT_WALLET, walletModel);\n             window->setCurrentWallet(BitcoinGUI::DEFAULT_WALLET);\n \n+#ifdef ENABLE_BIP70\n             connect(walletModel, SIGNAL(coinsSent(CWallet*,SendCoinsRecipient,QByteArray)),\n                              paymentServer, SLOT(fetchPaymentACK(CWallet*,const SendCoinsRecipient&,QByteArray)));\n+#endif // ENABLE_BIP70\n         }\n-#endif\n+#endif // ENABLE_WALLET\n \n         // If -min option passed, start window minimized.\n         if(gArgs.GetBoolArg(\"-min\", false))"
      },
      {
        "sha": "75b2ae98bb222dabbeac78102f4cbd8cadc66d29",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,10 +2,15 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/coincontroldialog.h>\n #include <qt/forms/ui_coincontroldialog.h>\n \n #include <qt/addresstablemodel.h>\n+#include <base58.h>\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>"
      },
      {
        "sha": "cb2e24608ed9e307e967e28bb3f8b3dcb506be2f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -9,6 +9,8 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n+#include <base58.h>\n+#include <chainparams.h>\n #include <fs.h>\n #include <primitives/transaction.h>\n #include <init.h>"
      },
      {
        "sha": "d7f3f19e997751e0ced61df2fe9b04518fcf3ecc",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/paymentserver.h>\n \n #include <qt/bitcoinunits.h>\n@@ -48,6 +52,7 @@\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n+#ifdef ENABLE_BIP70\n // BIP70 payment protocol messages\n const char* BIP70_MESSAGE_PAYMENTACK = \"PaymentACK\";\n const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n@@ -70,6 +75,7 @@ namespace // Anon namespace\n {\n     std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n }\n+#endif\n \n //\n // Create a name that is unique for:\n@@ -96,6 +102,7 @@ static QString ipcServerName()\n \n static QList<QString> savedPaymentRequests;\n \n+#ifdef ENABLE_BIP70\n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n #if QT_VERSION < 0x050000\n@@ -189,6 +196,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n     //    or use Qt's blacklist?\n     //   \"certificate stapling\" with server-side caching is more efficient\n }\n+#endif\n \n //\n // Sending to the server is done synchronously, at startup.\n@@ -230,6 +238,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n                 }\n             }\n         }\n+#ifdef ENABLE_BIP70\n         else if (QFile::exists(arg)) // Filename\n         {\n             savedPaymentRequests.append(arg);\n@@ -253,6 +262,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             // GUI hasn't started yet so we can't pop up a message box.\n             qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n+#endif\n     }\n }\n \n@@ -299,12 +309,16 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n     QObject(parent),\n     saveURIs(true),\n     uriServer(0),\n+#ifdef ENABLE_BIP70\n     netManager(0),\n+#endif\n     optionsModel(0)\n {\n+#ifdef ENABLE_BIP70\n     // Verify that the version of the library that we linked against is\n     // compatible with the version of the headers we compiled against.\n     GOOGLE_PROTOBUF_VERIFY_VERSION;\n+#endif\n \n     // Install global event filter to catch QFileOpenEvents\n     // on Mac: sent when you click bitcoin: links\n@@ -328,14 +342,18 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n         }\n         else {\n             connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n+#ifdef ENABLE_BIP70\n             connect(this, SIGNAL(receivedPaymentACK(QString)), this, SLOT(handlePaymentACK(QString)));\n+#endif\n         }\n     }\n }\n \n PaymentServer::~PaymentServer()\n {\n+#ifdef ENABLE_BIP70\n     google::protobuf::ShutdownProtobufLibrary();\n+#endif\n }\n \n //\n@@ -358,6 +376,7 @@ bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n     return QObject::eventFilter(object, event);\n }\n \n+#ifdef ENABLE_BIP70\n void PaymentServer::initNetManager()\n {\n     if (!optionsModel)\n@@ -383,10 +402,13 @@ void PaymentServer::initNetManager()\n     connect(netManager, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError> &)),\n             this, SLOT(reportSslErrors(QNetworkReply*, const QList<QSslError> &)));\n }\n+#endif\n \n void PaymentServer::uiReady()\n {\n+#ifdef ENABLE_BIP70\n     initNetManager();\n+#endif\n \n     saveURIs = false;\n     for (const QString& s : savedPaymentRequests)\n@@ -413,6 +435,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n #endif\n         if (uri.hasQueryItem(\"r\")) // payment request URI\n         {\n+#ifdef ENABLE_BIP70\n             QByteArray temp;\n             temp.append(uri.queryItemValue(\"r\"));\n             QString decoded = QUrl::fromPercentEncoding(temp);\n@@ -430,7 +453,11 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n             }\n-\n+#else\n+            Q_EMIT message(tr(\"URI handling\"),\n+                tr(\"Cannot process payment request because BIP70 support was not compiled in.\"),\n+                CClientUIInterface::ICON_WARNING);\n+#endif\n             return;\n         }\n         else // normal URI\n@@ -454,6 +481,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n         }\n     }\n \n+#ifdef ENABLE_BIP70\n     if (QFile::exists(s)) // payment request file\n     {\n         PaymentRequestPlus request;\n@@ -469,6 +497,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n         return;\n     }\n+#endif\n }\n \n void PaymentServer::handleURIConnection()\n@@ -492,6 +521,7 @@ void PaymentServer::handleURIConnection()\n     handleURIOrFile(msg);\n }\n \n+#ifdef ENABLE_BIP70\n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n@@ -744,12 +774,14 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     }\n     Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n+#endif\n \n void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n {\n     this->optionsModel = _optionsModel;\n }\n \n+#ifdef ENABLE_BIP70\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't further process or store the paymentACK message\n@@ -808,3 +840,4 @@ X509_STORE* PaymentServer::getCertStore()\n {\n     return certStore.get();\n }\n+#endif"
      },
      {
        "sha": "ad555766fe9d8bbd95bc9a497ab8ef95d903e9f7",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -32,7 +32,13 @@\n // sends them to the server.\n //\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/walletmodel.h>\n \n #include <QObject>\n@@ -75,6 +81,7 @@ class PaymentServer : public QObject\n     explicit PaymentServer(QObject* parent, bool startLocalServer = true);\n     ~PaymentServer();\n \n+#ifdef ENABLE_BIP70\n     // Load root certificate authorities. Pass nullptr (default)\n     // to read from the file specified in the -rootcertificates setting,\n     // or, if that's not set, to use the system default root certificates.\n@@ -84,10 +91,12 @@ class PaymentServer : public QObject\n \n     // Return certificate store\n     static X509_STORE* getCertStore();\n+#endif\n \n     // OptionsModel is used for getting proxy settings and display unit\n     void setOptionsModel(OptionsModel *optionsModel);\n \n+#ifdef ENABLE_BIP70\n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n@@ -96,13 +105,16 @@ class PaymentServer : public QObject\n     static bool verifySize(qint64 requestSize);\n     // Verify the payment request amount is valid\n     static bool verifyAmount(const CAmount& requestAmount);\n+#endif\n \n Q_SIGNALS:\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n+#ifdef ENABLE_BIP70\n     // Fired when a valid PaymentACK is received\n     void receivedPaymentACK(const QString &paymentACKMsg);\n+#endif\n \n     // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n@@ -112,35 +124,43 @@ public Q_SLOTS:\n     // to display payment requests to the user\n     void uiReady();\n \n+#ifdef ENABLE_BIP70\n     // Submit Payment message to a merchant, get back PaymentACK:\n     void fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& recipient, QByteArray transaction);\n+#endif\n \n     // Handle an incoming URI, URI with local file scheme or file\n     void handleURIOrFile(const QString& s);\n \n private Q_SLOTS:\n     void handleURIConnection();\n+#ifdef ENABLE_BIP70\n     void netRequestFinished(QNetworkReply*);\n     void reportSslErrors(QNetworkReply*, const QList<QSslError> &);\n     void handlePaymentACK(const QString& paymentACKMsg);\n+#endif\n \n protected:\n     // Constructor registers this on the parent QApplication to\n     // receive QEvent::FileOpen and QEvent:Drop events\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n+#ifdef ENABLE_BIP70\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n     bool processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n     void fetchRequest(const QUrl& url);\n \n     // Setup networking\n     void initNetManager();\n+#endif\n \n     bool saveURIs;                      // true during startup\n     QLocalServer* uriServer;\n \n+#ifdef ENABLE_BIP70\n     QNetworkAccessManager* netManager;  // Used to fetch payment requests\n+#endif\n \n     OptionsModel *optionsModel;\n };"
      },
      {
        "sha": "90473024bfd7c93d7ede2abacff0f28e12f0dc2c",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/sendcoinsdialog.h>\n #include <qt/forms/ui_sendcoinsdialog.h>\n \n@@ -289,7 +293,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n         QString recipientElement;\n \n+#ifdef ENABLE_BIP70\n         if (!rcp.paymentRequest.IsInitialized()) // normal payment\n+#endif\n         {\n             if(rcp.label.length() > 0) // label with address\n             {\n@@ -301,6 +307,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n                 recipientElement = tr(\"%1 to %2\").arg(amount, address);\n             }\n         }\n+#ifdef ENABLE_BIP70\n         else if(!rcp.authenticatedMerchant.isEmpty()) // authenticated payment request\n         {\n             recipientElement = tr(\"%1 to %2\").arg(amount, GUIUtil::HtmlEscape(rcp.authenticatedMerchant));\n@@ -309,6 +316,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         {\n             recipientElement = tr(\"%1 to %2\").arg(amount, address);\n         }\n+#endif\n \n         formatted.append(recipientElement);\n     }"
      },
      {
        "sha": "ecd687d9c94fd30286a7627fd8bfeaab902887f9",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/sendcoinsentry.h>\n #include <qt/forms/ui_sendcoinsentry.h>\n \n@@ -136,9 +140,11 @@ bool SendCoinsEntry::validate()\n     // Check input validity\n     bool retval = true;\n \n+#ifdef ENABLE_BIP70\n     // Skip checks for payment request\n     if (recipient.paymentRequest.IsInitialized())\n         return retval;\n+#endif\n \n     if (!model->validateAddress(ui->payTo->text()))\n     {\n@@ -169,9 +175,11 @@ bool SendCoinsEntry::validate()\n \n SendCoinsRecipient SendCoinsEntry::getValue()\n {\n+#ifdef ENABLE_BIP70\n     // Payment request\n     if (recipient.paymentRequest.IsInitialized())\n         return recipient;\n+#endif\n \n     // Normal payment\n     recipient.address = ui->payTo->text();\n@@ -199,6 +207,7 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n {\n     recipient = value;\n \n+#ifdef ENABLE_BIP70\n     if (recipient.paymentRequest.IsInitialized()) // payment request\n     {\n         if (recipient.authenticatedMerchant.isEmpty()) // unauthenticated\n@@ -219,6 +228,7 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n         }\n     }\n     else // normal payment\n+#endif\n     {\n         // message\n         ui->messageTextLabel->setText(recipient.message);"
      },
      {
        "sha": "5ebd1371250632ec40653a000f81912549f8c371",
        "filename": "src/qt/test/compattests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/compattests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/compattests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/compattests.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,7 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n #include <qt/paymentrequestplus.h> // this includes protobuf's port.h which defines its own bswap macos\n+#endif\n \n #include <qt/test/compattests.h>\n "
      },
      {
        "sha": "bded29f1167e46187bd2c7ea56c48bb80b4a16b5",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -13,9 +13,11 @@\n #include <qt/test/compattests.h>\n \n #ifdef ENABLE_WALLET\n+#ifdef ENABLE_BIP70\n #include <qt/test/paymentservertests.h>\n+#endif // ENABLE_BIP70\n #include <qt/test/wallettests.h>\n-#endif\n+#endif // ENABLE_WALLET\n \n #include <QApplication>\n #include <QObject>\n@@ -80,7 +82,7 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;\n     }\n-#ifdef ENABLE_WALLET\n+#if defined(ENABLE_WALLET) && defined(ENABLE_BIP70)\n     PaymentServerTests test2;\n     if (QTest::qExec(&test2) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "b635728891a109caff7634b34ab85bf5c4ea5d74",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -1,5 +1,6 @@\n #include <qt/test/wallettests.h>\n \n+#include <base58.h>\n #include <qt/bitcoinamountfield.h>\n #include <qt/callback.h>\n #include <qt/optionsmodel.h>"
      },
      {
        "sha": "2acbb90d220ebad40bec69ee9124f31f92d6949e",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifdef HAVE_CONFIG_H\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/transactiondesc.h>\n \n #include <qt/bitcoinunits.h>\n@@ -248,6 +252,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n+#ifdef ENABLE_BIP70\n     //\n     // PaymentRequest info:\n     //\n@@ -262,6 +267,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                 strHTML += \"<b>\" + tr(\"Merchant\") + \":</b> \" + GUIUtil::HtmlEscape(merchant) + \"<br>\";\n         }\n     }\n+#endif\n \n     if (wtx.IsCoinBase())\n     {"
      },
      {
        "sha": "4c9d669e5528743a105bd984147894a2eb4524e5",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -14,7 +14,9 @@\n #include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/intro.h>\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/guiutil.h>\n \n #include <clientversion.h>\n@@ -80,9 +82,11 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         std::string strUsage = HelpMessage(HMM_BITCOIN_QT);\n         const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n         strUsage += HelpMessageGroup(tr(\"UI Options:\").toStdString());\n+#ifdef ENABLE_BIP70\n         if (showDebug) {\n             strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS));\n         }\n+#endif\n         strUsage += HelpMessageOpt(\"-choosedatadir\", strprintf(tr(\"Choose data directory on startup (default: %u)\").toStdString(), DEFAULT_CHOOSE_DATADIR));\n         strUsage += HelpMessageOpt(\"-lang=<lang>\", tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\").toStdString());\n         strUsage += HelpMessageOpt(\"-min\", tr(\"Start minimized\").toStdString());"
      },
      {
        "sha": "715ef81f3363308c707e041ef1cceece3c9d7613",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/walletmodel.h>\n \n #include <qt/addresstablemodel.h>\n@@ -212,6 +216,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         if (rcp.fSubtractFeeFromAmount)\n             fSubtractFeeFromAmount = true;\n \n+#ifdef ENABLE_BIP70\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n             CAmount subtotal = 0;\n@@ -234,6 +239,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             total += subtotal;\n         }\n         else\n+#endif\n         {   // User-entered bitcoin address / amount:\n             if(!validateAddress(rcp.address))\n             {\n@@ -312,6 +318,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n \n         for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n         {\n+#ifdef ENABLE_BIP70\n             if (rcp.paymentRequest.IsInitialized())\n             {\n                 // Make sure any payment requests involved are still valid.\n@@ -325,7 +332,9 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n                 rcp.paymentRequest.SerializeToString(&value);\n                 newTx->vOrderForm.push_back(make_pair(key, value));\n             }\n-            else if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n+            else\n+#endif\n+            if (!rcp.message.isEmpty()) // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n                 newTx->vOrderForm.push_back(make_pair(\"Message\", rcp.message.toStdString()));\n         }\n \n@@ -344,7 +353,9 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n     for (const SendCoinsRecipient &rcp : transaction.getRecipients())\n     {\n         // Don't touch the address book when we have a payment request\n+#ifdef ENABLE_BIP70\n         if (!rcp.paymentRequest.IsInitialized())\n+#endif\n         {\n             std::string strAddress = rcp.address.toStdString();\n             CTxDestination dest = DecodeDestination(strAddress);"
      },
      {
        "sha": "fa8166f6fcb678beabe48023a6a304747acfcdbd",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -5,9 +5,17 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#ifdef ENABLE_BIP70\n #include <qt/paymentrequestplus.h>\n+#endif\n #include <qt/walletmodeltransaction.h>\n \n+#include <key.h>\n+#include <script/standard.h>\n #include <support/allocators/secure.h>\n \n #include <map>\n@@ -52,8 +60,14 @@ class SendCoinsRecipient\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n+#ifdef ENABLE_BIP70\n     // If from a payment request, paymentRequest.IsInitialized() will be true\n     PaymentRequestPlus paymentRequest;\n+#else\n+    // If building with BIP70 is disabled, keep the payment request around as\n+    // serialized string to ensure load/store is lossless\n+    std::string sPaymentRequest;\n+#endif\n     // Empty if no authentication or invalid signature/cert/etc.\n     QString authenticatedMerchant;\n \n@@ -69,9 +83,11 @@ class SendCoinsRecipient\n         std::string sAddress = address.toStdString();\n         std::string sLabel = label.toStdString();\n         std::string sMessage = message.toStdString();\n+#ifdef ENABLE_BIP70\n         std::string sPaymentRequest;\n         if (!ser_action.ForRead() && paymentRequest.IsInitialized())\n             paymentRequest.SerializeToString(&sPaymentRequest);\n+#endif\n         std::string sAuthenticatedMerchant = authenticatedMerchant.toStdString();\n \n         READWRITE(this->nVersion);\n@@ -87,8 +103,10 @@ class SendCoinsRecipient\n             address = QString::fromStdString(sAddress);\n             label = QString::fromStdString(sLabel);\n             message = QString::fromStdString(sMessage);\n+#ifdef ENABLE_BIP70\n             if (!sPaymentRequest.empty())\n                 paymentRequest.parse(QByteArray::fromRawData(sPaymentRequest.data(), sPaymentRequest.size()));\n+#endif\n             authenticatedMerchant = QString::fromStdString(sAuthenticatedMerchant);\n         }\n     }"
      },
      {
        "sha": "c7244a1b0b94512a64d190df21d5c544782115bf",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -2,6 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#ifdef HAVE_CONFIG_H\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <qt/walletmodeltransaction.h>\n \n #include <policy/policy.h>\n@@ -52,6 +56,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n     {\n         SendCoinsRecipient& rcp = (*it);\n \n+#ifdef ENABLE_BIP70\n         if (rcp.paymentRequest.IsInitialized())\n         {\n             CAmount subtotal = 0;\n@@ -68,6 +73,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n             rcp.amount = subtotal;\n         }\n         else // normal recipient (no payment request)\n+#endif\n         {\n             if (i == nChangePosRet)\n                 i++;"
      },
      {
        "sha": "858b1601eb02114ea66416b8cd8e1d6793fcc70d",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c52eb08116198ca0f7728545b3ec26a1d320bc/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "patch": "@@ -7,8 +7,12 @@\n \n #include <qt/walletmodel.h>\n \n+#include <amount.h>\n+\n #include <QObject>\n \n+#include <memory>\n+\n class SendCoinsRecipient;\n \n class CReserveKey;"
      }
    ]
  },
  {
    "sha": "7ecca660620904199c70e98d22c8e803b02fda16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWNjYTY2MDYyMDkwNDE5OWM3MGU5OGQyMmM4ZTgwM2IwMmZkYTE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-09T15:41:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-28T09:00:46Z"
      },
      "message": "qt: cleanup: Move BIP70 functions together in paymentserver\n\nReduces the number of separate `#ifdefs` spans.",
      "tree": {
        "sha": "cf75ee9c02b3b481df2c0fe703c9ca67c97d3105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf75ee9c02b3b481df2c0fe703c9ca67c97d3105"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ecca660620904199c70e98d22c8e803b02fda16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecca660620904199c70e98d22c8e803b02fda16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ecca660620904199c70e98d22c8e803b02fda16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecca660620904199c70e98d22c8e803b02fda16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c52eb08116198ca0f7728545b3ec26a1d320bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04c52eb08116198ca0f7728545b3ec26a1d320bc"
      }
    ],
    "stats": {
      "total": 318,
      "additions": 153,
      "deletions": 165
    },
    "files": [
      {
        "sha": "5beb5726723da6d2e9ef0eee6f02f67d359c846d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 146,
        "changes": 286,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecca660620904199c70e98d22c8e803b02fda16/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecca660620904199c70e98d22c8e803b02fda16/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=7ecca660620904199c70e98d22c8e803b02fda16",
        "patch": "@@ -60,21 +60,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-\n-struct X509StoreDeleter {\n-      void operator()(X509_STORE* b) {\n-          X509_STORE_free(b);\n-      }\n-};\n-\n-struct X509Deleter {\n-      void operator()(X509* b) { X509_free(b); }\n-};\n-\n-namespace // Anon namespace\n-{\n-    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n-}\n #endif\n \n //\n@@ -102,102 +87,6 @@ static QString ipcServerName()\n \n static QList<QString> savedPaymentRequests;\n \n-#ifdef ENABLE_BIP70\n-static void ReportInvalidCertificate(const QSslCertificate& cert)\n-{\n-#if QT_VERSION < 0x050000\n-    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n-#else\n-    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n-#endif\n-}\n-\n-//\n-// Load OpenSSL's list of root certificate authorities\n-//\n-void PaymentServer::LoadRootCAs(X509_STORE* _store)\n-{\n-    // Unit tests mostly use this, to pass in fake root CAs:\n-    if (_store)\n-    {\n-        certStore.reset(_store);\n-        return;\n-    }\n-\n-    // Normal execution, use either -rootcertificates or system certs:\n-    certStore.reset(X509_STORE_new());\n-\n-    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n-    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n-    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n-\n-    // Empty store\n-    if (certFile.isEmpty()) {\n-        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n-        return;\n-    }\n-\n-    QList<QSslCertificate> certList;\n-\n-    if (certFile != \"-system-\") {\n-            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n-\n-        certList = QSslCertificate::fromPath(certFile);\n-        // Use those certificates when fetching payment requests, too:\n-        QSslSocket::setDefaultCaCertificates(certList);\n-    } else\n-        certList = QSslSocket::systemCaCertificates();\n-\n-    int nRootCerts = 0;\n-    const QDateTime currentTime = QDateTime::currentDateTime();\n-\n-    for (const QSslCertificate& cert : certList) {\n-        // Don't log NULL certificates\n-        if (cert.isNull())\n-            continue;\n-\n-        // Not yet active/valid, or expired certificate\n-        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-\n-#if QT_VERSION >= 0x050000\n-        // Blacklisted certificate\n-        if (cert.isBlacklisted()) {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-#endif\n-        QByteArray certData = cert.toDer();\n-        const unsigned char *data = (const unsigned char *)certData.data();\n-\n-        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n-        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n-        {\n-            // Note: X509_STORE increases the reference count to the X509 object,\n-            // we still have to release our reference to it.\n-            ++nRootCerts;\n-        }\n-        else\n-        {\n-            ReportInvalidCertificate(cert);\n-            continue;\n-        }\n-    }\n-    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n-\n-    // Project for another day:\n-    // Fetch certificate revocation lists, and add them to certStore.\n-    // Issues to consider:\n-    //   performance (start a thread to fetch in background?)\n-    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n-    //   would it be easier to just use a compiled-in blacklist?\n-    //    or use Qt's blacklist?\n-    //   \"certificate stapling\" with server-side caching is more efficient\n-}\n-#endif\n-\n //\n // Sending to the server is done synchronously, at startup.\n // If the server isn't already running, startup continues,\n@@ -376,34 +265,6 @@ bool PaymentServer::eventFilter(QObject *object, QEvent *event)\n     return QObject::eventFilter(object, event);\n }\n \n-#ifdef ENABLE_BIP70\n-void PaymentServer::initNetManager()\n-{\n-    if (!optionsModel)\n-        return;\n-    delete netManager;\n-\n-    // netManager is used to fetch paymentrequests given in bitcoin: URIs\n-    netManager = new QNetworkAccessManager(this);\n-\n-    QNetworkProxy proxy;\n-\n-    // Query active SOCKS5 proxy\n-    if (optionsModel->getProxySettings(proxy)) {\n-        netManager->setProxy(proxy);\n-\n-        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n-    }\n-    else\n-        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n-\n-    connect(netManager, SIGNAL(finished(QNetworkReply*)),\n-            this, SLOT(netRequestFinished(QNetworkReply*)));\n-    connect(netManager, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError> &)),\n-            this, SLOT(reportSslErrors(QNetworkReply*, const QList<QSslError> &)));\n-}\n-#endif\n-\n void PaymentServer::uiReady()\n {\n #ifdef ENABLE_BIP70\n@@ -521,7 +382,147 @@ void PaymentServer::handleURIConnection()\n     handleURIOrFile(msg);\n }\n \n+void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n+{\n+    this->optionsModel = _optionsModel;\n+}\n+\n #ifdef ENABLE_BIP70\n+struct X509StoreDeleter {\n+      void operator()(X509_STORE* b) {\n+          X509_STORE_free(b);\n+      }\n+};\n+\n+struct X509Deleter {\n+      void operator()(X509* b) { X509_free(b); }\n+};\n+\n+namespace // Anon namespace\n+{\n+    std::unique_ptr<X509_STORE, X509StoreDeleter> certStore;\n+}\n+\n+static void ReportInvalidCertificate(const QSslCertificate& cert)\n+{\n+#if QT_VERSION < 0x050000\n+    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n+#else\n+    qDebug() << QString(\"%1: Payment server found an invalid certificate: \").arg(__func__) << cert.serialNumber() << cert.subjectInfo(QSslCertificate::CommonName) << cert.subjectInfo(QSslCertificate::DistinguishedNameQualifier) << cert.subjectInfo(QSslCertificate::OrganizationalUnitName);\n+#endif\n+}\n+\n+//\n+// Load OpenSSL's list of root certificate authorities\n+//\n+void PaymentServer::LoadRootCAs(X509_STORE* _store)\n+{\n+    // Unit tests mostly use this, to pass in fake root CAs:\n+    if (_store)\n+    {\n+        certStore.reset(_store);\n+        return;\n+    }\n+\n+    // Normal execution, use either -rootcertificates or system certs:\n+    certStore.reset(X509_STORE_new());\n+\n+    // Note: use \"-system-\" default here so that users can pass -rootcertificates=\"\"\n+    // and get 'I don't like X.509 certificates, don't trust anybody' behavior:\n+    QString certFile = QString::fromStdString(gArgs.GetArg(\"-rootcertificates\", \"-system-\"));\n+\n+    // Empty store\n+    if (certFile.isEmpty()) {\n+        qDebug() << QString(\"PaymentServer::%1: Payment request authentication via X.509 certificates disabled.\").arg(__func__);\n+        return;\n+    }\n+\n+    QList<QSslCertificate> certList;\n+\n+    if (certFile != \"-system-\") {\n+            qDebug() << QString(\"PaymentServer::%1: Using \\\"%2\\\" as trusted root certificate.\").arg(__func__).arg(certFile);\n+\n+        certList = QSslCertificate::fromPath(certFile);\n+        // Use those certificates when fetching payment requests, too:\n+        QSslSocket::setDefaultCaCertificates(certList);\n+    } else\n+        certList = QSslSocket::systemCaCertificates();\n+\n+    int nRootCerts = 0;\n+    const QDateTime currentTime = QDateTime::currentDateTime();\n+\n+    for (const QSslCertificate& cert : certList) {\n+        // Don't log NULL certificates\n+        if (cert.isNull())\n+            continue;\n+\n+        // Not yet active/valid, or expired certificate\n+        if (currentTime < cert.effectiveDate() || currentTime > cert.expiryDate()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+\n+#if QT_VERSION >= 0x050000\n+        // Blacklisted certificate\n+        if (cert.isBlacklisted()) {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+#endif\n+        QByteArray certData = cert.toDer();\n+        const unsigned char *data = (const unsigned char *)certData.data();\n+\n+        std::unique_ptr<X509, X509Deleter> x509(d2i_X509(0, &data, certData.size()));\n+        if (x509 && X509_STORE_add_cert(certStore.get(), x509.get()))\n+        {\n+            // Note: X509_STORE increases the reference count to the X509 object,\n+            // we still have to release our reference to it.\n+            ++nRootCerts;\n+        }\n+        else\n+        {\n+            ReportInvalidCertificate(cert);\n+            continue;\n+        }\n+    }\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n+\n+    // Project for another day:\n+    // Fetch certificate revocation lists, and add them to certStore.\n+    // Issues to consider:\n+    //   performance (start a thread to fetch in background?)\n+    //   privacy (fetch through tor/proxy so IP address isn't revealed)\n+    //   would it be easier to just use a compiled-in blacklist?\n+    //    or use Qt's blacklist?\n+    //   \"certificate stapling\" with server-side caching is more efficient\n+}\n+\n+void PaymentServer::initNetManager()\n+{\n+    if (!optionsModel)\n+        return;\n+    delete netManager;\n+\n+    // netManager is used to fetch paymentrequests given in bitcoin: URIs\n+    netManager = new QNetworkAccessManager(this);\n+\n+    QNetworkProxy proxy;\n+\n+    // Query active SOCKS5 proxy\n+    if (optionsModel->getProxySettings(proxy)) {\n+        netManager->setProxy(proxy);\n+\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+    }\n+    else\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n+\n+    connect(netManager, SIGNAL(finished(QNetworkReply*)),\n+            this, SLOT(netRequestFinished(QNetworkReply*)));\n+    connect(netManager, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError> &)),\n+            this, SLOT(reportSslErrors(QNetworkReply*, const QList<QSslError> &)));\n+}\n+\n //\n // Warning: readPaymentRequestFromFile() is used in ipcSendCommandLine()\n // so don't use \"Q_EMIT message()\", but \"QMessageBox::\"!\n@@ -774,14 +775,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n     }\n     Q_EMIT message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);\n }\n-#endif\n-\n-void PaymentServer::setOptionsModel(OptionsModel *_optionsModel)\n-{\n-    this->optionsModel = _optionsModel;\n-}\n \n-#ifdef ENABLE_BIP70\n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n     // currently we don't further process or store the paymentACK message"
      },
      {
        "sha": "ff965bbe3c33c172bafddd8578f936bd16bd8924",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecca660620904199c70e98d22c8e803b02fda16/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecca660620904199c70e98d22c8e803b02fda16/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=7ecca660620904199c70e98d22c8e803b02fda16",
        "patch": "@@ -81,6 +81,9 @@ class PaymentServer : public QObject\n     explicit PaymentServer(QObject* parent, bool startLocalServer = true);\n     ~PaymentServer();\n \n+    // OptionsModel is used for getting proxy settings and display unit\n+    void setOptionsModel(OptionsModel *optionsModel);\n+\n #ifdef ENABLE_BIP70\n     // Load root certificate authorities. Pass nullptr (default)\n     // to read from the file specified in the -rootcertificates setting,\n@@ -91,12 +94,7 @@ class PaymentServer : public QObject\n \n     // Return certificate store\n     static X509_STORE* getCertStore();\n-#endif\n \n-    // OptionsModel is used for getting proxy settings and display unit\n-    void setOptionsModel(OptionsModel *optionsModel);\n-\n-#ifdef ENABLE_BIP70\n     // Verify that the payment request network matches the client network\n     static bool verifyNetwork(const payments::PaymentDetails& requestDetails);\n     // Verify if the payment request is expired\n@@ -111,27 +109,27 @@ class PaymentServer : public QObject\n     // Fired when a valid payment request is received\n     void receivedPaymentRequest(SendCoinsRecipient);\n \n+    // Fired when a message should be reported to the user\n+    void message(const QString &title, const QString &message, unsigned int style);\n+\n #ifdef ENABLE_BIP70\n     // Fired when a valid PaymentACK is received\n     void receivedPaymentACK(const QString &paymentACKMsg);\n #endif\n \n-    // Fired when a message should be reported to the user\n-    void message(const QString &title, const QString &message, unsigned int style);\n-\n public Q_SLOTS:\n     // Signal this when the main window's UI is ready\n     // to display payment requests to the user\n     void uiReady();\n \n+    // Handle an incoming URI, URI with local file scheme or file\n+    void handleURIOrFile(const QString& s);\n+\n #ifdef ENABLE_BIP70\n     // Submit Payment message to a merchant, get back PaymentACK:\n     void fetchPaymentACK(CWallet* wallet, const SendCoinsRecipient& recipient, QByteArray transaction);\n #endif\n \n-    // Handle an incoming URI, URI with local file scheme or file\n-    void handleURIOrFile(const QString& s);\n-\n private Q_SLOTS:\n     void handleURIConnection();\n #ifdef ENABLE_BIP70\n@@ -146,23 +144,19 @@ private Q_SLOTS:\n     bool eventFilter(QObject *object, QEvent *event);\n \n private:\n+    bool saveURIs;                      // true during startup\n+    QLocalServer* uriServer;\n+    OptionsModel *optionsModel;\n+\n #ifdef ENABLE_BIP70\n     static bool readPaymentRequestFromFile(const QString& filename, PaymentRequestPlus& request);\n     bool processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n     void fetchRequest(const QUrl& url);\n \n     // Setup networking\n     void initNetManager();\n-#endif\n-\n-    bool saveURIs;                      // true during startup\n-    QLocalServer* uriServer;\n-\n-#ifdef ENABLE_BIP70\n     QNetworkAccessManager* netManager;  // Used to fetch payment requests\n #endif\n-\n-    OptionsModel *optionsModel;\n };\n \n #endif // BITCOIN_QT_PAYMENTSERVER_H"
      }
    ]
  }
]