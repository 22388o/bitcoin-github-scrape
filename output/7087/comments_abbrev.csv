MarcoFalke,2015-11-24T08:14:34Z,It seems this conflicts with #6641\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159191468,159191468,
pstratem,2015-11-24T08:26:02Z,"@MarcoFalke they have the same goal, this one is gated by a cli flag and such can be enabled today\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159193179,159193179,
MarcoFalke,2015-11-24T08:30:39Z,"So we get rid of `-enforcenodebloom` when the other one gets merged? As this is a non documented expert feature, I guess the expert could just cherry-pick #6641 to get the same result today?\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159194069,159194069,
pstratem,2015-11-24T08:39:01Z,"@MarcoFalke the other one doesn't get merged, we simply change the default here from false to true\n\nyes you can cherry pick today; infact i do it all the time, but it's hugely annoying\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159196025,159196025,
jonasschnelli,2015-11-24T08:51:21Z,Concept ACK.\nNeeds help message in init.cpp\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159198420,159198420,
pstratem,2015-11-24T09:02:39Z,@jonasschnelli done\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159200806,159200806,
laanwj,2015-11-24T09:58:57Z,Thanks @pstratem . utACK.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159213761,159213761,
laanwj,2015-11-24T10:01:20Z,"> @MarcoFalke the other one doesn't get merged, we simply change the default here from false to true\n\nI think the idea is that at that point (in the future) the temporary `-enforcenodebloom` option will go away and it will always be enforced, converging to a similar situation as  #6641.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159214294,159214294,
petertodd,2015-11-24T14:38:36Z,utACK\n\nNote that this CLI option is useful for SPV wallet authors who need to test that their NODE_BLOOM support actually works properly in all cases.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159286936,159286936,
gmaxwell,2015-11-24T22:26:49Z,"I suppose, utACK, given @petertodd's logic.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159426023,159426023,
jameshilliard,2015-11-24T23:19:32Z,This also seems like a useful flag for mining pools to use to prevent resource usage from SPV clients.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159436821,159436821,
pstratem,2015-11-25T00:16:15Z,@gmaxwell admittedly my primary motivation is that i often find myself merging #6641 and it's getting annoying\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159445638,159445638,
laanwj,2015-11-25T07:57:00Z,Want to see some tested ACKs here but I definitely like this to be in 0.12.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159528166,159528166,
dcousens,2015-11-25T09:12:31Z,concept ACK / utACK\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159543762,159543762,
jonasschnelli,2015-11-25T09:18:22Z,"Gave it a testshot together with a modificated version of Breadwallet iOS.\nThe `FILTER:` debug output was manually added.\nWorks, ... but Breadwallet likes to reconnect the whole time (multiple times per second).\nWould banning the node for 1-2 minutes make sense?\n\n```\n2015-11-25 09:14:52 receive version message: /breadwallet:0.5.3/: version 70002, blocks=0, us=176.9.45.239:8333, peer=4\n2015-",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159544991,159544991,
pstratem,2015-11-25T09:23:04Z,@jonasschnelli :/\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159545832,159545832,
laanwj,2015-11-25T10:03:50Z,"@jonasschnelli Isn't that, somewhat, the behavior you expect if you explicitly pointed that wallet at the node? In normal use, I'd hope it will cycle through its list and choose another node to connect to?\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159558077,159558077,
jonasschnelli,2015-11-25T10:27:15Z,@laanwj: Right. The behavior is expected (for a SPV wallet with one designated node). I think a bare `fDisconnect=true` (without a ban for serval minutes or an increase of `Misbehaving()Â´ of the disconnected node) can result in endless disconnect/connect loops.\n\nWould a tiny increase of misbehaving points (`Misbehaving(<tbd>)`) in this case be appropriate so that the node gets banned after serva,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159564257,159564257,
laanwj,2015-11-25T10:27:53Z,@jonasschnelli Misbehaving doesn't work over reconnects (it can't).\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159564378,159564378,
jonasschnelli,2015-11-25T10:43:17Z,@laanwj: arr... right. Only the ban does.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159568302,159568302,
TheBlueMatt,2015-11-26T00:01:52Z,"Really not a big fan of this for 0.12. We shouldn't be deploying this in the same version as NODE_BLOOM. I know many people who will be running around telling everyone to run with this option, but it is way too early to do that. If suddenly a large chunk of the network starts using this option many clients that haven't had a chance to upgrade yet will suddenly break, which I think is an absolutely",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159762214,159762214,
jameshilliard,2015-11-26T00:07:15Z,@TheBlueMatt I don't see people all of a sudden trying to turn this off unless they run a high-availability service like a mining pool(where it would be useful on). I think having the flag is a better option than having people run patch sets on core(since they wouldn't be as well tested).\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159763002,159763002,
dcousens,2015-11-26T00:12:04Z,"Agreed with @jameshilliard, easier than merging https://github.com/bitcoin/bitcoin/pull/6641 on my own node\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159763459,159763459,
TheBlueMatt,2015-11-26T00:18:35Z,"I can absolutely see a bunch of people here responding to any number of support queries with ""disable the bloom filtering stuff"" and end up getting connected to in a tight loop (I don't think breadwallet is the only one that does this). Certainly encouraging miners and exchanges to all start turning this on before any spv clients have even written code to handle it (have any? Im not aware of any) ",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159764146,159764146,
jameshilliard,2015-11-26T00:32:55Z,@TheBlueMatt What's the best way to force disconnect SPV clients so that they don't keep trying to reconnect? I think f2pool bans any non-white-listed clients by subver but I'm not sure how different that disconnect implementation is. Another pool operator just iptables bans SPV clients when they start using resources.  We will likely always have some non-upgraded SPV clients regardless and this w,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159765654,159765654,
TheBlueMatt,2015-11-26T00:57:48Z,"@jameshilliard no, we should just be disconnecting them, that is the correct behavior, but it isnt something we just try to do often. My point is more, if this patch is merged, people who are not experiencing issues with bloom filter-based load will start enabling it, potentially causing serious issues to virtually all deployed SPV clients. If I thought no one was going to go around telling people",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159769416,159769416,
jameshilliard,2015-11-26T01:05:16Z,"@TheBlueMatt what real world problems would just disconnecting them cause, wouldn't they just try to connect to a different node?\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159770248,159770248,
petertodd,2015-11-26T01:05:55Z,"@TheBlueMatt I tested SPV behavior ages ago when I originally implemented NODE_BLOOM, and the only time you get a tight reconnection loop is when the user has specifically asked the SPV wallet to be a peer. bitcoinj does exponential backoff for failed peers, so peers discovered via normal methods won't be reconnected too in a tight loop: https://github.com/bitcoinj/bitcoinj/blob/master/core/src/ma",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159770303,159770303,
jameshilliard,2015-11-26T01:11:12Z,@petertodd can the DNS seeds be modified to take version number and the service bit into account and simply exclude any 0.12 clients that have NODE_BLOOM disabled? That way SPV clients can either connect to older nodes or 0.12 nodes that specifically allow bloom filters.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159771501,159771501,
TheBlueMatt,2015-11-26T01:15:34Z,"@petertodd Hmm, ok, good to hear that bitcoinj doesnt do tight reconnect loop (not sure who told me it did :( ). Still, that does not mean this will not break things without giving them almost any time to get an upgrade deployed (bitcoinj isnt the only SPV implementation anymore...has anyone done a census of how each behaves?). Further, no one has suggested serious justification for doing this now",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159772567,159772567,
petertodd,2015-11-26T01:26:06Z,"@TheBlueMatt It's just a obscure command line option - heck we added an option to not relay transactions, a much more problematic flag if used widely. I think part of why people are pushing hard to just merge it precisely because people are pushing hard not too. :)\n\nAnyway, a circumstance where a lot of people are enabling this option suddenly is probably a circumstance where you want it availab",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159773957,159773957,
petertodd,2015-11-26T01:48:15Z,"@TheBlueMatt Speaking of DNS seeds, here's a patch to sipa's seed to only return bloom-supporting peers: https://github.com/sipa/bitcoin-seeder/pull/34\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159777435,159777435,
TheBlueMatt,2015-11-26T01:52:06Z,"Indeed, but not realying transaction is not likely to be deployed widely because there is not a fear of DoS attacks. My point is not that we shouldn't have it available (I started the whole recent NODE_BLOOM push because we should eventually have it available in case of emergencies) but that I'm afraid people will start deploying it while it still breaks a ton of clients. The fact that half the pe",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159778150,159778150,
jameshilliard,2015-11-26T02:06:11Z,> The fact that half the people commenting on this PR are running a similar patch on their own nodes is sufficient evidence to me that a bunch of people will enable this option even when they aren't facing active DoS issues.\n\nI think everyone here wanting to use this has a valid use. In any case most people run default settings and often don't even bother to upgrade their nodes(majority of nodes,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159781521,159781521,
TheBlueMatt,2015-11-26T02:08:08Z,"@jameshilliard I'm not at all convinced. I absolutely know that @pstratem is running it on nodes as a preventative measure (or to cut down CPU load on machines where it doesnt really matter what the CPU load is).\n\nAs for disconnection, if a client is spending all of its time reconnecting, I've definitely seen bugs where it would stall chain sync.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159781805,159781805,
jameshilliard,2015-11-26T02:29:54Z,"> As for disconnection, if a client is spending all of its time reconnecting, I've definitely seen bugs where it would stall chain sync.\n\nSo SPV wallets are interpreting a disconnect as just a network issue and just keep retrying...that sounds like a pretty bad DoS vulnerability on their side? What happens if we just completely ban the SPV client?\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159784875,159784875,
petertodd,2015-11-26T02:30:26Z,"@TheBlueMatt bitcoinj has 5 different mainnet DNS seeds, and all but seed returns about 25 addresses. Every address returned is potentially used, and ones that don't work are skipped, so you'd need all 100 or so potential peers to have turned this option on to be in a situation where you couldn't connect. (five if you're behind a DNS server that returns single results) That's just not very likely ",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159784926,159784926,
TheBlueMatt,2015-11-26T02:37:26Z,"Are there not other spv clients than Bitcoin? That doesn't seem like the case?\n\nMy concern is, do you really know how many of the various nodes on the network are run by miners (and would likely switch to using this flag rather quickly)? My impression is it's actually a ton, given that the approach to relay most miners seem to still use is to spin up a ton of geographically distributed nodes and",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159786271,159786271,
pstratem,2015-11-26T02:59:01Z,@TheBlueMatt I'm far less worried about SPV clients being interrupted than I am a massive DoS attack using bloom filters.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159789209,159789209,
TheBlueMatt,2015-11-26T03:04:21Z,"Yes, and we should fix such DoS vectors without disturbing legitimate clients if possible. We can merge the mempool-call-limits pull and limit filtered block requests (which we already do to one-per-process-each-node's-pending-messages so it can't completely starve other connections).\n\nOn November 25, 2015 6:59:10 PM PST, Patrick Strateman notifications@github.com wrote:\n\n> @TheBlueMatt I'm fa",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159790395,159790395,
petertodd,2015-11-26T03:33:40Z,"@TheBlueMatt The only SPV implementations I know with significant usage are bitcoinj and the library breadwallet uses.\n\nAnyway, lets do the math on this, assuming the worst case where your local DNS server returns one peer each. What's the probability of getting at least two bloom supporting peers, out of 5 seeds? This is a binomial problem and we want the CDF where X <= 1, which can be calculat",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159793893,159793893,
TheBlueMatt,2015-11-26T03:40:28Z,"That isn't the only concern. If your implementation gets into a reconnect loop and doesn't kill itself after some time, you'll blow through radio uptime/battery life pretty significantly. \n\nOn November 25, 2015 7:33:48 PM PST, Peter Todd notifications@github.com wrote:\n\n> @TheBlueMatt The only SPV implementations I know with significant usage\n> are bitcoinj and the library breadwallet uses.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159794824,159794824,
petertodd,2015-11-26T03:42:02Z,"@TheBlueMatt Bitcoinj has exponential backoff bottoming out at an attempt every 10 minutes; why would it get into a reconnect loop?\n\nEven if that could happen, bloom filters are far from the only way that could happen.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159795325,159795325,
TheBlueMatt,2015-11-26T03:43:53Z,"Yes, you've clearly stated that Bitcoinj likely won't be effected unless all of your peers have this enabled. However, another comment already indicated breadwallet seems to get into a reconnect loop.\n\nOn November 25, 2015 7:42:10 PM PST, Peter Todd notifications@github.com wrote:\n\n> @TheBlueMatt Bitcoinj has exponential backoff bottoming out at an\n> attempt every 10 minutes; why would it get",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159795872,159795872,
dcousens,2015-11-26T03:54:14Z,"@TheBlueMatt only because only 1 node was specified by @jonasschnelli for connectivity.\nIt should probably back off however, ping @voisine?\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159797024,159797024,
petertodd,2015-11-26T04:04:00Z,"@TheBlueMatt Yeah, I just checked, non-manually-added peers aren't tried again after a disconnect. Also, unlike bitcoinj, Breadwallet processes addr messages and keeps a persistent set of known addresses across reboots.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159798429,159798429,
pstratem,2015-11-26T04:35:08Z,@TheBlueMatt I really do not believe there is a practical issue here.\n,https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159801715,159801715,
laanwj,2015-11-26T07:30:31Z,"> Yes, you've clearly stated that Bitcoinj likely won't be effected unless all of your peers have this enabled. However, another comment already indicated breadwallet seems to get into a reconnect loop.\n\nThat was cleared up a post later, when it was revealed that he was explicitly telling the software to connect to his node. Retrying is the expected behavior (what if the node is 'fixed' in the m",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159835004,159835004,
gmaxwell,2015-11-26T07:36:04Z,"As far as the concern that miners may turn this on and that maybe their nodes are a substantial fraction of the network: In 0.12 they can set the upload limiter, which will disconnect lite wallets most of the time just as much as this will.\n\nIf it becomes the case that people dig up the hidden open and are turning this on and causing problems we can respond by starting up more nodes and setting ",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159835608,159835608,
gmaxwell,2015-11-26T07:37:54Z,"FWIW, I've been testing the bandwidth limiting cranked all the way down at home since that patch was first written. I've seen it hang up on zillions of lite wallets and none have gone into a reconnect loop.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159835833,159835833,
laanwj,2015-11-26T07:41:40Z,">  I've seen it hang up on zillions of lite wallets and none have gone into a reconnect loop.\n\nThinking of it, it would be extremely unfriendly behavior to reconnect to a random peer that disconnects you. I've done experiments where I had bitcoind in a restart loop every few minutes, then compared which nodes were reconnecting, I'm fairly sure I've seen that behavior only with spy nodes.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159836978,159836978,
jonasschnelli,2015-11-26T07:59:25Z,"@dcousens @voisine\n\n> only because only 1 node was specified by @jonasschnelli for connectivity.\n\nMaybe my manual change (to only connect to one peer) made Breadwallet end up in a reconnect loop. Not sure about it. Anyways: if its an issue, it needs to be solved on the SPV client side.\n",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-159841100,159841100,
voisine,2015-12-22T00:06:41Z,"Just found this discussion and thought I'd chime in. Breadwallet will choose a new random node for each reconnect attempt, and after 20 failed attempts in a row it will stop and display ""not connected"" in the UI, and wait for the user to manually initiate another 20 reconnect attempts to random nodes. It also keeps track of nodes that don't provide expected responses and marks them as misbehaving ",https://github.com/bitcoin/bitcoin/pull/7087#issuecomment-166463529,166463529,
laanwj,2015-11-24T09:05:10Z,Why is this block of code moved?\n,https://github.com/bitcoin/bitcoin/pull/7087#discussion_r45709938,45709938,src/main.cpp
pstratem,2015-11-24T09:20:44Z,It simplifies the logic to move it.\n,https://github.com/bitcoin/bitcoin/pull/7087#discussion_r45711396,45711396,src/main.cpp
laanwj,2015-11-24T09:25:07Z,"How?\n\nPlease explain things like this in your commit messages. Why you did it, why it is correct, and so on.\nSay - this causes a bug at some point in the future, developers need to be able to know why you did it. With an empty commit message (apart from the title) that's hard to figure out.\n",https://github.com/bitcoin/bitcoin/pull/7087#discussion_r45711881,45711881,src/main.cpp
laanwj,2015-11-24T09:59:45Z,Nit: don't use translation _() for debug option messages.\n,https://github.com/bitcoin/bitcoin/pull/7087#discussion_r45715407,45715407,src/init.cpp
