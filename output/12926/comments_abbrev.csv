practicalswift,2018-04-09T21:31:04Z,"Strong concept ACK.\n\nI like the straightforwardness and compactness of this solution vs. the previous attempt at parallelism.\n\nDo you have any speedup measurements?",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379900393,379900393,
sipa,2018-04-09T21:37:44Z,@practicalswift 48 minutes (when lucky) to 23 minutes for the win32 test in Travis.,https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379902090,379902090,
MarcoFalke,2018-04-09T21:43:27Z,"> 48 minutes (when lucky) to 23 minutes for the win32 test in Travis.\n\n:tada: ",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379903446,379903446,
MarcoFalke,2018-04-09T21:45:27Z,utACK e764ddcab74755274856cf217cdeb83e2d5d9bc0,https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379903915,379903915,
practicalswift,2018-04-09T21:46:17Z,@sipa Wow! That will help us get rid of those nasty win32 Travis timeouts! :-),https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379904147,379904147,
practicalswift,2018-04-09T21:49:29Z,"utACK e764ddcab74755274856cf217cdeb83e2d5d9bc0\n\nMy shell nits on this PR would have been communicated automatically (and hopefully fixed pre human review) if `shellcheck` linting was enabled in Travis. Please help review #12871 if you find `shellcheck` valuable :-)",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379904867,379904867,
theuni,2018-04-09T22:04:31Z,">48 minutes (when lucky) to 23 minutes for the win32 test in Travis.\n\nNice! Reviewing.",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379908238,379908238,
theuni,2018-04-09T22:07:36Z,"```bash\ncory@Macbook:~/dev/bitcoin/src$ sort -R\nsort: invalid option -- R\n```\n:(",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379908927,379908927,
practicalswift,2018-04-09T22:09:15Z,"@theuni Oh, that's bad! What version of `sort` are you using?\n\nFWIW:\n\n```\n$ sort --version\n2.3-Apple (99)\n$ (echo A; echo B) | sort -R\nB\nA\n$ (echo A; echo B) | sort -R\nA\nB\n```",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379909300,379909300,
sipa,2018-04-09T22:11:10Z,"If the random sorting is an issue we can just sort alphabetically. This would also let us do things like indicate which tests are big in their name for example, to put them earlier in the list.",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379909756,379909756,
theuni,2018-04-09T22:15:27Z,"@sipa The profile dir for tests is defined as:\n```c++\npathTemp = fs::temp_directory_path() / strprintf(""test_bitcoin_%lu_%i"", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n```\nAs GetTime() has only second-level resolution, we may want to bump up the rand range a bit.",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379910686,379910686,
practicalswift,2018-04-09T22:17:07Z,"@sipa What about using `awk`?\n\n```\n$ (echo A; echo B) | awk 'BEGIN { srand(); } { printf(""%.10f %s\n"", rand(), $0); }' | \\n      sort | cut -f2- -d' '\nA\nB\n$ (echo A; echo B) | awk 'BEGIN { srand(); } { printf(""%.10f %s\n"", rand(), $0); }' | \\n      sort | cut -f2- -d' '\nB\nA\n```",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379911013,379911013,
sipa,2018-04-09T22:25:45Z,"Removed random sorting (made it alphabetical), reordered the Travis tests from slow to fast (except the doc test which goes still first for fast-fail), and increased the test temp directory entropy.",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379912850,379912850,
practicalswift,2018-04-09T22:27:54Z,utACK aa9be23327db7a12760f250e7261b5f6be6f9de0,https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379913313,379913313,
sipa,2018-04-09T22:28:34Z,"> Why the reordering of Travis builds? I'm not opposing it – just curious :-)\n\nIn order to maximally exploit parallelism (of Travis jobs) you generally want to start the longest-running ones to start first. Sometimes not all jobs are started simultaneously (based on other load), in which case this matters in reducing the overall wall clock time spent between pushing and getting a final Travis ",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379913449,379913449,
theuni,2018-04-10T01:08:02Z,"Reviewers: Sorry for the interruption, see the new approach here.\n\nI was discussing this earlier with @sipa and wanted to see if we could get this to work while preserving the make jobs. It turned out to be substantially simpler than what was in the PR already, and I guess @sipa doesn't hate it too much :)",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379941417,379941417,
sipa,2018-04-10T01:24:26Z,"Totally changed the approach, integrating everything into makefiles rather than creating external runner scripts (thanks @theuni). See updated PR description.",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379943885,379943885,
jamesob,2018-04-10T02:17:45Z,"Tested ACK https://github.com/bitcoin/bitcoin/pull/12926/commits/7ef9cd8491185af26295b3501fca9d2a49379364\n\nSeeing a mild improvement locally :tada: \n\n### 201804_parunit\n`make -j 4 check  282.46s user 14.91s system 252% cpu 1:57.88 total`\n\n### master\n`make -j 4 check  193.71s user 10.10s system 129% cpu 2:37.31 total`",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379952112,379952112,
laanwj,2018-04-10T07:14:29Z,"> Totally changed the approach, integrating everything into makefiles rather than creating external runner scripts (thanks @theuni). See updated PR description.\n\nHeh you implemented my IRC joke. I'm surprised that this works out to an elegant approach.\nBut it's really neat - will test.\n\nAfter already having built all, including the test executables, and commenting out secp256k1 and univa",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-379998580,379998580,
practicalswift,2018-04-10T09:23:56Z,"The new version is even better!\n\nNice to avoid having two settings for concurrency (`make -j` and shell script variable).",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-380033741,380033741,
kallewoof,2018-04-10T09:39:36Z,"Seeing about 2x improvement. Tested ACK\n```\nmaster:         make -j10 check   97.74s user 52.14s system 138% cpu 1:48.19  total\n201804_parunit: make -j10 check  109.30s user 16.73s system 219% cpu   57.482 total\n```\n",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-380038424,380038424,
jonasschnelli,2018-04-10T12:11:39Z,"Tested ACK 7ef9cd8491185af26295b3501fca9d2a49379364\n\nOSX 10.13.4 (2.9 GHz Intel Core i7): `time make -j5 V=1 check`\n\nThis PR:\n```\nreal	1m28.438s\nuser	3m42.053s\nsys	0m45.473s\n```\n\nversus master:\n```\nreal	3m5.687s\nuser	2m57.911s\nsys	0m46.390s\n```",https://github.com/bitcoin/bitcoin/pull/12926#issuecomment-380076229,380076229,
practicalswift,2018-04-09T20:51:09Z,"Nit: Double quote to prevent globbing and word splitting :-)\n\n`cat ""$DIR""/../../src/{,wallet/,qt/}test/*.cpp`",https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180226389,180226389,test/util/bitcoin-unit-tests.sh
jamesob,2018-04-09T20:54:12Z,Would it make sense just to do `xargs ... -P 0`?,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180227272,180227272,test/util/bitcoin-unit-tests.sh
practicalswift,2018-04-09T21:02:36Z,`s/.py/.sh/` :-),https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180229569,180229569,src/Makefile.test.include
practicalswift,2018-04-09T21:08:15Z,`shuf` is not available under OS X by default. Is `sort -R` sufficiently portable?,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180231185,180231185,test/util/bitcoin-unit-tests.sh
sipa,2018-04-09T21:27:07Z,"I don't like hardcoding the parallellism here, but with `-P 0` my system will run all tests simultaneously - that's a bit scary w.r.t. resource usage.",https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180236189,180236189,test/util/bitcoin-unit-tests.sh
sipa,2018-04-09T21:27:37Z,"Fixed (the files are now passed in from Makefile, as suggested by Cory).",https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180236323,180236323,test/util/bitcoin-unit-tests.sh
sipa,2018-04-09T21:27:46Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180236366,180236366,src/Makefile.test.include
sipa,2018-04-09T21:27:52Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180236386,180236386,test/util/bitcoin-unit-tests.sh
practicalswift,2018-04-09T21:33:00Z,Intentionally keeping `bitcoin-util-test.py` in there?,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180237715,180237715,src/Makefile.test.include
sipa,2018-04-09T21:37:17Z,These are unrelated tests.,https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180238722,180238722,src/Makefile.test.include
practicalswift,2018-04-09T21:44:12Z,"Oh, ofc – my bad. Sorry :-)",https://github.com/bitcoin/bitcoin/pull/12926#discussion_r180240418,180240418,src/Makefile.test.include
