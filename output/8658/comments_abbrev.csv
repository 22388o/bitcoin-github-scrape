dcousens,2016-09-03T01:11:52Z,I'd suspect the binaries to be the same if any optimization flags are enabled.\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-244518023,244518023,
paveljanik,2016-09-03T06:26:26Z,"Tests/travis is OK. Can anyone test binaries, please?\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-244530071,244530071,
paveljanik,2016-09-09T12:00:45Z,Rebased to match `net.h`-> `addrdb.h` commit from upstream.\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-245893805,245893805,
sipa,2016-09-09T12:46:59Z,"The only place where the implicitly-passed-around `nVersion` variable is actually used is in `CAddress::SerializationOp`, and there it is just comparing with a constant directly.\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-245902848,245902848,
paveljanik,2016-09-09T12:58:01Z,@sipa Exactly. And there is no such line like in the proposed change.\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-245905223,245905223,
sipa,2016-09-09T13:06:50Z,"utACK 64d9507ea5724634783cdaa290943292132086a9\n\nAfter this I think we can actually go further and completely remove the nType and nVersion arguments from all SerializationOp methods, and replace them with calls to s.GetType() and s.GetVersion().\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-245907250,245907250,
MarcoFalke,2016-09-09T20:18:17Z,"> Tests/travis is OK. Can anyone test binaries, please?\n\n@paveljanik No need to test them. Apparently I get the same binaries, which means this is indeed dead code. (Instead of deleting the lines, you can replace them with empty lines to get rid of the offsets in the objdump). Can you check this?\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246027743,246027743,
MarcoFalke,2016-09-09T20:27:24Z,"bitcoind-matches-ACK 64d9507ea5724634783cdaa290943292132086a9 (qt binaries do not match, though)\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246030102,246030102,
luke-jr,2016-09-10T09:54:08Z,"Eh, isn't this intended to allow the serialised version to override the parameter?\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246103024,246103024,
sipa,2016-09-10T10:01:58Z,"@luke-jr Yes, that was the intention. But I don't think it's very usable.\nFirst of all, it requires that everything can be encoded inside a single\nversion number, something that is increasingly hard in a decentralized\nenvironment. It also has never ever actually been used. It also is sort of\na layer violation, as you need a single namespace for versioning across all\nof wallet code, network co",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246103343,246103343,
luke-jr,2016-09-10T10:32:56Z,"These are all implementation-specific objects, so decentralisation is less of an issue. But I guess it's fine so long as it's never been used before (but I'm not certain of that).\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246104574,246104574,
laanwj,2016-09-14T08:43:54Z,"Concept ACK.\n\n> Eh, isn't this intended to allow the serialised version to override the parameter?\n\nIt can always be added back for a certain serialization op in the oft case that that needs to be used. No need to have dead code around 'just in case'.\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-246945763,246945763,
paveljanik,2016-09-19T17:21:58Z,I think this is ready for more ACKs. I volunteer for the next steps pointed out by @sipa above.\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-248059249,248059249,
laanwj,2016-09-27T14:21:18Z,"> bitcoind-matches-ACK 64d9507 (qt binaries do not match, though)\n\nCannot reproduce this, I detect differences in the following functions between  64d9507 and 6898213:\n\n```\nvoid CBanEntry::SerializationOp<CDataStream, CSerActionSerialize>(CDataStream&, CSerActionSerialize, int, int)\nvoid CBanEntry::SerializationOp<CDataStream, CSerActionUnserialize>(CDataStream&, CSerActionUnserialize, int, ",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-249879508,249879508,
MarcoFalke,2016-09-27T15:57:05Z,">   35:   mov    [-$0x34a,%r8d-]{+$0x34b,%r8d+}\n\nMake sure to replace the deleted lines by empty lines to get rid of the offset?\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-249909875,249909875,
paveljanik,2016-09-27T16:11:32Z,BTW - this is not `-Wshadow` PR...\n\nI think that we should compare binaries in some higher `-O`...\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-249914216,249914216,
sipa,2016-09-28T00:44:52Z,I think it's unlikely that this can result in identical binaries. It requires some cross-function reasoning across multiple modules to see this has no effect. We are changing the actual values of arguments passed down - they're just not used.\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250041045,250041045,
laanwj,2016-09-28T06:54:00Z,"> Make sure to replace the deleted lines by empty lines to get rid of the offset?\n\nSo these are line numbers? Ok, that'd make sense, will try again and w/ disabled **LINE**.\n\n> I think it's unlikely that this can result in identical binaries. \n\nYes the changes in the constructors are more involved.\n\n> I think that we should compare binaries in some higher -O...\n\nIncreasing -O generally m",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250086603,250086603,
paveljanik,2016-09-28T07:06:08Z,"It is very unlikely to produce the same binary, but to be safe, we should fully understand the difference.\n\nCan `template inline` play some role here?\n\nAs a side note: in the ""gcc set"" `-Wshadow` I automatically changed `nVersion` to `_nVersion` in `class CBlock : public CBlockHeader`. It was not used at all in the function, so I thought without testing it is OK. But `p2p-segwit.py` started re",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250088594,250088594,
laanwj,2016-09-28T07:32:13Z,"> So these are line numbers? Ok, that'd make sense, will try again and w/ disabled LINE.\n\nThey had to do with `__LINE__` usage in `LOCK`/`TRY_LOCK`, which is interesting because without lock debugging the line numbers aren't used at all. So our `sync.h` macros/wrappers do incur a slight overhead even in that case.\n\nIn any case I've updated the above list, they no longer show up after removing ",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250093189,250093189,
laanwj,2016-09-28T07:47:35Z,"> We are changing the actual values of arguments passed down - they're just not used.\n\nRight: `READWRITE` expands to\n\n```\n#define READWRITE(obj)      (::SerReadWrite(s, (obj), nType, nVersion, ser_action))\n```\n\nThus silently passes nVersion to ::SerReadWrite. This function may or may not use the argument, but it is used.\n\nThis does change my opinion on this change from ""harmless"" to ""har",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250096029,250096029,
laanwj,2016-09-28T07:54:58Z,">  in class CBlock : public CBlockHeader. \n\nOHH I get it, maybe.\nUnlike the serialization functions changed in this PR, `CBlockHeader::SerializationOp` does **not** have the `nVersion = this->nVersion` line.\nThis means that the behavior does change if you rename the argument `nVersion` to `_nVersion`. After all,\n\n```\nREADWRITE(this->nVersion);\nREADWRITE(hashPrevBlock);  \n```\n\nexpands to",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250097417,250097417,
dcousens,2016-09-28T09:01:53Z,"@laanwj IMHO,  this reveals that `READWRITE` is hiding intricacies which should instead be in plain sight.\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250111686,250111686,
laanwj,2016-09-28T09:54:29Z,"> @laanwj IMHO, this reveals that READWRITE is hiding intricacies which should instead be in plain sight.\n\nIMO it'd have been better to just write those macros out., they make the code shorter apparently but much more obfuscated.\n(but that's an issue for another time)\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250123368,250123368,
sipa,2016-09-28T10:01:23Z,"My suggestion was that after this PR we would proceed to get rid of the\nnVersion and nType implicit parameters, and just replace them with getters\non the stream implementation.\n\nThat would make things much easier to reason about.\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250124864,250124864,
MarcoFalke,2016-09-28T18:42:20Z,Guess I've been doing it wrong then.\n\n``` sh\ngit checkout bitcoin/master && \\ngit reset --hard HEAD && \\ncurl https://raw.githubusercontent.com/laanwj/bitcoin-maintainer-tools/6e4425587736144b067f67ad792d9ee904e74fd7/patches/stripbuildinfo.patch | patch -p 1 && \\nmake -j 2 && \\nobjdump -d -r -C --no-show-raw-insn src/bitcoind > /tmp/d_old && \\ncurl https://github.com/bitcoin/bitcoin/commit,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250260641,250260641,
laanwj,2016-09-29T06:24:24Z,"@MarcoFalke the differences there would be:\n- I check the commits themselves, you merge the patch on top of master\n- I use a specific set of optimization flags, you use default optimization flags (-O2)\n\nI don't think the first would make executables suddenly match. I'll retry with ""-O2"" and see if I can get a match.\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250381001,250381001,
laanwj,2016-09-29T06:46:36Z,Good news: using `-O2` gives a complete match on bitcoind:\n\n```\n317c917ed86f7c32113598876ac3f48f84ea73281d01f69df1de78f429a019ed  /tmp/compare/bitcoind.64d9507.stripped\n317c917ed86f7c32113598876ac3f48f84ea73281d01f69df1de78f429a019ed  /tmp/compare/bitcoind.6898213.stripped\n```\n\nas well as on bitcoin-qt\n\n```\n8675a67f3c2e5d4fc76f0083caeaa50585ba612e9b881ca22deea35de7f62c8b  /tmp/compare/bi,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250384250,250384250,
paveljanik,2016-09-29T07:46:57Z,@laanwj Thanks!\n,https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250395019,250395019,
laanwj,2016-09-29T12:59:40Z,"This still has a [WIP] tag on the commit. However I'm going to merge nevertheless, as rebasing to change the commit message would have us all re-check executables again...\n",https://github.com/bitcoin/bitcoin/pull/8658#issuecomment-250458797,250458797,
