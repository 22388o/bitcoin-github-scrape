sipa,2018-11-12T02:55:38Z,"Concept ACK, but you can't break compatibility by reordering another argument to `listreceivedbyaddress`. It's also unnecessary I think; you can specify ""null"" to get the default.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-437736834,437736834,
andrewtoth,2018-11-12T04:11:50Z,"@sipa Not sure how to pass ""null"" as `address_filter` parameter without breaking https://github.com/bitcoin/bitcoin/pull/14417.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-437747917,437747917,
gmaxwell,2018-11-12T20:21:45Z,"Do we know a usecase where anyone would want this behaviour? It seems transparently broken to me.\n\nIf not, I think I would prefer we fix it and have a LOUD release note about the change, and if we're feeling especially conservative have a hidden config option to restore the old behaviour which we can drop after a couple releases if no one reports needing it.\n\nHaving an option presents a pe",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438016042,438016042,
promag,2018-11-12T20:34:05Z,@gmaxwell it is however useful to know if a payment was made regardless if it takes 100 blocks to be spendable?,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438019511,438019511,
gmaxwell,2018-11-12T23:18:51Z,"It can be, but listreceivedbyaddress doesn't normally show unconfirmed payments and the output IIRC doesn't even tell you if its an immature coinbase payment (and if it did, many people who didn't even realize coinbase payments were possible would not know to check for it)",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438065378,438065378,
promag,2018-11-12T23:39:29Z,@gmaxwell what if we consider `minconf` the depth added to the minimum spendable depth? Then minconf=1 for coinbase transactions would be 101?,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438071397,438071397,
andrewtoth,2018-11-13T00:07:31Z,"@gmaxwell I agree. I think it is an error that should be corrected. I'm not sure why anyone would want coinbase txs excluded. I haven't seen a good explanation for why they are filtered out, or a usecase.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438078179,438078179,
DrahtBot,2018-11-13T15:20:44Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438304021,438304021,
andrewtoth,2018-11-15T04:56:42Z,Commits and PR description have been updated.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-438917596,438917596,
andrewtoth,2018-11-16T18:52:10Z,I refactored the `getreceivedby` calls to use a common function `GetReceived`. This mirrors the `listreceivedby` calls and doesn't repeat as much code.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-439490575,439490575,
andrewtoth,2018-11-20T02:43:02Z,@gmaxwell Updated this PR with your suggestions.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-440117123,440117123,
practicalswift,2019-05-07T16:14:11Z,This PR doesn't compile when rebased on `master`. Are you still working on this @andrewtoth? :-),https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-490147532,490147532,
andrewtoth,2019-05-07T23:17:24Z,@practicalswift Hmm I rebased and it compiled fine. I'll push the rebase anyways.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-490288411,490288411,
andrewtoth,2020-04-30T13:48:20Z,I've update this after #17579 so it should be much easier to review. One thing I'm not sure of is how to make the final argument hidden with `RPCHelpMan`.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-621864062,621864062,
MarcoFalke,2020-04-30T14:08:39Z,"Can you explain why you want to hide an argument, especially since you suggest users set the argument to `false` if they run into problems. In other words you are asking users to blindly pass an undocumented value into an RPC.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-621876230,621876230,
andrewtoth,2020-04-30T14:14:24Z,"Seems I misread one of the comments:\n>if we're feeling especially conservative have a hidden config option to restore the old behaviour which we can drop after a couple releases if no one reports needing it.\n\nSo, it should be a hidden config option instead of a hidden argument. I can update to include the config option, but do you think it's necessary?",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-621879825,621879825,
MarcoFalke,2020-04-30T14:18:19Z,"Oh, I didn't recall that comment. I see two options:\n\n* Show the argument in the RPC help, but explain that it is not supposed to be toggled unless needed and that it is going away in a few releases.\n* Or, add a debug config option that says the same.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-621882268,621882268,
andrewtoth,2020-05-02T19:40:10Z,@MarcoFalke thanks I've updated with a hidden config option.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-623003716,623003716,
adamjonas,2020-12-17T17:13:45Z,@andrewtoth ping for a rebase.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-747576199,747576199,
andrewtoth,2021-04-19T19:15:57Z,@jnewbery @glozow @LarryRuane thank you all for your review! I've updated with all of your suggestions.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-822719528,822719528,
andrewtoth,2021-06-16T20:26:37Z,@jnewbery not sure what commit your ACK is referencing. Looks like github does not recognize it either.,https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-862698262,862698262,
jnewbery,2021-06-17T10:12:30Z,"> @jnewbery not sure what commit your ACK is referencing. Looks like github does not recognize it either.\n\nOops, sorry @andrewtoth - I rebased your branch on master before building/reviewing (building a branch that's based on a very old master commit results in a very slow build since lots of header files have changed). I then accidentally left my ACK for my new head commit hash instead of the",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-863114248,863114248,
jnewbery,2021-11-04T12:39:25Z,"reACK 1f084ec0ef\n\n@andrewtoth: github doesn't generate a notification for reviewers if you just force-push a rebase. If you want people to re-review after a rebase you should leave a comment. That'll notify everyone who has previously reviewed the PR.",https://github.com/bitcoin/bitcoin/pull/14707#issuecomment-960827324,960827324,
meshcollider,2018-11-12T05:41:22Z,Can't you just check if `address_filter` is an empty string?,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r232539375,232539375,src/wallet/rpcwallet.cpp
promag,2018-11-12T11:49:04Z,"Breaking change here, don't change argument order, description above is correct.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r232628441,232628441,src/wallet/rpcwallet.cpp
promag,2018-11-12T11:55:59Z,Should be 4.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r232630167,232630167,src/rpc/client.cpp
promag,2018-11-12T11:56:25Z,Missing new argument.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r232630273,232630273,src/wallet/rpcwallet.cpp
promag,2018-11-12T11:56:47Z,Missing new argument.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r232630458,232630458,src/wallet/rpcwallet.cpp
MarcoFalke,2019-02-12T23:52:36Z,"```suggestion\n                    {""include_immature"", RPCArg::Type::BOOL, /* default */ ""false"", ""Include immature coinbase transactions.""},\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r256196828,256196828,src/wallet/rpcwallet.cpp
andrewtoth,2019-02-14T04:12:02Z,Done,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r256685600,256685600,src/wallet/rpcwallet.cpp
LarryRuane,2020-12-30T21:15:04Z,"nit, if you have a chance to retouch\n```suggestion\n    bool include_immature{!params[2].isNull() && params[2].get_bool()};\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r550329066,550329066,src/wallet/rpcwallet.cpp
LarryRuane,2020-12-31T00:35:09Z,"```suggestion\n    bool include_immature{!params[next_index].isNull() && params[next_index].get_bool()};\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r550365041,550365041,src/wallet/rpcwallet.cpp
LarryRuane,2020-12-31T07:14:21Z,"Consider enclosing the `continue;` within braces? I'm aware they weren't there previously, but when the condition becomes multi-line, perhaps they help with readability.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r550415068,550415068,src/wallet/rpcwallet.cpp
MarcoFalke,2021-01-28T18:45:10Z,"can remove the diff in `commands`, and then rebase",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r566326563,566326563,src/wallet/rpcwallet.cpp
andrewtoth,2021-02-12T21:12:51Z,Thanks for the review! I've updated with your suggestions along with the latest rebase.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r575522234,575522234,src/wallet/rpcwallet.cpp
andrewtoth,2021-02-12T21:13:05Z,"Done, thanks!",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r575522327,575522327,src/wallet/rpcwallet.cpp
adamjonas,2021-04-06T21:43:08Z,"getting a compile error after the latest rebase: \n```\nwallet/rpcwallet.cpp:1089:26: error: use of undeclared identifier 'pwallet'\n    bool filter_coinbase{pwallet->chain().rpcEnableDeprecated(""filter_coinbase"")};\n```\n\n```suggestion\n    bool filter_coinbase{wallet.chain().rpcEnableDeprecated(""filter_coinbase"")};\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r608200352,608200352,src/wallet/rpcwallet.cpp
andrewtoth,2021-04-07T00:26:05Z,Oof forgot to include that with the rebase. Thanks for checking!,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r608260966,608260966,src/wallet/rpcwallet.cpp
LarryRuane,2021-04-10T05:35:59Z,"In these two comments, should ""getreceivedby"" be ""listreceivedby""?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r611000226,611000226,src/wallet/rpcwallet.cpp
LarryRuane,2021-04-10T05:49:01Z,"```suggestion\n                    {""address_filter"", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, ""If present and nonempty, only return information on this address.""},\n```\nThis matches the code and explains how to specify `include_immature` without having to specify an address filter.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r611001373,611001373,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:26:27Z,All these new variables (both here and in `ListReceived()`) can be `const`.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613127345,613127345,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:31:30Z,"Consistency helps readability. I think you can make this more consistent and readable as:\n\n```suggestion\n            || (wtx.IsCoinBase() && (depth < 1 || !include_coinbase))\n            || (wtx.IsImmatureCoinBase() && !include_immature_coinbase)\n```\n\n(where `include_coinbase = !(wallet.chain().rpcEnableDeprecated(""filter_coinbase""))`)",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613130541,613130541,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:32:14Z,"It's odd that ""As a JSON-RPC call"" no longer refers to the example immediately above. I think only one JSON-RPC example is needed.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613130917,613130917,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:36:33Z,"C++ is a strongly typed language - we should use types in the function signatures to catch logic errors at compilation rather than pass through opaque structures.\n\nCan you update the function signature of `ListReceived()` to explicitly take the argument types?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613133600,613133600,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:37:56Z,"Again, I think you should be consistent and either have `include_coinbase` and `include_immature_coinbase` or `exclude_coinbase` and `exclude_immature_coinbase` as variables.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613134485,613134485,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:39:30Z,"""orphan"" is a very overloaded word, and I don't think it's correct here. I think you're trying to say that the coinbase transaction has been conflicted out of the main chain?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613135391,613135391,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:42:39Z,perhaps s/filter_coinbase/exclude_coinbase/ is more explicit.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613137332,613137332,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:45:27Z,"I don't see much benefit in splitting this out into a separate function, unless you also restructure the `run_test()` function to be:\n\n```python\n    def run_test(self):\n        self.run_listbyreceived_test()\n        self.run_include_coinbase_test()\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613138985,613138985,test/functional/wallet_listreceivedby.py
jnewbery,2021-04-14T10:46:53Z,"""Orphan"" is wrong here. Perhaps ""Invalidate"".\n\n(also update references to 'orphan' below)",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613139846,613139846,test/functional/wallet_listreceivedby.py
jnewbery,2021-04-14T10:48:24Z,maybe use a new variable name `address2` here?,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613140723,613140723,test/functional/wallet_listreceivedby.py
jnewbery,2021-04-14T10:49:12Z,"```suggestion\nPreviously, the following wallet RPCs excluded coinbase transactions:\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613141273,613141273,doc/release-notes-14707.md
jnewbery,2021-04-14T10:49:24Z,"```suggestion\nThis release changes this behaviour and returns results accounting for received coins from coinbase outputs.\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613141380,613141380,doc/release-notes-14707.md
jnewbery,2021-04-14T10:50:37Z,"I think this should also document the `deprecatedrpc=filter_coinbase` (or `deprecatedrpc=exclude_coinbase` if you rename it) config option, including that the intention is to remove it after some time.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613142059,613142059,doc/release-notes-14707.md
jnewbery,2021-04-14T10:51:31Z,Should this and the other updated RPCs throw if a user supplies `include_immature=true` and `deprecatedrpc=filter_coinbase` is set. That would be inconsistent.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613142629,613142629,src/wallet/rpcwallet.cpp
jnewbery,2021-04-14T10:52:15Z,"See the above comment about `include_immature` and `""-deprecatedrpc=filter_coinbase""`. Perhaps add a test for that combination?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613143023,613143023,test/functional/wallet_listreceivedby.py
jnewbery,2021-04-14T10:52:39Z,No need to update this. They get updated automatically every year.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613143275,613143275,test/functional/wallet_listreceivedby.py
glozow,2021-04-14T13:46:16Z,May want to update this comment to reflect the test expansion,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613261451,613261451,test/functional/wallet_listreceivedby.py
glozow,2021-04-14T14:22:29Z,"I expect this refers to outputs that we can't spend yet because a timelock hasn't been met. If a user wants to include immature coinbases, might they want to include nonfinal ones too? I understand that `include_immature` is supposed to be only for immature coinbases but I think a user might find it more helpful to be able to configure spendability in general rather than just for coinbases",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613293127,613293127,src/wallet/rpcwallet.cpp
glozow,2021-04-14T14:28:08Z,"Question: What happens if a user puts `-spendzeroconfchange=0` (it's True by default, right?) and then calls `getreceivedbyaddress(minconf=0)`?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613298269,613298269,test/functional/wallet_listreceivedby.py
LarryRuane,2021-04-14T15:40:14Z,"I agree that ""filter"" isn't the best term, because it's _slightly_ ambiguous. Maybe it's just me, but while it _probably_ means ""exclude"", it could possibly mean ""include"".",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613361681,613361681,doc/release-notes-14707.md
LarryRuane,2021-04-14T15:45:51Z,"Another idea, this logic is close to that added to `ListReceived()` further down in this file; have you considered refactoring this logic into a separate small function? This may make the logic unit-testable, but may not be worth it.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r613366384,613366384,src/wallet/rpcwallet.cpp
andrewtoth,2021-04-19T19:04:41Z,These lines were removed in the latest push.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616105633,616105633,src/wallet/rpcwallet.cpp
andrewtoth,2021-04-19T19:07:30Z,"I thought this was an interesting idea. However, while implementing and trying to write a test, I was unable to broadcast a non-final tx (rejected with `non-final`). Do you know any way that a wallet would be able to have a non-final tx? If not, then it's possible this check is unnecessary and can be removed.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616108283,616108283,src/wallet/rpcwallet.cpp
andrewtoth,2021-04-19T19:14:44Z,"Hmm I'm not sure there is any effect in this case. The `getreceivedby*` RPCs only return a balance, and setting `minconf=0` would return the unconfirmed balance using the tally code in `GetReceived`. I don't believe it would be affected by `spendzeroconfchange`, which from what I can see is only used in `CWallet::SelectCoins`.",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616112613,616112613,test/functional/wallet_listreceivedby.py
andrewtoth,2021-04-19T19:19:48Z,"@jnewbery Great suggestion, I agree this makes it much more readable.\n\n@LarryRuane Since there are only two instances of this duplication, should we defer to the [rule of three](https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming))?",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616115708,616115708,src/wallet/rpcwallet.cpp
MarcoFalke,2021-04-19T19:39:02Z,"AssertionError: RPC client conversion table and RPC server named arguments mismatch!\n                                   {('getreceivedbyaddress', 2, 'include_not_yet_spendable'), ('listreceivedbylabel', 3, 'include_immature_coinbase'), ('listreceivedbylabel', 3, 'include_not_yet_spendable'), ('listreceivedbyaddress', 4, 'include_not_yet_spendable'), ('listreceivedbyaddress', 4, 'include_immature",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616127173,616127173,src/rpc/client.cpp
andrewtoth,2021-04-19T19:44:59Z,Fixed. Thanks!,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616130521,616130521,src/rpc/client.cpp
glozow,2021-04-19T19:54:51Z,"Oh hm, I guess the finality wouldn't really be reflected in the received transaction's header, but in the redeem script for it. I'm not too sure how the wallet keeps track of timelocked outputs 🤔 I don't think this check should be removed though",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r616136227,616136227,src/wallet/rpcwallet.cpp
jnewbery,2021-06-14T09:13:07Z,"As far as I can see, `include_immature_coinbase` has no impact on whether non-final transactions are included.\n\n```suggestion\nA new option, `include_immature_coinbase` (default=`false`), determines whether to account for immature coinbase transactions.\n```",https://github.com/bitcoin/bitcoin/pull/14707#discussion_r650777424,650777424,doc/release-notes-14707.md
jnewbery,2021-06-14T09:13:27Z,nit: remove extra linebreak if you retouch this branch.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r650777699,650777699,test/functional/wallet_listreceivedby.py
jnewbery,2021-11-04T12:39:32Z,Feel free to remove this extra newline if you need to touch this branch again.,https://github.com/bitcoin/bitcoin/pull/14707#discussion_r742795630,742795630,test/functional/wallet_listreceivedby.py
