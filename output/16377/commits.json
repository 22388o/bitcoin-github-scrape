[
  {
    "sha": "79804fe24bd00e183382dfbcab9343960d158aa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTgwNGZlMjRiZDAwZTE4MzM4MmRmYmNhYjkzNDM5NjBkMTU4YWE1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-07-12T12:30:10Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-12T12:07:17Z"
      },
      "message": "[rpc] walletcreatefundedpsbt: don't automatically append inputs\n\nWhen the user doesn't specificy inputs, it makes sense to automatically select them. But when the user does specify inputs, we now fail if the amount is insufficient, unless addInputs is set to true.",
      "tree": {
        "sha": "297bd50ec5f73a77af0d2e7e9104bc22919f9136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297bd50ec5f73a77af0d2e7e9104bc22919f9136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79804fe24bd00e183382dfbcab9343960d158aa5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl5qJfUACgkQV/+b28ww\nEAkOkBAAnbxen4xtrMBh/eGOPpL/TsZtXoy1t+QOxJ6aGJzqIcwb68UBUQnPZwVx\nz8QxsD63MtMge0NAnGMfSfpeBd9X0M8+OrXjJIOjHZTGJ7uTORi5Jx8tE99yzaUp\nPt0rkc7S7nR/wK9E91sskZo8nUCglSvQZhz0/qjOvf+633MkxxOx0J88LMorBs2z\nD7qIsYoJIQndnle6FW3qNsnYydt6vU18eiqCHpW7HAdw3ps11s7/T2V7xwSzi1hl\n9GIEqsYxtqkCY7RsKDZkg2bIOikagaKazZu0g5sYQW+ADSU9q0lE3Q6cFr/7ArJN\n5wkwmngGMkALr5PfumdzCBoLrXw3YxPhSVxB3Nbw+Uhi/qNU27mwCM3ow/kuWP8m\nm+NvDy7ThiP7Dl8ubU9AhDM+JxNmk2hvFYeE4VW0pEgoTRO9bp1smGcF9ysYouAk\nbZyM2p+NqjgWuC+bACqhE98nwwKs5bFyG+GkiNJOD7XCktcnpI2oNBrrplWzQzjs\nGTTCTVnaNB5pTLkFo/WG0TcEYu1Fp6F/FPYWfD2FiN/qcpDRQNJ5Ud2iQsjXPWYG\nbsIGdAezcR3h0CsQX531CE6j2AMYZCfOTLf0Q0UMG2ClFgJqzwk3RQIDV79mNpy9\nPyu82gev9AS+ikDvGwye7qyd+fO0DmonVA8Y7W4DfHqq+2CGFzg=\n=2o5N\n-----END PGP SIGNATURE-----",
        "payload": "tree 297bd50ec5f73a77af0d2e7e9104bc22919f9136\nparent 5c73645ac79f1d12611051d2e9467a003383ffd9\nauthor Sjors Provoost <sjors@sprovoost.nl> 1562934610 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1584014837 +0100\n\n[rpc] walletcreatefundedpsbt: don't automatically append inputs\n\nWhen the user doesn't specificy inputs, it makes sense to automatically select them. But when the user does specify inputs, we now fail if the amount is insufficient, unless addInputs is set to true.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79804fe24bd00e183382dfbcab9343960d158aa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79804fe24bd00e183382dfbcab9343960d158aa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79804fe24bd00e183382dfbcab9343960d158aa5/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c73645ac79f1d12611051d2e9467a003383ffd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c73645ac79f1d12611051d2e9467a003383ffd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c73645ac79f1d12611051d2e9467a003383ffd9"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 47,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2cb89f0d514a313ee189717134b42ab31372766d",
        "filename": "doc/release-notes-16377.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/doc/release-notes-16377.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/doc/release-notes-16377.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16377.md?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -0,0 +1,6 @@\n+RPC changes\n+-----------\n+- The `walletcreatefundedpsbt` RPC call will now fail with\n+  `Insufficient funds` when inputs are manually selected but are not enough to cover\n+  the outputs and fee. Additional inputs can automatically be added through the\n+  new `add_inputs` option."
      },
      {
        "sha": "720877ead08da8bb18f79247ae592904409d5607",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -10,6 +10,7 @@ void CCoinControl::SetNull()\n {\n     destChange = CNoDestination();\n     m_change_type.reset();\n+    m_add_inputs = true;\n     fAllowOtherInputs = false;\n     fAllowWatchOnly = false;\n     m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n@@ -23,4 +24,3 @@ void CCoinControl::SetNull()\n     m_min_depth = DEFAULT_MIN_DEPTH;\n     m_max_depth = DEFAULT_MAX_DEPTH;\n }\n-"
      },
      {
        "sha": "c499b0ff25e683f22b1c3824f91f5da7c70a3b15",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -26,6 +26,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! Override the default change type if set, ignored if destChange is set\n     Optional<OutputType> m_change_type;\n+    //! If false, only selected inputs are used\n+    bool m_add_inputs;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n     //! Includes watch only addresses which are solvable"
      },
      {
        "sha": "80328e0b8fb0f2adcd7aea2240d59f5689c9ce8b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 6,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -3016,13 +3016,12 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n-    CCoinControl coinControl;\n     change_position = -1;\n     bool lockUnspents = false;\n     UniValue subtractFeeFromOutputs;\n@@ -3037,6 +3036,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         RPCTypeCheckArgument(options, UniValue::VOBJ);\n         RPCTypeCheckObj(options,\n             {\n+                {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n                 {\"changeAddress\", UniValueType(UniValue::VSTR)},\n                 {\"changePosition\", UniValueType(UniValue::VNUM)},\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n@@ -3050,6 +3050,10 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             },\n             true, true);\n \n+        if (options.exists(\"add_inputs\") ) {\n+            coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n+        }\n+\n         if (options.exists(\"changeAddress\")) {\n             CTxDestination dest = DecodeDestination(options[\"changeAddress\"].get_str());\n \n@@ -3224,7 +3228,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     CAmount fee;\n     int change_position;\n-    FundTransaction(pwallet, tx, fee, change_position, request.params[1]);\n+    CCoinControl coin_control;\n+    FundTransaction(pwallet, tx, fee, change_position, request.params[1], coin_control);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n@@ -4146,10 +4151,10 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     }\n \n             RPCHelpMan{\"walletcreatefundedpsbt\",\n-                \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n+                \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n                 {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The inputs\",\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The inputs. Leave empty to add inputs automatically. See add_inputs option.\",\n                         {\n                             {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n                                 {\n@@ -4180,6 +4185,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                     {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n                             {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -4237,7 +4243,11 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         rbf = replaceable_arg.isTrue();\n     }\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n+    CCoinControl coin_control;\n+    // Automatically select coins, unless at least one is manually selected. Can\n+    // be overriden by options.add_inputs.\n+    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3], coin_control);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx(rawTx);"
      },
      {
        "sha": "62b200500b086045da23973de36279d3d66638e9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -2149,6 +2149,11 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         }\n \n         for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            // Only consider selected coins if add_inputs is false\n+            if (coinControl && !coinControl->m_add_inputs && !coinControl->IsSelected(COutPoint(entry.first, i))) {\n+                continue;\n+            }\n+\n             if (wtx.tx->vout[i].nValue < nMinimumAmount || wtx.tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n "
      },
      {
        "sha": "3f8ee2def8e4e512b7668575ce5503723e7e7988",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79804fe24bd00e183382dfbcab9343960d158aa5/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79804fe24bd00e183382dfbcab9343960d158aa5/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=79804fe24bd00e183382dfbcab9343960d158aa5",
        "patch": "@@ -8,6 +8,7 @@\n from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_approx,\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n@@ -80,6 +81,13 @@ def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n \n+        # If inputs are specified, do not automatically add more:\n+        utxo1 = self.nodes[0].listunspent()[0]\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[0].walletcreatefundedpsbt, [{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90})\n+\n+        psbtx1 = self.nodes[0].walletcreatefundedpsbt([{\"txid\": utxo1['txid'], \"vout\": utxo1['vout']}], {self.nodes[2].getnewaddress():90}, 0, {\"add_inputs\": True})['psbt']\n+        assert_equal(len(self.nodes[0].decodepsbt(psbtx1)['tx']['vin']), 2)\n+\n         # Node 1 should not be able to add anything to it but still return the psbtx same as before\n         psbtx = self.nodes[1].walletprocesspsbt(psbtx1)['psbt']\n         assert_equal(psbtx1, psbtx)\n@@ -137,13 +145,13 @@ def run_test(self):\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n         # feeRate of 0.1 BTC / KB produces a total fee slightly below -maxtxfee (~0.05280000):\n-        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1})\n-        assert_greater_than(res[\"fee\"], 0.05)\n-        assert_greater_than(0.06, res[\"fee\"])\n+        res = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n+        assert_approx(res[\"fee\"], 0.055, 0.005)\n \n         # feeRate of 10 BTC / KB produces a total fee well above -maxtxfee\n         # previously this was silently capped at -maxtxfee\n-        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10})\n+        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10, \"add_inputs\": True})\n+        assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():1}, 0, {\"feeRate\": 10, \"add_inputs\": False})\n \n         # partially sign multisig things with node 1\n         psbtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n@@ -221,23 +229,23 @@ def run_test(self):\n         # replaceable arg\n         block_height = self.nodes[0].getblockcount()\n         unspent = self.nodes[0].listunspent()[0]\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\": False}, False)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\": False, \"add_inputs\": True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" not in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n \n         # Same construction with only locktime set and RBF explicitly enabled\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {\"replaceable\": True}, True)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {\"replaceable\": True, \"add_inputs\": True}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n             assert \"bip32_derivs\" in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n \n         # Same construction without optional arguments\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n@@ -246,7 +254,7 @@ def run_test(self):\n \n         # Same construction without optional arguments, for a node with -walletrbf=0\n         unspent1 = self.nodes[1].listunspent()[0]\n-        psbtx_info = self.nodes[1].walletcreatefundedpsbt([{\"txid\":unspent1[\"txid\"], \"vout\":unspent1[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent1[\"amount\"]+1}], block_height)\n+        psbtx_info = self.nodes[1].walletcreatefundedpsbt([{\"txid\":unspent1[\"txid\"], \"vout\":unspent1[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent1[\"amount\"]+1}], block_height, {\"add_inputs\": True})\n         decoded_psbt = self.nodes[1].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert_greater_than(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n@@ -257,7 +265,7 @@ def run_test(self):\n         self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"changeAddress\":self.nodes[1].getnewaddress()}, False)\n \n         # Regression test for 14473 (mishandling of already-signed witness transaction):\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], 0, {\"add_inputs\": True})\n         complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[\"psbt\"])\n         double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[\"psbt\"])\n         assert_equal(complete_psbt, double_processed_psbt)"
      }
    ]
  },
  {
    "sha": "e5327f947c310849e1ddbb24321e4c9f85564549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTMyN2Y5NDdjMzEwODQ5ZTFkZGJiMjQzMjFlNGM5Zjg1NTY0NTQ5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-20T15:19:59Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-03-12T12:07:17Z"
      },
      "message": "[rpc] fundrawtransaction: add_inputs option to control automatic input adding",
      "tree": {
        "sha": "da23dad9640aa12c6ee03557be01b078026152a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da23dad9640aa12c6ee03557be01b078026152a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5327f947c310849e1ddbb24321e4c9f85564549",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl5qJfUACgkQV/+b28ww\nEAn60BAAl+B5gV4xJO+9Vstuvjmc63J1SwNVhoX5XyY65Vt3pcbU4Lelx1AAn9EX\nV8YKKeUeRR1J4VxdnXJhqugIM7nKj95KJDtNLk+T3P8/5GcUKWafo0LMugWjhUyH\nQmZG1xXHUC7cLaU8dOiZlk+G0XBsuOsi+aYHGC2yEhjPNbUU+5hnHZjnKzysYqhZ\nyAgk75np/orIw3TC2EK2Gm45gN78IFjK0U+cblsYjfNEK2Gxf1I3pPe+jn7tVqol\nzDEwDTh0LFxPP28IEh0DzqQUlnPn4S1wnChMlCQ4lns5atKkB/FS/VlP1koziSu9\nHPyxMzLD0X4s8Iw51cspHrbCcifWydCINkhuhCcxloDQzdCqcyD/0FB2CDr0ZenZ\nzY+dl97MfjRfjbpfdYEHH2pS9cKf8rwyCLh/8SfnZAaP8uyoMJZGx/FxzQMZTVBO\nHOE1zizCUKAQJejTQ8AgsQ4u2MPPcBoUVLOmZfndNKNiqLWOajYTK1h6mq8p9h7A\n2RSMnpHkYol36xGb5dicXKF5g6zAx/xn8eMj6bEoZEO/lkNlnwqyq+17vVzYo8Om\nkc0q0yHW+u8rqnpZcjR8Nbs8K2LZqiv6HVPCrwjW6sDU2yfoC7NXys5md0TCV+/F\ngptP/3ACPydpR386tBME3yNBUiNS6Crutz5SYhMXEoR2mzaIIGU=\n=SsjB\n-----END PGP SIGNATURE-----",
        "payload": "tree da23dad9640aa12c6ee03557be01b078026152a4\nparent 79804fe24bd00e183382dfbcab9343960d158aa5\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582211999 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1584014837 +0100\n\n[rpc] fundrawtransaction: add_inputs option to control automatic input adding\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5327f947c310849e1ddbb24321e4c9f85564549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5327f947c310849e1ddbb24321e4c9f85564549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5327f947c310849e1ddbb24321e4c9f85564549/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79804fe24bd00e183382dfbcab9343960d158aa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79804fe24bd00e183382dfbcab9343960d158aa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79804fe24bd00e183382dfbcab9343960d158aa5"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3442fa451b3cf851f3cc78721820e1e8a7bb8b8e",
        "filename": "doc/release-notes-16377.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5327f947c310849e1ddbb24321e4c9f85564549/doc/release-notes-16377.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5327f947c310849e1ddbb24321e4c9f85564549/doc/release-notes-16377.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16377.md?ref=e5327f947c310849e1ddbb24321e4c9f85564549",
        "patch": "@@ -4,3 +4,6 @@ RPC changes\n   `Insufficient funds` when inputs are manually selected but are not enough to cover\n   the outputs and fee. Additional inputs can automatically be added through the\n   new `add_inputs` option.\n+\n+- The `fundrawtransaction` RPC now supports `add_inputs` option that when `false`\n+  prevents adding more inputs if necessary and consequently the RPC fails."
      },
      {
        "sha": "5b09ebee435965d61f6e532b8d22760a4efb7010",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5327f947c310849e1ddbb24321e4c9f85564549/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5327f947c310849e1ddbb24321e4c9f85564549/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e5327f947c310849e1ddbb24321e4c9f85564549",
        "patch": "@@ -3148,8 +3148,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     RPCHelpMan{\"fundrawtransaction\",\n-                \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n-                \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n+                \"\\nIf the transaction has no inputs, they will be automatically selected to meet its out value.\\n\"\n+                \"It will add at most one change output to the outputs.\\n\"\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n                 \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                 \"The inputs added will not be signed, use signrawtransactionwithkey\\n\"\n@@ -3163,6 +3163,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n                         {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"true\", \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n                             {\"changeAddress\", RPCArg::Type::STR, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n                             {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n                             {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n@@ -3229,6 +3230,8 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount fee;\n     int change_position;\n     CCoinControl coin_control;\n+    // Automatically select (additional) coins. Can be overriden by options.add_inputs.\n+    coin_control.m_add_inputs = true;\n     FundTransaction(pwallet, tx, fee, change_position, request.params[1], coin_control);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "1638e3142bdb2e715e5b41d8dff6a9198f35f673",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5327f947c310849e1ddbb24321e4c9f85564549/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5327f947c310849e1ddbb24321e4c9f85564549/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=e5327f947c310849e1ddbb24321e4c9f85564549",
        "patch": "@@ -271,7 +271,11 @@ def test_coin_selection(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n         assert_equal(\"00\", dec_tx['vin'][0]['scriptSig']['hex'])\n \n+        # Should fail without add_inputs:\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx, {\"add_inputs\": False})\n+        # add_inputs is enabled by default\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n@@ -299,7 +303,10 @@ def test_two_vin(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        # Should fail without add_inputs:\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx, {\"add_inputs\": False})\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {\"add_inputs\": True})\n+\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0\n@@ -330,7 +337,10 @@ def test_two_vin_two_vout(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        # Should fail without add_inputs:\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx, {\"add_inputs\": False})\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {\"add_inputs\": True})\n+\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         totalOut = 0\n         matchingOuts = 0"
      }
    ]
  }
]