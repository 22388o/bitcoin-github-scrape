DrahtBot,2019-07-12 13:26:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18531 (rpc: Assert that RPCArg names are equal to CRPCCommand ones by MarcoFalke)\n* #17211 (Allow fundrawtransaction and",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-510885728,510885728,
instagibbs,2019-07-12 15:06:57,concept ACK,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-510921731,510921731,
Sjors,2019-07-29 08:15:24,Instead of `bool default_add_inputs` into `FundTransaction` I'm now passing a `CCoinControl` object. Also addressed nits.,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-515892634,515892634,
achow101,2019-07-30 20:43:30,"This effects `fundrawtransaction` too, so documentation should be updated to indicate that.",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-516588093,516588093,
Sjors,2019-08-01 16:34:37,@achow101 I didn't change this behavior in `fundrawtransaction`.,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-517363926,517363926,
achow101,2019-08-01 17:20:54,"> @achow101 I didn't change this behavior in `fundrawtransaction`.\n\nYes, but `FundTransaction` is used by both `fundrawtransaction` and `walletcreatefundedpsbt`. The `add_inputs` option is now something that both can have, but is not documented for `fundrawtransaction`. Furthermore, both of these do pretty much the same thing, just return different formats. So I think their behavior with this ",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-517380568,517380568,
Sjors,2019-08-02 09:53:43,I changed `fundrawtransaction` to have the same behavior.,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-517640297,517640297,
Fonta1n3,2019-08-21 09:29:34,I have built an app on top of bitcoin-cli and definitely would prefer no inputs to be added at all by default when using `walletcreatefundedpsbt` and `fundrawtransaction` *if* a user specifies their own inputs. If a user is specifying inputs then it would be better to force them to recreate a transaction with the necessary inputs rather than automatically adding additional inputs the user has not ,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-523377288,523377288,
Sjors,2019-08-21 09:52:05,@FontaineDenton does your application use `walletcreatefundedpsbt` or `fundrawtransaction`? And can you elaborate on fee optimization?,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-523385698,523385698,
Fonta1n3,2019-08-21 11:31:27,"> @FontaineDenton does your application use `walletcreatefundedpsbt` or `fundrawtransaction`? And can you elaborate on fee optimization?\n\nI just updated my original comment so it hopefully makes more sense. ",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-523416763,523416763,
Sjors,2020-02-20 15:20:12,"I switched the default for `fundrawtransaction` to `false`, to keep it backwards compatible; I'm not familiar with how people use that RPC in practice. For `walletcreatefundedpsbt` I do think this change makes it safer.",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-589112070,589112070,
Sjors,2020-03-11 20:27:14,"Rebased, slightly tweaked one test and added a new one.",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-597857744,597857744,
sipa,2020-03-25 20:39:41,"With `add_inputs` set to false, how does `walletcreatefundedpsbt` differ from `createpsbt`? If there is no difference, it seems the default should always be true.",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-604075165,604075165,
Sjors,2020-03-26 10:33:52,"@sipa the difference is when when you don't specify inputs. `walletcreatefundedpsbt` will pick inputs from your wallet, `createpsbt` won't.\n\nIf you do specificy inputs, then by default (as of this PR) neither command will add them. But they're still different, because `createpsbt` doesn't have wallet context to fill out redeem/witness scripts.\n\nI didn't even realise `createpsbt` existed up",https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-604352432,604352432,
achow101,2020-06-11 17:24:12,ACK e5327f947c310849e1ddbb24321e4c9f85564549,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-642823450,642823450,
Sjors,2020-06-12 12:59:43,I'll leave the `CHECK_NONFATAL` in case I need to rebase or change something.,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-643257122,643257122,
Fonta1n3,2020-09-07 05:26:44,Which version of Bitcoin Core will this get released on?,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-688044319,688044319,
sipa,2020-09-07 05:27:35,Current master branch will become 0.21.,https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-688044560,688044560,
promag,2019-07-14 22:30:22,"nit, `bool m_add_inputs`.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r303264260,303264260,src/wallet/coincontrol.h
promag,2019-07-14 22:31:04,"nits, ""add_inputs"". Remove whitespace at the end. Add `{ }`.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r303264285,303264285,src/wallet/rpcwallet.cpp
promag,2019-07-14 22:32:53,"nit, space after `if`",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r303264348,303264348,src/wallet/wallet.cpp
promag,2019-07-14 22:44:12,Instead of adding parameters why not receive the coin control?,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r303264695,303264695,src/wallet/rpcwallet.cpp
luke-jr,2019-08-20 00:01:22,"This is backward-incompatible, and it makes no sense for this RPC which does exactly only that? Confused.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r315459878,315459878,src/wallet/rpcwallet.cpp
Sjors,2019-08-21 08:43:00,"See @achow101's comment above: https://github.com/bitcoin/bitcoin/pull/16377#issuecomment-517380568\n\nI tend to agree that `walletcreatefundedpspbt` is different from `fundrawtransaction` in this aspect, because `walletcreatefundedpspbt` also sets the destination.\n\nWould like to hear some more opinions, otherwise I'll drop the last commit (where this is added). Or I can change the default f",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r316063537,316063537,src/wallet/rpcwallet.cpp
kallewoof,2020-03-06 05:39:42,The phrasing is vague on whether this is talking about previous or new behavior. Maybe `RPC call will now fail with`?,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r388721754,388721754,doc/release-notes-16377.md
kallewoof,2020-03-06 05:40:04,`a` -> `the`,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r388721817,388721817,doc/release-notes-16377.md
kallewoof,2020-03-06 05:52:26,"I know the two asserts below this are not yours, but they can use `assert_approx` to achieve the same result with less confusion.\n```python\nassert_approx(res[""fee""], 0.055, 0.005)\n```\n",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r388724330,388724330,test/functional/rpc_psbt.py
kallewoof,2020-03-06 05:53:14,"Perhaps duplicate this with `""add_inputs"": False` case as well.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r388724487,388724487,test/functional/rpc_psbt.py
kallewoof,2020-03-06 05:54:03,"Can this be tested for the `""add_inputs"": False` case as well?",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r388724693,388724693,test/functional/rpc_psbt.py
promag,2020-03-11 19:23:36,Makes sense to allow `add_inputs = false` when no input is manually selected?,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391207991,391207991,src/wallet/rpcwallet.cpp
Sjors,2020-03-11 20:11:21,It'll just fail with insufficient funds. I don't think it's necessary to special-case that.,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391239589,391239589,src/wallet/rpcwallet.cpp
Sjors,2020-03-11 20:16:41,I'll use that.,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391243653,391243653,test/functional/rpc_psbt.py
Sjors,2020-03-11 20:22:18,Done,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391246415,391246415,test/functional/rpc_psbt.py
Sjors,2020-03-11 20:23:59,"I don't think that's very useful, because the goal of the test is to ""Make sure both pre-included and funded inputs have the correct sequence numbers"", and `""add_inputs"": False` would just test a subset of what we already check here.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391247325,391247325,test/functional/rpc_psbt.py
promag,2020-03-11 22:39:52,"Maybe also add something like\n\n```\nThe `fundrawtransaction` RPC now supports `add_inputs` option that when `false` prevents adding more inputs if necessary and consequently the RPC fails.\n```",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391310604,391310604,doc/release-notes-16377.md
promag,2020-03-11 22:42:16,This is already the default value in `coin_control` so maybe remove this?,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391311455,391311455,src/wallet/rpcwallet.cpp
promag,2020-03-11 22:43:13,"nit, maybe add  `See add_inputs option`.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391311740,391311740,src/wallet/rpcwallet.cpp
Sjors,2020-03-12 12:04:24,I think it adds clarity that this (default) value matters for this caller. ,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391574972,391574972,src/wallet/rpcwallet.cpp
Sjors,2020-03-12 12:07:03,Done,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391576171,391576171,src/wallet/rpcwallet.cpp
Sjors,2020-03-12 12:07:07,Done,https://github.com/bitcoin/bitcoin/pull/16377#discussion_r391576202,391576202,doc/release-notes-16377.md
achow101,2020-06-11 17:09:00,"I think both `walletcreatefundedpsbt` and `fundrawtransaction` are both most commonly used with no inputs. As I understand it, with `add_inputs` defaulting to false, this behavior doesn't change. Even so, the option is useful in `fundrawtransaction` as sometimes you just want it to set the change output and fee for a transaction after you've already selected the inputs.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r438939912,438939912,src/wallet/rpcwallet.cpp
promag,2020-06-12 10:36:07,"e5327f947c310849e1ddbb24321e4c9f85564549\n\nnit\n```cpp\n// By default new inputs are added automatically. Can be overriden by options.add_inputs.\nCHECK_NONFATAL(coin_control.m_add_inputs);\n```",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439341354,439341354,src/wallet/rpcwallet.cpp
promag,2020-06-12 10:38:43,"e5327f947c310849e1ddbb24321e4c9f85564549\n\nPrevious text was fine?",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439342462,439342462,src/wallet/rpcwallet.cpp
promag,2020-06-12 10:44:19,"Haven't tested and looks like nobody asked, but can't we use `fAllowOtherInputs` instead?",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439344856,439344856,src/wallet/coincontrol.cpp
promag,2020-06-12 10:44:59,"79804fe24bd00e183382dfbcab9343960d158aa5\n\nnit, unrelated, could receive options by reference.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439345121,439345121,src/wallet/rpcwallet.cpp
Sjors,2020-06-12 12:34:53,"No, the previous text suggests that it always adds inputs. I reworded that to make it clear we only do automatic coin selection if there is no manual coin selection.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439391117,439391117,src/wallet/rpcwallet.cpp
Sjors,2020-06-12 12:58:36,"That won't work. I think `fAllowOtherInputs` was designed with RBF in mind. It _permits_ adding coins, as long as all the currently selected coins are included. But this PR tries to _prevent_ adding coins.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r439402694,439402694,src/wallet/coincontrol.cpp
promag,2020-06-15 11:42:37,"ultra nit, cache `IsSelected()` by adding above:\n\n```cpp\nconst bool is_selected = coinControl && coinControl->IsSelected(COutPoint(entry.first, i));\n```\n\nthen use this in L2160 below.",https://github.com/bitcoin/bitcoin/pull/16377#discussion_r440116220,440116220,src/wallet/wallet.cpp
