[
  {
    "sha": "c7829ea797c840dda7888ee860a50b7a3308069d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzgyOWVhNzk3Yzg0MGRkYTc4ODhlZTg2MGE1MGI3YTMzMDgwNjlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-10T12:42:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:16Z"
      },
      "message": "Abstract out SignatureChecker",
      "tree": {
        "sha": "55eafd1b6fef2ba1a5d3aa1aec9e0c6165091893",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55eafd1b6fef2ba1a5d3aa1aec9e0c6165091893"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7829ea797c840dda7888ee860a50b7a3308069d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 37,
      "deletions": 14
    },
    "files": [
      {
        "sha": "048d298f0bd9ba581266175d4bb7eda2319c8fee",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -132,7 +132,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +675,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                        checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +736,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                            checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -897,7 +897,7 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     if (nIn >= txTo.vin.size()) {\n         LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n@@ -976,7 +976,7 @@ class CSignatureCache\n     }\n };\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n+bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n {\n     static CSignatureCache signatureCache;\n \n@@ -985,6 +985,7 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n         return false;\n \n     // Hash type is one byte tacked on to the end of the signature\n+    vector<unsigned char> vchSig(vchSigIn);\n     if (vchSig.empty())\n         return false;\n     int nHashType = vchSig.back();\n@@ -1004,14 +1005,14 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptSig, flags, checker))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1034,7 +1035,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n+        if (!EvalScript(stackCopy, pubKey2, flags, checker))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "f3fd49a3b6bc7a27b2a3e9b23ec7c8794d7ffd8e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -38,8 +38,30 @@ bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+\n+class SignatureChecker\n+{\n+private:\n+    const CTransaction& txTo;\n+    unsigned int nIn;\n+\n+public:\n+    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n+};\n+\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker);\n+\n+// Wrappers using a default SignatureChecker.\n+bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return EvalScript(stack, script, flags, SignatureChecker(txTo, nIn));\n+}\n+\n+bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(txTo, nIn));\n+}\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "a17fb58787a14d6e930abbe0c1d206f0f52e4a6a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n+            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "992f32cc4c1e6c0bd1ffd02447eac408940a1e28",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -89,7 +89,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTr\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n {\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0, flags) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0)) == expect, message);\n }\n \n namespace"
      }
    ]
  },
  {
    "sha": "5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzFlNzk4YThlOWRmMTVmOGZiZDEyMGU1N2ZjNjdlNTg1ZjEzODQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-10T14:16:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:17Z"
      },
      "message": "Make signature cache optional",
      "tree": {
        "sha": "2b9cd1acc9565a7946683b50b237c332484de5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b9cd1acc9565a7946683b50b237c332484de5e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7829ea797c840dda7888ee860a50b7a3308069d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7829ea797c840dda7888ee860a50b7a3308069d"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 155,
      "deletions": 88
    },
    "files": [
      {
        "sha": "155adfef7d34c3de6f0165e999b56ce4cc5f09b1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   script/compressor.h \\\n   script/interpreter.h \\\n   script/script.h \\\n+  script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n   serialize.h \\\n@@ -218,6 +219,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/compressor.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n+  script/sigcache.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "a198eb586eed18eab97d319ed86a791dcb770a12",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -435,7 +435,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "5faa0086f5a5dd795b1f1cb4b8ccee03e0e122df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -645,7 +645,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, false, BaseSignatureChecker()))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)"
      },
      {
        "sha": "ded6c155308f47bfdc3423d90df1d0a2e9e2f839",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -17,6 +17,7 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"script/script.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n #include \"txmempool.h\""
      },
      {
        "sha": "f0b426839042a10722cb1d6a42e5b3c5855c98af",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 68,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -9,14 +9,10 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n-#include \"random.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/thread.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n-\n using namespace std;\n \n typedef vector<unsigned char> valtype;\n@@ -132,7 +128,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -921,65 +917,13 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-// Valid signature cache, to avoid doing expensive ECDSA signature checking\n-// twice for every transaction (once when accepted into memory pool, and\n-// again when accepted into the block chain)\n-class CSignatureCache\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n {\n-private:\n-     // sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n-    std::set< sigdata_type> setValid;\n-    boost::shared_mutex cs_sigcache;\n-\n-public:\n-    bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        std::set<sigdata_type>::iterator mi = setValid.find(k);\n-        if (mi != setValid.end())\n-            return true;\n-        return false;\n-    }\n-\n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        // DoS prevention: limit cache size to less than 10MB\n-        // (~200 bytes per cache entry times 50,000 entries)\n-        // Since there are a maximum of 20,000 signature operations per block\n-        // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n-        {\n-            // Evict a random entry. Random because that helps\n-            // foil would-be DoS attackers who might try to pre-generate\n-            // and re-use a set of valid signatures just-slightly-greater\n-            // than our cache size.\n-            uint256 randomHash = GetRandHash();\n-            std::vector<unsigned char> unused;\n-            std::set<sigdata_type>::iterator it =\n-                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n-            if (it == setValid.end())\n-                it = setValid.begin();\n-            setValid.erase(*it);\n-        }\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        setValid.insert(k);\n-    }\n-};\n+    return pubkey.Verify(sighash, vchSig);\n+}\n \n bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n {\n-    static CSignatureCache signatureCache;\n-\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n         return false;\n@@ -993,19 +937,13 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n-    if (signatureCache.Get(sighash, vchSig, pubkey))\n-        return true;\n-\n-    if (!pubkey.Verify(sighash, vchSig))\n+    if (!VerifySignature(vchSig, pubkey, sighash, flags))\n         return false;\n \n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n-        signatureCache.Set(sighash, vchSig, pubkey);\n-\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n     if (!EvalScript(stack, scriptSig, flags, checker))"
      },
      {
        "sha": "801f7e0ce15a77caf8743e39412508f472e8ceeb",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -10,9 +10,10 @@\n #include <stdint.h>\n #include <string>\n \n+class uint256;\n+class CPubKey;\n class CScript;\n class CTransaction;\n-class uint256;\n \n /** Signature hash types/flags */\n enum\n@@ -39,29 +40,32 @@ bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n-class SignatureChecker\n+class BaseSignatureChecker\n+{\n+public:\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const\n+    {\n+        return false;\n+    }\n+\n+    virtual ~BaseSignatureChecker() {}\n+};\n+\n+class SignatureChecker : public BaseSignatureChecker\n {\n private:\n     const CTransaction& txTo;\n     unsigned int nIn;\n \n+protected:\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+\n public:\n     SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker);\n-\n-// Wrappers using a default SignatureChecker.\n-bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return EvalScript(stack, script, flags, SignatureChecker(txTo, nIn));\n-}\n-\n-bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(txTo, nIn));\n-}\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker);\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "a1dec64dbc33ea2a27be032e6f4242c300d59675",
        "filename": "src/script/sigcache.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sigcache.h\"\n+\n+#include \"key.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/thread.hpp>\n+#include <boost/tuple/tuple_comparison.hpp>\n+\n+namespace {\n+\n+// Valid signature cache, to avoid doing expensive ECDSA signature checking\n+// twice for every transaction (once when accepted into memory pool, and\n+// again when accepted into the block chain)\n+class CSignatureCache\n+{\n+private:\n+     // sigdata_type is (signature hash, signature, public key):\n+    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n+    std::set< sigdata_type> setValid;\n+    boost::shared_mutex cs_sigcache;\n+\n+public:\n+    bool\n+    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        std::set<sigdata_type>::iterator mi = setValid.find(k);\n+        if (mi != setValid.end())\n+            return true;\n+        return false;\n+    }\n+\n+    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        // DoS prevention: limit cache size to less than 10MB\n+        // (~200 bytes per cache entry times 50,000 entries)\n+        // Since there are a maximum of 20,000 signature operations per block\n+        // 50,000 is a reasonable default.\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        if (nMaxCacheSize <= 0) return;\n+\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n+        {\n+            // Evict a random entry. Random because that helps\n+            // foil would-be DoS attackers who might try to pre-generate\n+            // and re-use a set of valid signatures just-slightly-greater\n+            // than our cache size.\n+            uint256 randomHash = GetRandHash();\n+            std::vector<unsigned char> unused;\n+            std::set<sigdata_type>::iterator it =\n+                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n+            if (it == setValid.end())\n+                it = setValid.begin();\n+            setValid.erase(*it);\n+        }\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        setValid.insert(k);\n+    }\n+};\n+\n+}\n+\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+{\n+    static CSignatureCache signatureCache;\n+\n+    if (signatureCache.Get(sighash, vchSig, pubkey))\n+        return true;\n+\n+    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash, flags))\n+        return false;\n+\n+    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+        signatureCache.Set(sighash, vchSig, pubkey);\n+    return true;\n+}"
      },
      {
        "sha": "8faa7ae01f5e31c3a4cd5e962b326ff929799a4d",
        "filename": "src/script/sigcache.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_SIGCACHE\n+#define H_BITCOIN_SCRIPT_SIGCACHE\n+\n+#include \"script/interpreter.h\"\n+\n+#include <vector>\n+\n+class CPubKey;\n+\n+class CachingSignatureChecker : public SignatureChecker\n+{\n+public:\n+    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : SignatureChecker(txToIn, nInIn) {}\n+\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+};\n+\n+// Wrappers using a default SignatureChecker.\n+bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return EvalScript(stack, script, flags, CachingSignatureChecker(txTo, nIn));\n+}\n+\n+bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, flags, CachingSignatureChecker(txTo, nIn));\n+}\n+\n+#endif"
      },
      {
        "sha": "a524ac8e5e9cfb3f607ae1e50ff034ab803e904b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS);\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -252,9 +252,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      }
    ]
  },
  {
    "sha": "e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzkwYzM3MGI1OTcxZGQwOTZkMWJiZmQ1NTk2MGNjZjcxYjc1OTRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-14T02:48:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:58Z"
      },
      "message": "Replace SCRIPT_VERIFY_NOCACHE by flag directly to checker",
      "tree": {
        "sha": "de37518b3fa3c9fe6d3c6b70759f05dde90134fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de37518b3fa3c9fe6d3c6b70759f05dde90134fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1e798a8e9df15f8fbd120e57fc67e585f13843"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 64,
      "deletions": 74
    },
    "files": [
      {
        "sha": "61d5f2c177d3523e0af2bcbe00605d987d0e73d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -943,7 +943,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n@@ -1316,12 +1316,12 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore)))\n         return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1390,7 +1390,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags);\n+                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1403,7 +1403,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n                     }\n@@ -1599,8 +1599,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     int64_t nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n-    unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n-                         (fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     CBlockUndo blockundo;\n \n@@ -1644,7 +1643,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n             control.Add(vChecks);\n         }"
      },
      {
        "sha": "c09a139b2405ca311b5ae65c1a8dcf49f07d6e2c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -259,9 +259,8 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n // instead of being performed inline.\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks = true,\n-                 unsigned int flags = STANDARD_SCRIPT_VERIFY_FLAGS,\n-                 std::vector<CScriptCheck> *pvChecks = NULL);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n+                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight);\n@@ -303,12 +302,13 @@ class CScriptCheck\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n+    bool cacheStore;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn) :\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn) { }\n \n     bool operator()() const;\n \n@@ -317,6 +317,7 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n+        std::swap(cacheStore, check.cacheStore);\n     }\n };\n "
      },
      {
        "sha": "280349e8c2d560f98f9f788a9a3185b5a6b9dde3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -257,7 +257,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n             CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n             CTxUndo txundo;"
      },
      {
        "sha": "e50a278bc8eb90cb4804b062e7dde81b8431efa3",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -687,7 +687,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "56140f19dba9c01e5f8d8923257268ee441f2815",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -671,7 +671,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n+                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -732,7 +732,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n+                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;\n@@ -917,12 +917,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n+bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -937,7 +937,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n-    if (!VerifySignature(vchSig, pubkey, sighash, flags))\n+    if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     return true;"
      },
      {
        "sha": "f5363a7535a6fa9236911d0709fe33eb2e3528e4",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -31,8 +31,7 @@ enum\n     SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n     SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n };\n \n bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n@@ -43,7 +42,7 @@ uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsig\n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n     {\n         return false;\n     }\n@@ -58,11 +57,11 @@ class SignatureChecker : public BaseSignatureChecker\n     unsigned int nIn;\n \n protected:\n-    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n     SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker);"
      },
      {
        "sha": "981563b7aea02b82bfa76ef89c6fe3944cddd972",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -72,17 +72,17 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash, flags))\n+    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+    if (store)\n         signatureCache.Set(sighash, vchSig, pubkey);\n     return true;\n }"
      },
      {
        "sha": "9537efbd118e677c1756eaa39c25fa9a393c8c40",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -14,21 +14,13 @@ class CPubKey;\n \n class CachingSignatureChecker : public SignatureChecker\n {\n+private:\n+    bool store;\n+\n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : SignatureChecker(txToIn, nInIn) {}\n+    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };\n \n-// Wrappers using a default SignatureChecker.\n-bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return EvalScript(stack, script, flags, CachingSignatureChecker(txTo, nIn));\n-}\n-\n-bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return VerifyScript(scriptSig, scriptPubKey, flags, CachingSignatureChecker(txTo, nIn));\n-}\n-\n #endif"
      },
      {
        "sha": "da77e7d1f1be881540937df77f5170540b5015a8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey, 0))\n+            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "5a2ec1cb31947aa14de97d2251a50994102c1ef8",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -82,19 +82,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -104,16 +104,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -123,9 +123,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "6c32a263a97139558f2ef43565fd1cc2e19d76d9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0));\n }\n \n \n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "bfba0ea7fe96497041417498057e5574ba22ca6e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -464,18 +464,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), true, BaseSignatureChecker()));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -533,15 +533,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -569,46 +569,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "823afa168050770798b29c768cef2978c2f884e1",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -27,7 +27,6 @@ using namespace boost::algorithm;\n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n \n-// Note how NOCACHE is not included as it is a runtime-only flag.\n static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n@@ -139,7 +138,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 tx, i, verify_flags),\n+                                                 verify_flags, SignatureChecker(tx, i)),\n                                     strTest);\n             }\n         }\n@@ -212,7 +211,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      tx, i, verify_flags);\n+                                      verify_flags, SignatureChecker(tx, i));\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  }
]