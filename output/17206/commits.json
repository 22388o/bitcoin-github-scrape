[
  {
    "sha": "4896bacc00549c14f3284f5a2b61fb848ac31be0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODk2YmFjYzAwNTQ5YzE0ZjMyODRmNWEyYjYxZmI4NDhhYzMxYmUw",
    "commit": {
      "author": {
        "name": "MapleLaker",
        "email": "31602441+MapleLaker@users.noreply.github.com",
        "date": "2018-08-31T23:50:13Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-21T15:15:57Z"
      },
      "message": "Add testcase to simulate bitcoin schema in leveldb",
      "tree": {
        "sha": "c11ae8e55997d208e1187c3e29b7a5c829d70f2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c11ae8e55997d208e1187c3e29b7a5c829d70f2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4896bacc00549c14f3284f5a2b61fb848ac31be0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4896bacc00549c14f3284f5a2b61fb848ac31be0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4896bacc00549c14f3284f5a2b61fb848ac31be0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4896bacc00549c14f3284f5a2b61fb848ac31be0/comments",
    "author": {
      "login": "MapleLaker",
      "id": 31602441,
      "node_id": "MDQ6VXNlcjMxNjAyNDQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/31602441?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MapleLaker",
      "html_url": "https://github.com/MapleLaker",
      "followers_url": "https://api.github.com/users/MapleLaker/followers",
      "following_url": "https://api.github.com/users/MapleLaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/MapleLaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MapleLaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MapleLaker/subscriptions",
      "organizations_url": "https://api.github.com/users/MapleLaker/orgs",
      "repos_url": "https://api.github.com/users/MapleLaker/repos",
      "events_url": "https://api.github.com/users/MapleLaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MapleLaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a22b62481aae95747830bd3c0db3227860b12d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a22b62481aae95747830bd3c0db3227860b12d8e"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 80,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2ffe4dccdb6f01963bd9031377a20f7c6423ffa7",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4896bacc00549c14f3284f5a2b61fb848ac31be0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4896bacc00549c14f3284f5a2b61fb848ac31be0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=4896bacc00549c14f3284f5a2b61fb848ac31be0",
        "patch": "@@ -42,6 +42,86 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(dbwrapper_basic_data)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (bool obfuscate : {false, true}) {\n+        fs::path ph = GetDataDir() / (obfuscate ? \"dbwrapper_1_obfuscate_true\" : \"dbwrapper_1_obfuscate_false\");\n+        CDBWrapper dbw(ph, (1 << 20), false, true, obfuscate);\n+\n+        uint256 res;\n+        uint32_t res_uint_32;\n+        bool res_bool;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbwrapper_private::GetObfuscateKey(dbw)));\n+\n+        //Simulate block raw data - \"b + block hash\"\n+        std::string key_block = \"b\" + InsecureRand256().ToString();\n+\n+        uint256 in_block = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_block, in_block));\n+        BOOST_CHECK(dbw.Read(key_block, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_block.ToString());\n+\n+        //Simulate file raw data - \"f + file_number\"\n+        std::string key_file = strprintf(\"f%04x\", InsecureRand32());\n+\n+        uint256 in_file_info = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_file, in_file_info));\n+        BOOST_CHECK(dbw.Read(key_file, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_file_info.ToString());\n+\n+        //Simulate transaction raw data - \"t + transaction hash\"\n+        std::string key_transaction = \"t\" + InsecureRand256().ToString();\n+\n+        uint256 in_transaction = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_transaction, in_transaction));\n+        BOOST_CHECK(dbw.Read(key_transaction, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_transaction.ToString());\n+\n+        //Simulate UTXO raw data - \"c + transaction hash\"\n+        std::string key_utxo = \"c\" + InsecureRand256().ToString();\n+\n+        uint256 in_utxo = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_utxo, in_utxo));\n+        BOOST_CHECK(dbw.Read(key_utxo, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in_utxo.ToString());\n+\n+        //Simulate last block file number - \"l\"\n+        char key_last_blockfile_number = 'l';\n+        uint32_t lastblockfilenumber = InsecureRand32();\n+        BOOST_CHECK(dbw.Write(key_last_blockfile_number, lastblockfilenumber));\n+        BOOST_CHECK(dbw.Read(key_last_blockfile_number, res_uint_32));\n+        BOOST_CHECK_EQUAL(lastblockfilenumber, res_uint_32);\n+\n+        //Simulate Is Reindexing - \"R\"\n+        char key_IsReindexing = 'R';\n+        bool isInReindexing = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_IsReindexing, isInReindexing));\n+        BOOST_CHECK(dbw.Read(key_IsReindexing, res_bool));\n+        BOOST_CHECK_EQUAL(isInReindexing, res_bool);\n+\n+        //Simulate last block hash up to which UXTO covers - 'B'\n+        char key_lastblockhash_uxto = 'B';\n+        uint256 lastblock_hash = InsecureRand256();\n+        BOOST_CHECK(dbw.Write(key_lastblockhash_uxto, lastblock_hash));\n+        BOOST_CHECK(dbw.Read(key_lastblockhash_uxto, res));\n+        BOOST_CHECK_EQUAL(lastblock_hash, res);\n+\n+        //Simulate file raw data - \"F + filename_number + filename\"\n+        std::string file_option_tag = \"F\";\n+        uint8_t filename_length = InsecureRandBits(8);\n+        std::string filename = \"randomfilename\";\n+        std::string key_file_option = strprintf(\"%s%01x%s\", file_option_tag,filename_length,filename);\n+\n+        bool in_file_bool = InsecureRandBool();\n+        BOOST_CHECK(dbw.Write(key_file_option, in_file_bool));\n+        BOOST_CHECK(dbw.Read(key_file_option, res_bool));\n+        BOOST_CHECK_EQUAL(res_bool, in_file_bool);\n+   }\n+}\n+\n // Test batch operations\n BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {"
      }
    ]
  }
]