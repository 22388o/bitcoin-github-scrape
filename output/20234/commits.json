[
  {
    "sha": "2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmVlYzNjZTMxMzA5NjFmOThjZWIwMzA5NTFkMGU0NmQzYjkwOTZj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-22T18:34:31Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-07-07T13:46:38Z"
      },
      "message": "net: don't bind on 0.0.0.0 if binds are restricted to Tor\n\nThe semantic of `-bind` is to restrict the binding only to some address.\nIf not specified, then the user does not care and we bind to `0.0.0.0`.\nIf specified then we should honor the restriction and bind only to the\nspecified address.\n\nBefore this change, if no `-bind` is given then we would bind to\n`0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\nthe user does not care to restrict the binding.\n\nHowever, if only `-bind=addr:port=onion` is given (without ordinary\n`-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\naddition.\n\nChange the above to not do the additional bind: if only\n`-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\nto `addr:port` (only) and consider incoming connections to that as Tor\nand do not advertise it. I.e. a Tor-only node.",
      "tree": {
        "sha": "8145e4d5633c15ea6ec9957877a6b65df961eb0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8145e4d5633c15ea6ec9957877a6b65df961eb0b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmDlsD8ACgkQVN8G9ktV\ny7/NYh/+NWLKWrpZBspYw/DFi90shYkwwI33ovbHGWeFr5D9Bd/q2dyXhybBe35v\nHy5WUzZErgTQnsM30BDXTldJAd111XT2LIy3y2ANwWVrudxdPhaU1mR4sZoo+bsq\n1UWLzpCZGXXvQxef403GstFdcKtWGI3Q5agfHGN/9vpLkc0JNpzjQJ7a/smAs2d2\nmZUJAYUz1BEWZrPGqAaT2gjraYUDbabMuFxAvBEGMOYrB+phFF2i96WFhBccdnqK\nHXSoRjLyJh3ct5NRTbvTZ/oHukVb6COPCsLjw0Bq4iHqqRHq+S0vMy7uHmlYnS/c\nf/JHlgSEfAbBcJrHguUfEfc9rv0yDDDu5UoAfi4GK4/OydqUo0kbG48kcqmXqeD6\ndPkzC5uZNKxXU8jVGot4+tXTM2VIAs+G0XQUxdqrvofhXb8yd9oaFJI8a99dLWu4\nFqvLOyOxaZVFwF/kxScwxcGk81fCOSJlo4HJxhmA3KQRD8wykmtalkLMpItieYxi\nDku5wd9jJ36B/st70dkwF3OkSwgo7qpmUoKRl5UHfrivM1xudpCW5MaJeAtEjCHo\nETH+hXX8/MFgE3FFRRC1kVCxdAUoTRl59ROxy29SmXjZSJPTN/B/YaSC5UMhmCGK\nz7xSoCbyzfCAtdSzxC3CihbNlfzQGB5/3xc/zJjl0fSeixie8UesZtVq7kexDWAg\n3z0xlzxOZ9urkVRvsmsmAPeftJxzLQC8TedqQI6HdJUVAnEt3gyYvu1XFYP7chND\nuRkGRZRXkfmhkyiGHvBpjxsYnTgkJHuTu5H91yONGPYeylXCcEt6YsEyCzN79jWX\nGVBPvv01a//u3G4trJXFUczjprZDjwfhhtKf7ZrEymCw2pHU/GuT2tBLV7ObUSm3\nwH+voB9v9AFBap7Go/LFzcVXuC2jseC8VE+IbEAFNWr3EFzfKPc421KqIsCkRW4w\nQZwk3hKjeYKofo5dfDhuhiCT3BUtyD/7A8yMZEm0fi+cAFgd3TittKx/8fVJVz79\n0fIfoAX2+6AaG8qVAOSvzjn0Yqtp4zQUvxIiR1J+oSpl1uKFEr9CkwNJiw5xVfc6\nZf/NPyNzcoxwZoSiDKP/4tEId91MvpG7TqzXMZKYWXolgf3jiKJg3j2IO+qHHUKL\nZMqJwU6nPgtW35bXQh9w62A69T3PQRqnjDOIJyThTRHRk+7AZUEUaB56RQNCIu0F\nORJBlLQ5foppKnoK8Xhf3zI032efG34ypHxzb8so9pZ0WYcL96pN79mInK4wmu22\n4GIyMUPzkiQDgrgxMzi/OHJ9bJdO7Te3W4d+064dKdlRjXola/CLTjy8+Gsax8md\nDDYJ0YxWANlIqXqz9+IwMdiJpOywKA==\n=ivIp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8145e4d5633c15ea6ec9957877a6b65df961eb0b\nparent 4da26fb85d6d6d205a2794ccb98beee1302b4a25\nauthor Vasil Dimov <vd@FreeBSD.org> 1603391671 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1625665598 +0200\n\nnet: don't bind on 0.0.0.0 if binds are restricted to Tor\n\nThe semantic of `-bind` is to restrict the binding only to some address.\nIf not specified, then the user does not care and we bind to `0.0.0.0`.\nIf specified then we should honor the restriction and bind only to the\nspecified address.\n\nBefore this change, if no `-bind` is given then we would bind to\n`0.0.0.0:8333` and to `127.0.0.1:8334` (incoming Tor) which is ok -\nthe user does not care to restrict the binding.\n\nHowever, if only `-bind=addr:port=onion` is given (without ordinary\n`-bind=`) then we would bind to `addr:port` _and_ to `0.0.0.0:8333` in\naddition.\n\nChange the above to not do the additional bind: if only\n`-bind=addr:port=onion` is given (without ordinary `-bind=`) then bind\nto `addr:port` (only) and consider incoming connections to that as Tor\nand do not advertise it. I.e. a Tor-only node.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2feec3ce3130961f98ceb030951d0e46d3b9096c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2feec3ce3130961f98ceb030951d0e46d3b9096c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4da26fb85d6d6d205a2794ccb98beee1302b4a25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4da26fb85d6d6d205a2794ccb98beee1302b4a25"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 129,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e60ec093f227f7e0387cdebdffdd422061cdefbc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -1721,25 +1721,34 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         return InitError(ResolveErrMsg(\"bind\", bind_arg));\n     }\n \n-    if (connOptions.onion_binds.empty()) {\n-        connOptions.onion_binds.push_back(DefaultOnionServiceTarget());\n-    }\n-\n-    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n-        const auto bind_addr = connOptions.onion_binds.front();\n-        if (connOptions.onion_binds.size() > 1) {\n-            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s for the automatically created Tor onion service.\"), bind_addr.ToStringIPPort()));\n-        }\n-        StartTorControl(bind_addr);\n-    }\n-\n     for (const std::string& strBind : args.GetArgs(\"-whitebind\")) {\n         NetWhitebindPermissions whitebind;\n         bilingual_str error;\n         if (!NetWhitebindPermissions::TryParse(strBind, whitebind, error)) return InitError(error);\n         connOptions.vWhiteBinds.push_back(whitebind);\n     }\n \n+    // If the user did not specify -bind= or -whitebind= then we bind\n+    // on any address - 0.0.0.0 (IPv4) and :: (IPv6).\n+    connOptions.bind_on_any = args.GetArgs(\"-bind\").empty() && args.GetArgs(\"-whitebind\").empty();\n+\n+    CService onion_service_target;\n+    if (!connOptions.onion_binds.empty()) {\n+        onion_service_target = connOptions.onion_binds.front();\n+    } else {\n+        onion_service_target = DefaultOnionServiceTarget();\n+        connOptions.onion_binds.push_back(onion_service_target);\n+    }\n+\n+    if (args.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION)) {\n+        if (connOptions.onion_binds.size() > 1) {\n+            InitWarning(strprintf(_(\"More than one onion bind address is provided. Using %s \"\n+                                    \"for the automatically created Tor onion service.\"),\n+                                  onion_service_target.ToStringIPPort()));\n+        }\n+        StartTorControl(onion_service_target);\n+    }\n+\n     for (const auto& net : args.GetArgs(\"-whitelist\")) {\n         NetWhitelistPermissions subnet;\n         bilingual_str error;"
      },
      {
        "sha": "51c16d348303120735fff5458cf08a1fcedbd2e1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -2418,38 +2418,33 @@ bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags\n     return true;\n }\n \n-bool CConnman::InitBinds(\n-    const std::vector<CService>& binds,\n-    const std::vector<NetWhitebindPermissions>& whiteBinds,\n-    const std::vector<CService>& onion_binds)\n+bool CConnman::InitBinds(const Options& options)\n {\n     bool fBound = false;\n-    for (const auto& addrBind : binds) {\n+    for (const auto& addrBind : options.vBinds) {\n         fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::None);\n     }\n-    for (const auto& addrBind : whiteBinds) {\n+    for (const auto& addrBind : options.vWhiteBinds) {\n         fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n     }\n-    if (binds.empty() && whiteBinds.empty()) {\n+    for (const auto& addr_bind : options.onion_binds) {\n+        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n+    }\n+    if (options.bind_on_any) {\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = htonl(INADDR_ANY);\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n         fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::None);\n         fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::None);\n     }\n-\n-    for (const auto& addr_bind : onion_binds) {\n-        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n-    }\n-\n     return fBound;\n }\n \n bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n {\n     Init(connOptions);\n \n-    if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds, connOptions.onion_binds)) {\n+    if (fListen && !InitBinds(connOptions)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n                 _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),"
      },
      {
        "sha": "5e84f7a9d9e76ba72cb69402bfeb3bbea361be89",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -824,6 +824,9 @@ class CConnman\n         std::vector<NetWhitebindPermissions> vWhiteBinds;\n         std::vector<CService> vBinds;\n         std::vector<CService> onion_binds;\n+        /// True if the user did not specify -bind= or -whitebind= and thus\n+        /// we should bind on `0.0.0.0` (IPv4) and `::` (IPv6).\n+        bool bind_on_any;\n         bool m_use_addrman_outgoing = true;\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n@@ -1033,10 +1036,7 @@ class CConnman\n \n     bool BindListenPort(const CService& bindAddr, bilingual_str& strError, NetPermissionFlags permissions);\n     bool Bind(const CService& addr, unsigned int flags, NetPermissionFlags permissions);\n-    bool InitBinds(\n-        const std::vector<CService>& binds,\n-        const std::vector<NetWhitebindPermissions>& whiteBinds,\n-        const std::vector<CService>& onion_binds);\n+    bool InitBinds(const Options& options);\n \n     void ThreadOpenAddedConnections();\n     void AddAddrFetch(const std::string& strDest);"
      },
      {
        "sha": "6802da8d4898faf06bb91423b96dec54614ba8c0",
        "filename": "test/functional/feature_bind_extra.py",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/feature_bind_extra.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/feature_bind_extra.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bind_extra.py?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -0,0 +1,95 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test starting bitcoind with -bind and/or -bind=...=onion and confirm\n+that bind happens on the expected ports.\n+\"\"\"\n+\n+import sys\n+\n+from test_framework.netutil import (\n+    addr_to_hex,\n+    get_bind_addrs,\n+)\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+    SkipTest,\n+)\n+from test_framework.util import (\n+    PORT_MIN,\n+    PORT_RANGE,\n+    assert_equal,\n+    rpc_port,\n+)\n+\n+class BindExtraTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        # Avoid any -bind= on the command line. Force the framework to avoid\n+        # adding -bind=127.0.0.1.\n+        self.bind_to_localhost_only = False\n+        self.num_nodes = 2\n+\n+    def setup_network(self):\n+        # Override setup_network() because we want to put the result of\n+        # p2p_port() in self.extra_args[], before the nodes are started.\n+        # p2p_port() is not usable in set_test_params() because PortSeed.n is\n+        # not set at that time.\n+\n+        # Due to OS-specific network stats queries, we only run on Linux.\n+        self.log.info(\"Checking for Linux\")\n+        if not sys.platform.startswith('linux'):\n+            raise SkipTest(\"This test can only be run on Linux.\")\n+\n+        loopback_ipv4 = addr_to_hex(\"127.0.0.1\")\n+\n+        # Start custom ports after p2p and rpc ports.\n+        port = PORT_MIN + 2 * PORT_RANGE\n+\n+        # Array of tuples [command line arguments, expected bind addresses].\n+        self.expected = []\n+\n+        # Node0, no normal -bind=... with -bind=...=onion, thus only the tor target.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}=onion\"],\n+                [(loopback_ipv4, port)]\n+            ],\n+        )\n+        port += 1\n+\n+        # Node1, both -bind=... and -bind=...=onion.\n+        self.expected.append(\n+            [\n+                [f\"-bind=127.0.0.1:{port}\", f\"-bind=127.0.0.1:{port + 1}=onion\"],\n+                [(loopback_ipv4, port), (loopback_ipv4, port + 1)]\n+            ],\n+        )\n+        port += 2\n+\n+        self.extra_args = list(map(lambda e: e[0], self.expected))\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        # Don't start the nodes, as some of them would collide trying to bind on the same port.\n+\n+    def run_test(self):\n+        for i in range(len(self.expected)):\n+            self.log.info(f\"Starting node {i} with {self.expected[i][0]}\")\n+            self.start_node(i)\n+            pid = self.nodes[i].process.pid\n+            binds = set(get_bind_addrs(pid))\n+            # Remove IPv6 addresses because on some CI environments \"::1\" is not configured\n+            # on the system (so our test_ipv6_local() would return False), but it is\n+            # possible to bind on \"::\". This makes it unpredictable whether to expect\n+            # that bitcoind has bound on \"::1\" (for RPC) and \"::\" (for P2P).\n+            ipv6_addr_len_bytes = 32\n+            binds = set(filter(lambda e: len(e[0]) != ipv6_addr_len_bytes, binds))\n+            # Remove RPC ports. They are not relevant for this test.\n+            binds = set(filter(lambda e: e[1] != rpc_port(i), binds))\n+            assert_equal(binds, set(self.expected[i][1]))\n+            self.stop_node(i)\n+            self.log.info(f\"Stopped node {i}\")\n+\n+if __name__ == '__main__':\n+    BindExtraTest().main()"
      },
      {
        "sha": "85ecb569cbd782f406e67e7105c2ba44d8dbd21c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2feec3ce3130961f98ceb030951d0e46d3b9096c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2feec3ce3130961f98ceb030951d0e46d3b9096c",
        "patch": "@@ -138,6 +138,7 @@\n     'interface_zmq.py',\n     'rpc_invalid_address_message.py',\n     'interface_bitcoin_cli.py',\n+    'feature_bind_extra.py',\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',\n     'tool_wallet.py --legacy-wallet',"
      }
    ]
  }
]