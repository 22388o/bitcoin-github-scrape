[
  {
    "sha": "3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzVmOTlkNWJkZWIzNTI4M2JjM2RkYWVlMzVhMTVmNDYzMmE3YzFj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-11T02:28:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:17:19Z"
      },
      "message": "[indexes] Add compact block filter headers cache",
      "tree": {
        "sha": "cee6a1cf3e75c20d8d0dd8b708ce23eb21d76199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cee6a1cf3e75c20d8d0dd8b708ce23eb21d76199"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23083856a551ca13e8b142791c296ecb25cc4e7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23083856a551ca13e8b142791c296ecb25cc4e7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23083856a551ca13e8b142791c296ecb25cc4e7f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 29,
      "deletions": 6
    },
    "files": [
      {
        "sha": "14140713c3ad5846b476f9473a53cbdb3d47fccf",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
        "patch": "@@ -31,6 +31,8 @@ constexpr char DB_FILTER_POS = 'P';\n constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for fltr?????.dat files */\n constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+/** Maximum size of the cfheaders cache */\n+constexpr size_t CF_HEADERS_CACHE_MAX_SZ{2000};\n \n namespace {\n \n@@ -387,13 +389,30 @@ bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter&\n     return ReadFilterFromDisk(entry.pos, filter_out);\n }\n \n-bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out)\n {\n+    {\n+        // Check the headers cache\n+        LOCK(m_cs_headers_cache);\n+        auto header = m_headers_cache.find(block_index->GetBlockHash());\n+        if (header != m_headers_cache.end()) {\n+            header_out = header->second;\n+            return true;\n+        }\n+    }\n+\n     DBVal entry;\n     if (!LookupOne(*m_db, block_index, entry)) {\n         return false;\n     }\n \n+    if (block_index->nHeight % CFCHECKPT_INTERVAL == 0) {\n+        // Add to the headers cache\n+        LOCK(m_cs_headers_cache);\n+        if (m_headers_cache.size() < CF_HEADERS_CACHE_MAX_SZ) {\n+            m_headers_cache.emplace(block_index->GetBlockHash(), entry.header);\n+        }\n+    }\n     header_out = entry.header;\n     return true;\n }"
      },
      {
        "sha": "7feb5bd2a77c1de07ce06ec64cc3ed29c05ebd57",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
        "patch": "@@ -10,6 +10,9 @@\n #include <flatfile.h>\n #include <index/base.h>\n \n+/** Interval between compact filter checkpoints. See BIP 157. */\n+static constexpr int CFCHECKPT_INTERVAL = 1000;\n+\n /**\n  * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n  * blocks by height. An index is constructed for each supported filter type with its own database\n@@ -30,6 +33,9 @@ class BlockFilterIndex final : public BaseIndex\n     bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const;\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n+    RecursiveMutex m_cs_headers_cache;\n+    std::map<uint256, uint256> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n+\n protected:\n     bool Init() override;\n \n@@ -54,7 +60,7 @@ class BlockFilterIndex final : public BaseIndex\n     bool LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const;\n \n     /** Get a single filter header by block. */\n-    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const;\n+    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out);\n \n     /** Get a range of filters between two heights on a chain. */\n     bool LookupFilterRange(int start_height, const CBlockIndex* stop_index,"
      },
      {
        "sha": "450f3fc07a3df683b71b0429ad4f963fd1683776",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
        "patch": "@@ -129,8 +129,6 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n-/** Interval between compact filter checkpoints. See BIP 157. */\n-static constexpr int CFCHECKPT_INTERVAL = 1000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1986,7 +1984,7 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n                                       BlockFilterType filter_type,\n                                       const uint256& stop_hash,\n                                       const CBlockIndex*& stop_index,\n-                                      const BlockFilterIndex*& filter_index)\n+                                      BlockFilterIndex*& filter_index)\n {\n     const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n@@ -2041,7 +2039,7 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n \n     const CBlockIndex* stop_index;\n-    const BlockFilterIndex* filter_index;\n+    BlockFilterIndex* filter_index;\n     if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n                                    stop_index, filter_index)) {\n         return;"
      }
    ]
  },
  {
    "sha": "a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGJiYzRmZDI4MDkzZTFmZjFjMDYyNjVlOTdiZjQ2NmIyNmIyYmJk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T23:47:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:30:10Z"
      },
      "message": "[net processing] Message handling for getcfheaders.\n\nif -peercfilter is configured, handle requests for cfheaders.",
      "tree": {
        "sha": "95915d11fd797803680242255d2824130c200838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95915d11fd797803680242255d2824130c200838"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c5f99d5bdeb35283bc3ddaee35a15f4632a7c1c"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 96,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4a6d3b5680e5b2eb2dd427d2963b590b53ccec4f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 3,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1975,14 +1977,16 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[in]   pfrom           The peer that we received the request from\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   start_height    The start height for the request\n  * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n  * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n-                                      BlockFilterType filter_type,\n-                                      const uint256& stop_hash,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n                                       BlockFilterIndex*& filter_index)\n {\n@@ -2009,6 +2013,21 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         }\n     }\n \n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n     filter_index = GetBlockFilterIndex(filter_type);\n     if (!filter_index) {\n         LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n@@ -2018,6 +2037,61 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cfheaders request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+}\n+\n /**\n  * Handle a getcfcheckpt request.\n  *\n@@ -2040,7 +2114,8 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n     }\n@@ -3373,6 +3448,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n         ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n         return true;"
      },
      {
        "sha": "d3b5cc983c4f429b37bf20f83574ddae2589888c",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType"
      },
      {
        "sha": "559534f5529780760186f99a52a22d104d35fd82",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
        "patch": "@@ -234,6 +234,17 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+/**\n+ * getcfheaders requests compact filter headers for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a vector of\n+ * filter headers for each block in the requested range.\n+ */\n+extern const char *CFHEADERS;\n /**\n  * getcfcheckpt requests evenly spaced compact filter headers, enabling\n  * parallelized download and validation of the headers between them."
      }
    ]
  },
  {
    "sha": "0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWM1MjU4YWNjMTczZjRhNmRhYjhhODUwZjJhYTVkZDM1YzQwZmMz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:25:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:35:16Z"
      },
      "message": "[test] Add test for cfheaders",
      "tree": {
        "sha": "15e48b1adfc6951481bd00792152fc059018d44c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e48b1adfc6951481bd00792152fc059018d44c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4bbc4fd28093e1ff1c06265e97bf466b26b2bbd"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 109,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f7d2a609ac765498403f3d52dcdb18e77d725fe",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
        "patch": "@@ -5,12 +5,16 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfcheckpts.\n+cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    hash256,\n     msg_getcfcheckpt,\n+    msg_getcfheaders,\n+    ser_uint256,\n+    uint256_from_str,\n )\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -100,12 +104,47 @@ def run_test(self):\n             [int(header, 16) for header in (stale_cfcheckpt,)]\n         )\n \n+        self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        main_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        stale_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -114,6 +153,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filter headers results in disconnection.\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(tip_hash, 16)\n+            ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n@@ -130,5 +175,12 @@ def run_test(self):\n             node0.send_message(request)\n             node0.wait_for_disconnect()\n \n+def compute_last_header(prev_header, hashes):\n+    \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n+    header = ser_uint256(prev_header)\n+    for filter_hash in hashes:\n+        header = hash256(ser_uint256(filter_hash) + header)\n+    return uint256_from_str(header)\n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      },
      {
        "sha": "3e21efdd4df540290d94c5c6c0cd27085816dee4",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
        "patch": "@@ -1515,6 +1515,59 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+class msg_getcfheaders:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfheaders\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfheaders:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"prev_header\", \"hashes\")\n+    msgtype =  b\"cfheaders\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, prev_header=None, hashes=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.prev_header = prev_header\n+        self.hashes = hashes\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.prev_header = deser_uint256(f)\n+        self.hashes = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256(self.prev_header)\n+        r += ser_uint256_vector(self.hashes)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n class msg_getcfcheckpt:\n     __slots__ = (\"filter_type\", \"stop_hash\")\n     msgtype =  b\"getcfcheckpt\""
      },
      {
        "sha": "0ba6d0020b971dcf421010c02d72a8b6264e3e82",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfheaders,\n     msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n@@ -68,6 +69,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n@@ -330,6 +332,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass"
      }
    ]
  },
  {
    "sha": "5335fa8ad70958abcf81bec05a881640444a46d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzM1ZmE4YWQ3MDk1OGFiY2Y4MWJlYzA1YTg4MTY0MDQ0NGE0NmQ4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T14:23:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:35:17Z"
      },
      "message": "[indexes] Fix default [de]serialization of BlockFilter.\n\nThis only changes network serialization. Disk serialization is defined\nin ReadFilterFromDisk() and WriteFilterToDisk() and does not include the\nfilter_type.",
      "tree": {
        "sha": "0cda528e5c1d8c8bd458eea18223dbf808a4716b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cda528e5c1d8c8bd458eea18223dbf808a4716b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5335fa8ad70958abcf81bec05a881640444a46d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5335fa8ad70958abcf81bec05a881640444a46d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5335fa8ad70958abcf81bec05a881640444a46d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5335fa8ad70958abcf81bec05a881640444a46d8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec5258acc173f4a6dab8a850f2aa5dd35c40fc3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "96cefbf3b2f9ffb0c688eee6d00249ad1ad75cc5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5335fa8ad70958abcf81bec05a881640444a46d8/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5335fa8ad70958abcf81bec05a881640444a46d8/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=5335fa8ad70958abcf81bec05a881640444a46d8",
        "patch": "@@ -144,8 +144,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash\n           << m_filter.GetEncoded();\n     }\n \n@@ -154,8 +154,8 @@ class BlockFilter\n         std::vector<unsigned char> encoded_filter;\n         uint8_t filter_type;\n \n-        s >> m_block_hash\n-          >> filter_type\n+        s >> filter_type\n+          >> m_block_hash\n           >> encoded_filter;\n \n         m_filter_type = static_cast<BlockFilterType>(filter_type);"
      }
    ]
  },
  {
    "sha": "802c850bc67511d8d55a81ee70919261d7d688eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDJjODUwYmM2NzUxMWQ4ZDU1YTgxZWU3MDkxOTI2MWQ3ZDY4OGVi",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T13:42:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:35:17Z"
      },
      "message": "[net processing] Message handling for getcfilters.\n\nif -peercfilter is configured, handle requests for cfilters.",
      "tree": {
        "sha": "06bcdd5e162ed10e3898baee764121fa4d3fe9d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06bcdd5e162ed10e3898baee764121fa4d3fe9d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/802c850bc67511d8d55a81ee70919261d7d688eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/802c850bc67511d8d55a81ee70919261d7d688eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/802c850bc67511d8d55a81ee70919261d7d688eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/802c850bc67511d8d55a81ee70919261d7d688eb/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5335fa8ad70958abcf81bec05a881640444a46d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5335fa8ad70958abcf81bec05a881640444a46d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5335fa8ad70958abcf81bec05a881640444a46d8"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 65,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e49da25ba1f2e625b23db097a3fd22f36b7bdca",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/802c850bc67511d8d55a81ee70919261d7d688eb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/802c850bc67511d8d55a81ee70919261d7d688eb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=802c850bc67511d8d55a81ee70919261d7d688eb",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n@@ -2037,6 +2039,49 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cffilters request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+            .Make(NetMsgType::CFILTER, filter);\n+        connman->PushMessage(pfrom, std::move(msg));\n+    }\n+}\n+\n /**\n  * Handle a cfheaders request.\n  *\n@@ -3448,6 +3493,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFILTERS) {\n+        ProcessGetCFilters(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n+\n     if (msg_type == NetMsgType::GETCFHEADERS) {\n         ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n         return true;"
      },
      {
        "sha": "36fde9892cb103757f4b0f6a6c7544988b66d7a6",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/802c850bc67511d8d55a81ee70919261d7d688eb/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/802c850bc67511d8d55a81ee70919261d7d688eb/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=802c850bc67511d8d55a81ee70919261d7d688eb",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFILTERS=\"getcfilters\";\n+const char *CFILTER=\"cfilter\";\n const char *GETCFHEADERS=\"getcfheaders\";\n const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";"
      },
      {
        "sha": "ec77ee99d39b697f884f2bdc3272a7cf6bf80d8e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/802c850bc67511d8d55a81ee70919261d7d688eb/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/802c850bc67511d8d55a81ee70919261d7d688eb/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=802c850bc67511d8d55a81ee70919261d7d688eb",
        "patch": "@@ -234,6 +234,18 @@ extern const char *GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char *BLOCKTXN;\n+\n+/**\n+ * getcfilters requests compact filters for a range of blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char *GETCFILTERS;\n+/**\n+ * cfilter is a response to a getcfilters request containing a single compact\n+ * filter.\n+ */\n+extern const char *CFILTER;\n /**\n  * getcfheaders requests compact filter headers for a range of blocks.\n  * Only available with service bit NODE_COMPACT_FILTERS as described by"
      }
    ]
  },
  {
    "sha": "1e8a6960364a55b1be0b192bf1c265476bf2a63a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZThhNjk2MDM2NGE1NWIxYmUwYjE5MmJmMWMyNjU0NzZiZjJhNjNh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:27:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:35:17Z"
      },
      "message": "[test] Add test for cfilters.",
      "tree": {
        "sha": "cbd8c94332fa1b80f93ed16c393a9bdcf1efd1c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbd8c94332fa1b80f93ed16c393a9bdcf1efd1c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e8a6960364a55b1be0b192bf1c265476bf2a63a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8a6960364a55b1be0b192bf1c265476bf2a63a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e8a6960364a55b1be0b192bf1c265476bf2a63a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8a6960364a55b1be0b192bf1c265476bf2a63a/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "802c850bc67511d8d55a81ee70919261d7d688eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/802c850bc67511d8d55a81ee70919261d7d688eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/802c850bc67511d8d55a81ee70919261d7d688eb"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 121,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1f9b19e193f9a33827effbd37cad28339e7d5467",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 67,
        "deletions": 2,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=1e8a6960364a55b1be0b192bf1c265476bf2a63a",
        "patch": "@@ -13,6 +13,7 @@\n     hash256,\n     msg_getcfcheckpt,\n     msg_getcfheaders,\n+    msg_getcfilters,\n     ser_uint256,\n     uint256_from_str,\n )\n@@ -25,6 +26,21 @@\n     wait_until,\n )\n \n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n class CompactFiltersTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n@@ -37,8 +53,8 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Node 0 supports COMPACT_FILTERS, node 1 does not.\n-        node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-        node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n \n         # Nodes 0 & 1 share the same first 999 blocks in the chain.\n         self.nodes[0].generate(999)\n@@ -134,6 +150,44 @@ def run_test(self):\n             int(stale_cfcheckpt, 16)\n         )\n \n+        self.log.info(\"Check that peers can fetch cfilters.\")\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stop_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 10)\n+\n+        self.log.info(\"Check that cfilter responses are correct.\")\n+        for cfilter, cfhash, height in zip(response, main_cfhashes, range(1, 11)):\n+            block_hash = self.nodes[0].getblockhash(height)\n+            assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+            assert_equal(cfilter.block_hash, int(block_hash, 16))\n+            computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+            assert_equal(computed_cfhash, cfhash)\n+\n+        self.log.info(\"Check that peers can fetch cfilters for stale blocks.\")\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1000,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 1)\n+\n+        cfilter = response[0]\n+        assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+        assert_equal(cfilter.block_hash, int(stale_block_hash, 16))\n+        computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+        assert_equal(computed_cfhash, stale_cfhashes[999])\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n@@ -145,6 +199,11 @@ def run_test(self):\n                 start_height=1000,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -153,6 +212,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filters results in disconnection.\n+            msg_getcfilters(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n             # Requesting too many filter headers results in disconnection.\n             msg_getcfheaders(\n                 filter_type=FILTER_TYPE_BASIC,"
      },
      {
        "sha": "acee185732ecae8c2d497250e78b340a7a9e74f7",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=1e8a6960364a55b1be0b192bf1c265476bf2a63a",
        "patch": "@@ -1515,6 +1515,57 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+\n+class msg_getcfilters:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfilters\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfilters(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfilter:\n+    __slots__ = (\"filter_type\", \"block_hash\", \"filter_data\")\n+    msgtype =  b\"cfilter\"\n+\n+    def __init__(self, filter_type=None, block_hash=None, filter_data=None):\n+        self.filter_type = filter_type\n+        self.block_hash = block_hash\n+        self.filter_data = filter_data\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.block_hash = deser_uint256(f)\n+        self.filter_data = deser_string(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.block_hash)\n+        r += ser_string(self.filter_data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfilter(filter_type={:#x}, block_hash={:x})\".format(\n+            self.filter_type, self.block_hash)\n+\n class msg_getcfheaders:\n     __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n     msgtype =  b\"getcfheaders\""
      },
      {
        "sha": "8aa5e74b2b5c1c253fcfec889ea6608a48d8f358",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8a6960364a55b1be0b192bf1c265476bf2a63a/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1e8a6960364a55b1be0b192bf1c265476bf2a63a",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfilter,\n     msg_cfheaders,\n     msg_cfcheckpt,\n     msg_cmpctblock,\n@@ -69,6 +70,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfilter\": msg_cfilter,\n     b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n@@ -332,6 +334,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfilter(self, message): pass\n     def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass"
      }
    ]
  },
  {
    "sha": "94167bf701188f96fc5956cfd88df57aa151eaa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDE2N2JmNzAxMTg4Zjk2ZmM1OTU2Y2ZkODhkZjU3YWExNTFlYWE4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T15:13:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:46:40Z"
      },
      "message": "[net] Signal NODE_COMPACT_FILTERS if we're serving compact filters.\n\nif -peercfilters is configured, signal the NODE_COMPACT_FILTERS service\nbit to indicate that we are able to serve compact block filters, headers\nand checkpoints.",
      "tree": {
        "sha": "4578949099a8352cc855e1d046f845ca25d690be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4578949099a8352cc855e1d046f845ca25d690be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94167bf701188f96fc5956cfd88df57aa151eaa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94167bf701188f96fc5956cfd88df57aa151eaa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94167bf701188f96fc5956cfd88df57aa151eaa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94167bf701188f96fc5956cfd88df57aa151eaa8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e8a6960364a55b1be0b192bf1c265476bf2a63a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8a6960364a55b1be0b192bf1c265476bf2a63a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e8a6960364a55b1be0b192bf1c265476bf2a63a"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 31,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f4071ee50d6a35f5c54f5b9f35db6546f8c2959e",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -91,6 +91,10 @@ class BaseIndex : public CValidationInterface\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n \n+    /// Returns whether index has completed the initial sync with the active chain.\n+    /// After returning true once, this function will return true on all subsequent calls.\n+    bool IsSynced() const { return m_synced; }\n+\n     /// Blocks the current thread until the index is caught up to the current\n     /// state of the block chain. This only blocks if the index has gotten in\n     /// sync once and only needs to process blocks in the ValidationInterface"
      },
      {
        "sha": "f8a504eeaa93196b1510e69c1cad81f7d6d2ab5c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -994,11 +994,13 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n-    // Basic filters are the only supported filters. The basic filters index must be enabled\n-    // to serve compact filters\n-    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS) &&\n-        g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n-        return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+    // Signal NODE_COMPACT_FILTERS if peercfilters and basic filters index are both enabled.\n+    if (gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n+        if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n+            return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+        }\n+\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n     // if using block pruning, then disallow txindex\n@@ -1782,6 +1784,19 @@ bool AppInitMain(NodeContext& node)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (nLocalServices & NODE_COMPACT_FILTERS) {\n+        const BlockFilterIndex* const basic_filter_index =\n+            GetBlockFilterIndex(BlockFilterType::BASIC);\n+        if (!basic_filter_index) {\n+            error(\"NODE_COMPACT_FILTERS is signaled, but filter index is not available\");\n+            return false;\n+        }\n+        if (!basic_filter_index->IsSynced()) {\n+            InitError(strprintf(_(\"Cannot enable -peercfilters until basic block filter index is in sync. Please disable and reenable once filters have been indexed.\")));\n+            return false;\n+        }\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "b6e3a4eb2ee20982e9884180cbd19ae27a2fc23f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -1994,7 +1994,7 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n {\n     const bool supported_filter_type =\n         (filter_type == BlockFilterType::BASIC &&\n-         gArgs.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS));\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n     if (!supported_filter_type) {\n         LogPrint(BCLog::NET, \"peer %d requested unsupported block filter type: %d\\n\",\n                  pfrom->GetId(), static_cast<uint8_t>(filter_type));"
      },
      {
        "sha": "edca3499b03818860dd81e3e4ad670a59faa1d7c",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -295,6 +295,9 @@ enum ServiceFlags : uint64_t {\n     // NODE_WITNESS indicates that a node can be asked for blocks and transactions including\n     // witness data.\n     NODE_WITNESS = (1 << 3),\n+    // NODE_COMPACT_FILTERS means the node will service basic block filter requests.\n+    // See BIP157 and BIP158 for details on how this is implemented.\n+    NODE_COMPACT_FILTERS = (1 << 6),\n     // NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only\n     // serving the last 288 (2 day) blocks\n     // See BIP159 for details on how this is implemented."
      },
      {
        "sha": "d7e452d8708cd94194fa222331fc3ecd67284d36",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -751,6 +751,7 @@ QString serviceFlagToStr(const quint64 mask, const int bit)\n     case NODE_GETUTXO:         return \"GETUTXO\";\n     case NODE_BLOOM:           return \"BLOOM\";\n     case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_COMPACT_FILTERS: return \"COMPACT_FILTERS\";\n     case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n     // Not using default, so we get warned when a case is missing\n     }"
      },
      {
        "sha": "772c629baa1fd7f2d59a07b380527bc5c26d2d23",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94167bf701188f96fc5956cfd88df57aa151eaa8/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94167bf701188f96fc5956cfd88df57aa151eaa8/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=94167bf701188f96fc5956cfd88df57aa151eaa8",
        "patch": "@@ -851,6 +851,8 @@ UniValue GetServicesNames(ServiceFlags services)\n         servicesNames.push_back(\"BLOOM\");\n     if (services & NODE_WITNESS)\n         servicesNames.push_back(\"WITNESS\");\n+    if (services & NODE_COMPACT_FILTERS)\n+        servicesNames.push_back(\"COMPACT_FILTERS\");\n     if (services & NODE_NETWORK_LIMITED)\n         servicesNames.push_back(\"NETWORK_LIMITED\");\n "
      }
    ]
  },
  {
    "sha": "e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGY0MGJiYjBkNDBiMDRlYjdkZTRmNjQzMmUyMThlNjliZjYxOGM3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:29:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:50:06Z"
      },
      "message": "[test] Add test for NODE_COMPACT_FILTER.\n\nTest that a node configured to serve compact filters will signal\nNODE_COMPACT_FILTER service bit.",
      "tree": {
        "sha": "a3d7f1e560d599462b0413f18167b4e13fde0ba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3d7f1e560d599462b0413f18167b4e13fde0ba8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94167bf701188f96fc5956cfd88df57aa151eaa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94167bf701188f96fc5956cfd88df57aa151eaa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94167bf701188f96fc5956cfd88df57aa151eaa8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "31b4b4e8b5593d8db56b1a1d3c7b68114ec94829",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
        "patch": "@@ -4,12 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n-Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfheaders and cfcheckpts.\n+Tests that a node configured with -blockfilterindex and -peerblockfilters signals\n+NODE_COMPACT_FILTERS and can serve cfilters, cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    NODE_COMPACT_FILTERS,\n     hash256,\n     msg_getcfcheckpt,\n     msg_getcfheaders,\n@@ -70,6 +71,14 @@ def run_test(self):\n         self.nodes[1].generate(1001)\n         wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n \n+        # Check that nodes have signalled NODE_COMPACT_FILTERS correctly.\n+        assert node0.nServices & NODE_COMPACT_FILTERS != 0\n+        assert node1.nServices & NODE_COMPACT_FILTERS == 0\n+\n+        # Check that the localservices is as expected.\n+        assert int(self.nodes[0].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS != 0\n+        assert int(self.nodes[1].getnetworkinfo()['localservices'], 16) & NODE_COMPACT_FILTERS == 0\n+\n         self.log.info(\"get cfcheckpt on chain to be re-orged out.\")\n         request = msg_getcfcheckpt(\n             filter_type=FILTER_TYPE_BASIC,"
      },
      {
        "sha": "cd62e84bfa9af3eb6b33a7d5f01a08074cd905c8",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
        "patch": "@@ -49,6 +49,7 @@\n NODE_GETUTXO = (1 << 1)\n NODE_BLOOM = (1 << 2)\n NODE_WITNESS = (1 << 3)\n+NODE_COMPACT_FILTERS = (1 << 6)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n MSG_TX = 1"
      }
    ]
  },
  {
    "sha": "5488ce98cf2d562964a7a74377bdd74d7b258483",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDg4Y2U5OGNmMmQ1NjI5NjRhN2E3NDM3N2JkZDc0ZDdiMjU4NDgz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-06-30T15:01:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-13T01:50:07Z"
      },
      "message": "[net processing] Synchronize cfilter request handling with block filter index.\n\nSince the block filter index is updated asynchronously by proxy of the\nValidationInterface queue, lazily synchronize the net thread with the\nblock filter index in case lookups fail.",
      "tree": {
        "sha": "c55057d02b5050b1bccb6fafd061815615ed7fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c55057d02b5050b1bccb6fafd061815615ed7fa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5488ce98cf2d562964a7a74377bdd74d7b258483",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5488ce98cf2d562964a7a74377bdd74d7b258483",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5488ce98cf2d562964a7a74377bdd74d7b258483",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5488ce98cf2d562964a7a74377bdd74d7b258483/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f40bbb0d40b04eb7de4f6432e218e69bf618c7"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f3573cf9d5c54392a62618958094e0210ce6a455",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=5488ce98cf2d562964a7a74377bdd74d7b258483",
        "patch": "@@ -84,13 +84,13 @@ class BaseIndex : public CValidationInterface\n \n     virtual DB& GetDB() const = 0;\n \n-    /// Get the name of the index for display in logs.\n-    virtual const char* GetName() const = 0;\n-\n public:\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n \n+    /// Get the name of the index for display in logs.\n+    virtual const char* GetName() const = 0;\n+\n     /// Returns whether index has completed the initial sync with the active chain.\n     /// After returning true once, this function will return true on all subsequent calls.\n     bool IsSynced() const { return m_synced; }"
      },
      {
        "sha": "3913e0c11b1a13c34aff3903b42f41b4084da975",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=5488ce98cf2d562964a7a74377bdd74d7b258483",
        "patch": "@@ -47,13 +47,13 @@ class BlockFilterIndex final : public BaseIndex\n \n     BaseIndex::DB& GetDB() const override { return *m_db; }\n \n-    const char* GetName() const override { return m_name.c_str(); }\n-\n public:\n     /** Constructs the index, which becomes available to be queried. */\n     explicit BlockFilterIndex(BlockFilterType filter_type,\n                               size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n+    const char* GetName() const override { return m_name.c_str(); }\n+\n     BlockFilterType GetFilterType() const { return m_filter_type; }\n \n     /** Get a single filter by block. */"
      },
      {
        "sha": "4f1b4e8e2b61126224306ee07065b24ee5f4946e",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5488ce98cf2d562964a7a74377bdd74d7b258483/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=5488ce98cf2d562964a7a74377bdd74d7b258483",
        "patch": "@@ -30,15 +30,15 @@ class TxIndex final : public BaseIndex\n \n     BaseIndex::DB& GetDB() const override;\n \n-    const char* GetName() const override { return \"txindex\"; }\n-\n public:\n     /// Constructs the index, which becomes available to be queried.\n     explicit TxIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n     virtual ~TxIndex() override;\n \n+    const char* GetName() const override { return \"txindex\"; }\n+\n     /// Look up a transaction by hash.\n     ///\n     /// @param[in]   tx_hash  The hash of the transaction to be returned."
      },
      {
        "sha": "db24d4ad45ee097bc07850b96e777e1abbaaac64",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5488ce98cf2d562964a7a74377bdd74d7b258483/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5488ce98cf2d562964a7a74377bdd74d7b258483/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5488ce98cf2d562964a7a74377bdd74d7b258483",
        "patch": "@@ -2035,6 +2035,10 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n         return false;\n     }\n+    if (!filter_index->BlockUntilSyncedToCurrentChain()) {\n+        LogPrint(BCLog::NET, \"%s is not ready yet\\n\", filter_index->GetName());\n+        return false;\n+    }\n \n     return true;\n }"
      }
    ]
  }
]