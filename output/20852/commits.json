[
  {
    "sha": "94d335da7f8232bc653c9b08b0a33b517b4c98ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGQzMzVkYTdmODIzMmJjNjUzYzliMDhiMGEzM2I1MTdiNGM5OGFk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-04T17:37:52Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-10T14:51:15Z"
      },
      "message": "net: allow CSubNet of non-IP networks\n\nAllow creation of valid `CSubNet` objects of non-IP networks and only\nmatch the single address they were created from (like /32 for IPv4 or\n/128 for IPv6).\n\nThis fixes a deficiency in `CConnman::DisconnectNode(const CNetAddr& addr)`\nand in `BanMan` which assume that creating a subnet from any address\nusing the `CSubNet(CNetAddr)` constructor would later match that address\nonly. Before this change a non-IP subnet would be invalid and would not\nmatch any address.",
      "tree": {
        "sha": "6a41720c136a83ad30c1a8dadde611629cb3f1d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a41720c136a83ad30c1a8dadde611629cb3f1d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d335da7f8232bc653c9b08b0a33b517b4c98ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/7FGQACgkQVN8G9ktV\ny79Lhh/+Peg1KEtX/hcql8gqQ9rqNLWpho2glRg+2Pt3ne88BNbTitJ+iNr+632/\nRG8ac2lkoMjjV/EkZSQBoqm9hsd4DVaRW+DiZ4Ptm1dKpyBlWs4sKLOy2qUTmNg+\nvCQC1OV7q1P4GntgBjsg3VwLWmRxhCXstIQsatEd4E/J58Qrnqw76bnqk/hrFKRH\nt67d3ZdvvJUOamwAKtY1V3qZEHtm20IICsHq2VaE0wpa7GV/e2HU2HDezTLMLv77\nEyr7FTj9FefMwU50I7zu7IMAgrIi3y0iw4SwDVB4xuDgXR97laUBemaeH/M8hsXf\n4+ZgoXtyHqoGukyLQ6Q84fqCFHyXIhCNN8N7BYu4YviCRShz+I9N4e2cBbegHxS4\nMew/FFWmE7FcHEXxl9WU3So8xiOTdnvw7NAcMQIGIMrKEn7OZSoNe2p4NsXGdpUT\n56kLuKlDrlOwRUnUD+jOa2S2eVOhdH6QcHcJf3tb7NjS9PD2q9S7YEy+B9AVKA/x\n186uxm6/tNy8fivMOhKu6/U8ayGVG+XxtQEyogEl7dsNGt+ZAsTnrRABiCB4JhHi\ns2uyCcPbqtCu+4YlGYInVW9i+cjsr16qfX+6juY3exPpgQuJ3H1IzlaSzzojf9hV\n6Y4DDGBXEibUIS9qHS8ccwCD/3FYE1vjhzVvbmPH5HxbIF/TfrIfgNhK6lW+UN96\navtqGTmvzguOY3juYV+b64TpQ8omnhot2n/++Cd1hDDgDq9V1lIHhyJ2v9UtXsJr\nBZajI4RSeddR4xTAaG5Cvg/tWwwZqAC2ip45cXbG8jtuprDfmhg0O68qYoglkbhD\nZwLH5KHEyoZ6MkqdR/GGF/xRoe7/78qV0D18rdX7PpZycDz2T1t0l9T5cytOQaIs\n0wbvlHGcxpMx4nkA6Bk0Z5RCSj90WUgE7nfC3YF6L/UhdlOy21KvaGjz7XZLyvSo\nExJEiuhAZ8pTjhlgehTPaUbIn8peuSF0BUZrKFheIi8mKCvTiTOHgaX/I+Lwp1pv\nLsHaOfAqobuCqESAA9ILM4hcKinqgV40P8Lqv/9LpVpOtNHeDq3f/E44LsUmY/Yr\nbVh9eI5+1aiSF25pQmTvypXk0orJcS/hfjBlhblci/Sto0BHTs9ADh3qY1S7rwbD\nHEPWfLykgtx2JjBhB0jDtIBNx1P62YUJ4ozuFDRRZMNYhWsH9//S2Y//YRK3S01K\nWryNfFg7iBeBmWoZcnshke2Xl7yafxL1Flfu8ueB9chxhtxVJvWjh6DaVrlgX4wb\nqMKkhGqEKqnFHYsa0gztt9wRadg0N/1FXu7HLp80nRzXue3TF7tVlMCiXBUSfOmc\nZFqeTtBss2RLVLH7cqbqG6qz0UwlZg==\n=tOyr\n-----END PGP SIGNATURE-----",
        "payload": "tree 6a41720c136a83ad30c1a8dadde611629cb3f1d0\nparent bc8ada1c15345d14e324aee68488c8aa8a75cae0\nauthor Vasil Dimov <vd@FreeBSD.org> 1609781872 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610290275 +0100\n\nnet: allow CSubNet of non-IP networks\n\nAllow creation of valid `CSubNet` objects of non-IP networks and only\nmatch the single address they were created from (like /32 for IPv4 or\n/128 for IPv6).\n\nThis fixes a deficiency in `CConnman::DisconnectNode(const CNetAddr& addr)`\nand in `BanMan` which assume that creating a subnet from any address\nusing the `CSubNet(CNetAddr)` constructor would later match that address\nonly. Before this change a non-IP subnet would be invalid and would not\nmatch any address.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d335da7f8232bc653c9b08b0a33b517b4c98ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94d335da7f8232bc653c9b08b0a33b517b4c98ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d335da7f8232bc653c9b08b0a33b517b4c98ad/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8ada1c15345d14e324aee68488c8aa8a75cae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8ada1c15345d14e324aee68488c8aa8a75cae0"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 107,
      "deletions": 19
    },
    "files": [
      {
        "sha": "85e46fd373ef215318324e54b99db4958d2c486a",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 14,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=94d335da7f8232bc653c9b08b0a33b517b4c98ad",
        "patch": "@@ -1068,15 +1068,24 @@ CSubNet::CSubNet(const CNetAddr& addr, const CNetAddr& mask) : CSubNet()\n \n CSubNet::CSubNet(const CNetAddr& addr) : CSubNet()\n {\n-    valid = addr.IsIPv4() || addr.IsIPv6();\n-    if (!valid) {\n+    switch (addr.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        valid = true;\n+        assert(addr.m_addr.size() <= sizeof(netmask));\n+        memset(netmask, 0xFF, addr.m_addr.size());\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+        valid = true;\n+        break;\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n         return;\n     }\n \n-    assert(addr.m_addr.size() <= sizeof(netmask));\n-\n-    memset(netmask, 0xFF, addr.m_addr.size());\n-\n     network = addr;\n }\n \n@@ -1088,6 +1097,21 @@ bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid() || network.m_net != addr.m_net)\n         return false;\n+\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+    case NET_INTERNAL:\n+        return addr == network;\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        return false;\n+    }\n+\n     assert(network.m_addr.size() == addr.m_addr.size());\n     for (size_t x = 0; x < addr.m_addr.size(); ++x) {\n         if ((addr.m_addr[x] & netmask[x]) != network.m_addr[x]) {\n@@ -1099,18 +1123,35 @@ bool CSubNet::Match(const CNetAddr &addr) const\n \n std::string CSubNet::ToString() const\n {\n-    assert(network.m_addr.size() <= sizeof(netmask));\n+    std::string suffix;\n \n-    uint8_t cidr = 0;\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6: {\n+        assert(network.m_addr.size() <= sizeof(netmask));\n \n-    for (size_t i = 0; i < network.m_addr.size(); ++i) {\n-        if (netmask[i] == 0x00) {\n-            break;\n+        uint8_t cidr = 0;\n+\n+        for (size_t i = 0; i < network.m_addr.size(); ++i) {\n+            if (netmask[i] == 0x00) {\n+                break;\n+            }\n+            cidr += NetmaskBits(netmask[i]);\n         }\n-        cidr += NetmaskBits(netmask[i]);\n+\n+        suffix = strprintf(\"/%u\", cidr);\n+        break;\n+    }\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        break;\n     }\n \n-    return network.ToString() + strprintf(\"/%u\", cidr);\n+    return network.ToString() + suffix;\n }\n \n bool CSubNet::IsValid() const\n@@ -1120,7 +1161,19 @@ bool CSubNet::IsValid() const\n \n bool CSubNet::SanityCheck() const\n {\n-    if (!(network.IsIPv4() || network.IsIPv6())) return false;\n+    switch (network.m_net) {\n+    case NET_IPV4:\n+    case NET_IPV6:\n+        break;\n+    case NET_ONION:\n+    case NET_I2P:\n+    case NET_CJDNS:\n+        return true;\n+    case NET_INTERNAL:\n+    case NET_UNROUTABLE:\n+    case NET_MAX:\n+        return false;\n+    }\n \n     for (size_t x = 0; x < network.m_addr.size(); ++x) {\n         if (network.m_addr[x] & ~netmask[x]) return false;"
      },
      {
        "sha": "b9beb1e3585d41f82ff034a1e10b8e851815f3ab",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=94d335da7f8232bc653c9b08b0a33b517b4c98ad",
        "patch": "@@ -462,11 +462,33 @@ class CSubNet\n         bool SanityCheck() const;\n \n     public:\n+        /**\n+         * Construct an invalid subnet (empty, `Match()` always returns false).\n+         */\n         CSubNet();\n+\n+        /**\n+         * Construct from a given network start and number of bits (CIDR mask).\n+         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n+         * created.\n+         * @param[in] mask CIDR mask, must be in [0, 32] for IPv4 addresses and in [0, 128] for\n+         * IPv6 addresses. Otherwise an invalid subnet is created.\n+         */\n         CSubNet(const CNetAddr& addr, uint8_t mask);\n+\n+        /**\n+         * Construct from a given network start and mask.\n+         * @param[in] addr Network start. Must be IPv4 or IPv6, otherwise an invalid subnet is\n+         * created.\n+         * @param[in] mask Network mask, must be of the same type as `addr` and not contain 0-bits\n+         * followed by 1-bits. Otherwise an invalid subnet is created.\n+         */\n         CSubNet(const CNetAddr& addr, const CNetAddr& mask);\n \n-        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n+        /**\n+         * Construct a single-host subnet.\n+         * @param[in] addr The sole address to be contained in the subnet, can also be non-IPv[46].\n+         */\n         explicit CSubNet(const CNetAddr& addr);\n \n         bool Match(const CNetAddr &addr) const;"
      },
      {
        "sha": "66ad7bb5eaece7ed927d3ac00cef88706e074b15",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d335da7f8232bc653c9b08b0a33b517b4c98ad/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=94d335da7f8232bc653c9b08b0a33b517b4c98ad",
        "patch": "@@ -226,8 +226,22 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     // IPv4 address with IPv6 netmask or the other way around.\n     BOOST_CHECK(!CSubNet(ResolveIP(\"1.1.1.1\"), ResolveIP(\"ffff::\")).IsValid());\n     BOOST_CHECK(!CSubNet(ResolveIP(\"::1\"), ResolveIP(\"255.0.0.0\")).IsValid());\n-    // Can't subnet TOR (or any other non-IPv4 and non-IPv6 network).\n-    BOOST_CHECK(!CSubNet(ResolveIP(\"5wyqrzbvrdsumnok.onion\"), ResolveIP(\"255.0.0.0\")).IsValid());\n+\n+    // Create Non-IP subnets.\n+\n+    const CNetAddr tor_addr{\n+        ResolveIP(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\")};\n+\n+    subnet = CSubNet(tor_addr);\n+    BOOST_CHECK(subnet.IsValid());\n+    BOOST_CHECK_EQUAL(subnet.ToString(), tor_addr.ToString());\n+    BOOST_CHECK(subnet.Match(tor_addr));\n+    BOOST_CHECK(\n+        !subnet.Match(ResolveIP(\"kpgvmscirrdqpekbqjsvw5teanhatztpp2gl6eee4zkowvwfxwenqaid.onion\")));\n+    BOOST_CHECK(!subnet.Match(ResolveIP(\"1.2.3.4\")));\n+\n+    BOOST_CHECK(!CSubNet(tor_addr, 200).IsValid());\n+    BOOST_CHECK(!CSubNet(tor_addr, ResolveIP(\"255.0.0.0\")).IsValid());\n \n     subnet = ResolveSubNet(\"1.2.3.4/255.255.255.255\");\n     BOOST_CHECK_EQUAL(subnet.ToString(), \"1.2.3.4/32\");\n@@ -442,8 +456,7 @@ BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\\0\"s, ret));\n-    // We only do subnetting for IPv4 and IPv6\n-    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\"s, ret));\n+    BOOST_CHECK(LookupSubNet(\"5wyqrzbvrdsumnok.onion\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\"s, ret));\n     BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\"s, ret));"
      }
    ]
  },
  {
    "sha": "39b43298d9c54f9c18bef36f3d5934f57aefd088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWI0MzI5OGQ5YzU0ZjljMThiZWYzNmYzZDU5MzRmNTdhZWZkMDg4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-10T14:51:25Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-10T14:51:25Z"
      },
      "message": "test: add test for banning of non-IP addresses\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "e57a23e1ce6d00f6dcf3dffd0f6b1221ab0d1133",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e57a23e1ce6d00f6dcf3dffd0f6b1221ab0d1133"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39b43298d9c54f9c18bef36f3d5934f57aefd088",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl/7FMkACgkQVN8G9ktV\ny7/z7x/8Coc1o7c/ub4oMBhF1ds50Rx5wrrFikhH2oBhQf0d46nlnPb1djCMI+ea\n8sP21FYmXUwowZJrBRqv9RFZb9/kpMCM60bNpyeishMWAW39S5K/qEjDnDThVlVU\ndi3q+/RGVIlFSEG73jMH1tbvpz9iZNz8bpLqYsRhDrhFVl+0dYbjnTmcj1HnnSNN\nnwlKL/55wgdQEDPvNLTvz84GVKboZGUYP8Ht936/rzMi73xm1UicpdjKpD/VWdA2\nsumH2lOxuBeT8E49MAcrtblRPcGKo91JWNvndS/zSw05bpJmp2QpBm0AAvsz29T/\nM/Inzzx3nYimu1JKEWx2PmXsQ4m++pBiXdvAKMtzONN+ox9OC574/VcvRwg+eAwL\nl7SAWT2rUdbz5Y6Xf3i76g32GbqzPX6uBmQ/mOk/7ggAmJRmdpb92Rib2/p47osx\nKQpO4vUnnj/AptRicRVOgZ+SNvjYqYDNqjDdwq4mBJgCz8jBDJDV5nWd/Y2vLzj/\nz5LX0rav68cyQLIEgCOC53wzQQOZObEBW+rHCSH2iNJaEeZIj8butnaYNPpMv5/D\npW5XJ1IiZHgGpFE8bqFWv9GrQ8G+BXEN5KGQEdh1mfMWse5ayZYt7ILL5KhZ/Zy4\nsKV/J3tfm81ole6kQlCPZN9I7FsZ8w5Rc7TRO/tVUAsNHy3uuZmdscmMaebxE+io\nnjQGFaqXXY7RY5cRFhKV7dKYl7YceePxbGDQKKPEmc6Kfp/fS2bL5qsDxfPEiiHT\nc0RfJxXoNIJIO6b9EGxkdyIXvVCdsg0GRAnZkb89TkJ0DPozb9EAk0oeMNJ4lEjY\nbxuWU393L/zzDh9SN/n0e9fViV40q28jXlCuF0zfw4gP+kp+pBYCRtkP3YX711C/\nxEn89nL+aywTAWWhDx56h5CIqNn6PmuzQOWmkr2I0sdSlhGPh9juSWGe16uEZA2T\n6fYwgBF4P+ArWEKQTIFQhIdaihUsNrmprUSUcjQf89pUQx+B1l9BZhluGoo5I1zG\nTI1wbJ4ki1gbbAZlyBYN1IIB+xbFclzgKKC1xJaFLJ/rAfTa8CnfQuDQSQENbpJn\nH9v5+1ac8CuYwb04tLE3jgQuxRj1jIV5NWwNrQthMMsvwIib2vonPL8ZLBrZmdyi\niayvjZtwm0QoszyV4r317bQVkPCztNsRseg/KKve+/qdN30I+Y+HppWIOrhW2GK9\ndpFnvpMrgPaIV6MEkfkn1LAgmLUTal4ijAN1mRUWKQf6w9Hs7O2C64AWx9rHhpzm\nZMlIZjUxYgWcRWeDjZImUEvoYAxV/s8/Giz9AN4fJw/O0O1DHWbdGvT7HVn+VdXJ\niR6qHveW7msOhFbg+mAka+YgYQ0EfA==\n=wTui\n-----END PGP SIGNATURE-----",
        "payload": "tree e57a23e1ce6d00f6dcf3dffd0f6b1221ab0d1133\nparent 94d335da7f8232bc653c9b08b0a33b517b4c98ad\nauthor Vasil Dimov <vd@FreeBSD.org> 1610290285 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1610290285 +0100\n\ntest: add test for banning of non-IP addresses\n\nCo-authored-by: Jon Atack <jon@atack.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39b43298d9c54f9c18bef36f3d5934f57aefd088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39b43298d9c54f9c18bef36f3d5934f57aefd088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39b43298d9c54f9c18bef36f3d5934f57aefd088/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94d335da7f8232bc653c9b08b0a33b517b4c98ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d335da7f8232bc653c9b08b0a33b517b4c98ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94d335da7f8232bc653c9b08b0a33b517b4c98ad"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd5f8aa0983e033716d19b608d5d3207cd25acb7",
        "filename": "test/functional/rpc_setban.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39b43298d9c54f9c18bef36f3d5934f57aefd088/test/functional/rpc_setban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39b43298d9c54f9c18bef36f3d5934f57aefd088/test/functional/rpc_setban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_setban.py?ref=39b43298d9c54f9c18bef36f3d5934f57aefd088",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[],[]]\n \n+    def is_banned(self, node, addr):\n+        return any(e['address'] == addr for e in node.listbanned())\n+\n     def run_test(self):\n         # Node 0 connects to Node 1, check that the noban permission is not granted\n         self.connect_nodes(0, 1)\n@@ -42,5 +45,18 @@ def run_test(self):\n         peerinfo = self.nodes[1].getpeerinfo()[0]\n         assert(not 'noban' in peerinfo['permissions'])\n \n+        self.log.info(\"Test that a non-IP address can be banned/unbanned\")\n+        node = self.nodes[1]\n+        tor_addr = \"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion\"\n+        ip_addr = \"1.2.3.4\"\n+        assert(not self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+        node.setban(tor_addr, \"add\")\n+        assert(self.is_banned(node, tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+        node.setban(tor_addr, \"remove\")\n+        assert(not self.is_banned(self.nodes[1], tor_addr))\n+        assert(not self.is_banned(node, ip_addr))\n+\n if __name__ == '__main__':\n     SetBanTests().main()"
      }
    ]
  }
]