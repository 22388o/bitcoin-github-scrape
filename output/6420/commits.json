[
  {
    "sha": "c1546e530b90a86e982803fc52f7f79ce77c764d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTU0NmU1MzBiOTBhODZlOTgyODAzZmM1MmY3Zjc5Y2U3N2M3NjRk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-11T11:10:51Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-11T12:19:45Z"
      },
      "message": "Policy: Use CValidationState in policy functions",
      "tree": {
        "sha": "a00b5c9f259416b4e258db5ef30d3e261d9e6300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a00b5c9f259416b4e258db5ef30d3e261d9e6300"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1546e530b90a86e982803fc52f7f79ce77c764d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1546e530b90a86e982803fc52f7f79ce77c764d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1546e530b90a86e982803fc52f7f79ce77c764d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1546e530b90a86e982803fc52f7f79ce77c764d/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "943b322d5d292707e193f3a9d8e971881540be23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943b322d5d292707e193f3a9d8e971881540be23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/943b322d5d292707e193f3a9d8e971881540be23"
      }
    ],
    "stats": {
      "total": 162,
      "additions": 79,
      "deletions": 83
    },
    "files": [
      {
        "sha": "7ccd4463d6cef630f8941a6e5025f822be842827",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -764,11 +764,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+    if (fRequireStandard && !IsStandardTx(tx, state)) {\n+        LogPrintf(\"Rejected by local policy: %s: IsStandardTx: %s\", __func__, state.GetRejectReason());\n+        return false;\n+    }\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n@@ -836,8 +835,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+        if (fRequireStandard && !AreInputsStandard(tx, state, view)) {\n+            LogPrintf(\"Rejected by local policy: %s: AreInputsStandard: %s\", __func__, state.GetRejectReason());\n+            return false;\n+        }\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction"
      },
      {
        "sha": "15d21a7ea9e35a8e192f056fc5478381586a447f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 45,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -34,42 +34,38 @@\n      *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n      */\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+bool IsStandard(const CScript& scriptPubKey, CValidationState& state, txnouttype& whichType)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    if (!Solver(scriptPubKey, whichType, vSolutions) || whichType == TX_NONSTANDARD)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptpubkey-unkown-pattern\");\n \n     if (whichType == TX_MULTISIG)\n     {\n         unsigned char m = vSolutions.front()[0];\n         unsigned char n = vSolutions.back()[0];\n         // Support up to x-of-3 multisig txns as standard\n         if (n < 1 || n > 3)\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptpubkey-multisig-n-outofrange\");\n         if (m < 1 || m > n)\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptpubkey-multisig-m-outofrange\");\n     }\n \n-    return whichType != TX_NONSTANDARD;\n+    return true;\n }\n \n-bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+bool IsStandardTx(const CTransaction& tx, CValidationState& state)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"version\");\n \n     // Extremely large transactions with lots of inputs can cost the network\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n     unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n+    if (sz >= MAX_STANDARD_TX_SIZE)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size\");\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n@@ -80,45 +76,35 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n         // future-proofing. That's also enough to spend a 20-of-20\n         // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n         // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n+        if (txin.scriptSig.size() > 1650)\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-size\");\n+\n+        if (!txin.scriptSig.IsPushOnly())\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"scriptsig-not-pushonly\");\n     }\n \n     unsigned int nDataOut = 0;\n     txnouttype whichType;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n+        if (!IsStandard(txout.scriptPubKey, state, whichType))\n             return false;\n-        }\n \n         if (whichType == TX_NULL_DATA)\n             nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bare-multisig\");\n+        else if (txout.IsDust(::minRelayTxFee))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"dust\");\n     }\n \n     // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n+    if (nDataOut > 1)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"multi-op-return\");\n \n     return true;\n }\n \n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+bool AreInputsStandard(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& mapInputs)\n {\n     if (tx.IsCoinBase())\n         return true; // Coinbases don't use vin normally\n@@ -132,10 +118,10 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // get the scriptPubKey corresponding to this input:\n         const CScript& prevScript = prev.scriptPubKey;\n         if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-prev-scriptpubkey-unkown-pattern\");\n         int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n         if (nArgsExpected < 0)\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-prev-scriptpubkey-no-args-expected\");\n \n         // Transactions with extra stuff in their scriptSigs are\n         // non-standard. Note that this EvalScript() call will\n@@ -145,33 +131,36 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // and this method isn't called.\n         std::vector<std::vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-scriptsig-eval-fail\");\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n             if (stack.empty())\n-                return false;\n+                return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-scriptsig-p2sh-invalid\");\n             CScript subscript(stack.back().begin(), stack.back().end());\n             std::vector<std::vector<unsigned char> > vSolutions2;\n             txnouttype whichType2;\n             if (Solver(subscript, whichType2, vSolutions2))\n             {\n                 int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n                 if (tmpExpected < 0)\n-                    return false;\n+                    return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-scriptsig-p2sh-invalid\");\n                 nArgsExpected += tmpExpected;\n             }\n             else\n             {\n                 // Any other Script with less than 15 sigops OK:\n                 unsigned int sigops = subscript.GetSigOpCount(true);\n                 // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n+                if (sigops > MAX_P2SH_SIGOPS)\n+                    return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-scriptsig-p2sh-toolong\");\n+                else \n+                    return true;\n             }\n         }\n \n         if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"txinputs-scriptsig-non-empty-stack\");\n     }\n \n     return true;"
      },
      {
        "sha": "67271142cac3de1f86fc749c38cffba3b22d7789",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_POLICY_H\n \n #include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n@@ -42,17 +43,17 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+bool IsStandard(const CScript& scriptPubKey, CValidationState& state, txnouttype& whichType);\n     /**\n      * Check for standard transaction types\n      * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n      */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+bool IsStandardTx(const CTransaction& tx, CValidationState& state);\n     /**\n      * Check for standard transaction types\n      * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+bool AreInputsStandard(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& mapInputs);\n \n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "b07065d03e5b94a66ca624a76c263d5c4f1dc7e9",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"policy/policy.h\"\n@@ -147,23 +148,24 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n \n+    CValidationState state;\n     txnouttype whichType;\n \n     CScript a_and_b;\n     a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_and_b, whichType));\n+    BOOST_CHECK(::IsStandard(a_and_b, state, whichType));\n \n     CScript a_or_b;\n     a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(a_or_b, whichType));\n+    BOOST_CHECK(::IsStandard(a_or_b, state, whichType));\n \n     CScript escrow;\n     escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(::IsStandard(escrow, whichType));\n+    BOOST_CHECK(::IsStandard(escrow, state, whichType));\n \n     CScript one_of_four;\n     one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n-    BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n+    BOOST_CHECK(!::IsStandard(one_of_four, state, whichType));\n \n     CScript malformed[6];\n     malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n@@ -174,7 +176,7 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n-        BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n+        BOOST_CHECK(!::IsStandard(malformed[i], state, whichType));\n }\n \n BOOST_AUTO_TEST_CASE(multisig_Solver1)"
      },
      {
        "sha": "785cdbe8d1347beefbcb89475a48982dbed3884d",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n@@ -82,7 +83,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(8);\n     for (int i = 0; i < 4; i++)\n     {\n@@ -91,7 +92,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n         txFrom.vout[i+4].nValue = COIN;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(IsStandardTx(txFrom, state));\n \n     CMutableTransaction txTo[8]; // Spending transactions\n     for (int i = 0; i < 8; i++)\n@@ -180,14 +181,14 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n-    string reason;\n+    CValidationState state;\n     txFrom.vout.resize(4);\n     for (int i = 0; i < 4; i++)\n     {\n         txFrom.vout[i].scriptPubKey = outer[i];\n         txFrom.vout[i].nValue = CENT;\n     }\n-    BOOST_CHECK(IsStandardTx(txFrom, reason));\n+    BOOST_CHECK(IsStandardTx(txFrom, state));\n \n     CMutableTransaction txTo[4]; // Spending transactions\n     for (int i = 0; i < 4; i++)\n@@ -205,7 +206,7 @@ BOOST_AUTO_TEST_CASE(set)\n     for (int i = 0; i < 4; i++)\n     {\n         BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n-        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], reason), strprintf(\"txTo[%d].IsStandard\", i));\n+        BOOST_CHECK_MESSAGE(IsStandardTx(txTo[i], state), strprintf(\"txTo[%d].IsStandard\", i));\n     }\n }\n \n@@ -263,6 +264,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n     LOCK(cs_main);\n+    CValidationState state;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n@@ -342,7 +344,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txTo.vin[3].scriptSig << OP_11 << OP_11 << static_cast<vector<unsigned char> >(oneAndTwo);\n     txTo.vin[4].scriptSig << static_cast<vector<unsigned char> >(fifteenSigops);\n \n-    BOOST_CHECK(::AreInputsStandard(txTo, coins));\n+    BOOST_CHECK(::AreInputsStandard(txTo, state, coins));\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n@@ -351,7 +353,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n         txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n+        BOOST_CHECK(!::AreInputsStandard(txTo, state, coins));\n         txTo.vin[i].scriptSig = t;\n     }\n \n@@ -364,7 +366,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd1.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd1.vin[0].scriptSig << static_cast<vector<unsigned char> >(sixteenSigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, coins));\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd1, state, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd1, coins), 16U);\n \n     CMutableTransaction txToNonStd2;\n@@ -376,7 +378,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd2.vin[0].prevout.hash = txFrom.GetHash();\n     txToNonStd2.vin[0].scriptSig << static_cast<vector<unsigned char> >(twentySigops);\n \n-    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, coins));\n+    BOOST_CHECK(!::AreInputsStandard(txToNonStd2, state, coins));\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txToNonStd2, coins), 20U);\n }\n "
      },
      {
        "sha": "0d4f88c840e49513b2c6ed59bc487e4a2f40e0f5",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1546e530b90a86e982803fc52f7f79ce77c764d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c1546e530b90a86e982803fc52f7f79ce77c764d",
        "patch": "@@ -287,6 +287,7 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n BOOST_AUTO_TEST_CASE(test_Get)\n {\n+    CValidationState state;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -307,16 +308,16 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n-    BOOST_CHECK(AreInputsStandard(t1, coins));\n+    BOOST_CHECK(AreInputsStandard(t1, state, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n \n     // Adding extra junk to the scriptSig should make it non-standard:\n     t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!AreInputsStandard(t1, state, coins));\n \n     // ... as should not having enough:\n     t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n+    BOOST_CHECK(!AreInputsStandard(t1, state, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)\n@@ -338,44 +339,44 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     key.MakeNewKey(true);\n     t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n-    string reason;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    CValidationState state;\n+    BOOST_CHECK(IsStandardTx(t, state));\n \n     t.vout[0].nValue = 501; // dust\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n \n     t.vout[0].nValue = 601; // not dust\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(IsStandardTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n \n     // 80-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(IsStandardTx(t, state));\n \n     // 81-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n \n     // TX_NULL_DATA w/o PUSHDATA\n     t.vout.resize(1);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(IsStandardTx(t, reason));\n+    BOOST_CHECK(IsStandardTx(t, state));\n \n     // Only one TX_NULL_DATA permitted in all cases\n     t.vout.resize(2);\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n \n     t.vout[0].scriptPubKey = CScript() << OP_RETURN;\n     t.vout[1].scriptPubKey = CScript() << OP_RETURN;\n-    BOOST_CHECK(!IsStandardTx(t, reason));\n+    BOOST_CHECK(!IsStandardTx(t, state));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]