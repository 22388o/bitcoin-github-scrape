[
  {
    "sha": "627b9deff4e8e18fc6d001b6eb9818c13c648820",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjdiOWRlZmY0ZThlMThmYzZkMDAxYjZlYjk4MThjMTNjNjQ4ODIw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-24T05:25:30Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-26T15:59:07Z"
      },
      "message": "Policy: MOVEONLY: Create policy/policy.h with some constants",
      "tree": {
        "sha": "e8e3f715765fe9d1136814c587038d68ecc5a45c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8e3f715765fe9d1136814c587038d68ecc5a45c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/627b9deff4e8e18fc6d001b6eb9818c13c648820",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627b9deff4e8e18fc6d001b6eb9818c13c648820",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/627b9deff4e8e18fc6d001b6eb9818c13c648820",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627b9deff4e8e18fc6d001b6eb9818c13c648820/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f24896d602bef3323c5ff66bbccc92448e89d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f24896d602bef3323c5ff66bbccc92448e89d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f24896d602bef3323c5ff66bbccc92448e89d5"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 52,
      "deletions": 30
    },
    "files": [
      {
        "sha": "5515b2f181d10ee5bbce18b620c9578af61be4e2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -111,6 +111,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n+  policy/policy.h \\\n   pow.h \\\n   primitives/block.h \\\n   primitives/transaction.h \\"
      },
      {
        "sha": "9ad57d5c6f3652efdc3c38629ebf5be90ad35b84",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -8,6 +8,7 @@\n #include \"consensus/consensus.h\"\n #include \"core_io.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "9478b8b55f53b962619c1c9db69cb746ee6aba88",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -18,6 +18,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\"\n #include \"scheduler.h\""
      },
      {
        "sha": "05130f3089aaaca478f48b1fcff19200df867f4c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -11,10 +11,12 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\""
      },
      {
        "sha": "85a144642860d6af923b3b2f8adc0caf10bcf68d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -14,7 +14,6 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"net.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -47,19 +46,8 @@ class CValidationState;\n \n struct CNodeStateStats;\n \n-/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n-static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n-/** Maximum number of signature check operations in an IsStandard() P2SH script */\n-static const unsigned int MAX_P2SH_SIGOPS = 15;\n-/** The maximum number of sigops we're willing to relay/mine in a single tx */\n-static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "fb859ca2b9ef3f4f144af470cf752b6e2b14dc73",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -12,6 +12,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "48e192d559c0d942005a55a5507607e459f6e696",
        "filename": "src/policy/policy.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+#include \"consensus/consensus.h\"\n+#include \"script/interpreter.h\"\n+#include \"script/standard.h\"\n+\n+/** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n+static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+/** The maximum size for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n+/** Maximum number of signature check operations in an IsStandard() P2SH script */\n+static const unsigned int MAX_P2SH_SIGOPS = 15;\n+/** The maximum number of sigops we're willing to relay/mine in a single tx */\n+static const unsigned int MAX_STANDARD_TX_SIGOPS = MAX_BLOCK_SIGOPS/5;\n+/**\n+ * Standard script verification flags that standard transactions will comply\n+ * with. However scripts violating these flags may still be present in valid\n+ * blocks and we must accept those blocks.\n+ */\n+static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+                                                         SCRIPT_VERIFY_DERSIG |\n+                                                         SCRIPT_VERIFY_STRICTENC |\n+                                                         SCRIPT_VERIFY_MINIMALDATA |\n+                                                         SCRIPT_VERIFY_NULLDUMMY |\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n+                                                         SCRIPT_VERIFY_CLEANSTACK |\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+\n+/** For convenience, standard but not mandatory verify flags. */\n+static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+\n+#endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "7d1db0b60eae95538b2ef5d73b239daa58bb097b",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "8b43183b6dd5027b247c10f9005edc5006eb5b5a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -5,9 +5,10 @@\n \n #include \"script/sign.h\"\n \n-#include \"primitives/transaction.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "c4ad17dd8fcf902946f033052fd7731afb348526",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -39,23 +39,6 @@ extern unsigned nMaxDatacarrierBytes;\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;\n \n-/**\n- * Standard script verification flags that standard transactions will comply\n- * with. However scripts violating these flags may still be present in valid\n- * blocks and we must accept those blocks.\n- */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n-                                                         SCRIPT_VERIFY_DERSIG |\n-                                                         SCRIPT_VERIFY_STRICTENC |\n-                                                         SCRIPT_VERIFY_MINIMALDATA |\n-                                                         SCRIPT_VERIFY_NULLDUMMY |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n-                                                         SCRIPT_VERIFY_CLEANSTACK |\n-                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n-\n-/** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n-\n enum txnouttype\n {\n     TX_NONSTANDARD,"
      },
      {
        "sha": "16c9a4a868e9af296279afaa1625f596af5072f4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "46037ef66824f772c2b6e9a7a266f171dec1811b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627b9deff4e8e18fc6d001b6eb9818c13c648820/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\""
      }
    ]
  },
  {
    "sha": "9238ecb41752e097443d0bc117df35ebd4ac932e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjM4ZWNiNDE3NTJlMDk3NDQzZDBiYzExN2RmMzVlYmQ0YWM5MzJl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-11T22:41:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-26T15:59:10Z"
      },
      "message": "Policy: MOVEONLY: 3 functions to policy.o:\n\n- [script/standard.o] IsStandard\n- [main.o] IsStandardTx\n- [main.o] AreInputsStandard\n\nAlso, don't use namespace std in policy.cpp",
      "tree": {
        "sha": "31c253bebd26069a8917cb1c993f72d4bb604538",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c253bebd26069a8917cb1c993f72d4bb604538"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9238ecb41752e097443d0bc117df35ebd4ac932e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9238ecb41752e097443d0bc117df35ebd4ac932e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9238ecb41752e097443d0bc117df35ebd4ac932e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9238ecb41752e097443d0bc117df35ebd4ac932e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627b9deff4e8e18fc6d001b6eb9818c13c648820",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/627b9deff4e8e18fc6d001b6eb9818c13c648820"
      }
    ],
    "stats": {
      "total": 382,
      "additions": 198,
      "deletions": 184
    },
    "files": [
      {
        "sha": "b82c6dc37abad125f713b45cdd97be9b1aa19ee6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -177,6 +177,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\\n   rpcblockchain.cpp \\"
      },
      {
        "sha": "f966f68698adfd64587333f546b56338cda826d9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 138,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -606,76 +606,6 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-\n-\n-\n-\n-\n-\n-bool IsStandardTx(const CTransaction& tx, string& reason)\n-{\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n-        reason = \"version\";\n-        return false;\n-    }\n-\n-    // Extremely large transactions with lots of inputs can cost the network\n-    // almost as much to process as they cost the sender in fees, because\n-    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n-    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n-    if (sz >= MAX_STANDARD_TX_SIZE) {\n-        reason = \"tx-size\";\n-        return false;\n-    }\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n-        // keys. (remember the 520 byte limit on redeemScript size) That works\n-        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n-        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n-        // future-proofing. That's also enough to spend a 20-of-20\n-        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n-        // considered standard)\n-        if (txin.scriptSig.size() > 1650) {\n-            reason = \"scriptsig-size\";\n-            return false;\n-        }\n-        if (!txin.scriptSig.IsPushOnly()) {\n-            reason = \"scriptsig-not-pushonly\";\n-            return false;\n-        }\n-    }\n-\n-    unsigned int nDataOut = 0;\n-    txnouttype whichType;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n-        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n-            reason = \"scriptpubkey\";\n-            return false;\n-        }\n-\n-        if (whichType == TX_NULL_DATA)\n-            nDataOut++;\n-        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n-            reason = \"bare-multisig\";\n-            return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n-            reason = \"dust\";\n-            return false;\n-        }\n-    }\n-\n-    // only one OP_RETURN txout is permitted\n-    if (nDataOut > 1) {\n-        reason = \"multi-op-return\";\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     if (tx.nLockTime == 0)\n@@ -694,74 +624,6 @@ bool CheckFinalTx(const CTransaction &tx)\n     return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n-/**\n- * Check transaction inputs to mitigate two\n- * potential denial-of-service attacks:\n- *\n- * 1. scriptSigs with extra data stuffed into them,\n- *    not consumed by scriptPubKey (or P2SH script)\n- * 2. P2SH scripts with a crazy number of expensive\n- *    CHECKSIG/CHECKMULTISIG operations\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n-{\n-    if (tx.IsCoinBase())\n-        return true; // Coinbases don't use vin normally\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n-\n-        vector<vector<unsigned char> > vSolutions;\n-        txnouttype whichType;\n-        // get the scriptPubKey corresponding to this input:\n-        const CScript& prevScript = prev.scriptPubKey;\n-        if (!Solver(prevScript, whichType, vSolutions))\n-            return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n-\n-        if (whichType == TX_SCRIPTHASH)\n-        {\n-            if (stack.empty())\n-                return false;\n-            CScript subscript(stack.back().begin(), stack.back().end());\n-            vector<vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n-            }\n-        }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n-    }\n-\n-    return true;\n-}\n-\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;"
      },
      {
        "sha": "8f72a955a6d77e3759b54d5e2eb977860d8ce5e2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -261,25 +261,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n-/**\n- * Check transaction inputs, and make sure any\n- * pay-to-script-hash transactions are evaluating IsStandard scripts\n- * \n- * Why bother? To avoid denial-of-service attacks; an attacker\n- * can submit a standard HASH... OP_EQUAL transaction,\n- * which will get accepted into blocks. The redemption\n- * script can be anything; an attacker could use a very\n- * expensive-to-check-upon-redemption script like:\n- *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n- */\n-\n-/** \n- * Check for standard transaction types\n- * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n- * @return True if all inputs (scriptSigs) use only standard transaction forms\n- */\n-bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n  * @return number of sigops this transaction's outputs will produce when spent\n@@ -311,11 +292,6 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n /** Context-independent validity checks */\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n-/** Check for standard transaction types\n- * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n- */\n-bool IsStandardTx(const CTransaction& tx, std::string& reason);\n-\n /**\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical."
      },
      {
        "sha": "169fef4af4602dfe327d8311ab90bd714c5e12f4",
        "filename": "src/policy/policy.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+\n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n+{\n+    std::vector<std::vector<unsigned char> > vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n+}\n+\n+bool IsStandardTx(const CTransaction& tx, std::string& reason)\n+{\n+    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+        reason = \"version\";\n+        return false;\n+    }\n+\n+    // Extremely large transactions with lots of inputs can cost the network\n+    // almost as much to process as they cost the sender in fees, because\n+    // computing signature hashes is O(ninputs*txsize). Limiting transactions\n+    // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz >= MAX_STANDARD_TX_SIZE) {\n+        reason = \"tx-size\";\n+        return false;\n+    }\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)+3=1627\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (txin.scriptSig.size() > 1650) {\n+            reason = \"scriptsig-size\";\n+            return false;\n+        }\n+        if (!txin.scriptSig.IsPushOnly()) {\n+            reason = \"scriptsig-not-pushonly\";\n+            return false;\n+        }\n+    }\n+\n+    unsigned int nDataOut = 0;\n+    txnouttype whichType;\n+    BOOST_FOREACH(const CTxOut& txout, tx.vout) {\n+        if (!::IsStandard(txout.scriptPubKey, whichType)) {\n+            reason = \"scriptpubkey\";\n+            return false;\n+        }\n+\n+        if (whichType == TX_NULL_DATA)\n+            nDataOut++;\n+        else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n+            reason = \"bare-multisig\";\n+            return false;\n+        } else if (txout.IsDust(::minRelayTxFee)) {\n+            reason = \"dust\";\n+            return false;\n+        }\n+    }\n+\n+    // only one OP_RETURN txout is permitted\n+    if (nDataOut > 1) {\n+        reason = \"multi-op-return\";\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases don't use vin normally\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut& prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        std::vector<std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n+            return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+        if (nArgsExpected < 0)\n+            return false;\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig\n+        // IsStandardTx() will have already returned false\n+        // and this method isn't called.\n+        std::vector<std::vector<unsigned char> > stack;\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n+            return false;\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n+            if (stack.empty())\n+                return false;\n+            CScript subscript(stack.back().begin(), stack.back().end());\n+            std::vector<std::vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (Solver(subscript, whichType2, vSolutions2))\n+            {\n+                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n+                if (tmpExpected < 0)\n+                    return false;\n+                nArgsExpected += tmpExpected;\n+            }\n+            else\n+            {\n+                // Any other Script with less than 15 sigops OK:\n+                unsigned int sigops = subscript.GetSigOpCount(true);\n+                // ... extra data left on the stack after execution is OK, too:\n+                return (sigops <= MAX_P2SH_SIGOPS);\n+            }\n+        }\n+\n+        if (stack.size() != (unsigned int)nArgsExpected)\n+            return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "1551aecde8c33eab3dd9ba74fbced371671ac0ca",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -10,6 +10,10 @@\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n+#include <string>\n+\n+class CCoinsViewCache;\n+\n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n@@ -38,4 +42,17 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n+bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n+    /**\n+     * Check for standard transaction types\n+     * @return True if all outputs (scriptPubKeys) use only standard transaction forms\n+     */\n+bool IsStandardTx(const CTransaction& tx, std::string& reason);\n+    /**\n+     * Check for standard transaction types\n+     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending\n+     * @return True if all inputs (scriptSigs) use only standard transaction forms\n+     */\n+bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n #endif // BITCOIN_POLICY_H"
      },
      {
        "sha": "66657127ab85cf47c5c63ad8ea960a16978d2035",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -180,26 +180,6 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n     return -1;\n }\n \n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n-{\n-    vector<valtype> vSolutions;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n-\n-    if (whichType == TX_MULTISIG)\n-    {\n-        unsigned char m = vSolutions.front()[0];\n-        unsigned char n = vSolutions.back()[0];\n-        // Support up to x-of-3 multisig txns as standard\n-        if (n < 1 || n > 3)\n-            return false;\n-        if (m < 1 || m > n)\n-            return false;\n-    }\n-\n-    return whichType != TX_NONSTANDARD;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "46ae5f9f10389f8825dc2fa0f3d64f4542639c69",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -69,7 +69,6 @@ const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n-bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "b65c299adcbaa3f17e35cc4542802f45de7d106e",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/interpreter.h\""
      },
      {
        "sha": "260524f7cc605879c666bb003cf9c0a42c964111",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9238ecb41752e097443d0bc117df35ebd4ac932e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9238ecb41752e097443d0bc117df35ebd4ac932e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9238ecb41752e097443d0bc117df35ebd4ac932e",
        "patch": "@@ -12,6 +12,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n "
      }
    ]
  }
]