vasild,2021-08-06 15:17:28,See also https://en.wikipedia.org/wiki/Principle_of_least_astonishment,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894331601,894331601,
jonatack,2021-08-06 15:32:22,"Concept/Approach ACK. It may be good to have functional test coverage (or make it a separate function with unit tests).\n\nEdit: updated the -onlynet documentation in bebcf785c080df9273e03b854832ba3dbd4320ec.",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894340417,894340417,
prayank23,2021-08-06 18:34:05,"> See also https://en.wikipedia.org/wiki/Principle_of_least_astonishment\n\nThis link says ""The behavior should not astonish or surprise users""\n\nI am surprised by lot of things in Bitcoin Core ðŸ˜„\n\nConcept ACK. Doesn't make sense to create outbound connections with onion peers if `onlynet=i2p` is used.",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894444992,894444992,
prayank23,2021-08-06 21:27:21,"> It may be good to have functional test coverage (or make it a separate function with unit tests).\n\nAgree. Do you think these steps are correct for test?\n\n1. Run Node 1: \n```\nbitcoind -port=18333 -rpcport=18222 -datadir=""/home/user/node1"" -regtest=1 -listen=1 -server=1 -debug=net -rpcuser=user1 -rpcpassword=password1 -torcontrol='127.0.0.1:9051' -proxy='127.0.0.1:9050' -onlynet=onion",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894527298,894527298,
jonatack,2021-08-06 21:47:58,Checking the debug log output is a bit of a last resort when there's nothing else to assert on... getnetworkinfo limited/reachable (and maybe getpeerinfo) would probably be good.,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894535743,894535743,
DrahtBot,2021-08-07 05:05:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#19358](https://github.com/bitcoin/bitcoin/pull/19358) (torcontrol : avoid to set wrong outbound proxy and network settin",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894605885,894605885,
wodry,2021-08-07 06:37:35,Would this fix also #13378 ?,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894613967,894613967,
prayank23,2021-08-07 21:20:30,"> Checking the debug log output is a bit of a last resort when there's nothing else to assert on... getnetworkinfo limited/reachable (and maybe getpeerinfo) would probably be good.\n\nAlso the steps I mentioned above don't work. They worked on one of my VMs. Maybe it already had some onion address in peers.dat. I was expecting it will add onion peer in peers.dat but it didn't. `addpeeraddress` w",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894708083,894708083,
prayank23,2021-08-08 08:12:19,"Wrote a PowerShell [script ](https://github.com/prayank23/bitcoin-ps-scripts/blob/main/Scripts/Node/onlynet_i2p.ps1) to test this. Tried on Windows 10 and Pop!_OS. Node 2 is connected to Node 1 on Linux and fails on Windows (Master branch).\n\nTL;DR\n   1. Run Node 1 and get onion URL for it. \n   2. Sleep 10 seconds\n   3. Get onion address for Node 1 from `getnetworkinfo` -> localaddresses ",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-894761007,894761007,
vasild,2021-08-09 09:15:52,"> Would this fix also #13378 ?\n\nTo my understanding, yes, but only if none of `-proxy` or `-onion` is set.\n\nProviding both `-onlynet=ipv4 -onion=127.0.0.1:9050` is kind of contradictory - why provide an outgoing tor proxy if you only want to connect to IPv4? I think Bitcoin Core should print an error and refuse to start in this case, but instead it treats it as ""onlynet ipv4 or tor"". Chang",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-895069245,895069245,
wodry,2021-08-09 11:22:35,"Also of course out of this PR, just to mention: I am sure you are already aware that to have multiple ""only"" nets is paradox, the option should better be called e.g. ""net"" instead of ""onlynet""..",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-895144677,895144677,
vasild,2021-08-11 07:20:54,`4f4c7d8b11..4f3020d524`: append a functional test to exercise the modified behavior,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896565507,896565507,
vasild,2021-08-11 07:40:13,`4f3020d524...00b7ba51eb`: hush `test/lint/lint-python.sh`,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896577149,896577149,
vasild,2021-08-11 07:46:11,"`00b7ba51eb...25f9e113db`: change `allow_outbound_onion` to a function, as per suggestion",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896580901,896580901,
prayank23,2021-08-11 08:17:39,"> Introduce a basic TCP server in the functional testing framework and use\nit to simulate a Tor Control daemon, which is needed in order for the\ncode in `src/torcontrol.cpp` to execute the code that is relevant for\n`-onlynet`.\n\nInteresting. Will try this today. ",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896610763,896610763,
vasild,2021-08-11 12:22:37,"`test_framework/basic_server.py` can also be used to add some functional tests for I2P. We can simulate an I2P router at least as long as the text/line-based SAM is being talked on the socket. Later, when the socket switches from SAM to the binary bitcoin p2p protocol we would have to close the socket.",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896780844,896780844,
vasild,2021-08-11 12:49:11,`25f9e113db...16bf93e136`: address suggestions,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896798367,896798367,
Talkless,2021-08-11 14:45:41,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-896890081,896890081,
vasild,2021-08-12 09:45:29,"`16bf93e136...5959ece29e`: address minor suggestions and avoid possibility of colliding listening ports by binding to port 0 (let the OS choose an available port, thanks @darosior for the idea!)",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-897498176,897498176,
jonatack,2021-08-19 09:56:28,"This has a couple of ACKs and would be very good to have in 22.0 to alleviate user confusion over an impactful user-facing change in the release. @vasild, do you plan to update? Anyone else like to review here?",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-901778042,901778042,
vasild,2021-08-19 13:49:51,"`5959ece29e...a2ebcda19a`: address some suggestions\n\n> @vasild, do you plan to update?\n\nDone! :)",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-901932190,901932190,
jonatack,2021-08-19 14:53:08,"Code review re-ACK a2ebcda19a25067cb8183f25f6ffd0a26065fcc5 per `git diff 5959ece a2ebcda`, rebase on master, debug build, re-ran test a few times, and previously manually verified the behavior extensively as described in https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684429929 and https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684434758\n",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-901982638,901982638,
Rspigler,2021-08-19 22:45:57,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-902300252,902300252,
prayank23,2021-08-20 16:08:57,"reACK https://github.com/bitcoin/bitcoin/pull/22651/commits/a2ebcda19a25067cb8183f25f6ffd0a26065fcc5\n\nMajor changes since last review:\n\n1. https://github.com/bitcoin/bitcoin/pull/22651#discussion_r689088453\n2. https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-897498176",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-902800564,902800564,
laanwj,2021-08-26 11:28:44,"> See also https://en.wikipedia.org/wiki/Principle_of_least_astonishment\n\nTo be honest this whole situation around onlynet gives me a headache: https://github.com/bitcoin/bitcoin/pull/22648#pullrequestreview-739349992",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-906322657,906322657,
vasild,2021-08-30 13:16:01,`a2ebcda19a...baa6cb12ac`: address minor suggestion and fix commit id in a comment.,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-908334015,908334015,
vasild,2021-08-30 13:18:04,"@laanwj, I agree with your comments at https://github.com/bitcoin/bitcoin/pull/22648#discussion_r696535966. Opened https://github.com/bitcoin/bitcoin/pull/22834 which if merged will make this PR unnecessary.\n\nIMO https://github.com/bitcoin/bitcoin/pull/22834 should be merged and this PR (https://github.com/bitcoin/bitcoin/pull/22651) closed without merge. But lets see what reviewers think.",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-908335719,908335719,
jonatack,2021-08-30 17:00:56,"Code review re-ACK baa6cb12ac5071bb68eb5ec375be73df4f4ae28f per `git diff a2ebcda baa6cb1`, rebase on master, debug build, ran the new test `test/functional/feature_onlynet.py` a few times, previously manually verified the behavior extensively as described in https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684429929 and https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684434758",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-908513666,908513666,
luke-jr,2021-09-14 16:44:40,#22834 looks like a better solution IMO,https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-919326718,919326718,
Talkless,2021-11-06 14:00:47,"> #22834 looks like a better solution IMO\n\nSo this PR should be closed?\n\n@vasild I'm confused :)",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-962456059,962456059,
vasild,2021-11-08 08:47:46,"Closing this in favor of https://github.com/bitcoin/bitcoin/pull/22834 which has more (concept) ACKs.\n\nThanks, @Talkless!",https://github.com/bitcoin/bitcoin/pull/22651#issuecomment-962931750,962931750,
jonatack,2021-08-06 18:12:03,"A function seems nicer than a localvar here (optionally declare in header file for unit testing)\n```diff\n+bool AllowOutboundOnion()\n+{\n+    if (!gArgs.IsArgSet(""-onlynet"")) return true;\n+    for (const auto& net : gArgs.GetArgs(""-onlynet"")) {\n+        if (ParseNetwork(net) == NET_ONION) return true;\n+    }\n+    return false;\n+}\n          // Now that we know Tor is running, poss",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684419652,684419652,src/torcontrol.cpp
jonatack,2021-08-06 18:31:42,"Tested with this patch on mainnet:\n- `onlynet=i2p`: only I2P outbound connections are made (i2pd 2.23)\n- `onlynet=ipv4`: only IPv4 outbound connections are made\n- `onlynet=onion`: only onion outbound connections are made (tor 0.4.6)",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684429929,684429929,src/torcontrol.cpp
jonatack,2021-08-06 18:40:19,"I did more testing with combinations (all using the proposed function version above ;)\n- `onlynet=i2p` and `onlynet=onion`: only I2P and onion outbound connections are made\n- `onlynet=ipv4` and `onlynet=onion`: only IPv4 and onion outbound connections are made\n- `onlynet=ipv4` and `onlynet=i2p`: only IPv4 and I2P outbound connections are made\n\n(Test coverage for these cases--single onlyn",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684434758,684434758,src/torcontrol.cpp
prayank23,2021-08-06 19:30:24,"This is normally 9150 on Windows so can we use #ifdef here? Although not sure if it is out of scope for this PR\n\n```suggestion\n#ifdef WIN32 \n            CService resolved(LookupNumeric(""127.0.0.1"", 9150));\n#else\n            CService resolved(LookupNumeric(""127.0.0.1"", 9050));\n#endif\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684460683,684460683,src/torcontrol.cpp
prayank23,2021-08-06 20:57:43,"> Test coverage for these cases--single onlynet and combinations--would be great\n\nAgree",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r684500821,684500821,src/torcontrol.cpp
vasild,2021-08-09 09:01:12,"Yes, ouf of scope of this PR. This belongs to https://github.com/bitcoin/bitcoin/pull/15423, I hope that PR moves forward.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r685023941,685023941,src/torcontrol.cpp
vasild,2021-08-11 07:27:57,I think it is fine either way. A function would make more sense if this is used in more than one place. The code is now covered by a new functional test `feature_onlynet.py`. Left it as is.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686569913,686569913,src/torcontrol.cpp
jonatack,2021-08-11 07:37:29,I think the function is not only shorter but also clearer and easier to reason about.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686576643,686576643,src/torcontrol.cpp
vasild,2021-08-11 07:47:03,"Alright, changed to a function.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686583273,686583273,src/torcontrol.cpp
jonatack,2021-08-11 08:07:23,"```suggestion\nTest -onlynet configuration option.\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686598124,686598124,test/functional/feature_onlynet.py
jonatack,2021-08-11 09:23:47,"I needed this line for the test to run:\n```diff\n class OnlynetTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.extra_args = [\n```\nOtherwise, was seeing the following error:\n\n<details><summary>test output</summary><p>\n\n```\n$ test/functional/feature_onlynet.py \n2021-08-11T09:22:40.305000Z TestFramework (INFO): ",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686656841,686656841,test/functional/feature_onlynet.py
jonatack,2021-08-11 09:24:59,"Here is a proposed simplification using a dict comprehension in `networks_dict` and a loop for the assertions:\n```diff\n+    def networks_dict(self, node):\n+        info = self.nodes[node].getnetworkinfo()\n+        return {network[""name""]: network for network in info[""networks""]}\n \n     def run_test(self):\n-        def networks_dict(d):\n-            r = {}\n-            for x in d[",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686657721,686657721,test/functional/feature_onlynet.py
jonatack,2021-08-11 09:30:24,"```suggestion\n        # self.listen_socket = socket.create_server(address=bind, reuse_port=True)\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686661675,686661675,test/functional/test_framework/basic_server.py
jonatack,2021-08-11 09:30:35,?,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686661792,686661792,test/functional/test_framework/basic_server.py
jonatack,2021-08-11 09:34:47,Thanks!,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686664860,686664860,src/torcontrol.cpp
jonatack,2021-08-11 09:39:49,"nit, either add a comma at the end of this line, or one-line it:\n```python\nfrom test_framework.basic_server import BasicServer, tor_control\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686668471,686668471,test/functional/feature_onlynet.py
vasild,2021-08-11 12:49:27,Done.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686798112,686798112,test/functional/feature_onlynet.py
vasild,2021-08-11 12:50:08,Added. Any idea why that failure is not on CI? I don't see it either locally.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686798692,686798692,test/functional/feature_onlynet.py
vasild,2021-08-11 12:50:50,"Did something similar. I find `return {network[""name""]: network for network in info[""networks""]}` extremely hard to read.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686799215,686799215,test/functional/feature_onlynet.py
vasild,2021-08-11 12:51:33,I wanted to mark the end of the snippet that is equivalent to `create_server()`. Removed.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686799788,686799788,test/functional/test_framework/basic_server.py
vasild,2021-08-11 12:51:44,"Added `,`.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686799953,686799953,test/functional/feature_onlynet.py
vasild,2021-08-11 12:52:06,Done.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686800249,686800249,test/functional/test_framework/basic_server.py
jonatack,2021-08-11 14:05:10,"Comprehensions seem idiomatic/pythonic and the most-used way to do it in this codebase too (though I agree that a shorter `n` or `net` for the one line would probably be better than `network`), but I like your new version too. Nice and simple.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686865131,686865131,test/functional/feature_onlynet.py
jonatack,2021-08-11 14:11:57,"Hm, after coming back here and rebuilding, the test now runs for me without it. Strange.  Sorry for the noise.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686871346,686871346,test/functional/feature_onlynet.py
jonatack,2021-08-11 14:14:12,"nits:\n\n- I think it's more robust to describe why than to refer to a GitHub PR or depend on GitHub in general\n\n- s/unintended/unintentionally/",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686873427,686873427,test/functional/feature_onlynet.py
jonatack,2021-08-11 14:17:38,"```suggestion\n        if (gArgs.GetArg(""-onion"", """").empty() && AllowOutboundOnion()) {\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686876527,686876527,src/torcontrol.cpp
jonatack,2021-08-11 14:25:19,"Would it make sense to test with multiple onlynet settings? (this is only a quick example, not a good one)\n\n```diff\ndiff --git a/test/functional/feature_onlynet.py b/test/functional/feature_onlynet.py\nindex 60e4caf33d..c43a541196 100755\n--- a/test/functional/feature_onlynet.py\n+++ b/test/functional/feature_onlynet.py\n@@ -22,6 +22,8 @@ class OnlynetTest(BitcoinTestFramework):\n      ",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r686883879,686883879,test/functional/feature_onlynet.py
vasild,2021-08-12 09:46:27,I think it is fine as it is. The point is to have `onlynet=...` but not `onlynet=onion`.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687559139,687559139,test/functional/feature_onlynet.py
vasild,2021-08-12 09:51:24,"You suggested this one earlier and I deliberately skipped it but did not explain why.\n\nHere we are testing whether the result of `GetArg()` equals to its second argument, so it is better to keep that obvious, e.g. `GetArg(..., X) == X`.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687562997,687562997,src/torcontrol.cpp
vasild,2021-08-12 09:52:34,"I agree, removed the github reference.\n\nI think ""uninternationally"" is even better, changed.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687563816,687563816,test/functional/feature_onlynet.py
jonatack,2021-08-12 15:38:53,"maybe use a docstring and describe the commit, feel free to ignore\n```diff\n-        # Node 0 would fail the check without c591379eb03381145c85ee5760ce829be337a749.\n-        # Nodes 1 and 2 pass with or without that commit, they are here just to ensure\n-        # behavior does not change unintentionally.\n+        """"""\n+        - The test of node 0 would fail without commit c591379eb0,\n",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687853500,687853500,test/functional/feature_onlynet.py
jonatack,2021-08-12 15:39:28,"output is fairly long, could shorten without loss of signal, feel free to ignore\n```suggestion\n            self.log.info(f'Test node {node} {self.extra_args[node]}')\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687854013,687854013,test/functional/feature_onlynet.py
jonatack,2021-08-12 15:44:10,"indeed, seeing a different random port on each run as described here",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r687858037,687858037,test/functional/test_framework/basic_server.py
Talkless,2021-08-15 12:55:22,"Because `==` will generate/call string comparison code, instead of just checking string length using `empty()`. Better just use specialized member functions instead of some kind ""generic"" comparison.\n\nAnother example is using `clear()` vs `= """"`: https://www.youtube.com/watch?v=3X9qK7HWxjk",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r689085583,689085583,src/torcontrol.cpp
Talkless,2021-08-15 13:16:28,"Please consider using standard algorithms instead of hand-rolled loop:\n```\n#include <algorithm>\n...\n\n    const auto only_nets{gArgs.GetArgs(""-onlynet"")};\n\n    //TODO: C++20: use std::ranges::any_of() instead\n    return std::any_of(only_nets.cbegin(), only_nets.cend(), [](const auto &net) {\n        return ParseNetwork(net) == NET_ONION;\n    });\n```",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r689088453,689088453,src/torcontrol.cpp
vasild,2021-08-19 13:36:55,"I think readability trumps micro-optimization here, leaving it as is.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r692117735,692117735,src/torcontrol.cpp
vasild,2021-08-19 13:37:33,Leaving it as is.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r692118290,692118290,test/functional/feature_onlynet.py
vasild,2021-08-19 13:38:33,Done.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r692119177,692119177,test/functional/feature_onlynet.py
vasild,2021-08-19 13:49:03,Done.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r692128599,692128599,src/torcontrol.cpp
Talkless,2021-08-26 13:25:43,"This is not micro-optimization, but avoiding unnecessary possible premature pessimization, see: https://stackoverflow.com/questions/15875252/premature-optimization-and-premature-pessimization-related-to-c-coding-standar/32269630#32269630\n\nIt's not optimization as it's not something more complex, harder to write or to read, not something uncommon.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r696627152,696627152,src/torcontrol.cpp
Talkless,2021-08-26 14:50:08,"`const auto& onlynets` should not be a reference (it was not in my suggestion). It does extend lifetime of temporary, so no undefined horrors here, but since `GetArgs` does not return `const&`, and returned object does not use polymorphism, `&` seems out of place here.",https://github.com/bitcoin/bitcoin/pull/22651#discussion_r696707142,696707142,src/torcontrol.cpp
vasild,2021-08-30 13:15:37,Removed.,https://github.com/bitcoin/bitcoin/pull/22651#discussion_r698478079,698478079,src/torcontrol.cpp
