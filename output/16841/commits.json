[
  {
    "sha": "b887060d06290abf4983a487f8da6b0986b058ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODg3MDYwZDA2MjkwYWJmNDk4M2E0ODdmOGRhNmIwOTg2YjA1OGFi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-09-09T23:27:50Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-08-13T20:44:42Z"
      },
      "message": "Replace usage of GetScriptForWitness with GetScriptForDestination",
      "tree": {
        "sha": "8c9f52099b69f64fe3264b5c3241d9c75068d559",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c9f52099b69f64fe3264b5c3241d9c75068d559"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b887060d06290abf4983a487f8da6b0986b058ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887060d06290abf4983a487f8da6b0986b058ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b887060d06290abf4983a487f8da6b0986b058ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887060d06290abf4983a487f8da6b0986b058ab/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a85377cd0b60cb00dae4f595d628d1afbd28bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a85377cd0b60cb00dae4f595d628d1afbd28bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a85377cd0b60cb00dae4f595d628d1afbd28bd5"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 35,
      "deletions": 44
    },
    "files": [
      {
        "sha": "a9119d514498b55b441b1be5ca68ace9aec4705f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -320,8 +320,8 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n         if (!pubkey.IsCompressed()) {\n             throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n         }\n-        // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n-        scriptPubKey = GetScriptForWitness(scriptPubKey);\n+        // Build a P2WPKH script\n+        scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n     }\n     if (bScriptHash) {\n         // Get the ID for the script, and then construct a P2SH destination for it.\n@@ -390,8 +390,8 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n                 throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n             }\n         }\n-        // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n-        scriptPubKey = GetScriptForWitness(scriptPubKey);\n+        // Build a P2WSH with the multisig script\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(scriptPubKey));\n     }\n     if (bScriptHash) {\n         if (scriptPubKey.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n@@ -464,7 +464,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& str\n     }\n \n     if (bSegWit) {\n-        scriptPubKey = GetScriptForWitness(scriptPubKey);\n+        scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(scriptPubKey));\n     }\n     if (bScriptHash) {\n         if (scriptPubKey.size() > MAX_SCRIPT_ELEMENT_SIZE) {"
      },
      {
        "sha": "4274fa4351574bcd0231b5749711c88ed7d12338",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -63,8 +63,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     int required_ret;\n     (void)ExtractDestinations(script, type_ret, addresses, required_ret);\n \n-    (void)GetScriptForWitness(script);\n-\n     const FlatSigningProvider signing_provider;\n     (void)InferDescriptor(script, signing_provider);\n "
      },
      {
        "sha": "1d6bcadf69ab11c4af1379bb2e72f3c79baf2f2c",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -349,21 +349,16 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     result = GetScriptForMultisig(2, std::vector<CPubKey>(pubkeys, pubkeys + 3));\n     BOOST_CHECK(result == expected);\n \n-    // GetScriptForWitness\n-    CScript witnessScript;\n-\n-    witnessScript << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    // WitnessV0KeyHash\n     expected.clear();\n     expected << OP_0 << ToByteVector(pubkeys[0].GetID());\n-    result = GetScriptForWitness(witnessScript);\n+    result = GetScriptForDestination(WitnessV0KeyHash(Hash160(ToByteVector(pubkeys[0]))));\n     BOOST_CHECK(result == expected);\n-\n-    witnessScript.clear();\n-    witnessScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    result = GetScriptForWitness(witnessScript);\n+    result = GetScriptForDestination(WitnessV0KeyHash(pubkeys[0].GetID()));\n     BOOST_CHECK(result == expected);\n \n-    witnessScript.clear();\n+    // WitnessV0ScriptHash (multisig)\n+    CScript witnessScript;\n     witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n \n     uint256 scriptHash;\n@@ -372,7 +367,7 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n \n     expected.clear();\n     expected << OP_0 << ToByteVector(scriptHash);\n-    result = GetScriptForWitness(witnessScript);\n+    result = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n     BOOST_CHECK(result == expected);\n }\n "
      },
      {
        "sha": "7e5274450d10a5bae63cc8fec4ce750ae6bbcac9",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -154,8 +154,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n \n     // P2WPKH witness program\n     {\n-        CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-        CScript scriptPubKey = GetScriptForWitness(p2pk);\n+        CScript scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n@@ -183,8 +182,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n \n     // P2WPKH nested in P2SH\n     {\n-        CScript p2pk = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-        CScript scriptSig = GetScriptForWitness(p2pk);\n+        CScript scriptSig = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n         CScript scriptPubKey = GetScriptForDestination(ScriptHash(scriptSig));\n         scriptSig = CScript() << ToByteVector(scriptSig);\n         CScriptWitness scriptWitness;\n@@ -199,7 +197,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     // P2WSH witness program\n     {\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n-        CScript scriptPubKey = GetScriptForWitness(witnessScript);\n+        CScript scriptPubKey = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n         CScript scriptSig = CScript();\n         CScriptWitness scriptWitness;\n         scriptWitness.stack.push_back(std::vector<unsigned char>(0));\n@@ -215,7 +213,7 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n     // P2WSH nested in P2SH\n     {\n         CScript witnessScript = CScript() << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n-        CScript redeemScript = GetScriptForWitness(witnessScript);\n+        CScript redeemScript = GetScriptForDestination(WitnessV0ScriptHash(witnessScript));\n         CScript scriptPubKey = GetScriptForDestination(ScriptHash(redeemScript));\n         CScript scriptSig = CScript() << ToByteVector(redeemScript);\n         CScriptWitness scriptWitness;"
      },
      {
        "sha": "b073ffe7ed8be5f9f358047c912db456c47daf49",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -499,13 +499,13 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     BOOST_CHECK(keystore.AddCScript(scriptPubkey1L));\n     BOOST_CHECK(keystore.AddCScript(scriptPubkey2L));\n     BOOST_CHECK(keystore.AddCScript(scriptMulti));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey1)));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey2)));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey1L)));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptPubkey2L)));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForWitness(scriptMulti)));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID()))));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID()))));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID()))));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID()))));\n+    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti))));\n     BOOST_CHECK(keystore2.AddCScript(scriptMulti));\n-    BOOST_CHECK(keystore2.AddCScript(GetScriptForWitness(scriptMulti)));\n+    BOOST_CHECK(keystore2.AddCScript(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti))));\n     BOOST_CHECK(keystore2.AddKeyPubKey(key3, pubkey3));\n \n     CTransactionRef output1, output2;\n@@ -537,8 +537,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // Witness pay-to-compressed-pubkey (v0).\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2), output2, input2);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID())), output2, input2);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -549,9 +549,9 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH witness pay-to-compressed-pubkey (v0).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey1))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey2))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())))), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID())))), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())));\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -587,12 +587,12 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1, false);\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID())), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID())), output2, input2, false);\n \n     // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID())))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID())))), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n@@ -616,10 +616,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // Witness 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptMulti), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)), output1, input1, false);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForWitness(scriptMulti), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)), output2, input2, false);\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n@@ -628,10 +628,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH witness 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptMulti))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)))), output1, input1, false);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(GetScriptForWitness(scriptMulti))), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)))), output2, input2, false);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);"
      },
      {
        "sha": "034577aa2cdd4492a53f2d1200ca45977d5cc673",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887060d06290abf4983a487f8da6b0986b058ab/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887060d06290abf4983a487f8da6b0986b058ab/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=b887060d06290abf4983a487f8da6b0986b058ab",
        "patch": "@@ -157,7 +157,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     CScript p2sh_scriptPubKey = GetScriptForDestination(ScriptHash(p2pk_scriptPubKey));\n     CScript p2pkh_scriptPubKey = GetScriptForDestination(PKHash(coinbaseKey.GetPubKey()));\n-    CScript p2wpkh_scriptPubKey = GetScriptForWitness(p2pkh_scriptPubKey);\n+    CScript p2wpkh_scriptPubKey = GetScriptForDestination(WitnessV0KeyHash(coinbaseKey.GetPubKey()));\n \n     FillableSigningProvider keystore;\n     BOOST_CHECK(keystore.AddKey(coinbaseKey));"
      }
    ]
  },
  {
    "sha": "fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWM4MzM2YWQ5N2RjNzE3ZWExMjNmODRlY2ZjMTBkOWVlNGExMWRi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2019-09-09T23:24:41Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-08-13T20:47:19Z"
      },
      "message": "Remove GetScriptForWitness function",
      "tree": {
        "sha": "761a9a8e0f4c0e55ea37cb997fc920a780552f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/761a9a8e0f4c0e55ea37cb997fc920a780552f44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec8336ad97dc717ea123f84ecfc10d9ee4a11db/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b887060d06290abf4983a487f8da6b0986b058ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887060d06290abf4983a487f8da6b0986b058ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b887060d06290abf4983a487f8da6b0986b058ab"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 0,
      "deletions": 22
    },
    "files": [
      {
        "sha": "96a3d311a66aef76d5d59ceef2a3c5e63867b8ca",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec8336ad97dc717ea123f84ecfc10d9ee4a11db/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec8336ad97dc717ea123f84ecfc10d9ee4a11db/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
        "patch": "@@ -313,18 +313,6 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n     return script;\n }\n \n-CScript GetScriptForWitness(const CScript& redeemscript)\n-{\n-    std::vector<std::vector<unsigned char> > vSolutions;\n-    TxoutType typ = Solver(redeemscript, vSolutions);\n-    if (typ == TxoutType::PUBKEY) {\n-        return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0])));\n-    } else if (typ == TxoutType::PUBKEYHASH) {\n-        return GetScriptForDestination(WitnessV0KeyHash(uint160{vSolutions[0]}));\n-    }\n-    return GetScriptForDestination(WitnessV0ScriptHash(redeemscript));\n-}\n-\n bool IsValidDestination(const CTxDestination& dest) {\n     return dest.which() != 0;\n }"
      },
      {
        "sha": "6dbcd04968067158e5c10b2a46895d1943b64218",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fec8336ad97dc717ea123f84ecfc10d9ee4a11db/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fec8336ad97dc717ea123f84ecfc10d9ee4a11db/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
        "patch": "@@ -263,14 +263,4 @@ CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n /** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n-/**\n- * Generate a pay-to-witness script for the given redeem script. If the redeem\n- * script is P2PK or P2PKH, this returns a P2WPKH script, otherwise it returns a\n- * P2WSH script.\n- *\n- * TODO: replace calls to GetScriptForWitness with GetScriptForDestination using\n- * the various witness-specific CTxDestination subtypes.\n- */\n-CScript GetScriptForWitness(const CScript& redeemscript);\n-\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      }
    ]
  },
  {
    "sha": "7966aa424a8b78983f73742cbdb3d11eccaf9f3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTY2YWE0MjRhOGI3ODk4M2Y3Mzc0MmNiZGIzZDExZWNjYWY5ZjNh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-07-01T23:47:18Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2020-08-13T20:47:19Z"
      },
      "message": "Add variables for repeated scripts",
      "tree": {
        "sha": "8a19ab7daf646b8b9c41185ebc2a30f210b10d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a19ab7daf646b8b9c41185ebc2a30f210b10d5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7966aa424a8b78983f73742cbdb3d11eccaf9f3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7966aa424a8b78983f73742cbdb3d11eccaf9f3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7966aa424a8b78983f73742cbdb3d11eccaf9f3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7966aa424a8b78983f73742cbdb3d11eccaf9f3a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fec8336ad97dc717ea123f84ecfc10d9ee4a11db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fec8336ad97dc717ea123f84ecfc10d9ee4a11db"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 25,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9a9686f016829a44f4010decaf09c7d5aa9d94bd",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 19,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7966aa424a8b78983f73742cbdb3d11eccaf9f3a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7966aa424a8b78983f73742cbdb3d11eccaf9f3a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7966aa424a8b78983f73742cbdb3d11eccaf9f3a",
        "patch": "@@ -499,13 +499,19 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     BOOST_CHECK(keystore.AddCScript(scriptPubkey1L));\n     BOOST_CHECK(keystore.AddCScript(scriptPubkey2L));\n     BOOST_CHECK(keystore.AddCScript(scriptMulti));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID()))));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID()))));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID()))));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID()))));\n-    BOOST_CHECK(keystore.AddCScript(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti))));\n+    CScript destination_script_1, destination_script_2, destination_script_1L, destination_script_2L, destination_script_multi;\n+    destination_script_1 = GetScriptForDestination(WitnessV0KeyHash(pubkey1));\n+    destination_script_2 = GetScriptForDestination(WitnessV0KeyHash(pubkey2));\n+    destination_script_1L = GetScriptForDestination(WitnessV0KeyHash(pubkey1L));\n+    destination_script_2L = GetScriptForDestination(WitnessV0KeyHash(pubkey2L));\n+    destination_script_multi = GetScriptForDestination(WitnessV0ScriptHash(scriptMulti));\n+    BOOST_CHECK(keystore.AddCScript(destination_script_1));\n+    BOOST_CHECK(keystore.AddCScript(destination_script_2));\n+    BOOST_CHECK(keystore.AddCScript(destination_script_1L));\n+    BOOST_CHECK(keystore.AddCScript(destination_script_2L));\n+    BOOST_CHECK(keystore.AddCScript(destination_script_multi));\n     BOOST_CHECK(keystore2.AddCScript(scriptMulti));\n-    BOOST_CHECK(keystore2.AddCScript(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti))));\n+    BOOST_CHECK(keystore2.AddCScript(destination_script_multi));\n     BOOST_CHECK(keystore2.AddKeyPubKey(key3, pubkey3));\n \n     CTransactionRef output1, output2;\n@@ -537,8 +543,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // Witness pay-to-compressed-pubkey (v0).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID())), output2, input2);\n+    CreateCreditAndSpend(keystore, destination_script_1, output1, input1);\n+    CreateCreditAndSpend(keystore, destination_script_2, output2, input2);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -549,9 +555,9 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH witness pay-to-compressed-pubkey (v0).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey2.GetID())))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForDestination(WitnessV0KeyHash(pubkey1.GetID())));\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(destination_script_1)), output1, input1);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(destination_script_2)), output2, input2);\n+    ReplaceRedeemScript(input2.vin[0].scriptSig, destination_script_1);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -587,12 +593,12 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n     // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID())), output1, input1, false);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID())), output2, input2, false);\n+    CreateCreditAndSpend(keystore, destination_script_1L, output1, input1, false);\n+    CreateCreditAndSpend(keystore, destination_script_2L, output2, input2, false);\n \n     // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey1L.GetID())))), output1, input1, false);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0KeyHash(pubkey2L.GetID())))), output2, input2, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(destination_script_1L)), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(destination_script_2L)), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);\n@@ -616,10 +622,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // Witness 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)), output1, input1, false);\n+    CreateCreditAndSpend(keystore, destination_script_multi, output1, input1, false);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, destination_script_multi, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n@@ -628,10 +634,10 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH witness 2-of-2 multisig\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(ScriptHash(destination_script_multi)), output1, input1, false);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n-    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(GetScriptForDestination(WitnessV0ScriptHash(scriptMulti)))), output2, input2, false);\n+    CreateCreditAndSpend(keystore2, GetScriptForDestination(ScriptHash(destination_script_multi)), output2, input2, false);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);"
      }
    ]
  }
]