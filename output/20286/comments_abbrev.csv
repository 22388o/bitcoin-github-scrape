MarcoFalke,2020-11-03 08:31:11,Is anyone using this for p2sh-multisig (passing the redeemscript into `decodescript`)?,https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-720975152,720975152,
luke-jr,2020-11-13 18:00:39,"""addresses"" for multisigs don't make sense without ""reqSigs""\n\nIMO if we deprecate/remove the latter, we should also be sure to remove the former with it.\n\n(""addresses"" should remain for actual address outputs)",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-726923474,726923474,
mjdietzx,2020-11-15 19:24:23,"> ""addresses"" for multisigs don't make sense without ""reqSigs""\n> \n> IMO if we deprecate/remove the latter, we should also be sure to remove the former with it.\n> \n> (""addresses"" should remain for actual address outputs)\n\nIf we were to remove `addresses` for multisigs it seems to me we'd be able to get rid of [ExtractDestinations](https://github.com/bitcoin/bitcoin/blob/0ede354367c478cb",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-727622658,727622658,
sipa,2020-11-15 19:29:54,"Concept ACK on removing both ""reqSigs"" and ""addresses"", but it'll need to go through the RPC deprecation mechanism.\n\nIn other places we have already removed similar fields. Especially ""addresses"" is a bizarre and misleading leftover from a time when addresses were only ever P2PKH and just ""key identifiers"". Now (... since P2SH in 2012) addresses are encodings of a specific scriptPubKey it makes ",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-727623392,727623392,
luke-jr,2020-11-15 19:45:01,">Note: there is always the easy option of just fixing the reqSigs behavior instead of removing it. \n\nIf it's broken, we should fix it (for backporting) before removing.\n\n>It also makes me think {RPCResult::Type::ARR, ""addresses"", ""array of bitcoin addresses""} is a bit misleading, and would ideally be a single {RPCResult::Type::STR, ""address"", ""bitcoin address""}.\n\nI'm not sure the array",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-727625496,727625496,
mjdietzx,2020-11-18 22:44:40,"I've re-worked this PR, and force pushed, based on the convo/feedback in this thread. Broken into two commits:\n\n1. https://github.com/bitcoin/bitcoin/pull/20286/commits/f5d3cf6ceb3bb578bfce36959744ee7035eaf6c0 ""fixes"" `reqSigs`. Instead of defaulting to `1` which is confusing (and possibly incorrect?) `reqSigs` is not included in rpc outputs unless the transaction is a bare multisig.\n2. http",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-730004660,730004660,
sipa,2020-11-18 22:52:48,"@mjdietzx I think it's a bit weird to fix `""addresses""`/`""reqSigs""`, as it's making a semantics change simultaneously with a deprecation.\n\nMy suggestion would be to:\n* add a new sane `""address""` field (for outputs that have an identifiable address, which doesn't include bare multisig)\n* with -deprecatedrpc: leave `""reqSigs""` and `""addresses""` intact (with all weird/wrong behavior they have",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-730008260,730008260,
mjdietzx,2020-11-19 00:34:22,"I like the approach you've outlined @sipa. Any objections before I go ahead and do this @luke-jr? I know you weren't quite convinced re: `addresses` => `address`.\n",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-730045629,730045629,
luke-jr,2020-11-19 00:51:42,"I'd prefer to keep a single-item array (better compatibility, and future-proof), but I don't care enough to object.",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-730051410,730051410,
DrahtBot,2020-11-19 04:19:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21544 (rpc: Missing doc updates for bumpfee psbt update by MarcoFalke)\n* #21366 (refactor: replace util::Ref with std::a",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-730119441,730119441,
mjdietzx,2020-11-20 19:05:32,"I'll need to re-work some of the functional tests (will get this committed soon) now that `addresses` is removed by default, but https://github.com/bitcoin/bitcoin/pull/20286/commits/162e7f0969bf593e66ec2e59e24c4c555cd101f7 updates this PR to be as @sipa suggested",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-731354672,731354672,
mjdietzx,2020-11-23 18:28:45,"Piggy backing off of https://github.com/bitcoin/bitcoin/pull/20211, now that we have:\n\n```c++\nbool ExtractDestination(const CScript& scriptPubKey, TxoutType& typeRet, CTxDestination& addressRet);\n```\n\nCould we do something like:\n```c++\nTxoutType type;\nCTxDestination dest;\nExtractDestination(m_script, type, dest);\nswitch (type) {\ncase TxoutType::PUBKEYHASH:\ncase TxoutType:",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-732344695,732344695,
mjdietzx,2020-11-24 18:28:50,This PR is ready for review again. Squashed into two commits (bc https://github.com/bitcoin/bitcoin/pull/20286/commits/07ff0f7d15b99a40ec09f1315bcfcd9e4a6099a2 refactor was required to fix a circular dependency lint error introduced by using `IsDeprecatedRPCEnabled()` in `ScriptPubKeyToUniv()`),https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-733157242,733157242,
mjdietzx,2020-12-15 18:32:05,"Hey, this PR seems a bit dead in the water. Does anyone have suggestions on how I can help move this through the review process?\n\nMy guess is this change is making it hard to review: \nhttps://github.com/bitcoin/bitcoin/pull/20286/files#diff-d3f64e14005fbfea3d4f72b076764ac897d0df451de0ab2fb1c57a5f87cd793bR23-R26\n\nBut that is the most straightforward way I could see to get rid of a circula",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-745480972,745480972,
mjdietzx,2020-12-15 22:19:48,"> Concept and approach ACK on the first commit. The circular dependency fix seems weird to me as the CoinStatsHashType really belongs together with GetUTXOStates; moving it out makes its purpose very unclear, and makes the code more confusing, not less. The goal of the circular dependency checker is that such dependencies are usually a sign of bad design or hard-to-follow code, and we want to avoi",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-745604025,745604025,
mjdietzx,2020-12-16 02:09:01,"> 🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\nSquashed and rebased",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-745716408,745716408,
mjdietzx,2020-12-22 03:39:10,"Looks like this ones gonna miss the v0.21.0 boat 🚢\n\nEither way, want to see if there's anything I can do to help move this review forward. All feedback in this review until now has been addressed, and I squashed into single commit",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-749320232,749320232,
sipa,2020-12-28 18:36:05,"The compile error is probably due to a library dependency order (wallet/rpcwallet and rpc/server are in different libraries, so they may not be able to use each other in both directions). Try using `pwallet->chain().rpcEnableDeprecated(""addresses"")`.",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-751823136,751823136,
MarcoFalke,2020-12-28 20:22:29,Please squash your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits,https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-751852741,751852741,
MarcoFalke,2020-12-28 21:55:53,"Btw, you don't have to mention me in the commit message. All I did was some minor review suggestion. :sweat_smile: ",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-751876366,751876366,
mjdietzx,2020-12-28 22:02:27,"> Btw, you don't have to mention me in the commit message. All I did was some minor review suggestion. 😅\n\nAh ok, I think GH automatically added that since I committed your suggestion, I just took it out.\n\nAnyways thank you @MarcoFalke @sipa for all the review so far. I know this has been a kinda brutal review process for a minor change - I'm learning so write it off as an investment in a f",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-751877756,751877756,
sipa,2021-01-21 23:04:44,utACK 3c2b24b8f5798976e4d9b6b873f423e955098b47,https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-764997576,764997576,
mjdietzx,2021-01-25 15:53:30,Thanks for the review @MarcoFalke I will get all your comments addressed in the next few days (I'm getting through a busy period w my company right now so slightly slow),https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-766913656,766913656,
mjdietzx,2021-01-31 21:23:01,"@MarcoFalke your remaining comments are all addressed in this commit 2b74c73. I haven't squashed yet because I'm not sure if that would make reviewers lives more difficult or not. Anyways I'll squash it as appropriate once I get the ""please squash"" and address any remaining feedback",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-770453262,770453262,
MarcoFalke,2021-02-11 17:22:49,"re-ACK 732ad2d87bd15db2f42313e0f92b2857f0837f60 only changes are to address feedback 🤗\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 732ad2d87bd15db2f42313e0f92b2857f0837f60 only changes are to address feedback 🤗\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFA",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-777657294,777657294,
sipa,2021-02-19 20:06:34,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-782310797,782310797,
MarcoFalke,2021-02-22 09:38:35,"re-ACK 0d83a7326385bf012c1a34d766b96af11fa88979 only change is rebase 🤸\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 0d83a7326385bf012c1a34d766b96af11fa88979 only change is rebase 🤸\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhYywwA",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-783238537,783238537,
MarcoFalke,2021-03-02 09:50:16,"@sipa Mind to re-ACK? Should be close to merge, hopefully.",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-788776885,788776885,
MarcoFalke,2021-03-23 15:17:47,"re-ACK 90ae3d8ca68334ec712d67b21a8d4721c6d79788 📢\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 90ae3d8ca68334ec712d67b21a8d4721c6d79788 📢\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg6IAv+Ol7ckNRTmCxL9Ko6DB0jxK62hxEeAODWHiXIrB9y/1wT",https://github.com/bitcoin/bitcoin/pull/20286#issuecomment-804989241,804989241,
jonatack,2020-11-02 20:10:57,"Would these RPC removals need to go through the usual deprecation process?\n\n(See `doc/JSON-RPC-interface.md#versioning` for more, or search for pulls or commits with the word ""deprecate"".)",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r516226947,516226947,src/rpc/rawtransaction.cpp
prayank23,2020-11-02 21:54:33,Not sure about this change because `reqSigs` will be 2 in this case while testing,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r516276978,516276978,test/util/data/txcreatemultisig1.json
mjdietzx,2020-11-02 22:18:52,"Based on the discussion in the issue #20102 it seemed no one cares/uses bare multisig, and that we could just totally get rid of `reqSigs`. I'm not sure if this is really true, but figured I'd remove it and see what feedback I get in the PR",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r516288218,516288218,test/util/data/txcreatemultisig1.json
sipa,2020-12-15 18:34:12,I don't think it's technically true anymore in the current PR that this is only present for bare multisig (here and elsewhere).,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r543588029,543588029,src/rpc/rawtransaction.cpp
sipa,2020-12-15 18:42:43,This change seems to be in the wrong commit.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r543593773,543593773,src/rpc/blockchain.cpp
MarcoFalke,2020-12-16 08:36:18,"Can you explain what this is doing and why?\n\nAlso, the ci is failing",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r544108043,544108043,src/Makefile.am
mjdietzx,2020-12-16 15:51:48,"Since I've added `rpc/server.cpp` to `libbitcoin_common_a_SOURCES`, and `rpc/server.cpp` in turn includes `shutdown.h` and invokes `StartShutdown()` [here](https://github.com/bitcoin/bitcoin/blob/master/src/rpc/server.cpp#L172), I need to include `shutdown.cpp` in `libbitcoin_common_a_SOURCES`\n\nOtherwise we'll get a compile error:\n```sh\nUndefined symbols for architecture x86_64:\n  ""Start",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r544410623,544410623,src/Makefile.am
mjdietzx,2020-12-16 16:03:17,"Looks like I made a mistake resolving a merge conflict when I rebased to master, which caused CI to fail.\n\nThe CI error was:\n```sh\nGood job! The circular dependency ""policy/fees -> txmempool -> validation -> policy/fees"" is no longer present.\n458Please remove it from EXPECTED_CIRCULAR_DEPENDENCIES in test/lint/lint-circular-dependencies.sh\n459to make sure this circular dependency is no",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r544420077,544420077,src/Makefile.am
MarcoFalke,2020-12-22 08:22:27,Why are you changing the order?,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r547134259,547134259,src/core_write.cpp
MarcoFalke,2020-12-22 08:23:38,"Seems like a layer violation. You can add a `ScriptPubKeyToUniv` to `rpc/blockchain.h`, which calls this `ScriptPubKeyToUniv` and passes an additional boolean parameter with the value of `IsDeprecatedRPCEnabled('reqsiqs')`",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r547134776,547134776,src/core_write.cpp
MarcoFalke,2020-12-22 08:23:49,Same,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r547134887,547134887,src/core_write.cpp
MarcoFalke,2020-12-22 08:24:53,"```suggestion\nbool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n{\n```",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r547135361,547135361,src/script/standard.cpp
sipa,2020-12-27 04:06:41,"This doesn't seem addressed: https://github.com/bitcoin/bitcoin/pull/20286/files#r547134259 (it's ok if you disagree with the comment, or there is a good reason to - but do respond if you can).",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062026,549062026,src/core_write.cpp
sipa,2020-12-27 04:07:32,"I'd think that ""addresses"" being removed is a more prominent change, so perhaps the deprecatedrpc name should be ""addressed"" ?",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062094,549062094,src/core_write.cpp
sipa,2020-12-27 04:09:01,This should probably also get a changed comment.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062240,549062240,src/rpc/rawtransaction.cpp
sipa,2020-12-27 04:09:09,Same here.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062245,549062245,src/rpc/rawtransaction.cpp
sipa,2020-12-27 04:09:17,And here.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062249,549062249,src/rpc/rawtransaction.cpp
sipa,2020-12-27 04:09:29,And here.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062264,549062264,src/rpc/rawtransaction.cpp
sipa,2020-12-27 04:14:01,"It's pretty ugly to duplicate this logic in many places. I'd suggest just using `IsDeprecatedRPCEnabled`, in the top-level RPC code, and pass down a boolean to wherever it's needed (e.g. in core_write, make `ScriptPubKeyToUniv` take a boolean to indicate whether to not to include `reqSigs` / `addresses`).",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062533,549062533,src/wallet/rpcwallet.cpp
sipa,2020-12-27 04:15:14,Note that the next major release after 0.21 is going to be v22 (not v0.22); see https://github.com/bitcoin/bitcoin/pull/20223.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549062613,549062613,src/wallet/rpcwallet.cpp
mjdietzx,2020-12-27 19:54:10,"Edit: After thinking about it more, I agree - this is refactoring that doesn't belong in this PR. I reverted these refactors\n\n\n~~The first thing done in `ExtractDestination` is~~\n~~std::vector<valtype> vSolutions;~~\n~~whichType = Solver(scriptPubKey, vSolutions);~~\n~~so prior to this change, `Solver` code was duplicated and running twice (see the removed code in this diff).~~\n\n~~By",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549157343,549157343,src/core_write.cpp
mjdietzx,2020-12-27 19:58:05,"I changed the order here so that when the deprecation period is over, we just simply delete the `if (fIncludeDeprecated) {` branch. It also cleaned things up a bit as we don't need to push `out.pushKV(""type"", GetTxnOutputType(type));` twice. The behavior is the same though",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549157752,549157752,src/core_write.cpp
mjdietzx,2020-12-27 20:58:54,"I was able to do this how you and @MarcoFalke suggested in this commit https://github.com/bitcoin/bitcoin/pull/20286/commits/dba1053a5e0c74e53ded3d42c3826373474ba805. However, I'm a little confused by what's going on in `rpcwallet.cpp`. I'm able to use `IsDeprecatedRPCEnabled` here when I build and test locally (macOS), and it seems some of the CI test runs pass. However, some of the CI runs throw",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549163136,549163136,src/wallet/rpcwallet.cpp
mjdietzx,2020-12-27 21:02:44,"Edit: I got rid of any unnecessary refactors/changes here\n\n~~Anyways, if you think this is a bad idea or doesn't belong in this PR, I have no problem undoing these changes and trying to stick to the original code as closely as possible - just lmk. Part of the reason I added some fuzz tests in this PR https://github.com/bitcoin/bitcoin/pull/20772 was to help build confidence since these two fun",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549163402,549163402,src/core_write.cpp
mjdietzx,2020-12-28 16:47:17,"Please note this behavior for bare multisigs. I'm not totally sure what we want `address` to be in this case. For now I just made it the first `address` that `ExtractDestinations` sets in `addresses`. But maybe `address` should not be included for `type == TxoutType::MULTISIG`?\n\nLooking forward to when we get rid of the `deprecatedrpc=addresses` logic, we'll end up removing `ExtractDestination",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549412775,549412775,test/util/data/txcreatemultisig1.json
sipa,2020-12-28 16:48:48,"Bare multisig outputs should not have any address, because there is no address that corresponds to their scriptPubKey.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549413218,549413218,test/util/data/txcreatemultisig1.json
mjdietzx,2020-12-28 17:07:21,"Ok, done https://github.com/bitcoin/bitcoin/pull/20286/commits/98b7080d7eeece1081eed3c68dd092e974ad37ee",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549418692,549418692,test/util/data/txcreatemultisig1.json
sipa,2020-12-28 17:38:54,"Nit: follow the style guide in doc/developer-notes.md for new code (use snake_case, not fHungarianNotation).",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549427826,549427826,src/core_io.h
sipa,2020-12-28 17:39:35,Nit: follow coding style in doc/developer-notes.md for new code ({} around if/then/else blocks if spanning more than one line).,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549428059,549428059,src/core_write.cpp
sipa,2020-12-28 17:41:16,"It'd be better to use ExtractDestination here, I think, so you can avoid the need for special casing bare multisig.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549428505,549428505,src/core_write.cpp
sipa,2020-12-28 17:41:48,"Removing this seems incorrect, there are still core_io functions used in this .cpp file.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549428661,549428661,src/rpc/blockchain.cpp
sipa,2020-12-28 17:44:31,"I think this comment is more confusing than helpful. Multisig outputs do not _have_ an address; that's exactly what we're trying to address by removing the weird ""addresses"" reported for it. It's true of course that no ""address"" is listed, but there is also not one for P2PK, or whatever other weird scripts someone might invent. Perhaps just say ""(only if a well-defined address exists)"" ?\n\n~~ED",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549429414,549429414,src/rpc/blockchain.cpp
sipa,2020-12-28 17:50:58,"Making the `fIncludeAddresses` field  optional here makes this code a bit hard to review, as any call site that isn't changed may now reinterpret the true in e.g. `TxToUniv(tx, hash, entry, true)` as `fIncludeAddresses` rather than `include_hex`. There aren't that many call sites, so I'd suggest just making the new argument mandatory, and changing them all.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549431340,549431340,src/core_io.h
sipa,2020-12-28 18:21:56,There is only one invocation of this function in this .cpp file. Maybe just inline it?,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549441796,549441796,src/rpc/blockchain.cpp
sipa,2020-12-28 18:22:19,Nit: no need to change unrelated code. I just mentioned the version numbering change as an FYI.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549442026,549442026,src/rpc/net.cpp
sipa,2020-12-28 18:22:55,This file is still used.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549442440,549442440,src/rpc/rawtransaction.cpp
sipa,2020-12-28 18:23:39,Same comment about mentioning bare multisig here being confusing.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549443099,549443099,src/rpc/rawtransaction.cpp
sipa,2020-12-28 18:23:48,And here.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549443244,549443244,src/rpc/rawtransaction.cpp
sipa,2020-12-28 18:24:00,And here.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549443453,549443453,src/rpc/rawtransaction.cpp
sipa,2020-12-28 18:25:05,Still used.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549444215,549444215,src/test/fuzz/script.cpp
sipa,2020-12-28 18:26:04,"This is pretty ugly. The fuzz test shouldn't be using command-line options at all; just invoke the explicit-addresses version once with false and once with true, if you need to.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549444509,549444509,src/test/fuzz/script.cpp
sipa,2020-12-28 19:22:51,This is incorrect. Current master will become v22. This functionality can be removed in v23.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549460017,549460017,src/script/standard.cpp
sipa,2020-12-28 20:48:37,"See my earlier edit here: https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549429414\n\nFor ""address"" we shouldn't report anything for P2PK outputs either, as the address that's reported currently is really the P2PKH one for the same pubkey (and sending to that P2PKH address would have a distinct scriptPubKey). This is due to historical reasons where addresses used to also be ""pubkey id",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549482561,549482561,src/core_write.cpp
mjdietzx,2020-12-28 21:22:48,"I pushed a commit as you suggest: https://github.com/bitcoin/bitcoin/pull/20286/commits/97fbaffc4aea265d638895531dc3b3c84669c561\n\nI'm a little confused though. Aren't we already not reporting anything for P2PK bc we return here https://github.com/bitcoin/bitcoin/blob/master/src/core_write.cpp#L167, if `type == TxoutType::PUBKEY`?\n\nAlso, I want to know if this problem could affect us anywhe",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549490849,549490849,src/core_write.cpp
sipa,2020-12-28 21:31:10,"> I'm a little confused though. Aren't we already not reporting anything for P2PK bc we return here https://github.com/bitcoin/bitcoin/blob/master/src/core_write.cpp#L167, if `type == TxoutType::PUBKEY`?\n\nYou're right, this change isn't needed. It seems the specific P2PK case was already addressed earlier.\n\n> Also, I want to know if this problem could affect us anywhere else. It seems `Ext",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549492857,549492857,src/core_write.cpp
mjdietzx,2020-12-28 21:45:50,"OK, I'll go ahead and revert the commit since it isn't needed.\n\n> The code you're linking to is `ScriptToUniv`, not `ExtractDestination`. `ExtractDestination` does produce output for P2PK outputs. It makes sense to see what other call sites may be relying on this P2PK behavior though; if there aren't any, or they are all bogus, it may be easier to just drop support for P2PK in `ExtractDestinat",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549496290,549496290,src/core_write.cpp
sipa,2020-12-29 21:30:41,"Just noticed this: please don't remove this. This isn't doing anything confusing (it's reporting actual pubkeys, not addresses), and isn't restricted to bare multisig. Reporting detailed information about properly wrapped multisig isn't something we should remove.",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549856602,549856602,src/wallet/rpcwallet.cpp
mjdietzx,2020-12-30 02:30:33,Thanks for catching that - I reverted this change and updated the docs. re-squashed,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r549914891,549914891,src/wallet/rpcwallet.cpp
MarcoFalke,2021-01-22 13:17:46,"e2b814e315f011b6afea26a1ac10aa9f31b5fddb: This needs release notes \n\n```suggestion\n    TxToUniv(tx, uint256(), entry, /* include_addresses */ false);\n```",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562623851,562623851,src/bitcoin-tx.cpp
MarcoFalke,2021-01-22 13:24:12,"e2b814e315f011b6afea26a1ac10aa9f31b5fddb:\n\nThis is not safe in light of silent merge conflicts. Passing an array of bool args (some with default values) without named args can lead to bugs. I think there are two options:\n\n* Remove all default args (might be controversial)\n* Change the order so that no two neighbouring args have the same type\n\nI think you can just add the new arg to t",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562627500,562627500,src/core_io.h
MarcoFalke,2021-01-22 13:36:05,"unrelated nit\n\n```suggestion\n                                {RPCResult::Type::STR, ""asm"", """"},\n```",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562634287,562634287,src/rpc/blockchain.cpp
MarcoFalke,2021-01-22 13:42:23,"same commit:\n\nShould probably remove the comment. ""Multisig txns have more than one address...""",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562638000,562638000,src/script/standard.cpp
MarcoFalke,2021-01-22 14:34:32,"Also, missing release notes for rest",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562671601,562671601,doc/release-notes.md
MarcoFalke,2021-01-22 14:40:28,Can you explain why you are using this wrapper approach for `ScriptPubKeyToUniv` but not for `TxToUniv`. Either use it for both or none.,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r562675909,562675909,src/rpc/blockchain.cpp
mjdietzx,2021-01-31 21:21:57,"I updated `TxToUniv` to use this wrapper approach, so it is now used in both cases. As to why I went with this wrapper approach in the first place, it was suggested earlier in the review (unless I mis-interpreted something):\n\n`I'd suggest just using IsDeprecatedRPCEnabled, in the top-level RPC code, and pass down a boolean to wherever it's needed (e.g. in core_write, make ScriptPubKeyToUniv ta",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r567486094,567486094,src/core_io.h
mjdietzx,2021-01-31 21:58:22,"I meant for this to be a response to your other comment:\n""Can you explain why you are using this wrapper approach for ScriptPubKeyToUniv but not for TxToUniv. Either use it for both or none.""",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r567490453,567490453,src/core_io.h
MarcoFalke,2021-02-01 07:56:38,nit: could mention `/* include_addresses */` here as well for symmetry,https://github.com/bitcoin/bitcoin/pull/20286#discussion_r567621281,567621281,src/test/fuzz/transaction.cpp
mjdietzx,2021-02-01 17:14:58,"squashed, and I included this nit in the push",https://github.com/bitcoin/bitcoin/pull/20286#discussion_r567996771,567996771,src/test/fuzz/transaction.cpp
