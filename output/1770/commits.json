[
  {
    "sha": "9c94bdac0641b3df677d9ea19267e1838af36874",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzk0YmRhYzA2NDFiM2RmNjc3ZDllYTE5MjY3ZTE4MzhhZjM2ODc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-08-30T19:42:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-01T07:08:38Z"
      },
      "message": "RPC console: escaping within ' and \" now handled differently\n\nShould now mimic bash quoting and escaping (see http://wiki.bash-hackers.org/syntax/quoting) exactly,\nleaving out argument expansion and obscure syntax like $''.",
      "tree": {
        "sha": "2fd59ee0edfc5f69a53f48f52d215be253028db9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fd59ee0edfc5f69a53f48f52d215be253028db9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c94bdac0641b3df677d9ea19267e1838af36874",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c94bdac0641b3df677d9ea19267e1838af36874",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c94bdac0641b3df677d9ea19267e1838af36874",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c94bdac0641b3df677d9ea19267e1838af36874/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddbddcb31e298ad94f45547a72d0687ca323daa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddbddcb31e298ad94f45547a72d0687ca323daa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddbddcb31e298ad94f45547a72d0687ca323daa5"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 9,
      "deletions": 16
    },
    "files": [
      {
        "sha": "7d5b6fed53d6358aeb76c1de0572109c9a0df5a7",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c94bdac0641b3df677d9ea19267e1838af36874/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c94bdac0641b3df677d9ea19267e1838af36874/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9c94bdac0641b3df677d9ea19267e1838af36874",
        "patch": "@@ -55,14 +55,14 @@ void RPCExecutor::start()\n \n /**\n  * Split shell command line into a list of arguments. Aims to emulate \\c bash and friends.\n- * \n+ *\n  * - Arguments are delimited with whitespace\n  * - Extra whitespace at the beginning and end and between arguments will be ignored\n- * - Arguments can be \"double\" or 'single' quoted. Those are treated the same.\n- * - The backslash '\\' is used as escape character\n+ * - Text can be \"double\" or 'single' quoted\n+ * - The backslash \\c \\ is used as escape character\n  *   - Outside quotes, any character can be escaped\n- *   - Within double quotes, only escape double quotes with \\\" and backslashes with \\\\\n- *   - Within single quotes, only escape single quotes with \\' and backslashes with \\\\\n+ *   - Within double quotes, only escape \\c \" and backslashes before a \\c \" or another backslash\n+ *   - Within single quotes, no escaping is possible and no special interpretation takes place\n  *\n  * @param[out]   args        Parsed arguments will be appended to this list\n  * @param[in]    strCommand  Command line to split\n@@ -76,16 +76,15 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         STATE_SINGLEQUOTED,\n         STATE_DOUBLEQUOTED,\n         STATE_ESCAPE_OUTER,\n-        STATE_ESCAPE_SINGLEQUOTED,\n         STATE_ESCAPE_DOUBLEQUOTED\n     } state = STATE_EATING_SPACES;\n     std::string curarg;\n     foreach(char ch, strCommand)\n     {\n         switch(state)\n         {\n-        case STATE_ARGUMENT: // After argument\n-        case STATE_EATING_SPACES: // Handle runs of spaces\n+        case STATE_ARGUMENT: // In or after argument\n+        case STATE_EATING_SPACES: // Handle runs of whitespace\n             switch(ch)\n             {\n             case '\"': state = STATE_DOUBLEQUOTED; break;\n@@ -106,7 +105,6 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n             switch(ch)\n             {\n             case '\\'': state = STATE_ARGUMENT; break;\n-            case '\\\\': state = STATE_ESCAPE_SINGLEQUOTED; break;\n             default: curarg += ch;\n             }\n             break;\n@@ -121,12 +119,8 @@ bool parseCommandLine(std::vector<std::string> &args, const std::string &strComm\n         case STATE_ESCAPE_OUTER: // '\\' outside quotes\n             curarg += ch; state = STATE_ARGUMENT;\n             break;\n-        case STATE_ESCAPE_SINGLEQUOTED: // '\\' in single-quoted text\n-            if(ch != '\\'') curarg += '\\\\'; // keep '\\' for everything but the quote\n-            curarg += ch; state = STATE_SINGLEQUOTED;\n-            break;\n         case STATE_ESCAPE_DOUBLEQUOTED: // '\\' in double-quoted text\n-            if(ch != '\"') curarg += '\\\\'; // keep '\\' for everything but the quote\n+            if(ch != '\"' && ch != '\\\\') curarg += '\\\\'; // keep '\\' for everything but the quote and '\\' itself\n             curarg += ch; state = STATE_DOUBLEQUOTED;\n             break;\n         }\n@@ -181,8 +175,7 @@ void RPCExecutor::request(const QString &command)\n             emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(message) + \" (code \" + QString::number(code) + \")\");\n         }\n         catch(std::runtime_error &) // raised when converting to invalid type, i.e. missing code or message\n-        {\n-            // Show raw JSON object\n+        {   // Show raw JSON object\n             emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n         }\n     }"
      }
    ]
  }
]