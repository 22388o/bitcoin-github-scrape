DrahtBot,2019-07-16 22:33:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17985](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17985.html) (net: Remove forcerelay of rejected txs by M",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-512027094,512027094,
etscrivner,2019-10-02 14:34:27,"Agree with others that I think this works as a proof-of-concept. In my opinion, this still needs more work on tests, more extensive testing, and generalization beyond 2 transaction packages (up to some maximum package size).",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-537522080,537522080,
etscrivner,2019-10-02 17:55:46,Add some additional tests in this gist and have also addressed the TODO item: https://gist.github.com/etscrivner/19d5f942a973940aaaeb397bc5e0e0d9,https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-537608600,537608600,
ariard,2020-01-09 01:35:15,"In fact worry described [here](https://github.com/bitcoin/bitcoin/pull/16401#pullrequestreview-310569770) holds, I've modified the new test a bit to overflow the orphan pool with dumb-but-valid orphan pools and it succeeds to evict high-fee child tx easily, even with a low number of malicious orphans (200) : https://github.com/ariard/bitcoin/commit/e20ad2a44a830df7f04cf9bccf9e6791b73d2527",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-572339979,572339979,
sdaftuar,2020-01-09 04:01:38,"> It should be made really clear for off-chain protocol devs to always rebroadcast the whole package instead of only the parent or the child. I'm worrying about scenarii where a a commitment tx is broadcast, don't get into the mempool neither orphan one, latter the high-fee child is broadcast at the application logic and get into the orphan, an attacker overfulfill the orphan pool to discard the c",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-572373945,572373945,
ariard,2020-01-09 17:10:22,"Thanks for clarifying scope of this PR. I do think too it's good to split this project in multi-parts to focus on new mempool acceptance logic, specially what the worst width/depth of a chain of messy transactions we select as a package submission DoS bound.\n\nThat's said, we may reduce the risks of mempool CPU DoS by implementing the right measures at the p2p level like rate-limiting per-peer ",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-572660103,572660103,
sdaftuar,2020-01-29 14:55:24,"I'm starting to think that perhaps the use case here isn't really worth it -- I tried to split off what I thought would be a simple use case (of processing some orphan transactions as packages with their rejected parents), but it turns out to be a bit trickier than I expected, and given that we'd just throw this away if we implemented an actual package relay protocol anyway this seems like wasted ",https://github.com/bitcoin/bitcoin/pull/16401#issuecomment-579792532,579792532,
ajtowns,2019-07-25 01:24:09,"Moving the `&` in `CTxMemPool &pool` seems like a typo. Also you don't actually need the `view` method in the header, could just make it a static.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307082337,307082337,src/validation.h
ajtowns,2019-07-25 01:27:48,"g_cs_orphans is already locked earlier in the path (`LOCK2(cs_main, g_cs_orphans)`)",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307082891,307082891,src/net_processing.cpp
ajtowns,2019-07-25 01:36:56,tx_list should be `const &` afaics.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307084354,307084354,src/validation.cpp
ajtowns,2019-07-25 01:54:08,"Adding a `Workspace::m_cpfpable` bool set to true for all but the last tx, and setting `const bool bypass_limits = args.bypass_limits || ws.cpfpable` seems better to me, fwiw.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307087216,307087216,src/validation.cpp
ajtowns,2019-07-25 01:55:34,adding `Workspace& ws = tx_workspaces.back();` maybe makes this loop a bit tidier?,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307087452,307087452,src/validation.cpp
ajtowns,2019-07-25 02:12:17,"This check could be done first, before even setting up the workspaces, as far as I can see.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307090151,307090151,src/validation.cpp
ajtowns,2019-07-25 02:17:43,"This seems like it would be a good case for the `CHECK` macro from #16136 (if it logged failures, anyway)...",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307090985,307090985,src/validation.cpp
ajtowns,2019-07-25 02:18:13,"Would be nice if C++11 had a ""zip"" iterator... FWIW, you could do this as:\n\n```\nstruct WorkspaceAndTxData { Workspace ws; PrecomputedTransactionData* ptxdata; };\nstd::list<WorkspaceAndTxData> tx_workspaces;\n...\nfor (auto& wstxd : tx_workspaces) {\n    txdata.emplace_back(*wstxd.ws.m_ptx);\n    wstxd.ptxdata = &txdata.back();\n}\n```\n\nand only have to loop over `tx_workspaces`, ",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307091065,307091065,src/validation.cpp
ajtowns,2019-07-25 02:30:42,Might as well do this test before looping over all_ancestors,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307092986,307092986,src/validation.cpp
ajtowns,2019-07-25 03:22:18,"I think once this is more baked, it'd be good to pull sections of this out into their own private MemPoolAccept:: methods so the overall logic in this function is as clear as the logic in AcceptSingleTransaction",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r307100725,307100725,src/validation.cpp
sdaftuar,2019-07-29 19:23:28,Fixed.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r308396410,308396410,src/validation.h
sdaftuar,2019-07-29 19:23:48,Fixed.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r308396557,308396557,src/net_processing.cpp
sdaftuar,2019-07-29 19:23:54,Fixed.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r308396598,308396598,src/validation.cpp
sdaftuar,2019-07-29 19:24:02,"Looks good, done.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r308396657,308396657,src/validation.cpp
sdaftuar,2019-07-29 19:24:08,Agreed.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r308396715,308396715,src/validation.cpp
NicolasDorier,2019-09-30 08:21:36,"As far as I see, in the current code code paths, the max number of elements in `package_tx` is two.\nBut maybe there should be a hard limit, even if high, at this level just in case?",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r329457822,329457822,src/txmempool.h
etscrivner,2019-10-01 14:57:05,"This is probably also a good spot for a `DCHECK` just to ensure that the assumption - ""this must pass based on the checks above"" - holds here.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r330106204,330106204,src/validation.cpp
pinheadmz,2019-10-02 13:37:22,"I might be misunderstanding, but it looks like the _first_ tx fee rate is set to 2 sat/kB (actual total fee on this tx comes out to a single sat) and the second tx fee rate is set to 50000 (actual total fee ~0.000083)?",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r330552914,330552914,test/functional/feature_package_relay.py
fjahr,2019-10-02 16:22:52,Maybe also add a check for `g_orphan_list.size() > 0` here? But I am not experienced with the orphan pool so it may be fair to leave it out if the orphan pool is populated 99% of the time.,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r330645988,330645988,src/net_processing.cpp
pinheadmz,2019-10-02 17:26:42,Couldn't this `p2p` variable be defined up on line 67?,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r330675635,330675635,test/functional/feature_package_relay.py
ariard,2019-10-31 22:53:00,"I think the new wrapper doesn't do what the removed comment intended? Can't we pass `coins_cache` defined above instead of defining a new one, would work too in `removeForReorg` ? Also isn't this a behavior change as coin is fetched from UTXO set instead from mempool?\n\nThis change is may worth its own commit.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341397607,341397607,src/validation.cpp
ariard,2019-10-31 22:58:05,"`EXCLUSIVE_LOCKS_REQUIRED(pool.cs, cs_main)`? (wrapper and `AcceptMultipleTransactions` too)",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341398695,341398695,src/validation.cpp
ariard,2019-10-31 23:03:52,"""or being CPFP'ed by another tx"" ",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341399951,341399951,src/validation.cpp
ariard,2019-10-31 23:23:41,"Could have a better name like `package_pool` just to underscore we have multiple pending txn. I didn't get the rational at first read, I think you can explain given we have mempool locked and can't write until we have the whole set of tx, we need this temporary buffer to find outpoints of package txn after first row of parents. If this to work assuming topological ordering it should be documented?",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341404029,341404029,src/txmempool.h
ariard,2019-10-31 23:48:52,"+1 for conflicts isolation for now. But IMO we may have to solve child conflicts in a way or another if people start to use one CPFP to bump multiple multi-party txn, like Alice broadcast commitment tx 1 + CPFP child tx, txn get into mempool, now she have to broadcast commitment tx 2 but doesn't have another UTXO available and can't CPFP output as going beyond carve-out relaxation..",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341408958,341408958,src/validation.cpp
ariard,2019-11-01 00:35:46,Rational?,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341416526,341416526,src/validation.cpp
ariard,2019-11-01 16:50:35,Can be reused too in ProcessOrphanTx,https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341658477,341658477,src/net_processing.cpp
ariard,2019-11-01 17:33:17,"If I broadcast a second CPFP due to to the first one being still too low but this one still being in the orphan pool, you need to iter and try with the whole set not only picking up the first transaction ? That would be a DoS vector bounded by the size of the orphan pool, and maybe it can be mitigate by caching the package already-tried.",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341676157,341676157,src/net_processing.cpp
ariard,2019-11-01 18:09:20,"If package wasn't accepted (like a high-fee invalid orphan tx),  and if inputs are not missing, if orphan_tx is invalid we may punish peer, or at least erase it for not being standard or insufficient fee? ",https://github.com/bitcoin/bitcoin/pull/16401#discussion_r341690775,341690775,src/net_processing.cpp
