[
  {
    "sha": "efb54ba065e41e0d36383bcabfcc01bbca7b2340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmI1NGJhMDY1ZTQxZTBkMzYzODNiY2FiZmNjMDFiYmNhN2IyMzQw",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-04-25T20:13:52Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-04-26T01:06:44Z"
      },
      "message": "lock cs_main for State/Misbehaving\n\nProcessMessage calls State(...) and Misbehaving(...) without holding the\nrequired lock; add LOCK(cs_main) blocks.",
      "tree": {
        "sha": "0fbe91fe0060a74d96d792887e1b4a96b0b08d6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fbe91fe0060a74d96d792887e1b4a96b0b08d6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efb54ba065e41e0d36383bcabfcc01bbca7b2340",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb54ba065e41e0d36383bcabfcc01bbca7b2340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efb54ba065e41e0d36383bcabfcc01bbca7b2340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb54ba065e41e0d36383bcabfcc01bbca7b2340/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46880ed2fd961c29b5fe4f841c747951bc706912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46880ed2fd961c29b5fe4f841c747951bc706912",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46880ed2fd961c29b5fe4f841c747951bc706912"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a85ee46d5aa7d02e5aa88c31124c3d2d1b792eeb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb54ba065e41e0d36383bcabfcc01bbca7b2340/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb54ba065e41e0d36383bcabfcc01bbca7b2340/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=efb54ba065e41e0d36383bcabfcc01bbca7b2340",
        "patch": "@@ -4514,6 +4514,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                strCommand == NetMsgType::FILTERCLEAR))\n     {\n         if (pfrom->nVersion >= NO_BLOOM_VERSION) {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n             return false;\n         } else {\n@@ -4529,6 +4530,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pfrom->nVersion != 0)\n         {\n             pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n         }\n@@ -4584,7 +4586,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n \n         // Potentially mark this peer as a preferred download peer.\n+        {\n+        LOCK(cs_main);\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n+        }\n \n         // Change version\n         pfrom->PushMessage(NetMsgType::VERACK);\n@@ -4642,6 +4647,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (pfrom->nVersion == 0)\n     {\n         // Must have a version message before anything else\n+        LOCK(cs_main);\n         Misbehaving(pfrom->GetId(), 1);\n         return false;\n     }\n@@ -4677,6 +4683,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         if (vAddr.size() > 1000)\n         {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 20);\n             return error(\"message addr size() = %u\", vAddr.size());\n         }\n@@ -4746,6 +4753,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 20);\n             return error(\"message inv size() = %u\", vInv.size());\n         }\n@@ -4821,6 +4829,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 20);\n             return error(\"message getdata size() = %u\", vInv.size());\n         }\n@@ -5074,6 +5083,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Bypass the normal CBlock deserialization, as we don't want to risk deserializing 2000 full blocks.\n         unsigned int nCount = ReadCompactSize(vRecv);\n         if (nCount > MAX_HEADERS_RESULTS) {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 20);\n             return error(\"headers message size = %u\", nCount);\n         }\n@@ -5350,8 +5360,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vRecv >> filter;\n \n         if (!filter.IsWithinSizeConstraints())\n+        {\n             // There is no excuse for sending a too-large filter\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n+        }\n         else\n         {\n             LOCK(pfrom->cs_filter);\n@@ -5372,13 +5385,17 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // and thus, the maximum size any matched object can have) in a filteradd message\n         if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         {\n+            LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n         } else {\n             LOCK(pfrom->cs_filter);\n             if (pfrom->pfilter)\n                 pfrom->pfilter->insert(vData);\n             else\n+            {\n+                LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), 100);\n+            }\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "719de56ab2c8e5bc6ce9f67c7bf159adc242d49b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTlkZTU2YWIyYzhlNWJjNmNlOWY2N2M3YmYxNTlhZGMyNDJkNDli",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-04-25T19:31:32Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-04-26T01:12:30Z"
      },
      "message": "lock cs_main for chainActive\n\nActivateBestChain uses chainActive after releasing the lock; reorder operations\nto move all access to synchronized object into existing LOCK(cs_main) block.",
      "tree": {
        "sha": "940861fb55007ca4afd1c659858b48c2748bee90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/940861fb55007ca4afd1c659858b48c2748bee90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efb54ba065e41e0d36383bcabfcc01bbca7b2340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb54ba065e41e0d36383bcabfcc01bbca7b2340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efb54ba065e41e0d36383bcabfcc01bbca7b2340"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "83fc4d6bd88431126a14c993774e761c22cbb25a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/719de56ab2c8e5bc6ce9f67c7bf159adc242d49b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=719de56ab2c8e5bc6ce9f67c7bf159adc242d49b",
        "patch": "@@ -2897,14 +2897,15 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n  */\n bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n+    CBlockIndex *pindexNewTip = NULL;\n     do {\n         boost::this_thread::interruption_point();\n         if (ShutdownRequested())\n             break;\n \n-        CBlockIndex *pindexNewTip = NULL;\n         const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n+        int nNewHeight;\n         {\n             LOCK(cs_main);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2920,6 +2921,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n+            nNewHeight = chainActive.Height();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n@@ -2948,7 +2950,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 {\n                     LOCK(cs_vNodes);\n                     BOOST_FOREACH(CNode* pnode, vNodes) {\n-                        if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n                             BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n                                 pnode->PushBlockHash(hash);\n                             }\n@@ -2961,7 +2963,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 }\n             }\n         }\n-    } while(pindexMostWork != chainActive.Tip());\n+    } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n \n     // Write changes periodically to disk, after relay."
      }
    ]
  }
]