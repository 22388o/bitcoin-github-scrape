[
  {
    "sha": "784ae096259955ea7a294114f5c021c9489d2717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODRhZTA5NjI1OTk1NWVhN2EyOTQxMTRmNWMwMjFjOTQ4OWQyNzE3",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-18T04:15:55Z"
      },
      "committer": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-18T15:48:04Z"
      },
      "message": "test: Add capability to disable RPC timeout in functional tests.\n\nModifies the existing --factor flag to --timeout-factor to better express intent.\nAdds rules to disable timeout if --timeout-factor is set to 0.\nModfies --timeout-factor help doc to inform users about this feature.",
      "tree": {
        "sha": "c9551ff0a48056cd6014f0f5f1a09b87c8eda5f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9551ff0a48056cd6014f0f5f1a09b87c8eda5f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/784ae096259955ea7a294114f5c021c9489d2717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/784ae096259955ea7a294114f5c021c9489d2717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/784ae096259955ea7a294114f5c021c9489d2717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/784ae096259955ea7a294114f5c021c9489d2717/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc5333d31f280e09bb1e8cdacfbe842f4ab9e69b"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "bbd7350bf15805f24547b4eed620f814388f886e",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=784ae096259955ea7a294114f5c021c9489d2717",
        "patch": "@@ -122,9 +122,9 @@ def __init__(self):\n     def is_connected(self):\n         return self._transport is not None\n \n-    def peer_connect(self, dstaddr, dstport, *, net, factor):\n+    def peer_connect(self, dstaddr, dstport, *, net, timeout_factor):\n         assert not self.is_connected\n-        self.factor = factor\n+        self.timeout_factor = timeout_factor\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         # The initial message to send after the connection was made:\n@@ -372,7 +372,7 @@ def on_version(self, message):\n     # Connection helper methods\n \n     def wait_until(self, test_function, timeout):\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock, factor=self.factor)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock, timeout_factor=self.timeout_factor)\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.is_connected"
      },
      {
        "sha": "6126efd842b716974d295c6e136bc2accffb4df5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=784ae096259955ea7a294114f5c021c9489d2717",
        "patch": "@@ -102,7 +102,9 @@ def __init__(self):\n         self.bind_to_localhost_only = True\n         self.set_test_params()\n         self.parse_args()\n-        self.rpc_timeout = int(self.rpc_timeout * self.options.factor) # optionally, increase timeout by a factor\n+        if self.options.timeout_factor == 0 :\n+            self.options.timeout_factor = 99999\n+        self.rpc_timeout = int(self.rpc_timeout * self.options.timeout_factor) # optionally, increase timeout by a factor\n \n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n@@ -169,7 +171,7 @@ def parse_args(self):\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n         parser.add_argument(\"--descriptors\", default=False, action=\"store_true\",\n                             help=\"Run test using a descriptor wallet\")\n-        parser.add_argument('--factor', type=float, default=1.0, help='adjust test timeouts by a factor')\n+        parser.add_argument('--timeout-factor', dest=\"timeout_factor\", type=float, default=1.0, help='adjust test timeouts by a factor. Setting it to 0 disables all timeouts')\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n@@ -445,7 +447,7 @@ def get_bin_from_version(version, bin_name, bin_default):\n                 chain=self.chain,\n                 rpchost=rpchost,\n                 timewait=self.rpc_timeout,\n-                factor=self.options.factor,\n+                timeout_factor=self.options.timeout_factor,\n                 bitcoind=binary[i],\n                 bitcoin_cli=binary_cli[i],\n                 version=versions[i],\n@@ -592,7 +594,7 @@ def _initialize_chain(self):\n                     extra_args=['-disablewallet'],\n                     rpchost=None,\n                     timewait=self.rpc_timeout,\n-                    factor=self.options.factor,\n+                    timeout_factor=self.options.timeout_factor,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n                     coverage_dir=None,"
      },
      {
        "sha": "d52aff6f7e6c2b1b357e2bd679e078af07b4f536",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=784ae096259955ea7a294114f5c021c9489d2717",
        "patch": "@@ -62,7 +62,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, timeout_factor, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -128,7 +128,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bi\n         self.perf_subprocesses = {}\n \n         self.p2ps = []\n-        self.factor = factor\n+        self.timeout_factor = timeout_factor\n \n     AddressKeyPair = collections.namedtuple('AddressKeyPair', ['address', 'key'])\n     PRIV_KEYS = [\n@@ -241,7 +241,7 @@ def wait_for_rpc_connection(self):\n                     # The wait is done here to make tests as robust as possible\n                     # and prevent racy tests and intermittent failures as much\n                     # as possible. Some tests might not need this, but the\n-                    # overhead is trivial, and the added gurantees are worth\n+                    # overhead is trivial, and the added guarantees are worth\n                     # the minimal performance cost.\n                 self.log.debug(\"RPC successfully started\")\n                 if self.use_cli:\n@@ -349,13 +349,13 @@ def is_node_stopped(self):\n         return True\n \n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n-        wait_until(self.is_node_stopped, timeout=timeout, factor=self.factor)\n+        wait_until(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\n \n     @contextlib.contextmanager\n     def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n-        time_end = time.time() + timeout * self.factor\n+        time_end = time.time() + timeout * self.timeout_factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n@@ -512,7 +512,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n \n-        p2p_conn.peer_connect(**kwargs, net=self.chain, factor=self.factor)()\n+        p2p_conn.peer_connect(**kwargs, net=self.chain, timeout_factor=self.timeout_factor)()\n         self.p2ps.append(p2p_conn)\n         if wait_for_verack:\n             # Wait for the node to send us the version and verack\n@@ -526,7 +526,7 @@ def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n             # transaction that will be added to the mempool as soon as we return here.\n             #\n             # So syncing here is redundant when we only want to send a message, but the cost is low (a few milliseconds)\n-            # in comparision to the upside of making tests less fragile and unexpected intermittent errors less likely.\n+            # in comparison to the upside of making tests less fragile and unexpected intermittent errors less likely.\n             p2p_conn.sync_with_ping()\n \n         return p2p_conn"
      },
      {
        "sha": "6dfea7efd22e7d6f28eb9e56e047d0fbed107353",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/784ae096259955ea7a294114f5c021c9489d2717/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=784ae096259955ea7a294114f5c021c9489d2717",
        "patch": "@@ -208,10 +208,10 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n-def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None, factor=1.0):\n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None, timeout_factor=1.0):\n     if attempts == float('inf') and timeout == float('inf'):\n         timeout = 60\n-    timeout = timeout * factor\n+    timeout = timeout * timeout_factor\n     attempt = 0\n     time_end = time.time() + timeout\n "
      }
    ]
  },
  {
    "sha": "38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGMzZGQ5YzcwNmU3ZTg0YjJhNGRiYWYxNDI0YTNmMWMzYjY5NGZj",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-18T04:22:06Z"
      },
      "committer": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-18T15:48:40Z"
      },
      "message": "docs: Add notes on how to diasble rpc timeout in functional tests while attatching gdb.",
      "tree": {
        "sha": "25ec2bf313e61357675517d9849bfe114da8891f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25ec2bf313e61357675517d9849bfe114da8891f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "784ae096259955ea7a294114f5c021c9489d2717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/784ae096259955ea7a294114f5c021c9489d2717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/784ae096259955ea7a294114f5c021c9489d2717"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0210907878e26ccf3668f86bda01c90e85928dee",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=38c3dd9c706e7e84b2a4dbaf1424a3f1c3b694fc",
        "patch": "@@ -225,6 +225,10 @@ gdb /home/example/bitcoind <pid>\n Note: gdb attach step may require ptrace_scope to be modified, or `sudo` preceding the `gdb`.\n See this link for considerations: https://www.kernel.org/doc/Documentation/security/Yama.txt\n \n+Often while debugging rpc calls from functional tests, the test might reach timeout before\n+process can return a response. Use `--timeout-factor 0` to disable all rpc timeouts for that partcular\n+functional test. Ex: `test/functional/wallet_hd.py --timeout-factor 0`.\n+\n ##### Profiling\n \n An easy way to profile node performance during functional tests is provided"
      }
    ]
  }
]