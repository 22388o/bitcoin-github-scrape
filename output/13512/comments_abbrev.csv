MarcoFalke,2018-06-21T18:07:18Z,"The reason I split those into two bools is that we are only really interested in one (`conn_open`) and a bool can represent all states we are interested in. The `asyncore_pre_connection` is an implementation detail of `asyncore` and will disappear the same time `asyncore` disappears. Imo, no need to artificially introduce an enum and then flatten it again to a bool in a follow up commit.",https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399193989,399193989,
jnewbery,2018-06-21T19:27:33Z,">  no need to artificially introduce an enum and then flatten it again\n\nI disagree that this is artificially introducing an enum. `P2PConnection.state` already is an enum, just implemented in a really bad way :) why not just wait to flatten it to a bool when the `P2PConnection` implementation is changed to asyncio or whatever?\n\ntbh though, this is just nitting. Fine to split this to two bo",https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399216309,399216309,
MarcoFalke,2018-06-21T19:31:28Z,Made both bools private members,https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399217307,399217307,
jnewbery,2018-06-21T21:28:19Z,`p2p_sendheaders.py` fails. I have logs from a local failure if you want them.,https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399249293,399249293,
MarcoFalke,2018-06-22T01:25:54Z,"No need to ask for permission. Just throw them at me\n\nOn Thu, Jun 21, 2018, 17:29 John Newbery <notifications@github.com> wrote:\n\n> p2p_sendheaders.py fails. I have logs from a local failure if you want\n> them.\n>\n> â€”\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399",https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399292139,399292139,
jnewbery,2018-06-22T16:00:36Z,"I coudn't repro the p2p_sendheaders failure.\n\nInvestigating a bit, I see that there's a pre-existing race condition in that test: #13522, so the failure that I saw locally and on travis isn't related to this PR.",https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399492265,399492265,
jnewbery,2018-06-22T16:02:06Z,Tested ACK fa1eac9cdb1a491d5947b6972b87833792a16fe3,https://github.com/bitcoin/bitcoin/pull/13512#issuecomment-399492776,399492776,
jnewbery,2018-06-21T17:39:54Z,suggestion: change this to a property (use `@property` decorator),https://github.com/bitcoin/bitcoin/pull/13512#discussion_r197219693,197219693,test/functional/test_framework/mininode.py
MarcoFalke,2018-06-21T18:15:22Z,"I believe this doesn't work when the implementation details change and we no longer return a member. That is, when we derive the return value with an expression. E.g. `self._transport is not None` or `self._state == State.CONNECTED` or ...",https://github.com/bitcoin/bitcoin/pull/13512#discussion_r197230743,197230743,test/functional/test_framework/mininode.py
jnewbery,2018-06-21T19:16:44Z,It should still work. a `@property` decorated method can do anything any other method can do.,https://github.com/bitcoin/bitcoin/pull/13512#discussion_r197248851,197248851,test/functional/test_framework/mininode.py
MarcoFalke,2018-06-21T19:27:43Z,Ah thanks for clarifying. Reworked the patch to make it a property.,https://github.com/bitcoin/bitcoin/pull/13512#discussion_r197251587,197251587,test/functional/test_framework/mininode.py
