[
  {
    "sha": "ca003b407b2c5f97d3b24f05d6bda625bba02bde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTAwM2I0MDdiMmM1Zjk3ZDNiMjRmMDVkNmJkYTYyNWJiYTAyYmRl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-09T13:52:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-03-10T08:16:10Z"
      },
      "message": "Allow to use unsolveable P2PKH watch-only in fundrawtransaction",
      "tree": {
        "sha": "d20cf9b1b3b5db345886d4e6df613cc78384b9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20cf9b1b3b5db345886d4e6df613cc78384b9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca003b407b2c5f97d3b24f05d6bda625bba02bde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAljCYMsACgkQHrd2uwPH\nki3QRw//fGXNZlTRt+LNT8s0MYOh/pvsZwHgDZYwZc656S62dirb4Iq/4ryy4QA/\nSe5eIGeEIlWEiZjeTJ5c6FffltMJUnincYO4RdYqrbU/UZS98DDH/XcOXrJ5WCcE\nWiI0shCXk4vDEk4Ods9niNqxbNn8ppcQY2y4MxW2DqXPPZzUcBA9Z4VBsZxOAXpe\nzSAyxJIEoLgJLcJaFw75rCy39l4x2pVMbj3htgmtl6cCAVG+r1TD/qkLAweek1sf\njJR5yrlq5NUfZxzeIADQPub1Z8/7blV4mOgBdrq7rXjwUJYmaxwrOU6jaCwuals2\n3YV8YAne+lnELABNmq0vsgPWNDpl8zZzSho2tMBF/1htspkfG4MzbKFiiicwwFos\nTTcI56f9NHrRdQ2XlhTUkeQ574cjJyoDIBZeBNOVl2sWInILcGiqxHt9zCZhdjey\no8BOZ7kF6jXNn3GskljIXGGSdgKlLVzdYHi8JJ5rT9RT7cLW3l+I/3kENi1pXwNO\nfZj4mVFG2PwX0Esv9rPlaWoL+0z+gLpRpZhxaHeN2fCJv+xG4ybyAORNhiOlHGWh\n6sOtzsubKEfIPXH98IOpLHuNMSUVWSblE5ii1UbWx3BiVum363NGvp6LjRd6yQxM\n+wEVC3dSV4syb6YNs0nzlMr316JzhcIbmeEAnsA4ysDb3V8MDUg=\n=v1yO\n-----END PGP SIGNATURE-----",
        "payload": "tree d20cf9b1b3b5db345886d4e6df613cc78384b9dc\nparent e3e7db829ecd31b0327cff62048ea83ed97f7063\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1489067558 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1489133770 +0100\n\nAllow to use unsolveable P2PKH watch-only in fundrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca003b407b2c5f97d3b24f05d6bda625bba02bde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca003b407b2c5f97d3b24f05d6bda625bba02bde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca003b407b2c5f97d3b24f05d6bda625bba02bde/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3e7db829ecd31b0327cff62048ea83ed97f7063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e7db829ecd31b0327cff62048ea83ed97f7063",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e7db829ecd31b0327cff62048ea83ed97f7063"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1a342a4a57d8ba181cf12284b1a2c56322cbde75",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca003b407b2c5f97d3b24f05d6bda625bba02bde/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca003b407b2c5f97d3b24f05d6bda625bba02bde/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=ca003b407b2c5f97d3b24f05d6bda625bba02bde",
        "patch": "@@ -56,10 +56,13 @@ def run_test(self):\n         self.sync_all()\n \n         watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_address2= self.nodes[0].getnewaddress()\n         watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        self.nodes[3].importaddress(watchonly_address2)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        watchonly_txid2 = self.nodes[0].sendtoaddress(watchonly_address2, Decimal(2))\n         self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10)\n \n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n@@ -592,6 +595,16 @@ def run_test(self):\n         assert(\"fee\" in result.keys())\n         assert_greater_than(result[\"changepos\"], -1)\n \n+        ##################################################################\n+        # test a fundrawtransaction using only watchonly (P2PKH address) #\n+        ##################################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount + Decimal(1)}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+        result = self.nodes[3].fundrawtransaction(rawtx, {'includeWatching': True })\n+        assert(\"fee\" in result.keys())\n+\n         ###############################################################\n         # test fundrawtransaction using the entirety of watched funds #\n         ###############################################################"
      },
      {
        "sha": "7b7b745410e1db9b82e819a16c5ad33bb6f53fd4",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca003b407b2c5f97d3b24f05d6bda625bba02bde/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca003b407b2c5f97d3b24f05d6bda625bba02bde/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=ca003b407b2c5f97d3b24f05d6bda625bba02bde",
        "patch": "@@ -367,14 +367,12 @@ def run_test(self):\n \n         op1 = CScript([OP_1])\n         op0 = CScript([OP_0])\n-        # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n-        unsolvable_address = [\"mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\", \"2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe\", script_to_p2sh(op1), script_to_p2sh(op0)]\n+        unsolvable_address = [script_to_p2sh(op1), script_to_p2sh(op0)]\n         unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n         unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n         unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n         p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n         p2wshop1 = CScript([OP_0, sha256(op1)])\n-        unsolvable_after_importaddress.append(unsolvablep2pkh)\n         unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n         unsolvable_after_importaddress.append(op1) # OP_1 will be imported as script\n         unsolvable_after_importaddress.append(p2wshop1)"
      },
      {
        "sha": "c0d9253ac4f9c29354f7de555d2ebc4815e54327",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=ca003b407b2c5f97d3b24f05d6bda625bba02bde",
        "patch": "@@ -147,6 +147,9 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n \n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n+        if (whichType == TX_PUBKEYHASH) {\n+            return ISMINE_WATCH_SOLVABLE;\n+        }\n         SignatureData sigs;\n         return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }"
      },
      {
        "sha": "08adc48f522a3b64c9e909660f152cd688624286",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ca003b407b2c5f97d3b24f05d6bda625bba02bde",
        "patch": "@@ -184,7 +184,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     sigdata.scriptSig = PushAll(result);\n \n     // Test solution\n-    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return solved && (!creator.ShouldVerifySig() || VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker()));\n }\n \n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)"
      },
      {
        "sha": "4e03990dd3bf961ba44f3376d40640d80890cf29",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca003b407b2c5f97d3b24f05d6bda625bba02bde/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ca003b407b2c5f97d3b24f05d6bda625bba02bde",
        "patch": "@@ -28,6 +28,7 @@ class BaseSignatureCreator {\n \n     /** Create a singular (non-script) signature. */\n     virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n+    virtual bool ShouldVerifySig() const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -42,6 +43,7 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    bool ShouldVerifySig() const { return true; }\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -57,6 +59,7 @@ class DummySignatureCreator : public BaseSignatureCreator {\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n     const BaseSignatureChecker& Checker() const;\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    bool ShouldVerifySig() const { return false; }\n };\n \n struct SignatureData {"
      }
    ]
  }
]