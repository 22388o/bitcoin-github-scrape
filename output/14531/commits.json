[
  {
    "sha": "8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzA4MTU5ZThiNWYxOTJhMDNjYmM2NDk0NGMwZjVhYTg2MWNiYzU3",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-25T13:56:16Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-21T08:18:38Z"
      },
      "message": "wallet: Fix duplicate fileid",
      "tree": {
        "sha": "b9de3732db4bf33530d0567bc57742e79538f3f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9de3732db4bf33530d0567bc57742e79538f3f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c08159e8b5f192a03cbc64944c0f5aa861cbc57/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c25409d6851182c5e351720cee36812c229b77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c25409d6851182c5e351720cee36812c229b77a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c25409d6851182c5e351720cee36812c229b77a"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 23,
      "deletions": 12
    },
    "files": [
      {
        "sha": "36c93cbf224ad143b66be220de7344c97d7e3c82",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c08159e8b5f192a03cbc64944c0f5aa861cbc57/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c08159e8b5f192a03cbc64944c0f5aa861cbc57/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
        "patch": "@@ -20,6 +20,7 @@\n #include <boost/thread.hpp>\n \n namespace {\n+\n //! Make sure database has a unique fileid within the environment. If it\n //! doesn't, throw an error. BDB caches do not work properly when more than one\n //! open database has the same fileid (values written to one database may show\n@@ -29,25 +30,19 @@ namespace {\n //! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n //! so bitcoin should never create different databases with the same fileid, but\n //! this error can be triggered if users manually copy database files.\n-void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db)\n+void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db, BerkeleyFileid& fileid)\n {\n     if (env.IsMock()) return;\n \n-    u_int8_t fileid[DB_FILE_ID_LEN];\n-    int ret = db.get_mpf()->get_fileid(fileid);\n+    int ret = db.get_mpf()->get_fileid(fileid.value);\n     if (ret != 0) {\n         throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n     }\n \n-    for (const auto& item : env.mapDb) {\n-        u_int8_t item_fileid[DB_FILE_ID_LEN];\n-        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n-            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n-            const char* item_filename = nullptr;\n-            item.second->get_dbname(&item_filename, nullptr);\n+    for (const auto& item : env.m_fileids) {\n+        if (fileid == item.second && &fileid != &item.second) {\n             throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (duplicates fileid %s from %s)\", filename,\n-                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n-                item_filename ? item_filename : \"(unknown database)\"));\n+                HexStr(std::begin(item.second.value), std::end(item.second.value)), item.first));\n         }\n     }\n }\n@@ -56,6 +51,11 @@ CCriticalSection cs_db;\n std::map<std::string, BerkeleyEnvironment> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to open db environment.\n } // namespace\n \n+bool BerkeleyFileid::operator==(const BerkeleyFileid& rhs) const\n+{\n+    return memcmp(value, &rhs.value, sizeof(value)) == 0;\n+}\n+\n BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n@@ -504,7 +504,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n+                CheckUniqueFileid(env.second, strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n             }\n \n             pdb = pdb_temp.release();\n@@ -826,6 +826,10 @@ void BerkeleyDatabase::Flush(bool shutdown)\n             LOCK(cs_db);\n             g_dbenvs.erase(env->Directory().string());\n             env = nullptr;\n+        } else {\n+            // To avoid accessing a map that has already deconstructed, do not call this when shutdown is true. g_dbenvs.erase would also erase this value.\n+            // TODO: get rid of wild pointers\n+            env->m_fileids.erase(strFile);\n         }\n     }\n }"
      },
      {
        "sha": "99f390839a5614cda0a2a26b016746623c490864",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c08159e8b5f192a03cbc64944c0f5aa861cbc57/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c08159e8b5f192a03cbc64944c0f5aa861cbc57/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
        "patch": "@@ -18,13 +18,19 @@\n #include <map>\n #include <memory>\n #include <string>\n+#include <unordered_map>\n #include <vector>\n \n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n+struct BerkeleyFileid {\n+    u_int8_t value[DB_FILE_ID_LEN];\n+    bool operator==(const BerkeleyFileid& rhs) const;\n+};\n+\n class BerkeleyEnvironment\n {\n private:\n@@ -38,6 +44,7 @@ class BerkeleyEnvironment\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n+    std::unordered_map<std::string, BerkeleyFileid> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);"
      }
    ]
  },
  {
    "sha": "ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjE2ZmM1ZGE2Y2E2YjMzZDRhOTJlNTA5ZDYyN2Q5MDhmOGVkOTk1",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-24T04:33:50Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-24T04:33:50Z"
      },
      "message": "tests: add test case for loading copied wallet twice",
      "tree": {
        "sha": "c810b44f58128f27dbef4bcf8b4bc2e22599ec51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c810b44f58128f27dbef4bcf8b4bc2e22599ec51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef16fc5da6ca6b33d4a92e509d627d908f8ed995/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c08159e8b5f192a03cbc64944c0f5aa861cbc57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c08159e8b5f192a03cbc64944c0f5aa861cbc57"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "39df54ebfa8d8e22dfb90c4eb37467fa9da37298",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef16fc5da6ca6b33d4a92e509d627d908f8ed995/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef16fc5da6ca6b33d4a92e509d627d908f8ed995/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
        "patch": "@@ -229,6 +229,10 @@ def wallet_file(name):\n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n+        # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n+        assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+\n+\n         # Fail to load if wallet file is a symlink\n         if os.name != 'nt':\n             assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')"
      }
    ]
  },
  {
    "sha": "118f64736dc9121ea9ce3159d64c66406f92bc13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMThmNjQ3MzZkYzkxMjFlYTljZTMxNTlkNjRjNjY0MDZmOTJiYzEz",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-24T04:38:04Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-24T04:38:04Z"
      },
      "message": "appveyor: Enable multiwallet test",
      "tree": {
        "sha": "68920376e1aad5242d4d20dc29e1e45067364f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68920376e1aad5242d4d20dc29e1e45067364f63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/118f64736dc9121ea9ce3159d64c66406f92bc13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/118f64736dc9121ea9ce3159d64c66406f92bc13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/118f64736dc9121ea9ce3159d64c66406f92bc13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/118f64736dc9121ea9ce3159d64c66406f92bc13/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef16fc5da6ca6b33d4a92e509d627d908f8ed995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef16fc5da6ca6b33d4a92e509d627d908f8ed995"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "8dad9c4f9dff90e95ee9fe5025bce8652a28408c",
        "filename": ".appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118f64736dc9121ea9ce3159d64c66406f92bc13/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118f64736dc9121ea9ce3159d64c66406f92bc13/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=118f64736dc9121ea9ce3159d64c66406f92bc13",
        "patch": "@@ -61,5 +61,5 @@ test_script:\n - ps:  src\\bench_bitcoin.exe -evals=1 -scaling=0\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n-- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000 --exclude wallet_multiwallet\n+- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000\n deploy: off"
      },
      {
        "sha": "45b0f3518cf85f2af39abb14bbe997d71b05e58b",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 13,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/118f64736dc9121ea9ce3159d64c66406f92bc13/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/118f64736dc9121ea9ce3159d64c66406f92bc13/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=118f64736dc9121ea9ce3159d64c66406f92bc13",
        "patch": "@@ -46,9 +46,8 @@ def wallet_file(name):\n \n         # create symlink to verify wallet directory path can be referenced\n         # through symlink\n-        if os.name != 'nt':\n-            os.mkdir(wallet_dir('w7'))\n-            os.symlink('w7', wallet_dir('w7_symlink'))\n+        os.mkdir(wallet_dir('w7'))\n+        os.symlink('w7', wallet_dir('w7_symlink'))\n \n         # rename wallet.dat to make sure plain wallet file paths (as opposed to\n         # directory paths) can be loaded\n@@ -69,11 +68,9 @@ def wallet_file(name):\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n-        if os.name == 'nt':\n-            wallet_names.remove('w7_symlink')\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', 'sub/w5', 'w7', 'w7', 'w1', 'w8', 'w']))\n+        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w1', 'w8', 'w']))\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n@@ -99,9 +96,8 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n-        if os.name != 'nt':\n-            os.symlink('w8', wallet_dir('w8_symlink'))\n-            self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n+        os.symlink('w8', wallet_dir('w8_symlink'))\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -147,7 +143,7 @@ def wallet_file(name):\n \n         self.restart_node(0, extra_args)\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', 'sub/w5', 'w7', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n \n         wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n@@ -234,8 +230,7 @@ def wallet_file(name):\n \n \n         # Fail to load if wallet file is a symlink\n-        if os.name != 'nt':\n-            assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))\n@@ -291,7 +286,7 @@ def wallet_file(name):\n         assert_equal(self.nodes[0].listwallets(), ['w1'])\n         assert_equal(w1.getwalletinfo()['walletname'], 'w1')\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', 'sub/w5', 'w7', 'w9', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w9', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n \n         # Test backing up and restoring wallets\n         self.log.info(\"Test wallet backup\")"
      }
    ]
  },
  {
    "sha": "c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTdkN2UwMTFmNWVmYzhjNmYxZTk5MDI2OTgyOWJiMmYzYjc4NmZi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-22T10:06:54Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-24T10:39:21Z"
      },
      "message": "Add GetRelativePath utility function",
      "tree": {
        "sha": "38eb73d22e17b48a16a9b2b91b3d5b04fc09c1e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38eb73d22e17b48a16a9b2b91b3d5b04fc09c1e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c97d7e011f5efc8c6f1e990269829bb2f3b786fb/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "118f64736dc9121ea9ce3159d64c66406f92bc13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/118f64736dc9121ea9ce3159d64c66406f92bc13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/118f64736dc9121ea9ce3159d64c66406f92bc13"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fba6996917b4871f9df93bfc0fd74cc4394bb83d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c97d7e011f5efc8c6f1e990269829bb2f3b786fb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c97d7e011f5efc8c6f1e990269829bb2f3b786fb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
        "patch": "@@ -187,6 +187,20 @@ bool DirIsWritable(const fs::path& directory)\n     return true;\n }\n \n+bool GetRelativePath(fs::path& result, const fs::path& path, const fs::path& base)\n+{\n+    if (!path.is_absolute() || !base.is_absolute()) return false;\n+    fs::path relative, parent = path;\n+    boost::system::error_code ec;\n+    while (!parent.empty() && parent != parent.root_path() && !fs::equivalent(parent, base, ec)) {\n+        relative = parent.filename() / relative;\n+        parent = parent.parent_path();\n+    }\n+    if (!fs::equivalent(parent, base, ec)) return false;\n+    result = relative;\n+    return true;\n+}\n+\n /**\n  * Interpret a string argument as a boolean.\n  *"
      },
      {
        "sha": "f1b3ac1627d666d36098f80485eccd2044dbf9e0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c97d7e011f5efc8c6f1e990269829bb2f3b786fb/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c97d7e011f5efc8c6f1e990269829bb2f3b786fb/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
        "patch": "@@ -71,6 +71,13 @@ bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n bool DirIsWritable(const fs::path& directory);\n \n+/**\n+ * Returns path made relative to base. Does not resolve symlinks or normalizes\n+ * paths, therefore boost::filesystem::relative (from version 1.67) is not a\n+ * valid replacement.\n+ */\n+bool GetRelativePath(fs::path& result, const fs::path& path, const fs::path& base);\n+\n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks.\n  */"
      }
    ]
  },
  {
    "sha": "8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDA3OTJiYmM5MGE2ZDczODdlZTYzNmMyZjA2MzdjOGY1ODMyMmE5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-22T23:33:01Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-24T10:39:22Z"
      },
      "message": "qa: Add tests for GetRelativePath",
      "tree": {
        "sha": "8ed82060cfb39fb7ea9f9b202f5715605f3b7528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ed82060cfb39fb7ea9f9b202f5715605f3b7528"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0792bbc90a6d7387ee636c2f0637c8f58322a9/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c97d7e011f5efc8c6f1e990269829bb2f3b786fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c97d7e011f5efc8c6f1e990269829bb2f3b786fb"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 19,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5fc800b0191f3dd6430688d0532230ad3bbb25ff",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0792bbc90a6d7387ee636c2f0637c8f58322a9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0792bbc90a6d7387ee636c2f0637c8f58322a9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
        "patch": "@@ -1217,6 +1217,25 @@ BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n     fs::remove(tmpdirname);\n }\n \n+BOOST_AUTO_TEST_CASE(test_GetRelativePath)\n+{\n+    fs::path base = fs::temp_directory_path();\n+    fs::path path;\n+\n+    BOOST_CHECK_EQUAL(GetRelativePath(path,  base / \"foo/bar\", \"foo/bar\"), false);\n+    BOOST_CHECK_EQUAL(GetRelativePath(path, \"foo/bar\", base / \"foo/bar\"), false);\n+    BOOST_CHECK_EQUAL(GetRelativePath(path, base, base / \"foo\"), false);\n+\n+    BOOST_CHECK_EQUAL(GetRelativePath(path, base, base), true);\n+    BOOST_CHECK_EQUAL(path, \"\");\n+\n+    BOOST_CHECK_EQUAL(GetRelativePath(path, base / \"bar\", base), true);\n+    BOOST_CHECK_EQUAL(path, \"bar\");\n+\n+    BOOST_CHECK_EQUAL(GetRelativePath(path, base / \"foo/bar\", base), true);\n+    BOOST_CHECK_EQUAL(path, \"foo/bar\");\n+}\n+\n BOOST_AUTO_TEST_CASE(test_ToLower)\n {\n     BOOST_CHECK_EQUAL(ToLower('@'), '@');"
      }
    ]
  },
  {
    "sha": "8697d658c870270ebde4fd5bb6016abde04c1943",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njk3ZDY1OGM4NzAyNzBlYmRlNGZkNWJiNjAxNmFiZGUwNGMxOTQz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-20T13:29:48Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-24T10:39:22Z"
      },
      "message": "Replace fs::relative call with GetRelativePath\n\nThe implementation of fs::relative resolves symlinks which is not intended\nin ListWalletDir. The replacement does what is required, and listwalletdir\ntests are fixed accordingly.\n\nAlso, building with boost 1.47 required 2 changes:\n - replace fs::relative with an alternative implementation;\n - fix fs::recursive_directory_iterator iteration.",
      "tree": {
        "sha": "458c4fc5ccaeb6371ae24808114ea0f353bf059f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/458c4fc5ccaeb6371ae24808114ea0f353bf059f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8697d658c870270ebde4fd5bb6016abde04c1943",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8697d658c870270ebde4fd5bb6016abde04c1943",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8697d658c870270ebde4fd5bb6016abde04c1943",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8697d658c870270ebde4fd5bb6016abde04c1943/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0792bbc90a6d7387ee636c2f0637c8f58322a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0792bbc90a6d7387ee636c2f0637c8f58322a9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "91c6e087bba3a43c75d68a9c29d60cc124ef8016",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8697d658c870270ebde4fd5bb6016abde04c1943/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8697d658c870270ebde4fd5bb6016abde04c1943/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=8697d658c870270ebde4fd5bb6016abde04c1943",
        "patch": "@@ -53,22 +53,23 @@ std::vector<fs::path> ListWalletDir()\n {\n     const fs::path wallet_dir = GetWalletDir();\n     std::vector<fs::path> paths;\n+    fs::path path;\n \n-    for (auto it = fs::recursive_directory_iterator(wallet_dir); it != end(it); ++it) {\n-        if (it->status().type() == fs::directory_file && IsBerkeleyBtree(it->path() / \"wallet.dat\")) {\n+    for (auto it = fs::recursive_directory_iterator(wallet_dir); it != fs::recursive_directory_iterator(); ++it) {\n+        if (it->status().type() == fs::directory_file && IsBerkeleyBtree(it->path() / \"wallet.dat\") && GetRelativePath(path, it->path(), wallet_dir)) {\n             // Found a directory which contains wallet.dat btree file, add it as a wallet.\n-            paths.emplace_back(fs::relative(it->path(), wallet_dir));\n+            paths.emplace_back(path);\n         } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && IsBerkeleyBtree(it->path())) {\n             if (it->path().filename() == \"wallet.dat\") {\n                 // Found top-level wallet.dat btree file, add top level directory \"\"\n                 // as a wallet.\n                 paths.emplace_back();\n-            } else {\n+            } else if (GetRelativePath(path, it->path(), wallet_dir)) {\n                 // Found top-level btree file not called wallet.dat. Current bitcoin\n                 // software will never create these files but will allow them to be\n                 // opened in a shared database environment for backwards compatibility.\n                 // Add it to the list of available wallets.\n-                paths.emplace_back(fs::relative(it->path(), wallet_dir));\n+                paths.emplace_back(path);\n             }\n         }\n     }"
      },
      {
        "sha": "53ef01b64cc2820947f6fccd03c1bf20fadebd5f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8697d658c870270ebde4fd5bb6016abde04c1943/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8697d658c870270ebde4fd5bb6016abde04c1943/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=8697d658c870270ebde4fd5bb6016abde04c1943",
        "patch": "@@ -70,7 +70,7 @@ def wallet_file(name):\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n@@ -143,7 +143,7 @@ def wallet_file(name):\n \n         self.restart_node(0, extra_args)\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n \n         wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n@@ -286,7 +286,7 @@ def wallet_file(name):\n         assert_equal(self.nodes[0].listwallets(), ['w1'])\n         assert_equal(w1.getwalletinfo()['walletname'], 'w1')\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w9', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy', 'w9'])\n \n         # Test backing up and restoring wallets\n         self.log.info(\"Test wallet backup\")"
      }
    ]
  }
]