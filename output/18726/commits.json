[
  {
    "sha": "cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDU0M2Q5MTkzYWMxODgyYzFiNGE4YTg0ZTNhYzczNTZhOGI3Y2U5",
    "commit": {
      "author": {
        "name": "Danny Lee",
        "email": "robot-visions@protonmail.com",
        "date": "2020-04-21T18:29:25Z"
      },
      "committer": {
        "name": "Danny Lee",
        "email": "robot-visions@protonmail.com",
        "date": "2020-04-25T16:28:22Z"
      },
      "message": "test: check misbehavior more independently in p2p_filter.py",
      "tree": {
        "sha": "9caef716a7b52723917e9a9977871bb8b2da79bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9caef716a7b52723917e9a9977871bb8b2da79bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9/comments",
    "author": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65276c7737176a5269b052ceae78dbb44b216bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65276c7737176a5269b052ceae78dbb44b216bf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65276c7737176a5269b052ceae78dbb44b216bf4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 26,
      "deletions": 5
    },
    "files": [
      {
        "sha": "15955a938c03dc5083cbbd73d507d095f76016d4",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 26,
        "deletions": 5,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=cd543d9193ac1882c1b4a8a84e3ac7356a8b7ce9",
        "patch": "@@ -64,19 +64,40 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n-    def run_test(self):\n-        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n-\n+    def test_size_limits(self, filter_node):\n         self.log.info('Check that too large filter is rejected')\n-        with self.nodes[0].assert_debug_log(['Misbehaving']):\n-            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n             filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE+1)))\n \n+        self.log.info('Check that max size filter is accepted')\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n+            filter_node.send_and_ping(msg_filterload(data=b'\\xbb'*(MAX_BLOOM_FILTER_SIZE)))\n+        filter_node.send_and_ping(msg_filterclear())\n+\n+        self.log.info('Check that filter with too many hash functions is rejected')\n+        with self.nodes[0].assert_debug_log(['Misbehaving']):\n+            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS+1))\n+\n+        self.log.info('Check that filter with max hash functions is accepted')\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n+            filter_node.send_and_ping(msg_filterload(data=b'\\xaa', nHashFuncs=MAX_BLOOM_HASH_FUNCS))\n+        # Don't send filterclear until next two filteradd checks are done\n+\n+        self.log.info('Check that max size data element to add to the filter is accepted')\n+        with self.nodes[0].assert_debug_log([], unexpected_msgs=['Misbehaving']):\n+            filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE)))\n+\n         self.log.info('Check that too large data element to add to the filter is rejected')\n         with self.nodes[0].assert_debug_log(['Misbehaving']):\n             filter_node.send_and_ping(msg_filteradd(data=b'\\xcc'*(MAX_SCRIPT_ELEMENT_SIZE+1)))\n \n+        filter_node.send_and_ping(msg_filterclear())\n+\n+    def run_test(self):\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+\n+        self.test_size_limits(filter_node)\n+\n         self.log.info('Add filtered P2P connection to the node')\n         filter_node.send_and_ping(filter_node.watch_filter_init)\n         filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]"
      }
    ]
  }
]