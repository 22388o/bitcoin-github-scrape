DrahtBot,2019-03-03T22:44:28Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15649](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15649.html) (Add ChaCha20Poly1305@Bitcoin AEAD by jonass",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-469072967,469072967,
practicalswift,2019-03-04T21:20:05Z,Intentional unsigned wraparound is triggered in `crypto/poly1305.cpp` (on at least L122 and L124). That is fine but should be documented in `test/sanitizer_suppressions/ubsan` to make the `-fsanitize=integer` Travis job happy :-),https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-469426052,469426052,
jonasschnelli,2019-03-05T14:43:05Z,"Benchmark done on a aarch64 (`RK3328 Quad-Core ARM Cortex A53 64-Bit`)\n\n```\nCHACHA20_1MB, 5, 340, 13.3704, 0.00772624, 0.00806671, 0.00775259\nCHACHA20_256BYTES, 5, 250000, 2.41802, 1.92206e-06, 1.95887e-06, 1.92964e-06\nCHACHA20_64BYTES, 5, 500000, 1.28993, 5.07247e-07, 5.26875e-07, 5.14802e-07\nHASH_1MB, 5, 340, 22.5945, 0.0128931, 0.0135617, 0.0132931\nHASH_256BYTES, 5, 250000, 6.8451",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-469705289,469705289,
jonasschnelli,2019-03-05T14:44:11Z,"Benchmark on a Intel i7 with SSE4  i7-8700 CPU @ 3.20GHz)\n\n```\nCHACHA20_1MB, 5, 340, 2.42871, 0.00142497, 0.0014349, 0.00142748\nCHACHA20_256BYTES, 5, 250000, 0.443971, 3.53501e-07, 3.56836e-07, 3.54826e-07\nCHACHA20_64BYTES, 5, 500000, 0.235031, 9.37462e-08, 9.42958e-08, 9.39654e-08\nHASH_1MB, 5, 340, 3.98642, 0.00233798, 0.00234913, 0.00234636\nHASH_256BYTES, 5, 250000, 1.12901, 8.9700",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-469705687,469705687,
laanwj,2019-03-07T18:15:30Z,"> Intentional unsigned wraparound is triggered in crypto/poly1305.cpp\n\nRight—since when is unsigned integer wraparound a problem? I thought there was only undefined behavior in signed wraparound.",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-470635936,470635936,
sipa,2019-03-07T18:31:58Z,"Yes, unsigned overflow is well-defined. Is -fsanitize=undefined enabling that by default? I don't see anything in our configuration turning it on specifically.",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-470641588,470641588,
practicalswift,2019-03-07T20:10:40Z,@laanwj Unsigned integer wraparound is perfectly well-defined. Intentional unsigned integer wraparound is not problematic at all. Is anyone claiming otherwise? :-),https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-470675667,470675667,
sipa,2019-03-07T20:12:45Z,@practicalswift Do you have any idea why the sanitizer catches it in that case?,https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-470676362,470676362,
practicalswift,2019-03-07T20:22:10Z,"@sipa Yes, it is `-fsanitize=integer` catching it (or more specifically `-fsanitize=unsigned-integer-overflow` which is enabled as part of `-fsanitize=integer`):\n\n> `-fsanitize=unsigned-integer-overflow`: Unsigned integer overflow, where the result of an unsigned integer computation cannot be represented in its type. Unlike signed integer overflow, this is not undefined behavior, but it is oft",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-470679392,470679392,
sipa,2019-03-25T23:11:53Z,"utACK e3d8d0f7b3102ec1e6b787feaac7fe98dd5a7d7a, compared with the original implementation and compared the test vectors with the RFC.",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-476412313,476412313,
laanwj,2019-03-26T10:11:53Z,"This is giving me new compile warnings (clang 8):\n```\nIn file included from /.../bitcoin/src/test/crypto_tests.cpp:7:0:\n/.../bitcoin/src/crypto/poly1305.h:19:66: warning: ‘__bounded__’ attribute directive ignored [-Wattributes]\n     __attribute__((__bounded__(__minbytes__, 4, POLY1305_KEYLEN)));\n                                                                  ^\n/.../bitcoin/src/crypto",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-476557296,476557296,
jonasschnelli,2019-03-26T17:14:41Z,Removed the __bounded__ attribute (lets don't bother with activate them).,https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-476754139,476754139,
laanwj,2019-03-27T10:53:07Z,"thanks,\nutACK e9d5e975612e828ec44f9247b4c5c08f0268d360",https://github.com/bitcoin/bitcoin/pull/15519#issuecomment-477094576,477094576,
sipa,2019-03-25T17:29:07Z,I can't really find the code this is based on anymore (perhaps it was moved?). It seems identical to code here though: https://github.com/jhcloos/openssh-chacha-poly1305/blob/master/poly1305-donna-unrolled.c ?,https://github.com/bitcoin/bitcoin/pull/15519#discussion_r268764686,268764686,src/crypto/poly1305.cpp
jonasschnelli,2019-03-25T17:32:45Z,The code is taken from the OpenSSH project (correct link is https://github.com/openssh/openssh-portable/blob/90e51d672711c19a36573be1785caf35019ae7a8/poly1305.c). I kept the reference (see https://github.com/openssh/openssh-portable/blob/90e51d672711c19a36573be1785caf35019ae7a8/poly1305.c#L3).,https://github.com/bitcoin/bitcoin/pull/15519#discussion_r268766574,268766574,src/crypto/poly1305.cpp
