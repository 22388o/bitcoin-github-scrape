[
  {
    "sha": "2f1f65430efe6e4fed4af9175d41baa9f25a3811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjFmNjU0MzBlZmU2ZTRmZWQ0YWY5MTc1ZDQxYmFhOWYyNWEzODEx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-08T22:34:16Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-12T16:16:15Z"
      },
      "message": "Updates / cleanup for utility functions",
      "tree": {
        "sha": "7128a56d047913177753dce1f07df7b9f00b4f17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7128a56d047913177753dce1f07df7b9f00b4f17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f1f65430efe6e4fed4af9175d41baa9f25a3811",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1f65430efe6e4fed4af9175d41baa9f25a3811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f1f65430efe6e4fed4af9175d41baa9f25a3811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1f65430efe6e4fed4af9175d41baa9f25a3811/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "940e22fd81af29dee6c07e413de1b446a21712b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/940e22fd81af29dee6c07e413de1b446a21712b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/940e22fd81af29dee6c07e413de1b446a21712b0"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 99,
      "deletions": 114
    },
    "files": [
      {
        "sha": "0a17f8d1780e324fe199d64dce806636325dc9f6",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "patch": "@@ -60,7 +60,7 @@ class CDBInit\n instance_of_cdbinit;\n \n \n-CDB::CDB(const char *pszFile, const char* pszMode) : pdb(NULL)\n+CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n {\n     int ret;\n     if (pszFile == NULL)\n@@ -208,7 +208,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n                     Db* pdbCopy = new Db(&dbenv, 0);\n-    \n+\n                     int ret = pdbCopy->open(NULL,                 // Txn pointer\n                                             strFileRes.c_str(),   // Filename\n                                             \"main\",    // Logical db name\n@@ -220,7 +220,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         printf(\"Cannot create database file %s\\n\", strFileRes.c_str());\n                         fSuccess = false;\n                     }\n-    \n+\n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n                         while (fSuccess)\n@@ -732,7 +732,7 @@ bool CAddrDB::LoadAddresses()\n         printf(\"Loaded %i addresses\\n\", addrman.size());\n         return true;\n     }\n-    \n+\n     // Read pre-0.6 addr records\n \n     vector<CAddress> vAddr;"
      },
      {
        "sha": "930369342d22f7b984e17dede4aac6f302616ccc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "patch": "@@ -56,7 +56,7 @@ void Shutdown(void* parg)\n         DBFlush(false);\n         StopNode();\n         DBFlush(true);\n-        boost::filesystem::remove(GetPidFile());\n+        filesystem::remove(GetPidFile());\n         UnregisterWallet(pwalletMain);\n         delete pwalletMain;\n         CreateThread(ExitTimeout, NULL);\n@@ -322,7 +322,7 @@ bool AppInit2(int argc, char* argv[])\n     }\n \n     // Make sure only a single bitcoin process is using the data directory.\n-    boost::filesystem::path pathLockFile = GetDataDir() / \".lock\";\n+    filesystem::path pathLockFile = GetDataDir() / \".lock\";\n     FILE* file = fopen(pathLockFile.string().c_str(), \"a\"); // empty lock file; created if it doesn't exist.\n     if (file) fclose(file);\n     static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n@@ -584,9 +584,9 @@ bool AppInit2(int argc, char* argv[])\n }\n \n #ifdef WIN32\n-boost::filesystem::path StartupShortcutPath()\n+filesystem::path StartupShortcutPath()\n {\n-    return MyGetSpecialFolderPath(CSIDL_STARTUP, true) / \"Bitcoin.lnk\";\n+    return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n@@ -597,7 +597,7 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n+    filesystem::remove(StartupShortcutPath());\n \n     if (fAutoStart)\n     {\n@@ -654,25 +654,24 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n // Follow the Desktop Application Autostart Spec:\n //  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n \n-boost::filesystem::path GetAutostartDir()\n+filesystem::path GetAutostartDir()\n {\n-    namespace fs = boost::filesystem;\n-\n     char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n+    if (pszConfigHome) return filesystem::path(pszConfigHome) / \"autostart\";\n     char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n-    return fs::path();\n+    if (pszHome) return filesystem::path(pszHome) / \".config\" / \"autostart\";\n+\n+    return filesystem::path(\"\");\n }\n \n-boost::filesystem::path GetAutostartFilePath()\n+filesystem::path GetAutostartFilePath()\n {\n     return GetAutostartDir() / \"bitcoin.desktop\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    filesystem::ifstream optionFile(GetAutostartFilePath());\n     if (!optionFile.good())\n         return false;\n     // Scan through file for \"Hidden=true\":\n@@ -692,17 +691,17 @@ bool GetStartOnSystemStartup()\n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n     if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n+        filesystem::remove(GetAutostartFilePath());\n     else\n     {\n         char pszExePath[MAX_PATH+1];\n         memset(pszExePath, 0, sizeof(pszExePath));\n         if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n             return false;\n \n-        boost::filesystem::create_directories(GetAutostartDir());\n+        filesystem::create_directories(GetAutostartDir());\n \n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n+        filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n         // Write a bitcoin.desktop file to the autostart directory:"
      },
      {
        "sha": "a6e87d80bcdc6d689e75b8a4e1ebafffaa457a40",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 90,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "patch": "@@ -196,23 +196,24 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n         {\n             LOCK(cs_OutputDebugStringF);\n             static char pszBuffer[50000];\n+            static char staticBuffer[50000];\n             static char* pend;\n             if (pend == NULL)\n-                pend = pszBuffer;\n+                pend = staticBuffer;\n             va_list arg_ptr;\n             va_start(arg_ptr, pszFormat);\n-            int limit = END(pszBuffer) - pend - 2;\n+            int limit = END(staticBuffer) - pend - 2;\n             int ret = _vsnprintf(pend, limit, pszFormat, arg_ptr);\n             va_end(arg_ptr);\n             if (ret < 0 || ret >= limit)\n             {\n-                pend = END(pszBuffer) - 2;\n+                pend = END(staticBuffer) - 2;\n                 *pend++ = '\\n';\n             }\n             else\n                 pend += ret;\n             *pend = '\\0';\n-            char* p1 = pszBuffer;\n+            char* p1 = staticBuffer;\n             char* p2;\n             while (p2 = strchr(p1, '\\n'))\n             {\n@@ -223,9 +224,9 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n                 *p2 = c;\n                 p1 = p2;\n             }\n-            if (p1 != pszBuffer)\n-                memmove(pszBuffer, p1, pend - p1 + 1);\n-            pend -= (p1 - pszBuffer);\n+            if (p1 != staticBuffer)\n+                memmove(staticBuffer, p1, pend - p1 + 1);\n+            pend -= (p1 - staticBuffer);\n         }\n     }\n #endif\n@@ -255,7 +256,7 @@ int my_snprintf(char* buffer, size_t limit, const char* format, ...)\n \n string real_strprintf(const std::string &format, int dummy, ...)\n {\n-    char buffer[50000];\n+    char buffer[50000]; // no init, to not slowdown the client\n     char* p = buffer;\n     int limit = sizeof(buffer);\n     int ret;\n@@ -282,7 +283,7 @@ string real_strprintf(const std::string &format, int dummy, ...)\n \n bool error(const char *format, ...)\n {\n-    char buffer[50000];\n+    char buffer[50000] = \"\";\n     int limit = sizeof(buffer);\n     va_list arg_ptr;\n     va_start(arg_ptr, format);\n@@ -457,30 +458,30 @@ static void InterpretNegativeSetting(string name, map<string, string>& mapSettin\n     }\n }\n \n-void ParseParameters(int argc, const char*const argv[])\n+void ParseParameters(int argc, const char* const argv[])\n {\n     mapArgs.clear();\n     mapMultiArgs.clear();\n     for (int i = 1; i < argc; i++)\n     {\n-        char psz[10000];\n-        strlcpy(psz, argv[i], sizeof(psz));\n+        char buffer[10000] = \"\";\n+        strlcpy(buffer, argv[i], sizeof(buffer));\n         char* pszValue = (char*)\"\";\n-        if (strchr(psz, '='))\n+        if (strchr(buffer, '='))\n         {\n-            pszValue = strchr(psz, '=');\n+            pszValue = strchr(buffer, '=');\n             *pszValue++ = '\\0';\n         }\n         #ifdef WIN32\n-        _strlwr(psz);\n-        if (psz[0] == '/')\n-            psz[0] = '-';\n+        _strlwr(buffer);\n+        if (buffer[0] == '/')\n+            buffer[0] = '-';\n         #endif\n-        if (psz[0] != '-')\n+        if (buffer[0] != '-')\n             break;\n \n-        mapArgs[psz] = pszValue;\n-        mapMultiArgs[psz].push_back(pszValue);\n+        mapArgs[buffer] = pszValue;\n+        mapMultiArgs[buffer].push_back(pszValue);\n     }\n \n     // New 0.6 features:\n@@ -724,85 +725,76 @@ bool WildcardMatch(const string& str, const string& mask)\n void FormatException(char* pszMessage, std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32\n-    char pszModule[MAX_PATH];\n-    pszModule[0] = '\\0';\n-    GetModuleFileNameA(NULL, pszModule, sizeof(pszModule));\n+    char module[MAX_PATH] = \"\";\n+    GetModuleFileNameA(NULL, module, sizeof(module));\n #else\n-    const char* pszModule = \"bitcoin\";\n+    const char* module = \"bitcoin\";\n #endif\n     if (pex)\n         snprintf(pszMessage, 1000,\n-            \"EXCEPTION: %s       \\n%s       \\n%s in %s       \\n\", typeid(*pex).name(), pex->what(), pszModule, pszThread);\n+            \"EXCEPTION: %s       \\n%s       \\n%s in %s       \\n\", typeid(*pex).name(), pex->what(), module, pszThread);\n     else\n         snprintf(pszMessage, 1000,\n-            \"UNKNOWN EXCEPTION       \\n%s in %s       \\n\", pszModule, pszThread);\n+            \"UNKNOWN EXCEPTION       \\n%s in %s       \\n\", module, pszThread);\n }\n \n void LogException(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n%s\", pszMessage);\n+    char message[10000] = \"\";\n+    FormatException(message, pex, pszThread);\n+    printf(\"\\n%s\", message);\n }\n \n void PrintException(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n\\n************************\\n%s\\n\", pszMessage);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", pszMessage);\n-    strMiscWarning = pszMessage;\n+    char message[10000] = \"\";\n+    FormatException(message, pex, pszThread);\n+    printf(\"\\n\\n************************\\n%s\\n\", message);\n+    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message);\n+    strMiscWarning = message;\n     throw;\n }\n \n void PrintExceptionContinue(std::exception* pex, const char* pszThread)\n {\n-    char pszMessage[10000];\n-    FormatException(pszMessage, pex, pszThread);\n-    printf(\"\\n\\n************************\\n%s\\n\", pszMessage);\n-    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", pszMessage);\n-    strMiscWarning = pszMessage;\n+    char message[10000] = \"\";\n+    FormatException(message, pex, pszThread);\n+    printf(\"\\n\\n************************\\n%s\\n\", message);\n+    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message);\n+    strMiscWarning = message;\n }\n \n #ifdef WIN32\n-boost::filesystem::path MyGetSpecialFolderPath(int nFolder, bool fCreate)\n+filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n {\n-    namespace fs = boost::filesystem;\n+    char path[MAX_PATH] = \"\";\n \n-    char pszPath[MAX_PATH] = \"\";\n-    if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))\n+    if(SHGetSpecialFolderPathA(NULL, path, nFolder, fCreate))\n     {\n-        return fs::path(pszPath);\n+        return filesystem::path(path);\n     }\n-    else if (nFolder == CSIDL_STARTUP)\n-    {\n-        return fs::path(getenv(\"USERPROFILE\")) / \"Start Menu\" / \"Programs\" / \"Startup\";\n-    }\n-    else if (nFolder == CSIDL_APPDATA)\n-    {\n-        return fs::path(getenv(\"APPDATA\"));\n-    }\n-    return fs::path(\"\");\n+\n+    printf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");\n+    return filesystem::path(\"\");\n }\n #endif\n \n-boost::filesystem::path GetDefaultDataDir()\n+filesystem::path GetDefaultDataDir()\n {\n-    namespace fs = boost::filesystem;\n-\n-    // Windows: C:\\Documents and Settings\\username\\Application Data\\Bitcoin\n+    // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\Bitcoin\n+    // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\Bitcoin\n     // Mac: ~/Library/Application Support/Bitcoin\n     // Unix: ~/.bitcoin\n #ifdef WIN32\n     // Windows\n-    return MyGetSpecialFolderPath(CSIDL_APPDATA, true) / \"Bitcoin\";\n+    return GetSpecialFolderPath(CSIDL_APPDATA) / \"Bitcoin\";\n #else\n-    fs::path pathRet;\n+    filesystem::path pathRet;\n     char* pszHome = getenv(\"HOME\");\n     if (pszHome == NULL || strlen(pszHome) == 0)\n-        pathRet = fs::path(\"/\");\n+        pathRet = filesystem::path(\"/\");\n     else\n-        pathRet = fs::path(pszHome);\n+        pathRet = filesystem::path(pszHome);\n #ifdef MAC_OSX\n     // Mac\n     pathRet /= \"Library/Application Support\";\n@@ -815,15 +807,13 @@ boost::filesystem::path GetDefaultDataDir()\n #endif\n }\n \n-const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n+const filesystem::path &GetDataDir(bool fNetSpecific)\n {\n-    namespace fs = boost::filesystem;\n-\n-    static fs::path pathCached[2];\n+    static filesystem::path pathCached[2];\n     static CCriticalSection csPathCached;\n     static bool cachedPath[2] = {false, false};\n \n-    fs::path &path = pathCached[fNetSpecific];\n+    filesystem::path &path = pathCached[fNetSpecific];\n \n     // This can be called during exceptions by printf, so we cache the\n     // value so we don't have to do memory allocations after that.\n@@ -832,67 +822,63 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n \n     LOCK(csPathCached);\n \n-    if (mapArgs.count(\"-datadir\")) {\n+    if (mapArgs.count(\"-datadir\"))\n+    {\n         path = mapArgs[\"-datadir\"];\n-    } else {\n+    }\n+    else\n+    {\n         path = GetDefaultDataDir();\n         if (fNetSpecific && GetBoolArg(\"-testnet\", false))\n             path /= \"testnet\";\n     }\n \n-    fs::create_directory(path);\n+    filesystem::create_directory(path);\n \n     cachedPath[fNetSpecific]=true;\n     return path;\n }\n \n-boost::filesystem::path GetConfigFile()\n+filesystem::path GetConfigFile()\n {\n-    namespace fs = boost::filesystem;\n-\n-    fs::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n+    filesystem::path pathConfigFile(GetArg(\"-conf\", \"bitcoin.conf\"));\n     if (!pathConfigFile.is_complete()) pathConfigFile = GetDataDir(false) / pathConfigFile;\n     return pathConfigFile;\n }\n \n bool ReadConfigFile(map<string, string>& mapSettingsRet,\n                     map<string, vector<string> >& mapMultiSettingsRet)\n {\n-    namespace fs = boost::filesystem;\n-    namespace pod = boost::program_options::detail;\n-\n-    fs::ifstream streamConfig(GetConfigFile());\n+    filesystem::ifstream streamConfig(GetConfigFile());\n     if (!streamConfig.good())\n         return true; // No bitcoin.conf file is OK\n \n     set<string> setOptions;\n     setOptions.insert(\"*\");\n \n-    for (pod::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n+    for (program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n     {\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         string strKey = string(\"-\") + it->string_key;\n         if (mapSettingsRet.count(strKey) == 0)\n         {\n             mapSettingsRet[strKey] = it->value[0];\n-            //  interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n+            // interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n             InterpretNegativeSetting(strKey, mapSettingsRet);\n         }\n         mapMultiSettingsRet[strKey].push_back(it->value[0]);\n     }\n     return true;\n }\n \n-boost::filesystem::path GetPidFile()\n+filesystem::path GetPidFile()\n {\n-    namespace fs = boost::filesystem;\n-\n-    fs::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n+    filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n+void CreatePidFile(const filesystem::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");\n     if (file)\n@@ -915,20 +901,20 @@ int GetFilesize(FILE* file)\n void ShrinkDebugFile()\n {\n     // Scroll debug.log if it's getting too big\n-    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n+    filesystem::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n     if (file && GetFilesize(file) > 10 * 1000000)\n     {\n         // Restart the file with some of the end\n-        char pch[200000];\n-        fseek(file, -sizeof(pch), SEEK_END);\n-        int nBytes = fread(pch, 1, sizeof(pch), file);\n+        char buffer[200000] = \"\";\n+        fseek(file, -sizeof(buffer), SEEK_END);\n+        int nBytes = fread(buffer, 1, sizeof(buffer), file);\n         fclose(file);\n \n         file = fopen(pathLog.string().c_str(), \"w\");\n         if (file)\n         {\n-            fwrite(pch, 1, nBytes, file);\n+            fwrite(buffer, 1, nBytes, file);\n             fclose(file);\n         }\n     }\n@@ -1146,7 +1132,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n static void pop_lock()\n {\n-    if (fDebug) \n+    if (fDebug)\n     {\n         const CLockLocation& locklocation = (*lockstack).rbegin()->second;\n         printf(\"Unlocked: %s\\n\", locklocation.ToString().c_str());"
      },
      {
        "sha": "1ed3f3cb7e6e78e3cd92b36e816fa8997a77195a",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f1f65430efe6e4fed4af9175d41baa9f25a3811/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "patch": "@@ -91,7 +91,7 @@ T* alignup(T* p)\n #define _vsnprintf(a,b,c,d) vsnprintf(a,b,c,d)\n #define strlwr(psz)         to_lower(psz)\n #define _strlwr(psz)        to_lower(psz)\n-#define MAX_PATH            1024\n+#define MAX_PATH            1024 // Windows: 260 (in windef.h)\n inline void Sleep(int64 n)\n {\n     /*Boost has a year 2038 problem\u2014 if the request sleep time is past epoch+2^31 seconds the sleep returns instantly.\n@@ -161,7 +161,7 @@ boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n bool ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef WIN32\n-boost::filesystem::path MyGetSpecialFolderPath(int nFolder, bool fCreate);\n+boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n@@ -564,7 +564,7 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n }\n \n \n-/** Median filter over a stream of values. \n+/** Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */\n template <typename T> class CMedianFilter\n@@ -581,7 +581,7 @@ template <typename T> class CMedianFilter\n         vValues.push_back(initial_value);\n         vSorted = vValues;\n     }\n-    \n+\n     void input(T value)\n     {\n         if(vValues.size() == nSize)"
      }
    ]
  },
  {
    "sha": "dc21c2929adc1f4810e4b9601b700601c0b0edf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzIxYzI5MjlhZGMxZjQ4MTBlNGI5NjAxYjcwMDYwMWMwYjBlZGYx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-12T07:13:55Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-12T16:16:16Z"
      },
      "message": "rename Windows Autostart shortcut to \"Bitcoin-Qt.lnk\" and ensure the legacy shortcut gets updated",
      "tree": {
        "sha": "cb08f30ac6c2cbdaaad424084657e31351d49ba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb08f30ac6c2cbdaaad424084657e31351d49ba2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc21c2929adc1f4810e4b9601b700601c0b0edf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc21c2929adc1f4810e4b9601b700601c0b0edf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc21c2929adc1f4810e4b9601b700601c0b0edf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc21c2929adc1f4810e4b9601b700601c0b0edf1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f1f65430efe6e4fed4af9175d41baa9f25a3811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f1f65430efe6e4fed4af9175d41baa9f25a3811"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4e232da7f5b5bafd47db4eccf3c3f0ca3fd73bf3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc21c2929adc1f4810e4b9601b700601c0b0edf1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc21c2929adc1f4810e4b9601b700601c0b0edf1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dc21c2929adc1f4810e4b9601b700601c0b0edf1",
        "patch": "@@ -584,18 +584,24 @@ bool AppInit2(int argc, char* argv[])\n }\n \n #ifdef WIN32\n-filesystem::path StartupShortcutPath()\n+filesystem::path StartupShortcutPath(bool fLegacy = false)\n {\n-    return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+    if (fLegacy)\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+    else\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin-Qt.lnk\";\n }\n \n bool GetStartOnSystemStartup()\n {\n-    return filesystem::exists(StartupShortcutPath());\n+    // check for Bitcoin.lnk (legacy) or Bitcoin-Qt.lnk (new)\n+    return (filesystem::exists(StartupShortcutPath(true)) || filesystem::exists(StartupShortcutPath()));\n }\n \n bool SetStartOnSystemStartup(bool fAutoStart)\n {\n+    // ensure the legacy shortcut gets removed\n+    filesystem::remove(StartupShortcutPath(true));\n     // If the shortcut exists already, remove it for updating\n     filesystem::remove(StartupShortcutPath());\n "
      }
    ]
  },
  {
    "sha": "081ba7fd341d93a9f038f0cf9fda3698956c3051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODFiYTdmZDM0MWQ5M2E5ZjAzOGYwY2Y5ZmRhMzY5ODk1NmMzMDUx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-12T16:13:35Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-04-12T16:16:17Z"
      },
      "message": "removed an unused var that I overlooked while resolving rebase conflicts",
      "tree": {
        "sha": "ef7777d8f3c4ff99fadefee9983a60127c1eaa8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef7777d8f3c4ff99fadefee9983a60127c1eaa8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/081ba7fd341d93a9f038f0cf9fda3698956c3051",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081ba7fd341d93a9f038f0cf9fda3698956c3051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/081ba7fd341d93a9f038f0cf9fda3698956c3051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081ba7fd341d93a9f038f0cf9fda3698956c3051/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dc21c2929adc1f4810e4b9601b700601c0b0edf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc21c2929adc1f4810e4b9601b700601c0b0edf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc21c2929adc1f4810e4b9601b700601c0b0edf1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1d552f23c9f15b4e432cde6069367f2716b3fe20",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081ba7fd341d93a9f038f0cf9fda3698956c3051/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081ba7fd341d93a9f038f0cf9fda3698956c3051/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=081ba7fd341d93a9f038f0cf9fda3698956c3051",
        "patch": "@@ -195,9 +195,10 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n         // accumulate a line at a time\n         {\n             LOCK(cs_OutputDebugStringF);\n-            static char pszBuffer[50000];\n+\n             static char staticBuffer[50000];\n             static char* pend;\n+\n             if (pend == NULL)\n                 pend = staticBuffer;\n             va_list arg_ptr;"
      }
    ]
  }
]