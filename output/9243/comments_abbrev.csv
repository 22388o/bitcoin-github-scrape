gmaxwell,2016-11-30T06:11:34Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-263792045,263792045,
jonasschnelli,2016-11-30T07:41:55Z,"Nice.\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-263804737,263804737,
sipa,2016-12-01T00:32:05Z,"utACK 69337dcab02e2e972711781ae1fba7f541d67b17, but needs rebase.\n\nAlso, maybe the ""Fix calculation of number of bound sockets to use"" commit should be moved to a separate PR; maybe we want to backport it?",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264042320,264042320,
TheBlueMatt,2016-12-01T02:57:44Z,"Rebased and opened #9253, which this is now dependant on (the socket count fix).",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264065407,264065407,
instagibbs,2016-12-01T16:57:05Z,utACK https://github.com/bitcoin/bitcoin/pull/9243/commits/14e3df21e067f41b6f624ea7ee25601f87267faa,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264228796,264228796,
jtimon,2016-12-02T09:27:18Z,"This seems incompatible with #8994 , if there's any suggestions there, specifically regarding 5cc59df0dce56c9393b2bd1af773d708bb76a3cb (aka ""Globals: Allow to parse arguments without implicitly using the argMap globa""l), that would be welcomed.",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264410565,264410565,
MarcoFalke,2016-12-02T17:01:45Z,utACK 14e3df21e067f41b6f624ea7ee25601f87267faa,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264505002,264505002,
TheBlueMatt,2016-12-02T18:17:29Z,"@jtimon I think for things which are their own classes, they should either have the arguments they care about passed into the constructor, or passed in when they need them (eg the way mempool limiting is done now). The concept of a map from arguments to values is inherintly Bitcoin Core-specific, so inherintly global.",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264523375,264523375,
jtimon,2016-12-02T22:05:59Z,">  I think for things which are their own classes, they should either have the arguments they care about passed into the constructor, or passed in when they need them (eg the way mempool limiting is done now)\n\nI think it is better to discuss the different options for Chainparams in #8994 (I've been trying to do something similar for the never created policy class for very long too), I will ans",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264575174,264575174,
TheBlueMatt,2016-12-02T22:19:27Z,"By ""inherently global"", I mean that eg mapArgs probably should not exist in anything like libbitcoinconsensus, and, generally, can just be a global that is queries when things are initialized and then the parameters fed into the object which cares about them.",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264577910,264577910,
jtimon,2016-12-02T22:39:33Z,"Right, I agree it should not exist in  libbitcoinconsensus.\nAnd agree mapArgs and mapMultiArgs should be initialized once while initializing and then never edit them again.\nI don't see the problem with passing mapArgs and/or mapMultiArgs as const to a class constructor for future extensibility, but if you think that passing the only arguments they care about is cleaner, that's not what you are",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264581781,264581781,
TheBlueMatt,2016-12-02T22:49:48Z,"The contents of e87822043d4118d1b02d066ee213d341af3ff4e9 are less about passing around a map (which is, itself, kinda insane) and more about cleaning up the insane argument-parsing monstrosity in the zmq stuff.\n\nAs for generally, I dont get your crusade against globals. Some things, like arguments, simply /are/ globals. In places where we want isolated chunks for testing, those isolated chunks",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264583672,264583672,
jtimon,2016-12-02T23:35:38Z,"> The contents of e878220 are less about passing around a map (which is, itself, kinda insane) and more about cleaning up the insane argument-parsing monstrosity in the zmq stuff.\n\nI don't see how using something implicitly is any more sane than passing it explicitly.\n\n> As for generally, I dont get your crusade against globals. Some things, like arguments, simply /are/ globals.\n\nNo, g",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264591521,264591521,
TheBlueMatt,2016-12-02T23:45:23Z,"The problem with the ZMQ stuff is less that its being passed the list of all arguments in the world, and more that it bends over backwards to use map operations to look up 4 elements...\n\nNote that this PR isnt about creating an ""ideal design"" it is about fixing actual race conditions (ok, admittedly that arent a big deal) in mapArgs accessing as used in the codebase today. Eventually mapArgs w",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264592972,264592972,
jtimon,2016-12-03T05:10:33Z,"re zmq: I understand you considered two different ""problems"":\n1) Not considering the code for retrieving the values elegant. I guess of the ugly use of const_iterator just as the simplest way to comply with the parameter map being const instead of using the global (not the implementor, see below). Or maybe the ""hackish"" way in which the keys for the args are constructed using string manipulation",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264617380,264617380,
gmaxwell,2016-12-03T09:16:05Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264627750,264627750,
TheBlueMatt,2016-12-03T22:06:53Z,"Rebased. @jtimon I suppose we dont really strongly disagree on the goal, though maybe disagree on how to get there. Can we leave that for another PR and take this as-is to fix the issues that we have now?",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264668755,264668755,
gmaxwell,2016-12-05T07:19:55Z,ACK.,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264783685,264783685,
laanwj,2016-12-05T07:33:47Z,"ACK on wrapping the accesses.\n\nI'm surprised that a lock is needed here, I assumed the arguments were read-only after initialization.\n\nAnyhow there shouldn't be any argument accesses in an inner loop where overhead matters so adding the lock just in case makes sense, I guess.\n\n> The problem with the ZMQ stuff is less that its being passed the list of all arguments in the world, and mor",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-264785516,264785516,
MarcoFalke,2016-12-06T21:33:38Z,reACK 62b8ba5f0a3d22e0dfcef9a3e1e7fa5c3f48b5ce,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-265279364,265279364,
laanwj,2016-12-08T12:41:42Z,Needs a rebase in DoS_tests.,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-265731199,265731199,
TheBlueMatt,2016-12-24T02:36:49Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269065124,269065124,
jtimon,2016-12-24T09:03:27Z,"> Yes the ZMQ argument parsing loop is silly\n\nNote that silly loop hasn't been removed here.\nI still don't see what ""garbage"" is being cleaned up in https://github.com/bitcoin/bitcoin/pull/9243/commits/61444322f36fdbf9ff5ba1a3d8382f9c892da8d8 \n\nutACK 87a6f1d (although as previously said I still don't like some commit messages and I left another comment).\n",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269076101,269076101,
TheBlueMatt,2016-12-24T16:12:06Z,"OK, retitled that commit to make you happy, but at some point someone needs to go back and clean up that stuff.",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269090302,269090302,
jtimon,2016-12-24T20:14:32Z,"I would have been happy with just renaming the commit message, or explaining further what garbage were you cleaning, but thanks. No opposition on removing getArg from the loop, but you maintained the loop and everything which was supposedly wrong with it (except from passing mapArgs as arguments, which is the art you wanted to remove I think).",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269098660,269098660,
TheBlueMatt,2016-12-27T12:53:02Z,Fixed @dcousens' comments from https://github.com/bitcoin/bitcoin/pull/9419#discussion_r93908981,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269322221,269322221,
dcousens,2016-12-27T13:15:44Z,"utACK c2f61be,  and thanks for linking me @TheBlueMatt",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269324445,269324445,
sipa,2016-12-27T18:07:04Z,utACK c2f61bebb190258753714b29ab2041e80651cec9,https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269361149,269361149,
jtimon,2016-12-27T23:21:02Z,"Thank you, this will hirt less the faster it is imo.\n\nOn 27 Dec 2016 19:17, ""Pieter Wuille"" <notifications@github.com> wrote:\n\n> Merged #9243 <https://github.com/bitcoin/bitcoin/pull/9243>.\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/9243#event-905908891>, or mute\n> the thread\n> <",https://github.com/bitcoin/bitcoin/pull/9243#issuecomment-269396943,269396943,
sipa,2016-11-30T03:24:56Z,"I believe this instantiates a `mapMultiArgs` variable into every .cpp file (all initialized as the same reference).\n\nThis will work, I think:\n```diff\nutil.cpp:\n map<string, vector<string> > _mapMultiArgs;\n+static std::map<std::string, std::vector<std::string> > mapMultiArgs_;\n+const std::map<std::string, std::vector<std::string> >& mapMultiArgs = mapMultiArgs;\n bool fDebug = false;",https://github.com/bitcoin/bitcoin/pull/9243#discussion_r90162901,90162901,src/util.h
MarcoFalke,2016-12-02T16:27:41Z,"github-web-view-Nit: Needs this patch removed after c1a52276848d8caa9a9789dff176408c1aa6b1ed\n\n(I think you can push an empty commit and then remove it by force push, to get this removed from the web view)\n",https://github.com/bitcoin/bitcoin/pull/9243#discussion_r90673400,90673400,src/init.cpp
jtimon,2016-12-24T09:02:13Z,"If we're going to still have it in the tests, why not keep having it declared in one place (util.h) instead of at least 4 places?",https://github.com/bitcoin/bitcoin/pull/9243#discussion_r93814857,93814857,src/test/util_tests.cpp
TheBlueMatt,2016-12-24T16:11:31Z,Removed it from three of the four by adding a ForceSetArg method for testing.,https://github.com/bitcoin/bitcoin/pull/9243#discussion_r93818683,93818683,src/test/util_tests.cpp
