[
  {
    "sha": "c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODA0MmE0OGYwMWFhZjMwNmUxMDg2ODNlNDBkYjRiZmFmMGJiY2Fh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-29T23:17:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T02:30:15Z"
      },
      "message": "Remove arguments to ParseConfigFile",
      "tree": {
        "sha": "8baf9690b4ab0628b7f3795d24dbab85dcac0374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8baf9690b4ab0628b7f3795d24dbab85dcac0374"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f921e6a0492c4e9f037a9ed91f474885032d68c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f921e6a0492c4e9f037a9ed91f474885032d68c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "cee9ae31b5728001c5f177d18da550eaf5bc295b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "patch": "@@ -99,7 +99,7 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n+        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;"
      },
      {
        "sha": "3dd085628958d63b3f1b74acea8acd4cd19f5bd1",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "patch": "@@ -104,7 +104,7 @@ bool AppInit(int argc, char* argv[])\n         }\n         try\n         {\n-            ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n+            ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "3ae54f3119c1e62d2973dbfeab10a1283cc40b9f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "patch": "@@ -608,7 +608,7 @@ int main(int argc, char *argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n+        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));"
      },
      {
        "sha": "8b3e5f93f08c59ee35532b7c1a6bfab3f342ee13",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "patch": "@@ -526,9 +526,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath)\n     return pathConfigFile;\n }\n \n-void ReadConfigFile(const std::string& confPath,\n-                    map<string, string>& mapSettingsRet,\n-                    map<string, vector<string> >& mapMultiSettingsRet)\n+void ReadConfigFile(const std::string& confPath)\n {\n     boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n@@ -543,9 +541,9 @@ void ReadConfigFile(const std::string& confPath,\n         string strKey = string(\"-\") + it->string_key;\n         string strValue = it->value[0];\n         InterpretNegativeSetting(strKey, strValue);\n-        if (mapSettingsRet.count(strKey) == 0)\n-            mapSettingsRet[strKey] = strValue;\n-        mapMultiSettingsRet[strKey].push_back(strValue);\n+        if (mapArgs.count(strKey) == 0)\n+            mapArgs[strKey] = strValue;\n+        mapMultiArgs[strKey].push_back(strValue);\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      },
      {
        "sha": "4fb09046bdf27ac0025ee2314dce5ddd24fd3de8",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8042a48f01aaf306e108683e40db4bfaf0bbcaa/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "patch": "@@ -106,7 +106,7 @@ boost::filesystem::path GetConfigFile(const std::string& confPath);\n boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n #endif\n-void ReadConfigFile(const std::string& confPath, std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n+void ReadConfigFile(const std::string& confPath);\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif"
      }
    ]
  },
  {
    "sha": "2b5f085ad11b4b354f48d77e66698fa386c8abbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjVmMDg1YWQxMWI0YjM1NGY0OGQ3N2U2NjY5OGZhMzg2YzhhYmJk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T00:50:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T02:30:15Z"
      },
      "message": "Fix non-const mapMultiArgs[] access after init.\n\nSwap mapMultiArgs for a const-reference to a _mapMultiArgs which is\nonly accessed in util.cpp",
      "tree": {
        "sha": "c4271c5b5007958565d443d76829d8dbf5135981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4271c5b5007958565d443d76829d8dbf5135981"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b5f085ad11b4b354f48d77e66698fa386c8abbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5f085ad11b4b354f48d77e66698fa386c8abbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5f085ad11b4b354f48d77e66698fa386c8abbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5f085ad11b4b354f48d77e66698fa386c8abbd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8042a48f01aaf306e108683e40db4bfaf0bbcaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8042a48f01aaf306e108683e40db4bfaf0bbcaa"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 56,
      "deletions": 43
    },
    "files": [
      {
        "sha": "049a3f19a52adb481c902078e2054c8203f6db4b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -95,7 +95,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n \n     if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n-        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs.at(\"-rpcauth\"))\n         {\n             std::vector<std::string> vFields;\n             boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));"
      },
      {
        "sha": "2d25168a1630b5afd963e77b73a42f1e1065c094",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -204,7 +204,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv4, 8));      // always allow IPv4 local subnet\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     if (mapMultiArgs.count(\"-rpcallowip\")) {\n-        const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n+        const std::vector<std::string>& vAllow = mapMultiArgs.at(\"-rpcallowip\");\n         for (std::string strAllow : vAllow) {\n             CSubNet subnet;\n             LookupSubNet(strAllow.c_str(), subnet);\n@@ -328,8 +328,8 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         if (mapArgs.count(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n-    } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n-        const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n+    } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address\n+        const std::vector<std::string>& vbind = mapMultiArgs.at(\"-rpcbind\");\n         for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n             int port = defaultPort;\n             std::string host;"
      },
      {
        "sha": "ecfd33fb62696c72667e2e2e97573331b2eb1d50",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 26,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -717,7 +717,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n \n-    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0) {\n+    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0) {\n         // when only connecting to trusted nodes, do not seed via DNS, or listen by default\n         if (SoftSetBoolArg(\"-dnsseed\", false))\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -dnsseed=0\\n\", __func__);\n@@ -880,11 +880,13 @@ bool AppInitParameterInteraction()\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n-    fDebug = !mapMultiArgs[\"-debug\"].empty();\n+    fDebug = mapMultiArgs.count(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n-    const vector<string>& categories = mapMultiArgs[\"-debug\"];\n-    if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n-        fDebug = false;\n+    if (fDebug) {\n+        const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n+        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n+            fDebug = false;\n+    }\n \n     // Check for -debugnet\n     if (GetBoolArg(\"-debugnet\", false))\n@@ -1003,12 +1005,12 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n-    if (!mapMultiArgs[\"-bip9params\"].empty()) {\n+    if (mapMultiArgs.count(\"-bip9params\")) {\n         // Allow overriding BIP9 parameters for testing\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n+        const vector<string>& deployments = mapMultiArgs.at(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1154,21 +1156,23 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<string> uacomments;\n-    BOOST_FOREACH(string cmt, mapMultiArgs[\"-uacomment\"])\n-    {\n-        if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n-        uacomments.push_back(SanitizeString(cmt, SAFE_CHARS_UA_COMMENT));\n+    if (mapMultiArgs.count(\"-uacomment\")) {\n+        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        {\n+            if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n+                return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n+            uacomments.push_back(cmt);\n+        }\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n         return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n-    if (mapArgs.count(\"-onlynet\")) {\n+    if (mapMultiArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n-        BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {\n+        BOOST_FOREACH(const std::string& snet, mapMultiArgs.at(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n                 return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n@@ -1181,8 +1185,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (mapArgs.count(\"-whitelist\")) {\n-        BOOST_FOREACH(const std::string& net, mapMultiArgs[\"-whitelist\"]) {\n+    if (mapMultiArgs.count(\"-whitelist\")) {\n+        BOOST_FOREACH(const std::string& net, mapMultiArgs.at(\"-whitelist\")) {\n             CSubNet subnet;\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n@@ -1234,14 +1238,16 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (fListen) {\n         bool fBound = false;\n-        if (mapArgs.count(\"-bind\") || mapArgs.count(\"-whitebind\")) {\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-bind\"]) {\n+        if (mapMultiArgs.count(\"-bind\")) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-bind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n-            BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n+        }\n+        if (mapMultiArgs.count(\"-whitebind\")) {\n+            BOOST_FOREACH(const std::string& strBind, mapMultiArgs.at(\"-whitebind\")) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n@@ -1250,7 +1256,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n             }\n         }\n-        else {\n+        if (!mapMultiArgs.count(\"-bind\") && !mapMultiArgs.count(\"-whitebind\")) {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n             fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n@@ -1260,8 +1266,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));\n     }\n \n-    if (mapArgs.count(\"-externalip\")) {\n-        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-externalip\"]) {\n+    if (mapMultiArgs.count(\"-externalip\")) {\n+        BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-externalip\")) {\n             CService addrLocal;\n             if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n                 AddLocal(addrLocal, LOCAL_MANUAL);\n@@ -1270,8 +1276,10 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n-        connman.AddOneShot(strDest);\n+    if (mapMultiArgs.count(\"-seednode\")) {\n+        BOOST_FOREACH(const std::string& strDest, mapMultiArgs.at(\"-seednode\"))\n+            connman.AddOneShot(strDest);\n+    }\n \n #if ENABLE_ZMQ\n     pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);\n@@ -1519,9 +1527,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<boost::filesystem::path> vImportFiles;\n-    if (mapArgs.count(\"-loadblock\"))\n+    if (mapMultiArgs.count(\"-loadblock\"))\n     {\n-        BOOST_FOREACH(const std::string& strFile, mapMultiArgs[\"-loadblock\"])\n+        BOOST_FOREACH(const std::string& strFile, mapMultiArgs.at(\"-loadblock\"))\n             vImportFiles.push_back(strFile);\n     }\n "
      },
      {
        "sha": "3ac96235480d1fc27dfcd28de738c6881edfb00b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -1569,12 +1569,12 @@ void CConnman::ProcessOneShot()\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n-    if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n+    if (mapMultiArgs.count(\"-connect\") && mapMultiArgs.at(\"-connect\").size() > 0)\n     {\n         for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n-            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs[\"-connect\"])\n+            BOOST_FOREACH(const std::string& strAddr, mapMultiArgs.at(\"-connect\"))\n             {\n                 CAddress addr(CService(), NODE_NONE);\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n@@ -1765,7 +1765,8 @@ void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n-        vAddedNodes = mapMultiArgs[\"-addnode\"];\n+        if (mapMultiArgs.count(\"-addnode\"))\n+            vAddedNodes = mapMultiArgs.at(\"-addnode\");\n     }\n \n     for (unsigned int i = 0; true; i++)\n@@ -2157,7 +2158,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n \n     // Initiate outbound connections unless connect=0\n-    if (!mapArgs.count(\"-connect\") || mapMultiArgs[\"-connect\"].size() != 1 || mapMultiArgs[\"-connect\"][0] != \"0\")\n+    if (!mapMultiArgs.count(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n         threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n \n     // Process messages"
      },
      {
        "sha": "493d58641cb076339346e4d321a50a9cc442f346",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n \n     BOOST_CHECK(mapArgs[\"-a\"] == \"\" && mapArgs[\"-ccc\"] == \"multiple\");\n-    BOOST_CHECK(mapMultiArgs[\"-ccc\"].size() == 2);\n+    BOOST_CHECK(mapMultiArgs.at(\"-ccc\").size() == 2);\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)"
      },
      {
        "sha": "6625ac9325626c806b33f35102d660dded63c573",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -103,7 +103,8 @@ const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n map<string, string> mapArgs;\n-map<string, vector<string> > mapMultiArgs;\n+static map<string, vector<string> > _mapMultiArgs;\n+const map<string, vector<string> >& mapMultiArgs = _mapMultiArgs;\n bool fDebug = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugLog = true;\n@@ -238,9 +239,12 @@ bool LogAcceptCategory(const char* category)\n         static boost::thread_specific_ptr<set<string> > ptrCategory;\n         if (ptrCategory.get() == NULL)\n         {\n-            const vector<string>& categories = mapMultiArgs[\"-debug\"];\n-            ptrCategory.reset(new set<string>(categories.begin(), categories.end()));\n-            // thread_specific_ptr automatically deletes the set when the thread ends.\n+            if (mapMultiArgs.count(\"-debug\")) {\n+                const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n+                ptrCategory.reset(new set<string>(categories.begin(), categories.end()));\n+                // thread_specific_ptr automatically deletes the set when the thread ends.\n+            } else\n+                ptrCategory.reset(new set<string>());\n         }\n         const set<string>& setCategories = *ptrCategory.get();\n \n@@ -343,7 +347,7 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n void ParseParameters(int argc, const char* const argv[])\n {\n     mapArgs.clear();\n-    mapMultiArgs.clear();\n+    _mapMultiArgs.clear();\n \n     for (int i = 1; i < argc; i++)\n     {\n@@ -371,7 +375,7 @@ void ParseParameters(int argc, const char* const argv[])\n         InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n-        mapMultiArgs[str].push_back(strValue);\n+        _mapMultiArgs[str].push_back(strValue);\n     }\n }\n \n@@ -543,7 +547,7 @@ void ReadConfigFile(const std::string& confPath)\n         InterpretNegativeSetting(strKey, strValue);\n         if (mapArgs.count(strKey) == 0)\n             mapArgs[strKey] = strValue;\n-        mapMultiArgs[strKey].push_back(strValue);\n+        _mapMultiArgs[strKey].push_back(strValue);\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      },
      {
        "sha": "5d1d80d2df2e9fffec9eb17f6c6655e2218955aa",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5f085ad11b4b354f48d77e66698fa386c8abbd/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "patch": "@@ -42,7 +42,7 @@ class CTranslationInterface\n };\n \n extern std::map<std::string, std::string> mapArgs;\n-extern std::map<std::string, std::vector<std::string> > mapMultiArgs;\n+extern const std::map<std::string, std::vector<std::string> >& mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugLog;"
      }
    ]
  },
  {
    "sha": "0cf86a6678413aa03e765a7133f048df4001ff4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2Y4NmE2Njc4NDEzYWEwM2U3NjVhNzEzM2YwNDhkZjQwMDFmZjRj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T01:51:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T02:30:16Z"
      },
      "message": "Introduce (and use) an IsArgSet accessor method",
      "tree": {
        "sha": "10846a31ea17a64d66a77f15acc182aeeea43861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10846a31ea17a64d66a77f15acc182aeeea43861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cf86a6678413aa03e765a7133f048df4001ff4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cf86a6678413aa03e765a7133f048df4001ff4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cf86a6678413aa03e765a7133f048df4001ff4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cf86a6678413aa03e765a7133f048df4001ff4c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5f085ad11b4b354f48d77e66698fa386c8abbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5f085ad11b4b354f48d77e66698fa386c8abbd"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 44,
      "deletions": 31
    },
    "files": [
      {
        "sha": "a4360dcd139a5c475fe65e3b8013dc2f63d34ad2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -76,9 +76,9 @@ static int AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     ParseParameters(argc, argv);\n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n+    if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\")) {\n         std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n-        if (!mapArgs.count(\"-version\")) {\n+        if (!IsArgSet(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n                   \"  bitcoin-cli [options] <command> [params]  \" + strprintf(_(\"Send command to %s\"), _(PACKAGE_NAME)) + \"\\n\" +\n                   \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +"
      },
      {
        "sha": "d46f33045305885bfc337cb1f8056025f0cb58ec",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -51,7 +51,7 @@ static int AppInitRawTx(int argc, char* argv[])\n \n     fCreateBlank = GetBoolArg(\"-create\", false);\n \n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\"))\n+    if (argc<2 || IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\"))\n     {\n         // First part of help message is specific to this utility\n         std::string strUsage = strprintf(_(\"%s bitcoin-tx utility version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\\n\" +"
      },
      {
        "sha": "ee27f412209c1368c7786ed622e077231ce45647",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -75,11 +75,11 @@ bool AppInit(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") ||  mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (IsArgSet(\"-?\") || IsArgSet(\"-h\") ||  IsArgSet(\"-help\") || IsArgSet(\"-version\"))\n     {\n         std::string strUsage = strprintf(_(\"%s Daemon\"), _(PACKAGE_NAME)) + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n \n-        if (mapArgs.count(\"-version\"))\n+        if (IsArgSet(\"-version\"))\n         {\n             strUsage += FormatParagraph(LicenseInfo());\n         }"
      },
      {
        "sha": "2573900746f37532dd5940d1760a02f6a16d5575",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -322,10 +322,10 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n-    if (!mapArgs.count(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+    if (!IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n         endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n         endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n-        if (mapArgs.count(\"-rpcbind\")) {\n+        if (IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (mapMultiArgs.count(\"-rpcbind\")) { // Specific bind address"
      },
      {
        "sha": "778d66fba840a9c0dcfb107e5405ec390ca07bdb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -708,11 +708,11 @@ void InitParameterInteraction()\n {\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n-    if (mapArgs.count(\"-bind\")) {\n+    if (IsArgSet(\"-bind\")) {\n         if (SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -bind set -> setting -listen=1\\n\", __func__);\n     }\n-    if (mapArgs.count(\"-whitebind\")) {\n+    if (IsArgSet(\"-whitebind\")) {\n         if (SoftSetBoolArg(\"-listen\", true))\n             LogPrintf(\"%s: parameter interaction: -whitebind set -> setting -listen=1\\n\", __func__);\n     }\n@@ -725,7 +725,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -connect set -> setting -listen=0\\n\", __func__);\n     }\n \n-    if (mapArgs.count(\"-proxy\")) {\n+    if (IsArgSet(\"-proxy\")) {\n         // to protect privacy, do not listen by default if a default proxy server is specified\n         if (SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"%s: parameter interaction: -proxy set -> setting -listen=0\\n\", __func__);\n@@ -748,7 +748,7 @@ void InitParameterInteraction()\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n     }\n \n-    if (mapArgs.count(\"-externalip\")) {\n+    if (IsArgSet(\"-externalip\")) {\n         // if an explicit public IP is specified, do not try to find others\n         if (SoftSetBoolArg(\"-discover\", false))\n             LogPrintf(\"%s: parameter interaction: -externalip set -> setting -discover=0\\n\", __func__);\n@@ -892,7 +892,7 @@ bool AppInitParameterInteraction()\n     if (GetBoolArg(\"-debugnet\", false))\n         InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n     // Check for -socks - as this is a privacy risk to continue, exit here\n-    if (mapArgs.count(\"-socks\"))\n+    if (IsArgSet(\"-socks\"))\n         return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n     // Check for -tor - as this is a privacy risk to continue, exit here\n     if (GetBoolArg(\"-tor\", false))\n@@ -904,7 +904,7 @@ bool AppInitParameterInteraction()\n     if (GetBoolArg(\"-whitelistalwaysrelay\", false))\n         InitWarning(_(\"Unsupported argument -whitelistalwaysrelay ignored, use -whitelistrelay and/or -whitelistforcerelay.\"));\n \n-    if (mapArgs.count(\"-blockminsize\"))\n+    if (IsArgSet(\"-blockminsize\"))\n         InitWarning(\"Unsupported argument -blockminsize ignored.\");\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n@@ -959,7 +959,7 @@ bool AppInitParameterInteraction()\n     // a transaction spammer can cheaply fill blocks using\n     // 1-satoshi-fee transactions. It should be set above the real\n     // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-minrelaytxfee\"))\n+    if (IsArgSet(\"-minrelaytxfee\"))\n     {\n         CAmount n = 0;\n         if (!ParseMoney(mapArgs[\"-minrelaytxfee\"], n) || 0 == n)\n@@ -997,7 +997,7 @@ bool AppInitParameterInteraction()\n     nMaxTipAge = GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     fEnableReplacement = GetBoolArg(\"-mempoolreplacement\", DEFAULT_ENABLE_REPLACEMENT);\n-    if ((!fEnableReplacement) && mapArgs.count(\"-mempoolreplacement\")) {\n+    if ((!fEnableReplacement) && IsArgSet(\"-mempoolreplacement\")) {\n         // Minimal effort at forwards compatibility\n         std::string strReplacementModeList = GetArg(\"-mempoolreplacement\", \"\");  // default is impossible\n         std::vector<std::string> vstrReplacementModes;\n@@ -1291,7 +1291,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uint64_t nMaxOutboundLimit = 0; //unlimited unless -maxuploadtarget is set\n     uint64_t nMaxOutboundTimeframe = MAX_UPLOAD_TIMEFRAME;\n \n-    if (mapArgs.count(\"-maxuploadtarget\")) {\n+    if (IsArgSet(\"-maxuploadtarget\")) {\n         nMaxOutboundLimit = GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024;\n     }\n \n@@ -1523,7 +1523,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         fHaveGenesis = true;\n     }\n \n-    if (mapArgs.count(\"-blocknotify\"))\n+    if (IsArgSet(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<boost::filesystem::path> vImportFiles;"
      },
      {
        "sha": "55231730fa138f893f9bc954af29d11a0bddc1fd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -84,12 +84,12 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n     bool fWeightSet = false;\n-    if (mapArgs.count(\"-blockmaxweight\")) {\n+    if (IsArgSet(\"-blockmaxweight\")) {\n         nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n         nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n         fWeightSet = true;\n     }\n-    if (mapArgs.count(\"-blockmaxsize\")) {\n+    if (IsArgSet(\"-blockmaxsize\")) {\n         nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n         if (!fWeightSet) {\n             nBlockMaxWeight = nBlockMaxSize * WITNESS_SCALE_FACTOR;"
      },
      {
        "sha": "98872200ddf5cd4f1cc64f737695024a8cddff59",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -1060,7 +1060,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n-    if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+    if (IsArgSet(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n         return true;"
      },
      {
        "sha": "9d80a380083532b248b85027c37c04b6a7b446be",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -587,9 +587,9 @@ int main(int argc, char *argv[])\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (IsArgSet(\"-?\") || IsArgSet(\"-h\") || IsArgSet(\"-help\") || IsArgSet(\"-version\"))\n     {\n-        HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n+        HelpMessageDialog help(NULL, IsArgSet(\"-version\"));\n         help.showOrPrint();\n         return EXIT_SUCCESS;\n     }\n@@ -672,7 +672,7 @@ int main(int argc, char *argv[])\n     // Allow parameter interaction before we create the options model\n     app.parameterSetup();\n     // Load GUI settings from QSettings\n-    app.createOptionsModel(mapArgs.count(\"-resetguisettings\") != 0);\n+    app.createOptionsModel(IsArgSet(\"-resetguisettings\"));\n \n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);"
      },
      {
        "sha": "6ce065b377171d4c49f2aaa8882fa5fe3103d627",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -115,8 +115,8 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n     BOOST_CHECK(mapArgs.size() == 3 && mapMultiArgs.size() == 3);\n-    BOOST_CHECK(mapArgs.count(\"-a\") && mapArgs.count(\"-b\") && mapArgs.count(\"-ccc\")\n-                && !mapArgs.count(\"f\") && !mapArgs.count(\"-d\"));\n+    BOOST_CHECK(IsArgSet(\"-a\") && IsArgSet(\"-b\") && IsArgSet(\"-ccc\")\n+                && !IsArgSet(\"f\") && !IsArgSet(\"-d\"));\n     BOOST_CHECK(mapMultiArgs.count(\"-a\") && mapMultiArgs.count(\"-b\") && mapMultiArgs.count(\"-ccc\")\n                 && !mapMultiArgs.count(\"f\") && !mapMultiArgs.count(\"-d\"));\n "
      },
      {
        "sha": "cef3e97c28c1c4ea11ea69a0e1e8f6b268847281",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -379,6 +379,11 @@ void ParseParameters(int argc, const char* const argv[])\n     }\n }\n \n+bool IsArgSet(const std::string& strArg)\n+{\n+    return mapArgs.count(strArg);\n+}\n+\n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n {\n     if (mapArgs.count(strArg))\n@@ -498,7 +503,7 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     if (!path.empty())\n         return path;\n \n-    if (mapArgs.count(\"-datadir\")) {\n+    if (IsArgSet(\"-datadir\")) {\n         path = fs::system_complete(mapArgs[\"-datadir\"]);\n         if (!fs::is_directory(path)) {\n             path = \"\";"
      },
      {
        "sha": "aff4c3271f7b583a2144bdeae0c2b6fcbc9063f0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -123,6 +123,14 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+/**\n+ * Return true if the given argument has been manually set\n+ *\n+ * @param strArg Argument to get (e.g. \"-foo\")\n+ * @return true if the argument has been set\n+ */\n+bool IsArgSet(const std::string& strArg);\n+\n /**\n  * Return string argument or default value\n  *"
      },
      {
        "sha": "51423f88e8238aac96b498fafa2149df76b00d08",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf86a6678413aa03e765a7133f048df4001ff4c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf86a6678413aa03e765a7133f048df4001ff4c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0cf86a6678413aa03e765a7133f048df4001ff4c",
        "patch": "@@ -3494,7 +3494,7 @@ bool CWallet::InitLoadWallet()\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n     }\n-    else if (mapArgs.count(\"-usehd\")) {\n+    else if (IsArgSet(\"-usehd\")) {\n         bool useHD = GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET);\n         if (walletInstance->IsHDEnabled() && !useHD)\n             return InitError(strprintf(_(\"Error loading %s: You can't disable HD on a already existing HD wallet\"), walletFile));\n@@ -3618,7 +3618,7 @@ bool CWallet::ParameterInteraction()\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (mapArgs.count(\"-mintxfee\"))\n+    if (IsArgSet(\"-mintxfee\"))\n     {\n         CAmount n = 0;\n         if (!ParseMoney(mapArgs[\"-mintxfee\"], n) || 0 == n)\n@@ -3628,7 +3628,7 @@ bool CWallet::ParameterInteraction()\n                         _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         CWallet::minTxFee = CFeeRate(n);\n     }\n-    if (mapArgs.count(\"-fallbackfee\"))\n+    if (IsArgSet(\"-fallbackfee\"))\n     {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-fallbackfee\"], nFeePerK))\n@@ -3638,7 +3638,7 @@ bool CWallet::ParameterInteraction()\n                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         CWallet::fallbackFee = CFeeRate(nFeePerK);\n     }\n-    if (mapArgs.count(\"-paytxfee\"))\n+    if (IsArgSet(\"-paytxfee\"))\n     {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n@@ -3654,7 +3654,7 @@ bool CWallet::ParameterInteraction()\n                                        mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n         }\n     }\n-    if (mapArgs.count(\"-maxtxfee\"))\n+    if (IsArgSet(\"-maxtxfee\"))\n     {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))"
      }
    ]
  },
  {
    "sha": "71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWZkZTU1NjNiNWQwNWE2M2UzYWQwOGEzYzMyYTllNWZmYjk1MmY3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T02:43:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T16:10:39Z"
      },
      "message": "Get rid of mapArgs direct access in ZMQ construction",
      "tree": {
        "sha": "2692245d7c49deb7196763b88b138320b23fe417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2692245d7c49deb7196763b88b138320b23fe417"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cf86a6678413aa03e765a7133f048df4001ff4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cf86a6678413aa03e765a7133f048df4001ff4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cf86a6678413aa03e765a7133f048df4001ff4c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "76ef08da39c988ede0110118f21ba68f41bdbfef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
        "patch": "@@ -1282,7 +1282,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n #if ENABLE_ZMQ\n-    pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);\n+    pzmqNotificationInterface = CZMQNotificationInterface::Create();\n \n     if (pzmqNotificationInterface) {\n         RegisterValidationInterface(pzmqNotificationInterface);"
      },
      {
        "sha": "2f5efcb4db4291bc4ecec9b8ad22b3a050390320",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
        "patch": "@@ -29,7 +29,7 @@ CZMQNotificationInterface::~CZMQNotificationInterface()\n     }\n }\n \n-CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const std::map<std::string, std::string> &args)\n+CZMQNotificationInterface* CZMQNotificationInterface::Create()\n {\n     CZMQNotificationInterface* notificationInterface = NULL;\n     std::map<std::string, CZMQNotifierFactory> factories;\n@@ -42,11 +42,11 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n \n     for (std::map<std::string, CZMQNotifierFactory>::const_iterator i=factories.begin(); i!=factories.end(); ++i)\n     {\n-        std::map<std::string, std::string>::const_iterator j = args.find(\"-zmq\" + i->first);\n-        if (j!=args.end())\n+        std::string arg(\"-zmq\" + i->first);\n+        if (IsArgSet(arg))\n         {\n             CZMQNotifierFactory factory = i->second;\n-            std::string address = j->second;\n+            std::string address = GetArg(arg, \"\");\n             CZMQAbstractNotifier *notifier = factory();\n             notifier->SetType(i->first);\n             notifier->SetAddress(address);"
      },
      {
        "sha": "585554ccd255e0dd24119365ffdad0cc6e5e5b0d",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
        "patch": "@@ -17,7 +17,7 @@ class CZMQNotificationInterface : public CValidationInterface\n public:\n     virtual ~CZMQNotificationInterface();\n \n-    static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string> &args);\n+    static CZMQNotificationInterface* Create();\n \n protected:\n     bool Initialize();"
      }
    ]
  },
  {
    "sha": "4cd373aea8d20356727f7d65e0bc818beb6523dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2QzNzNhZWE4ZDIwMzU2NzI3ZjdkNjVlMGJjODE4YmViNjUyM2Rj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T02:45:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T16:29:33Z"
      },
      "message": "Un-expose mapArgs from utils.h",
      "tree": {
        "sha": "945990959f03be82089270427a7595431459942b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/945990959f03be82089270427a7595431459942b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cd373aea8d20356727f7d65e0bc818beb6523dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd373aea8d20356727f7d65e0bc818beb6523dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd373aea8d20356727f7d65e0bc818beb6523dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd373aea8d20356727f7d65e0bc818beb6523dc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71fde5563b5d05a63e3ad08a3c32a9e5ffb952f7"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 30,
      "deletions": 24
    },
    "files": [
      {
        "sha": "29d3cf67473e97b0041b10a0580b7b955157316b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -95,7 +95,7 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_SUCCESS;\n     }\n     if (!boost::filesystem::is_directory(GetDataDir(false))) {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n+        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n         return EXIT_FAILURE;\n     }\n     try {\n@@ -211,7 +211,7 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n \n     // Get credentials\n     std::string strRPCUserColonPass;\n-    if (mapArgs[\"-rpcpassword\"] == \"\") {\n+    if (GetArg(\"-rpcpassword\", \"\") == \"\") {\n         // Try fall back to cookie-based authentication if no password is provided\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw std::runtime_error(strprintf(\n@@ -220,7 +220,7 @@ UniValue CallRPC(const std::string& strMethod, const UniValue& params)\n \n         }\n     } else {\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+        strRPCUserColonPass = GetArg(\"-rpcuser\", \"\") + \":\" + GetArg(\"-rpcpassword\", \"\");\n     }\n \n     struct evkeyvalq *output_headers = evhttp_request_get_output_headers(req);"
      },
      {
        "sha": "98551ee85032e324056f084f6b6cea673cbbba05",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -99,7 +99,7 @@ bool AppInit(int argc, char* argv[])\n     {\n         if (!boost::filesystem::is_directory(GetDataDir(false)))\n         {\n-            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n+            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n         try"
      },
      {
        "sha": "970ce2db73b7e3d6eefc7f5f42d9ec388f83938a",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -215,7 +215,7 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n \n static bool InitRPCAuthentication()\n {\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    if (GetArg(\"-rpcpassword\", \"\") == \"\")\n     {\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n@@ -226,7 +226,7 @@ static bool InitRPCAuthentication()\n         }\n     } else {\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\\n\");\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+        strRPCUserColonPass = GetArg(\"-rpcuser\", \"\") + \":\" + GetArg(\"-rpcpassword\", \"\");\n     }\n     return true;\n }"
      },
      {
        "sha": "7d2bcb57b1b167629451adad439d90b519244ed1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -962,8 +962,8 @@ bool AppInitParameterInteraction()\n     if (IsArgSet(\"-minrelaytxfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(mapArgs[\"-minrelaytxfee\"], n) || 0 == n)\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n+        if (!ParseMoney(GetArg(\"-minrelaytxfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"minrelaytxfee\", GetArg(\"-minrelaytxfee\", \"\")));\n         // High fee check is done afterward in CWallet::ParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n     }"
      },
      {
        "sha": "6282849ed1867ffb15ac017cf94c654b9e1fd4a7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -1060,7 +1060,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n-    if (IsArgSet(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+    if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n         return true;"
      },
      {
        "sha": "36d803ce07afb6f43be183abcabcc4a5c29bffb6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -604,7 +604,7 @@ int main(int argc, char *argv[])\n     if (!boost::filesystem::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n-                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n     try {"
      },
      {
        "sha": "ce3a040109e15be99b457a335634e0a8be1a25cc",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -36,7 +36,7 @@ OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n \n void OptionsModel::addOverriddenOption(const std::string &option)\n {\n-    strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(mapArgs[option]) + \" \";\n+    strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(GetArg(option, \"\")) + \" \";\n }\n \n // Writes all missing QSettings with their default values\n@@ -464,4 +464,4 @@ void OptionsModel::checkAndMigrate()\n \n         settings.setValue(strSettingsVersionKey, CLIENT_VERSION);\n     }\n-}\n\\ No newline at end of file\n+}"
      },
      {
        "sha": "972dad72d04a2da3abf15028818f4c448f178659",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -19,6 +19,8 @@\n \n #include <boost/filesystem.hpp>\n \n+extern std::map<std::string, std::string> mapArgs;\n+\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {"
      },
      {
        "sha": "dafb096e807528a09ed3cb7b0b100901d99440c1",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -32,6 +32,7 @@ struct COrphanTx {\n     int64_t nTimeExpire;\n };\n extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n+extern std::map<std::string, std::string> mapArgs;\n \n CService ip(uint32_t i)\n {"
      },
      {
        "sha": "b62b317105668994fb012adf1af034c22bbb4c79",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -33,6 +33,8 @@\n std::unique_ptr<CConnman> g_connman;\n FastRandomContext insecure_rand_ctx(true);\n \n+extern std::map<std::string, std::string> mapArgs;\n+\n extern bool fPrintToConsole;\n extern void noui_connect();\n "
      },
      {
        "sha": "b2f601613fbd4b0042e56cec2a8177679b022fa9",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -19,6 +19,8 @@\n \n using namespace std;\n \n+extern map<string, string> mapArgs;\n+\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)"
      },
      {
        "sha": "0a5a8999972797279a5537c9ed954b999e5d58d1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -504,7 +504,7 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n         return path;\n \n     if (IsArgSet(\"-datadir\")) {\n-        path = fs::system_complete(mapArgs[\"-datadir\"]);\n+        path = fs::system_complete(GetArg(\"-datadir\", \"\"));\n         if (!fs::is_directory(path)) {\n             path = \"\";\n             return path;"
      },
      {
        "sha": "88f8bb1beb83afe2353905980e940b0a87e6084b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -41,7 +41,6 @@ class CTranslationInterface\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n };\n \n-extern std::map<std::string, std::string> mapArgs;\n extern const std::map<std::string, std::vector<std::string> >& mapMultiArgs;\n extern bool fDebug;\n extern bool fPrintToConsole;"
      },
      {
        "sha": "543cfd685e7f5f013f17e26d8625edcb73d7d2bd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cd373aea8d20356727f7d65e0bc818beb6523dc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "patch": "@@ -3621,8 +3621,8 @@ bool CWallet::ParameterInteraction()\n     if (IsArgSet(\"-mintxfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(mapArgs[\"-mintxfee\"], n) || 0 == n)\n-            return InitError(AmountErrMsg(\"mintxfee\", mapArgs[\"-mintxfee\"]));\n+        if (!ParseMoney(GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"mintxfee\", GetArg(\"-mintxfee\", \"\")));\n         if (n > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n                         _(\"This is the minimum transaction fee you pay on every transaction.\"));\n@@ -3631,8 +3631,8 @@ bool CWallet::ParameterInteraction()\n     if (IsArgSet(\"-fallbackfee\"))\n     {\n         CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-fallbackfee\"], nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), mapArgs[\"-fallbackfee\"]));\n+        if (!ParseMoney(GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), GetArg(\"-fallbackfee\", \"\")));\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n@@ -3641,8 +3641,8 @@ bool CWallet::ParameterInteraction()\n     if (IsArgSet(\"-paytxfee\"))\n     {\n         CAmount nFeePerK = 0;\n-        if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", mapArgs[\"-paytxfee\"]));\n+        if (!ParseMoney(GetArg(\"-paytxfee\", \"\"), nFeePerK))\n+            return InitError(AmountErrMsg(\"paytxfee\", GetArg(\"-paytxfee\", \"\")));\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n                         _(\"This is the transaction fee you will pay if you send a transaction.\"));\n@@ -3651,21 +3651,21 @@ bool CWallet::ParameterInteraction()\n         if (payTxFee < ::minRelayTxFee)\n         {\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+                                       GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n         }\n     }\n     if (IsArgSet(\"-maxtxfee\"))\n     {\n         CAmount nMaxFee = 0;\n-        if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", mapArgs[\"-maxtxfee\"]));\n+        if (!ParseMoney(GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", GetArg(\"-maxtxfee\", \"\")));\n         if (nMaxFee > HIGH_MAX_TX_FEE)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n         if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n         {\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+                                       GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);"
      }
    ]
  },
  {
    "sha": "4e048142a5e45d622355dad92ade192ad4769ca3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTA0ODE0MmE1ZTQ1ZDYyMjM1NWRhZDkyYWRlMTkyYWQ0NzY5Y2Ez",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-30T02:52:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T16:29:33Z"
      },
      "message": "Lock mapArgs/mapMultiArgs access in util",
      "tree": {
        "sha": "838431696a4bdc3b78d0172bffbefd0220c86407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/838431696a4bdc3b78d0172bffbefd0220c86407"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e048142a5e45d622355dad92ade192ad4769ca3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e048142a5e45d622355dad92ade192ad4769ca3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e048142a5e45d622355dad92ade192ad4769ca3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e048142a5e45d622355dad92ade192ad4769ca3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cd373aea8d20356727f7d65e0bc818beb6523dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cd373aea8d20356727f7d65e0bc818beb6523dc"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 23,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e3697183da713de2954f90edccaf0596a103fbee",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 11,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e048142a5e45d622355dad92ade192ad4769ca3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e048142a5e45d622355dad92ade192ad4769ca3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4e048142a5e45d622355dad92ade192ad4769ca3",
        "patch": "@@ -102,6 +102,7 @@ using namespace std;\n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n+CCriticalSection cs_args;\n map<string, string> mapArgs;\n static map<string, vector<string> > _mapMultiArgs;\n const map<string, vector<string> >& mapMultiArgs = _mapMultiArgs;\n@@ -346,6 +347,7 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n \n void ParseParameters(int argc, const char* const argv[])\n {\n+    LOCK(cs_args);\n     mapArgs.clear();\n     _mapMultiArgs.clear();\n \n@@ -381,32 +383,37 @@ void ParseParameters(int argc, const char* const argv[])\n \n bool IsArgSet(const std::string& strArg)\n {\n+    LOCK(cs_args);\n     return mapArgs.count(strArg);\n }\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n {\n+    LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return mapArgs[strArg];\n     return strDefault;\n }\n \n int64_t GetArg(const std::string& strArg, int64_t nDefault)\n {\n+    LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n     return nDefault;\n }\n \n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n+    LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n+    LOCK(cs_args);\n     if (mapArgs.count(strArg))\n         return false;\n     mapArgs[strArg] = strValue;\n@@ -522,6 +529,8 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n \n void ClearDatadirCache()\n {\n+    LOCK(csPathCached);\n+\n     pathCached = boost::filesystem::path();\n     pathCachedNetSpecific = boost::filesystem::path();\n }\n@@ -541,18 +550,21 @@ void ReadConfigFile(const std::string& confPath)\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n \n-    set<string> setOptions;\n-    setOptions.insert(\"*\");\n-\n-    for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n     {\n-        // Don't overwrite existing settings so command line settings override bitcoin.conf\n-        string strKey = string(\"-\") + it->string_key;\n-        string strValue = it->value[0];\n-        InterpretNegativeSetting(strKey, strValue);\n-        if (mapArgs.count(strKey) == 0)\n-            mapArgs[strKey] = strValue;\n-        _mapMultiArgs[strKey].push_back(strValue);\n+        LOCK(cs_args);\n+        set<string> setOptions;\n+        setOptions.insert(\"*\");\n+\n+        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n+        {\n+            // Don't overwrite existing settings so command line settings override bitcoin.conf\n+            string strKey = string(\"-\") + it->string_key;\n+            string strValue = it->value[0];\n+            InterpretNegativeSetting(strKey, strValue);\n+            if (mapArgs.count(strKey) == 0)\n+                mapArgs[strKey] = strValue;\n+            _mapMultiArgs[strKey].push_back(strValue);\n+        }\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      }
    ]
  },
  {
    "sha": "c2f61bebb190258753714b29ab2041e80651cec9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmY2MWJlYmIxOTAyNTg3NTM3MTRiMjlhYjIwNDFlODA2NTFjZWM5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-24T16:28:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-27T12:52:07Z"
      },
      "message": "Add a ForceSetArg method for testing",
      "tree": {
        "sha": "5242c7209483c676c4549c61556fd5f86202bd2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5242c7209483c676c4549c61556fd5f86202bd2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2f61bebb190258753714b29ab2041e80651cec9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f61bebb190258753714b29ab2041e80651cec9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2f61bebb190258753714b29ab2041e80651cec9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2f61bebb190258753714b29ab2041e80651cec9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e048142a5e45d622355dad92ade192ad4769ca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e048142a5e45d622355dad92ade192ad4769ca3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e048142a5e45d622355dad92ade192ad4769ca3"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 16,
      "deletions": 9
    },
    "files": [
      {
        "sha": "fb044489d727b03dece9e76ede4a6e0b136dae12",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f61bebb190258753714b29ab2041e80651cec9/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f61bebb190258753714b29ab2041e80651cec9/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=c2f61bebb190258753714b29ab2041e80651cec9",
        "patch": "@@ -19,8 +19,6 @@\n \n #include <boost/filesystem.hpp>\n \n-extern std::map<std::string, std::string> mapArgs;\n-\n static UniValue rpcNestedTest_rpc(const JSONRPCRequest& request)\n {\n     if (request.fHelp) {\n@@ -47,7 +45,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n     QDir dir(QString::fromStdString(path));\n     dir.mkpath(\".\");\n-    mapArgs[\"-datadir\"] = path;\n+    ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n     pblocktree = new CBlockTreeDB(1 << 20, true);\n     pcoinsdbview = new CCoinsViewDB(1 << 23, true);"
      },
      {
        "sha": "d90dcaeb0211e6fb9ad95a3e6404f2dc7fe15ff3",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f61bebb190258753714b29ab2041e80651cec9/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f61bebb190258753714b29ab2041e80651cec9/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=c2f61bebb190258753714b29ab2041e80651cec9",
        "patch": "@@ -12,6 +12,7 @@\n #include \"script/sign.h\"\n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"validation.h\"\n \n #include \"test/test_bitcoin.h\"\n \n@@ -32,7 +33,6 @@ struct COrphanTx {\n     int64_t nTimeExpire;\n };\n extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n-extern std::map<std::string, std::string> mapArgs;\n \n CService ip(uint32_t i)\n {\n@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n     connman->ClearBanned();\n-    mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n+    ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     Misbehaving(dummyNode1.GetId(), 1);\n     SendMessages(&dummyNode1, *connman);\n     BOOST_CHECK(connman->IsBanned(addr1));\n-    mapArgs.erase(\"-banscore\");\n+    ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)"
      },
      {
        "sha": "5c4ef5eb8c70e01308c0f51e802ccc264105996b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f61bebb190258753714b29ab2041e80651cec9/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f61bebb190258753714b29ab2041e80651cec9/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=c2f61bebb190258753714b29ab2041e80651cec9",
        "patch": "@@ -33,8 +33,6 @@\n std::unique_ptr<CConnman> g_connman;\n FastRandomContext insecure_rand_ctx(true);\n \n-extern std::map<std::string, std::string> mapArgs;\n-\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n@@ -66,7 +64,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n         boost::filesystem::create_directories(pathTemp);\n-        mapArgs[\"-datadir\"] = pathTemp.string();\n+        ForceSetArg(\"-datadir\", pathTemp.string());\n         mempool.setSanityCheck(1.0);\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);"
      },
      {
        "sha": "793b8f2dd1c938bb1ce6a558ef2901a77d4e1699",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f61bebb190258753714b29ab2041e80651cec9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f61bebb190258753714b29ab2041e80651cec9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c2f61bebb190258753714b29ab2041e80651cec9",
        "patch": "@@ -428,6 +428,14 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+void ForceSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    LOCK(cs_args);\n+    mapArgs[strArg] = strValue;\n+}\n+\n+\n+\n static const int screenWidth = 79;\n static const int optIndent = 2;\n static const int msgIndent = 7;"
      },
      {
        "sha": "f030dbbb26e8d445a0e909741e49483ec538407b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2f61bebb190258753714b29ab2041e80651cec9/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2f61bebb190258753714b29ab2041e80651cec9/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c2f61bebb190258753714b29ab2041e80651cec9",
        "patch": "@@ -175,6 +175,9 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+// Forces a arg setting, used only in testing\n+void ForceSetArg(const std::string& strArg, const std::string& strValue);\n+\n /**\n  * Format a string to be used as group of options in help messages\n  *"
      }
    ]
  }
]