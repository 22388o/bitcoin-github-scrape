[
  {
    "sha": "8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzFkYmM1ZTlkZGJhZmI3N2U2MGU4YzRlNmViMjc1YTNhNzZhYzEy",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2016-12-09T03:01:37Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2016-12-09T04:15:19Z"
      },
      "message": "Refactor: Removed begin/end_ptr functions.",
      "tree": {
        "sha": "f7f5c60c420a4635e083a6cba153b72aedfb94a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7f5c60c420a4635e083a6cba153b72aedfb94a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86017842d6ef6c57f1e06ed395afecf11d71a650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86017842d6ef6c57f1e06ed395afecf11d71a650",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86017842d6ef6c57f1e06ed395afecf11d71a650"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 32,
      "deletions": 61
    },
    "files": [
      {
        "sha": "737d3572ae9a23303bddd4159811d2a221307c69",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -22,31 +22,31 @@ static void RIPEMD160(benchmark::State& state)\n     uint8_t hash[CRIPEMD160::OUTPUT_SIZE];\n     std::vector<uint8_t> in(BUFFER_SIZE,0);\n     while (state.KeepRunning())\n-        CRIPEMD160().Write(begin_ptr(in), in.size()).Finalize(hash);\n+        CRIPEMD160().Write(in.data(), in.size()).Finalize(hash);\n }\n \n static void SHA1(benchmark::State& state)\n {\n     uint8_t hash[CSHA1::OUTPUT_SIZE];\n     std::vector<uint8_t> in(BUFFER_SIZE,0);\n     while (state.KeepRunning())\n-        CSHA1().Write(begin_ptr(in), in.size()).Finalize(hash);\n+        CSHA1().Write(in.data(), in.size()).Finalize(hash);\n }\n \n static void SHA256(benchmark::State& state)\n {\n     uint8_t hash[CSHA256::OUTPUT_SIZE];\n     std::vector<uint8_t> in(BUFFER_SIZE,0);\n     while (state.KeepRunning())\n-        CSHA256().Write(begin_ptr(in), in.size()).Finalize(hash);\n+        CSHA256().Write(in.data(), in.size()).Finalize(hash);\n }\n \n static void SHA256_32b(benchmark::State& state)\n {\n     std::vector<uint8_t> in(32,0);\n     while (state.KeepRunning()) {\n         for (int i = 0; i < 1000000; i++) {\n-            CSHA256().Write(begin_ptr(in), in.size()).Finalize(&in[0]);\n+            CSHA256().Write(in.data(), in.size()).Finalize(&in[0]);\n         }\n     }\n }\n@@ -56,7 +56,7 @@ static void SHA512(benchmark::State& state)\n     uint8_t hash[CSHA512::OUTPUT_SIZE];\n     std::vector<uint8_t> in(BUFFER_SIZE,0);\n     while (state.KeepRunning())\n-        CSHA512().Write(begin_ptr(in), in.size()).Finalize(hash);\n+        CSHA512().Write(in.data(), in.size()).Finalize(hash);\n }\n \n static void SipHash_32b(benchmark::State& state)"
      },
      {
        "sha": "91b8c4447200d8ea4f265986ec39353d0ba9ffd1",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -91,7 +91,7 @@ static void VerifyScriptBench(benchmark::State& state)\n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << txSpend;\n         int csuccess = bitcoinconsensus_verify_script_with_amount(\n-            begin_ptr(txCredit.vout[0].scriptPubKey),\n+            txCredit.vout[0].scriptPubKey.data(),\n             txCredit.vout[0].scriptPubKey.size(),\n             txCredit.vout[0].nValue,\n             (const unsigned char*)&stream[0], stream.size(), 0, flags, nullptr);"
      },
      {
        "sha": "da94fd4d13d8daf1ff88692e51951fabc9a3f540",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -292,7 +292,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         vSocks5Init.push_back(0x01); // # METHODS\n         vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n     }\n-    ssize_t ret = send(hSocket, (const char*)begin_ptr(vSocks5Init), vSocks5Init.size(), MSG_NOSIGNAL);\n+    ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n@@ -317,7 +317,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         vAuth.insert(vAuth.end(), auth->username.begin(), auth->username.end());\n         vAuth.push_back(auth->password.size());\n         vAuth.insert(vAuth.end(), auth->password.begin(), auth->password.end());\n-        ret = send(hSocket, (const char*)begin_ptr(vAuth), vAuth.size(), MSG_NOSIGNAL);\n+        ret = send(hSocket, (const char*)vAuth.data(), vAuth.size(), MSG_NOSIGNAL);\n         if (ret != (ssize_t)vAuth.size()) {\n             CloseSocket(hSocket);\n             return error(\"Error sending authentication to proxy\");\n@@ -347,7 +347,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n     vSocks5.push_back((port >> 0) & 0xFF);\n-    ret = send(hSocket, (const char*)begin_ptr(vSocks5), vSocks5.size(), MSG_NOSIGNAL);\n+    ret = send(hSocket, (const char*)vSocks5.data(), vSocks5.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");"
      },
      {
        "sha": "8132e4fe0d0b059dc8432fb398978ef63641426a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -117,7 +117,7 @@ static std::string DummyAddress(const CChainParams &params)\n     std::vector<unsigned char> sourcedata = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n     sourcedata.insert(sourcedata.end(), dummydata, dummydata + sizeof(dummydata));\n     for(int i=0; i<256; ++i) { // Try every trailing byte\n-        std::string s = EncodeBase58(begin_ptr(sourcedata), end_ptr(sourcedata));\n+        std::string s = EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size());\n         if (!CBitcoinAddress(s).IsValid())\n             return s;\n         sourcedata[sourcedata.size()-1] += 1;"
      },
      {
        "sha": "c2605b45bd15c0470d7c3f9baf5aab8806bd8d39",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -11,7 +11,6 @@\n #include \"compat.h\" // for Windows API\n #include <wincrypt.h>\n #endif\n-#include \"serialize.h\"        // for begin_ptr(vec)\n #include \"util.h\"             // for LogPrint()\n #include \"utilstrencodings.h\" // for GetTime()\n \n@@ -72,15 +71,15 @@ static void RandAddSeedPerfmon()\n     const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n     while (true) {\n         nSize = vData.size();\n-        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", NULL, NULL, begin_ptr(vData), &nSize);\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", NULL, NULL, vData.data(), &nSize);\n         if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n             break;\n         vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n-        memory_cleanse(begin_ptr(vData), nSize);\n+        RAND_add(vData.data(), nSize, nSize / 100.0);\n+        memory_cleanse(vData.data(), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once"
      },
      {
        "sha": "1410d0b73fb3331ebbe252f9d288064f0fc21b59",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -856,15 +856,15 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     valtype& vch = stacktop(-1);\n                     valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n                     if (opcode == OP_RIPEMD160)\n-                        CRIPEMD160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n+                        CRIPEMD160().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_SHA1)\n-                        CSHA1().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n+                        CSHA1().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_SHA256)\n-                        CSHA256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n+                        CSHA256().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_HASH160)\n-                        CHash160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n+                        CHash160().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_HASH256)\n-                        CHash256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n+                        CHash256().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }"
      },
      {
        "sha": "2be6f005e3955e129a3740b96c9041e4c17546fb",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 32,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -59,34 +59,6 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n-/**\n- * Important: Do not use the following functions in new code, but use v.data()\n- * and v.data() + v.size() respectively directly. They were once introduced to\n- * have a compatible, safe way to get the begin and end pointer of a vector.\n- * However with C++11 the language has built-in functionality for this and it's\n- * more readable to just use that.\n- */\n-template <typename V>\n-inline typename V::value_type* begin_ptr(V& v)\n-{\n-    return v.data();\n-}\n-template <typename V>\n-inline const typename V::value_type* begin_ptr(const V& v)\n-{\n-    return v.data();\n-}\n-template <typename V>\n-inline typename V::value_type* end_ptr(V& v)\n-{\n-    return v.data() + v.size();\n-}\n-template <typename V>\n-inline const typename V::value_type* end_ptr(const V& v)\n-{\n-    return v.data() + v.size();\n-}\n-\n /*\n  * Lowest-level serialization and conversion.\n  * @note Sizes of these types are verified in the tests\n@@ -390,14 +362,14 @@ class CFlatData\n     template <class T, class TAl>\n     explicit CFlatData(std::vector<T,TAl> &v)\n     {\n-        pbegin = (char*)begin_ptr(v);\n-        pend = (char*)end_ptr(v);\n+        pbegin = (char*)v.data();\n+        pend = (char*)(v.data() + v.size());\n     }\n     template <unsigned int N, typename T, typename S, typename D>\n     explicit CFlatData(prevector<N, T, S, D> &v)\n     {\n-        pbegin = (char*)begin_ptr(v);\n-        pend = (char*)end_ptr(v);\n+        pbegin = (char*)v.data();\n+        pend = (char*)(v.data() + v.size());\n     }\n     char* begin() { return pbegin; }\n     const char* begin() const { return pbegin; }"
      },
      {
        "sha": "04a6506655ec5ebde92cac4488539ee51ceecba8",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -39,7 +39,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n         std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n         BOOST_CHECK_MESSAGE(\n-                    EncodeBase58(begin_ptr(sourcedata), end_ptr(sourcedata)) == base58string,\n+                    EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size()) == base58string,\n                     strTest);\n     }\n }"
      },
      {
        "sha": "d7f3a3a6575ec6258a9cd3946ebc0a07c63ea6f3",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -176,10 +176,10 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     int libconsensus_flags = flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL;\n     if (libconsensus_flags == flags) {\n         if (flags & bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS) {\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect, message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), txCredit.vout[0].nValue, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect, message);\n         } else {\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(begin_ptr(scriptPubKey), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect, message);\n-            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(begin_ptr(scriptPubKey), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect,message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script_with_amount(scriptPubKey.data(), scriptPubKey.size(), 0, (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect, message);\n+            BOOST_CHECK_MESSAGE(bitcoinconsensus_verify_script(scriptPubKey.data(), scriptPubKey.size(), (const unsigned char*)&stream[0], stream.size(), 0, libconsensus_flags, NULL) == expect,message);\n         }\n     }\n #endif"
      },
      {
        "sha": "67a69363f021ea1617de8fad786505f32bad773b",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -501,10 +501,10 @@ static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::v\n {\n     CHMAC_SHA256 computeHash((const uint8_t*)key.data(), key.size());\n     std::vector<uint8_t> computedHash(CHMAC_SHA256::OUTPUT_SIZE, 0);\n-    computeHash.Write(begin_ptr(cookie), cookie.size());\n-    computeHash.Write(begin_ptr(clientNonce), clientNonce.size());\n-    computeHash.Write(begin_ptr(serverNonce), serverNonce.size());\n-    computeHash.Finalize(begin_ptr(computedHash));\n+    computeHash.Write(cookie.data(), cookie.size());\n+    computeHash.Write(clientNonce.data(), clientNonce.size());\n+    computeHash.Write(serverNonce.data(), serverNonce.size());\n+    computeHash.Finalize(computedHash.data());\n     return computedHash;\n }\n "
      },
      {
        "sha": "60701e79491f340ea981d0792d22be172a76d929",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8c1dbc5e9ddbafb77e60e8c4e6eb275a3a76ac12",
        "patch": "@@ -704,13 +704,13 @@ void ShrinkDebugFile()\n         // Restart the file with some of the end\n         std::vector <char> vch(200000,0);\n         fseek(file, -((long)vch.size()), SEEK_END);\n-        int nBytes = fread(begin_ptr(vch), 1, vch.size(), file);\n+        int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);\n \n         file = fopen(pathLog.string().c_str(), \"w\");\n         if (file)\n         {\n-            fwrite(begin_ptr(vch), 1, nBytes, file);\n+            fwrite(vch.data(), 1, nBytes, file);\n             fclose(file);\n         }\n     }"
      }
    ]
  }
]