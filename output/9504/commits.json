[
  {
    "sha": "07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2ZjODExMDlhMGYzMWI2YTY0MzVkYjBjYmMyYTU4OWY0MzhmOGNl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101@gmail.com",
        "date": "2017-01-10T19:09:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-08-17T18:00:32Z"
      },
      "message": "dumpmasterprivkey command\n\nRPC command to export the master private key from a wallet.",
      "tree": {
        "sha": "f81f1e094cd168156876349522b27abd8ca98af7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f81f1e094cd168156876349522b27abd8ca98af7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae47724687a78572daba5bc113d99d03b7ab01d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae47724687a78572daba5bc113d99d03b7ab01d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae47724687a78572daba5bc113d99d03b7ab01d6"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 59,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e40aee0c6cf7e756bb49fe30d82854b949ba3926",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 2,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
        "patch": "@@ -61,7 +61,7 @@ std::string DecodeDumpString(const std::string &str) {\n     for (unsigned int pos = 0; pos < str.length(); pos++) {\n         unsigned char c = str[pos];\n         if (c == '%' && pos+2 < str.length()) {\n-            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) |\n                 ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n             pos += 2;\n         }\n@@ -584,6 +584,50 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     return CBitcoinSecret(vchSecret).ToString();\n }\n \n+UniValue dumpmasterprivkey(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 0)\n+        throw std::runtime_error(\n+            \"dumpmasterprivkey\\n\"\n+            \"\\nReveals the current master private key.\\n\"\n+            \"\\nResult:\\n\"\n+            \" \\\"key\\\"                 (string) The HD master private key\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"dumpmasterprivkey\", \"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n+    if (!pwallet->IsHDEnabled())\n+    {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is not a HD wallet.\");\n+    }\n+    CKey key;\n+    if (pwallet->GetKey(masterKeyID, key))\n+    {\n+        CExtKey masterKey;\n+        masterKey.SetMaster(key.begin(), key.size());\n+\n+        CBitcoinExtKey b58extkey;\n+        b58extkey.SetKey(masterKey);\n+\n+        return b58extkey.ToString();\n+    }\n+    else\n+    {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to retrieve HD master private key\");\n+        return NullUniValue;\n+    }\n+}\n+\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n@@ -639,7 +683,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n-    // add the base58check encoded extended master if the wallet uses HD \n+    // add the base58check encoded extended master if the wallet uses HD\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n     {"
      },
      {
        "sha": "f3755cbe68a542f18266b1fcdd94312466e6d02d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
        "patch": "@@ -3134,6 +3134,7 @@ UniValue generate(const JSONRPCRequest& request)\n \n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n+extern UniValue dumpmasterprivkey(const JSONRPCRequest& request);\n extern UniValue importprivkey(const JSONRPCRequest& request);\n extern UniValue importaddress(const JSONRPCRequest& request);\n extern UniValue importpubkey(const JSONRPCRequest& request);\n@@ -3155,6 +3156,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true,   {\"txid\", \"options\"} },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\"}  },\n+    { \"wallet\",             \"dumpmasterprivkey\",        &dumpmasterprivkey,        true,   {} },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true,   {\"account\"} },"
      },
      {
        "sha": "4b07ae2998cb10f8734e48380bec5991df4b2978",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07fc81109a0f31b6a6435db0cbc2a589f438f8ce/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=07fc81109a0f31b6a6435db0cbc2a589f438f8ce",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n+    assert_raises_message,\n+    JSONRPCException,\n )\n import shutil\n \n@@ -38,11 +40,18 @@ def run_test (self):\n         change_addrV= self.nodes[1].validateaddress(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n+        # Check that the exported master private key begins with tprv\n+        xprv = self.nodes[1].dumpmasterprivkey()\n+        assert_equal(xprv[0:4], \"tprv\")\n+\n+        # Exporting the master private key should fail on a non-HD wallet\n+        assert_raises_message(JSONRPCException, \"Wallet is not a HD wallet.\", self.nodes[0].dumpmasterprivkey)\n+\n         # Import a non-HD private key in the HD wallet\n         non_hd_add = self.nodes[0].getnewaddress()\n         self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(non_hd_add))\n \n-        # This should be enough to keep the master key and the non-HD key \n+        # This should be enough to keep the master key and the non-HD key\n         self.nodes[1].backupwallet(tmpdir + \"/hd.bak\")\n         #self.nodes[1].dumpwallet(tmpdir + \"/hd.dump\")\n \n@@ -101,7 +110,7 @@ def run_test (self):\n         for out in outs:\n             if out['value'] != 1:\n                 keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n-        \n+\n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n if __name__ == '__main__':"
      }
    ]
  }
]