[
  {
    "sha": "fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDczYzA5NTRlYjJhNjNiYmEyZjFmYjJlMWMyNjU0MzlhYmFjYWJk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T23:13:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:42:59Z"
      },
      "message": "refactor: Add COutput factory CWallet::MakeOutput",
      "tree": {
        "sha": "20e805d3a38f132983a2b500b3b65d59ad8e6155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20e805d3a38f132983a2b500b3b65d59ad8e6155"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/615f7c288414a89cd1dec1d67e0f84abe2fb4c6d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 15,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2b8927cc7bf3daeb6953bd1b011aa0e4919817cf",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "patch": "@@ -20,8 +20,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n     CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n \n     int nAge = 6 * 24;\n-    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n-    vCoins.push_back(output);\n+    vCoins.push_back(wallet.MakeOutput(*wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */));\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary"
      },
      {
        "sha": "f5b12f1293bba9e60a13197369a636a4c4da264a",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "patch": "@@ -71,8 +71,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n-    vCoins.push_back(output);\n+    vCoins.push_back(testWallet.MakeOutput(*wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */));\n     testWallet.AddToWallet(*wtx.get());\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "7c1c458fadc796a45465a6ede1408c3ab3581c6a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "patch": "@@ -2343,7 +2343,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n             bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n             bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            vCoins.push_back(MakeOutput(*pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {\n@@ -2398,8 +2398,8 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n                 IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n                 CTxDestination address;\n                 if (ExtractDestination(FindNonChangeParentOutput(*it->second.tx, output.n).scriptPubKey, address)) {\n-                    result[address].emplace_back(\n-                        &it->second, output.n, depth, true /* spendable */, true /* solvable */, false /* safe */);\n+                    result[address].push_back(\n+                        MakeOutput(it->second, output.n, depth, true /* spendable */, true /* solvable */, false /* safe */));\n                 }\n             }\n         }\n@@ -4323,3 +4323,11 @@ CTxDestination CWallet::AddAndGetDestinationForScript(const CScript& script, Out\n     default: assert(false);\n     }\n }\n+\n+COutput CWallet::MakeOutput(const CWalletTx& wtx, int index, int depth, bool is_spendable, bool is_solvable, bool is_safe) const\n+{\n+    // If known and signable by the given wallet, compute input bytes\n+    // Failure will keep this value -1\n+    int input_bytes = is_spendable ? wtx.GetSpendSize(index) : -1;\n+    return {&wtx, index, depth, input_bytes, is_spendable, is_solvable, is_safe};\n+}"
      },
      {
        "sha": "4c82783069c8144212a8927ca35db89d571c815e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd73c0954eb2a63bba2f1fb2e1c265439abacabd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "patch": "@@ -505,16 +505,6 @@ class COutput\n      */\n     bool fSafe;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)\n-    {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn; nInputBytes = -1;\n-        // If known and signable by the given wallet, compute nInputBytes\n-        // Failure will keep this value -1\n-        if (fSpendable && tx) {\n-            nInputBytes = tx->GetSpendSize(i);\n-        }\n-    }\n-\n     std::string ToString() const;\n };\n \n@@ -1150,6 +1140,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Whether a given output is spendable by this wallet */\n     bool OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibility_filter) const;\n+\n+    COutput MakeOutput(const CWalletTx& wtx, int index, int depth, bool is_spendable, bool is_solvableIn, bool is_safe) const;\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "fdec41899146570888fc3dbd469c406c23a8c469",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGVjNDE4OTkxNDY1NzA4ODhmYzNkYmQ0NjljNDA2YzIzYThjNDY5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T14:19:23Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:42:59Z"
      },
      "message": "refactor: Move CWalletTx::IsFromMe to CWallet",
      "tree": {
        "sha": "7550766422df2eb27d93cd3482c1a6f20a215842",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7550766422df2eb27d93cd3482c1a6f20a215842"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdec41899146570888fc3dbd469c406c23a8c469",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec41899146570888fc3dbd469c406c23a8c469",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec41899146570888fc3dbd469c406c23a8c469",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec41899146570888fc3dbd469c406c23a8c469/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd73c0954eb2a63bba2f1fb2e1c265439abacabd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd73c0954eb2a63bba2f1fb2e1c265439abacabd"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 23,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d6bec64e5a0c631c8acbe0c22f5717464237ae4f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fdec41899146570888fc3dbd469c406c23a8c469",
        "patch": "@@ -1675,7 +1675,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n \n     bool fAllAccounts = (strAccount == std::string(\"*\"));\n-    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool involvesWatchonly = pwallet->IsFromMe(wtx, ISMINE_WATCH_ONLY);\n \n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n@@ -2208,11 +2208,12 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n-    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n+    CAmount nFee = pwallet->IsFromMe(wtx, filter) ? wtx.tx->GetValueOut() - nDebit : 0;\n \n     entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n-    if (wtx.IsFromMe(filter))\n+    if (pwallet->IsFromMe(wtx, filter)) {\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n+    }\n \n     WalletTxToJSON(wtx, entry);\n "
      },
      {
        "sha": "52559fa89a9a9f3ba687a7a4002655b5beaa17b2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 12,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fdec41899146570888fc3dbd469c406c23a8c469",
        "patch": "@@ -1364,7 +1364,12 @@ bool CWallet::IsMine(const CTransaction& tx) const\n \n bool CWallet::IsFromMe(const CTransaction& tx) const\n {\n-    return (GetDebit(tx, ISMINE_ALL) > 0);\n+    return GetDebit(tx, ISMINE_ALL) > 0;\n+}\n+\n+bool CWallet::IsFromMe(const CWalletTx& wtx, const isminefilter& filter) const\n+{\n+    return wtx.GetDebit(filter) > 0;\n }\n \n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n@@ -2016,7 +2021,7 @@ bool CWalletTx::IsTrusted() const\n         return true;\n     if (nDepth < 0)\n         return false;\n-    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+    if (!bSpendZeroConfChange || !pwallet->IsFromMe(*this, ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n     // Don't trust unconfirmed transactions from us unless they are in the mempool.\n@@ -2430,7 +2435,7 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n     if (!output.fSpendable)\n         return false;\n \n-    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibility_filter.conf_mine : eligibility_filter.conf_theirs))\n+    if (output.nDepth < (IsFromMe(*output.tx, ISMINE_ALL) ? eligibility_filter.conf_mine : eligibility_filter.conf_theirs))\n         return false;\n \n     if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibility_filter.max_ancestors))\n@@ -3504,27 +3509,27 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n         LOCK(cs_wallet);\n         for (const auto& walletEntry : mapWallet)\n         {\n-            const CWalletTx *pcoin = &walletEntry.second;\n+            const CWalletTx& wtx = walletEntry.second;\n \n-            if (!pcoin->IsTrusted())\n+            if (!wtx.IsTrusted())\n                 continue;\n \n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n+            int nDepth = wtx.GetDepthInMainChain();\n+            if (nDepth < (IsFromMe(wtx, ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n+            for (unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n             {\n                 CTxDestination addr;\n-                if (!IsMine(pcoin->tx->vout[i]))\n+                if (!IsMine(wtx.tx->vout[i]))\n                     continue;\n-                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, addr))\n+                if(!ExtractDestination(wtx.tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : wtx.tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "a0187942ec75eb57f61fe7b5f5e7d60b91d60868",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdec41899146570888fc3dbd469c406c23a8c469/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fdec41899146570888fc3dbd469c406c23a8c469",
        "patch": "@@ -459,11 +459,6 @@ class CWalletTx : public CMerkleTx\n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n-    bool IsFromMe(const isminefilter& filter) const\n-    {\n-        return (GetDebit(filter) > 0);\n-    }\n-\n     // True if only scriptSigs are different\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n@@ -994,6 +989,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool IsMine(const CTransaction& tx) const;\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const;\n+    bool IsFromMe(const CWalletTx& wtx, const isminefilter& filter) const;\n+\n     CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n     /** Returns whether all of the inputs match the filter */\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;"
      }
    ]
  },
  {
    "sha": "0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWMzMjYzZTI2ZGUzZjQ0ZDMwYmZiMWI4ZmRjMWU3MGQzZmQ1Mjhk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T14:41:33Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:42:59Z"
      },
      "message": "refactor: Move CWalletTx::GetDebit to CWallet",
      "tree": {
        "sha": "99c4cb8482e543ab92a0915e7f4efba3880523d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99c4cb8482e543ab92a0915e7f4efba3880523d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdec41899146570888fc3dbd469c406c23a8c469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdec41899146570888fc3dbd469c406c23a8c469",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdec41899146570888fc3dbd469c406c23a8c469"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 34,
      "deletions": 38
    },
    "files": [
      {
        "sha": "58e3c9be7234d414fdec6f905234e58ae12492a6",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "patch": "@@ -73,7 +73,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n                                                       ISMINE_NO);\n     }\n     result.credit = wtx.GetCredit(ISMINE_ALL);\n-    result.debit = wtx.GetDebit(ISMINE_ALL);\n+    result.debit = wallet.GetDebit(wtx, ISMINE_ALL);\n     result.change = wtx.GetChange();\n     result.time = wtx.GetTxTime();\n     result.value_map = wtx.mapValue;"
      },
      {
        "sha": "c535f1a178b0150daaf1143e1906080acf0a0e37",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "patch": "@@ -116,7 +116,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n \n     // calculate the old fee and fee-rate\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    old_fee = wallet->GetDebit(wtx, ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     CFeeRate nNewFeeRate;\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to"
      },
      {
        "sha": "c5d6ee5f9d5d6e1fd82d10ca42e9e4890cda35c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "patch": "@@ -2206,7 +2206,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     const CWalletTx& wtx = it->second;\n \n     CAmount nCredit = wtx.GetCredit(filter);\n-    CAmount nDebit = wtx.GetDebit(filter);\n+    CAmount nDebit = pwallet->GetDebit(wtx, filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = pwallet->IsFromMe(wtx, filter) ? wtx.tx->GetValueOut() - nDebit : 0;\n "
      },
      {
        "sha": "80e41e8f08ab3a294048081a07f8dcbb4b24b414",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 34,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "patch": "@@ -1313,6 +1313,33 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n     return 0;\n }\n \n+CAmount CWallet::GetDebit(const CWalletTx& wtx, const isminefilter& filter) const\n+{\n+    if (wtx.tx->vin.empty())\n+        return 0;\n+\n+    CAmount debit = 0;\n+    if (filter & ISMINE_SPENDABLE) {\n+        if (wtx.fDebitCached) {\n+            debit += wtx.nDebitCached;\n+        } else {\n+            wtx.nDebitCached = GetDebit(*wtx.tx, ISMINE_SPENDABLE);\n+            wtx.fDebitCached = true;\n+            debit += wtx.nDebitCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY) {\n+        if (wtx.fWatchDebitCached) {\n+            debit += wtx.nWatchDebitCached;\n+        } else {\n+            wtx.nWatchDebitCached = GetDebit(*wtx.tx, ISMINE_WATCH_ONLY);\n+            wtx.fWatchDebitCached = true;\n+            debit += wtx.nWatchDebitCached;\n+        }\n+    }\n+    return debit;\n+}\n+\n isminetype CWallet::IsMine(const CTxOut& txout) const\n {\n     return ::IsMine(*this, txout.scriptPubKey);\n@@ -1369,7 +1396,7 @@ bool CWallet::IsFromMe(const CTransaction& tx) const\n \n bool CWallet::IsFromMe(const CWalletTx& wtx, const isminefilter& filter) const\n {\n-    return wtx.GetDebit(filter) > 0;\n+    return GetDebit(wtx, filter) > 0;\n }\n \n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n@@ -1615,7 +1642,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    CAmount nDebit = GetDebit(filter);\n+    CAmount nDebit = pwallet->GetDebit(*this, filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n         CAmount nValueOut = tx->GetValueOut();\n@@ -1846,37 +1873,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n-{\n-    if (tx->vin.empty())\n-        return 0;\n-\n-    CAmount debit = 0;\n-    if(filter & ISMINE_SPENDABLE)\n-    {\n-        if (fDebitCached)\n-            debit += nDebitCached;\n-        else\n-        {\n-            nDebitCached = pwallet->GetDebit(*tx, ISMINE_SPENDABLE);\n-            fDebitCached = true;\n-            debit += nDebitCached;\n-        }\n-    }\n-    if(filter & ISMINE_WATCH_ONLY)\n-    {\n-        if(fWatchDebitCached)\n-            debit += nWatchDebitCached;\n-        else\n-        {\n-            nWatchDebitCached = pwallet->GetDebit(*tx, ISMINE_WATCH_ONLY);\n-            fWatchDebitCached = true;\n-            debit += nWatchDebitCached;\n-        }\n-    }\n-    return debit;\n-}\n-\n CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n {\n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n@@ -2220,7 +2216,7 @@ CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth, cons\n \n         // Loop through tx outputs and add incoming payments. For outgoing txs,\n         // treat change outputs specially, as part of the amount debited.\n-        CAmount debit = wtx.GetDebit(filter);\n+        CAmount debit = GetDebit(wtx, filter);\n         const bool outgoing = debit > 0;\n         for (const CTxOut& out : wtx.tx->vout) {\n             if (outgoing && IsChange(out)) {"
      },
      {
        "sha": "a89dc08e9d96061163f6bdb98793810a646ebf9d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "patch": "@@ -442,7 +442,6 @@ class CWalletTx : public CMerkleTx\n     }\n \n     //! filter decides which addresses will count towards the debit\n-    CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;\n     CAmount GetImmatureCredit(bool fUseCache=true) const;\n     CAmount GetAvailableCredit(bool fUseCache=true) const;\n@@ -982,6 +981,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * filter, otherwise returns 0\n      */\n     CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    CAmount GetDebit(const CWalletTx& wtx, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const;\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const;\n     bool IsChange(const CTxOut& txout) const;"
      }
    ]
  },
  {
    "sha": "b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGM1NmZjOWRiYzgwZTZmYTcwNjQ4Mzk0MGYyNzMyYWQ0NzI5ZmE4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T14:42:25Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:42:59Z"
      },
      "message": "refactor: Move CWalletTx::GetCredit to CWallet",
      "tree": {
        "sha": "de488fa2f85304280a6491589edf1da3454269c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de488fa2f85304280a6491589edf1da3454269c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ec3263e26de3f44d30bfb1b8fdc1e70d3fd528d"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 32,
      "deletions": 37
    },
    "files": [
      {
        "sha": "79bf936d36cb7ea139df019a642a0b8616943415",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "patch": "@@ -72,7 +72,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n                                                       IsMine(wallet, result.txout_address.back()) :\n                                                       ISMINE_NO);\n     }\n-    result.credit = wtx.GetCredit(ISMINE_ALL);\n+    result.credit = wallet.GetCredit(wtx, ISMINE_ALL);\n     result.debit = wallet.GetDebit(wtx, ISMINE_ALL);\n     result.change = wtx.GetChange();\n     result.time = wtx.GetTxTime();"
      },
      {
        "sha": "d30776f02ac94811391f496239744068ef6ff4ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "patch": "@@ -2205,7 +2205,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     }\n     const CWalletTx& wtx = it->second;\n \n-    CAmount nCredit = wtx.GetCredit(filter);\n+    CAmount nCredit = pwallet->GetCredit(wtx, filter);\n     CAmount nDebit = pwallet->GetDebit(wtx, filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = pwallet->IsFromMe(wtx, filter) ? wtx.tx->GetValueOut() - nDebit : 0;"
      },
      {
        "sha": "0a2b20ae9a6e418026b488d19a3ecc5642c03e3f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 33,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "patch": "@@ -1444,6 +1444,35 @@ CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) c\n     return nCredit;\n }\n \n+CAmount CWallet::GetCredit(const CWalletTx& wtx, const isminefilter& filter) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    CAmount credit = 0;\n+    if (filter & ISMINE_SPENDABLE) {\n+        // GetBalance can assume transactions in mapWallet won't change\n+        if (wtx.fCreditCached) {\n+            credit += wtx.nCreditCached;\n+        } else {\n+            wtx.nCreditCached = GetCredit(*wtx.tx, ISMINE_SPENDABLE);\n+            wtx.fCreditCached = true;\n+            credit += wtx.nCreditCached;\n+        }\n+    }\n+    if (filter & ISMINE_WATCH_ONLY) {\n+        if (wtx.fWatchCreditCached) {\n+            credit += wtx.nWatchCreditCached;\n+        } else {\n+            wtx.nWatchCreditCached = GetCredit(*wtx.tx, ISMINE_WATCH_ONLY);\n+            wtx.fWatchCreditCached = true;\n+            credit += wtx.nWatchCreditCached;\n+        }\n+    }\n+    return credit;\n+}\n+\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n@@ -1873,39 +1902,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetCredit(const isminefilter& filter) const\n-{\n-    // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-        return 0;\n-\n-    CAmount credit = 0;\n-    if (filter & ISMINE_SPENDABLE)\n-    {\n-        // GetBalance can assume transactions in mapWallet won't change\n-        if (fCreditCached)\n-            credit += nCreditCached;\n-        else\n-        {\n-            nCreditCached = pwallet->GetCredit(*tx, ISMINE_SPENDABLE);\n-            fCreditCached = true;\n-            credit += nCreditCached;\n-        }\n-    }\n-    if (filter & ISMINE_WATCH_ONLY)\n-    {\n-        if (fWatchCreditCached)\n-            credit += nWatchCreditCached;\n-        else\n-        {\n-            nWatchCreditCached = pwallet->GetCredit(*tx, ISMINE_WATCH_ONLY);\n-            fWatchCreditCached = true;\n-            credit += nWatchCreditCached;\n-        }\n-    }\n-    return credit;\n-}\n-\n CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())"
      },
      {
        "sha": "7b22d2bebcde24002dad709ee0a5943c08590a60",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0c56fc9dbc80e6fa706483940f2732ad4729fa8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "patch": "@@ -441,8 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    //! filter decides which addresses will count towards the debit\n-    CAmount GetCredit(const isminefilter& filter) const;\n     CAmount GetImmatureCredit(bool fUseCache=true) const;\n     CAmount GetAvailableCredit(bool fUseCache=true) const;\n     CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n@@ -995,6 +993,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /** Returns whether all of the inputs match the filter */\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n+    CAmount GetCredit(const CWalletTx& wtx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc) override;\n "
      }
    ]
  },
  {
    "sha": "79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWY2MGViMzA4YWFiNGQ0MWIzNGM3MWM3NGU0OTQzYmQxY2I3OWZj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T14:57:03Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:42:59Z"
      },
      "message": "refactor: Move CWalletTx::GetImmatureCredit to CWallet and drop fUseCache argument",
      "tree": {
        "sha": "58f61be74416fa5ba47919b72fb155dd7e1da79b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58f61be74416fa5ba47919b72fb155dd7e1da79b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0c56fc9dbc80e6fa706483940f2732ad4729fa8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0c56fc9dbc80e6fa706483940f2732ad4729fa8"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 20,
      "deletions": 21
    },
    "files": [
      {
        "sha": "fbfb8e31f2268001a52218b276c54b27b81ec805",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
        "patch": "@@ -186,13 +186,13 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n     // cache the current immature credit amount, which is 0.\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 0);\n+    BOOST_CHECK_EQUAL(wallet.GetImmatureCredit(wtx), 0);\n \n     // Invalidate the cached value, add the key, and make sure a new immature\n     // credit amount is calculated.\n     wtx.MarkDirty();\n     wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n-    BOOST_CHECK_EQUAL(wtx.GetImmatureCredit(), 50*COIN);\n+    BOOST_CHECK_EQUAL(wallet.GetImmatureCredit(wtx), 50*COIN);\n }\n \n static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64_t blockTime)"
      },
      {
        "sha": "1bf099f9b14d8e10c3b89ce1edfe71af8b99565b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
        "patch": "@@ -1473,6 +1473,19 @@ CAmount CWallet::GetCredit(const CWalletTx& wtx, const isminefilter& filter) con\n     return credit;\n }\n \n+CAmount CWallet::GetImmatureCredit(const CWalletTx& wtx) const\n+{\n+    if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0 && wtx.IsInMainChain())\n+    {\n+        if (wtx.fImmatureCreditCached) return wtx.nImmatureCreditCached;\n+        wtx.nImmatureCreditCached = GetCredit(*wtx.tx, ISMINE_SPENDABLE);\n+        wtx.fImmatureCreditCached = true;\n+        return wtx.nImmatureCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n@@ -1902,20 +1915,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n-{\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-    {\n-        if (fUseCache && fImmatureCreditCached)\n-            return nImmatureCreditCached;\n-        nImmatureCreditCached = pwallet->GetCredit(*tx, ISMINE_SPENDABLE);\n-        fImmatureCreditCached = true;\n-        return nImmatureCreditCached;\n-    }\n-\n-    return 0;\n-}\n-\n CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n {\n     if (pwallet == nullptr)\n@@ -2138,10 +2137,9 @@ CAmount CWallet::GetImmatureBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = entry.second;\n+            nTotal += GetImmatureCredit(wtx);\n         }\n     }\n     return nTotal;"
      },
      {
        "sha": "f01958e53e6abb440499cca8d813e8e26d0dd5fd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79f60eb308aab4d41b34c71c74e4943bd1cb79fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
        "patch": "@@ -441,7 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n     CAmount GetAvailableCredit(bool fUseCache=true) const;\n     CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n@@ -994,6 +993,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CWalletTx& wtx, const isminefilter& filter) const;\n+    CAmount GetImmatureCredit(const CWalletTx& wtx) const;\n+\n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc) override;\n "
      }
    ]
  },
  {
    "sha": "7e5630b3fe2cf2d360329a7e24ac780cba424e12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTU2MzBiM2ZlMmNmMmQzNjAzMjlhN2UyNGFjNzgwY2JhNDI0ZTEy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T15:12:57Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetAvailableCredit to CWallet and drop fUseCache argument",
      "tree": {
        "sha": "149c498b4fa0e7b89377931d30c311167d21fcf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/149c498b4fa0e7b89377931d30c311167d21fcf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e5630b3fe2cf2d360329a7e24ac780cba424e12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e5630b3fe2cf2d360329a7e24ac780cba424e12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e5630b3fe2cf2d360329a7e24ac780cba424e12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e5630b3fe2cf2d360329a7e24ac780cba424e12/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79f60eb308aab4d41b34c71c74e4943bd1cb79fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79f60eb308aab4d41b34c71c74e4943bd1cb79fc"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 36,
      "deletions": 41
    },
    "files": [
      {
        "sha": "5a9d6f3d2da0f6dbbf307ec9f52f20e488bc72b6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 40,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e5630b3fe2cf2d360329a7e24ac780cba424e12/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e5630b3fe2cf2d360329a7e24ac780cba424e12/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7e5630b3fe2cf2d360329a7e24ac780cba424e12",
        "patch": "@@ -1486,6 +1486,31 @@ CAmount CWallet::GetImmatureCredit(const CWalletTx& wtx) const\n     return 0;\n }\n \n+CAmount CWallet::GetAvailableCredit(const CWalletTx& wtx) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0)\n+        return 0;\n+\n+    if (wtx.fAvailableCreditCached)\n+        return wtx.nAvailableCreditCached;\n+\n+    CAmount nCredit = 0;\n+    uint256 hashTx = wtx.GetHash();\n+    for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+        if (!IsSpent(hashTx, i)) {\n+            const CTxOut &txout = wtx.tx->vout[i];\n+            nCredit += GetCredit(txout, ISMINE_SPENDABLE);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(std::string(__func__) + \" : value out of range\");\n+        }\n+    }\n+\n+    wtx.nAvailableCreditCached = nCredit;\n+    wtx.fAvailableCreditCached = true;\n+    return nCredit;\n+}\n+\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n@@ -1915,36 +1940,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const\n-{\n-    if (pwallet == nullptr)\n-        return 0;\n-\n-    // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-        return 0;\n-\n-    if (fUseCache && fAvailableCreditCached)\n-        return nAvailableCreditCached;\n-\n-    CAmount nCredit = 0;\n-    uint256 hashTx = GetHash();\n-    for (unsigned int i = 0; i < tx->vout.size(); i++)\n-    {\n-        if (!pwallet->IsSpent(hashTx, i))\n-        {\n-            const CTxOut &txout = tx->vout[i];\n-            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(std::string(__func__) + \" : value out of range\");\n-        }\n-    }\n-\n-    nAvailableCreditCached = nCredit;\n-    fAvailableCreditCached = true;\n-    return nCredit;\n-}\n-\n CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n {\n     if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n@@ -2106,11 +2101,11 @@ CAmount CWallet::GetBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted())\n-                nTotal += pcoin->GetAvailableCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = entry.second;\n+            if (wtx.IsTrusted()) {\n+                nTotal += GetAvailableCredit(wtx);\n+            }\n         }\n     }\n \n@@ -2122,11 +2117,11 @@ CAmount CWallet::GetUnconfirmedBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted() && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n+                nTotal += GetAvailableCredit(wtx);\n+            }\n         }\n     }\n     return nTotal;"
      },
      {
        "sha": "dad9608452acc648548d994782e1698430e6f405",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e5630b3fe2cf2d360329a7e24ac780cba424e12/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e5630b3fe2cf2d360329a7e24ac780cba424e12/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7e5630b3fe2cf2d360329a7e24ac780cba424e12",
        "patch": "@@ -441,7 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n     CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n@@ -994,6 +993,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CWalletTx& wtx, const isminefilter& filter) const;\n     CAmount GetImmatureCredit(const CWalletTx& wtx) const;\n+    CAmount GetAvailableCredit(const CWalletTx& wtx) const;\n \n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc) override;"
      }
    ]
  },
  {
    "sha": "1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDNmMGVkNmVlYThiZGU1ZWJiMGJiMzgyZTliOTFjNDlmNDcxMmEz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T15:15:09Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetImmatureWatchOnlyCredit to CWallet and drop fUseCache argument",
      "tree": {
        "sha": "cf4fdced93cf9682148a19ca786a27cd9fdeff62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf4fdced93cf9682148a19ca786a27cd9fdeff62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e5630b3fe2cf2d360329a7e24ac780cba424e12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e5630b3fe2cf2d360329a7e24ac780cba424e12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e5630b3fe2cf2d360329a7e24ac780cba424e12"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "81a61c3db230916523ff15d8834417930c1349a6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
        "patch": "@@ -1511,6 +1511,21 @@ CAmount CWallet::GetAvailableCredit(const CWalletTx& wtx) const\n     return nCredit;\n }\n \n+CAmount CWallet::GetImmatureWatchOnlyCredit(const CWalletTx& wtx) const\n+{\n+    if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0 && wtx.IsInMainChain())\n+    {\n+        if (wtx.fImmatureWatchCreditCached) {\n+            return wtx.nImmatureWatchCreditCached;\n+        }\n+        wtx.nImmatureWatchCreditCached = GetCredit(*wtx.tx, ISMINE_WATCH_ONLY);\n+        wtx.fImmatureWatchCreditCached = true;\n+        return wtx.nImmatureWatchCreditCached;\n+    }\n+\n+    return 0;\n+}\n+\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n@@ -1940,20 +1955,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool fUseCache) const\n-{\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n-    {\n-        if (fUseCache && fImmatureWatchCreditCached)\n-            return nImmatureWatchCreditCached;\n-        nImmatureWatchCreditCached = pwallet->GetCredit(*tx, ISMINE_WATCH_ONLY);\n-        fImmatureWatchCreditCached = true;\n-        return nImmatureWatchCreditCached;\n-    }\n-\n-    return 0;\n-}\n-\n CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool fUseCache) const\n {\n     if (pwallet == nullptr)\n@@ -2176,10 +2177,9 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureWatchOnlyCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = &entry.second;\n+            nTotal += GetImmatureWatchOnlyCredit(wtx);\n         }\n     }\n     return nTotal;"
      },
      {
        "sha": "b538531e345e2919459b7e539dda9ff7bc2cabe7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
        "patch": "@@ -441,7 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n@@ -994,6 +993,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CWalletTx& wtx, const isminefilter& filter) const;\n     CAmount GetImmatureCredit(const CWalletTx& wtx) const;\n     CAmount GetAvailableCredit(const CWalletTx& wtx) const;\n+    CAmount GetImmatureWatchOnlyCredit(const CWalletTx& wtx) const;\n \n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc) override;"
      }
    ]
  },
  {
    "sha": "8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzRkMDRlMjFhYzY0NWFkMTgzMmRhNWY0OWY1NjgzNTljYjlhMmUx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T15:24:11Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetAvailableWatchOnlyCredit to CWallet and drop fUseCache argument",
      "tree": {
        "sha": "5fd817f966b235042173050a4f9d17951da92ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fd817f966b235042173050a4f9d17951da92ce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4d04e21ac645ad1832da5f49f568359cb9a2e1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d3f0ed6eea8bde5ebb0bb382e9b91c49f4712a3"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 38,
      "deletions": 41
    },
    "files": [
      {
        "sha": "fa683894f93e83e52440f34db1e560fb6fc34d62",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 40,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4d04e21ac645ad1832da5f49f568359cb9a2e1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4d04e21ac645ad1832da5f49f568359cb9a2e1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
        "patch": "@@ -1526,6 +1526,32 @@ CAmount CWallet::GetImmatureWatchOnlyCredit(const CWalletTx& wtx) const\n     return 0;\n }\n \n+CAmount CWallet::GetAvailableWatchOnlyCredit(const CWalletTx& wtx) const\n+{\n+    // Must wait until coinbase is safely deep enough in the chain before valuing it\n+    if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0) {\n+        return 0;\n+    }\n+\n+    if (wtx.fAvailableWatchCreditCached) {\n+        return wtx.nAvailableWatchCreditCached;\n+    }\n+\n+    CAmount nCredit = 0;\n+    for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+        if (!IsSpent(wtx.GetHash(), i)) {\n+            const CTxOut &txout = wtx.tx->vout[i];\n+            nCredit += GetCredit(txout, ISMINE_WATCH_ONLY);\n+            if (!MoneyRange(nCredit))\n+                throw std::runtime_error(std::string(__func__) + \": value out of range\");\n+        }\n+    }\n+\n+    wtx.nAvailableWatchCreditCached = nCredit;\n+    wtx.fAvailableWatchCreditCached = true;\n+    return nCredit;\n+}\n+\n CAmount CWallet::GetChange(const CTransaction& tx) const\n {\n     CAmount nChange = 0;\n@@ -1955,35 +1981,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool fUseCache) const\n-{\n-    if (pwallet == nullptr)\n-        return 0;\n-\n-    // Must wait until coinbase is safely deep enough in the chain before valuing it\n-    if (IsCoinBase() && GetBlocksToMaturity() > 0)\n-        return 0;\n-\n-    if (fUseCache && fAvailableWatchCreditCached)\n-        return nAvailableWatchCreditCached;\n-\n-    CAmount nCredit = 0;\n-    for (unsigned int i = 0; i < tx->vout.size(); i++)\n-    {\n-        if (!pwallet->IsSpent(GetHash(), i))\n-        {\n-            const CTxOut &txout = tx->vout[i];\n-            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n-            if (!MoneyRange(nCredit))\n-                throw std::runtime_error(std::string(__func__) + \": value out of range\");\n-        }\n-    }\n-\n-    nAvailableWatchCreditCached = nCredit;\n-    fAvailableWatchCreditCached = true;\n-    return nCredit;\n-}\n-\n CAmount CWalletTx::GetChange() const\n {\n     if (fChangeCached)\n@@ -2146,11 +2143,11 @@ CAmount CWallet::GetWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted())\n-                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = entry.second;\n+            if (wtx.IsTrusted()) {\n+                nTotal += GetAvailableWatchOnlyCredit(wtx);\n+            }\n         }\n     }\n \n@@ -2162,11 +2159,11 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n     CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n-        for (const auto& entry : mapWallet)\n-        {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableWatchOnlyCredit();\n+        for (const auto& entry : mapWallet) {\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted() && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n+                nTotal += GetAvailableWatchOnlyCredit(wtx);\n+            }\n         }\n     }\n     return nTotal;\n@@ -2178,7 +2175,7 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet) {\n-            const CWalletTx& wtx = &entry.second;\n+            const CWalletTx& wtx = entry.second;\n             nTotal += GetImmatureWatchOnlyCredit(wtx);\n         }\n     }"
      },
      {
        "sha": "05b398f58c44d3241495f7e15f25f57dcf0d880e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4d04e21ac645ad1832da5f49f568359cb9a2e1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4d04e21ac645ad1832da5f49f568359cb9a2e1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
        "patch": "@@ -441,7 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n@@ -994,6 +993,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetImmatureCredit(const CWalletTx& wtx) const;\n     CAmount GetAvailableCredit(const CWalletTx& wtx) const;\n     CAmount GetImmatureWatchOnlyCredit(const CWalletTx& wtx) const;\n+    CAmount GetAvailableWatchOnlyCredit(const CWalletTx& wtx) const;\n \n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc) override;"
      }
    ]
  },
  {
    "sha": "e50b431b047163ae9dca0864660fe6fd30464cd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTBiNDMxYjA0NzE2M2FlOWRjYTA4NjQ2NjBmZTZmZDMwNDY0Y2Q1",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T15:38:08Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetChange to CWallet",
      "tree": {
        "sha": "53bc55d7c65ed1620ddd29de7c356865cb69f6c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53bc55d7c65ed1620ddd29de7c356865cb69f6c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e50b431b047163ae9dca0864660fe6fd30464cd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e50b431b047163ae9dca0864660fe6fd30464cd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e50b431b047163ae9dca0864660fe6fd30464cd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e50b431b047163ae9dca0864660fe6fd30464cd5/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4d04e21ac645ad1832da5f49f568359cb9a2e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4d04e21ac645ad1832da5f49f568359cb9a2e1"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "9e9f8aeb6391c8d7fb4d3a6b9b3e1e85700374ae",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e50b431b047163ae9dca0864660fe6fd30464cd5/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e50b431b047163ae9dca0864660fe6fd30464cd5/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=e50b431b047163ae9dca0864660fe6fd30464cd5",
        "patch": "@@ -74,7 +74,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n     }\n     result.credit = wallet.GetCredit(wtx, ISMINE_ALL);\n     result.debit = wallet.GetDebit(wtx, ISMINE_ALL);\n-    result.change = wtx.GetChange();\n+    result.change = wallet.GetChange(wtx);\n     result.time = wtx.GetTxTime();\n     result.value_map = wtx.mapValue;\n     result.is_coinbase = wtx.IsCoinBase();"
      },
      {
        "sha": "ceae598aae89b38039a5d21854de0bc79d38c6df",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e50b431b047163ae9dca0864660fe6fd30464cd5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e50b431b047163ae9dca0864660fe6fd30464cd5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e50b431b047163ae9dca0864660fe6fd30464cd5",
        "patch": "@@ -1381,6 +1381,16 @@ CAmount CWallet::GetChange(const CTxOut& txout) const\n     return (IsChange(txout) ? txout.nValue : 0);\n }\n \n+CAmount CWallet::GetChange(const CWalletTx& wtx) const\n+{\n+    if (wtx.fChangeCached) {\n+        return wtx.nChangeCached;\n+    }\n+    wtx.nChangeCached = GetChange(*wtx.tx);\n+    wtx.fChangeCached = true;\n+    return wtx.nChangeCached;\n+}\n+\n bool CWallet::IsMine(const CTransaction& tx) const\n {\n     for (const CTxOut& txout : tx.vout)\n@@ -1981,15 +1991,6 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n-CAmount CWalletTx::GetChange() const\n-{\n-    if (fChangeCached)\n-        return nChangeCached;\n-    nChangeCached = pwallet->GetChange(*tx);\n-    fChangeCached = true;\n-    return nChangeCached;\n-}\n-\n bool CWalletTx::InMempool() const\n {\n     return fInMempool;"
      },
      {
        "sha": "e2be63a337da8e0eea3f51b4cc2a3c2f0f200d93",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e50b431b047163ae9dca0864660fe6fd30464cd5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e50b431b047163ae9dca0864660fe6fd30464cd5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e50b431b047163ae9dca0864660fe6fd30464cd5",
        "patch": "@@ -441,8 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    CAmount GetChange() const;\n-\n     // Get the marginal bytes if spending the specified output from this transaction\n     int GetSpendSize(unsigned int out) const\n     {\n@@ -996,6 +994,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetAvailableWatchOnlyCredit(const CWalletTx& wtx) const;\n \n     CAmount GetChange(const CTransaction& tx) const;\n+    CAmount GetChange(const CWalletTx& wtx) const;\n+\n     void SetBestChain(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);"
      }
    ]
  },
  {
    "sha": "3c7f52c4bfc51b9092819fc67313044b683cab07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzdmNTJjNGJmYzUxYjkwOTI4MTlmYzY3MzEzMDQ0YjY4M2NhYjA3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T15:56:28Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetSpendSize to CWallet",
      "tree": {
        "sha": "c3a8c62f7708e8e78481181143d0e1c2f1e25423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3a8c62f7708e8e78481181143d0e1c2f1e25423"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c7f52c4bfc51b9092819fc67313044b683cab07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f52c4bfc51b9092819fc67313044b683cab07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c7f52c4bfc51b9092819fc67313044b683cab07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f52c4bfc51b9092819fc67313044b683cab07/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e50b431b047163ae9dca0864660fe6fd30464cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e50b431b047163ae9dca0864660fe6fd30464cd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e50b431b047163ae9dca0864660fe6fd30464cd5"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "033b8d0a8e1e427da2ce08a760285109e35b8e5d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c7f52c4bfc51b9092819fc67313044b683cab07/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c7f52c4bfc51b9092819fc67313044b683cab07/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3c7f52c4bfc51b9092819fc67313044b683cab07",
        "patch": "@@ -4316,6 +4316,6 @@ COutput CWallet::MakeOutput(const CWalletTx& wtx, int index, int depth, bool is_\n {\n     // If known and signable by the given wallet, compute input bytes\n     // Failure will keep this value -1\n-    int input_bytes = is_spendable ? wtx.GetSpendSize(index) : -1;\n+    int input_bytes = is_spendable ? GetSpendSize(wtx, index) : -1;\n     return {&wtx, index, depth, input_bytes, is_spendable, is_solvable, is_safe};\n }"
      },
      {
        "sha": "6747c4a3aafaef2b0c81ee653691ba368a693401",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c7f52c4bfc51b9092819fc67313044b683cab07/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c7f52c4bfc51b9092819fc67313044b683cab07/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3c7f52c4bfc51b9092819fc67313044b683cab07",
        "patch": "@@ -441,12 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    // Get the marginal bytes if spending the specified output from this transaction\n-    int GetSpendSize(unsigned int out) const\n-    {\n-        return CalculateMaximumSignedInputSize(tx->vout[out], pwallet);\n-    }\n-\n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n@@ -786,6 +780,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(const CWalletTx& wtx, unsigned int out) const\n+    {\n+        return CalculateMaximumSignedInputSize(wtx.tx->vout[out], this);\n+    }\n+\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n "
      }
    ]
  },
  {
    "sha": "e3f4a3b0697b7892a436c038b94d6ed3197938b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2Y0YTNiMDY5N2I3ODkyYTQzNmMwMzhiOTRkNmVkMzE5NzkzOGI2",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T16:04:47Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:00Z"
      },
      "message": "refactor: Move CWalletTx::GetAmounts to CWallet",
      "tree": {
        "sha": "7d16aa448cf214fae822e00896e85e56981d0f65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d16aa448cf214fae822e00896e85e56981d0f65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3f4a3b0697b7892a436c038b94d6ed3197938b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f4a3b0697b7892a436c038b94d6ed3197938b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f4a3b0697b7892a436c038b94d6ed3197938b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f4a3b0697b7892a436c038b94d6ed3197938b6/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c7f52c4bfc51b9092819fc67313044b683cab07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c7f52c4bfc51b9092819fc67313044b683cab07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c7f52c4bfc51b9092819fc67313044b683cab07"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e62871efb23ff19247c75f4c1a9da2b22c8118b6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e3f4a3b0697b7892a436c038b94d6ed3197938b6",
        "patch": "@@ -1672,7 +1672,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n     std::list<COutputEntry> listReceived;\n     std::list<COutputEntry> listSent;\n \n-    wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, filter);\n+    pwallet->GetAmounts(wtx, listReceived, listSent, nFee, strSentAccount, filter);\n \n     bool fAllAccounts = (strAccount == std::string(\"*\"));\n     bool involvesWatchonly = pwallet->IsFromMe(wtx, ISMINE_WATCH_ONLY);\n@@ -1963,7 +1963,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         int nDepth = wtx.GetDepthInMainChain();\n         if (wtx.GetBlocksToMaturity() > 0 || nDepth < 0)\n             continue;\n-        wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n+        pwallet->GetAmounts(wtx, listReceived, listSent, nFee, strSentAccount, includeWatchonly);\n         mapAccountBalances[strSentAccount] -= nFee;\n         for (const COutputEntry& s : listSent)\n             mapAccountBalances[strSentAccount] -= s.amount;"
      },
      {
        "sha": "6dd6cbd4ae0e1811ab1e5c1c5e88cd4dfc056060",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e3f4a3b0697b7892a436c038b94d6ed3197938b6",
        "patch": "@@ -1751,34 +1751,34 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet)\n     return GetVirtualTransactionInputSize(txn.vin[0]);\n }\n \n-void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n-                           std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const\n+void CWallet::GetAmounts(const CWalletTx& wtx, std::list<COutputEntry>& listReceived,\n+                         std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n-    strSentAccount = strFromAccount;\n+    strSentAccount = wtx.strFromAccount;\n \n     // Compute fee:\n-    CAmount nDebit = pwallet->GetDebit(*this, filter);\n+    CAmount nDebit = GetDebit(wtx, filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        CAmount nValueOut = tx->GetValueOut();\n+        CAmount nValueOut = wtx.tx->GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n     // Sent/received.\n-    for (unsigned int i = 0; i < tx->vout.size(); ++i)\n+    for (unsigned int i = 0; i < wtx.tx->vout.size(); ++i)\n     {\n-        const CTxOut& txout = tx->vout[i];\n-        isminetype fIsMine = pwallet->IsMine(txout);\n+        const CTxOut& txout = wtx.tx->vout[i];\n+        isminetype fIsMine = IsMine(txout);\n         // Only need to handle txouts if AT LEAST one of these is true:\n         //   1) they debit from us (sent)\n         //   2) the output is to us (received)\n         if (nDebit > 0)\n         {\n             // Don't report 'change' txouts\n-            if (pwallet->IsChange(txout))\n+            if (IsChange(txout))\n                 continue;\n         }\n         else if (!(fIsMine & filter))\n@@ -1790,7 +1790,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n         if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())\n         {\n             LogPrintf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n-                     this->GetHash().ToString());\n+                     wtx.GetHash().ToString());\n             address = CNoDestination();\n         }\n "
      },
      {
        "sha": "28c743a41ab0921d2d995471a9f89513470783f3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f4a3b0697b7892a436c038b94d6ed3197938b6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e3f4a3b0697b7892a436c038b94d6ed3197938b6",
        "patch": "@@ -441,9 +441,6 @@ class CWalletTx : public CMerkleTx\n         MarkDirty();\n     }\n \n-    void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n-\n     // True if only scriptSigs are different\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n@@ -786,6 +783,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         return CalculateMaximumSignedInputSize(wtx.tx->vout[out], this);\n     }\n \n+    void GetAmounts(const CWalletTx& wtx, std::list<COutputEntry>& listReceived,\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n "
      }
    ]
  },
  {
    "sha": "bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjc4YjE0ZTEyZDliMzg2MGE4MjdhOTAxN2I3YmJiZGIyY2YyZmEy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T16:17:33Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:01Z"
      },
      "message": "refactor: Move CWalletTx::IsTrusted to CWallet",
      "tree": {
        "sha": "7fb4aaad953ab293aa8993ac4e98ac993b00123a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fb4aaad953ab293aa8993ac4e98ac993b00123a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f4a3b0697b7892a436c038b94d6ed3197938b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f4a3b0697b7892a436c038b94d6ed3197938b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f4a3b0697b7892a436c038b94d6ed3197938b6"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 25,
      "deletions": 24
    },
    "files": [
      {
        "sha": "9c77b6a5bbea1adf1a38cc94d7b1f4869abf3677",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "patch": "@@ -82,7 +82,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(const CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -94,7 +94,7 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = CheckFinalTx(*wtx.tx);\n-    result.is_trusted = wtx.IsTrusted();\n+    result.is_trusted = wallet.IsTrusted(wtx);\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n     result.is_in_main_chain = wtx.IsInMainChain();\n@@ -300,7 +300,7 @@ class WalletImpl : public Wallet\n         }\n         num_blocks = ::chainActive.Height();\n         adjusted_time = GetAdjustedTime();\n-        tx_status = MakeWalletTxStatus(mi->second);\n+        tx_status = MakeWalletTxStatus(m_wallet, mi->second);\n         return true;\n     }\n     WalletTx getWalletTxDetails(const uint256& txid,\n@@ -317,7 +317,7 @@ class WalletImpl : public Wallet\n             adjusted_time = GetAdjustedTime();\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n-            tx_status = MakeWalletTxStatus(mi->second);\n+            tx_status = MakeWalletTxStatus(m_wallet, mi->second);\n             return MakeWalletTx(m_wallet, mi->second);\n         }\n         return {};"
      },
      {
        "sha": "ed5d3376ba73ad4a74453b00ef622560a6be6e4e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "patch": "@@ -87,7 +87,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n+void WalletTxToJSON(const CWallet* pwallet, const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -99,7 +99,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         entry.pushKV(\"blockindex\", wtx.nIndex);\n         entry.pushKV(\"blocktime\", LookupBlockIndex(wtx.hashBlock)->GetBlockTime());\n     } else {\n-        entry.pushKV(\"trusted\", wtx.IsTrusted());\n+        entry.pushKV(\"trusted\", pwallet->IsTrusted(wtx));\n     }\n     uint256 hash = wtx.GetHash();\n     entry.pushKV(\"txid\", hash.GetHex());\n@@ -1696,7 +1696,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             entry.pushKV(\"vout\", s.vout);\n             entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n-                WalletTxToJSON(wtx, entry);\n+                WalletTxToJSON(pwallet, wtx, entry);\n             entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n@@ -1738,7 +1738,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n                 }\n                 entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n-                    WalletTxToJSON(wtx, entry);\n+                    WalletTxToJSON(pwallet, wtx, entry);\n                 ret.push_back(entry);\n             }\n         }\n@@ -2215,7 +2215,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n         entry.pushKV(\"fee\", ValueFromAmount(nFee));\n     }\n \n-    WalletTxToJSON(wtx, entry);\n+    WalletTxToJSON(pwallet, wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);"
      },
      {
        "sha": "4f520c8f3798c48c68c672d0cfe0ab2d08b75dfa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "patch": "@@ -1996,32 +1996,32 @@ bool CWalletTx::InMempool() const\n     return fInMempool;\n }\n \n-bool CWalletTx::IsTrusted() const\n+bool CWallet::IsTrusted(const CWalletTx& wtx) const\n {\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*tx))\n+    if (!CheckFinalTx(*wtx.tx))\n         return false;\n-    int nDepth = GetDepthInMainChain();\n+    int nDepth = wtx.GetDepthInMainChain();\n     if (nDepth >= 1)\n         return true;\n     if (nDepth < 0)\n         return false;\n-    if (!bSpendZeroConfChange || !pwallet->IsFromMe(*this, ISMINE_ALL)) // using wtx's cached debit\n+    if (!bSpendZeroConfChange || !IsFromMe(wtx, ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n     // Don't trust unconfirmed transactions from us unless they are in the mempool.\n-    if (!InMempool())\n+    if (!wtx.InMempool())\n         return false;\n \n     // Trusted if all inputs are from us and are in the mempool:\n-    for (const CTxIn& txin : tx->vin)\n+    for (const CTxIn& txin : wtx.tx->vin)\n     {\n         // Transactions not sent by us: not trusted\n-        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n+        const CWalletTx* parent = GetWalletTx(txin.prevout.hash);\n         if (parent == nullptr)\n             return false;\n         const CTxOut& parentOut = parent->tx->vout[txin.prevout.n];\n-        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n+        if (IsMine(parentOut) != ISMINE_SPENDABLE)\n             return false;\n     }\n     return true;\n@@ -2102,7 +2102,7 @@ CAmount CWallet::GetBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet) {\n             const CWalletTx& wtx = entry.second;\n-            if (wtx.IsTrusted()) {\n+            if (IsTrusted(wtx)) {\n                 nTotal += GetAvailableCredit(wtx);\n             }\n         }\n@@ -2118,7 +2118,7 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet) {\n             const CWalletTx& wtx = entry.second;\n-            if (!wtx.IsTrusted() && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n+            if (!IsTrusted(wtx) && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n                 nTotal += GetAvailableCredit(wtx);\n             }\n         }\n@@ -2146,7 +2146,7 @@ CAmount CWallet::GetWatchOnlyBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet) {\n             const CWalletTx& wtx = entry.second;\n-            if (wtx.IsTrusted()) {\n+            if (IsTrusted(wtx)) {\n                 nTotal += GetAvailableWatchOnlyCredit(wtx);\n             }\n         }\n@@ -2162,7 +2162,7 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         LOCK2(cs_main, cs_wallet);\n         for (const auto& entry : mapWallet) {\n             const CWalletTx& wtx = entry.second;\n-            if (!wtx.IsTrusted() && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n+            if (!IsTrusted(wtx) && wtx.GetDepthInMainChain() == 0 && wtx.InMempool()) {\n                 nTotal += GetAvailableWatchOnlyCredit(wtx);\n             }\n         }\n@@ -2269,7 +2269,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n         if (nDepth == 0 && !pcoin->InMempool())\n             continue;\n \n-        bool safeTx = pcoin->IsTrusted();\n+        bool safeTx = IsTrusted(*pcoin);\n \n         // We should not consider coins from transactions that are replacing\n         // other transactions.\n@@ -3494,7 +3494,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n         {\n             const CWalletTx& wtx = walletEntry.second;\n \n-            if (!wtx.IsTrusted())\n+            if (!IsTrusted(wtx))\n                 continue;\n \n             if (wtx.IsCoinBase() && wtx.GetBlocksToMaturity() > 0)"
      },
      {
        "sha": "a625529ff7b459771a33efa385f57f7f96f6593b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "patch": "@@ -445,7 +445,6 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const;\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n@@ -786,6 +785,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void GetAmounts(const CWalletTx& wtx, std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n+    bool IsTrusted(const CWalletTx& wtx) const;\n+\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n "
      }
    ]
  },
  {
    "sha": "dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQ5NDE2ZjE1ZGJiYmM4ZTJjMzczYjAyZWVhZTUwNmJmOTFmZjNm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T16:24:32Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:01Z"
      },
      "message": "refactor: Move CWalletTx::GetRequestCount to CWallet",
      "tree": {
        "sha": "1705e38ba3ef56c7bf63ff188fb873a8021e9022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1705e38ba3ef56c7bf63ff188fb873a8021e9022"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb78b14e12d9b3860a827a9017b7bbbdb2cf2fa2"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "60bc60ad95b2e87e2488674f1b00aa1fb5ddd77d",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
        "patch": "@@ -90,7 +90,7 @@ WalletTxStatus MakeWalletTxStatus(const CWallet& wallet, const CWalletTx& wtx)\n     result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max()),\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n-    result.request_count = wtx.GetRequestCount();\n+    result.request_count = wallet.GetRequestCount(wtx);\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = CheckFinalTx(*wtx.tx);"
      },
      {
        "sha": "99ea2fc4d7973877340845f3d79861b56ee4964e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
        "patch": "@@ -1639,35 +1639,35 @@ int64_t CWalletTx::GetTxTime() const\n     return n ? n : nTimeReceived;\n }\n \n-int CWalletTx::GetRequestCount() const\n+int CWallet::GetRequestCount(const CWalletTx& wtx) const\n {\n     // Returns -1 if it wasn't being tracked\n     int nRequests = -1;\n     {\n-        LOCK(pwallet->cs_wallet);\n-        if (IsCoinBase())\n+        LOCK(cs_wallet);\n+        if (wtx.IsCoinBase())\n         {\n             // Generated block\n-            if (!hashUnset())\n+            if (!wtx.hashUnset())\n             {\n-                std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);\n-                if (mi != pwallet->mapRequestCount.end())\n+                std::map<uint256, int>::const_iterator mi = mapRequestCount.find(wtx.hashBlock);\n+                if (mi != mapRequestCount.end())\n                     nRequests = (*mi).second;\n             }\n         }\n         else\n         {\n             // Did anyone request this transaction?\n-            std::map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());\n-            if (mi != pwallet->mapRequestCount.end())\n+            std::map<uint256, int>::const_iterator mi = mapRequestCount.find(wtx.GetHash());\n+            if (mi != mapRequestCount.end())\n             {\n                 nRequests = (*mi).second;\n \n                 // How about the block it's in?\n-                if (nRequests == 0 && !hashUnset())\n+                if (nRequests == 0 && !wtx.hashUnset())\n                 {\n-                    std::map<uint256, int>::const_iterator _mi = pwallet->mapRequestCount.find(hashBlock);\n-                    if (_mi != pwallet->mapRequestCount.end())\n+                    std::map<uint256, int>::const_iterator _mi = mapRequestCount.find(wtx.hashBlock);\n+                    if (_mi != mapRequestCount.end())\n                         nRequests = (*_mi).second;\n                     else\n                         nRequests = 1; // If it's in someone else's block it must have got out"
      },
      {
        "sha": "2d6cd1cf73e546362b736b9fe70eb22e2c24106c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
        "patch": "@@ -447,7 +447,6 @@ class CWalletTx : public CMerkleTx\n     bool InMempool() const;\n \n     int64_t GetTxTime() const;\n-    int GetRequestCount() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n     bool RelayWalletTransaction(CConnman* connman);\n@@ -787,6 +786,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     bool IsTrusted(const CWalletTx& wtx) const;\n \n+    int GetRequestCount(const CWalletTx& wtx) const;\n+\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n "
      }
    ]
  },
  {
    "sha": "c921de8b3f7d70bc2c3948a3685232c2e20983c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTIxZGU4YjNmN2Q3MGJjMmMzOTQ4YTM2ODUyMzJjMmUyMDk4M2M4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T16:35:12Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:01Z"
      },
      "message": "refactor: Move RelayWalletTransaction and AcceptToMemoryPool from CWalletTx to CWallet",
      "tree": {
        "sha": "f00ca53720d6134415077577bc7794c4600d8ac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f00ca53720d6134415077577bc7794c4600d8ac7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c921de8b3f7d70bc2c3948a3685232c2e20983c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c921de8b3f7d70bc2c3948a3685232c2e20983c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c921de8b3f7d70bc2c3948a3685232c2e20983c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c921de8b3f7d70bc2c3948a3685232c2e20983c8/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc49416f15dbbbc8e2c373b02eeae506bf91ff3f"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 21,
      "deletions": 19
    },
    "files": [
      {
        "sha": "682918cb25a190d89036ef76229abe90318f3871",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c921de8b3f7d70bc2c3948a3685232c2e20983c8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c921de8b3f7d70bc2c3948a3685232c2e20983c8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c921de8b3f7d70bc2c3948a3685232c2e20983c8",
        "patch": "@@ -1953,21 +1953,21 @@ void CWallet::ReacceptWalletTransactions()\n     for (std::pair<const int64_t, CWalletTx*>& item : mapSorted) {\n         CWalletTx& wtx = *(item.second);\n         CValidationState state;\n-        wtx.AcceptToMemoryPool(maxTxFee, state);\n+        AcceptToMemoryPool(wtx, maxTxFee, state);\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n+bool CWallet::RelayWalletTransaction(CWalletTx& wtx, CConnman* connman)\n {\n-    assert(pwallet->GetBroadcastTransactions());\n-    if (!IsCoinBase() && !isAbandoned() && GetDepthInMainChain() == 0)\n+    assert(GetBroadcastTransactions());\n+    if (!wtx.IsCoinBase() && !wtx.isAbandoned() && wtx.GetDepthInMainChain() == 0)\n     {\n         CValidationState state;\n         /* GetDepthInMainChain already catches known conflicts. */\n-        if (InMempool() || AcceptToMemoryPool(maxTxFee, state)) {\n-            LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n+        if (wtx.InMempool() || AcceptToMemoryPool(wtx, maxTxFee, state)) {\n+            LogPrintf(\"Relaying wtx %s\\n\", wtx.GetHash().ToString());\n             if (connman) {\n-                CInv inv(MSG_TX, GetHash());\n+                CInv inv(MSG_TX, wtx.GetHash());\n                 connman->ForEachNode([&inv](CNode* pnode)\n                 {\n                     pnode->PushInventory(inv);\n@@ -2055,8 +2055,9 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CCon\n     for (std::pair<const unsigned int, CWalletTx*>& item : mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction(connman))\n+        if (RelayWalletTransaction(wtx, connman)) {\n             result.push_back(wtx.GetHash());\n+        }\n     }\n     return result;\n }\n@@ -3092,11 +3093,11 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n+            if (!AcceptToMemoryPool(wtx, maxTxFee, state)) {\n                 LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n-                wtx.RelayWalletTransaction(connman);\n+                RelayWalletTransaction(wtx, connman);\n             }\n         }\n     }\n@@ -4196,16 +4197,16 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWallet::AcceptToMemoryPool(CWalletTx& wtx, const CAmount& nAbsurdFee, CValidationState& state)\n {\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that this newly generated transaction's change is\n     // unavailable as we're not yet aware that it is in the mempool.\n-    bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n+    bool ret = ::AcceptToMemoryPool(mempool, state, wtx.tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n-    fInMempool |= ret;\n+    wtx.fInMempool |= ret;\n     return ret;\n }\n "
      },
      {
        "sha": "ad58c6a014225a74e017b1d36c9a601f1c570939",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c921de8b3f7d70bc2c3948a3685232c2e20983c8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c921de8b3f7d70bc2c3948a3685232c2e20983c8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c921de8b3f7d70bc2c3948a3685232c2e20983c8",
        "patch": "@@ -448,12 +448,6 @@ class CWalletTx : public CMerkleTx\n \n     int64_t GetTxTime() const;\n \n-    // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(CConnman* connman);\n-\n-    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n-\n     std::set<uint256> GetConflicts() const;\n };\n \n@@ -788,6 +782,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     int GetRequestCount(const CWalletTx& wtx) const;\n \n+    // RelayWalletTransaction may only be called if fBroadcastTransactions!\n+    bool RelayWalletTransaction(CWalletTx& wtx, CConnman* connman);\n+\n+    /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n+    bool AcceptToMemoryPool(CWalletTx& wtx, const CAmount& nAbsurdFee, CValidationState& state);\n+\n+\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n "
      }
    ]
  },
  {
    "sha": "80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGMzZmQ4Y2FjYWU4NWYxYjQwMTRkMThmMzBmMTBkODcxM2Y4YjBk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T16:39:14Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:43:01Z"
      },
      "message": "refactor: Replace call CWalletTx::GetConflicts with CWallet::GetConflicts",
      "tree": {
        "sha": "37266c157ca4c74919a89cbf5a07d53452c7f343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37266c157ca4c74919a89cbf5a07d53452c7f343"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c921de8b3f7d70bc2c3948a3685232c2e20983c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c921de8b3f7d70bc2c3948a3685232c2e20983c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c921de8b3f7d70bc2c3948a3685232c2e20983c8"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 5,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7fad81eedaeb7fab965be70f08b463780f3f09d6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
        "patch": "@@ -104,7 +104,7 @@ void WalletTxToJSON(const CWallet* pwallet, const CWalletTx& wtx, UniValue& entr\n     uint256 hash = wtx.GetHash();\n     entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n-    for (const uint256& conflict : wtx.GetConflicts())\n+    for (const uint256& conflict : pwallet->GetConflicts(hash))\n         conflicts.push_back(conflict.GetHex());\n     entry.pushKV(\"walletconflicts\", conflicts);\n     entry.pushKV(\"time\", wtx.GetTxTime());"
      },
      {
        "sha": "ea1358a98dfd0e4d96fc3396a814cbfb1bdc9d16",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
        "patch": "@@ -494,6 +494,10 @@ std::set<uint256> CWallet::GetConflicts(const uint256& txid) const\n         for (TxSpends::const_iterator _it = range.first; _it != range.second; ++_it)\n             result.insert(_it->second);\n     }\n+\n+    // txid should not conflict with itself\n+    result.erase(txid);\n+\n     return result;\n }\n \n@@ -1979,18 +1983,6 @@ bool CWallet::RelayWalletTransaction(CWalletTx& wtx, CConnman* connman)\n     return false;\n }\n \n-std::set<uint256> CWalletTx::GetConflicts() const\n-{\n-    std::set<uint256> result;\n-    if (pwallet != nullptr)\n-    {\n-        uint256 myHash = GetHash();\n-        result = pwallet->GetConflicts(myHash);\n-        result.erase(myHash);\n-    }\n-    return result;\n-}\n-\n bool CWalletTx::InMempool() const\n {\n     return fInMempool;"
      },
      {
        "sha": "e1cf26887f520c123d51e9c142ce0413a3187739",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
        "patch": "@@ -447,8 +447,6 @@ class CWalletTx : public CMerkleTx\n     bool InMempool() const;\n \n     int64_t GetTxTime() const;\n-\n-    std::set<uint256> GetConflicts() const;\n };\n \n class COutput"
      }
    ]
  },
  {
    "sha": "74bc69002eb2183cc7160c9e4e68cf0c1e580530",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGJjNjkwMDJlYjIxODNjYzcxNjBjOWU0ZTY4Y2YwYzFlNTgwNTMw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-09T23:59:39Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-04-18T17:44:35Z"
      },
      "message": "refactor: Remove CWallet pointer from CWalletTx",
      "tree": {
        "sha": "9157312419f05748eb4d2fe2534c3ebacda8032e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9157312419f05748eb4d2fe2534c3ebacda8032e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74bc69002eb2183cc7160c9e4e68cf0c1e580530",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74bc69002eb2183cc7160c9e4e68cf0c1e580530",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74bc69002eb2183cc7160c9e4e68cf0c1e580530",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74bc69002eb2183cc7160c9e4e68cf0c1e580530/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80c3fd8cacae85f1b4014d18f30f10d8713f8b0d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 17,
      "deletions": 27
    },
    "files": [
      {
        "sha": "b57dfb7c5dde360280a3cc215c8bd0646626b653",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -17,7 +17,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n+    CWalletTx* wtx = new CWalletTx(MakeTransactionRef(std::move(tx)));\n \n     int nAge = 6 * 24;\n     vCoins.push_back(wallet.MakeOutput(*wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */));"
      },
      {
        "sha": "225af89b6af7897bbf1b73e22d53021139234c03",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -349,7 +349,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n-    CWalletTx wtx(pwallet, MakeTransactionRef(std::move(tx)));\n+    CWalletTx wtx(MakeTransactionRef(std::move(tx)));\n \n     CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;"
      },
      {
        "sha": "89235c4aab55a8dbfce3182b70c2786d7e1ddcba",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -29,7 +29,7 @@ GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n     std::vector<CWalletTx*> vpwtx;\n-    CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n+    CWalletTx wtx(MakeTransactionRef());\n     CAccountingEntry ae;\n     std::map<CAmount, CAccountingEntry> results;\n "
      },
      {
        "sha": "ce9a7fbd8a845db5d1605992ef5d7b463e799bc4",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -65,7 +65,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n         // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n         tx.vin.resize(1);\n     }\n-    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(MakeTransactionRef(std::move(tx))));\n     if (fIsFromMe)\n     {\n         wtx->fDebitCached = true;"
      },
      {
        "sha": "ca4f1a959d6d8d1be78ffef6127db06a65befcb6",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -179,7 +179,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n     CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n-    CWalletTx wtx(&wallet, m_coinbase_txns.back());\n+    CWalletTx wtx(m_coinbase_txns.back());\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n     wtx.nIndex = 0;\n@@ -211,7 +211,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         block->phashBlock = &hash;\n     }\n \n-    CWalletTx wtx(&wallet, MakeTransactionRef(tx));\n+    CWalletTx wtx(MakeTransactionRef(tx));\n     if (block) {\n         wtx.SetMerkleBranch(block, 0);\n     }"
      },
      {
        "sha": "30471f06c06aa62471a323f09e0d2f6bb7ff17e9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -899,7 +899,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     // Inserts only if not already there, returns tx inserted or tx found\n     std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n     CWalletTx& wtx = (*ret.first).second;\n-    wtx.BindWallet(this);\n+    wtx.MarkDirty();\n     bool fInsertedNew = ret.second;\n     if (fInsertedNew)\n     {\n@@ -977,7 +977,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n {\n     uint256 hash = wtxIn.GetHash();\n     CWalletTx& wtx = mapWallet.emplace(hash, wtxIn).first->second;\n-    wtx.BindWallet(this);\n+    wtx.MarkDirty();\n     wtxOrdered.insert(std::make_pair(wtx.nOrderPos, TxPair(&wtx, nullptr)));\n     AddToSpends(hash);\n     for (const CTxIn& txin : wtx.tx->vin) {\n@@ -1053,7 +1053,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n                 }\n             }\n \n-            CWalletTx wtx(this, ptx);\n+            CWalletTx wtx(ptx);\n \n             // Get merkle branch if transaction was found in a block\n             if (pIndex != nullptr)\n@@ -3050,7 +3050,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n     {\n         LOCK2(cs_main, cs_wallet);\n \n-        CWalletTx wtxNew(this, std::move(tx));\n+        CWalletTx wtxNew(std::move(tx));\n         wtxNew.mapValue = std::move(mapValue);\n         wtxNew.vOrderForm = std::move(orderForm);\n         wtxNew.strFromAccount = std::move(fromAccount);\n@@ -3070,7 +3070,7 @@ bool CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::ve\n             for (const CTxIn& txin : wtxNew.tx->vin)\n             {\n                 CWalletTx &coin = mapWallet.at(txin.prevout.hash);\n-                coin.BindWallet(this);\n+                coin.MarkDirty();\n                 NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n         }"
      },
      {
        "sha": "f59807bff347c641cdb37c80f2b91b757e0ce088",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -274,9 +274,6 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet)\n  */\n class CWalletTx : public CMerkleTx\n {\n-private:\n-    const CWallet* pwallet;\n-\n public:\n     /**\n      * Key/value map with information about the transaction.\n@@ -347,14 +344,13 @@ class CWalletTx : public CMerkleTx\n     mutable CAmount nAvailableWatchCreditCached;\n     mutable CAmount nChangeCached;\n \n-    CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n+    explicit CWalletTx(CTransactionRef arg) : CMerkleTx(std::move(arg))\n     {\n-        Init(pwalletIn);\n+        Init();\n     }\n \n-    void Init(const CWallet* pwalletIn)\n+    void Init()\n     {\n-        pwallet = pwalletIn;\n         mapValue.clear();\n         vOrderForm.clear();\n         fTimeReceivedIsTxTime = false;\n@@ -404,7 +400,7 @@ class CWalletTx : public CMerkleTx\n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        Init(nullptr);\n+        Init();\n         char fSpent;\n \n         s >> static_cast<CMerkleTx&>(*this);\n@@ -435,12 +431,6 @@ class CWalletTx : public CMerkleTx\n         fChangeCached = false;\n     }\n \n-    void BindWallet(CWallet *pwalletIn)\n-    {\n-        pwallet = pwalletIn;\n-        MarkDirty();\n-    }\n-\n     // True if only scriptSigs are different\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n "
      },
      {
        "sha": "fc0ba07e65133bb415ea511a325a791dbe4cb5a4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74bc69002eb2183cc7160c9e4e68cf0c1e580530/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=74bc69002eb2183cc7160c9e4e68cf0c1e580530",
        "patch": "@@ -271,7 +271,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             uint256 hash;\n             ssKey >> hash;\n-            CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n+            CWalletTx wtx(MakeTransactionRef());\n             ssValue >> wtx;\n             CValidationState state;\n             if (!(CheckTransaction(*wtx.tx, state) && (wtx.GetHash() == hash) && state.IsValid()))\n@@ -672,7 +672,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n                 uint256 hash;\n                 ssKey >> hash;\n \n-                CWalletTx wtx(nullptr /* pwallet */, MakeTransactionRef());\n+                CWalletTx wtx(MakeTransactionRef());\n                 ssValue >> wtx;\n \n                 vTxHash.push_back(hash);"
      }
    ]
  }
]