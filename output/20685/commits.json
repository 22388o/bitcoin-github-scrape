[
  {
    "sha": "4cba2fdafa483cbdb70f581174138ec253c80d48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2JhMmZkYWZhNDgzY2JkYjcwZjU4MTE3NDEzOGVjMjUzYzgwZDQ4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-18T16:13:27Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:56:56Z"
      },
      "message": "util: extract {Read,Write}BinaryFile() to its own files\n\nExtract `ReadBinaryFile()` and `WriteBinaryFile()` from `torcontrol.cpp`\nto its own `readwritefile.{h,cpp}` files, so that it can be reused from\nother modules.",
      "tree": {
        "sha": "561fc39e52a27c06444dde75be49364af52f6594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/561fc39e52a27c06444dde75be49364af52f6594"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cba2fdafa483cbdb70f581174138ec253c80d48",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81ogACgkQVN8G9ktV\ny7/wIB//XcvuzuOtaChjmcVNbLHB2XALuZZQcQgub6vOYmx37Mwd7R6JsqEp7h75\nkcR4DQxukJoIahVnH05wNk/4lACtS/1xI7acK9Flr6gsgwLMNd9BLjfc14NFaXuB\nQgxINfPlRK/d5G+NecSjupFMgn/9vfyOt8Ygvo434KynM1wR9Dq9mslkEjE63rDH\n46iGL/MYYEhKh0KUsOKZM/Cy3vmSfD6NyzxkBW30F1YLfxrlrt7pSKZRWxLyHjEg\ni4V7/CpECqYVstyRcDqtNnFKgS+3H+WRwAf9eFVzQlrYrbfhIZPnUTYfyqXRVYoQ\nh2XtHCtx7xFKlOqMLA0VWgDyjdGRCsPPoJArwxhxfzUymcEN1DCZzCKMzY3yw1+7\nPaLdu+mHtkN1Xpb3aeOSXL0eN9ag4o0PvYptdmz8pnqeVAOWkvdEU/EeaJA7OOoM\n4aABoj06A3wpXPE1N14VZX67WfAvR2rxNcmj++X+0xUkZ/7ix6Q7dH91zrnW/YQW\n/DoRp3u7odnK0uOka3WsTcXJyVc0ba1ZZ2elQmr1eMettJ0etOSfGIsDJaJxRIV/\nqL9LDwaipgHbhvtBKVykQYu3JkAVyKnV1B55QO6AXt7GyqQdoTKjXNhcXLkvirDW\nYnfN0b02tIc22aA5lw8Qrf7ZD942G2Zu5NiuorVgGBc1NBKNYf3cCebbhsZcMJgk\nM/TmFZuVxCc2mgMShZUQF21xElunkLiEMo7AykEtFUtHgEL6qrpTrmYBUbXWhOAt\nrDVMcAknNKefC45+jXp92xhVy4WEZ611PIHh9sf755ViXme/Xjk/uFuolhxQ8drp\n+8cGSifF4XpWbeBLt35pHKY6Z26zCvxtqtM2PqHUlr8fZzM39d7HZft5HDzhl9M1\nykc+H+lfrTw/NhL3gH5WIyUwrA9UbhzBA5twK9/hEfURW6n49D9nvrprBadzFJhS\nN9qLOjecTa0Fu0KX5q943I1c4/1t5QW4ZnqhN2SoRkP/wL6jnAT8vm5IADdIjGZK\nzvPKRFwF86cXUcRvCm+ZMQBIXHindlk8obSqF00B96izEGEZYrwl9ja/zOFb6TUY\nHnmFpgpDcy7vvHQBovIs+rlmzoHUCfnWVwggbWKkfFRbVN/1h4TTKEHj9PKnmTSE\nlDTVHdcznzk5bb84x8nF5DOOU4MuWD48Ht/XUDn+FWgJQxb2FUoMjHxeMTUfZrzo\nlcAAmZu75UVO/pwQ21cIk2UzwACljpmypjem6JFk6OEsfpzO1iQMQ2SxiUuVqeHM\nqiG9mjR+rCL3gh18zkeAFXu4L0rUrAw3aOF5GSOLau2MppdbtTi7kk5NWHZyS7pX\n5gFsaI5kNaBpNrX/nbeOZGPNilhulw==\n=v1/o\n-----END PGP SIGNATURE-----",
        "payload": "tree 561fc39e52a27c06444dde75be49364af52f6594\nparent ad89812c70a9b88be642fceffb970859f6fdcba2\nauthor Vasil Dimov <vd@FreeBSD.org> 1605716007 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599816 +0100\n\nutil: extract {Read,Write}BinaryFile() to its own files\n\nExtract `ReadBinaryFile()` and `WriteBinaryFile()` from `torcontrol.cpp`\nto its own `readwritefile.{h,cpp}` files, so that it can be reused from\nother modules.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cba2fdafa483cbdb70f581174138ec253c80d48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cba2fdafa483cbdb70f581174138ec253c80d48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cba2fdafa483cbdb70f581174138ec253c80d48/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad89812c70a9b88be642fceffb970859f6fdcba2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad89812c70a9b88be642fceffb970859f6fdcba2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad89812c70a9b88be642fceffb970859f6fdcba2"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 78,
      "deletions": 46
    },
    "files": [
      {
        "sha": "d6af3049e80e6780f0013c76822a476b8f5c6d36",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cba2fdafa483cbdb70f581174138ec253c80d48/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cba2fdafa483cbdb70f581174138ec253c80d48/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4cba2fdafa483cbdb70f581174138ec253c80d48",
        "patch": "@@ -242,6 +242,7 @@ BITCOIN_CORE_H = \\\n   util/message.h \\\n   util/moneystr.h \\\n   util/rbf.h \\\n+  util/readwritefile.h \\\n   util/ref.h \\\n   util/settings.h \\\n   util/sock.h \\\n@@ -572,6 +573,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/message.cpp \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n+  util/readwritefile.cpp \\\n   util/settings.cpp \\\n   util/threadnames.cpp \\\n   util/spanparsing.cpp \\"
      },
      {
        "sha": "0f2a4895f1b4eade853da8f7099ef8652d60acfa",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 46,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cba2fdafa483cbdb70f581174138ec253c80d48/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cba2fdafa483cbdb70f581174138ec253c80d48/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=4cba2fdafa483cbdb70f581174138ec253c80d48",
        "patch": "@@ -12,6 +12,7 @@\n #include <net.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <util/readwritefile.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/time.h>\n@@ -362,52 +363,6 @@ std::map<std::string,std::string> ParseTorReplyMapping(const std::string &s)\n     return mapping;\n }\n \n-/** Read full contents of a file and return them in a std::string.\n- * Returns a pair <status, string>.\n- * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n- *\n- * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n- *         (with len > maxsize) will be returned.\n- */\n-static std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n-{\n-    FILE *f = fsbridge::fopen(filename, \"rb\");\n-    if (f == nullptr)\n-        return std::make_pair(false,\"\");\n-    std::string retval;\n-    char buffer[128];\n-    size_t n;\n-    while ((n=fread(buffer, 1, sizeof(buffer), f)) > 0) {\n-        // Check for reading errors so we don't return any data if we couldn't\n-        // read the entire file (or up to maxsize)\n-        if (ferror(f)) {\n-            fclose(f);\n-            return std::make_pair(false,\"\");\n-        }\n-        retval.append(buffer, buffer+n);\n-        if (retval.size() > maxsize)\n-            break;\n-    }\n-    fclose(f);\n-    return std::make_pair(true,retval);\n-}\n-\n-/** Write contents of std::string to a file.\n- * @return true on success.\n- */\n-static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n-{\n-    FILE *f = fsbridge::fopen(filename, \"wb\");\n-    if (f == nullptr)\n-        return false;\n-    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n-        fclose(f);\n-        return false;\n-    }\n-    fclose(f);\n-    return true;\n-}\n-\n /****** Bitcoin specific TorController implementation ********/\n \n /** Controller that connects to Tor control socket, authenticate, then create"
      },
      {
        "sha": "1d9beb111fd7e597174e367ed62d5f70cc03a320",
        "filename": "src/util/readwritefile.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cba2fdafa483cbdb70f581174138ec253c80d48/src/util/readwritefile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cba2fdafa483cbdb70f581174138ec253c80d48/src/util/readwritefile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/readwritefile.cpp?ref=4cba2fdafa483cbdb70f581174138ec253c80d48",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Copyright (c) 2017 The Zcash developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+\n+#include <limits>\n+#include <stdio.h>\n+#include <string>\n+#include <utility>\n+\n+std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max())\n+{\n+    FILE *f = fsbridge::fopen(filename, \"rb\");\n+    if (f == nullptr)\n+        return std::make_pair(false,\"\");\n+    std::string retval;\n+    char buffer[128];\n+    size_t n;\n+    while ((n=fread(buffer, 1, sizeof(buffer), f)) > 0) {\n+        // Check for reading errors so we don't return any data if we couldn't\n+        // read the entire file (or up to maxsize)\n+        if (ferror(f)) {\n+            fclose(f);\n+            return std::make_pair(false,\"\");\n+        }\n+        retval.append(buffer, buffer+n);\n+        if (retval.size() > maxsize)\n+            break;\n+    }\n+    fclose(f);\n+    return std::make_pair(true,retval);\n+}\n+\n+bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n+{\n+    FILE *f = fsbridge::fopen(filename, \"wb\");\n+    if (f == nullptr)\n+        return false;\n+    if (fwrite(data.data(), 1, data.size(), f) != data.size()) {\n+        fclose(f);\n+        return false;\n+    }\n+    fclose(f);\n+    return true;\n+}"
      },
      {
        "sha": "1dab874b38ce38bc1aaede25d063d104e1b5ceeb",
        "filename": "src/util/readwritefile.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cba2fdafa483cbdb70f581174138ec253c80d48/src/util/readwritefile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cba2fdafa483cbdb70f581174138ec253c80d48/src/util/readwritefile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/readwritefile.h?ref=4cba2fdafa483cbdb70f581174138ec253c80d48",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_READWRITEFILE_H\n+#define BITCOIN_UTIL_READWRITEFILE_H\n+\n+#include <fs.h>\n+\n+#include <limits>\n+#include <string>\n+#include <utility>\n+\n+/** Read full contents of a file and return them in a std::string.\n+ * Returns a pair <status, string>.\n+ * If an error occurred, status will be false, otherwise status will be true and the data will be returned in string.\n+ *\n+ * @param maxsize Puts a maximum size limit on the file that is read. If the file is larger than this, truncated data\n+ *         (with len > maxsize) will be returned.\n+ */\n+std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxsize=std::numeric_limits<size_t>::max());\n+\n+/** Write contents of std::string to a file.\n+ * @return true on success.\n+ */\n+bool WriteBinaryFile(const fs::path &filename, const std::string &data);\n+\n+#endif /* BITCOIN_UTIL_READWRITEFILE_H */"
      }
    ]
  },
  {
    "sha": "8b6e4b3b23027da263d257b342f5d9a53e4032d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjZlNGIzYjIzMDI3ZGEyNjNkMjU3YjM0MmY1ZDlhNTNlNDAzMmQ1",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-18T16:34:41Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:00Z"
      },
      "message": "util: fix ReadBinaryFile() returning partial contents\n\nIf an error occurs and `fread()` returns `0` (nothing was read) then the\ncode before this patch would have returned \"success\" with a partially\nread contents of the file.",
      "tree": {
        "sha": "adf38dbe37cfdb8a32b6766247b3884c05927e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adf38dbe37cfdb8a32b6766247b3884c05927e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b6e4b3b23027da263d257b342f5d9a53e4032d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81owACgkQVN8G9ktV\ny7+Jch/+N6G5c2rfD1KxuYvb+jcEeGin0O6/3bhQExmDNX5AhvY2UXifiVaG87e9\nNRa7H1iny6a3Zp+V1bivic2UA+7ei4TrM8uhfxjbFr22o5ghRIbyILTi3zHx1/y/\no0vZ/OQsV2A0cOFP5UkouKozJMvEHEMdgV1vkTevTylTU6sCDdUXe3rEZ5txHDZo\naTenI0THq0wGzgbcXV/Iu+FPWOqGMhwGPJISNVw1t4CFxEla+jwqWafC1Irv8wHb\nC+H8EmrPM6aI+PLK7TVeHN61/hQuKoM1vtnvEN0z5b3wcsR93n4MX6oJEd9ZsIvz\nw/w48PIfSUJvUzSzf/uaegrx9X/nRClNtxUTaG2AKoL/eu+N7gEubuicVxszezlT\ncVok51eLRIrvxp6jWjRbKOLXlEerMceL4UJD0HWSfuSJGAtYVh1hFGhnyVwEZ0ok\nIjJ1SEFuY8JF24rKkZXhExcvXGuQpoUB0M23VbhCrAIJJ4najo0/i5sMFx0DHdhs\nICr4/9USPKTjjezhJnnOfFXWUxw+mM/9pdbU54+bc5VSJA5+ngnyQFOcsnnXvXP4\nxZP1Eg4Q7tuPPIIxRmCPtR3YZ0Qoa4YL6Mmrh7UD/IT9i4AAnuESgkYDg3mvSAIF\nXddMlOZx+VqykJPzWvbL1S1rgh+ZiqvaDyhAHhUvzwSedMSn1f6KgPn/IepF1cqX\nPL+OOfza7eRWObJHsn1DpgxuuWjJXnJOywyvAIG1ZUm4azL0SQH4ud9ESn6aqakD\nO50vMpajdn598xx6o3zZ1MSfBs77P8HUHxPYrfqJyWq18/rHdxC6DwcquDujmd0g\nDB2/E01MtkeIKX9qDwck2Fex3CIdyuqJQuVibJmBi1LjBcMGK6DSvdzCfUacS5xb\n3SyvT61bwuYne/E6CeETyOkf9IxXihrDsU2vlhdbVvPmXUrDmBgYCABWJJ8wUGh4\n0+CahZ6DTGDtKs/JYQDARphY5iLlDrREzseoggiCD72IVXG1cF/1HecHkZSfOqug\ntFiAVcBxifw8zSFpyu90TzxmIsfEKVRp1HO7lazNrtxV/FAaTDz2/tCqcUSfHyas\nVShgDBff6/YPAWf1KiB8M1PBDPz4JpsQF2qc67Px+BAwdvtk66W8AQyPKTaaBy7h\ney9t7stVNEt3h/zhoIk69tz/4E1LhHOAoPNBjEm8MMwqQBwbnePPScYRcf+jDI5e\n+TlfhHGE9ZQ1ngwexGTf1hX7ntvC/eOtDauPAoVizJjOz0fiv3WAweK08ZUm/Gyj\nrXXo9U/Wad3ld4i7ayKIeDSuh/A1SiDkSLunhH1QgJi6S4oOuUPNweVyWrqzqMJU\nk5zXvGonVNF6cYhTaX1P39Kw40GyBw==\n=7JQU\n-----END PGP SIGNATURE-----",
        "payload": "tree adf38dbe37cfdb8a32b6766247b3884c05927e5a\nparent 4cba2fdafa483cbdb70f581174138ec253c80d48\nauthor Vasil Dimov <vd@FreeBSD.org> 1605717281 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599820 +0100\n\nutil: fix ReadBinaryFile() returning partial contents\n\nIf an error occurs and `fread()` returns `0` (nothing was read) then the\ncode before this patch would have returned \"success\" with a partially\nread contents of the file.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b6e4b3b23027da263d257b342f5d9a53e4032d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b6e4b3b23027da263d257b342f5d9a53e4032d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b6e4b3b23027da263d257b342f5d9a53e4032d5/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cba2fdafa483cbdb70f581174138ec253c80d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cba2fdafa483cbdb70f581174138ec253c80d48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cba2fdafa483cbdb70f581174138ec253c80d48"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "15e9d7a9b91144ee713d398e422a6e0dc21209e4",
        "filename": "src/util/readwritefile.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b6e4b3b23027da263d257b342f5d9a53e4032d5/src/util/readwritefile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b6e4b3b23027da263d257b342f5d9a53e4032d5/src/util/readwritefile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/readwritefile.cpp?ref=8b6e4b3b23027da263d257b342f5d9a53e4032d5",
        "patch": "@@ -17,18 +17,16 @@ std::pair<bool,std::string> ReadBinaryFile(const fs::path &filename, size_t maxs\n         return std::make_pair(false,\"\");\n     std::string retval;\n     char buffer[128];\n-    size_t n;\n-    while ((n=fread(buffer, 1, sizeof(buffer), f)) > 0) {\n+    do {\n+        const size_t n = fread(buffer, 1, sizeof(buffer), f);\n         // Check for reading errors so we don't return any data if we couldn't\n         // read the entire file (or up to maxsize)\n         if (ferror(f)) {\n             fclose(f);\n             return std::make_pair(false,\"\");\n         }\n         retval.append(buffer, buffer+n);\n-        if (retval.size() > maxsize)\n-            break;\n-    }\n+    } while (!feof(f) && retval.size() <= maxsize);\n     fclose(f);\n     return std::make_pair(true,retval);\n }"
      }
    ]
  },
  {
    "sha": "545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDViYzVmODFkNjBmYTZmZjdjNWNjNDNhMmU5ZWVmODJmOTExNDY2",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-18T16:38:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:00Z"
      },
      "message": "util: fix WriteBinaryFile() claiming success even if error occurred\n\n`fclose()` is flushing any buffered data to disk, so if it fails then\nthat could mean that the data was not completely written to disk.\n\nThus, check if `fclose()` succeeds and only then claim success from\n`WriteBinaryFile()`.",
      "tree": {
        "sha": "a33547b406d578c4b4505dad2087e575d3fbab1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33547b406d578c4b4505dad2087e575d3fbab1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81owACgkQVN8G9ktV\ny7+2FCAAqjHHEOXi/rO9EjXogjznEw/WKaX8QERpTkdRT5CAE8RQyXPgIC9nlXNb\nV+XIlC2mkZmXLYKGR/+sRbNuOrq+A3Zwd2aIWzi4/URxo9sWzuJ1P39N5CieFgRi\nF4xcLgc2CMqjFJrmJ770GlBtiLvRD2FwIYafVwOGLOCmtmbo3A6iAoToXB3TVbl2\ng4Y1YKRL04BuCqQAlpDrjkuajb1IMdPz7A+jSOdh5rTE14TksnfIr98XLLZpHPyh\norG4cyfQ1359v2qw0D7Wf1F6QIgLnff3PgN7DSOwD5YCJeds3dFHSomgCpOV85X/\n2gFeTjqMfL/Xz2MawsdJy7B8NKyiSwWh2HguWlii65W7Hz4UCccQx0D2xo4QLjC2\n7M2mnb9gjg+ITZ+PoRHvZRlOVgQZVl8adz82zyMRpnkkFZEkFp9ivy1/NsJ3E1wH\nKkk8C93k6J1GQPSEfg7fDsv3BBUu779nYqQOryxW/huP2sXDbbPQvBCl2R0d3KVv\nLdr+qXvLzqLvOCaoDCv5mXXBeCm7MCLmRfWZODg/gnqOVqMKCxNqv1DoT1skRb9S\noudQ6tbHRe3WvB2sK91mV57rF5kHA/Lq2dgiy2S5tADfBvgBgltp8ZQpEA+Vgq9A\nYwekQqwL2vrK5T0QAZT6ulYATRvPwYdOaGImlBE/gK3Iy/gg3KscOX2U6mE8J4Sr\nV3DmmNGEDmH1ChkU5N2vVJCjxJomleMUzIovXBvIXkj3nidCIWJLDR0FG9vT02b+\nyInamcVlKWEDT5eknM1uZehR5pkleLF0YeYTVgZz8h1o++9HAGITehgoiyw61yPp\nCn9YufTIqH2QSosa19gdiZ2eAcU3mPp+w47W/nUU1nubZUlbOLhhpTI6sCowcmAj\nPaV/CExYj9Nn2WwTk3ugN7RZ0yf/TSFY0cjHCZ3HbAejZY6xi4KKUAIlqXquT29Y\nUKoGmyJ5djkao9VoirRSAjdxkcs+RpOAt9TA7MxHdAl2SJwn6mN05FxftOo5vkwt\nHfUFN9+o0BwuMwV6lsVZuQfHwDdvHaLuswJxx6d499VRmp+d9dAHsjTOhHyRcjop\nonlltuJ8kD2tCI1goYLg2aCzMSUNv4jON6mSIfvSmoP6+F87dp+feAPyRYP8ZO/K\nPFSJtQptWAHL/fDlVvgRVVfDs+WoktM4wixfFeEnihu4b+IeFQGniR6pfegC3m1X\nX722jgMA94S2iJhkJkiaIi/tczKhU37kE7qW/Ph7umYbxoyO57H0Cc3/+q+PMCiu\nkDtn+7pv1yeP9mx7c7VtRJGVF2lfCPxUBtyYSaM+StfAlV22+L2WG2uB3Bo4MXht\nqxZD9rrMzCfUnYgsMVqSmEZPWFJcLw==\n=0yr1\n-----END PGP SIGNATURE-----",
        "payload": "tree a33547b406d578c4b4505dad2087e575d3fbab1f\nparent 8b6e4b3b23027da263d257b342f5d9a53e4032d5\nauthor Vasil Dimov <vd@FreeBSD.org> 1605717523 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599820 +0100\n\nutil: fix WriteBinaryFile() claiming success even if error occurred\n\n`fclose()` is flushing any buffered data to disk, so if it fails then\nthat could mean that the data was not completely written to disk.\n\nThus, check if `fclose()` succeeds and only then claim success from\n`WriteBinaryFile()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b6e4b3b23027da263d257b342f5d9a53e4032d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b6e4b3b23027da263d257b342f5d9a53e4032d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b6e4b3b23027da263d257b342f5d9a53e4032d5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a45c41d367d81f3f95181516135bc3ce0036c1b0",
        "filename": "src/util/readwritefile.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466/src/util/readwritefile.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466/src/util/readwritefile.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/readwritefile.cpp?ref=545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
        "patch": "@@ -40,6 +40,8 @@ bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n         fclose(f);\n         return false;\n     }\n-    fclose(f);\n+    if (fclose(f) != 0) {\n+        return false;\n+    }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "25605895afe84b1765dd9da9240af22f99489df7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTYwNTg5NWFmZTg0YjE3NjVkZDlkYTkyNDBhZjIyZjk5NDg5ZGY3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-24T11:15:07Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:00Z"
      },
      "message": "net: check for invalid socket earlier in CConnman::AcceptConnection()\n\nThis check is related to an `accept()` failure. So do the check earlier,\ncloser to the `accept()` call.\n\nThis will allow to isolate the `accept()`-specific code at the beginning\nof `CConnman::AcceptConnection()` and reuse the code that follows it.",
      "tree": {
        "sha": "d8066df5b3a23adfd401ee56d5e67c0669551736",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8066df5b3a23adfd401ee56d5e67c0669551736"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25605895afe84b1765dd9da9240af22f99489df7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81owACgkQVN8G9ktV\ny7+7ISAAir9wr1WA+exiQwcMgk6hp4kXE4jUM9XfEUgvMkrxqk5ExJeMH6bmWJBB\nrp/oHu83Y3XD2EPmEChTySx8xhDtucbLS6sZb9/DaaORCi/FMQGavSXiBJXwYwwP\nI4PbI9HIakhgZOS/EMI5uIPDNXJO8J9qhgy1YCllY5IatZbnp0/I84NC4Zz8fl6u\nyuMecZkxVdKJj7oDUOOLIb6AlFNnFQmYPkCFqgebEpn9Xz0xPPJlWIrpRgKSLphQ\nG2hrhMKrUeSpvw4nrq2m6ePk/q0dBKcq2SIUMxuVIwE8cjnC1Nf2rgRScW+EG3v2\nP6MH7YnTwgtVwNWgJi6Wke4JFK8UZGpkuWDyIynbSpLshDqyUDbCQTAE2OB4vQRD\nJhj2SjlU9Mr/+lXtIeKyf/fHr0T8/FN63GSGewzUIzRTbpekeY8xzJy7I97KS0Zs\naD6bVlS5HKl7RwIiQ4euniGmX8e0uRX7cwjzHGHQkw3sgMLXL/MLnSO8BKoofcm4\nBNPu0SjLDpoGASeWhkeHbIYrWLlU6TnnoHLPox7dTjgz3z8C/DGojxNbrsMKmCis\npvjHBsaYsW/sbJdWyeFdz3e9k4ZzyeN2Ol/aE/ofHzUhM3k/9I19fGex7PU++SVf\nHMJusZnYV0cVnJIviZWtfsV33FbW+cfqkP2ntlaZhGRVMfcObT0t9vRR8fmCoS0q\nemcI2kmcJ+SDwZhm3po5pAi3l6OOM807hAN9CR4L6rYc+0F4MobJPcljdYbXK8ZS\nMlzEQG3WsXNrFoOoY6DxfzV+mm0Dt1NBox/8Ot6NhzICwFyuaUcrI8+FqVo45EGh\nFtXD13ftK0isY6UlCIbS13yW0v0ow//J2fMNj43KhHTzBluPidjmFjbAGLSHVK1E\n7B4zUhThbDNB6Q2iOIo5HsT/zxf2Z74dNv++Ivpd3KAVFl3Plq8E9dwuLmbuQBIg\ngqbJIe76+8/Sr+2F7AbyBEB2tAGfAHGE7TPQnax+LU4dJCxPwwztLSwVncJoCrft\nR4+HDgDZcaYEh6V/inucB68CJpVanbnqap6ahhIjqTGDltae2pUiLdrUlQi9qvpH\nokhecqXJhmKKOBsO2+jm7j9D/TnPtnseBPbjEiitUFiYzuR2FbFi5+WvujqBJB3F\nM17SQmi2q5wdB4nstQ7EJ3HUSWkocJh65d0kumxinGAyyKjwNtl/0XC0PygBLoaN\nzcK6fFkJpYml5n8PoGHQBc1nReRoo68E8mCwR+vr2wZYa9PLXMF1OlsZ+F/Mkneq\nCNfmBokxgC9A0rWOFjhqpkRjh3NiylhDPl+NHBR/UrGJSWSwe+vw7dKE4pj1o4iD\np0BvvZ2FQMtIzCwNyQYMamzNUTYjOA==\n=LwIL\n-----END PGP SIGNATURE-----",
        "payload": "tree d8066df5b3a23adfd401ee56d5e67c0669551736\nparent 545bc5f81d60fa6ff7c5cc43a2e9eef82f911466\nauthor Vasil Dimov <vd@FreeBSD.org> 1606216507 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599820 +0100\n\nnet: check for invalid socket earlier in CConnman::AcceptConnection()\n\nThis check is related to an `accept()` failure. So do the check earlier,\ncloser to the `accept()` call.\n\nThis will allow to isolate the `accept()`-specific code at the beginning\nof `CConnman::AcceptConnection()` and reuse the code that follows it.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25605895afe84b1765dd9da9240af22f99489df7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25605895afe84b1765dd9da9240af22f99489df7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25605895afe84b1765dd9da9240af22f99489df7/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/545bc5f81d60fa6ff7c5cc43a2e9eef82f911466"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f90131f1c93d58067f12c7f5e7e41177bc63e432",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25605895afe84b1765dd9da9240af22f99489df7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25605895afe84b1765dd9da9240af22f99489df7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=25605895afe84b1765dd9da9240af22f99489df7",
        "patch": "@@ -1008,10 +1008,16 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - m_max_outbound;\n \n-    if (hSocket != INVALID_SOCKET) {\n-        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n-            LogPrintf(\"Warning: Unknown socket family\\n\");\n+    if (hSocket == INVALID_SOCKET) {\n+        const int nErr = WSAGetLastError();\n+        if (nErr != WSAEWOULDBLOCK) {\n+            LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n         }\n+        return;\n+    }\n+\n+    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\n+        LogPrintf(\"Warning: Unknown socket family\\n\");\n     }\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n@@ -1032,14 +1038,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    if (hSocket == INVALID_SOCKET)\n-    {\n-        int nErr = WSAGetLastError();\n-        if (nErr != WSAEWOULDBLOCK)\n-            LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n-        return;\n-    }\n-\n     if (!fNetworkActive) {\n         LogPrint(BCLog::NET, \"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n         CloseSocket(hSocket);"
      }
    ]
  },
  {
    "sha": "1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjc1YTY1M2RkM2IyNGJhMmU0MzgzYmY5NTFhNmU1YTNkNWNjYmNm",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-24T11:24:18Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:01Z"
      },
      "message": "net: get the bind address earlier in CConnman::AcceptConnection()\n\nCall `GetBindAddress()` earlier in `CConnman::AcceptConnection()`. That\nis specific to the TCP protocol and makes the code below it reusable for\nother protocols, if the caller provides `addr_bind`, retrieved by other\nmeans.",
      "tree": {
        "sha": "3970bfe5c18eda448846f3769930c34757d193fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3970bfe5c18eda448846f3769930c34757d193fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81o0ACgkQVN8G9ktV\ny79LAB/9GjPGZXf+F9Fhq5V3XR7Cvh1maCvGfdib8f+TW6Yau8aAuNm0xNZTREZV\nrAmjG8RqkaWYkS1JXC2r1vvNZ3czzKyFC56oXyHRnW6RIPF5zggiw4Lt9GSlyZg0\nivlup3OxsSICu7lv4CNsjKhoDc+ZxW82mg1VHYIIzTcjsanaKTjs5xGtE745oW+B\nsJ60rGEfxNiJS9n2KjdJcojYsn1D07dv5d4l2jOpoTmQUkIJEzUab/OB8LI1TeIW\nvRSZ3EGP47bEsSX1pbRX/rYuVVtZBeVaUdwhQqWKXVjwR/IsEGpmhkT3vnNHRfza\nJFL9W5sOis+HlsUW5/mt3dN+dmP7xnKLRl8cFq3mr2oVMmlct8281RLLiRTEZgPO\nLbq2eGL9uQTSYyGqD2W7GCjFjJo0/DRyiTKE5qi30+i9x9xthLL059G0niJpNke7\nukVIKzdSJNXTvMdwxXujLmsEJWU1567wJ+pguC+XZ1qFV1xlTXmjUcfcWbguzieI\nGMmv4hkARvFwSfhuvQq/rMPNplJkQXiI77YZs03RgSy3BfV9OZOZgHbxkSRpENfm\nM1nBvcfw3CP6l71QLxrTF26nHUxvwsIJL/WJhszZ92wtRBMCHWIWXEagW7wKMI8e\n7zlp6iufE+j6hVHFlGKJB5YgrU8f5LDu8+Gv7CPcIWZ6TnJsaP4uJdJJGChTOAQh\nbigHj7a5zluyfUecUCTbLn/As6TD2wv0whWHpRIP/Dlmio8SYZPO8GnLYCMi1fUe\n+HTHfI4CO/ppBXu5SWKAUXrwmpVl708W5T03kD6JOWMtHEJs1SIk6cTtwBOGQ6p0\nVy0evBhxZtZ8I5xDm8PTEDmJqTmvbDHNT3clfEr6wqh1reMNmOa0SoP4gIdKoqpR\n3/sYlmT6CSC2DNZQ1G8K9+bVDm7IAD+IHvGvXquJv7o2jnaKnGlruB/l/PjFaP9k\nvLVja9GKZX6nRBC8x2CvrTYoPj0gxMxH4X4Mu7LgY44o+DgYFgHWEU2YVQDDge6E\nddjPGLBE9ooaAKdWNwnRPKeK8olx0YWz5bDp8ah6oVBoptnKf/M/JCYPoMLXx3bQ\np6gpb3xL0dF+22FV8C1d8rHqfIniDkLSH3f5tDYVAZrTlkVA8gUpHjmibAIHQdkI\naroNxPCIA9AGKTS36Rk/ffqwOr86PYOjcyWG4HHXPJs6gKKhDpTVDZnyjxknUtEf\njaBuimBBuj/i6nvLYAslhU8+Y1peVyDXaDSfPyRmOj0LhJ4tMGp5OT5tb4j6PfPZ\n1MeAg3RaEUF2in2hMDKaC53heLo/UteWq+vQlScJ5k7i6Vz87dOP1ZPyp6jQegir\nh9mtW8JhPrtdE4LgzBcirg97Q77fcw==\n=sZvd\n-----END PGP SIGNATURE-----",
        "payload": "tree 3970bfe5c18eda448846f3769930c34757d193fb\nparent 25605895afe84b1765dd9da9240af22f99489df7\nauthor Vasil Dimov <vd@FreeBSD.org> 1606217058 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599821 +0100\n\nnet: get the bind address earlier in CConnman::AcceptConnection()\n\nCall `GetBindAddress()` earlier in `CConnman::AcceptConnection()`. That\nis specific to the TCP protocol and makes the code below it reusable for\nother protocols, if the caller provides `addr_bind`, retrieved by other\nmeans.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25605895afe84b1765dd9da9240af22f99489df7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25605895afe84b1765dd9da9240af22f99489df7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25605895afe84b1765dd9da9240af22f99489df7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a0072800e22571551d0d18be9c775a1638960271",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
        "patch": "@@ -1020,6 +1020,8 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         LogPrintf(\"Warning: Unknown socket family\\n\");\n     }\n \n+    const CAddress addr_bind = GetBindAddress(hSocket);\n+\n     NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n     AddWhitelistPermissionFlags(permissionFlags, addr);\n@@ -1085,7 +1087,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-    CAddress addr_bind = GetBindAddress(hSocket);\n \n     ServiceFlags nodeServices = nLocalServices;\n     if (NetPermissions::HasFlag(permissionFlags, PF_BLOOMFILTER)) {"
      }
    ]
  },
  {
    "sha": "7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzIyNGZkYWM0Njk5YTJjNDk1M2IzM2FiNDIzZjljZGRiZjk1Y2Y3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-24T11:40:03Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:01Z"
      },
      "message": "net: isolate the protocol-agnostic part of CConnman::AcceptConnection()\n\nIsolate the second half of `CConnman::AcceptConnection()` into a new\nseparate method, which could be reused if we accept incoming connections\nby other means than `accept()` (first half of\n`CConnman::AcceptConnection()`).",
      "tree": {
        "sha": "4902d88f187f5482d04e414ef927cfb6bdc6d4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4902d88f187f5482d04e414ef927cfb6bdc6d4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81o0ACgkQVN8G9ktV\ny7/43yAApxel50JFW2eCxMxJ4yu79H/WhepffloSYpUq2j899POhYfkviAclVFPn\nzKsN0nKOwUlMl6lyyNxlFc1CrqSOsfbo2+5O8Tr8zlCjh8k6SXZuZ0Ik5h28azTV\nAsoBCZ4km86XT3g7zWPJ/I1X7bqdHT60qChYrR/UjcoXuFY7OhExN0k1yBLvVFUE\nVS5L5BdPttI7o2S8CWKF+mUKdhvZZUMxuJNj1QyZJ2gIkrrt4irdUtb/5npvdMVT\nvGfnpJcF37bautkpW9Dzm+D49UCZ+Ie0XkZPbUb0Dvz4Cpk+H8Bf3zjNN3oFQzR4\nkY0yf4QX1QICdNEaXK9a750N10y66gACeTO9fVFNxbXfaVC+LGvWOxVdweBF9F9T\neB13IQnsReu7xuQP9OAK3UfqbBq+uIsWvpitCyrGfTJZ9vf978Ae45P5Wf58OqvA\nn8p3/hY5xxoUd8oCQSPuM969G18s/SIeiTeO24jniCnol0887gh19ScV/t6xObVH\no/Xys7rmCC62lXtAsE+yslG5ousLfqcxna/kp5U9PnrMqbtp+7OipWvO+Ro7IKJe\nywaRFli+V+sEjVu2PlL9OYySDlpYn1K0HnbEkyTXrTx1nDCW2lEKqilPwfc7mUa0\n5q7/nA9fEk1DvIkrKsgfiGriPqVAkmfsvKMGJe6po4Ch7QA8751zyKRZe/0D1wgj\n91VXX+ZnWU802Co4wMLZho2ahfwihoRNauD9193ScEIkZ9Q6nPNFtzNmSiLkqRo2\nCSf3BLlxr7/rycXOJ5qg+7El0D/Dlz33WinZaGyWhbVn7fpHlegqs7zNdgj0V88K\n2L09iy2IS+72WktyibzZYkazHUakkaY0AMej9LHyijnuo0el/boQ3MW2FtfeN+AT\nJ1Nlbu7T5LDBPe269V75TLeG5kgnTIXJVeOVOh6oZp/goNENWDk9Y7cycvztZCWS\nU6/OyBDFE25DUsOeNhNaenoqDlyqy5mucTGhu9KSSpufeiKr5ON/VeTkmAAwrxzw\nfmi/3soncWHkhb82qVCXrrPS3zvvU9LznbFg+43gMdm67C0J3XNsH96Gq2uLRGZ9\nWbPfrRmaZnWbr5WAE9g7msTB2/l6P4/iMrhkvaa7F6+6EDJen6dEf1dumrYtxQKN\nUp6+Bgu0X0WLco4GoNWr3Mzr6jW/w3EfVtVH3sVrvfsr9e3edenILIKX+QgfuGqt\ncpdPCz2Hs56WkEnhsxdVmDPUDU1eAUPnPUM+7L2BV5Gb5vgaNyjeKdaiCznH1+DX\nkICYAOUCT/Oyg3esRvnZlcMD8TuLdS79mllXKCYO1pd/7kmbADvK5HdRGo4ZXzM6\nK2yp/yjiH6ArR17nBeV4vbkQoDccBA==\n=W7Nn\n-----END PGP SIGNATURE-----",
        "payload": "tree 4902d88f187f5482d04e414ef927cfb6bdc6d4f4\nparent 1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf\nauthor Vasil Dimov <vd@FreeBSD.org> 1606218003 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599821 +0100\n\nnet: isolate the protocol-agnostic part of CConnman::AcceptConnection()\n\nIsolate the second half of `CConnman::AcceptConnection()` into a new\nseparate method, which could be reused if we accept incoming connections\nby other means than `accept()` (first half of\n`CConnman::AcceptConnection()`).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c224fdac4699a2c4953b33ab423f9cddbf95cf7/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f75a653dd3b24ba2e4383bf951a6e5a3d5ccbcf"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 26,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6109fc4e5a5dedf5ffa87cc86c99155569785102",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c224fdac4699a2c4953b33ab423f9cddbf95cf7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c224fdac4699a2c4953b33ab423f9cddbf95cf7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
        "patch": "@@ -1005,8 +1005,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     socklen_t len = sizeof(sockaddr);\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n-    int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - m_max_outbound;\n \n     if (hSocket == INVALID_SOCKET) {\n         const int nErr = WSAGetLastError();\n@@ -1024,6 +1022,18 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n+\n+    CreateNodeFromAcceptedSocket(hSocket, permissionFlags, addr_bind, addr);\n+}\n+\n+void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+                                            NetPermissionFlags permissionFlags,\n+                                            const CAddress& addr_bind,\n+                                            const CAddress& addr)\n+{\n+    int nInbound = 0;\n+    int nMaxInbound = nMaxConnections - m_max_outbound;\n+\n     AddWhitelistPermissionFlags(permissionFlags, addr);\n     if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT)) {\n         NetPermissions::ClearFlag(permissionFlags, PF_ISIMPLICIT);"
      },
      {
        "sha": "be38441008babf8810952b482340b5b8f0c7d242",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c224fdac4699a2c4953b33ab423f9cddbf95cf7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c224fdac4699a2c4953b33ab423f9cddbf95cf7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
        "patch": "@@ -1049,6 +1049,20 @@ class CConnman\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n+\n+    /**\n+     * Create a `CNode` object from a socket that has just been accepted and add the node to\n+     * the `vNodes` member.\n+     * @param[in] hSocket Connected socket to communicate with the peer.\n+     * @param[in] permissionFlags The peer's permissions.\n+     * @param[in] addr_bind The address and port at our side of the connection.\n+     * @param[in] addr The address and port at the peer's side of the connection.\n+     */\n+    void CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+                                      NetPermissionFlags permissionFlags,\n+                                      const CAddress& addr_bind,\n+                                      const CAddress& addr);\n+\n     void DisconnectNodes();\n     void NotifyNumConnectionsChanged();\n     /** Return true if the peer is inactive and should be disconnected. */"
      }
    ]
  },
  {
    "sha": "f6c267db3be2d7077fd2bdbd34860eba838dea99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmMyNjdkYjNiZTJkNzA3N2ZkMmJkYmQzNDg2MGViYTgzOGRlYTk5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-24T14:36:27Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T11:57:01Z"
      },
      "message": "net: avoid unnecessary GetBindAddress() call\n\nOur local (bind) address is already saved in `CNode::addrBind` and there\nis no need to re-retrieve it again with `GetBindAddress()`.\n\nAlso, for I2P connections `CNode::addrBind` would contain our I2P\naddress, but `GetBindAddress()` would return something like\n`127.0.0.1:RANDOM_PORT`.",
      "tree": {
        "sha": "dd2a7126aea151c39442993404002e84a02b75f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd2a7126aea151c39442993404002e84a02b75f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6c267db3be2d7077fd2bdbd34860eba838dea99",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA81o0ACgkQVN8G9ktV\ny7/+eyAAgq0TZ/ZoDrp/BrrrnkXR44PAl14UGsn0aiAbdw9jm96XlrA7v6T6IAgO\nRhaCSog8+G1vv1j5o/k/aQsGzLUjsHDCqX9Aj+MLescA6h4FRScbx1p/CZjcaKG0\nR/JdKnMM3mem/A+kwf35Gx3VAxcqmMERvCLh/OMk3xSsP7f/gBEv47oqGxsgdY0N\nWVMlTLgMKTyiKFWxQ+IvM0jY4mUG9CuRF3LaVWve4ExLTcfiv4Bc4yDsJLd8iYRs\nInNQdJ0zecFZX1MtQl9cY68Xqr7xabwP3XlaKjxPxNheVpQI8dzNkbWMoWshtJGh\nfWkyVQY1l37u5I1bzLVATRanEZnCqkpTeB69mBhaREAmo77Yp290OfrSwBGP/XPF\n/8pGMvrQ+YSS9KnS9tFDXOEmiSxjssK5LAm4XcIRPvVNrHJgMfXRqkkwgY9XP913\nLgqADh8pFegHCrA2BLTuX1f8PRYx3ZKVDcazFahwqxuJGMGsmL8lknE+DSt1mL11\naFM36+e9CQyW+3b4f1ZDV7hGeAsJ+G50a3KsrpKgz5gh/J+v+o44KgTZ6Ear552+\nQBr7SxkkirXaqV2yPqwT6pv8uZIb6vVrkfwsGapWRSrmXjKLNz6oB9GAL5KhVxw2\n7K6oheul+UwFAf654Y5Mk+uF+chNvzTpS9KpMVRPMJ15809gRtZuXwdDWNFJlmHQ\nHNVgHjuwldtZZQAdy8hLwqTUQQ3ydRZCSpwprv3js+M3HE0d85eQTpeFX/NtuZ6P\n3V3i/H5B7X3x/G8W475DztxYo9Ys2a3XvomLtJ+NXANoMBP/1kQnfgYTnSHMRfEf\nVgu+aC9YkGA+Xfy7/oa7Jtq1QP4fVJdfvwgIiOtr7pk3m9W3fbSuVSTRQEke2V3Y\nIDSsh6IJAbIyWwWzrrigPBZlZVDHxNLetxcdybEkoafNf+cSs3qe6J3/dR4ji/ag\nonTOmyu54iYUSaCzlFtpIlI6dAFMYcQDUmjku6fjkwkfKCZV5U5NC+QtwT6W0nvp\ndOIJ2AjTSODfdGuRPSMNZzGzRRR7yiw6GRPuMuUqTOt4ovjqoNQkj4UgJnwVZRJT\nygg0j43h67W2qA1Rlv5GDvZnHMG6wpsULbLDbo75tRzbrem0OKB3gdDggrfyO4BY\nB1UQPECmxJPlI9t0OKt1AR30xAq3BykavxtgL9ApHArKLUroEBOBPH3x3AOeDMc0\nyrsZCWTJNnZ9WrHofu7Z8u6i4hI19SRUWn4Pcguw5RhsSDLe7eetNERhQxPqFIMv\n/IeIHH7UsMR+P7xPxNu2q2jFjR8m0XHwT6p5lKGYRNBTFNof3rZ0SZ5Sj1CV7R6j\nLj5Jo9dHCKhegO/nSQpiCvfsBWDDbw==\n=PmCd\n-----END PGP SIGNATURE-----",
        "payload": "tree dd2a7126aea151c39442993404002e84a02b75f8\nparent 7c224fdac4699a2c4953b33ab423f9cddbf95cf7\nauthor Vasil Dimov <vd@FreeBSD.org> 1606228587 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614599821 +0100\n\nnet: avoid unnecessary GetBindAddress() call\n\nOur local (bind) address is already saved in `CNode::addrBind` and there\nis no need to re-retrieve it again with `GetBindAddress()`.\n\nAlso, for I2P connections `CNode::addrBind` would contain our I2P\naddress, but `GetBindAddress()` would return something like\n`127.0.0.1:RANDOM_PORT`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6c267db3be2d7077fd2bdbd34860eba838dea99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6c267db3be2d7077fd2bdbd34860eba838dea99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6c267db3be2d7077fd2bdbd34860eba838dea99/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c224fdac4699a2c4953b33ab423f9cddbf95cf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c224fdac4699a2c4953b33ab423f9cddbf95cf7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d03e3cac37f7e1d493fec404e270810e476cb4a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6c267db3be2d7077fd2bdbd34860eba838dea99/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6c267db3be2d7077fd2bdbd34860eba838dea99/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f6c267db3be2d7077fd2bdbd34860eba838dea99",
        "patch": "@@ -2606,9 +2606,7 @@ std::vector<CAddress> CConnman::GetAddresses(size_t max_addresses, size_t max_pc\n \n std::vector<CAddress> CConnman::GetAddresses(CNode& requestor, size_t max_addresses, size_t max_pct)\n {\n-    SOCKET socket;\n-    WITH_LOCK(requestor.cs_hSocket, socket = requestor.hSocket);\n-    auto local_socket_bytes = GetBindAddress(socket).GetAddrBytes();\n+    auto local_socket_bytes = requestor.addrBind.GetAddrBytes();\n     uint64_t cache_id = GetDeterministicRandomizer(RANDOMIZER_ID_ADDRCACHE)\n         .Write(requestor.addr.GetNetwork())\n         .Write(local_socket_bytes.data(), local_socket_bytes.size())"
      }
    ]
  },
  {
    "sha": "cff65c4a270887ec171293409ab84f5d0d0be7fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmY2NWM0YTI3MDg4N2VjMTcxMjkzNDA5YWI4NGY1ZDBkMGJlN2Zj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-21T09:35:19Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T12:22:11Z"
      },
      "message": "net: extend CNetAddr::SetSpecial() to support I2P\n\nRecognize also I2P addresses in the form `base32hashofpublickey.b32.i2p`\nfrom `CNetAddr::SetSpecial()`.\n\nThis makes `Lookup()` support them, which in turn makes it possible to\nmanually connect to an I2P node by using\n`-proxy=i2p_socks5_proxy:port -addnode=i2p_address.b32.i2p:port`\n\nCo-authored-by: Lucas Ontivero <lucasontivero@gmail.com>",
      "tree": {
        "sha": "3b0f9abf229eb94d5fd7e17c004e779d77ba756e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b0f9abf229eb94d5fd7e17c004e779d77ba756e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cff65c4a270887ec171293409ab84f5d0d0be7fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA83HQACgkQVN8G9ktV\ny79YwR/+Nes+fx52ouvgJhyiUy7aXIMhHWfkpsbJh8SC9Qd7rj0kXKFN/lsaYydZ\nxm3xHqT5n6CnEYHPY24FDPxYV0x9eFi5Z0HSBzD/VIXTU8OmJtiiRQ/LQKjc12fA\n7ALiPvdvPK5tMAG6Bj7VTOMrSjsccbJfd/IXp1KXTVycKDDo9nLCU28dA31+9r6u\niJT4+CxoqNVFh+cZ9D2gOEBnryiUhXbtFA6TlAXeyi7ZCwnw/h8qKOvQCfdMXti3\n+CAB7QNA7s0SOKAFQBNrtj0ekbsmzQrtffn740M+46kKTMJ2A89/KwZjMOnCwul7\nat56TGmwtEVTtCUYs2dx1ROyMFza1rtjgPeKf0DrgmiD2Ms8HaEvkFvCEViwmAjf\nh6N/GipsNdk0C12SWa6tsU1G5uo37MbcnPraHr/AgqpcyYgNqAN2JDdAXpA7oXtr\nBGi08ir/bZcKQ7iZcL5CXz/cpy0o7N8iQw3MSQI76MN9G9e1+qFATRnBRK3lAs/S\n2QZ1BwSVjCxPwJPBdlbF7yXkjGkxyxL8RnEu0AsN0N7ve1z5Zi6bHPDkbvOMwknK\noHduKLvHGgddYu+obcuB2NqHQZ+efDQ4mYQe2xdfnBlP+Dzre5M063FLYJuEK5qq\n8LheN0BHSDfCaLQYKn5KbQEHtQDD0UaCSDECw24OZ1+ufjZ7f5YEUEUahrlSeXqA\nZ2uIueHpdXvQSbiK/iwErSqggz4jaMsMGpG4RiiutaQRPjj9kWuzI0aogldlYIAz\nm4T8aCiiaLz2hOoWikg07NaMLEseCDTd2TVAeMmZOv3IaluIbi2vXuu5EEHfsy7R\ngdqLwaLShDEbZHdOjP6VKkvcFnYG3FchgUW0IzA1r8ftOGC9GYkJnyx7GiFa1eBR\nW0myoAcPhkhmrk0GHM/kA9830Z8VkKrEmUnnegahxXSYaJzB6R4J45yhLjvsOF9g\nl2T7ThOS4TAqaUjYd+TiY94Zg/kh/k0jtvr2bynToHmRm4q9RQdlgWkFc1tD0RbH\n25PTERSxXQulka0XwQybWKl4NKfcrh/a6fOL4l1HeftSQ4xl0EIOoHRC5Stt6Bww\njwKnqankH0r0nJc/HVbBWPPFsLi9NGJRrY0fzZnL+yow1kdfYlo/3ZJQlwoGas4L\n7oI1/qaijWMGZIpYqeeLrY26rvOKz8R4MzpXWeb6zKZN3pahpr+UOAvCGfh2f8tL\ngG3JgtJ8Ypo8lDxPBpuOTzi22hn/b4KBSFMf2oRbwLQV4OFQcLBH1NQrerA/F1wb\nRdUj0zy+ZYgQJS3Qry7KSfUenK71631PRjAFLd2DnWjRuaDYTDrTMhodHPG3FyC9\nLzSjAoAIo9YmES1aiSdYZkP6GX0Dfw==\n=5Yev\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b0f9abf229eb94d5fd7e17c004e779d77ba756e\nparent f6c267db3be2d7077fd2bdbd34860eba838dea99\nauthor Vasil Dimov <vd@FreeBSD.org> 1603272919 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614601331 +0100\n\nnet: extend CNetAddr::SetSpecial() to support I2P\n\nRecognize also I2P addresses in the form `base32hashofpublickey.b32.i2p`\nfrom `CNetAddr::SetSpecial()`.\n\nThis makes `Lookup()` support them, which in turn makes it possible to\nmanually connect to an I2P node by using\n`-proxy=i2p_socks5_proxy:port -addnode=i2p_address.b32.i2p:port`\n\nCo-authored-by: Lucas Ontivero <lucasontivero@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff65c4a270887ec171293409ab84f5d0d0be7fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cff65c4a270887ec171293409ab84f5d0d0be7fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff65c4a270887ec171293409ab84f5d0d0be7fc/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6c267db3be2d7077fd2bdbd34860eba838dea99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6c267db3be2d7077fd2bdbd34860eba838dea99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6c267db3be2d7077fd2bdbd34860eba838dea99"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 108,
      "deletions": 12
    },
    "files": [
      {
        "sha": "80313b88cea5f56e5fdcc1870995a5ab5f34bf86",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 11,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=cff65c4a270887ec171293409ab84f5d0d0be7fc",
        "patch": "@@ -221,25 +221,34 @@ static void Checksum(Span<const uint8_t> addr_pubkey, uint8_t (&checksum)[CHECKS\n \n }; // namespace torv3\n \n-/**\n- * Parse a TOR address and set this object to it.\n- *\n- * @returns Whether or not the operation was successful.\n- *\n- * @see CNetAddr::IsTor()\n- */\n-bool CNetAddr::SetSpecial(const std::string& str)\n+bool CNetAddr::SetSpecial(const std::string& addr)\n+{\n+    if (!ValidAsCString(addr)) {\n+        return false;\n+    }\n+\n+    if (SetTor(addr)) {\n+        return true;\n+    }\n+\n+    if (SetI2P(addr)) {\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+bool CNetAddr::SetTor(const std::string& addr)\n {\n     static const char* suffix{\".onion\"};\n     static constexpr size_t suffix_len{6};\n \n-    if (!ValidAsCString(str) || str.size() <= suffix_len ||\n-        str.substr(str.size() - suffix_len) != suffix) {\n+    if (addr.size() <= suffix_len || addr.substr(addr.size() - suffix_len) != suffix) {\n         return false;\n     }\n \n     bool invalid;\n-    const auto& input = DecodeBase32(str.substr(0, str.size() - suffix_len).c_str(), &invalid);\n+    const auto& input = DecodeBase32(addr.substr(0, addr.size() - suffix_len).c_str(), &invalid);\n \n     if (invalid) {\n         return false;\n@@ -275,6 +284,34 @@ bool CNetAddr::SetSpecial(const std::string& str)\n     return false;\n }\n \n+bool CNetAddr::SetI2P(const std::string& addr)\n+{\n+    // I2P addresses that we support consist of 52 base32 characters + \".b32.i2p\".\n+    static constexpr size_t b32_len{52};\n+    static const char* suffix{\".b32.i2p\"};\n+    static constexpr size_t suffix_len{8};\n+\n+    if (addr.size() != b32_len + suffix_len || ToLower(addr.substr(b32_len)) != suffix) {\n+        return false;\n+    }\n+\n+    // Remove the \".b32.i2p\" suffix and pad to a multiple of 8 chars, so DecodeBase32()\n+    // can decode it.\n+    const std::string b32_padded = addr.substr(0, b32_len) + \"====\";\n+\n+    bool invalid;\n+    const auto& address_bytes = DecodeBase32(b32_padded.c_str(), &invalid);\n+\n+    if (invalid || address_bytes.size() != ADDR_I2P_SIZE) {\n+        return false;\n+    }\n+\n+    m_net = NET_I2P;\n+    m_addr.assign(address_bytes.begin(), address_bytes.end());\n+\n+    return true;\n+}\n+\n CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n {\n     m_net = NET_IPV4;"
      },
      {
        "sha": "897ce46cdaf1569456f14449378dd2565d0b2dae",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=cff65c4a270887ec171293409ab84f5d0d0be7fc",
        "patch": "@@ -151,7 +151,16 @@ class CNetAddr\n \n         bool SetInternal(const std::string& name);\n \n-        bool SetSpecial(const std::string &strName); // for Tor addresses\n+        /**\n+         * Parse a Tor or I2P address and set this object to it.\n+         * @param[in] addr Address to parse, for example\n+         * pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion or\n+         * ukeu3k5oycgaauneqgtnvselmt4yemvoilkln7jpvamvfx7dnkdq.b32.i2p.\n+         * @returns Whether the operation was successful.\n+         * @see CNetAddr::IsTor(), CNetAddr::IsI2P()\n+         */\n+        bool SetSpecial(const std::string& addr);\n+\n         bool IsBindAny() const; // INADDR_ANY equivalent\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n@@ -248,6 +257,25 @@ class CNetAddr\n         friend class CSubNet;\n \n     private:\n+        /**\n+         * Parse a Tor address and set this object to it.\n+         * @param[in] addr Address to parse, must be a valid C string, for example\n+         * pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion or\n+         * 6hzph5hv6337r6p2.onion.\n+         * @returns Whether the operation was successful.\n+         * @see CNetAddr::IsTor()\n+         */\n+        bool SetTor(const std::string& addr);\n+\n+        /**\n+         * Parse an I2P address and set this object to it.\n+         * @param[in] addr Address to parse, must be a valid C string, for example\n+         * ukeu3k5oycgaauneqgtnvselmt4yemvoilkln7jpvamvfx7dnkdq.b32.i2p.\n+         * @returns Whether the operation was successful.\n+         * @see CNetAddr::IsI2P()\n+         */\n+        bool SetI2P(const std::string& addr);\n+\n         /**\n          * BIP155 network ids recognized by this software.\n          */"
      },
      {
        "sha": "f039f76f82a9623b7eb8a06c6a817ba50e488ead",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cff65c4a270887ec171293409ab84f5d0d0be7fc/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=cff65c4a270887ec171293409ab84f5d0d0be7fc",
        "patch": "@@ -322,6 +322,7 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n     BOOST_REQUIRE(addr.IsValid());\n     BOOST_REQUIRE(addr.IsTor());\n \n+    BOOST_CHECK(!addr.IsI2P());\n     BOOST_CHECK(!addr.IsBindAny());\n     BOOST_CHECK(addr.IsAddrV1Compatible());\n     BOOST_CHECK_EQUAL(addr.ToString(), \"6hzph5hv6337r6p2.onion\");\n@@ -332,6 +333,7 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n     BOOST_REQUIRE(addr.IsValid());\n     BOOST_REQUIRE(addr.IsTor());\n \n+    BOOST_CHECK(!addr.IsI2P());\n     BOOST_CHECK(!addr.IsBindAny());\n     BOOST_CHECK(!addr.IsAddrV1Compatible());\n     BOOST_CHECK_EQUAL(addr.ToString(), torv3_addr);\n@@ -352,6 +354,35 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n     // TOR, invalid base32\n     BOOST_CHECK(!addr.SetSpecial(std::string{\"mf*g zak.onion\"}));\n \n+    // I2P\n+    const char* i2p_addr = \"UDHDrtrcetjm5sxzskjyr5ztpeszydbh4dpl3pl4utgqqw2v4jna.b32.I2P\";\n+    BOOST_REQUIRE(addr.SetSpecial(i2p_addr));\n+    BOOST_REQUIRE(addr.IsValid());\n+    BOOST_REQUIRE(addr.IsI2P());\n+\n+    BOOST_CHECK(!addr.IsTor());\n+    BOOST_CHECK(!addr.IsBindAny());\n+    BOOST_CHECK(!addr.IsAddrV1Compatible());\n+    BOOST_CHECK_EQUAL(addr.ToString(), ToLower(i2p_addr));\n+\n+    // I2P, correct length, but decodes to less than the expected number of bytes.\n+    BOOST_CHECK(!addr.SetSpecial(\"udhdrtrcetjm5sxzskjyr5ztpeszydbh4dpl3pl4utgqqw2v4jn=.b32.i2p\"));\n+\n+    // I2P, extra unnecessary padding\n+    BOOST_CHECK(!addr.SetSpecial(\"udhdrtrcetjm5sxzskjyr5ztpeszydbh4dpl3pl4utgqqw2v4jna=.b32.i2p\"));\n+\n+    // I2P, malicious\n+    BOOST_CHECK(!addr.SetSpecial(\"udhdrtrcetjm5sxzskjyr5ztpeszydbh4dpl3pl4utgqqw2v\\0wtf.b32.i2p\"s));\n+\n+    // I2P, valid but unsupported (56 Base32 characters)\n+    // See \"Encrypted LS with Base 32 Addresses\" in\n+    // https://geti2p.net/spec/encryptedleaseset.txt\n+    BOOST_CHECK(\n+        !addr.SetSpecial(\"pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscsad.b32.i2p\"));\n+\n+    // I2P, invalid base32\n+    BOOST_CHECK(!addr.SetSpecial(std::string{\"tp*szydbh4dp.b32.i2p\"}));\n+\n     // Internal\n     addr.SetInternal(\"esffpp\");\n     BOOST_REQUIRE(!addr.IsValid()); // \"internal\" is considered invalid"
      }
    ]
  },
  {
    "sha": "34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGJjZmFiNTYyYmFjOTg4N2NhOWMzODMxY2Y0ZmQwZWU3Zjk4MTQ5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-12-04T14:10:09Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T12:22:17Z"
      },
      "message": "net: move the constant maxWait out of InterruptibleRecv()\n\nMove `maxWait` out of `InterruptibleRecv()` and rename it to\n`MAX_WAIT_FOR_IO` so that it can be reused by other code.",
      "tree": {
        "sha": "228081518170d88fff2559c53e5fce172bfdf432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/228081518170d88fff2559c53e5fce172bfdf432"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA83HkACgkQVN8G9ktV\ny79n/SAAoZcZgkbJ7AK91crbBkjDK22317tqq0/OfSzdDW0m1LxgRDXxgJQLqdeD\noGXZVJP8aBjPHBsD+klJIWbnVts58zykdkv46qi4M3lh84ds3G5Xhs5nR3aZXoY3\n7xUwa4sGsgveuuFyrrAjyqGrecbYPYpDEbGmj0x5SnFrqJeJ0KmHc2D6CkBZ3caH\nNYKfrI3zoedU+MtxMU5YHrdjPqFrzFhOlLQXuLp07ArEuJXqJWymllWl9PLDRHzC\nZVHpPUdAq4XNXJWu0kIqVFZkPjyzs21Q9BNk/sCiF2FQVCv3AsqPWtMWAMqeuFdS\nMU4lXT8ImTMHoYlW1P7QYnFbLA2QpvvSymeZuEFwf3sGeO1x4rWJeJlhkzouodVI\naXgfsfg9QFY6Uh7I+DlNzoI7rgPkjCocHRryKL1S44yRgcv5ny4pM3c1szkHSORB\nRCWjs4CXdAXWivb+yStAJJwFMs87Hp/4YvAtn0F7lrik3pnyxd9lmShNkb3bCFtV\nC83oc3LOc2UoSDaaKnZGoY6Lh1qHwJGWsPk6ZTFXrBHIcHqF47isJOdKaJIgTdgh\nGq4Cj1p2dN3zUUXn1LcgVbRiDy1wJJSAbOp9qQ/NQ3oCn2pQ5keRbBjs/wSepyFJ\n/HQdqFsP/WhdRAfRHXSbUzBLlatVZyJIVf6rZnadKozeN4WG8I+0VE8hKSSWciJt\nc66JJCf7HUZedjfpWSYZUqPluTUpCeuNn/QVMLGpWl5aVP3PWVsu8mQM1j6sj5Qr\nPKIFP1rwNNABSs5PGObD0vPiuXXV3oOdtfwSm8jb3oCfv3GufYpNz+1Qpk77x7JL\ndUO7kU039Jx7YzlM+EBcDV6ELTHXT4MILKI7i/IC0cipXknWEXDU+lHlPxXoPS07\nSLGA8HdXrcXQNCaEs6SGPcpIRBaWfodx5ju/ucFFT4WX6I+liQSh240/InzkcGIG\nAbSLA8nlY4COleAZb06742OuECeJPY2mO3SgICgl0SwlEybe77I7ODf6NHu/0J33\nV/O3CLT74xibpFLatuMNld3XPSYJ9bWI25Dl/BDGEAKmZyuWc1a2XjV1BfIoGHtu\nzrSRXcl17KB9nquFwvZfD4pG2hLSMfhuO73PsxlppfdgCwjw4Yn3Z4XCOqQ5oO1q\naEhl0oHxHif4mYMKVNrEQ6rQdfBIwT3NaSaRly+LFOThYeXtojOXyp5yZ/dbmYHo\n+b6mQu3oo/wmFqInSN292nxvYUTBUwqtXfwSpempDiFXUWMYHVao6T6ftt1kHv7r\ncwM24th5THJWYyGQtIe3WhXCOwD40UxKtY18z/gv887DCw2Eu7/+JndqIk6xUnCF\nz257awZ0ERQQREykskk1XyTHUStwWA==\n=mDpn\n-----END PGP SIGNATURE-----",
        "payload": "tree 228081518170d88fff2559c53e5fce172bfdf432\nparent cff65c4a270887ec171293409ab84f5d0d0be7fc\nauthor Vasil Dimov <vd@FreeBSD.org> 1607091009 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614601337 +0100\n\nnet: move the constant maxWait out of InterruptibleRecv()\n\nMove `maxWait` out of `InterruptibleRecv()` and rename it to\n`MAX_WAIT_FOR_IO` so that it can be reused by other code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34bcfab562bac9887ca9c3831cf4fd0ee7f98149/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cff65c4a270887ec171293409ab84f5d0d0be7fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff65c4a270887ec171293409ab84f5d0d0be7fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cff65c4a270887ec171293409ab84f5d0d0be7fc"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5a714f00260f6d41db57e455341bb79797449f30",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34bcfab562bac9887ca9c3831cf4fd0ee7f98149/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34bcfab562bac9887ca9c3831cf4fd0ee7f98149/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/time.h>\n \n #include <atomic>\n+#include <chrono>\n #include <cstdint>\n #include <functional>\n #include <limits>\n@@ -360,9 +361,6 @@ static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, c\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n-    // Maximum time to wait for I/O readiness. It will take up until this time\n-    // (in millis) to break off in case of an interruption.\n-    const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n         ssize_t ret = sock.Recv(data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n@@ -373,10 +371,11 @@ static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, c\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n-                // Only wait at most maxWait milliseconds at a time, unless\n+                // Only wait at most MAX_WAIT_FOR_IO at a time, unless\n                 // we're approaching the end of the specified total timeout\n-                int timeout_ms = std::min(endTime - curTime, maxWait);\n-                if (!sock.Wait(std::chrono::milliseconds{timeout_ms}, Sock::RECV)) {\n+                const auto remaining = std::chrono::milliseconds{endTime - curTime};\n+                const auto timeout = std::min(remaining, std::chrono::milliseconds{MAX_WAIT_FOR_IO});\n+                if (!sock.Wait(timeout, Sock::RECV)) {\n                     return IntrRecvError::NetworkError;\n                 }\n             } else {"
      },
      {
        "sha": "23c3c35dad525172351107217a1f647a026a841b",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34bcfab562bac9887ca9c3831cf4fd0ee7f98149/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34bcfab562bac9887ca9c3831cf4fd0ee7f98149/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
        "patch": "@@ -6,10 +6,17 @@\n #define BITCOIN_UTIL_SOCK_H\n \n #include <compat.h>\n+#include <util/time.h>\n \n #include <chrono>\n #include <string>\n \n+/**\n+ * Maximum time to wait for I/O readiness.\n+ * It will take up until this time to break off in case of an interruption.\n+ */\n+static constexpr auto MAX_WAIT_FOR_IO = 1s;\n+\n /**\n  * RAII helper class that manages a socket. Mimics `std::unique_ptr`, but instead of a pointer it\n  * contains a socket and closes it automatically when it goes out of scope."
      }
    ]
  },
  {
    "sha": "78fdfbea666201b25919dd67454eb04d6a34326f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGZkZmJlYTY2NjIwMWIyNTkxOWRkNjc0NTRlYjA0ZDZhMzQzMjZm",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-02-12T14:56:15Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T12:22:17Z"
      },
      "message": "net: dedup MSG_NOSIGNAL and MSG_DONTWAIT definitions\n\nDeduplicate `MSG_NOSIGNAL` and `MSG_DONTWAIT` definitions from `net.cpp`\nand `netbase.cpp` to `compat.h` where they can also be reused by other\ncode.",
      "tree": {
        "sha": "95fd390aa3d5666b17e7895c8a7f0b5d0bc138d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95fd390aa3d5666b17e7895c8a7f0b5d0bc138d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78fdfbea666201b25919dd67454eb04d6a34326f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA83HkACgkQVN8G9ktV\ny78PBx/7B3veT7RDB9CUxxUCRbW88cgb1dYjXtNigvwHxHqjAtURXODzoEjfjMLe\naL2OoKFcf63GlgC2qSkzezecFMkdjb2J6N/brv3XpQXBV3JErG+UT9P7aFE/FyM7\nAkfWv5pq4L+Tsy2NHNan+UqYKNwNnO2Zehn+jyvN5eogJLOb93KyWq1X/w4k6wbE\nvt2cHtje2xcg5+no+S4dd1o81/FNWkVJIFZaFrxxFCfLQ0gMWWg37wyV8F13bQ5t\nrvIQX4ws+MZCH0f3UWa9UrMtSa/VGxLUenlb5FWFWgK6/yyQoT7pFjEDH1DhRyNy\nEAfhXSn7NuFbusBnOqAZYNArz50xUpp3e/R1AMCsZFmUDTGerHfqTmLyo6mwSZxS\nKe7GTLMIa7TgWhJ+u7DjZWB8nKz34SPXi68/oul608MDlZ3TRBH5JDldXKQuRZgc\nERBUxVp3AD9Djum3wssGvPGLT/mw9MxufVP+ZbIarTDpDXkoRi0rOYwT4lShfeIg\neX1hMUHDJPP3mjLAW368IeGSiEWRujQnwbU/frGMdNcp6QG/cmcUrqgYt+erL4Ya\nFI8NmcIZvhbOOlMU6G916iFwx2jjxhH5QCM2Frl4ZD4Wo52L8xUl+bcwXy7hBBb2\n6WJ5KzFY7L7y4Rw704o/UwQAIUAv0+H8U/rm86SpU13CokMW/ekUOQdcPQWSJny/\nlWYIJyLp1Ku8fJTCYugLGYMQmqwqs4fMpbHByFJBb40siJaRhlzHuFyXTv3pI1zX\nKZezbNNpWKoZ4Q37RO8HlelUtlZLsqFqeoLz7iXuHTfJaLhNtZqJCYUPo6NT2HLu\nw3YLp8jugAq7AEq2M3uX+63aJK4yxRuY3PCSvlfymGdauNARa1kQ8nc2B6HiOwqj\n3no0yKunGcr/b/7qQ6OH/Flr/ceFTBDZs4S9vm8fwaOdETXUO7awHmmPqPOj3lKi\nmUDwyjB4edBSNqLPFly2bWcp4d8SVwMPnh9U3TWMe/ypkxQ/nt4kwFN9VZ63v9m4\nJWJ1wM7CgvvYZSvsc9rvUoP1sD4776QR0yfCQ2gtjyDwZHok0z2Gi9mOYdl6sYrV\n42c3ciaP/FiF/T7AJfbKBPdQXZi8YRh/5KN/11ja1OLs5HDV1Eo+vWKyUbEEd1DK\nwZAqPXnUrUMHxLUWtdRrTmJIXIwGTKAcjYCQZ4H7KfUMZ7xZnzfddpjqAnJOEcZ7\nS/sQMu6wLyjSe3ChxwhLPenCFmrghSc/02+r+zOhSJhdzJc6qHZGnrSJSLpS0uDF\nuDJMg2+IikNFykZYckkdPILz7hJbL6bYrd1Fpb+VYLmDtCvT+ovUqkCU6HGA0gFp\nwoC+c/1o0Trfo+NBQ59cc++wRu2xLw==\n=2ZLN\n-----END PGP SIGNATURE-----",
        "payload": "tree 95fd390aa3d5666b17e7895c8a7f0b5d0bc138d8\nparent 34bcfab562bac9887ca9c3831cf4fd0ee7f98149\nauthor Vasil Dimov <vd@FreeBSD.org> 1613141775 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614601337 +0100\n\nnet: dedup MSG_NOSIGNAL and MSG_DONTWAIT definitions\n\nDeduplicate `MSG_NOSIGNAL` and `MSG_DONTWAIT` definitions from `net.cpp`\nand `netbase.cpp` to `compat.h` where they can also be reused by other\ncode.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78fdfbea666201b25919dd67454eb04d6a34326f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78fdfbea666201b25919dd67454eb04d6a34326f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78fdfbea666201b25919dd67454eb04d6a34326f/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34bcfab562bac9887ca9c3831cf4fd0ee7f98149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34bcfab562bac9887ca9c3831cf4fd0ee7f98149"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 12,
      "deletions": 14
    },
    "files": [
      {
        "sha": "640be235462f0ab6a6926b7793bbd905dff585a3",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78fdfbea666201b25919dd67454eb04d6a34326f/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78fdfbea666201b25919dd67454eb04d6a34326f/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=78fdfbea666201b25919dd67454eb04d6a34326f",
        "patch": "@@ -96,4 +96,14 @@ bool static inline IsSelectableSocket(const SOCKET& s) {\n #endif\n }\n \n+// MSG_NOSIGNAL is not available on some platforms, if it doesn't exist define it as 0\n+#if !defined(MSG_NOSIGNAL)\n+#define MSG_NOSIGNAL 0\n+#endif\n+\n+// MSG_DONTWAIT is not available on some platforms, if it doesn't exist define it as 0\n+#if !defined(MSG_DONTWAIT)\n+#define MSG_DONTWAIT 0\n+#endif\n+\n #endif // BITCOIN_COMPAT_H"
      },
      {
        "sha": "89f7ef0f0647b179d9a9bf3268dd421512dc9205",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78fdfbea666201b25919dd67454eb04d6a34326f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78fdfbea666201b25919dd67454eb04d6a34326f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=78fdfbea666201b25919dd67454eb04d6a34326f",
        "patch": "@@ -11,6 +11,7 @@\n \n #include <banman.h>\n #include <clientversion.h>\n+#include <compat.h>\n #include <consensus/consensus.h>\n #include <crypto/sha256.h>\n #include <net_permissions.h>\n@@ -72,16 +73,6 @@ static constexpr std::chrono::seconds MAX_UPLOAD_TIMEFRAME{60 * 60 * 24};\n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n \n-// MSG_NOSIGNAL is not available on some platforms, if it doesn't exist define it as 0\n-#if !defined(MSG_NOSIGNAL)\n-#define MSG_NOSIGNAL 0\n-#endif\n-\n-// MSG_DONTWAIT is not available on some platforms, if it doesn't exist define it as 0\n-#if !defined(MSG_DONTWAIT)\n-#define MSG_DONTWAIT 0\n-#endif\n-\n /** Used to pass flags to the Bind() function */\n enum BindFlags {\n     BF_NONE         = 0,"
      },
      {
        "sha": "7ccd24a778909e516e89648727f54b7d1bdf3f08",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78fdfbea666201b25919dd67454eb04d6a34326f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78fdfbea666201b25919dd67454eb04d6a34326f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=78fdfbea666201b25919dd67454eb04d6a34326f",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <netbase.h>\n \n+#include <compat.h>\n #include <sync.h>\n #include <tinyformat.h>\n #include <util/sock.h>\n@@ -30,10 +31,6 @@\n #include <poll.h>\n #endif\n \n-#if !defined(MSG_NOSIGNAL)\n-#define MSG_NOSIGNAL 0\n-#endif\n-\n // Settings\n static Mutex g_proxyinfo_mutex;\n static proxyType proxyInfo[NET_MAX] GUARDED_BY(g_proxyinfo_mutex);"
      }
    ]
  },
  {
    "sha": "ea1845315a109eb105113cb5fbb6f869e1cf010c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTE4NDUzMTVhMTA5ZWIxMDUxMTNjYjVmYmI2Zjg2OWUxY2YwMTBj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-02-12T13:05:53Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T12:22:18Z"
      },
      "message": "net: extend Sock::Wait() to report a timeout\n\nPreviously `Sock::Wait()` would not have signaled to the caller whether\na timeout or one of the requested events occurred since that was not\nneeded by any of the callers.\n\nSuch functionality will be needed in the I2P implementation, thus extend\nthe `Sock::Wait()` method.",
      "tree": {
        "sha": "9399f7d888fe98a400aea3f5350214364c55ace7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9399f7d888fe98a400aea3f5350214364c55ace7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea1845315a109eb105113cb5fbb6f869e1cf010c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA83HoACgkQVN8G9ktV\ny7+uiSAAjT0kD8YwNz4Fm3KhSct3go8H3snW5zsoxdvr+BYPjVP425ozTZ9xSLfO\nytuC1rLhutupb13E2mI8Ra9iXFaJOgqfaDiyzhOQ6TfU05zxhOIPMTBRYkG4lQii\n2YcIXTa28hk9EC1iu0ET/AGBzhdxSlrzyNz7oLXxHqLaU5P2k+zS60wZFmT3QRhy\nCNUxgLbDYwltK0AQxy3O3+r5pcvrkV7AeRGj5mZ//6BzzfFvJm8XeDkWCYPXtTES\nFZClQxlWg2VHXKdhmK6zyyhMt69lwCxhpFa1DG/egSnOHMbf6JiqHTNQLHxP6rYM\nLB88lbXLyAtx2ZX100JYE0rxpVUvkInfNYIwgWUaockB/tzH6PxhUQQw+mhkkcW0\nbFCW1jjxWzdL8c10LjIPFnTjTN7GG/B1YlpUX8U0pphDee9WnDhjkBaN8WGn/LSk\nyI29F15MaTwz0S07VQJgEqYFrbJPmOwXyZ2LsUW/qZ21O6LDecXhG1cv8shgm7X0\nvWsoPoNFNtl/t59A/rUOs2BOJCp1DfaVmTW4Z6FjJM7FYhgPL2SCve+rd0V0W1Gd\no8GgfTdqeRPUR4spHmw4jcNbTFbuqz376RtxYtVCBd91A2whkRxCpvX1XQQdAJ0M\nhFRy2HvtOs3fFBIRVF0oGS+3SMgDcNFGJRvE1sacy4S8Oq9AiWbye3WSsXJjuwQ+\nhVbE8eVEerqsGjiZwJKlkAK7blifaJ4cwZ0oGce9B7a3TOIzos6ZSgm/HmtIpCS9\nYm7fccK0L9arUijeYIWNkkiRZWp6P6tPqgCgTLH2iC/myWjIXB81NlJ/kZjfdRKO\n7GbiDP1PKZOJ5y4T8zyrW5dyFiNzvCL/KrhHwgUTIWMXhIaVa868zSYbP695Utx3\nNCy8BbInX94oVFsRswa1TfXvsouiAQQaopJVjDVf7C4EQ3H/n9lxpe3c3GIMAoUj\n0W4ZfdVqBeA3IAjYgU2pueyQBPzKmcIzAuFbzjYRnjQV+RG4fyO+jsgKkJArXbrh\nls+Kn8wwFq3j4ix0g1iGpt53aZe0JutZoir4cH1GbI/AB6xA6YTJEHTJZkzDhB2Q\nHqUjVv+yDY+Ztm/Sgfq+u9YOpIL7cIyg8gLKEwqFQxNIPry2M3AWHDLLyxLm4WU2\nGRJP09YxF+6AsZX4Me0w16c9RSA8Q0duJHpwfnAmiyo3F9ed82RsQjvJKTmvw39w\n5w10wA9mBBuJGVoAUvmGf68+vBOyYzJTtfGopgCzo4i9vrdnWaT1kiPdK/NDhdZp\nNc9WTN5tAuMbAFL5kZ22S2X7k59hs3gnTl5UwFcFL3u7bCMM6XuBDoBlmONWWrvg\nCaU9fq3C8xXMh/YcRYHdMdu3KWHmJg==\n=7Xqm\n-----END PGP SIGNATURE-----",
        "payload": "tree 9399f7d888fe98a400aea3f5350214364c55ace7\nparent 78fdfbea666201b25919dd67454eb04d6a34326f\nauthor Vasil Dimov <vd@FreeBSD.org> 1613135153 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614601338 +0100\n\nnet: extend Sock::Wait() to report a timeout\n\nPreviously `Sock::Wait()` would not have signaled to the caller whether\na timeout or one of the requested events occurred since that was not\nneeded by any of the callers.\n\nSuch functionality will be needed in the I2P implementation, thus extend\nthe `Sock::Wait()` method.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1845315a109eb105113cb5fbb6f869e1cf010c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1845315a109eb105113cb5fbb6f869e1cf010c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1845315a109eb105113cb5fbb6f869e1cf010c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78fdfbea666201b25919dd67454eb04d6a34326f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78fdfbea666201b25919dd67454eb04d6a34326f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78fdfbea666201b25919dd67454eb04d6a34326f"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 37,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d8fd9d41383adf5a537a66b570e4ceaf8d7861d9",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea1845315a109eb105113cb5fbb6f869e1cf010c/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea1845315a109eb105113cb5fbb6f869e1cf010c/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=ea1845315a109eb105113cb5fbb6f869e1cf010c",
        "patch": "@@ -59,7 +59,7 @@ ssize_t Sock::Recv(void* buf, size_t len, int flags) const\n     return recv(m_socket, static_cast<char*>(buf), len, flags);\n }\n \n-bool Sock::Wait(std::chrono::milliseconds timeout, Event requested) const\n+bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n #ifdef USE_POLL\n     pollfd fd;\n@@ -72,7 +72,21 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested) const\n         fd.events |= POLLOUT;\n     }\n \n-    return poll(&fd, 1, count_milliseconds(timeout)) != SOCKET_ERROR;\n+    if (poll(&fd, 1, count_milliseconds(timeout)) == SOCKET_ERROR) {\n+        return false;\n+    }\n+\n+    if (occurred != nullptr) {\n+        *occurred = 0;\n+        if (fd.revents & POLLIN) {\n+            *occurred |= RECV;\n+        }\n+        if (fd.revents & POLLOUT) {\n+            *occurred |= SEND;\n+        }\n+    }\n+\n+    return true;\n #else\n     if (!IsSelectableSocket(m_socket)) {\n         return false;\n@@ -93,7 +107,21 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested) const\n \n     timeval timeout_struct = MillisToTimeval(timeout);\n \n-    return select(m_socket + 1, &fdset_recv, &fdset_send, nullptr, &timeout_struct) != SOCKET_ERROR;\n+    if (select(m_socket + 1, &fdset_recv, &fdset_send, nullptr, &timeout_struct) == SOCKET_ERROR) {\n+        return false;\n+    }\n+\n+    if (occurred != nullptr) {\n+        *occurred = 0;\n+        if (FD_ISSET(m_socket, &fdset_recv)) {\n+            *occurred |= RECV;\n+        }\n+        if (FD_ISSET(m_socket, &fdset_send)) {\n+            *occurred |= SEND;\n+        }\n+    }\n+\n+    return true;\n #endif /* USE_POLL */\n }\n "
      },
      {
        "sha": "2d9cac14af64a8229b9716c8e6ac2fbbff739353",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea1845315a109eb105113cb5fbb6f869e1cf010c/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea1845315a109eb105113cb5fbb6f869e1cf010c/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=ea1845315a109eb105113cb5fbb6f869e1cf010c",
        "patch": "@@ -105,9 +105,14 @@ class Sock\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n+     * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n+     * indicates which of the requested events occurred. A timeout is indicated by return\n+     * value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n-    virtual bool Wait(std::chrono::milliseconds timeout, Event requested) const;\n+    virtual bool Wait(std::chrono::milliseconds timeout,\n+                      Event requested,\n+                      Event* occurred = nullptr) const;\n \n private:\n     /**"
      }
    ]
  },
  {
    "sha": "42c779f503eb8437b6232773a4a2472306cc9f3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmM3NzlmNTAzZWI4NDM3YjYyMzI3NzNhNGEyNDcyMzA2Y2M5ZjNk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-12-04T14:11:25Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T16:36:16Z"
      },
      "message": "net: extend Sock with methods for robust send & read until terminator\n\nIntroduce two high level, convenience methods in the `Sock` class:\n\n* `SendComplete()`: keep trying to send the specified data until either\n  successfully sent all of it, timeout or interrupted.\n\n* `RecvUntilTerminator()`: read until a terminator is encountered (never\n  after it), timeout or interrupted.\n\nThese will be convenient in the I2P SAM implementation.\n\n`SendComplete()` can also be used in the SOCKS5 implementation instead\nof calling `send()` directly.",
      "tree": {
        "sha": "b8e4af2a0a315f717f13589b8f66db3926ac56e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8e4af2a0a315f717f13589b8f66db3926ac56e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42c779f503eb8437b6232773a4a2472306cc9f3d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9GAAACgkQVN8G9ktV\ny7+EjB/+OZTAykc/E++m2MdRk70QkmrB9b62XrsJgph5MkeeZwEGkH+oOQPUjk2E\nfFqsmsNcVW4ZGOWSVHcCqjjr0n3zgelxOOZsLRnuAIFLRb4HG5OfnyNLkRCcUSzP\nLIKch1l+Y3IcMuVHmrE9y9+NQ8XU4bE8Xs79mDFPeKmhxYmLsQrPwB+WQCrvBpAl\nmWtgOuu+D/XqVhXKkZSTjLhPCmzrMbCEomLzc63wKCfId9j4ovSMeflzFBG2NNcU\nAEUgSVdR2j2xE7vXAjDeFLKwWBMBE6A5VQWqhgJgLT+NKdgqS5XkXY499kKB4rrI\nH8J97+4jyCaa/K1Psat+FBm6JkePusTyddZLUlL/UYvD9vwD5PtcTDe2IwIX9yCX\nPZJ+GoNWb6dFv5Cv+wDH4D2NLhga7dR2BQ7+s65v3TQdfNdnENfsmYiWOte2lmHw\nBfR7hU4SKTs9akMBZvm/28yat4S6TN6k+DZP1zUDTiywsAQHhZiBfOcpG7cWrjJ6\niwTb3Z3iDQBay9RR2RkFzD/SjvWUsfPL/o+LnqNvb82ia2WPDg1THd4IoQX8tdGz\nav/CxBodKvsPPtf3ncppAhGuscXuOzqpI+iJMrI1xtVyqdw9FKkvpz3e/VdSTNjy\nH3xyq0KC3GE4zujrUBmsLohvlhBvL1dEKBs6QYsCSfqfRObpCC8ZEII4HeaNDbob\ntNjNLkK9bnzjWIHp/tvyiO4EWfW5SXV5R6eP2+4oCidaboKxiKWmHBlkTU8EEY3B\na+nJ3/fMNkBfwYhGQCJvA15T9U5e9XhastfglW8HOVHU95mN0ZeJCASOZeNrmilN\nneHZnhHdN1EhqH7oXhrpusmAY8JPOHm1WwaDTNIyujqxi9qc5LN8+SYmAFQ9p6Yw\nUPiYEMRPG8/icTH9Z0rfWWh/m7bqh/SI4YA8WAyXYlpXc9chmMMfdW0AZiJrtAgz\ngmAHDq72RnhxtmPEB+r5lmAZIQM2kHhQ+/gZ7q/sQ2WpgvqvgxKVxuc/l+o5rO6q\n8NB9PFB5gDZZDvkPqSZRJaIpmUfoHuEB33hcKTxi14NOuZ7mhNK6AlE+GXDCfCga\nyxoXPeS8m7bEw02bGcbO6gWZJ+hOkYahuZc5XstuDH1XhcWOCo9FGcAUuEjmPD0x\nRTu/Qs1J1IjpGtu6NnFHdKg5sXRN3p9Hf0AYc1tFPktxQkHEY3SnjWR2iJ0tRreM\nBQ2WH69+3H1GBl+WMJBoPjOLOiimsQOxTAXh5uou8SiJcFWXwAen21xPM99fSpsM\nqRI4FqeEob4/skBxeupkOPQ52iBnxmjb2IhsMK+d/RjgG0XvZMIyrfGAOWipvmfD\nUzlmcQ1MMv8FiEqBOBdeGFLnTPyneg==\n=tkul\n-----END PGP SIGNATURE-----",
        "payload": "tree b8e4af2a0a315f717f13589b8f66db3926ac56e9\nparent ea1845315a109eb105113cb5fbb6f869e1cf010c\nauthor Vasil Dimov <vd@FreeBSD.org> 1607091085 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614616576 +0100\n\nnet: extend Sock with methods for robust send & read until terminator\n\nIntroduce two high level, convenience methods in the `Sock` class:\n\n* `SendComplete()`: keep trying to send the specified data until either\n  successfully sent all of it, timeout or interrupted.\n\n* `RecvUntilTerminator()`: read until a terminator is encountered (never\n  after it), timeout or interrupted.\n\nThese will be convenient in the I2P SAM implementation.\n\n`SendComplete()` can also be used in the SOCKS5 implementation instead\nof calling `send()` directly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42c779f503eb8437b6232773a4a2472306cc9f3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42c779f503eb8437b6232773a4a2472306cc9f3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42c779f503eb8437b6232773a4a2472306cc9f3d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea1845315a109eb105113cb5fbb6f869e1cf010c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea1845315a109eb105113cb5fbb6f869e1cf010c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea1845315a109eb105113cb5fbb6f869e1cf010c"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 163,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3449bc2661cddd387bb00abce285cd9144f590d9",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c779f503eb8437b6232773a4a2472306cc9f3d/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c779f503eb8437b6232773a4a2472306cc9f3d/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=42c779f503eb8437b6232773a4a2472306cc9f3d",
        "patch": "@@ -44,13 +44,22 @@ typedef unsigned int SOCKET;\n #define WSAEINVAL           EINVAL\n #define WSAEALREADY         EALREADY\n #define WSAEWOULDBLOCK      EWOULDBLOCK\n+#define WSAEAGAIN           EAGAIN\n #define WSAEMSGSIZE         EMSGSIZE\n #define WSAEINTR            EINTR\n #define WSAEINPROGRESS      EINPROGRESS\n #define WSAEADDRINUSE       EADDRINUSE\n #define WSAENOTSOCK         EBADF\n #define INVALID_SOCKET      (SOCKET)(~0)\n #define SOCKET_ERROR        -1\n+#else\n+#ifndef WSAEAGAIN\n+#ifdef EAGAIN\n+#define WSAEAGAIN EAGAIN\n+#else\n+#define WSAEAGAIN WSAEWOULDBLOCK\n+#endif\n+#endif\n #endif\n \n #ifdef WIN32"
      },
      {
        "sha": "36493ec241862975e2a2070b17fcd50f3df13141",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c779f503eb8437b6232773a4a2472306cc9f3d/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c779f503eb8437b6232773a4a2472306cc9f3d/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=42c779f503eb8437b6232773a4a2472306cc9f3d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <compat.h>\n #include <logging.h>\n+#include <threadinterrupt.h>\n #include <tinyformat.h>\n #include <util/sock.h>\n #include <util/system.h>\n@@ -12,12 +13,18 @@\n #include <codecvt>\n #include <cwchar>\n #include <locale>\n+#include <stdexcept>\n #include <string>\n \n #ifdef USE_POLL\n #include <poll.h>\n #endif\n \n+static inline bool IOErrorIsPermanent(int err)\n+{\n+    return err != WSAEAGAIN && err != WSAEINTR && err != WSAEWOULDBLOCK && err != WSAEINPROGRESS;\n+}\n+\n Sock::Sock() : m_socket(INVALID_SOCKET) {}\n \n Sock::Sock(SOCKET s) : m_socket(s) {}\n@@ -125,6 +132,124 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n #endif /* USE_POLL */\n }\n \n+void Sock::SendComplete(const std::string& data,\n+                        std::chrono::milliseconds timeout,\n+                        CThreadInterrupt& interrupt) const\n+{\n+    const auto deadline = GetTime<std::chrono::milliseconds>() + timeout;\n+    size_t sent{0};\n+\n+    for (;;) {\n+        const ssize_t ret{Send(data.data() + sent, data.size() - sent, MSG_NOSIGNAL)};\n+\n+        if (ret > 0) {\n+            sent += static_cast<size_t>(ret);\n+            if (sent == data.size()) {\n+                break;\n+            }\n+        } else {\n+            const int err{WSAGetLastError()};\n+            if (IOErrorIsPermanent(err)) {\n+                throw std::runtime_error(strprintf(\"send(): %s\", NetworkErrorString(err)));\n+            }\n+        }\n+\n+        const auto now = GetTime<std::chrono::milliseconds>();\n+\n+        if (now >= deadline) {\n+            throw std::runtime_error(strprintf(\n+                \"Send timeout (sent only %u of %u bytes before that)\", sent, data.size()));\n+        }\n+\n+        if (interrupt) {\n+            throw std::runtime_error(strprintf(\n+                \"Send interrupted (sent only %u of %u bytes before that)\", sent, data.size()));\n+        }\n+\n+        // Wait for a short while (or the socket to become ready for sending) before retrying\n+        // if nothing was sent.\n+        const auto wait_time = std::min(deadline - now, std::chrono::milliseconds{MAX_WAIT_FOR_IO});\n+        Wait(wait_time, SEND);\n+    }\n+}\n+\n+std::string Sock::RecvUntilTerminator(uint8_t terminator,\n+                                      std::chrono::milliseconds timeout,\n+                                      CThreadInterrupt& interrupt) const\n+{\n+    const auto deadline = GetTime<std::chrono::milliseconds>() + timeout;\n+    std::string data;\n+    bool terminator_found{false};\n+\n+    // We must not consume any bytes past the terminator from the socket.\n+    // One option is to read one byte at a time and check if we have read a terminator.\n+    // However that is very slow. Instead, we peek at what is in the socket and only read\n+    // as many bytes as possible without crossing the terminator.\n+    // Reading 64 MiB of random data with 262526 terminator chars takes 37 seconds to read\n+    // one byte at a time VS 0.71 seconds with the \"peek\" solution below. Reading one byte\n+    // at a time is about 50 times slower.\n+\n+    for (;;) {\n+        char buf[512];\n+\n+        const ssize_t peek_ret{Recv(buf, sizeof(buf), MSG_PEEK)};\n+\n+        switch (peek_ret) {\n+        case -1: {\n+            const int err{WSAGetLastError()};\n+            if (IOErrorIsPermanent(err)) {\n+                throw std::runtime_error(strprintf(\"recv(): %s\", NetworkErrorString(err)));\n+            }\n+            break;\n+        }\n+        case 0:\n+            throw std::runtime_error(\"Connection unexpectedly closed by peer\");\n+        default:\n+            auto end = buf + peek_ret;\n+            auto terminator_pos = std::find(buf, end, terminator);\n+            terminator_found = terminator_pos != end;\n+\n+            const size_t try_len{terminator_found ? terminator_pos - buf + 1 :\n+                                                    static_cast<size_t>(peek_ret)};\n+\n+            const ssize_t read_ret{Recv(buf, try_len, 0)};\n+\n+            if (read_ret < 0 || static_cast<size_t>(read_ret) != try_len) {\n+                throw std::runtime_error(\n+                    strprintf(\"recv() returned %u bytes on attempt to read %u bytes but previous \"\n+                              \"peek claimed %u bytes are available\",\n+                              read_ret, try_len, peek_ret));\n+            }\n+\n+            // Don't include the terminator in the output.\n+            const size_t append_len{terminator_found ? try_len - 1 : try_len};\n+\n+            data.append(buf, buf + append_len);\n+\n+            if (terminator_found) {\n+                return data;\n+            }\n+        }\n+\n+        const auto now = GetTime<std::chrono::milliseconds>();\n+\n+        if (now >= deadline) {\n+            throw std::runtime_error(strprintf(\n+                \"Receive timeout (received %u bytes without terminator before that)\", data.size()));\n+        }\n+\n+        if (interrupt) {\n+            throw std::runtime_error(strprintf(\n+                \"Receive interrupted (received %u bytes without terminator before that)\",\n+                data.size()));\n+        }\n+\n+        // Wait for a short while (or the socket to become ready for reading) before retrying.\n+        const auto wait_time = std::min(deadline - now, std::chrono::milliseconds{MAX_WAIT_FOR_IO});\n+        Wait(wait_time, RECV);\n+    }\n+}\n+\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {"
      },
      {
        "sha": "209d30def4e0ff403442f2e6d3bf4d37707c7bca",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42c779f503eb8437b6232773a4a2472306cc9f3d/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42c779f503eb8437b6232773a4a2472306cc9f3d/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=42c779f503eb8437b6232773a4a2472306cc9f3d",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_UTIL_SOCK_H\n \n #include <compat.h>\n+#include <threadinterrupt.h>\n #include <util/time.h>\n \n #include <chrono>\n@@ -114,6 +115,34 @@ class Sock\n                       Event requested,\n                       Event* occurred = nullptr) const;\n \n+    /* Higher level, convenience, methods. These may throw. */\n+\n+    /**\n+     * Send the given data, retrying on transient errors.\n+     * @param[in] data Data to send.\n+     * @param[in] timeout Timeout for the entire operation.\n+     * @param[in] interrupt If this is signaled then the operation is canceled.\n+     * @throws std::runtime_error if the operation cannot be completed. In this case only some of\n+     * the data will be written to the socket.\n+     */\n+    virtual void SendComplete(const std::string& data,\n+                              std::chrono::milliseconds timeout,\n+                              CThreadInterrupt& interrupt) const;\n+\n+    /**\n+     * Read from socket until a terminator character is encountered. Will never consume bytes past\n+     * the terminator from the socket.\n+     * @param[in] terminator Character up to which to read from the socket.\n+     * @param[in] timeout Timeout for the entire operation.\n+     * @param[in] interrupt If this is signaled then the operation is canceled.\n+     * @return The data that has been read, without the terminating character.\n+     * @throws std::runtime_error if the operation cannot be completed. In this case some bytes may\n+     * have been consumed from the socket.\n+     */\n+    virtual std::string RecvUntilTerminator(uint8_t terminator,\n+                                            std::chrono::milliseconds timeout,\n+                                            CThreadInterrupt& interrupt) const;\n+\n private:\n     /**\n      * Contained socket. `INVALID_SOCKET` designates the object is empty."
      }
    ]
  },
  {
    "sha": "5bac7e45e1d3a07115b5ff002d988438fcc92a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmFjN2U0NWUxZDNhMDcxMTViNWZmMDAyZDk4ODQzOGZjYzkyYTUz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-01-21T15:59:55Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T16:36:17Z"
      },
      "message": "net: extend Sock with a method to check whether connected\n\nThis will be convenient in the I2P SAM implementation.",
      "tree": {
        "sha": "585c003f2f4a826dd8037cb85509486053b84c78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/585c003f2f4a826dd8037cb85509486053b84c78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bac7e45e1d3a07115b5ff002d988438fcc92a53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9GAEACgkQVN8G9ktV\ny7/vIx/+MngGzUGDlIFYl8PkLg+Vdw43ltQnGTPMQiAM7Fn4ir27bM0jxAh6K0XF\nMy/DHLPMILpKt07EKoohyKVsh6BGs206eW4diCksfkVEJATd4kz42bS5u8PJB6Wm\nzXVECk2PohftLmECqgbh+b8tKripqUSvp70JOzDl1T4StQ6UPCyDsZHrPV618c8N\nXk/PMTDaHfuxf5/mlIhBOpEKscAOTr9AZpM3XTEatJpO24cObdZbHoz+EeULs+d9\nQZfFzao+pKTkw2TwRMOuTZdwtGP+0kxseMX2Yjtx5FA48altXpdSepcvfbYpQthY\naOH9O2ZpC0JCvsYbh63X1GRX4U3YpDaa0MzvbvBtLI+DgZ7YyWuJ1ymfjmnxhn7S\nI7x4Vd+JO5D/PDl2n/b/g+C1sPwjiQ/dIII4eYh/rmxtg0rE9osRZWMnYUGl81wu\nntlLKZ6HWwLZB3LHv7DAFxnwWJoeEzV/tyrNhdjJc4ibhGr853u+VR/LKPc4PUX8\nhLDVW3G4/JhRw/TQ/6w+l/H1pNu+AgxOtwmZ5jPCKMN66YKtRXQkSUIyT0dI4iTR\nas01g0Ne0g2/xyBX7BzSHjW5FwyB2kWGlCuQCdvuxuzrOOWDmNGbDemoUwPXzsyQ\nQeOwEpdZa+wvNww5dqQdliU1KGjskdT9O0WStgrPxFPG5ySlmQukcns3gnRpfbgo\n+DQpdre6ytaZynVMiBdjYO7Fgr7GS4nKjLuuixX2LLFKjHEH8OdvWknvJzrIlMPw\nArilCTiHUA8jluN6/XlAzuPOhJFdJusxAuE1fk8XnhiUykOjSUCNboojXPeVExOI\nDNVUeIxMic6lvji+9B6f2elhyHAZWgcUyeYbNi33WURhS7zf4ERyG0+CNozkOp7U\npzyiKNKKFCU9q1kx3ShlqxfyVE8J3lnpRKntjGD8t5Q+jyrvEjMja9s1dVm1zOGS\nET3IwLnVxIr3MDvG5HVyXR1uHGLpszTwVZWzW14kg0jSwpmZHtPj/Cq2nAsbTAl8\nmD8mj5mLyvxBPGYl0bE+P3Zclqmlyg66sfcoWbkWQQedI9tiXueb260UDipA7w6Z\nJmtqVBO90kaWlcu7ztkbMAl9JPfewRDwP2auJr2gw7V9eorvx30ny3GmF2gRilj+\nslxh2JenYNIImQuuhsetmVcK1FrRm6t2vEATo6jgnLl69Xz9RaCnUBZIj5iwJuio\nZSlHxA/Jbvm6Kq+iBaCrfY3vSrPJFpegyXT/eUDMbboqxM+ybevGkVPxKdvDo5dx\n7BDe4xQt6YKckfkwkj20zEV40/ox+LfTam0nl+E7z2YhCOct8FMvU+pcSy8neR8+\ni6dyXYu+NxKc2CzFO5E4tZ/JembWzw==\n=0b7X\n-----END PGP SIGNATURE-----",
        "payload": "tree 585c003f2f4a826dd8037cb85509486053b84c78\nparent 42c779f503eb8437b6232773a4a2472306cc9f3d\nauthor Vasil Dimov <vd@FreeBSD.org> 1611244795 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614616577 +0100\n\nnet: extend Sock with a method to check whether connected\n\nThis will be convenient in the I2P SAM implementation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bac7e45e1d3a07115b5ff002d988438fcc92a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bac7e45e1d3a07115b5ff002d988438fcc92a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bac7e45e1d3a07115b5ff002d988438fcc92a53/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42c779f503eb8437b6232773a4a2472306cc9f3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42c779f503eb8437b6232773a4a2472306cc9f3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42c779f503eb8437b6232773a4a2472306cc9f3d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e13c52a16a1d5054bc662dfefdd9c03696ec2b1a",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bac7e45e1d3a07115b5ff002d988438fcc92a53/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bac7e45e1d3a07115b5ff002d988438fcc92a53/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=5bac7e45e1d3a07115b5ff002d988438fcc92a53",
        "patch": "@@ -250,6 +250,31 @@ std::string Sock::RecvUntilTerminator(uint8_t terminator,\n     }\n }\n \n+bool Sock::IsConnected(std::string& errmsg) const\n+{\n+    if (m_socket == INVALID_SOCKET) {\n+        errmsg = \"not connected\";\n+        return false;\n+    }\n+\n+    char c;\n+    switch (Recv(&c, sizeof(c), MSG_PEEK)) {\n+    case -1: {\n+        const int err = WSAGetLastError();\n+        if (IOErrorIsPermanent(err)) {\n+            errmsg = NetworkErrorString(err);\n+            return false;\n+        }\n+        return true;\n+    }\n+    case 0:\n+        errmsg = \"closed\";\n+        return false;\n+    default:\n+        return true;\n+    }\n+}\n+\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {"
      },
      {
        "sha": "ecebb84205ef4483c116e37e98f63594c0e95f41",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bac7e45e1d3a07115b5ff002d988438fcc92a53/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bac7e45e1d3a07115b5ff002d988438fcc92a53/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=5bac7e45e1d3a07115b5ff002d988438fcc92a53",
        "patch": "@@ -143,6 +143,13 @@ class Sock\n                                             std::chrono::milliseconds timeout,\n                                             CThreadInterrupt& interrupt) const;\n \n+    /**\n+     * Check if still connected.\n+     * @param[out] err The error string, if the socket has been disconnected.\n+     * @return true if connected\n+     */\n+    virtual bool IsConnected(std::string& errmsg) const;\n+\n private:\n     /**\n      * Contained socket. `INVALID_SOCKET` designates the object is empty."
      }
    ]
  },
  {
    "sha": "c22daa2ecff1acd25426cd46f98f2587d1d324c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjJkYWEyZWNmZjFhY2QyNTQyNmNkNDZmOThmMjU4N2QxZDMyNGMz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-27T12:59:26Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:37Z"
      },
      "message": "net: implement the necessary parts of the I2P SAM protocol\n\nImplement the following commands from the I2P SAM protocol:\n\n* HELLO: needed for all of the remaining ones\n* DEST GENERATE: to generate our private key and destination\n* NAMING LOOKUP: to convert .i2p addresses to destinations\n* SESSION CREATE: needed for STREAM CONNECT and STREAM ACCEPT\n* STREAM CONNECT: to make outgoing connections\n* STREAM ACCEPT: to accept incoming connections",
      "tree": {
        "sha": "f8fca7ea86ea24f19ef0d498c4ed4ef15a43feba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8fca7ea86ea24f19ef0d498c4ed4ef15a43feba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c22daa2ecff1acd25426cd46f98f2587d1d324c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IiwACgkQVN8G9ktV\ny78CZx/+JDvoeW3gzg5+Ggx1ql8sFaqSK9pPTn63p+HVpBhdBr7z/JzNTi1qsu+x\nVZQWPaxsrPQxis4jz955AJ3c1NMqiJA5YQ7M0Q/WT6RZyZUjhjKsUTL4TFzgWPpB\nBGCv864hCwcaMlRXkWob1iIJRyMz16az2WYQIxyv7CuKPFiskCgANc8rgofdvFR/\n6Ef3296OjDpHrpFBA5H2Vf8P4KCavGfjxqwxYbJ34Nf7aAm0555hr824PoNC0u9j\nls1p9X+a85rMpwHB8BqyNkSGQP1XAa5xLOFi2syqPw5cBqaDUKHggrPWv0I1jKuD\n6vSmSO2zN2KblSGyxZObf+9vy7eQDqKBkNvUU/m5OnYjfpJfneZ2DU9DTpffHtj5\n5mpe4+xs9C9RISI9e+vKVExMxeETBWc7tmISofsve8sKon3AyIOb03uprkNxcKn1\nGlWfNow7fxr9443gco4bX8FhdGDwz/51WbB4UTKbMSF4O6Q8wf9LV+H2+yBrci6D\nEBWPr3K2pc/Y1XJmh3tGPZLGiKSRjs7YUyYQWv5MlW3aI5QU1xTnPa+dCjJzl96D\nnTCF3ze4EfP+mgTSkRslce1I+ATOL14fILhLiXca5X7ku+jHXp7wZdaPYP9w/s8m\n3Kv9GFmhiXKlU5vnAxrvs7My3fgvpNgZ2oCTWJdl1abyjW+viYzKIh9OVbdzHJH2\nvN9vv6qTVReHQePVsjMFqSQ49cgrBHbJUxS1UqJcN1aoSyF6jTj4vGAG4Jcw12dM\nNRWmuniQ30cz0rSVypHBkM7F34n1cx9HWN8n24pXhrdLjUkQF1AlETnNIx2Q1RCL\nGgG8VDMhVEdZclUOofXrrRjgMBOXKHAH1R9GToavaxxTnX2MIelFnkVUfm+2KZnL\n6c8YkYDKsbAha12WxTnlLdyeNsJlxELY22Y5uCTgrSHGjJ66xVW3x7c67LHfyc1Q\nCm7mctc/BhlChBot7ktTWGReLTjW7IIq/Nbq0R6jJlHnBb75urTY/YJEndKz8kAv\nB+jQ9QIU3s4zDV8bncuLHm4h4hdFEmdEYymzVJVHHesrM0g4tZiqCoGZXzaTfic4\nuspoWUYkwDjd/xirve3H5sq78ygRKAOPQuOzcd6ODfj7R/gfha0qNwisg0gdjVFu\nwd8qBQBfaj0r1okvJ/er+ZA+DySXHML+kbYZN2rBVnzUssfg6pslISA9xGTxTv9p\nP02DkHASmvDo22dvSnqgGqk+9JI6/KqNHKA9fLXeQv83vQWRw0qoeHH4sKrukGRV\nU7H+dim5j5GiMe5DiTrhoeFX6xSU2Thy932gDvm+DUUNyy46HnM1ju9jrJQ26+WI\nfCBtw12NH1+Z7d+SU5lPnbuATuSilg==\n=KD0g\n-----END PGP SIGNATURE-----",
        "payload": "tree f8fca7ea86ea24f19ef0d498c4ed4ef15a43feba\nparent 5bac7e45e1d3a07115b5ff002d988438fcc92a53\nauthor Vasil Dimov <vd@FreeBSD.org> 1606481966 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619177 +0100\n\nnet: implement the necessary parts of the I2P SAM protocol\n\nImplement the following commands from the I2P SAM protocol:\n\n* HELLO: needed for all of the remaining ones\n* DEST GENERATE: to generate our private key and destination\n* NAMING LOOKUP: to convert .i2p addresses to destinations\n* SESSION CREATE: needed for STREAM CONNECT and STREAM ACCEPT\n* STREAM CONNECT: to make outgoing connections\n* STREAM ACCEPT: to accept incoming connections\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22daa2ecff1acd25426cd46f98f2587d1d324c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c22daa2ecff1acd25426cd46f98f2587d1d324c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22daa2ecff1acd25426cd46f98f2587d1d324c3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bac7e45e1d3a07115b5ff002d988438fcc92a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bac7e45e1d3a07115b5ff002d988438fcc92a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bac7e45e1d3a07115b5ff002d988438fcc92a53"
      }
    ],
    "stats": {
      "total": 671,
      "additions": 671,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c6d97b7144ab5ac34282906cadcfa7a54fa5925",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "patch": "@@ -148,6 +148,7 @@ BITCOIN_CORE_H = \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n+  i2p.h \\\n   index/base.h \\\n   index/blockfilterindex.h \\\n   index/disktxpos.h \\\n@@ -315,6 +316,7 @@ libbitcoin_server_a_SOURCES = \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n+  i2p.cpp \\\n   index/base.cpp \\\n   index/blockfilterindex.cpp \\\n   index/txindex.cpp \\"
      },
      {
        "sha": "42270deaebf7c4cb30bfab0280cf76280e4ca1fb",
        "filename": "src/i2p.cpp",
        "status": "added",
        "additions": 407,
        "deletions": 0,
        "changes": 407,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "patch": "@@ -0,0 +1,407 @@\n+// Copyright (c) 2020-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <compat.h>\n+#include <compat/endian.h>\n+#include <crypto/sha256.h>\n+#include <fs.h>\n+#include <i2p.h>\n+#include <logging.h>\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <random.h>\n+#include <util/strencodings.h>\n+#include <tinyformat.h>\n+#include <util/readwritefile.h>\n+#include <util/sock.h>\n+#include <util/spanparsing.h>\n+#include <util/system.h>\n+\n+#include <chrono>\n+#include <stdexcept>\n+#include <string>\n+\n+namespace i2p {\n+\n+/**\n+ * Swap Standard Base64 <-> I2P Base64.\n+ * Standard Base64 uses `+` and `/` as last two characters of its alphabet.\n+ * I2P Base64 uses `-` and `~` respectively.\n+ * So it is easy to detect in which one is the input and convert to the other.\n+ * @param[in] from Input to convert.\n+ * @return converted `from`\n+ */\n+static std::string SwapBase64(const std::string& from)\n+{\n+    std::string to;\n+    to.resize(from.size());\n+    for (size_t i = 0; i < from.size(); ++i) {\n+        switch (from[i]) {\n+        case '-':\n+            to[i] = '+';\n+            break;\n+        case '~':\n+            to[i] = '/';\n+            break;\n+        case '+':\n+            to[i] = '-';\n+            break;\n+        case '/':\n+            to[i] = '~';\n+            break;\n+        default:\n+            to[i] = from[i];\n+            break;\n+        }\n+    }\n+    return to;\n+}\n+\n+/**\n+ * Decode an I2P-style Base64 string.\n+ * @param[in] i2p_b64 I2P-style Base64 string.\n+ * @return decoded `i2p_b64`\n+ * @throw std::runtime_error if decoding fails\n+ */\n+static Binary DecodeI2PBase64(const std::string& i2p_b64)\n+{\n+    const std::string& std_b64 = SwapBase64(i2p_b64);\n+    bool invalid;\n+    Binary decoded = DecodeBase64(std_b64.c_str(), &invalid);\n+    if (invalid) {\n+        throw std::runtime_error(strprintf(\"Cannot decode Base64: \\\"%s\\\"\", i2p_b64));\n+    }\n+    return decoded;\n+}\n+\n+/**\n+ * Derive the .b32.i2p address of an I2P destination (binary).\n+ * @param[in] dest I2P destination.\n+ * @return the address that corresponds to `dest`\n+ * @throw std::runtime_error if conversion fails\n+ */\n+static CNetAddr DestBinToAddr(const Binary& dest)\n+{\n+    CSHA256 hasher;\n+    hasher.Write(dest.data(), dest.size());\n+    unsigned char hash[CSHA256::OUTPUT_SIZE];\n+    hasher.Finalize(hash);\n+\n+    CNetAddr addr;\n+    const std::string addr_str = EncodeBase32(hash, false) + \".b32.i2p\";\n+    if (!addr.SetSpecial(addr_str)) {\n+        throw std::runtime_error(strprintf(\"Cannot parse I2P address: \\\"%s\\\"\", addr_str));\n+    }\n+\n+    return addr;\n+}\n+\n+/**\n+ * Derive the .b32.i2p address of an I2P destination (I2P-style Base64).\n+ * @param[in] dest I2P destination.\n+ * @return the address that corresponds to `dest`\n+ * @throw std::runtime_error if conversion fails\n+ */\n+static CNetAddr DestB64ToAddr(const std::string& dest)\n+{\n+    const Binary& decoded = DecodeI2PBase64(dest);\n+    return DestBinToAddr(decoded);\n+}\n+\n+namespace sam {\n+\n+Session::Session(const fs::path& private_key_file,\n+                 const CService& control_host,\n+                 CThreadInterrupt* interrupt)\n+    : m_private_key_file(private_key_file), m_control_host(control_host), m_interrupt(interrupt)\n+{\n+}\n+\n+Session::~Session()\n+{\n+    LOCK(m_mutex);\n+    Disconnect();\n+}\n+\n+bool Session::Listen(Connection& conn)\n+{\n+    try {\n+        LOCK(m_mutex);\n+        CreateIfNotCreatedAlready();\n+        conn.me = m_my_addr;\n+        conn.sock = StreamAccept();\n+        return true;\n+    } catch (const std::runtime_error& e) {\n+        Log(\"Error listening: %s\", e.what());\n+        CheckControlSock();\n+    }\n+    return false;\n+}\n+\n+bool Session::Accept(Connection& conn)\n+{\n+    try {\n+        while (!*m_interrupt) {\n+            Sock::Event occurred;\n+            conn.sock.Wait(MAX_WAIT_FOR_IO, Sock::RECV, &occurred);\n+\n+            if ((occurred & Sock::RECV) == 0) {\n+                // Timeout, no incoming connections within MAX_WAIT_FOR_IO.\n+                continue;\n+            }\n+\n+            const std::string& peer_dest =\n+                conn.sock.RecvUntilTerminator('\\n', MAX_WAIT_FOR_IO, *m_interrupt);\n+\n+            conn.peer = CService(DestB64ToAddr(peer_dest), Params().GetDefaultPort());\n+\n+            return true;\n+        }\n+    } catch (const std::runtime_error& e) {\n+        Log(\"Error accepting: %s\", e.what());\n+        CheckControlSock();\n+    }\n+    return false;\n+}\n+\n+bool Session::Connect(const CService& to, Connection& conn, bool& proxy_error)\n+{\n+    proxy_error = true;\n+\n+    std::string session_id;\n+    Sock sock;\n+    conn.peer = to;\n+\n+    try {\n+        {\n+            LOCK(m_mutex);\n+            CreateIfNotCreatedAlready();\n+            session_id = m_session_id;\n+            conn.me = m_my_addr;\n+            sock = Hello();\n+        }\n+\n+        const Reply& lookup_reply =\n+            SendRequestAndGetReply(sock, strprintf(\"NAMING LOOKUP NAME=%s\", to.ToStringIP()));\n+\n+        const std::string& dest = lookup_reply.Get(\"VALUE\");\n+\n+        const Reply& connect_reply = SendRequestAndGetReply(\n+            sock, strprintf(\"STREAM CONNECT ID=%s DESTINATION=%s SILENT=false\", session_id, dest),\n+            false);\n+\n+        const std::string& result = connect_reply.Get(\"RESULT\");\n+\n+        if (result == \"OK\") {\n+            conn.sock = std::move(sock);\n+            return true;\n+        }\n+\n+        if (result == \"INVALID_ID\") {\n+            LOCK(m_mutex);\n+            Disconnect();\n+            throw std::runtime_error(\"Invalid session id\");\n+        }\n+\n+        if (result == \"CANT_REACH_PEER\" || result == \"TIMEOUT\") {\n+            proxy_error = false;\n+        }\n+\n+        throw std::runtime_error(strprintf(\"\\\"%s\\\"\", connect_reply.full));\n+    } catch (const std::runtime_error& e) {\n+        Log(\"Error connecting to %s: %s\", to.ToString(), e.what());\n+        CheckControlSock();\n+        return false;\n+    }\n+}\n+\n+// Private methods\n+\n+std::string Session::Reply::Get(const std::string& key) const\n+{\n+    const auto& pos = keys.find(key);\n+    if (pos == keys.end() || !pos->second.has_value()) {\n+        throw std::runtime_error(\n+            strprintf(\"Missing %s= in the reply to \\\"%s\\\": \\\"%s\\\"\", key, request, full));\n+    }\n+    return pos->second.value();\n+}\n+\n+template <typename... Args>\n+void Session::Log(const std::string& fmt, const Args&... args) const\n+{\n+    LogPrint(BCLog::I2P, \"I2P: %s\\n\", tfm::format(fmt, args...));\n+}\n+\n+Session::Reply Session::SendRequestAndGetReply(const Sock& sock,\n+                                               const std::string& request,\n+                                               bool check_result_ok) const\n+{\n+    sock.SendComplete(request + \"\\n\", MAX_WAIT_FOR_IO, *m_interrupt);\n+\n+    Reply reply;\n+\n+    // Don't log the full \"SESSION CREATE ...\" because it contains our private key.\n+    reply.request = request.substr(0, 14) == \"SESSION CREATE\" ? \"SESSION CREATE ...\" : request;\n+\n+    // It could take a few minutes for the I2P router to reply as it is querying the I2P network\n+    // (when doing name lookup, for example). Notice: `RecvUntilTerminator()` is checking\n+    // `m_interrupt` more often, so we would not be stuck here for long if `m_interrupt` is\n+    // signaled.\n+    static constexpr auto recv_timeout = 3min;\n+\n+    reply.full = sock.RecvUntilTerminator('\\n', recv_timeout, *m_interrupt);\n+\n+    for (const auto& kv : spanparsing::Split(reply.full, ' ')) {\n+        const auto& pos = std::find(kv.begin(), kv.end(), '=');\n+        if (pos != kv.end()) {\n+            reply.keys.emplace(std::string{kv.begin(), pos}, std::string{pos + 1, kv.end()});\n+        } else {\n+            reply.keys.emplace(std::string{kv.begin(), kv.end()}, std::nullopt);\n+        }\n+    }\n+\n+    if (check_result_ok && reply.Get(\"RESULT\") != \"OK\") {\n+        throw std::runtime_error(\n+            strprintf(\"Unexpected reply to \\\"%s\\\": \\\"%s\\\"\", request, reply.full));\n+    }\n+\n+    return reply;\n+}\n+\n+Sock Session::Hello() const\n+{\n+    auto sock = CreateSock(m_control_host);\n+\n+    if (!sock) {\n+        throw std::runtime_error(\"Cannot create socket\");\n+    }\n+\n+    if (!ConnectSocketDirectly(m_control_host, sock->Get(), nConnectTimeout, true)) {\n+        throw std::runtime_error(strprintf(\"Cannot connect to %s\", m_control_host.ToString()));\n+    }\n+\n+    SendRequestAndGetReply(*sock, \"HELLO VERSION MIN=3.1 MAX=3.1\");\n+\n+    return std::move(*sock);\n+}\n+\n+void Session::CheckControlSock()\n+{\n+    LOCK(m_mutex);\n+\n+    std::string errmsg;\n+    if (!m_control_sock.IsConnected(errmsg)) {\n+        Log(\"Control socket error: %s\", errmsg);\n+        Disconnect();\n+    }\n+}\n+\n+void Session::DestGenerate(const Sock& sock)\n+{\n+    // https://geti2p.net/spec/common-structures#key-certificates\n+    // \"7\" or \"EdDSA_SHA512_Ed25519\" - \"Recent Router Identities and Destinations\".\n+    // Use \"7\" because i2pd <2.24.0 does not recognize the textual form.\n+    const Reply& reply = SendRequestAndGetReply(sock, \"DEST GENERATE SIGNATURE_TYPE=7\", false);\n+\n+    m_private_key = DecodeI2PBase64(reply.Get(\"PRIV\"));\n+}\n+\n+void Session::GenerateAndSavePrivateKey(const Sock& sock)\n+{\n+    DestGenerate(sock);\n+\n+    // umask is set to 077 in init.cpp, which is ok (unless -sysperms is given)\n+    if (!WriteBinaryFile(m_private_key_file,\n+                         std::string(m_private_key.begin(), m_private_key.end()))) {\n+        throw std::runtime_error(\n+            strprintf(\"Cannot save I2P private key to %s\", m_private_key_file));\n+    }\n+}\n+\n+Binary Session::MyDestination() const\n+{\n+    // From https://geti2p.net/spec/common-structures#destination:\n+    // \"They are 387 bytes plus the certificate length specified at bytes 385-386, which may be\n+    // non-zero\"\n+    static constexpr size_t DEST_LEN_BASE = 387;\n+    static constexpr size_t CERT_LEN_POS = 385;\n+\n+    uint16_t cert_len;\n+    memcpy(&cert_len, &m_private_key.at(CERT_LEN_POS), sizeof(cert_len));\n+    cert_len = be16toh(cert_len);\n+\n+    const size_t dest_len = DEST_LEN_BASE + cert_len;\n+\n+    return Binary{m_private_key.begin(), m_private_key.begin() + dest_len};\n+}\n+\n+void Session::CreateIfNotCreatedAlready()\n+{\n+    std::string errmsg;\n+    if (m_control_sock.IsConnected(errmsg)) {\n+        return;\n+    }\n+\n+    Log(\"Creating SAM session with %s\", m_control_host.ToString());\n+\n+    Sock sock = Hello();\n+\n+    const auto& [read_ok, data] = ReadBinaryFile(m_private_key_file);\n+    if (read_ok) {\n+        m_private_key.assign(data.begin(), data.end());\n+    } else {\n+        GenerateAndSavePrivateKey(sock);\n+    }\n+\n+    const std::string& session_id = GetRandHash().GetHex().substr(0, 10); // full is an overkill, too verbose in the logs\n+    const std::string& private_key_b64 = SwapBase64(EncodeBase64(m_private_key));\n+\n+    SendRequestAndGetReply(sock, strprintf(\"SESSION CREATE STYLE=STREAM ID=%s DESTINATION=%s\",\n+                                           session_id, private_key_b64));\n+\n+    m_my_addr = CService(DestBinToAddr(MyDestination()), Params().GetDefaultPort());\n+    m_session_id = session_id;\n+    m_control_sock = std::move(sock);\n+\n+    LogPrintf(\"I2P: SAM session created: session id=%s, my address=%s\\n\", m_session_id,\n+              m_my_addr.ToString());\n+}\n+\n+Sock Session::StreamAccept()\n+{\n+    Sock sock = Hello();\n+\n+    const Reply& reply = SendRequestAndGetReply(\n+        sock, strprintf(\"STREAM ACCEPT ID=%s SILENT=false\", m_session_id), false);\n+\n+    const std::string& result = reply.Get(\"RESULT\");\n+\n+    if (result == \"OK\") {\n+        return sock;\n+    }\n+\n+    if (result == \"INVALID_ID\") {\n+        // If our session id is invalid, then force session re-creation on next usage.\n+        Disconnect();\n+    }\n+\n+    throw std::runtime_error(strprintf(\"\\\"%s\\\"\", reply.full));\n+}\n+\n+void Session::Disconnect()\n+{\n+    if (m_control_sock.Get() != INVALID_SOCKET) {\n+        if (m_session_id.empty()) {\n+            Log(\"Destroying incomplete session\");\n+        } else {\n+            Log(\"Destroying session %s\", m_session_id);\n+        }\n+    }\n+    m_control_sock.Reset();\n+    m_session_id.clear();\n+}\n+} // namespace sam\n+} // namespace i2p"
      },
      {
        "sha": "8fafe0a4d01cd2389d6068e6ac716716e03586a3",
        "filename": "src/i2p.h",
        "status": "added",
        "additions": 260,
        "deletions": 0,
        "changes": 260,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/i2p.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/i2p.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.h?ref=c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "patch": "@@ -0,0 +1,260 @@\n+// Copyright (c) 2020-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_I2P_H\n+#define BITCOIN_I2P_H\n+\n+#include <compat.h>\n+#include <fs.h>\n+#include <netaddress.h>\n+#include <sync.h>\n+#include <threadinterrupt.h>\n+#include <util/sock.h>\n+\n+#include <optional>\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+namespace i2p {\n+\n+/**\n+ * Binary data.\n+ */\n+using Binary = std::vector<uint8_t>;\n+\n+/**\n+ * An established connection with another peer.\n+ */\n+struct Connection {\n+    /** Connected socket. */\n+    Sock sock;\n+\n+    /** Our I2P address. */\n+    CService me;\n+\n+    /** The peer's I2P address. */\n+    CService peer;\n+};\n+\n+namespace sam {\n+\n+/**\n+ * I2P SAM session.\n+ */\n+class Session\n+{\n+public:\n+    /**\n+     * Construct a session. This will not initiate any IO, the session will be lazily created\n+     * later when first used.\n+     * @param[in] private_key_file Path to a private key file. If the file does not exist then the\n+     * private key will be generated and saved into the file.\n+     * @param[in] control_host Location of the SAM proxy.\n+     * @param[in,out] interrupt If this is signaled then all operations are canceled as soon as\n+     * possible and executing methods throw an exception. Notice: only a pointer to the\n+     * `CThreadInterrupt` object is saved, so it must not be destroyed earlier than this\n+     * `Session` object.\n+     */\n+    Session(const fs::path& private_key_file,\n+            const CService& control_host,\n+            CThreadInterrupt* interrupt);\n+\n+    /**\n+     * Destroy the session, closing the internally used sockets. The sockets that have been\n+     * returned by `Accept()` or `Connect()` will not be closed, but they will be closed by\n+     * the SAM proxy because the session is destroyed. So they will return an error next time\n+     * we try to read or write to them.\n+     */\n+    ~Session();\n+\n+    /**\n+     * Start listening for an incoming connection.\n+     * @param[out] conn Upon successful completion the `sock` and `me` members will be set\n+     * to the listening socket and address.\n+     * @return true on success\n+     */\n+    bool Listen(Connection& conn);\n+\n+    /**\n+     * Wait for and accept a new incoming connection.\n+     * @param[in,out] conn The `sock` member is used for waiting and accepting. Upon successful\n+     * completion the `peer` member will be set to the address of the incoming peer.\n+     * @return true on success\n+     */\n+    bool Accept(Connection& conn);\n+\n+    /**\n+     * Connect to an I2P peer.\n+     * @param[in] to Peer to connect to.\n+     * @param[out] conn Established connection. Only set if `true` is returned.\n+     * @param[out] proxy_error If an error occurs due to proxy or general network failure, then\n+     * this is set to `true`. If an error occurs due to unreachable peer (likely peer is down), then\n+     * it is set to `false`. Only set if `false` is returned.\n+     * @return true on success\n+     */\n+    bool Connect(const CService& to, Connection& conn, bool& proxy_error);\n+\n+private:\n+    /**\n+     * A reply from the SAM proxy.\n+     */\n+    struct Reply {\n+        /**\n+         * Full, unparsed reply.\n+         */\n+        std::string full;\n+\n+        /**\n+         * Request, used for detailed error reporting.\n+         */\n+        std::string request;\n+\n+        /**\n+         * A map of keywords from the parsed reply.\n+         * For example, if the reply is \"A=X B C=YZ\", then the map will be\n+         * keys[\"A\"] == \"X\"\n+         * keys[\"B\"] == (empty std::optional)\n+         * keys[\"C\"] == \"YZ\"\n+         */\n+        std::unordered_map<std::string, std::optional<std::string>> keys;\n+\n+        /**\n+         * Get the value of a given key.\n+         * For example if the reply is \"A=X B\" then:\n+         * Value(\"A\") -> \"X\"\n+         * Value(\"B\") -> throws\n+         * Value(\"C\") -> throws\n+         * @param[in] key Key whose value to retrieve\n+         * @returns the key's value\n+         * @throws std::runtime_error if the key is not present or if it has no value\n+         */\n+        std::string Get(const std::string& key) const;\n+    };\n+\n+    /**\n+     * Log a message in the `BCLog::I2P` category.\n+     * @param[in] fmt printf(3)-like format string.\n+     * @param[in] args printf(3)-like arguments that correspond to `fmt`.\n+     */\n+    template <typename... Args>\n+    void Log(const std::string& fmt, const Args&... args) const;\n+\n+    /**\n+     * Send request and get a reply from the SAM proxy.\n+     * @param[in] sock A socket that is connected to the SAM proxy.\n+     * @param[in] request Raw request to send, a newline terminator is appended to it.\n+     * @param[in] check_result_ok If true then after receiving the reply a check is made\n+     * whether it contains \"RESULT=OK\" and an exception is thrown if it does not.\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    Reply SendRequestAndGetReply(const Sock& sock,\n+                                 const std::string& request,\n+                                 bool check_result_ok = true) const;\n+\n+    /**\n+     * Open a new connection to the SAM proxy.\n+     * @return a connected socket\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    Sock Hello() const EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Check the control socket for errors and possibly disconnect.\n+     */\n+    void CheckControlSock();\n+\n+    /**\n+     * Generate a new destination with the SAM proxy and set `m_private_key` to it.\n+     * @param[in] sock Socket to use for talking to the SAM proxy.\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    void DestGenerate(const Sock& sock) EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Generate a new destination with the SAM proxy, set `m_private_key` to it and save\n+     * it on disk to `m_private_key_file`.\n+     * @param[in] sock Socket to use for talking to the SAM proxy.\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    void GenerateAndSavePrivateKey(const Sock& sock) EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Derive own destination from `m_private_key`.\n+     * @see https://geti2p.net/spec/common-structures#destination\n+     * @return an I2P destination\n+     */\n+    Binary MyDestination() const EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Create the session if not already created. Reads the private key file and connects to the\n+     * SAM proxy.\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    void CreateIfNotCreatedAlready() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Open a new connection to the SAM proxy and issue \"STREAM ACCEPT\" request using the existing\n+     * session id. Return the idle socket that is waiting for a peer to connect to us.\n+     * @throws std::runtime_error if an error occurs\n+     */\n+    Sock StreamAccept() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * Destroy the session, closing the internally used sockets.\n+     */\n+    void Disconnect() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\n+\n+    /**\n+     * The name of the file where this peer's private key is stored (in binary).\n+     */\n+    const fs::path m_private_key_file;\n+\n+    /**\n+     * The host and port of the SAM control service.\n+     */\n+    const CService m_control_host;\n+\n+    /**\n+     * Cease network activity when this is signaled.\n+     */\n+    CThreadInterrupt* const m_interrupt;\n+\n+    /**\n+     * Mutex protecting the members that can be concurrently accessed.\n+     */\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * The private key of this peer.\n+     * @see The reply to the \"DEST GENERATE\" command in https://geti2p.net/en/docs/api/samv3\n+     */\n+    Binary m_private_key GUARDED_BY(m_mutex);\n+\n+    /**\n+     * SAM control socket.\n+     * Used to connect to the I2P SAM service and create a session\n+     * (\"SESSION CREATE\"). With the established session id we later open\n+     * other connections to the SAM service to accept incoming I2P\n+     * connections and make outgoing ones.\n+     * See https://geti2p.net/en/docs/api/samv3\n+     */\n+    Sock m_control_sock GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Our .b32.i2p address.\n+     * Derived from `m_private_key`.\n+     */\n+    CService m_my_addr GUARDED_BY(m_mutex);\n+\n+    /**\n+     * SAM session id.\n+     */\n+    std::string m_session_id GUARDED_BY(m_mutex);\n+};\n+\n+} // namespace sam\n+} // namespace i2p\n+\n+#endif /* BITCOIN_I2P_H */"
      },
      {
        "sha": "866213786e188fc964cc2e6ab0b9a047d1bdbf42",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "patch": "@@ -156,6 +156,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::QT, \"qt\"},\n     {BCLog::LEVELDB, \"leveldb\"},\n     {BCLog::VALIDATION, \"validation\"},\n+    {BCLog::I2P, \"i2p\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "436f0cd12e57084f1f72fded6207610321c145fb",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22daa2ecff1acd25426cd46f98f2587d1d324c3/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "patch": "@@ -57,6 +57,7 @@ namespace BCLog {\n         QT          = (1 << 19),\n         LEVELDB     = (1 << 20),\n         VALIDATION  = (1 << 21),\n+        I2P         = (1 << 22),\n         ALL         = ~(uint32_t)0,\n     };\n "
      }
    ]
  },
  {
    "sha": "76c35c60f338937071bcfad4211ef7254d3830ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmMzNWM2MGYzMzg5MzcwNzFiY2ZhZDQyMTFlZjcyNTRkMzgzMGVj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-12-04T17:03:05Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:46Z"
      },
      "message": "init: introduce I2P connectivity options\n\nIntroduce two new options to reach the I2P network:\n\n* `-i2psam=<ip:port>` point to the I2P SAM proxy. If this is set then\n  the I2P network is considered reachable and we can make outgoing\n  connections to I2P peers via that proxy. We listen for and accept\n  incoming connections from I2P peers if the below is set in addition to\n  `-i2psam=<ip:port>`\n\n* `-i2pacceptincoming` if this is set together with `-i2psam=<ip:port>`\n  then we accept incoming I2P connections via the I2P SAM proxy.",
      "tree": {
        "sha": "a4ab3dfbbb2f34ae520e000b8f04af36de9414c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4ab3dfbbb2f34ae520e000b8f04af36de9414c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76c35c60f338937071bcfad4211ef7254d3830ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjIACgkQVN8G9ktV\ny79taiAAhjl6UEgOgaOwoP9U9Ai22Z5G2qHRsw2njpF7QN89BsvuFdtd4K99lMG9\nfuBq8fLt5Pn9LLCus9eJpWt1z5oejJQpwfUTjLav5MerQUhH+cm3FT4gzV/IUrrF\naQZR6z/pHKcyCA8H6OKKj0j8Tl9RQlTygYa3oTsJ2wZfawMrfS8U1m717f7ZPd/U\nslSmFWyAiv1EoMn6wknFwXp+2qXfK0u+tw5QZw5uOw7cmvLbS/TIGHU+AUB92Xdi\nzLaM9jpiYowgMFssT9bwBlov1nYBnIaC2PdsvVPldDJqqNTrxAw7Xq6tbw999+wB\nAhU9x6So2CziK7FjB8jrOMCqmzVYTBz+y47/8nL70aBQ2fm+AYnWiUqBuVB4dIN7\n9XkH5TalccdyQ3diz0Yo79qM2YpqA/CX9QtGWZ2p/GHorbJms2t2KxaoRp3LZj2e\npNXLKoCZRglRsyHnOSvriAYuzfuyFHwwjS5EnQUoeg0ePBzjZCHeRM7ci3lhjkmr\nExXrL3STnK+/kNtKn/tSaTxHQcrQPNs1CSypvdLtibRcUZChzVdwQu/RlObyYvHf\nNEg+JQqpys6xHlGH+FyxPzRjL3eiHOcTv23PQth71zngLPGF9mgRCCfv5eKHdkmn\n22pSN9lbnvRa8/gNqGfH+YXMTkGJwv9cmmS4+WLyiCCcxc+hbUMPxDG9NauzR6bl\nPnj+vXRL6J4a7I/W0Cp1+fuR28BLUEO55j1fGJE5SY8AM7D+qF3pVHUZkl9Hbb10\ncoIiu3Bi+4ZAWgnIApxhJeV8HnYC2ynDIqr/dQmxCMsuKJtZ1XjLfwaNR1KTucqM\nNbEYWDUEXAmWpgw8bsRmtgAcqEwd20Nj2PO1SVC6HvyL2XUVJ4vVXjogkKVHJMbe\nQiifSCOXCxLgwldcFZpK4HRU5pF7K3biNwCSDQb3oXdWW0iGfVCYO8utivH5N49d\nLbrUlWA/LXhxP5HyG2Fto8xL021SDinxzuwNZJjDpMJQ92lx/4qJD4Rv6kO1CDzE\nbF1z0/9s0x/q6U/xNaLbdvIEPLt+LUS1HmnrvkfOOms5wmouv7gJUQ6hPt6GEjzt\nG3oJWJY3Jna3tXdDFTwggKTD4pJBUe+4mlh4G/MaJzNGCGbTe4eYM7/4z/fF7BeF\nYXZh6i6fH2TUfqZ1Uw+zatIN8ifMWHO80BZ0MgBXuNWRPRdOCPGxmRPIHL9onRDa\nZ+TmAR7h3N/tQ5JdMVYGdPCmoGEIzt6pNTN4A6OSPZt9Yo94bFgvb81ieVSPNYi+\nLUopj9dnZ0I8qgJ4xm5yhS0+gjQMSRiHI3MMfegCOGWfsrttG3q16NaG5udwg/xM\nPqSQ7SEdFoNdT6/qXuhNG1SpXnYXYw==\n=3HRa\n-----END PGP SIGNATURE-----",
        "payload": "tree a4ab3dfbbb2f34ae520e000b8f04af36de9414c6\nparent c22daa2ecff1acd25426cd46f98f2587d1d324c3\nauthor Vasil Dimov <vd@FreeBSD.org> 1607101385 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619186 +0100\n\ninit: introduce I2P connectivity options\n\nIntroduce two new options to reach the I2P network:\n\n* `-i2psam=<ip:port>` point to the I2P SAM proxy. If this is set then\n  the I2P network is considered reachable and we can make outgoing\n  connections to I2P peers via that proxy. We listen for and accept\n  incoming connections from I2P peers if the below is set in addition to\n  `-i2psam=<ip:port>`\n\n* `-i2pacceptincoming` if this is set together with `-i2psam=<ip:port>`\n  then we accept incoming I2P connections via the I2P SAM proxy.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c35c60f338937071bcfad4211ef7254d3830ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76c35c60f338937071bcfad4211ef7254d3830ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c35c60f338937071bcfad4211ef7254d3830ec/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22daa2ecff1acd25426cd46f98f2587d1d324c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c22daa2ecff1acd25426cd46f98f2587d1d324c3"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 76,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a80adf30ea93d543365b058d4ca5f95a14e4efe0",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -64,6 +64,7 @@ Subdirectory       | File(s)               | Description\n `./`               | `ip_asn.map`          | IP addresses to Autonomous System Numbers (ASNs) mapping used for bucketing of the peers; path can be specified with the `-asmap` option\n `./`               | `mempool.dat`         | Dump of the mempool's transactions\n `./`               | `onion_v3_private_key` | Cached Tor onion service private key for `-listenonion` option\n+`./`               | `i2p_private_key`     | Private key that corresponds to our I2P address. When `-i2psam=` is specified the contents of this file is used to identify ourselves for making outgoing connections to I2P peers and possibly accepting incoming ones. Automatically generated if it does not exist.\n `./`               | `peers.dat`           | Peer IP address database (custom format)\n `./`               | `settings.json`       | Read-write settings set through GUI or RPC interfaces, augmenting manual settings from [bitcoin.conf](bitcoin-conf.md). File is created automatically if read-write settings storage is not disabled with `-nosettings` option. Path can be specified with `-settings` option\n `./`               | `.cookie`             | Session RPC authentication cookie; if used, created at start and deleted on shutdown; can be specified by `-rpccookiefile` option"
      },
      {
        "sha": "5adebe3b1baf1691fe968dcbec3a3c65bcc45ee5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -447,6 +447,8 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with ipv4 or ipv6 but not onion and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -847,6 +849,9 @@ void InitParameterInteraction(ArgsManager& args)\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -discover=0\\n\", __func__);\n         if (args.SoftSetBoolArg(\"-listenonion\", false))\n             LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -listenonion=0\\n\", __func__);\n+        if (args.SoftSetBoolArg(\"-i2pacceptincoming\", false)) {\n+            LogPrintf(\"%s: parameter interaction: -listen=0 -> setting -i2pacceptincoming=0\\n\", __func__);\n+        }\n     }\n \n     if (args.IsArgSet(\"-externalip\")) {\n@@ -1990,6 +1995,21 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n             connOptions.m_specified_outgoing = connect;\n         }\n     }\n+\n+    const std::string& i2psam_arg = args.GetArg(\"-i2psam\", \"\");\n+    if (!i2psam_arg.empty()) {\n+        CService addr;\n+        if (!Lookup(i2psam_arg, addr, 7656, fNameLookup) || !addr.IsValid()) {\n+            return InitError(strprintf(_(\"Invalid -i2psam address or hostname: '%s'\"), i2psam_arg));\n+        }\n+        SetReachable(NET_I2P, true);\n+        SetProxy(NET_I2P, proxyType{addr});\n+    } else {\n+        SetReachable(NET_I2P, false);\n+    }\n+\n+    connOptions.m_i2p_accept_incoming = args.GetBoolArg(\"-i2pacceptincoming\", true);\n+\n     if (!node.connman->Start(*node.scheduler, connOptions)) {\n         return false;\n     }"
      },
      {
        "sha": "42505a1139c25fb42aa864fa454d646dea378dc8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -2374,6 +2374,12 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n         return false;\n     }\n \n+    proxyType i2p_sam;\n+    if (GetProxy(NET_I2P, i2p_sam)) {\n+        m_i2p_sam_session = std::make_unique<i2p::sam::Session>(GetDataDir() / \"i2p_private_key\",\n+                                                                i2p_sam.proxy, &interruptNet);\n+    }\n+\n     for (const auto& strDest : connOptions.vSeedNodes) {\n         AddAddrFetch(strDest);\n     }"
      },
      {
        "sha": "ab3111b0a2bff42e7363b750f9b77a81ce9c0a3a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -14,6 +14,7 @@\n #include <compat.h>\n #include <crypto/siphash.h>\n #include <hash.h>\n+#include <i2p.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n #include <optional.h>\n@@ -831,6 +832,7 @@ class CConnman\n         std::vector<std::string> m_specified_outgoing;\n         std::vector<std::string> m_added_nodes;\n         std::vector<bool> m_asmap;\n+        bool m_i2p_accept_incoming;\n     };\n \n     void Init(const Options& connOptions) {\n@@ -1221,8 +1223,20 @@ class CConnman\n     Mutex mutexMsgProc;\n     std::atomic<bool> flagInterruptMsgProc{false};\n \n+    /**\n+     * This is signaled when network activity should cease.\n+     * A pointer to it is saved in `m_i2p_sam_session`, so make sure that\n+     * the lifetime of `interruptNet` is not shorter than\n+     * the lifetime of `m_i2p_sam_session`.\n+     */\n     CThreadInterrupt interruptNet;\n \n+    /**\n+     * I2P SAM session.\n+     * Used to accept incoming and make outgoing I2P connections.\n+     */\n+    std::unique_ptr<i2p::sam::Session> m_i2p_sam_session;\n+\n     std::thread threadDNSAddressSeed;\n     std::thread threadSocketHandler;\n     std::thread threadOpenAddedConnections;"
      },
      {
        "sha": "e80270d0388e66b36b06e34c5027c99f40ef3c9c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -546,7 +546,7 @@ static UniValue GetNetworksInfo()\n     UniValue networks(UniValue::VARR);\n     for (int n = 0; n < NET_MAX; ++n) {\n         enum Network network = static_cast<enum Network>(n);\n-        if (network == NET_UNROUTABLE || network == NET_I2P || network == NET_CJDNS || network == NET_INTERNAL) continue;\n+        if (network == NET_UNROUTABLE || network == NET_CJDNS || network == NET_INTERNAL) continue;\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);"
      },
      {
        "sha": "8bee43b8adab7d6831b8f442a80ccc632a2ab729",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 34,
        "deletions": 7,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c35c60f338937071bcfad4211ef7254d3830ec/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c35c60f338937071bcfad4211ef7254d3830ec/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=76c35c60f338937071bcfad4211ef7254d3830ec",
        "patch": "@@ -49,9 +49,10 @@\n NET_IPV4 = \"ipv4\"\n NET_IPV6 = \"ipv6\"\n NET_ONION = \"onion\"\n+NET_I2P = \"i2p\"\n \n # Networks returned by RPC getnetworkinfo, defined in src/rpc/net.cpp::GetNetworksInfo()\n-NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION})\n+NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P})\n \n \n class ProxyTest(BitcoinTestFramework):\n@@ -90,11 +91,15 @@ def setup_nodes(self):\n             self.serv3 = Socks5Server(self.conf3)\n             self.serv3.start()\n \n+        # We will not try to connect to this.\n+        self.i2p_sam = ('127.0.0.1', 7656)\n+\n         # Note: proxies are not used to connect to local nodes. This is because the proxy to\n         # use is based on CService.GetNetwork(), which returns NET_UNROUTABLE for localhost.\n         args = [\n             ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-proxyrandomize=1'],\n-            ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),'-proxyrandomize=0'],\n+            ['-listen', '-proxy=%s:%i' % (self.conf1.addr),'-onion=%s:%i' % (self.conf2.addr),\n+                '-i2psam=%s:%i' % (self.i2p_sam), '-i2pacceptincoming=0', '-proxyrandomize=0'],\n             ['-listen', '-proxy=%s:%i' % (self.conf2.addr),'-proxyrandomize=1'],\n             []\n         ]\n@@ -199,9 +204,16 @@ def networks_dict(d):\n         n0 = networks_dict(self.nodes[0].getnetworkinfo())\n         assert_equal(NETWORKS, n0.keys())\n         for net in NETWORKS:\n-            assert_equal(n0[net]['proxy'], '%s:%i' % (self.conf1.addr))\n-            assert_equal(n0[net]['proxy_randomize_credentials'], True)\n+            if net == NET_I2P:\n+                expected_proxy = ''\n+                expected_randomize = False\n+            else:\n+                expected_proxy = '%s:%i' % (self.conf1.addr)\n+                expected_randomize = True\n+            assert_equal(n0[net]['proxy'], expected_proxy)\n+            assert_equal(n0[net]['proxy_randomize_credentials'], expected_randomize)\n         assert_equal(n0['onion']['reachable'], True)\n+        assert_equal(n0['i2p']['reachable'], False)\n \n         n1 = networks_dict(self.nodes[1].getnetworkinfo())\n         assert_equal(NETWORKS, n1.keys())\n@@ -211,21 +223,36 @@ def networks_dict(d):\n         assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n         assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n         assert_equal(n1['onion']['reachable'], True)\n+        assert_equal(n1['i2p']['proxy'], '%s:%i' % (self.i2p_sam))\n+        assert_equal(n1['i2p']['proxy_randomize_credentials'], False)\n+        assert_equal(n1['i2p']['reachable'], True)\n \n         n2 = networks_dict(self.nodes[2].getnetworkinfo())\n         assert_equal(NETWORKS, n2.keys())\n         for net in NETWORKS:\n-            assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))\n-            assert_equal(n2[net]['proxy_randomize_credentials'], True)\n+            if net == NET_I2P:\n+                expected_proxy = ''\n+                expected_randomize = False\n+            else:\n+                expected_proxy = '%s:%i' % (self.conf2.addr)\n+                expected_randomize = True\n+            assert_equal(n2[net]['proxy'], expected_proxy)\n+            assert_equal(n2[net]['proxy_randomize_credentials'], expected_randomize)\n         assert_equal(n2['onion']['reachable'], True)\n+        assert_equal(n2['i2p']['reachable'], False)\n \n         if self.have_ipv6:\n             n3 = networks_dict(self.nodes[3].getnetworkinfo())\n             assert_equal(NETWORKS, n3.keys())\n             for net in NETWORKS:\n-                assert_equal(n3[net]['proxy'], '[%s]:%i' % (self.conf3.addr))\n+                if net == NET_I2P:\n+                    expected_proxy = ''\n+                else:\n+                    expected_proxy = '[%s]:%i' % (self.conf3.addr)\n+                assert_equal(n3[net]['proxy'], expected_proxy)\n                 assert_equal(n3[net]['proxy_randomize_credentials'], False)\n             assert_equal(n3['onion']['reachable'], False)\n+            assert_equal(n3['i2p']['reachable'], False)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTU5YmQxNDA0ZmJmNzRiMGQwOWZlOTAxOWE5MzA1Y2I0ZTE1MWNl",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-12-09T04:24:09Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:46Z"
      },
      "message": "net: add I2P to the reachability map\n\nUpdate `CNetAddr::GetReachabilityFrom()` to recognize the I2P network so\nthat we would prefer to advertise our I2P address to I2P peers.",
      "tree": {
        "sha": "d5de9c3363139433094e1f2cf4d4230bb1c2bdbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5de9c3363139433094e1f2cf4d4230bb1c2bdbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjIACgkQVN8G9ktV\ny7/JUB/+LwfumyS4UVY27GoJ+ldetOMz96YhhrU5vVVs95JnAIaTuKxfPSmcZ83p\nNSpEJE50NQ9SjjkkZInRtDLHuTBeMnbFIYRtHVlVm326xpWjmNJcBsFpU7kOgPMh\nvtfkkQ8fLoTuOSco+D9SnBgWCxA9UESJ8/IIlxoYUqROAvjtyMZKXKGjSTLxP0ZY\n5YIHOH611ut37Dk+MaDHBQ4LlXmJVOu2foVJHATY/dM0CxndDAZQf2Kuby+AAUt8\nZMT+7f0wQBshOz/oyUY4biUUvzc5Iqe65vQjqyWqrPGqhoVMUSZoW5z9o5VvJL0s\nWLsY0ApAvOZFo6mwQdKUNQzrdv6XlCqww8g5HHfGZT5YSw1BD1Kjl2Mg0ga6hjip\n/T4vSRsFb6nNGVXAwcASF5iGg01EpDGNsuGm7x0gaAsnsTArkYo735ERyfoEn1AN\nSMwgvaDyVU+srw2LDqoZTzUS4wGcilH4ATolV5I/Vgag3OpWo81jmKlO/a+lJtox\nvN9jXYHkbHzBYvsTgZACtdtC5Npz+KzqeeuYoa7BFdbxL4xCWfNZWhWzIiVSgswl\noJjqQnEZfzXtC4vR/ep1vC9SY+1lKOzPAShxUHS2bB3WBIJtMj/Du/v5mjk9qj1C\n8sl2FvTt/W/6/7oiUoYX6P08B/kch4iUBrFN1ZaLaJF7UglHTXbw86s/Wv88LLq6\nRQjRQ/SnZU0kr3iKWxU8jEp6j2WV/E/C1CZnuDZUxgO8zPze68yyBfUku3vqlmfK\nC+g3jG36+BnH0COgZ4lzJoHEbMdc6/G2O55IyRmyaVgz5TB5c9lS5/2AqIFzuOVx\n+WV1xDs69AxQHIBgXDrdmq7g6zMK7IVH+Dq0REI5HZjw8qwdaZZBLRYVzKZ8ejUs\nhiiqswqSHNDvf4CXl5zfh1D43zCP5CMo94HoGIhO2VLAV2WQ4Fg+Jr2SYVEpvp0A\nhRuU0qkaKbCHjwb0nFy0Lj4y8YQ90rCRc+Gs/KXicwZ3KD0kuvrT+EpGlse5Njjy\nfsa7YxvO8jsXNuNHqOQlaxLs14cfhBVgDWByl2JTuCjfWk+gm3JoTyDvbd1rKPTW\nzBCEveIhtnd7EV491I5enzvuJ0m2/TL5w+LyesanrkcrOfRZW9wpYffab32qqFqs\nexjbRLRDRj4GLGHZ0dIEC6Ioqs26mlxTi4LjgnCDrKsWlrp/LhUPLtiE8AmoF1Os\n3Yyi1Xifgc4CrnCFFJBzTuilDfB124cWH2zrFy3mOB6LaH9KPbzzKMkweUxJKNZk\n+bQ6y3h7SOs1d9a9g9AFE+YMYNXMlzk3Tps5yIYXFJzPahmHPrfSMYQm4diZHTRd\nCjn9dlFXR/CySn/oF6RwzGGkIOmITQ==\n=VYq8\n-----END PGP SIGNATURE-----",
        "payload": "tree d5de9c3363139433094e1f2cf4d4230bb1c2bdbf\nparent 76c35c60f338937071bcfad4211ef7254d3830ec\nauthor Vasil Dimov <vd@FreeBSD.org> 1607487849 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619186 +0100\n\nnet: add I2P to the reachability map\n\nUpdate `CNetAddr::GetReachabilityFrom()` to recognize the I2P network so\nthat we would prefer to advertise our I2P address to I2P peers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9559bd1404fbf74b0d09fe9019a9305cb4e151ce/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76c35c60f338937071bcfad4211ef7254d3830ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c35c60f338937071bcfad4211ef7254d3830ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76c35c60f338937071bcfad4211ef7254d3830ec"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "69edc15c66c0b922bdec578f72bc44c496293552",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9559bd1404fbf74b0d09fe9019a9305cb4e151ce/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9559bd1404fbf74b0d09fe9019a9305cb4e151ce/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
        "patch": "@@ -878,6 +878,11 @@ int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n         case NET_IPV4:   return REACH_IPV4; // Tor users can connect to IPv4 as well\n         case NET_ONION:    return REACH_PRIVATE;\n         }\n+    case NET_I2P:\n+        switch (ourNet) {\n+        case NET_I2P: return REACH_PRIVATE;\n+        default: return REACH_DEFAULT;\n+        }\n     case NET_TEREDO:\n         switch(ourNet) {\n         default:          return REACH_DEFAULT;"
      }
    ]
  },
  {
    "sha": "0635233a1e7e8c303073430092afd3e0fb0d927b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjM1MjMzYTFlN2U4YzMwMzA3MzQzMDA5MmFmZDNlMGZiMGQ5Mjdi",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-25T13:42:33Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:46Z"
      },
      "message": "net: make outgoing I2P connections from CConnman",
      "tree": {
        "sha": "2ddb61d5d7743937a694f9a38df5bf08eba24383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ddb61d5d7743937a694f9a38df5bf08eba24383"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0635233a1e7e8c303073430092afd3e0fb0d927b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjIACgkQVN8G9ktV\ny78/dh//cPnm07fvn1Zbexv0Y9H82/JKhdDsIMvJjx52y8bcghBb6a15Ta1SIh1R\nzBsSr/1UDIj+TLTFRqcOwhtmKRiCazXYqC8hm1Z+91rKJOOyH00k8Z8rsyGduRMt\nY12R6h1Sq06yvFdlG8z+6VnWoBKh/yk1QrrL8AsCkEG0kP7YVFjD/o0eqbFjQHeI\nb/gIaSzl5pCkB1JQ6aM2r5HFWuDscgHN3S50gOBWS8iAHy+ozuhM4MDxVnA49Py/\nxOuTFOb7c7FAwsvZqo6+rK1pq0tkXhQAXwM7Yzi7KLMUCK2AFVxpcPWVVNEFJ+aA\nEIPwY+ZCmlnFzoDwIonVfebnygI1tKLZTDW4PUQGOIVPHeMRX5r2I+6KcS1VcwH1\nPG1RSyD/36vMQ6TAqhx7Xn84cy+5v48ag82Rl/1juTPc1b9kK1IVgrigt85oUmZe\negmCtrvM6y/CljvBFqJ/rEVizwCVNEMmzVCM9DPF4xkMazsti9p1mjI+nu6YulA8\n/LwikVqarzn9C0oATGpTPgh5q6Inifb/TIwZ91YULXDLNapyU/xocXMG/I2Rg5je\ncqCAYbPfNLCl0ZPEsMWi93j0x/P6rTsjgNu3FWh55Uj9VLwR1ekJdUn45Y2uAOAc\npRMXhf/zzI2PnQhEKudRHkvIu/gxb3noTMl9fLRxODzrzDJsF4nHL0Z9xxJIGBWo\nQ14YgqrMkcGZhSE5E0WNxX7zKf1ffU+bWcDVYUkdOUim3RmjEDZVEp8RYSJUJv/J\nFw9UH1fUpH8nBvDwEa9n8Pep+TWm4uTLOkSbPdLWvNl775a/WewsKDPMYUk8tAAx\n+zvJUMZo//9aYLx4YX69NkHsTFtWQ7SdVBW8IPXibyixvTI2ijNOrpUyBLkNMDEF\nYoJDz2T5vAVmvGCHioaHZJeHAYOr8vt888HtuM8skuEuBhd4vz1ngQEpPesA1nxq\nLtt0SCiMxqwUMsAeD6hAvc4eCbVkjQ302N/2jubCwH0A3dLgm5CZjHH0Oz+dhwvE\nzpAxc0fcY1xno2SuB4EAx6hvWXKG+rHzUQzZtzbNjjObMupYtmkK8G23281MGjg6\nBRJ5CkMtk9nTpt5vrJCu0+Ia3VPLPZ3FFISEo4OKaUp4Stt5HUEL31+1hNMoNI0i\nySHQUXbtgn57SoyKfOpt2QGj6jWXTO/PiVaOyD8TBFG1j12TePZ0uOIYnNQiYdBS\nEQOLeV7bjUKuSWnF65PdZVuSco7zaA5msX0bUSRU9+XpkxInitCOq7RF4C4nsP1R\n2R5P+R3suq29xJc/sPgOJSfygQEwSFeME4myXwk6SQL5OAWA9VYKrV0GqoiXeg2h\nShq8Jij0f49SAnZrDF6kNEruuYfowQ==\n=z/Ei\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ddb61d5d7743937a694f9a38df5bf08eba24383\nparent 9559bd1404fbf74b0d09fe9019a9305cb4e151ce\nauthor Vasil Dimov <vd@FreeBSD.org> 1606311753 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619186 +0100\n\nnet: make outgoing I2P connections from CConnman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0635233a1e7e8c303073430092afd3e0fb0d927b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0635233a1e7e8c303073430092afd3e0fb0d927b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0635233a1e7e8c303073430092afd3e0fb0d927b/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9559bd1404fbf74b0d09fe9019a9305cb4e151ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9559bd1404fbf74b0d09fe9019a9305cb4e151ce"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b4f0a41ffbf8da345f71dc79bf405639103159bb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0635233a1e7e8c303073430092afd3e0fb0d927b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0635233a1e7e8c303073430092afd3e0fb0d927b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0635233a1e7e8c303073430092afd3e0fb0d927b",
        "patch": "@@ -421,10 +421,20 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     bool connected = false;\n     std::unique_ptr<Sock> sock;\n     proxyType proxy;\n+    CAddress addr_bind;\n+    assert(!addr_bind.IsValid());\n+\n     if (addrConnect.IsValid()) {\n         bool proxyConnectionFailed = false;\n \n-        if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n+        if (addrConnect.GetNetwork() == NET_I2P && m_i2p_sam_session.get() != nullptr) {\n+            i2p::Connection conn;\n+            if (m_i2p_sam_session->Connect(addrConnect, conn, proxyConnectionFailed)) {\n+                connected = true;\n+                sock = std::make_unique<Sock>(std::move(conn.sock));\n+                addr_bind = CAddress{conn.me, NODE_NONE};\n+            }\n+        } else if (GetProxy(addrConnect.GetNetwork(), proxy)) {\n             sock = CreateSock(proxy.proxy);\n             if (!sock) {\n                 return nullptr;\n@@ -464,7 +474,9 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     // Add node\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n-    CAddress addr_bind = GetBindAddress(sock->Get());\n+    if (!addr_bind.IsValid()) {\n+        addr_bind = GetBindAddress(sock->Get());\n+    }\n     CNode* pnode = new CNode(id, nLocalServices, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n "
      }
    ]
  },
  {
    "sha": "b905363fa8b0bb03fe34b53b5410880f42e0af39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTA1MzYzZmE4YjBiYjAzZmUzNGI1M2I1NDEwODgwZjQyZTBhZjM5",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-11-24T10:28:52Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:47Z"
      },
      "message": "net: accept incoming I2P connections from CConnman",
      "tree": {
        "sha": "6fa648b23bdd128a0b845544292ce4d94bfeb913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fa648b23bdd128a0b845544292ce4d94bfeb913"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b905363fa8b0bb03fe34b53b5410880f42e0af39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjMACgkQVN8G9ktV\ny7+JCh/+JKy1W+n9Q2u60/Mpex+xgcUj9eqHvx8WW8bQos4x3iX3HtCYIKMjuRnA\nr9n7ObTPwC8CLhDYvh7yZbBgQ7Rgzycu5b5N/+RAGInUeIIEjhyBxuzqCiIhmdry\nIXWcBQxHEwRmc9I03J9QgpS3W1TMi6RgxhCP8bQxeE57erPxLhArA1azoLThEP+b\nG/nKeOkuUgRXeMjdVeTamMmQFNlwODpjmU8vAI7ZrEb8StIgljMuT9ycld9iss8M\nKVGnS81P9D4uIYTl8gtsYLsIGK0yJMy05N2GKAx6vMU3LBP0UsQOxiOEzwdsIuIO\ngcfSYh/tHNPLgJPFcBEVs2wcOZ/X/AyEbgXepT7vbkYGFfpvDlMm0YjZf9GcJBow\n5nlihRSaVJY6KNvWYbQ7y207v4mf33hOyLw1uoRv6b0SkLWGKiOje+gkycWVqtM5\nVeXIgqTeJXJ3z+UNFaH98DR8rFkzq+gY/N2wzcOYaXRuSigB9b6CivI9DfDHA3nU\nLjrV32aQCz/lLIFwJGBq3iO/KmGrzFn0itS6SV/nzcc+E2dX9BUG8uQgHtXbnfe7\nSUzxsKDiWE+UUt9PGdb95mhFEunmU36WyGt+A7JctbiqaXVjM/iu2oi0olNgZ0nh\nKfTlT09q7w82XpxdjTGXL5L7M7RaK/bjdk888RtyRfOs/C6uGteORNQqEYdv2P4h\ndxLVw0CzfzlQ8ptO/GwK23y7tVIJqUSElOYFkXYMqGJP9WwcyXAR6EWOlX2LPFWh\nZA1AhGCKQ61lHBDSUlqGXuhYWKksQ7Y6LPvn7Cgr23+aZDS/aNUN2S0eKDBjr+3n\nqgm88wHAtE6MmYmoRrhOkJdOj9IdldejrLLVuLCYDwzNdD+t59x7toN3gqh1yupz\nP+gij7Qj/YYpcvT2xCGwlX5numwRioFz2oT/tHXJCfbV9clZM5dqCHcGkCAiA5+0\neoFUJHGXEr/MWYlcv917+g9hVCe1+ZuRJhF2AfoM84nR8eyn1JTAAsD1hwK2HYXA\nLMUe6HDkTlh0ImzcK9UX7nDQldVUMhoAUiH5qA5ZwvZhyvqosprlO2FtCy79DNHc\nMhKIMownXzAvIuNxBwKFC17jGofkjqmpBQGhWsu7wUJgHkc+136ghoCvBOQK3FMZ\nvu9MSzbzDyKd5FEGDkyVorq+JYjum3TZLmUJKYY/ZVLxCBO8ppHOR2ZVU6RhhHyv\nKrOuXMaLJNLCfx9IgI8w6xXO3uje6ap85Sp+1XlaxdCKqzYUdXSIqzeEEI8DSL0m\nt1LmHFkbMpSd/V1AOdPJlWylPwYvoblGghs2Sk2kZRmoGtKJEBIkJI34jt1RwIqd\niv4mEQPLgJAdS8ivTkW5bPAHkzRsEw==\n=Rag5\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fa648b23bdd128a0b845544292ce4d94bfeb913\nparent 0635233a1e7e8c303073430092afd3e0fb0d927b\nauthor Vasil Dimov <vd@FreeBSD.org> 1606213732 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619187 +0100\n\nnet: accept incoming I2P connections from CConnman\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b905363fa8b0bb03fe34b53b5410880f42e0af39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b905363fa8b0bb03fe34b53b5410880f42e0af39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b905363fa8b0bb03fe34b53b5410880f42e0af39/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0635233a1e7e8c303073430092afd3e0fb0d927b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0635233a1e7e8c303073430092afd3e0fb0d927b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0635233a1e7e8c303073430092afd3e0fb0d927b"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6dcff7e32e0320dad1dd9ad4489f5a3979dccb09",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b905363fa8b0bb03fe34b53b5410880f42e0af39/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b905363fa8b0bb03fe34b53b5410880f42e0af39/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b905363fa8b0bb03fe34b53b5410880f42e0af39",
        "patch": "@@ -14,6 +14,7 @@\n #include <compat.h>\n #include <consensus/consensus.h>\n #include <crypto/sha256.h>\n+#include <i2p.h>\n #include <net_permissions.h>\n #include <netbase.h>\n #include <node/ui_interface.h>\n@@ -2187,6 +2188,45 @@ void CConnman::ThreadMessageHandler()\n     }\n }\n \n+void CConnman::ThreadI2PAcceptIncoming()\n+{\n+    static constexpr auto err_wait_begin = 1s;\n+    static constexpr auto err_wait_cap = 5min;\n+    auto err_wait = err_wait_begin;\n+\n+    bool advertising_listen_addr = false;\n+    i2p::Connection conn;\n+\n+    while (!interruptNet) {\n+\n+        if (!m_i2p_sam_session->Listen(conn)) {\n+            if (advertising_listen_addr && conn.me.IsValid()) {\n+                RemoveLocal(conn.me);\n+                advertising_listen_addr = false;\n+            }\n+\n+            interruptNet.sleep_for(err_wait);\n+            if (err_wait < err_wait_cap) {\n+                err_wait *= 2;\n+            }\n+\n+            continue;\n+        }\n+\n+        if (!advertising_listen_addr) {\n+            AddLocal(conn.me, LOCAL_BIND);\n+            advertising_listen_addr = true;\n+        }\n+\n+        if (!m_i2p_sam_session->Accept(conn)) {\n+            continue;\n+        }\n+\n+        CreateNodeFromAcceptedSocket(conn.sock.Release(), NetPermissionFlags::PF_NONE,\n+                                     CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n+    }\n+}\n+\n bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError, NetPermissionFlags permissions)\n {\n     int nOne = 1;\n@@ -2472,6 +2512,12 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     // Process messages\n     threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n+    if (connOptions.m_i2p_accept_incoming && m_i2p_sam_session.get() != nullptr) {\n+        threadI2PAcceptIncoming =\n+            std::thread(&TraceThread<std::function<void()>>, \"i2paccept\",\n+                        std::function<void()>(std::bind(&CConnman::ThreadI2PAcceptIncoming, this)));\n+    }\n+\n     // Dump network addresses\n     scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n@@ -2519,6 +2565,9 @@ void CConnman::Interrupt()\n \n void CConnman::StopThreads()\n {\n+    if (threadI2PAcceptIncoming.joinable()) {\n+        threadI2PAcceptIncoming.join();\n+    }\n     if (threadMessageHandler.joinable())\n         threadMessageHandler.join();\n     if (threadOpenConnections.joinable())"
      },
      {
        "sha": "fbdaf75150f4f58a7a7fd45169be7201e779ec1a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b905363fa8b0bb03fe34b53b5410880f42e0af39/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b905363fa8b0bb03fe34b53b5410880f42e0af39/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b905363fa8b0bb03fe34b53b5410880f42e0af39",
        "patch": "@@ -1050,6 +1050,7 @@ class CConnman\n     void ProcessAddrFetch();\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n+    void ThreadI2PAcceptIncoming();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n \n     /**\n@@ -1242,6 +1243,7 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+    std::thread threadI2PAcceptIncoming;\n \n     /** flag for deciding to connect to an extra outbound peer,\n      *  in excess of m_max_outbound_full_relay"
      }
    ]
  },
  {
    "sha": "0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTgxZTI0NDM5NGJkOWU2OGU5ZjBkNDQ3MDRlN2IwZmQxMmE2YjFm",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-12-07T16:24:09Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:47Z"
      },
      "message": "net: recognize I2P from ParseNetwork() so that -onlynet=i2p works",
      "tree": {
        "sha": "dfa5087ee8f6221815c7846f6844513546d4639e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfa5087ee8f6221815c7846f6844513546d4639e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjMACgkQVN8G9ktV\ny79SYx/+JR3aGWWasm7IO6xbIxaBG0YkJd33UIT9+vyo5mmDWDlr6G0L13hCI/Ad\na+ZAWQ9cMHfwAb1fKtYyCsF60pZOGXcSIVrs5RTarZrjuozkosNAO3wLc/iTcMYU\nL+SyfQ7XK8LYVN9bFEaSsLvsDniGfifHkWV3Qgsrungaky3I5ORaqRvEJB1REPy3\nVYxpJcotP+8E8h6oErwujV3kx6P14be33XETDq99c7GHr0/tOFOUPgokYjBmv5Tv\nnafycs3uppJkD6niRxQrHd+qU1h0X5UpdTPJ6VKkQ/xqNjJd2YNQEq0q7PQajeLS\nn1daBKi/eVCnBe2ga0uBZXMapnvSUlGrIkGI/bpfd2Tntiq2zoBHKuffpEXbbAB/\nKpd7dSQCYyIG0t3z0ZBew5fjseYCj0A7qHbrV1IU4MOauEnFMr9yWFiUA8BF3ih3\njkdeBJrl2j+/YbnSu3NC5/D7B66GMTmqgZQ+s7Dka9yohKho/fnFU3vfXFdWbw1o\nZSdBcFWSbM3Q8L7ZIwjLbHN8lVW3ObKZES6XVt1/9h83GzULCUzW/q1fHtRjOd8c\nkNdHW2vxJzrn6KBXbB6N/EYwpegeGGh1eIugYk42VkW88EAAp58X5kaRV+jqFmAO\nxfSPO3pYbbVaQ/pWG/WOrzqLK7chw7XxWLvJqZDFn0OH8ZT44CsTIQheSkISnsET\nul+WHMNz9YEdNaa8qDUisOX2D7wLPence6kCX86YBYQ3V3rfEKNVnNYeGKOAkEdo\nMW65EJFxWVaikFQ2FyxltEtTqy8loKqyPZ2ogBSrbdE7OQoLry31cEr9ReL12jAp\nlk3V4La4h/bPH58zK6GRtYjdGa3c8XFNwAQLAZVplw3rUXAfkxZb3wVHUsBewfAg\nr1ok0md8nWBInkPoOAz5aiCsDBq2DW9+x4m0mlRqmEl5uWgyJV5EehWuyi+aZPVo\nAbHlFi5U0fKgIZ5JnCU7TU7jlAD0PyHxXH7AictlIIhv+KnY2z3eNSfmZ7biJPRT\n0zlM5vySCULC8oDZ/wuwDX9OG1CHmHib1ELbDtWP05/olRiYHkgC2o2hNh5/OvtZ\nfs4gkz8ee7I2Kcz7SrTKFJzK7p5nIsLLm9sVvnhoi+d6sgq/LDulbZO8xX3lgvbl\nBxFCVl30Fe3NPTZU7GDboMV7JADtbocSrqLZYyNl5Ho1sPs2YRNlIOhXMXq87WYR\nkStENs4mY3LoUshk9ItSGbnX7SfeRDkfiSMho4cBXRNVtRN+A9JTQXXRbYg4xscR\nvWk8hjs2n2jHYt+Ol/6FxmhOZIA+r0sPFfyXrmI+Cp36hG9Rw5Al5eY4ayqYp2If\n2nxdyPXE3niiJilnYZeJjsCmP/clOQ==\n=Rko6\n-----END PGP SIGNATURE-----",
        "payload": "tree dfa5087ee8f6221815c7846f6844513546d4639e\nparent b905363fa8b0bb03fe34b53b5410880f42e0af39\nauthor Vasil Dimov <vd@FreeBSD.org> 1607358249 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619187 +0100\n\nnet: recognize I2P from ParseNetwork() so that -onlynet=i2p works\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b905363fa8b0bb03fe34b53b5410880f42e0af39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b905363fa8b0bb03fe34b53b5410880f42e0af39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b905363fa8b0bb03fe34b53b5410880f42e0af39"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f40cf7975ba96b60acb4c1943f4942809b4adca6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
        "patch": "@@ -449,7 +449,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with ipv4 or ipv6 but not onion and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "b09b21c2a16da7c4ba995b450dab0fe77b79bfe7",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
        "patch": "@@ -51,6 +51,9 @@ enum Network ParseNetwork(const std::string& net_in) {\n         LogPrintf(\"Warning: net name 'tor' is deprecated and will be removed in the future. You should use 'onion' instead.\\n\");\n         return NET_ONION;\n     }\n+    if (net == \"i2p\") {\n+        return NET_I2P;\n+    }\n     return NET_UNROUTABLE;\n }\n "
      }
    ]
  },
  {
    "sha": "a701fcf01f3ea9a12e869bfa52321302cf68351c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzAxZmNmMDFmM2VhOWExMmU4NjliZmE1MjMyMTMwMmNmNjgzNTFj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-02-15T15:55:24Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-03-01T17:19:47Z"
      },
      "message": "net: Do not skip the I2P network from GetNetworkNames()\n\nSo that help texts include \"i2p\" in:\n* `./bitcoind -help` (in `-onlynet` description)\n* `getpeerinfo` RPC\n* `getnetworkinfo` RPC\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "59e0dd70f416f5b7e7d64082cea55aab2f7dd711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59e0dd70f416f5b7e7d64082cea55aab2f7dd711"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a701fcf01f3ea9a12e869bfa52321302cf68351c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmA9IjMACgkQVN8G9ktV\ny7/UlR//WgU6f6DTEtLIlKfIzUoqqXI7rXi3HCkSx0+/9yAF5Esnletn3elJ+wQw\nxQaO/W94+7Ce+n0lkM0362vkA1zzdM0dm7nRQVz4afGfACBD0wGaaJ9KxJjGztEx\nO3nqYbHtpRBGl0iLSapP4nsL0lwc+3JqiamOF/dBwJnsH/AQ3VgxgN+sNabyW7aO\nfzEmCDlNXOqTTYse9kXa1+LCSUu+kMo/F5Uf+T2xDjfZ34m+ZdV/jlUGpQrLLA1f\ne05Jm+Dzmz2DIM3vK4yk+F9DlZCs5iPH194hD/tUdMXenno4xwrU3r2BeJidLbZI\n+12ZliHHgD0oZtnFd9nRA0yKz+ywrI6CX13ItryenpgsxHbWef3TJLo9/L4M75C8\nGU4pP9x+jSzNygNUC/6cWZidXXDQB9oRidOFSkVsp433KQ9UjJicTOxexD5e3mf0\n/AjMCGA9TR8dbRclIgwfqO2wuvsxqMxp4Ag3Fv7TLYxWe28cq0TinTPaZpQdwZLp\nz5/2mitnuxRKItctnrjc+phdK7XXr1IEWEnbMtU/CzsswV01/gdkEILLNO8/Qy3X\njFbNA+R3AVt1Nov0ybyAHjXQU7bjCUAuDhX9mUjdPvnoHSJFAMSFSI31q5/0y2Az\nECLKbp9NrAYfmYOU4Z+ouYNAcNnLuSeajKhjPSWCn59sYbjwJOqMmvUD1vysDdpZ\nzIVjHR4blAfJFvP9o+o//QJWadtovcn/dIel303lbNKEWWgGm14ID4GOGPPpcWRg\nq1cZr1YeQ0w7ww4bc4knYIHA/MPS8cKx+IvGjvwcy1+XTza3CYton4EAIHswVWkd\nAVLwTtIJ/4SQPEko5fogDyqHSuwU5VrduhjJitSQewDFyEt9d2JiSQr0uGZIx/T8\nBulP0kaNvfGu2Z56+51oOIyVxHtokV5LYLlA5LlL6joOmQqlcmcRhdF8b0je5FYe\nFB1Dq2PZInP4FiLqA46Yo2XycfM2aOWuYVgqWi0xz0Iwf2D/Pg19y/8TBlRZcmkY\napSHKF+BgEf6ovQFpOZqFXKY+rPwYfpra6GcitKkrOUOPDl43t8CEL3SLFySDggj\nMihTD1J+P+cMbYhbXn8yCX5Ux9hObZLmx4tk0g5I6b3LjH+2q0MWJRSi6sTuh75c\ncnC33qQB2qQwJCXzwEgcFaXtoZ37FLE3d1ixf+aqIG3Jr6jlC0quNZICIZmVfGlu\nyFv1LurtJYUVSNuj1KNfqzAxmJYC64c1lS4LH8WXkBf9U+cnPN/Hpsg3/FBbWe+I\nO+lpVrOQLssqNA/AmoEmFnjkwQEYAeJEqzoAtw6o2l2LquQCu2C0vVCMY6DksnSq\nqqo/cPze2jAPupZWcDd/e0BMFZbC5A==\n=yQ8Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 59e0dd70f416f5b7e7d64082cea55aab2f7dd711\nparent 0181e244394bd9e68e9f0d44704e7b0fd12a6b1f\nauthor Vasil Dimov <vd@FreeBSD.org> 1613404524 +0100\ncommitter Vasil Dimov <vd@FreeBSD.org> 1614619187 +0100\n\nnet: Do not skip the I2P network from GetNetworkNames()\n\nSo that help texts include \"i2p\" in:\n* `./bitcoind -help` (in `-onlynet` description)\n* `getpeerinfo` RPC\n* `getnetworkinfo` RPC\n\nCo-authored-by: Jon Atack <jon@atack.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a701fcf01f3ea9a12e869bfa52321302cf68351c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a701fcf01f3ea9a12e869bfa52321302cf68351c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a701fcf01f3ea9a12e869bfa52321302cf68351c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0181e244394bd9e68e9f0d44704e7b0fd12a6b1f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7dc616080d1c9c4945a1e0bd9714265ec1c8c941",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a701fcf01f3ea9a12e869bfa52321302cf68351c/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a701fcf01f3ea9a12e869bfa52321302cf68351c/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a701fcf01f3ea9a12e869bfa52321302cf68351c",
        "patch": "@@ -78,7 +78,7 @@ std::vector<std::string> GetNetworkNames(bool append_unroutable)\n     std::vector<std::string> names;\n     for (int n = 0; n < NET_MAX; ++n) {\n         const enum Network network{static_cast<Network>(n)};\n-        if (network == NET_UNROUTABLE || network == NET_I2P || network == NET_CJDNS || network == NET_INTERNAL) continue;\n+        if (network == NET_UNROUTABLE || network == NET_CJDNS || network == NET_INTERNAL) continue;\n         names.emplace_back(GetNetworkName(network));\n     }\n     if (append_unroutable) {"
      },
      {
        "sha": "9adb32c3c5527721ebb2e1b5c69ddff89ed76cea",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a701fcf01f3ea9a12e869bfa52321302cf68351c/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a701fcf01f3ea9a12e869bfa52321302cf68351c/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=a701fcf01f3ea9a12e869bfa52321302cf68351c",
        "patch": "@@ -105,7 +105,7 @@ def test_getpeerinfo(self):\n         assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n \n         # Check dynamically generated networks list in getpeerinfo help output.\n-        assert \"(ipv4, ipv6, onion, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p, not_publicly_routable)\" in self.nodes[0].help(\"getpeerinfo\")\n \n     def test_getnettotals(self):\n         self.log.info(\"Test getnettotals\")\n@@ -156,7 +156,7 @@ def test_getnetworkinfo(self):\n             assert_net_servicesnames(int(info[\"localservices\"], 0x10), info[\"localservicesnames\"])\n \n         # Check dynamically generated networks list in getnetworkinfo help output.\n-        assert \"(ipv4, ipv6, onion)\" in self.nodes[0].help(\"getnetworkinfo\")\n+        assert \"(ipv4, ipv6, onion, i2p)\" in self.nodes[0].help(\"getnetworkinfo\")\n \n     def test_getaddednodeinfo(self):\n         self.log.info(\"Test getaddednodeinfo\")"
      }
    ]
  }
]