laanwj,2020-12-17 15:36:25,"Awesome work, concept ACK.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-747514698,747514698,
DrahtBot,2020-12-17 20:13:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19461 (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* #19460 (multiprocess: Add bitcoin-wallet -ipccon",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-747675535,747675535,
naumenkogs,2020-12-18 09:05:29,"Concept ACK\n\n----------\n\nOnce this is enabled, we should clearly communicate that using a non-popular overlay has privacy/security side-effects",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-747959538,747959538,
practicalswift,2020-12-18 15:09:36,"@vasild Nice work!\n\nI like the abstraction  (`Sock`) you've added on top of the socket API. I'm adding something similar in #19203 (see `MockableSocket` and `FuzzedSocket`) to allow for fuzzing the more low-level parts of our networking code (in this specific case a regression fuzz harness for CVE-2017-18350).\n\nIf you have time: please check that PR out. It would be great if your socket ab",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-748139978,748139978,
vasild,2020-12-29 09:40:24,a0dc3a2d3...188ba34b4: rebased to resolve conflicts with `master`,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-752013415,752013415,
vasild,2020-12-29 12:59:48,"188ba34b4...f0577c4d7:\n* disallow partial padding when decoding `.b32.i2p` addresses\n* fix gcc warning ~~(hopefully)~~",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-752066569,752066569,
vasild,2020-12-29 13:27:57,"f0577c4d7...2ae504c4b: allow uppercase and mixedcase I2P addresses, [suggestion](https://github.com/bitcoin/bitcoin/pull/20254#discussion_r544431918)",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-752074602,752074602,
vasild,2020-12-31 14:47:43,2ae504c4b...9445dd490: consider it a timeout if the current time is exactly equal to the deadline,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-752978740,752978740,
luke-jr,2021-01-03 00:22:20,"Do we actually want to share our address, though? I would think an anonymous connection is strictly better?",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-753548139,753548139,
vasild,2021-01-08 13:39:40,"> Do we actually want to share our address, though?\n\nIn I2P, like in IP, connections have ""source address"".\n\n> I would think an anonymous connection is strictly better?\n\nWhy? In a P2P network peers are supposed to connect to each other, right? Not hide from each other? If we don't want connections to us, then we don't listen on the I2P address (`-i2pacceptincoming=0`) and nobody can re",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-756760413,756760413,
vasild,2021-01-09 12:25:47,9445dd490...1cced4679: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-757141983,757141983,
DrahtBot,2021-01-13 11:46:36,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @harding @hebasto have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-759396675,759396675,
jonatack,2021-01-15 16:38:59,"Concept ACK. This builds and runs cleanly. If anyone is running an i2p service, ping me on irc to try connecting to each other.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761048965,761048965,
jonatack,2021-01-17 11:53:25,"We have an I2P-to-I2P Bitcoin network connection up this Sunday morning. EDIT: 2 connections :tada: \n\n![Screenshot from 2021-01-17 13-40-57](https://user-images.githubusercontent.com/2415484/104843271-a380ed00-58c1-11eb-8052-cecc354fc6bc.png)\n\nIf helpful, I added the following setting to `~/.bitcoin/bitcoin.conf`\n```\ni2psam=127.0.0.1:7656\n```\n ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761799484,761799484,
mshalabi1990,2021-01-17 12:01:47,"It needs to be anonymous others wise i2p address will never work fully\nOn Sun, Jan 17, 2021 at 6:55 AM Jon Atack <notifications@github.com> wrote:\n\n> We have an I2P-to-I2P Bitcoin network connection up this Sunday morning.\n>\n> [image: Screenshot from 2021-01-17 11-41-47]\n> <https://user-images.githubusercontent.com/2415484/104839627-3027ad00-58ba-11eb-8cc6-8c572d222561.png>\n>\n> If helpful,",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761800688,761800688,
mshalabi1990,2021-01-17 12:03:35,It needs to be annymous to full work or else it will never work fully decentralized ,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761800993,761800993,
vasild,2021-01-17 12:24:57,1cced4679...45e571315: rebase and address suggestions,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761803815,761803815,
jonatack,2021-01-17 16:11:02,"Stepping through the commits and building one-by-one.\n\nIn 87ebd74 `SocketEvents()` `interrupt` is used like an ""in"" param but it is passed by reference like an ""out"" param\n```diff\n+++ b/src/net.h\n@@ -1069,8 +1069,9 @@ private:\n      * @param[in,out] sockets When the function is called this is expected to contain the\n      * sockets that should be checked for readiness. Upon return on",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761836549,761836549,
jonatack,2021-01-17 16:42:31,"Starting from ad56288e9b2f, it seems the various `std::chrono::milliseconds timeout` params can be passed by value.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761841535,761841535,
jonatack,2021-01-17 17:59:47,"Consider dropping a3b33637f as the renaming is to a generic name that is less useful for searching for the variable in the code (false positives go from none to many), or renaming to a more unique name but the current one seems fine; this isn't new code.\n\nEdit: same feedback for ccc5966a; consider dropping the change or using a slightly less generic name, like `permission_flags`. This isn't ne",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-761852969,761852969,
dunxen,2021-01-18 07:45:14,Concept ACK. Built and working with no major issues.,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-762052790,762052790,
vasild,2021-01-18 16:04:58,"45e571315...b49a4a06e: address review suggestions\n\n> SocketEvents() interrupt is used like an ""in"" param but it is passed by reference like an ""out"" param\n\nThe `sleep_for()` method of `CThreadInterrupt` is not `const`, thus the variable is passed by non-`const` reference. I changed the comment to say `@param[in,out]`.\n\n> Starting from ad56288, it seems the various std::chrono::millisec",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-762340697,762340697,
vasild,2021-01-18 16:40:22,"A few notes:\n\n* We use SAM version 3.1 (`HELLO VERSION MIN=3.1 MAX=3.1`) because it is the maximum supported by the C++ i2p daemon (as of i2pd 2.35.0).\n\n* Ports seem to be ignored, so I default them to `8333`. [SAM 3.2](https://geti2p.net/en/docs/api/samv3) defines `FROM_PORT` and `TO_PORT`, but we use SAM 3.1. As a consequence we can connect to any port on a given I2P address - once we li",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-762360140,762360140,
jonatack,2021-01-18 23:53:03,"> I am not sure those are trivial types like `int`, `double`, etc. Thus I pass them by `const` reference.\n\nIIUC according to https://en.cppreference.com/w/cpp/chrono/duration ""The only data stored in a duration is a tick count of type Rep"": `std::chrono::milliseconds | duration</*signed integer type of at least 45 bits*/, std::milli>`. If that is correct, it would be nice to avoid a situation ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-762519047,762519047,
vasild,2021-01-22 08:41:57,"b49a4a06e...39021d931:\n\n* Split the `Accept()` method to `Listen()` and `Accept()`, so that the caller from `net.cpp` can do `AddLocal()` when we are listening and `RemoveLocal()` when listening fails (e.g. the I2P proxy is shut down).\n\n* Do not `AddLocal()` after we connect to a I2P peer - should only do this when listening. As a result the newly added function `AddLocalIfNotKnown()` is n",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-765239583,765239583,
vasild,2021-01-22 13:25:11,39021d931...7da1e29fc: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-765393582,765393582,
laanwj,2021-01-26 11:37:52,"I'm still testing this on one of my nodes. It is working great. I've had a few connections to other I2P peers.\n\nI'm testing with the Java implementation of I2P, it has some typical java problems like high CPU and memory use. Compared to Tor at least. Of course, this is not the fault of this PR :slightly_smiling_face: \n\nAnother thing (that @jonatack) noted is that I2P has higher latency tha",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-767486499,767486499,
jonatack,2021-01-26 13:06:22,"> Another thing (that @jonatack) noted is that I2P has higher latency than Tor onion services. At least I suppose this is an inherent problem with I2P and not the code here. Network latency is not generally a problem for bitcoin but as eviction decisions are made based on (among other things) ping times. This might be something to look into, but not necessarily in this PR.\n\nWorking on this eit",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-767529236,767529236,
lontivero,2021-01-28 14:33:55,utACK 7da1e29fcc8a4fdff19f24d5be501ce4c0eeaa21,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-769104690,769104690,
vasild,2021-01-29 10:38:35,7da1e29fc...08d0c27d7: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-769725377,769725377,
vasild,2021-01-29 10:41:24,"08d0c27d7...2caf1bff3: pass `std::chrono` variables by value instead of by const reference, as per [suggestion](https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-762519047). Thanks, @jonatack!",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-769726722,769726722,
jonatack,2021-02-03 17:15:31,I'd like to help move this forward. Is this pull independent of #20788?,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-772674683,772674683,
lontivero,2021-02-04 02:56:36,"This PR is independent of #20788. However, #20788 was born as a subset of this PR because it adds goodness independently of this PR.  Some of the suggestions made there and here (drop commits with renames, for example) have been made here but not in #20788 yet. Anyway, imo i think merging #20788 first could help to reduce the size of this one. ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-772988859,772988859,
jonatack,2021-02-05 15:13:23,"@lontivero thank you, that is very helpful; will finishing reviewing here then as it is ahead of #20788 in its updates. @vasild you can drop my -netinfo commit now that #20764 is merged, sorry for the rebase (but it is now i2p-ready :sunglasses:) ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-774093064,774093064,
fluffypony,2021-02-05 15:48:34,"Per my conversation with @jonatack on Clubhouse, this i2p router that some Monero contributors have created may be of use: https://github.com/i2p-zero/i2p-zero\n\nIt's VERY lightweight, even compared to i2pd and the full i2p router, implements SAM, and bundles a JVM.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-774114960,774114960,
vasild,2021-02-06 13:52:00,"2caf1bff3...2f71ee2b2: rebase due to conflicts and drop the last commit `cli: add i2p network to -netinfo` because an enhanced version of it is now in `master` via #20764.\n\n@jonatack, excellent, reducing the size of this PR! Getting #20788 merged will reduce it further.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-774480735,774480735,
jonatack,2021-02-11 13:26:12,"Noting here some IRC discussions on installing I2P as a reference for later, e.g. a future `doc/i2p.md`, or for people looking to install it:\n\n- http://www.erisian.com.au/bitcoin-core-dev/log-2021-02-09.html#l-609\n- http://www.erisian.com.au/bitcoin-core-dev/log-2021-02-10.html#l-207\n- http://www.erisian.com.au/bitcoin-core-dev/log-2021-02-10.html#l-482",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-777455470,777455470,
vasild,2021-02-13 13:17:35,"2f71ee2b2...a456bd3f2:\n\n* Remove the `Sock` definition from this PR as it is now [merged](https://github.com/bitcoin/bitcoin/pull/20788) in `master`.\n* Do not extract `CConnman::SocketEvents()` as a standalone function since it is not needed anymore - in all places we wait for an event on one socket and for this we can use `Sock::Wait()`.\n* [Extend](https://github.com/bitcoin/bitcoin/pull/",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778617984,778617984,
laanwj,2021-02-13 22:37:16,Updated my I2P-using node to the new version (a456bd3f296f18e463e36048c866c404b69363b6) for testing.,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778688034,778688034,
jonatack,2021-02-14 00:20:51,"Testing a Clang 9 build of a456bd3f296f18e463e36048c866c404b69363b6 with i2pd 2.35 did not work\n```\n2021-02-13T23:31:35Z I2P: SAM session created: session id=86eaxxaxxxx, my address=zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtyxxxxxxxx.b32.i2p:8333\n2021-02-13T23:31:35Z AddLocal(zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtyxxxxxxxx.b32.i2p:8333,2)\nIllegal instruction\n```\n```\nDebian 5.10",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778698152,778698152,
laanwj,2021-02-14 10:53:09,"> 2021-02-13T23:31:35Z AddLocal(zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtyxxxxxxxx.b32.i2p:8333,2)\n> Illegal instruction\n\nCan you give a gdb backtrace please? With disassembly (`disass`) at the crash location, if possible. The post common cause of Illegal Instruction is your compiler generating extension instructions that the specific CPU can't handle. I don't understand how it could be in",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778760608,778760608,
jonatack,2021-02-14 14:54:36,"Hm, gdb didn't hit the issue (I'll try again) but valgrind did.\n```\n2021-02-14T14:45:19Z New outbound peer connected: version: 70015, blocks=670586, peer=1, peeraddr=144.76.81.194:8333 (outbound-full-relay)\n2021-02-14T14:45:39Z I2P: SAM session created: session id=qqqq, my address=qqqq.b32.i2p:8333\n2021-02-14T14:45:41Z UpdateTip: new best=00000000000000000009e0b532bf3ff388c9d7c4489b0bcf263",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778789023,778789023,
jonatack,2021-02-14 15:57:48,"Ok, hit it with gdb\n\n```gdb\n2021-02-14T15:33:36Z I2P: SAM session created: session id=qqqq, my address=h3r6bkn4...q.b32.i2p:8333\n2021-02-14T15:33:36Z AddLocal(h3r6bkn4...q.b32.i2p:8333,2)\n\nThread 18 ""b-addcon"" received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 0x7fff39ed7700 (LWP 54120)]\n0x0000555555621ede in CConnman::ConnectNode (this=0x5555566e3ec0, addrConnect=..",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778797544,778797544,
laanwj,2021-02-14 19:24:25,"So it hits an illegal instruction on this line:\n```\n   0x0000555555621ede <+2638>:	mov    (%rax),%rcx\n```\nThis is really strange. That looks like a perfectly basic x86 instruction. I could understand a segmentation fault here, but illegal instruction is strange. At least it is in code that is affected by this PR.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-778827585,778827585,
jonatack,2021-02-15 09:01:53,"The previous tests were with clang 9; seeing the same segfault with gcc 10.2.1:\n\n```\n$ gcc --version\ngcc (Debian 10.2.1-6) 10.2.1 20210110\n$ gdb bitcoind\nGNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git\n```\n\n```gdb\n2021-02-15T08:47:39Z I2P: SAM session created: session id=qqqq, my address=qqqq.b32.i2p:8333\n2021-02-15T08:47:39Z AddLocal(qqqq.b32.i2p:8333,2)\n2021-02-15T08:47:47",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-779070785,779070785,
vasild,2021-02-15 09:30:01,"[a456bd3f2..da2ba3e87](https://github.com/bitcoin/bitcoin/compare/a456bd3f296f18e463e36048c866c404b69363b6..da2ba3e87105a82d573c8873a99d0b11af219c87): don't dereference an unset unique_ptr, thanks @jonatack, @laanwj!",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-779089078,779089078,
jonatack,2021-02-15 10:14:14,Thanks -- da2ba3e following the fix is working now. ,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-779115834,779115834,
vasild,2021-02-15 15:47:27,`da2ba3e87...e19bc9938`: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-779305997,779305997,
vasild,2021-02-16 15:18:25,`433d9a9f1...2a7bb343a`: fix failing `rpc_net.py`,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-779904970,779904970,
laanwj,2021-02-17 08:02:34,"I'm trying with `i2pd` now on FreeBSD. Not having much luck. I could install it and start it quite easily (much more easily than the Java one):\n```\n$ pkg install i2pd\n# add i2pd_enable=""YES""  and optionally i2pd_flags=""--bandwidth X""\n$ vi /etc/rc.conf\n$ service i2pd start\n$ i2pd --version\ni2pd version 2.33.0 (0.9.47)\n```\nThat's it. SAM is enabled on port `7656`.\n\n**Edit:** be",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-780378548,780378548,
jonatack,2021-02-17 09:03:29,"If this is the issue Suhas encountered, upgrade to i2pd v2.35ÔøºÔøº (latest release, build from source or on Debian it's in the testing sources).",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-780409790,780409790,
laanwj,2021-02-17 09:07:31,"I don't think it's the same issue. He had a much older version (2.23 instead of 2.33), which had problems handling the commands from `bitcoind`. My i2pd seems completely broken, it doesn't get any peer connections.\n\nThe whole ""runtime exception: No known routers, reseed seems to be totally failed"" message gives only one result on Google, some Russian github thread. Argh.\n\n**Edit:** oh, it ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-780412089,780412089,
laanwj,2021-02-22 08:45:10,"Code review and extensively manually tested ACK 2a7bb343ac77f2bf52ea1a8959a22ef266d49aa6\n\nI think it would be nice to have unit tests for the `Reply` parsing in `i2p.cpp` and maybe the alt-Base64 parsing, however this can be done in a later PR (and doesn't need to hold up progress here). Maybe someone will even look into fuzzing.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-783202637,783202637,
jonatack,2021-02-25 11:02:43,"Update, about halfway through reviewing the commits. Each builds cleanly and no comments so far.\n\nI've been testing this these past weeks using i2pd 2.35. Apparently, i2pd 2.36 was released last week and I plan to test with it.\n\nThe only oddity I've been seeing from the first day of testing until now is inbound I2P peers can regularly have two connections, present for a few minutes. I have",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-785811984,785811984,
prayank23,2021-02-25 20:15:28,"1. Unable to build for Windows using instructions mentioned in this doc: https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md (It worked for other pull request recently)\n\n<pre>\n  CXXLD    bitcoind.exe\n  CXXLD    bitcoin-wallet.exe\n  CXXLD    test/test_bitcoin.exe\n  CXXLD    bench/bench_bitcoin.exe\n  CXXLD    test/fuzz/fuzz.exe\n  AR       qt/libbitcoinqt.a\n/usr/bin/",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786172893,786172893,
laanwj,2021-02-25 20:26:00,"@prayank23  Strange. Adding `debug=i2p` to your config might give some more information in the log as to why it's not working.\n\nThe windows linker issue seems unrelated (you could create a new issue for it if you want).",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786181506,786181506,
prayank23,2021-02-25 21:29:54,"<pre>\n2021-02-25T21:25:14Z i2paccept thread start\n2021-02-25T21:25:14Z I2P: Creating SAM session with 127.0.0.1:7658\n2021-02-25T21:25:14Z net thread start\n2021-02-25T21:25:14Z GUI: Platform customization: ""other""\n2021-02-25T21:25:15Z I2P: Error listening: Missing RESULT= in the reply to 'HELLO VERSION MIN=3.1 MAX=3.1': 'HTTP/1.1 400 Illegal character SPACE=' '\x0d'\n2021-02-25T21:25:15Z",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786240512,786240512,
laanwj,2021-02-25 21:39:21,"It doesn't look like it's a SAM proxy you're connecting to, but a HTTP proxy (it's clearly speaking HTTP). From what I remember the Java I2P router doesn't start a SAM service by default and you need to add it.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786245631,786245631,
fanquake,2021-02-26 02:00:15,"> Unable to build for Windows\n\nThe Windows linking issue has been fixed in master in #21226. This PR just needs rebasing.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786356515,786356515,
vasild,2021-02-26 16:32:22,"@jonatack, next time you observe two incoming connections from the same peer, try to capture the output of `bitcoin-cli getpeerinfo |jq 'map(select(.network == ""i2p"")) |map({inbound: .inbound, addr: .addr, addrbind: .addrbind})'`. I suspect it has something to do with the ports.\n\n@prayank23, the SAM proxy is usually listening on port `7656`. Surely it can be changed to anything, but I guess yo",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786753429,786753429,
jonatack,2021-02-26 17:06:04,"@prayank23 yes, fwiw I'm building and reviewing the PR after rebasing to current master (let it run last night building and testing each commit and they are all clean/green), as mentioned above, if you do that it should(:tm:) build on Windows.\n\n@vasild sure np. Should finish reviewing the current branch today.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-786773001,786773001,
practicalswift,2021-02-28 19:53:10,"@laanwj \n\n> I think it would be nice to have unit tests for the `Reply` parsing in `i2p.cpp` and maybe the alt-Base64 parsing, however this can be done in a later PR (and doesn't need to hold up progress here). Maybe someone will even look into fuzzing.\n\nAgreed! I plan to add a fuzzing harness for the I2P `Reply` parsing code (unless @vasild plans to do it as part of this PR of course :)).",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787511568,787511568,
prayank23,2021-02-28 22:14:33,"Finally `i2p_private_key` created :)\n\n![image](https://user-images.githubusercontent.com/13405205/109435256-99fdaf80-7a3f-11eb-8757-d613372dab12.png)\n\nIt was port: 7656 and I had to use `i2pd` instead of `i2prouter`. Thanks for the help @laanwj @vasild \n\n@jonatack @fanquake Thanks. Will try to build for Windows. I think we will also need a `i2p.md` file in docs for everyone to setup i2",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787533008,787533008,
jonatack,2021-02-28 22:27:56,"> I think we will also need a `i2p.md` file in docs for everyone to setup i2p service for Bitcoin Core.\n\n@prayank23 yes, discussed above at https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-777455470\n",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787535879,787535879,
laanwj,2021-03-01 10:59:00,"I would recommend against extending the scope of this PR.\nLet's make sure that this change is correct, address remaining comments, and then merge it. It's useful to have this on the branch so that other people can work on it.\nDocumentation and additional testing can be added in a later PR.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787858109,787858109,
jonatack,2021-03-01 11:27:09,"> It's useful to have this on the branch so that other people can work on it.\n\nAgree! Though per @vasild's IRC comments last week (http://www.erisian.com.au/bitcoin-core-dev/log-2021-02-25.html#l-242) he may have planned one more update.\n",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787875632,787875632,
vasild,2021-03-01 12:14:41,`2a7bb343a...e41cb7dbd`: rebase to fix the windows fuzz build issue,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-787904082,787904082,
vasild,2021-03-01 17:08:27,"`e41cb7dbd...f181f24ca`: address suggestions\n(no tests yet)",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-788114200,788114200,
vasild,2021-03-01 17:30:51,"`f181f24ca...a701fcf01`: pet the linter which seems to be upset by `R""(foo ""%s"" bar"")`",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-788130339,788130339,
laanwj,2021-03-02 10:38:53,re-ACK a701fcf01f3ea9a12e869bfa52321302cf68351c,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-788809219,788809219,
vasild,2021-03-04 16:40:30,"@practicalswift \n> I plan to add a fuzzing harness for the I2P Reply parsing code (unless @vasild plans to do it as part of this PR of course :)).\n\nI am adding some basic fuzzing of the `i2p::sam::Session` public interface using `FuzzedSock` (not to `Reply()`). Will open a PR soonish...",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-790754217,790754217,
practicalswift,2021-03-04 20:15:57,"@vasild \n\n> > I plan to add a fuzzing harness for the I2P Reply parsing code (unless @vasild plans to do it as part of this PR of course :)).\n> \n> I am adding some basic fuzzing of the `i2p::sam::Session` public interface using `FuzzedSock` (not to `Reply()`). Will open a PR soonish...\n\nThat's great news! Looking forward to reviewing it: don't hesitate to ping me when ready :)",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-790910380,790910380,
jonatack,2021-03-05 10:04:32,"@vasild here are a couple more screenshots of being connected twice to the same I2P peer (one example of inbound+outbound, which can be persistent (and not unique to I2P peers IIRC, here we are each manually addnode-ing each other I believe), and one example of double inbound, which doesn't usually last more than ~5 minutes AFAICT but happens the most often, I see it a few times a day).\n\nThe `",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-791315141,791315141,
vasild,2021-03-08 12:54:27,@practicalswift: fuzzing tests in https://github.com/bitcoin/bitcoin/pull/21387.,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-792736217,792736217,
vasild,2021-03-08 17:21:46,"@jonatack \n> one example of inbound+outbound, which can be persistent (and not unique to I2P peers\n\nRight. A->B and A<-B is not forbidden and can be done even with IPv4 addresses.\n\n> and one example of double inbound\n\nI opened https://github.com/bitcoin/bitcoin/issues/21389 to track this.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-792919651,792919651,
jonatack,2021-03-08 19:25:22,"> (did not test `onlynet=i2p`)\n\nSince writing that, I've been running `onlynet=i2p` with `onlynet=onion` and it seems to be working well.",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-793011126,793011126,
rebroad,2021-05-03 13:48:31,@jonatack those i2p pings look much higher than the tor pings. Is that normal? Does i2p offer any advantage over tor?,https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-831271303,831271303,
jonatack,2021-05-03 14:05:50,"@rebroad indeed (see #21261). An advantage is potentially better decentralization, network robustness and censorship resistance, e.g. I2P may be operational when Tor isn't or has degraded operation, like in January and February. ",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-831282139,831282139,
vasild,2021-05-03 14:38:38,"In addition, I2P connections have a ""source address"" - it is certain that the peer who connects from a given I2P address to us possesses the private key that corresponds to that I2P address. This can be used for white-listing ""friends"". It is a stronger guarantee than IP addresses (which can be spoofed by e.g. your ISP).",https://github.com/bitcoin/bitcoin/pull/20685#issuecomment-831303188,831303188,
lontivero,2020-12-27 18:58:17,"Q: in case `retval` contains the maximum allowed data shouldn't it get out of the loop?  I mean, I know this is how the previous version of this method worked but I would like to understand why is this how it is.  ",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549152178,549152178,src/util/readwritefile.cpp
lontivero,2020-12-27 19:26:46,"Non-cpp programmer question: is this idiomatically valid?\n \n```suggestion\nbool WriteBinaryFile(const fs::path &filename, const std::string &data)\n{\n    FILE *f = fsbridge::fopen(filename, ""wb"");\n    if (f == nullptr)\n        return false;\n    if (fwrite(data.data(), 1, data.size(), f) == data.size()) {\n        return fclose(f) == 0;\n    }        \n    fclose(f);\n    return f",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549154854,549154854,src/util/readwritefile.cpp
lontivero,2020-12-27 20:43:01,"This makes `my`, `my=`, `my==` and so on until `my=====` all equivalent. Is this ok? I would have expected partial padding to be invalid.\n",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549161698,549161698,src/util/strencodings.cpp
jonatack,2020-12-28 17:48:58,"Build warning here, logical AND of equal expressions [-Wlogical-op]\n",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549430723,549430723,src/netbase.cpp
lontivero,2020-12-28 20:20:53,"Clarification: I am asking this because if this is allow then invalid addresses could be allowed by `SetSpecial`, I mean, something like `udhdrtrcetjm5sxzskjyr5ztpeszydbh4dpl3pl4utgqqw2v4jna=.b32.i2p` would be okay.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549475623,549475623,src/util/strencodings.cpp
vasild,2020-12-29 08:27:05,"Yes, it should get out of the loop and it does due to `retval.size() <= maxsize`.\n\nIt is true that if `maxsize==10` and `fread()` returns 7 bytes and then 5 bytes, this function will return a `retval` that contains 12 bytes, exceeding `maxsize`. This is also how it works in `master` right now.\n\nFor the purposes of this PR it suffices to move `ReadBinaryFile()` out of `torcontrol.cpp` so th",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549614683,549614683,src/util/readwritefile.cpp
vasild,2020-12-29 08:28:46,"Yes, those are the same. I guess, when writing new code, it would be a matter of taste which one to use.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549615177,549615177,src/util/readwritefile.cpp
vasild,2020-12-29 09:51:27,"Is this on Windows? Which compiler version? Is it upset that `WSAEAGAIN` equals to `WSAEWOULDBLOCK` and so we end up doing something like `err != 5 && err != 5`?\n\nI checked that gcc 10.2.1, 9.3.0 and 8.4.0 don't emit the warning if we do `err != 5 && err != 6 && err != 5`, so I just reordered the expressions as a simple fixup ro this. Will include in the next push.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549640692,549640692,src/netbase.cpp
jonatack,2020-12-29 10:22:54,gcc Debian 10.2.1,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549650863,549650863,src/netbase.cpp
vasild,2020-12-29 13:00:49,Fixed in f0577c4?,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549695916,549695916,src/netbase.cpp
vasild,2020-12-29 13:11:46,"Hah, good catch! It occurred to me that we need not to support decoding base32 strings without padding in general and instead we can append `====` to the 52 chars before `.b32.i2p` and decode it as padded base32 string.\n\nThis simplifies this PR as I dropped one commit from it: `util: support DecodeBase32() without padding`. Also, added a check that the address is 52 base32 chars since we expec",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549699366,549699366,src/util/strencodings.cpp
jonatack,2020-12-29 16:23:46,"Yes, thank you -- tested that it is fixed in 188ba34 and in 2ae504c",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r549765748,549765748,src/netbase.cpp
lontivero,2020-12-30 22:14:44,"Time ago Winsock used to have problems with peeking from sockets. According to the KB article below (old) `recv` with `MSG_PEEK`:\n\n> The peek operation will report the number of bytes up until the first buffer boundary. The bytes remaining in the other boundaries might never be reported, resulting in an incorrect count of data **for code algorithms that depend upon the peek values to be accura",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r550341889,550341889,src/netbase.cpp
lontivero,2020-12-30 22:14:53,"I think that in case it reaches the deadline it should throw because otherwise the timeout will be infringed.\n```c++\nif (now >= deadline)\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r550341913,550341913,src/netbase.cpp
vasild,2020-12-31 14:43:30,"Yeah, even if the behavior is still the same, we are fine with it.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r550496783,550496783,src/netbase.cpp
vasild,2020-12-31 14:46:43,"Right, and also `SendComplete()` uses `>=`. Changed.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r550497443,550497443,src/netbase.cpp
lontivero,2021-01-13 16:22:32,I think this is unnecessary.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r556654746,556654746,src/i2p.cpp
lontivero,2021-01-13 16:30:59,What if no `VALUE` is received?,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r556661171,556661171,src/i2p.cpp
lontivero,2021-01-13 16:42:52,If there is some kind of `startsWith` function i think it would be better.  ,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r556670261,556670261,src/i2p.cpp
lontivero,2021-01-13 16:50:23,"It seems correct to assume that `RESULT` is always returned but in one place in the i2p code I can see this:\n\n```c++\n} else if (ARG_IS(0,""NAMING"") &&\n           ARG_IS(1, ""REPLY"")) {\n    if(NULL == (arg = ARG_FIND(""RESULT""))) {\n        SAMLOGS(""Naming reply with no result"");\n       return 0;\n   }\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r556675792,556675792,src/i2p.cpp
lontivero,2021-01-13 16:51:28,"The `Reply` class could have a `isOk()` function, what do you think?",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r556676518,556676518,src/i2p.cpp
vasild,2021-01-15 11:02:14,You mean the incremental wait time or just this line?,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558233662,558233662,src/i2p.cpp
vasild,2021-01-15 11:06:35,Then we will get an exception which is properly handled. Do you see any problems?,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558236009,558236009,src/i2p.cpp
vasild,2021-01-15 12:29:55,"Yes, if no `RESULT` is present then this function will throw an exception, which is ok. I think we should expect any reply from the I2P proxy, including malicious one.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558275516,558275516,src/i2p.cpp
vasild,2021-01-15 12:31:44,"I think it is not worth to add `isOk()` method because it would be used in just one place - here and `reply.Get(""RESULT"") != ""OK""` is readable enough.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558276418,558276418,src/i2p.cpp
lontivero,2021-01-15 14:13:59,"No, I don't see any problem, it is just that I didn't see the exception handling.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558332601,558332601,src/i2p.cpp
lontivero,2021-01-15 14:17:58,Just this line because the next line is a `return true;` ,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r558335104,558335104,src/i2p.cpp
laanwj,2021-01-16 23:23:32,"i'd use `default: 1`, not ""true""",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559052032,559052032,src/init.cpp
vasild,2021-01-17 12:07:05,"[`HasPrefix()`](https://github.com/bitcoin/bitcoin/blob/30e664dcce1a9adb9ba9a29e4f0cf809767870dd/src/util/string.h#L82-L88) is a good candidate, would need some enchanting.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559171894,559171894,src/i2p.cpp
vasild,2021-01-17 12:07:50,Ok :),https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559172021,559172021,src/i2p.cpp
vasild,2021-01-17 12:13:45,"You are right, removed!",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559172712,559172712,src/i2p.cpp
vasild,2021-01-17 12:24:09,Changed.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559173945,559173945,src/init.cpp
jonatack,2021-01-17 17:37:38,"782de68a7008a\n```suggestion\n    const CAddress addr_bind = GetBindAddress(socket);\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559213448,559213448,src/net.cpp
jonatack,2021-01-17 19:48:42,"484dc6559 suggest adding quotes and/or removing the trailing ""."" (if you add quotes here, maybe also line 298)\n```suggestion\n    // I2P addresses that we support consist of 52 base32 characters + "".b32.i2p""\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559229369,559229369,src/netaddress.cpp
jonatack,2021-01-17 19:52:18,"484dc65591b perhaps a few additional sanity checks\n```diff\n@@ -321,6 +321,7 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n     BOOST_REQUIRE(addr.IsTor());\n \n+    BOOST_CHECK(!addr.IsI2P());\n     BOOST_CHECK(!addr.IsBindAny());\n     BOOST_CHECK(addr.IsAddrV1Compatible());\n     BOOST_CHECK_EQUAL(addr.ToString(), ""6hzph5hv6337r6p2.onion"");\n@@ -331,6 +332,7 @@ BOOST_AUTO_TEST_CASE(cnetadd",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559229820,559229820,src/test/net_tests.cpp
vasild,2021-01-18 16:13:56,"Added, thanks!",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559673351,559673351,src/test/net_tests.cpp
vasild,2021-01-18 16:16:53,"Added quotes, but left the dot.\n\n```cpp\n// Comments start with a capital letter and end with a dot, like real sentences.\n```\n\n```cpp\n// Comments start with a capital letter and end with a dot, like real sentences. This\n// makes it easy to extend with another sentence.\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559675066,559675066,src/netaddress.cpp
vasild,2021-01-18 16:17:27,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r559675424,559675424,src/net.cpp
jonatack,2021-02-14 15:59:55,Both gdb and valgrind are hitting this line,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r575828254,575828254,src/net.cpp
vasild,2021-02-15 09:32:36,"Yes, that is an invalid way to assign a new value to unique_ptr that is not set. :bomb:  Fixed!",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r576052607,576052607,src/net.cpp
jonatack,2021-02-15 09:37:56,Makes sense. Building the new push.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r576056054,576056054,src/net.cpp
jonatack,2021-02-15 16:17:58,"This will need the following change (if not already made but I didn't see it)\n```diff\n/test/functional/rpc_net.py\n@@ -105,7 +105,7 @@ class NetTest(BitcoinTestFramework):\n         assert_equal(peer_info[1][1]['connection_type'], 'inbound')\n \n         # Check dynamically generated networks list in getpeerinfo help output.\n-        assert ""(ipv4, ipv6, onion, not_publicly_routable)"" in",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r576301546,576301546,src/netbase.cpp
vasild,2021-02-16 15:18:04,"Fixed, thanks!",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r576902941,576902941,src/netbase.cpp
jonatack,2021-02-26 17:56:31,"2ee63a5 For the six `SetSpecial`, `SetTor` and `SetI2P` declarations and definitions, I think it would be clearer to use the same param name. It's currently sometimes `name` and sometimes `str` and different between the declarations and the definitions for `SetTor` and `SetI2P`.  (I'd propose `const std::string& addr` for all six.) ",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583817273,583817273,src/netaddress.h
jonatack,2021-02-26 19:57:36,"45cfaf0d296b6b6f9d4c86d4ec1b4c4392947b36 here and also line 248, maybe use a different name for the  `timeout` local variable (maybe `wait_time` or `wait_timeout`) than the `timeout` input param",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583883970,583883970,src/util/sock.cpp
jonatack,2021-02-26 19:59:45,"45cfaf0\n```suggestion\n    // as many bytes as possible without crossing the terminator.\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583885090,583885090,src/util/sock.cpp
jonatack,2021-02-26 20:17:01,"45cfaf0d296b6b6f9d4c86d4ec1b4c4392947b36 maybe make explicit that this is narrowing from long to unsigned long (size_t)\n```suggestion\n            const size_t append_len{static_cast<size_t>(terminator_found ? read_ret - 1 : read_ret)};\n```\n\n(In general, in these two added functions `Sock::SendComplete()` and `Sock::RecvUntilTerminator()`, I would personally find it more clear and reassur",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583893589,583893589,src/util/sock.cpp
jonatack,2021-02-26 21:05:16,"6da5c7eb32b51ab89f27a84e6c5e33db0e8e3e6e\n```suggestion\n     * Open a new connection to the SAM proxy and issue ""STREAM ACCEPT"" request using the existing\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583917118,583917118,src/i2p.h
jonatack,2021-02-26 21:10:26,"6da5c7e A peer = a node that is not us. If `m_my_addr` is for our own address only, maybe `s/this peer/our node/` or `* Our .b32.i2p address.`",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583919626,583919626,src/i2p.h
jonatack,2021-02-26 22:19:12,"300a654feb8cc68fc12bc8baff0f69ef031bd51f s/Notice/Note/ (or just omit ""Notice that"")\n\n```suggestion\n    argsman.AddArg(""-i2pacceptincoming"", ""If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583953158,583953158,src/init.cpp
jonatack,2021-02-26 22:21:19,"300a654feb8cc68fc12bc8baff0f69ef031bd51f\n```suggestion\n    if (!i2psam_arg.empty()) {\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583955143,583955143,src/init.cpp
jonatack,2021-02-27 19:16:11,"```suggestion\n    m_my_addr = CService{DestBinToAddr(MyDestination()), static_cast<uint16_t>(Params().GetDefaultPort())};\n```",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584177133,584177133,src/i2p.cpp
luke-jr,2021-02-28 22:13:40,Why?,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584369558,584369558,src/i2p.cpp
jonatack,2021-02-28 22:31:36,"To be explicit about the narrowing conversion, same as https://github.com/bitcoin/bitcoin/pull/20685#discussion_r583893589 above",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584371944,584371944,src/i2p.cpp
luke-jr,2021-02-28 22:36:48,"Being explicit with a static_cast has no benefits I'm aware of, just would silence warnings in cases where the warning is warranted...?",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584372575,584372575,src/i2p.cpp
jonatack,2021-03-01 11:18:07,"@luke-jr I think it's the opposite, brace (uniform) initialization raises compile time warnings, e.g. for narrowing and conversions, and named casts provide compile time checks as well.\n\n- https://google.github.io/styleguide/cppguide.html#Casting\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-casts-named\n\n""Use brace initialization to convert arithmetic types (e.g., in",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584631345,584631345,src/i2p.cpp
jonatack,2021-03-01 11:21:21,"For example, without the named cast here, brace initialization raises a compile time error for the narrowing conversion.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584633270,584633270,src/i2p.cpp
vasild,2021-03-01 16:42:55,"The thing is that here `GetDefaultPort()` returns `int` and `CService` constructor takes `uint16_t` argument. So we would get a justified warning that we want to silence. The proper fix would be to change `GetDefaultPort()` to return `uint16_t` which is out of the scope of this PR.\n\nI don't see a point in using a brace initialization for the warning and then to silence the warning with a `stat",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584873708,584873708,src/i2p.cpp
jonatack,2021-03-01 16:50:00,"I agree it can be considered out of scope to change `GetDefaultPort()`, but the suggested (ugly!) change would make explicit the type mismatch and maybe encourage improving it. As mentioned in the parent comment, none of these are blockers, just items I noted while reviewing.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584879187,584879187,src/i2p.cpp
jonatack,2021-03-01 16:59:42,"Anyway, no worries. I'll look into improving it.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584886956,584886956,src/i2p.cpp
vasild,2021-03-01 17:08:48,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584893905,584893905,src/netaddress.h
vasild,2021-03-01 17:08:59,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584894116,584894116,src/util/sock.cpp
vasild,2021-03-01 17:09:07,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584894270,584894270,src/util/sock.cpp
vasild,2021-03-01 17:10:22,In this case we can use `try_len` which is `size_t` and we already checked that it equals to `read_ret` just above this snippet.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584895326,584895326,src/util/sock.cpp
vasild,2021-03-01 17:10:40,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584895629,584895629,src/i2p.h
vasild,2021-03-01 17:10:52,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584895797,584895797,src/init.cpp
vasild,2021-03-01 17:11:02,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584895915,584895915,src/init.cpp
vasild,2021-03-01 17:11:15,Done.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r584896106,584896106,src/i2p.h
jonatack,2021-03-01 22:26:18,Proposed #21328 to address it without requiring any changes here.,https://github.com/bitcoin/bitcoin/pull/20685#discussion_r585094710,585094710,src/i2p.cpp
sdaftuar,2021-05-04 13:35:57,"I don't entirely understand how these enums (`LOCAL_BIND`, `LOCAL_MANUAL`, etc) are meant to be used, but I wonder if this should be `LOCAL_MANUAL` instead?  That seems to be what we use for listening on an onion address: https://github.com/bitcoin/bitcoin/blob/0ca8b7e7ecd5bc537fbc1e372f6755a34a136f7f/src/torcontrol.cpp#L354\n\nI noticed that when I'm running with `-externalip`, I don't get my i",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r625787084,625787084,src/net.cpp
vasild,2021-05-04 14:57:00,"I played with the `LOCAL_*` enums, but I don't remember why I chose `LOCAL_BIND` :-( I wonder why `AddLocal()` induced by `-externalip` did not work:\n\nhttps://github.com/bitcoin/bitcoin/blob/0ca8b7e7ecd5bc537fbc1e372f6755a34a136f7f/src/init.cpp#L1304-L1307",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r625856311,625856311,src/net.cpp
sdaftuar,2021-05-04 14:59:35,"Sorry I should have been more clear -- I was using `-externalip` with an ipv4 address (this node is listening on an ipv4 address, onion address, and i2p address).  However I noticed that with `-externalip` enabled, the `AddLocal` for the i2p address didn't work. \n\nPresumably if I set `-discover=1` explicitly then it would have worked?  But I was just surprised that there's a difference between",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r625858553,625858553,src/net.cpp
vasild,2021-05-11 10:58:51,"> Presumably if I set `-discover=1` explicitly then it would have worked?\n\nYes.\n\nFixed in https://github.com/bitcoin/bitcoin/pull/21914.",https://github.com/bitcoin/bitcoin/pull/20685#discussion_r630063641,630063641,src/net.cpp
