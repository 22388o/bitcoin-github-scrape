[
  {
    "sha": "662d1171d9e29964b039ba4c5bc8a2304426c003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjJkMTE3MWQ5ZTI5OTY0YjAzOWJhNGM1YmM4YTIzMDQ0MjZjMDAz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-12-19T21:30:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-14T02:49:34Z"
      },
      "message": "Add option to create an encrypted wallet",
      "tree": {
        "sha": "f50d9a669fc5c0d492a94de74c647f892c35580e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f50d9a669fc5c0d492a94de74c647f892c35580e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/662d1171d9e29964b039ba4c5bc8a2304426c003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/662d1171d9e29964b039ba4c5bc8a2304426c003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/662d1171d9e29964b039ba4c5bc8a2304426c003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/662d1171d9e29964b039ba4c5bc8a2304426c003/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "667a8617418d837092de5b37568d60b372519462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/667a8617418d837092de5b37568d60b372519462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/667a8617418d837092de5b37568d60b372519462"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 82,
      "deletions": 16
    },
    "files": [
      {
        "sha": "76ed3247a63d465d5966bc91db86f95d6aeb1c08",
        "filename": "doc/release-notes-15006.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/662d1171d9e29964b039ba4c5bc8a2304426c003/doc/release-notes-15006.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/662d1171d9e29964b039ba4c5bc8a2304426c003/doc/release-notes-15006.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15006.md?ref=662d1171d9e29964b039ba4c5bc8a2304426c003",
        "patch": "@@ -0,0 +1,4 @@\n+Miscellaneous RPC changes\n+------------\n+\n+- `createwallet` can now create encrypted wallets if a non-empty passphrase is specified."
      },
      {
        "sha": "96a74a338a8c061858c19e213a36281980b7cf4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 16,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/662d1171d9e29964b039ba4c5bc8a2304426c003/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/662d1171d9e29964b039ba4c5bc8a2304426c003/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=662d1171d9e29964b039ba4c5bc8a2304426c003",
        "patch": "@@ -2641,26 +2641,29 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue createwallet(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n-        throw std::runtime_error(\n-            RPCHelpMan{\"createwallet\",\n-                \"\\nCreates and loads a new wallet.\\n\",\n-                {\n-                    {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n-                    {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n-                    {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n-                },\n-                RPCResult{\n+    const RPCHelpMan help{\n+        \"createwallet\",\n+        \"\\nCreates and loads a new wallet.\\n\",\n+        {\n+            {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name for the new wallet. If this is a path, the wallet will be created at the path location.\"},\n+            {\"disable_private_keys\", RPCArg::Type::BOOL, /* default */ \"false\", \"Disable the possibility of private keys (only watchonlys are possible in this mode).\"},\n+            {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n+            {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n+        },\n+        RPCResult{\n             \"{\\n\"\n             \"  \\\"name\\\" :    <wallet_name>,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\\n\"\n             \"  \\\"warning\\\" : <warning>,            (string) Warning message if wallet was not loaded cleanly.\\n\"\n             \"}\\n\"\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"createwallet\", \"\\\"testwallet\\\"\")\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n-                },\n-            }.ToString());\n+        },\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n     }\n     std::string error;\n     std::string warning;\n@@ -2670,7 +2673,20 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n \n+    bool create_blank = false; // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     if (!request.params[2].isNull() && request.params[2].get_bool()) {\n+        create_blank = true;\n+        flags |= WALLET_FLAG_BLANK_WALLET;\n+    }\n+    SecureString passphrase;\n+    passphrase.reserve(100);\n+    if (!request.params[3].isNull()) {\n+        passphrase = request.params[3].get_str().c_str();\n+        if (passphrase.empty()) {\n+            // Empty string is invalid\n+            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Cannot encrypt a wallet with a blank password\");\n+        }\n+        // Born encrypted wallets need to be blank first so that wallet creation doesn't make any unencrypted keys\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n@@ -2688,6 +2704,29 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }\n+\n+    // Encrypt the wallet if there's a passphrase\n+    if (!passphrase.empty() && !(flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!wallet->EncryptWallet(passphrase)) {\n+            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet created but failed to encrypt.\");\n+        }\n+\n+        if (!create_blank) {\n+            // Unlock the wallet\n+            if (!wallet->Unlock(passphrase)) {\n+                throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet was encrypted but could not be unlocked\");\n+            }\n+\n+            // Set a seed for the wallet\n+            CPubKey master_pub_key = wallet->GenerateNewSeed();\n+            wallet->SetHDSeed(master_pub_key);\n+            wallet->NewKeyPool();\n+\n+            // Relock the wallet\n+            wallet->Lock();\n+        }\n+    }\n+\n     AddWallet(wallet);\n \n     wallet->postInitProcess();\n@@ -4140,7 +4179,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "fc7969ad19a56fef9a4d75dafb089e8df5aa8cf2",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/662d1171d9e29964b039ba4c5bc8a2304426c003/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/662d1171d9e29964b039ba4c5bc8a2304426c003/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=662d1171d9e29964b039ba4c5bc8a2304426c003",
        "patch": "@@ -96,5 +96,28 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n         assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n \n+        self.log.info('New blank and encrypted wallets can be created')\n+        self.nodes[0].createwallet(wallet_name='wblank', disable_private_keys=False, blank=True, passphrase='thisisapassphrase')\n+        wblank = node.get_wallet_rpc('wblank')\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", wblank.signmessage, \"needanargument\", \"test\")\n+        wblank.walletpassphrase('thisisapassphrase', 10)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", wblank.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", wblank.getrawchangeaddress)\n+\n+        self.log.info('Test creating a new encrypted wallet.')\n+        # Born encrypted wallet is created (has keys)\n+        self.nodes[0].createwallet(wallet_name='w6', disable_private_keys=False, blank=False, passphrase='thisisapassphrase')\n+        w6 = node.get_wallet_rpc('w6')\n+        assert_raises_rpc_error(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\", w6.signmessage, \"needanargument\", \"test\")\n+        w6.walletpassphrase('thisisapassphrase', 10)\n+        w6.signmessage(w6.getnewaddress('', 'legacy'), \"test\")\n+        w6.keypoolrefill(1)\n+        # There should only be 1 key\n+        walletinfo = w6.getwalletinfo()\n+        assert_equal(walletinfo['keypoolsize'], 1)\n+        assert_equal(walletinfo['keypoolsize_hd_internal'], 1)\n+        # Empty passphrase, error\n+        assert_raises_rpc_error(-16, 'Cannot encrypt a wallet with a blank password', self.nodes[0].createwallet, 'w7', False, False, '')\n+\n if __name__ == '__main__':\n     CreateWalletTest().main()"
      }
    ]
  }
]