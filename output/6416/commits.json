[
  {
    "sha": "d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmYzYzE2YTU5YzZkOTY3ZGJhNGIyODc4ZDRhMjcwMWY0ZWIzYmJm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-15T23:24:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-20T18:55:26Z"
      },
      "message": "Optimizations: Consensus: In main::AcceptToMemoryPool, main::ConnectBlock, and miner::CreateNewBlock and\n\nIn all of them, reject transactions creating new money earlier.\nConsensus::CheckTxInputs gets nTxFee as output parameter and is separated from main::CheckInputs [renamed CheckInputsScripts]\n\n- Consensus::CheckTxInputs (called by the rest):\n\nDon't calculate nValueOut twice\nDon't check nFees < 0 twice\n\n- main::AcceptToMemoryPool:\n\nDon't call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn 3 times\nDon't calculate nValueOut 5 times\n\n- miner::CreateNewBlock:\n\nDon't call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn twice\nDon't calculate nValueOut 3 times\n\n- main::ConnectBlock:\n\nStill call CCoinsViewCache::HaveInputs twice\nDon't calculate nValueIn twice\nDon't calculate nValueOut 3 times",
      "tree": {
        "sha": "b9ac02492e7f480098bd0eba978b72874768161b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9ac02492e7f480098bd0eba978b72874768161b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 59,
      "deletions": 48
    },
    "files": [
      {
        "sha": "a6301d700f20035982a4bc9ed6ee742a8e886105",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -6,11 +6,34 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include \"amount.h\"\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+\n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/**\n+ * Consensus validations:\n+ * Check_ means checking everything possible with the data provided\n+ * (that has not been checked in previous cheaper functions for the same data structure).\n+ * Verify_ means all data provided was enough for this level and its \"consensus-verified\".\n+ */\n+namespace Consensus {\n+\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& nTxFee);\n+\n+} // namespace Consensus\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "72facb57829a565c573e91d63d7ee00a628b1a23",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 39,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -799,8 +799,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n-\n-        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n@@ -821,20 +819,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             }\n         }\n \n-        // are the actual inputs available?\n-        if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n-\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n+        CAmount nFees;\n+        if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nFees))\n+            return error(\"%s: Consensus::CheckTxInputs: %s\", __func__, state.GetRejectReason());\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n@@ -852,10 +847,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n-\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n@@ -902,7 +894,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputsScripts(tx, state, view, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n         {\n             return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n         }\n@@ -916,7 +908,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n         {\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n@@ -1270,15 +1262,14 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n }\n \n namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& nTxFee)\n {\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n             return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1301,31 +1292,24 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n \n         }\n \n-        if (nValueIn < tx.GetValueOut())\n+        // Tally transaction fees\n+        CAmount nValueOut = tx.GetValueOut();\n+        nTxFee = nValueIn - nValueOut;\n+        if (nValueIn < nValueOut)\n             return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n+                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(nValueOut)),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n+        if (!MoneyRange(nTxFee))\n             return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n }// namespace Consensus\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n-        if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n-            return false;\n-\n         if (pvChecks)\n             pvChecks->reserve(tx.vin.size());\n \n@@ -1336,7 +1320,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Skip ECDSA signature verification when connecting blocks\n         // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-        if (fScriptChecks) {\n             for (unsigned int i = 0; i < tx.vin.size(); i++) {\n                 const COutPoint &prevout = tx.vin[i].prevout;\n                 const CCoins* coins = inputs.AccessCoins(prevout.hash);\n@@ -1370,7 +1353,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     return state.DoS(100,false, REJECT_INVALID, strprintf(\"mandatory-script-verify-flag-failed (%s)\", ScriptErrorString(check.GetScriptError())));\n                 }\n             }\n-        }\n     }\n \n     return true;\n@@ -1741,10 +1723,15 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n         if (!tx.IsCoinBase())\n         {\n-            if (!view.HaveInputs(tx))\n+            if (!view.HaveInputs(tx)) // Redundant check with different DoS score\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            CAmount nTxFees;\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nTxFees))\n+                return error(\"%s: Consensus::CheckTxInputs: %s\", __func__, state.GetRejectReason());\n+            nFees += nTxFees;\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n@@ -1756,12 +1743,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n-            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n-\n-            std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n-            control.Add(vChecks);\n+            if (fScriptChecks) {\n+                std::vector<CScriptCheck> vChecks;\n+                if (!CheckInputsScripts(tx, state, view, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n+                    return false;\n+                control.Add(vChecks);\n+            }\n         }\n \n         CTxUndo undoDummy;"
      },
      {
        "sha": "81134f01089b37c37421fe07fe9b634182aaa8db",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -284,7 +284,7 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n  * instead of being performed inline.\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n+bool CheckInputsScripts(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view,\n                  unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */"
      },
      {
        "sha": "7392f7fa435bb2050bfe1294b90228dd016253a8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -92,6 +92,7 @@ void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams,\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     const CChainParams& chainparams = Params();\n+    CValidationState state;\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -266,20 +267,18 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 std::make_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             }\n \n-            if (!view.HaveInputs(tx))\n+            CAmount nTxFees;\n+            if (!Consensus::CheckTxInputs(tx, state, view, GetSpendHeight(view), nTxFees))\n                 continue;\n \n-            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n-\n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n             // Note that flags: we don't want to set mempool/IsStandard()\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n-            CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+            if (!CheckInputsScripts(tx, state, view, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n             UpdateCoins(tx, state, view, nHeight);"
      },
      {
        "sha": "6c8939a614cdb45f890ee0534f2b18f055384f39",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -34,7 +34,7 @@ extern unsigned nMaxDatacarrierBytes;\n  * but in the future other flags may be added, such as a soft-fork to enforce\n  * strict DER encoding.\n  * \n- * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n+ * Failing one of these tests may trigger a DoS ban - see CheckInputsScripts() for\n  * details.\n  */\n static const unsigned int MANDATORY_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_P2SH;"
      },
      {
        "sha": "73702e2261b57dbdd6493db9c8a723dc05ac8f2e",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "patch": "@@ -275,7 +275,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&it->second);\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            CAmount nTxFees;\n+            assert(Consensus::CheckTxInputs(tx, state, mempoolDuplicate, GetSpendHeight(mempoolDuplicate), nTxFees));\n             UpdateCoins(tx, state, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -289,7 +290,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            CAmount nTxFees;\n+            assert(Consensus::CheckTxInputs(entry->GetTx(), state, mempoolDuplicate, GetSpendHeight(mempoolDuplicate), nTxFees));\n             UpdateCoins(entry->GetTx(), state, mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "4db612d3f828d13be362e49313668cbcb9e3b4a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGI2MTJkM2Y4MjhkMTNiZTM2MmU0OTMxMzY2OGNiY2I5ZTNiNGEz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-13T12:09:07Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-20T19:07:37Z"
      },
      "message": "Optimization: Unify (fLimitFree && nFees - nFeesDeleted < ::minRelayTxFee.GetFee(nSize)) condition\n\nThe following condition won't be checked anymore unless fLimitFree == true:\n\nGetBoolArg(\"-relaypriority\", true) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))",
      "tree": {
        "sha": "4918cc7d9f87d1625133f6e06a9e2ac8d29d11db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4918cc7d9f87d1625133f6e06a9e2ac8d29d11db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4db612d3f828d13be362e49313668cbcb9e3b4a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db612d3f828d13be362e49313668cbcb9e3b4a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4db612d3f828d13be362e49313668cbcb9e3b4a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db612d3f828d13be362e49313668cbcb9e3b4a3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2f3c16a59c6d967dba4b2878d4a2701f4eb3bbf"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ac088cc349335d756f7a968d2eeeef5212906427",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4db612d3f828d13be362e49313668cbcb9e3b4a3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4db612d3f828d13be362e49313668cbcb9e3b4a3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4db612d3f828d13be362e49313668cbcb9e3b4a3",
        "patch": "@@ -851,23 +851,21 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n+        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize)) {\n+\n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n+            if (GetMinRelayFee(tx, nSize, true) != 0)\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n+                                      hash.ToString(), nFees, ::minRelayTxFee.GetFee(nSize)),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            if (GetBoolArg(\"-relaypriority\", true) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1)))\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-        }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n             static int64_t nLastTime;"
      }
    ]
  },
  {
    "sha": "abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmJjZGIxMDYzODcwNDAyYTllMjNkNWY3Y2Q2ZjQ0MGQ0ODI3ZjVj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-13T13:25:09Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-20T19:08:40Z"
      },
      "message": "Cleanup: GetMinRelayFee() -> AllowBelowMinRelayFee()",
      "tree": {
        "sha": "dfa0188fec2ded44eb9354ce3dbcb351eb7d39b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfa0188fec2ded44eb9354ce3dbcb351eb7d39b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbcdb1063870402a9e23d5f7cd6f440d4827f5c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4db612d3f828d13be362e49313668cbcb9e3b4a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4db612d3f828d13be362e49313668cbcb9e3b4a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4db612d3f828d13be362e49313668cbcb9e3b4a3"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 16,
      "deletions": 26
    },
    "files": [
      {
        "sha": "192fbe6fe65ce76693af3955b31978273b4c73ee",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbcdb1063870402a9e23d5f7cd6f440d4827f5c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbcdb1063870402a9e23d5f7cd6f440d4827f5c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
        "patch": "@@ -846,7 +846,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n         CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n+        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && MoneyRange(n))\n             ::minRelayTxFee = CFeeRate(n);\n         else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"]));"
      },
      {
        "sha": "60a38c35b3672af307904ea4bea98057dbedc8ed",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 25,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abbcdb1063870402a9e23d5f7cd6f440d4827f5c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abbcdb1063870402a9e23d5f7cd6f440d4827f5c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
        "patch": "@@ -718,33 +718,23 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+static bool AllowBelowMinRelayFee(CTxMemPool& pool, const uint256& hash, unsigned int nBytes)\n {\n-    {\n-        LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n-        double dPriorityDelta = 0;\n-        CAmount nFeeDelta = 0;\n-        mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-        if (dPriorityDelta > 0 || nFeeDelta > 0)\n-            return 0;\n-    }\n-\n-    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n+    bool fAllowFree = true;\n+    double dPriorityDelta = 0;\n+    CAmount nFeeDelta = 0;\n+    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+    if (dPriorityDelta > 0 || nFeeDelta > 0)\n+        return true;\n \n-    if (fAllowFree)\n-    {\n-        // There is a free transaction area in blocks created by most miners,\n-        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-        //   to be considered to fall into this category. We don't want to encourage sending\n-        //   multiple transactions instead of one big transaction to avoid fees.\n-        if (nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n-            nMinFee = 0;\n-    }\n+    // There is a free transaction area in blocks created by most miners,\n+    // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+    //   to be considered to fall into this category. We don't want to encourage sending\n+    //   multiple transactions instead of one big transaction to avoid fees.\n+    if (fAllowFree && nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n+        return true;\n \n-    if (!MoneyRange(nMinFee))\n-        nMinFee = MAX_MONEY;\n-    return nMinFee;\n+    return false;\n }\n \n \n@@ -854,7 +844,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize)) {\n \n         // Don't accept it if it can't get into a block\n-            if (GetMinRelayFee(tx, nSize, true) != 0)\n+            if (!AllowBelowMinRelayFee(pool, hash, nSize))\n             return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, ::minRelayTxFee.GetFee(nSize)),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");"
      }
    ]
  },
  {
    "sha": "4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzUxYjNmYzU2NjE2M2EwNzYzNmYwZGFiZDJjZjhmZTdhYjUzYjk2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-14T20:44:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-20T20:48:04Z"
      },
      "message": "Mempool: Prepare AcceptToMemoryPool to support mempool replacements\n\nWith some code taken from Pieter Wuille's #6421",
      "tree": {
        "sha": "f58ff80e2ca7c835751ec1da51a2273bb25aa261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f58ff80e2ca7c835751ec1da51a2273bb25aa261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abbcdb1063870402a9e23d5f7cd6f440d4827f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abbcdb1063870402a9e23d5f7cd6f440d4827f5c"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 162,
      "deletions": 89
    },
    "files": [
      {
        "sha": "87c2e3f891ee9330464637438ce03163343f08cd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -18,6 +18,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"rpcserver.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "591ed7fc19019bc1ab2e09920ae169cee1b2be4f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 67,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -718,26 +718,6 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-static bool AllowBelowMinRelayFee(CTxMemPool& pool, const uint256& hash, unsigned int nBytes)\n-{\n-    bool fAllowFree = true;\n-    double dPriorityDelta = 0;\n-    CAmount nFeeDelta = 0;\n-    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-    if (dPriorityDelta > 0 || nFeeDelta > 0)\n-        return true;\n-\n-    // There is a free transaction area in blocks created by most miners,\n-    // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-    //   to be considered to fall into this category. We don't want to encourage sending\n-    //   multiple transactions instead of one big transaction to avoid fees.\n-    if (fAllowFree && nBytes < (DEFAULT_BLOCK_PRIORITY_SIZE - 1000))\n-        return true;\n-\n-    return false;\n-}\n-\n-\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n {\n@@ -772,20 +752,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n-    // Check for conflicts with in-memory transactions\n-    {\n-    LOCK(pool.cs); // protect pool.mapNextTx\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        COutPoint outpoint = tx.vin[i].prevout;\n-        if (pool.mapNextTx.count(outpoint))\n-        {\n-            // Disable replacement feature for now\n-            return false;\n-        }\n-    }\n-    }\n-\n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n@@ -838,41 +804,14 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n         double dPriority = view.GetPriority(tx, chainActive.Height());\n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize)) {\n-\n-        // Don't accept it if it can't get into a block\n-            if (!AllowBelowMinRelayFee(pool, hash, nSize))\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, ::minRelayTxFee.GetFee(nSize)),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-            if (GetBoolArg(\"-relaypriority\", true) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1)))\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-\n-        // Continuously rate-limit free (really, very-low-fee) transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n+        // Try to make space in mempool\n+        if (!pool.StageReplace(entry, state, fLimitFree, view)) {\n+            LogPrintf(\"%s: CTxMemPool::StageReplace: %s (txHash %s)\", __func__, state.GetRejectReason(), hash.ToString());\n+            pool.ClearStaged();\n+            return false;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n@@ -901,6 +840,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Make actually space\n+        pool.RemoveStaged(hash);\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n     }"
      },
      {
        "sha": "f67dc687cef47679f147454c5e49154aae972a3f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -12,6 +12,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "4a84f8c435ce89bb7ae87b699f1935195742d1e1",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -6,6 +6,7 @@\n #include \"policy/fees.h\"\n \n #include \"amount.h\"\n+#include \"consensus/validation.h\"\n #include \"primitives/transaction.h\"\n #include \"streams.h\"\n #include \"txmempool.h\"\n@@ -527,3 +528,41 @@ void CBlockPolicyEstimator::Read(CAutoFile& filein)\n     priStats.Read(filein);\n     nBestSeenHeight = nFileBestSeenHeight;\n }\n+\n+bool CBlockPolicyEstimator::AllowFreeTx(const CTxMemPoolEntry& toadd, CValidationState& state, const double& dViewPriority) const\n+{\n+    const size_t nSize = toadd.GetTxSize();\n+\n+    // There is a free transaction area in blocks created by most miners,\n+    // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n+    //   to be considered to fall into this category. We don't want to encourage sending\n+    //   multiple transactions instead of one big transaction to avoid fees.\n+    if (nSize >= DEFAULT_BLOCK_PRIORITY_SIZE - 1000)\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+\n+    // Require that free transactions have sufficient priority to be mined in the next block.\n+    if (GetBoolArg(\"-relaypriority\", true) && !AllowFree(dViewPriority))\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+\n+    // Continuously rate-limit free (really, very-low-fee) transactions\n+    // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+    // be annoying or make others' transactions take longer to confirm.\n+    static CCriticalSection csFreeLimiter;\n+    static double dFreeCount;\n+    static int64_t nLastTime;\n+    int64_t nNow = GetTime();\n+\n+    LOCK(csFreeLimiter);\n+\n+    // Use an exponentially decaying ~10-minute window:\n+    dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+    nLastTime = nNow;\n+    // -limitfreerelay unit is thousand-bytes-per-minute\n+    // At default rate it would take over a month to fill 1GB\n+    if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+    LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+    dFreeCount += nSize;\n+\n+    return true;\n+}"
      },
      {
        "sha": "8be87c032411bff9a8d18636931e88b8698ddd27",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -15,6 +15,22 @@\n class CAutoFile;\n class CFeeRate;\n class CTxMemPoolEntry;\n+class CValidationState;\n+\n+/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n+static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n+\n+inline double AllowFreeThreshold()\n+{\n+    return COIN * 144 / 250;\n+}\n+\n+inline bool AllowFree(double dPriority)\n+{\n+    // Large (in bytes) low-priority (new, small-coin) transactions\n+    // need a fee.\n+    return dPriority > AllowFreeThreshold();\n+}\n \n /** \\class CBlockPolicyEstimator\n  * The BlockPolicyEstimator is used for estimating the fee or priority needed\n@@ -251,6 +267,9 @@ class CBlockPolicyEstimator\n     /** Read estimation data from a file */\n     void Read(CAutoFile& filein);\n \n+    /** Allow transactions bellow the min relay fee or not */\n+    bool AllowFreeTx(const CTxMemPoolEntry& toadd, CValidationState& state, const double& dViewPriority) const;\n+\n private:\n     CFeeRate minTrackedFee; //! Passed to constructor to avoid dependency on main\n     double minTrackedPriority; //! Set to AllowFreeThreshold"
      },
      {
        "sha": "3b6dc91b83affda7b529960ed6a6e5665eb985a8",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -17,8 +17,6 @@ class CCoinsViewCache;\n /** Default for -blockmaxsize and -blockminsize, which control the range of sizes the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n static const unsigned int DEFAULT_BLOCK_MIN_SIZE = 0;\n-/** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n-static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 50000;\n /** The maximum size for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_SIZE = 100000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */"
      },
      {
        "sha": "09df9d2227554cf1953c56474650e4127805fd10",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -15,6 +15,7 @@\n #include \"coincontrol.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"policy/fees.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "b5122ebb1139c54641065604da8ff617dbf56001",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 8,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -108,6 +108,19 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     return true;\n }\n \n+void CTxMemPool::removeUnchecked(const uint256& hash)\n+{\n+    const CTxMemPoolEntry &entry = mapTx.find(hash)->second;\n+\n+    BOOST_FOREACH(const CTxIn& txin, entry.GetTx().vin)\n+        mapNextTx.erase(txin.prevout);\n+\n+    totalTxSize -= entry.GetTxSize();\n+    cachedInnerUsage -= entry.DynamicMemoryUsage();\n+    mapTx.erase(hash);\n+    nTransactionsUpdated++;\n+    minerPolicyEstimator->removeTx(hash);\n+}\n \n void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n@@ -143,15 +156,8 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n                     txToRemove.push_back(it->second.ptx->GetHash());\n                 }\n             }\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n-\n             removed.push_back(tx);\n-            totalTxSize -= mapTx[hash].GetTxSize();\n-            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-            minerPolicyEstimator->removeTx(hash);\n+            removeUnchecked(hash);\n         }\n     }\n }\n@@ -433,3 +439,63 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     LOCK(cs);\n     return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n }\n+\n+void CTxMemPool::ClearStaged()\n+{\n+    stage.clear();\n+    nStageFeesRemoved = 0;\n+}\n+\n+bool CTxMemPool::StageReplace(const CTxMemPoolEntry& toadd, CValidationState& state, bool fLimitFree, const CCoinsViewCache& view)\n+{\n+    ClearStaged();\n+    bool fSpendConflicts = false;\n+    // Check for conflicts with in-memory transactions\n+    {\n+        LOCK(cs); // protect pool.mapNextTx\n+        BOOST_FOREACH(const CTxIn& in, toadd.GetTx().vin) {\n+            if (mapNextTx.count(in.prevout))\n+                fSpendConflicts = true;\n+        }\n+    }\n+    const CTransaction& tx = toadd.GetTx();\n+    uint256 hash = tx.GetHash();\n+    const CAmount nFees = toadd.GetFee();\n+    const size_t nSize = toadd.GetTxSize();\n+\n+    if (fSpendConflicts) {\n+        // Disable replacement feature for now\n+        return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"replacement-rejected-conflicts\");\n+    }\n+\n+    if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize) + nStageFeesRemoved) {\n+\n+        bool fAllowFree = true;\n+        double dPriorityDelta = 0;\n+        CAmount nFeeDelta = 0;\n+        ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+        if (dPriorityDelta <= 0 || nFeeDelta <= 0) {\n+            state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            fAllowFree = false;\n+        } else if (!minerPolicyEstimator->AllowFreeTx(toadd, state, view.GetPriority(tx, chainActive.Height() + 1)))\n+            fAllowFree = false;\n+\n+        if (!fAllowFree) {\n+            LogPrintf(\"%s: %s: %d < %d (txHash %s)\", __func__, state.GetRejectReason(), nFees, ::minRelayTxFee.GetFee(nSize) + nStageFeesRemoved, hash.ToString());\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+void CTxMemPool::RemoveStaged(const uint256& txHash)\n+{\n+    if (!stage.empty()) {\n+        LogPrint(\"mempool\", \"Removing %u transactions (%d fees) from the mempool to make space for %s\\n\", stage.size(), nStageFeesRemoved, txHash.ToString());\n+        BOOST_FOREACH(const uint256& hash, stage) {\n+            removeUnchecked(hash);\n+        }\n+        ClearStaged();\n+    }\n+}"
      },
      {
        "sha": "78a13e5952a79dc603fb363fef6b60b261c46021",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -14,18 +14,7 @@\n #include \"sync.h\"\n \n class CAutoFile;\n-\n-inline double AllowFreeThreshold()\n-{\n-    return COIN * 144 / 250;\n-}\n-\n-inline bool AllowFree(double dPriority)\n-{\n-    // Large (in bytes) low-priority (new, small-coin) transactions\n-    // need a fee.\n-    return dPriority > AllowFreeThreshold();\n-}\n+class CValidationState;\n \n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n@@ -97,6 +86,8 @@ class CTxMemPool\n \n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n+    CAmount nStageFeesRemoved;\n+    std::set<uint256> stage;\n \n public:\n     mutable CCriticalSection cs;\n@@ -117,6 +108,7 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n+    void removeUnchecked(const uint256& hash);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n     void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n@@ -138,6 +130,20 @@ class CTxMemPool\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n+    /**\n+     * Resets stage and nStageFeesRemoved.\n+     */\n+    void ClearStaged();\n+    /**\n+     * Build a stage list (attribute) of transaction (hashes) to replace such that:\n+     *  - The list is consistent (if a parent is included, all its dependencies are included as well).\n+     *  - No dependencies of toadd are removed.\n+     *  - The transactions have to be removed from the mempool to accept toadd (due to spend conflicts and/or insufficient space in the mempool). \n+     * @returns false if the new entry is rejected.\n+     */\n+    bool StageReplace(const CTxMemPoolEntry& toadd, CValidationState& state, bool fLimitFree, const CCoinsViewCache& view);\n+    void RemoveStaged(const uint256& txHash);\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      },
      {
        "sha": "657eb6b9bbec7371a48494b209460f743b73a310",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c51b3fc566163a07636f0dabd2cf8fe7ab53b96/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4c51b3fc566163a07636f0dabd2cf8fe7ab53b96",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      }
    ]
  }
]