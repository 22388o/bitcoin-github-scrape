vasild,2021-07-19 08:17:11,"`LegacyScriptPubKeyMan::cs_KeyStore` can still be acquired before `cs_main`:\n\nLock `cs_KeyStore`:\nhttps://github.com/achow101/bitcoin/blob/9454cbfbd6f9da257b8f87e8186c421c54966857/src/wallet/wallet.cpp#L2309\n\nCall `ChainImpl::findBlock()`:\nhttps://github.com/achow101/bitcoin/blob/9454cbfbd6f9da257b8f87e8186c421c54966857/src/wallet/wallet.cpp#L2350\nwhich locks `cs_main`:\nhttps://git",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882345613,882345613,
MarcoFalke,2021-07-19 09:01:33,Potentially introduced in pull #16426 ?,https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882376463,882376463,
ryanofsky,2021-07-19 14:39:38,"What code path is waiting to acquire `cs_keystore` while `cs_main` is acquired? (EDIT: It is [this `requestMempoolTransactions` call](https://github.com/bitcoin/bitcoin/blob/54e31742d208eb98ce706aaa6bbd4b023f42c3a5/src/wallet/wallet.cpp#L2867)).\n\nThe goal of #16426 was to not acquire wallet locks with `cs_main` acquired, and in general to avoid doing any slow stuff with `cs_main` acquired, so ",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882603654,882603654,
ryanofsky,2021-07-19 15:51:46,#15719 should fix this by no longer trying to acquire wallet locks while cs_main is held. The call order there is `CWallet::AttachChain` calling [`handleNotifications`](https://github.com/ryanofsky/bitcoin/blob/pr/pool.35/src/wallet/wallet.cpp#L2765-L2768) calling [`mempool_fn`](https://github.com/ryanofsky/bitcoin/blob/pr/pool.35/src/node/interfaces.cpp#L629) on the validationinterface queue thre,https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882659440,882659440,
MarcoFalke,2021-07-19 16:02:48,"#15719 looks a bit large to get into 22.0. Though, this doesn't seem like a regression (it might exist in 21.x), so maybe we just ignore it for 22.0?",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882667822,882667822,
ryanofsky,2021-07-19 16:20:44,"> #15719 looks a bit large to get into 22.0. Though, this doesn't seem like a regression (it might exist in 21.x), so maybe we just ignore it for 22.0?\n\nYes would not want to use #15719 to fix this issue if it needs to be fixed this release. I didn't verify but would guess the issue was probably introduced with #16426 like you suggested and not a recent regression.\n\nAlso, I think probably ",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882681954,882681954,
MarcoFalke,2021-07-19 16:26:25,">  It seems like using one lock order before the wallet is loaded and a slightly different lock order after it is loaded wouldn't be a problem without the lock order debug assertions.\n\nIf there are more than one rpc threads loading/using wallets, it could deadlock?",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882685905,882685905,
achow101,2021-07-19 16:35:27,"> `LegacyScriptPubKeyMan::cs_KeyStore` can still be acquired before `cs_main`:\n\nFixed by putting cs_KeyStore within a scope.\n\n> Also, I think probably (but could be wring) there may not even be a deadlock here in release builds and this could be a debug_lockerorder false-positive. It seems like using one lock order before the wallet is loaded and a slightly different lock order after it is",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882691780,882691780,
ryanofsky,2021-07-19 17:03:31,"> If there are more than one rpc threads loading/using wallets, it could deadlock?\n\nI don't think so either for the same reason achow said. Each wallet has it's own wallet and keystore locks, and only one thread can load a wallet at time. So whatever lock order is used by that thread for those locks during initialization does not seem relevant. I could imagine fixing this issue by adding an `I",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882709662,882709662,
prayank23,2021-07-19 18:28:19,"<details><summary>Master Branch ‚ùå</summary>\n\n1. Without `--enable-debug`: No issues https://github.com/bitcoin/bitcoin/issues/22489#issuecomment-882155569 ‚úÖ\n2. With `--enable-debug`:\n      (a) mempool `size` > 0: Error as mentioned in Issue description https://github.com/bitcoin/bitcoin/issues/22489#issue-947130115 ‚ùå \n      (b) mempool `size` = 0: No issues ‚úÖ </details>\n\n<details><su",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882765213,882765213,
DrahtBot,2021-07-19 19:11:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21206 by ryanofsky\n\nIf you consider this pull request important, please also help to review the conflicting pull reques",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-882791629,882791629,
MarcoFalke,2021-07-20 13:03:49,"review ACK 9b85a5e2f7e003ca8621feaac9bdd304d19081b4 üé∞\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK 9b85a5e2f7e003ca8621feaac9bdd304d19081b4 üé∞\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgBLQv+PmySuwM9ak0Ck/qctmtnTO9CqXBcld9qmnp1",https://github.com/bitcoin/bitcoin/pull/22492#issuecomment-883375321,883375321,
MarcoFalke,2021-07-19 08:56:15,"nit: Wouldn't import be faster than generate?\n\n```py\nw3.importprivkey(privkey=self.nodes[0].get_deterministic_priv_key().key, label='coinbase_import')",https://github.com/bitcoin/bitcoin/pull/22492#discussion_r672115720,672115720,test/functional/wallet_dump.py
achow101,2021-07-19 16:35:45,For some reason I thought this was a clean chain. Changed as suggested.,https://github.com/bitcoin/bitcoin/pull/22492#discussion_r672457145,672457145,test/functional/wallet_dump.py
ryanofsky,2021-07-19 17:23:24,"In commit ""Reorder dumpwallet so that cs_main functions go first"" (25d99e6511d8c43b2025a89bcd8295de755346a7)\n\nNote: this comment is good to keep here, but I just want to remind myself for later that this part will no longer be true and could be dropped with #15719, which avoids nested locking on the init thread",https://github.com/bitcoin/bitcoin/pull/22492#discussion_r672489609,672489609,src/wallet/rpcdump.cpp
