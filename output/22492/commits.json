[
  {
    "sha": "25d99e6511d8c43b2025a89bcd8295de755346a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWQ5OWU2NTExZDhjNDNiMjAyNWE4OWJjZDgyOTVkZTc1NTM0NmE3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T02:53:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T16:25:11Z"
      },
      "message": "Reorder dumpwallet so that cs_main functions go first\n\nDEBUG_LOCKORDER expects cs_wallet, cs_main, and cs_KeyStore to be\nacquired in that order. However dumpwallet would take these in the order\ncs_wallet, cs_KeyStore, cs_main. So when configured with\n`--enable-debug`, it is possible to hit the lock order assertion when\nusing dumpwallet.\n\nTo fix this, cs_wallet and cs_KeyStore are no longer locked at the same\ntime. Instead cs_wallet will be locked first. Then the functions which\nlock cs_main will be run. Lastly cs_KeyStore will be locked afterwards.\nThis avoids the lock order issue.\n\nFurthermore, since GetKeyBirthTimes (only used by dumpwallet) also uses\na function that locks cs_main, and itself also locks cs_KeyStore, the\nsame reordering is done here.",
      "tree": {
        "sha": "467679d286c6ed7b36ca85e8d23c70f32ea6252d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/467679d286c6ed7b36ca85e8d23c70f32ea6252d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25d99e6511d8c43b2025a89bcd8295de755346a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d99e6511d8c43b2025a89bcd8295de755346a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25d99e6511d8c43b2025a89bcd8295de755346a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d99e6511d8c43b2025a89bcd8295de755346a7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f85e0e86e92e583b8984455b7bf9d0a777578a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f85e0e86e92e583b8984455b7bf9d0a777578a"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 44,
      "deletions": 35
    },
    "files": [
      {
        "sha": "ac60504419bb63363d834c09a1c0e720d47ed5bc",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d99e6511d8c43b2025a89bcd8295de755346a7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d99e6511d8c43b2025a89bcd8295de755346a7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=25d99e6511d8c43b2025a89bcd8295de755346a7",
        "patch": "@@ -740,7 +740,7 @@ RPCHelpMan dumpwallet()\n     // the user could have gotten from another RPC command prior to now\n     wallet.BlockUntilSyncedToCurrentChain();\n \n-    LOCK2(wallet.cs_wallet, spk_man.cs_KeyStore);\n+    LOCK(wallet.cs_wallet);\n \n     EnsureWalletIsUnlocked(wallet);\n \n@@ -762,9 +762,16 @@ RPCHelpMan dumpwallet()\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n     std::map<CKeyID, int64_t> mapKeyBirth;\n-    const std::map<CKeyID, int64_t>& mapKeyPool = spk_man.GetAllReserveKeys();\n     wallet.GetKeyBirthTimes(mapKeyBirth);\n \n+    int64_t block_time = 0;\n+    CHECK_NONFATAL(wallet.chain().findBlock(wallet.GetLastBlockHash(), FoundBlock().time(block_time)));\n+\n+    // Note: To avoid a lock order issue, access to cs_main must be locked before cs_KeyStore.\n+    // So we do the two things in this function that lock cs_main first: GetKeyBirthTimes, and findBlock.\n+    LOCK(spk_man.cs_KeyStore);\n+\n+    const std::map<CKeyID, int64_t>& mapKeyPool = spk_man.GetAllReserveKeys();\n     std::set<CScriptID> scripts = spk_man.GetCScripts();\n \n     // sort time/key pairs\n@@ -779,8 +786,6 @@ RPCHelpMan dumpwallet()\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n     file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", wallet.GetLastBlockHeight(), wallet.GetLastBlockHash().ToString());\n-    int64_t block_time = 0;\n-    CHECK_NONFATAL(wallet.chain().findBlock(wallet.GetLastBlockHash(), FoundBlock().time(block_time)));\n     file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(block_time));\n     file << \"\\n\";\n "
      },
      {
        "sha": "9a61ca698d25fc99d3771b532e0b60b1385afea8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 31,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25d99e6511d8c43b2025a89bcd8295de755346a7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25d99e6511d8c43b2025a89bcd8295de755346a7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=25d99e6511d8c43b2025a89bcd8295de755346a7",
        "patch": "@@ -2298,44 +2298,48 @@ void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t>& mapKeyBirth) const {\n     AssertLockHeld(cs_wallet);\n     mapKeyBirth.clear();\n \n-    LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n-    assert(spk_man != nullptr);\n-    LOCK(spk_man->cs_KeyStore);\n-\n-    // get birth times for keys with metadata\n-    for (const auto& entry : spk_man->mapKeyMetadata) {\n-        if (entry.second.nCreateTime) {\n-            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n-        }\n-    }\n-\n     // map in which we'll infer heights of other keys\n     std::map<CKeyID, const CWalletTx::Confirmation*> mapKeyFirstBlock;\n     CWalletTx::Confirmation max_confirm;\n     max_confirm.block_height = GetLastBlockHeight() > 144 ? GetLastBlockHeight() - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n     CHECK_NONFATAL(chain().findAncestorByHeight(GetLastBlockHash(), max_confirm.block_height, FoundBlock().hash(max_confirm.hashBlock)));\n-    for (const CKeyID &keyid : spk_man->GetKeys()) {\n-        if (mapKeyBirth.count(keyid) == 0)\n-            mapKeyFirstBlock[keyid] = &max_confirm;\n-    }\n \n-    // if there are no such keys, we're done\n-    if (mapKeyFirstBlock.empty())\n-        return;\n+    {\n+        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+        assert(spk_man != nullptr);\n+        LOCK(spk_man->cs_KeyStore);\n+\n+        // get birth times for keys with metadata\n+        for (const auto& entry : spk_man->mapKeyMetadata) {\n+            if (entry.second.nCreateTime) {\n+                mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+            }\n+        }\n+\n+        // Prepare to infer birth heights for keys without metadata\n+        for (const CKeyID &keyid : spk_man->GetKeys()) {\n+            if (mapKeyBirth.count(keyid) == 0)\n+                mapKeyFirstBlock[keyid] = &max_confirm;\n+        }\n \n-    // find first block that affects those keys, if there are any left\n-    for (const auto& entry : mapWallet) {\n-        // iterate over all wallet transactions...\n-        const CWalletTx &wtx = entry.second;\n-        if (wtx.m_confirm.status == CWalletTx::CONFIRMED) {\n-            // ... which are already in a block\n-            for (const CTxOut &txout : wtx.tx->vout) {\n-                // iterate over all their outputs\n-                for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *spk_man)) {\n-                    // ... and all their affected keys\n-                    auto rit = mapKeyFirstBlock.find(keyid);\n-                    if (rit != mapKeyFirstBlock.end() && wtx.m_confirm.block_height < rit->second->block_height) {\n-                        rit->second = &wtx.m_confirm;\n+        // if there are no such keys, we're done\n+        if (mapKeyFirstBlock.empty())\n+            return;\n+\n+        // find first block that affects those keys, if there are any left\n+        for (const auto& entry : mapWallet) {\n+            // iterate over all wallet transactions...\n+            const CWalletTx &wtx = entry.second;\n+            if (wtx.m_confirm.status == CWalletTx::CONFIRMED) {\n+                // ... which are already in a block\n+                for (const CTxOut &txout : wtx.tx->vout) {\n+                    // iterate over all their outputs\n+                    for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *spk_man)) {\n+                        // ... and all their affected keys\n+                        auto rit = mapKeyFirstBlock.find(keyid);\n+                        if (rit != mapKeyFirstBlock.end() && wtx.m_confirm.block_height < rit->second->block_height) {\n+                            rit->second = &wtx.m_confirm;\n+                        }\n                     }\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "9b85a5e2f7e003ca8621feaac9bdd304d19081b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjg1YTVlMmY3ZTAwM2NhODYyMWZlYWFjOWJkZDMwNGQxOTA4MWI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T03:06:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-19T16:25:11Z"
      },
      "message": "tests: Test for dumpwallet lock order issue\n\nAdds a test for the condition which can trigger a lock order assertion.\nSpecifically, there must be an unconfirmed transaction in the mempool\nwhich belongs to the wallet being loaded. This will establish the order\nof cs_wallet -> cs_main -> cs_KeyStore. Then dumpwallet is called on\nthat wallet. Previously, this would have used a lock order of cs_wallet\n-> cs_KeyStore -> cs_main, but this should be fixed now. The test\nensures that.",
      "tree": {
        "sha": "20d5936850ecd2ae274cf30eb03b43110addce56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20d5936850ecd2ae274cf30eb03b43110addce56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b85a5e2f7e003ca8621feaac9bdd304d19081b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b85a5e2f7e003ca8621feaac9bdd304d19081b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b85a5e2f7e003ca8621feaac9bdd304d19081b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b85a5e2f7e003ca8621feaac9bdd304d19081b4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25d99e6511d8c43b2025a89bcd8295de755346a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25d99e6511d8c43b2025a89bcd8295de755346a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25d99e6511d8c43b2025a89bcd8295de755346a7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91d61216790f034a8a4bfcd9fa52b8dbcda0b174",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b85a5e2f7e003ca8621feaac9bdd304d19081b4/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b85a5e2f7e003ca8621feaac9bdd304d19081b4/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=9b85a5e2f7e003ca8621feaac9bdd304d19081b4",
        "patch": "@@ -209,6 +209,15 @@ def run_test(self):\n         with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n             self.nodes[0].getnewaddress()\n \n+        # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded\n+        # See https://github.com/bitcoin/bitcoin/issues/22489\n+        self.nodes[0].createwallet(\"w3\")\n+        w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        w3.importprivkey(privkey=self.nodes[0].get_deterministic_priv_key().key, label=\"coinbase_import\")\n+        w3.sendtoaddress(w3.getnewaddress(), 10)\n+        w3.unloadwallet()\n+        self.nodes[0].loadwallet(\"w3\")\n+        w3.dumpwallet(os.path.join(self.nodes[0].datadir, \"w3.dump\"))\n \n if __name__ == '__main__':\n     WalletDumpTest().main()"
      }
    ]
  }
]