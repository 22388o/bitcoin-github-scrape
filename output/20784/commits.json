[
  {
    "sha": "08c3036915bf9b8a49461d9354dd228c61b77c6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGMzMDM2OTE1YmY5YjhhNDk0NjFkOTM1NGRkMjI4YzYxYjc3YzZi",
    "commit": {
      "author": {
        "name": "multisignature",
        "email": "72713080+multisignature@users.noreply.github.com",
        "date": "2020-12-28T12:21:09Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-12-28T12:21:09Z"
      },
      "message": "Delete README.md",
      "tree": {
        "sha": "d4a8e79ca9ea38daa20c5f88ec71bfad01dd998e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4a8e79ca9ea38daa20c5f88ec71bfad01dd998e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08c3036915bf9b8a49461d9354dd228c61b77c6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6c21CRBK7hj4Ov3rIwAAdHIIAAY6hhIIMExFqkL5VSDaWtR6\nI7OK6NMJRO55UX5iMcnaqVAr1fZt5AJLQvgL7QuGQ0Rr/lAsKAmpWBJplVUf/6CB\nYnnoysCh/Qmge1KsRoLn1zDPRaGzDYAmifRUAXcLsnhyX0DQMJJ1aVqAqyUQFXoN\nKucxDT11eG4WiiU4/vkbkUgzSrXmm/25QZ9LAmfXB34sze24PhSrU+gcn6COVbRk\n0qqxnm+88b6igvn+VhUOjPaaPAtrfj4Bp/XbeN9xxXNzpexxNuovwdhZGtZrO4gJ\nDw5VbfFhzjIJMVC3qyJruSoEmc0fuFm8pHsGZwYGbmDetFgZ5X9PplOZNJaJP68=\n=iXkJ\n-----END PGP SIGNATURE-----\n",
        "payload": "tree d4a8e79ca9ea38daa20c5f88ec71bfad01dd998e\nparent ddbf7a6f5051b6d7faed54828445d6eaadcd8441\nauthor multisignature <72713080+multisignature@users.noreply.github.com> 1609158069 +0000\ncommitter GitHub <noreply@github.com> 1609158069 +0000\n\nDelete README.md"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c3036915bf9b8a49461d9354dd228c61b77c6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08c3036915bf9b8a49461d9354dd228c61b77c6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c3036915bf9b8a49461d9354dd228c61b77c6b/comments",
    "author": {
      "login": "multisignature",
      "id": 72713080,
      "node_id": "MDQ6VXNlcjcyNzEzMDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/72713080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/multisignature",
      "html_url": "https://github.com/multisignature",
      "followers_url": "https://api.github.com/users/multisignature/followers",
      "following_url": "https://api.github.com/users/multisignature/following{/other_user}",
      "gists_url": "https://api.github.com/users/multisignature/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/multisignature/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/multisignature/subscriptions",
      "organizations_url": "https://api.github.com/users/multisignature/orgs",
      "repos_url": "https://api.github.com/users/multisignature/repos",
      "events_url": "https://api.github.com/users/multisignature/events{/privacy}",
      "received_events_url": "https://api.github.com/users/multisignature/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddbf7a6f5051b6d7faed54828445d6eaadcd8441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddbf7a6f5051b6d7faed54828445d6eaadcd8441",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddbf7a6f5051b6d7faed54828445d6eaadcd8441"
      }
    ],
    "stats": {
      "total": 289,
      "additions": 0,
      "deletions": 289
    },
    "files": [
      {
        "sha": "2341eef00d54f2303abc10f15f149087bff484f8",
        "filename": "test/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 289,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddbf7a6f5051b6d7faed54828445d6eaadcd8441/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddbf7a6f5051b6d7faed54828445d6eaadcd8441/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=ddbf7a6f5051b6d7faed54828445d6eaadcd8441",
        "patch": "@@ -1,289 +0,0 @@\n-This directory contains integration tests that test bitcoind and its\n-utilities in their entirety. It does not contain unit tests, which\n-can be found in [/src/test](/src/test), [/src/wallet/test](/src/wallet/test),\n-etc.\n-\n-This directory contains the following sets of tests:\n-\n-- [functional](/test/functional) which test the functionality of\n-bitcoind and bitcoin-qt by interacting with them through the RPC and P2P\n-interfaces.\n-- [util](/test/util) which tests the bitcoin utilities, currently only\n-bitcoin-tx.\n-- [lint](/test/lint/) which perform various static analysis checks.\n-\n-The util tests are run as part of `make check` target. The functional\n-tests and lint scripts can be run as explained in the sections below.\n-\n-# Running tests locally\n-\n-Before tests can be run locally, Bitcoin Core must be built.  See the [building instructions](/doc#building) for help.\n-\n-\n-### Functional tests\n-\n-#### Dependencies\n-\n-The ZMQ functional test requires a python ZMQ library. To install it:\n-\n-- on Unix, run `sudo apt-get install python3-zmq`\n-- on mac OS, run `pip3 install pyzmq`\n-\n-#### Running the tests\n-\n-Individual tests can be run by directly calling the test script, e.g.:\n-\n-```\n-test/functional/feature_rbf.py\n-```\n-\n-or can be run through the test_runner harness, eg:\n-\n-```\n-test/functional/test_runner.py feature_rbf.py\n-```\n-\n-You can run any combination (incl. duplicates) of tests by calling:\n-\n-```\n-test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n-```\n-\n-Wildcard test names can be passed, if the paths are coherent and the test runner\n-is called from a `bash` shell or similar that does the globbing. For example,\n-to run all the wallet tests:\n-\n-```\n-test/functional/test_runner.py test/functional/wallet*\n-functional/test_runner.py functional/wallet* (called from the test/ directory)\n-test_runner.py wallet* (called from the test/functional/ directory)\n-```\n-\n-but not\n-\n-```\n-test/functional/test_runner.py wallet*\n-```\n-\n-Combinations of wildcards can be passed:\n-\n-```\n-test/functional/test_runner.py ./test/functional/tool* test/functional/mempool*\n-test_runner.py tool* mempool*\n-```\n-\n-Run the regression test suite with:\n-\n-```\n-test/functional/test_runner.py\n-```\n-\n-Run all possible tests with\n-\n-```\n-test/functional/test_runner.py --extended\n-```\n-\n-By default, up to 4 tests will be run in parallel by test_runner. To specify\n-how many jobs to run, append `--jobs=n`\n-\n-The individual tests and the test_runner harness have many command-line\n-options. Run `test/functional/test_runner.py -h` to see them all.\n-\n-#### Troubleshooting and debugging test failures\n-\n-##### Resource contention\n-\n-The P2P and RPC ports used by the bitcoind nodes-under-test are chosen to make\n-conflicts with other processes unlikely. However, if there is another bitcoind\n-process running on the system (perhaps from a previous test which hasn't successfully\n-killed all its bitcoind nodes), then there may be a port conflict which will\n-cause the test to fail. It is recommended that you run the tests on a system\n-where no other bitcoind processes are running.\n-\n-On linux, the test framework will warn if there is another\n-bitcoind process running when the tests are started.\n-\n-If there are zombie bitcoind processes after test failure, you can kill them\n-by running the following commands. **Note that these commands will kill all\n-bitcoind processes running on the system, so should not be used if any non-test\n-bitcoind processes are being run.**\n-\n-```bash\n-killall bitcoind\n-```\n-\n-or\n-\n-```bash\n-pkill -9 bitcoind\n-```\n-\n-\n-##### Data directory cache\n-\n-A pre-mined blockchain with 200 blocks is generated the first time a\n-functional test is run and is stored in test/cache. This speeds up\n-test startup times since new blockchains don't need to be generated for\n-each test. However, the cache may get into a bad state, in which case\n-tests will fail. If this happens, remove the cache directory (and make\n-sure bitcoind processes are stopped as above):\n-\n-```bash\n-rm -rf test/cache\n-killall bitcoind\n-```\n-\n-##### Test logging\n-\n-The tests contain logging at five different levels (DEBUG, INFO, WARNING, ERROR\n-and CRITICAL). From within your functional tests you can log to these different\n-levels using the logger included in the test_framework, e.g.\n-`self.log.debug(object)`. By default:\n-\n-- when run through the test_runner harness, *all* logs are written to\n-  `test_framework.log` and no logs are output to the console.\n-- when run directly, *all* logs are written to `test_framework.log` and INFO\n-  level and above are output to the console.\n-- when run by [our CI (Continuous Integration)](/ci/README.md), no logs are output to the console. However, if a test\n-  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n-  to the console to help troubleshooting.\n-\n-These log files can be located under the test data directory (which is always\n-printed in the first line of test output):\n-  - `<test data directory>/test_framework.log`\n-  - `<test data directory>/node<node number>/regtest/debug.log`.\n-\n-The node number identifies the relevant test node, starting from `node0`, which\n-corresponds to its position in the nodes list of the specific test,\n-e.g. `self.nodes[0]`.\n-\n-To change the level of logs output to the console, use the `-l` command line\n-argument.\n-\n-`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n-aggregate log by running the `combine_logs.py` script. The output can be plain\n-text, colorized text or html. For example:\n-\n-```\n-test/functional/combine_logs.py -c <test data directory> | less -r\n-```\n-\n-will pipe the colorized logs from the test into less.\n-\n-Use `--tracerpc` to trace out all the RPC calls and responses to the console. For\n-some tests (eg any that use `submitblock` to submit a full block over RPC),\n-this can result in a lot of screen output.\n-\n-By default, the test data directory will be deleted after a successful run.\n-Use `--nocleanup` to leave the test data directory intact. The test data\n-directory is never deleted after a failed test.\n-\n-##### Attaching a debugger\n-\n-A python debugger can be attached to tests at any point. Just add the line:\n-\n-```py\n-import pdb; pdb.set_trace()\n-```\n-\n-anywhere in the test. You will then be able to inspect variables, as well as\n-call methods that interact with the bitcoind nodes-under-test.\n-\n-If further introspection of the bitcoind instances themselves becomes\n-necessary, this can be accomplished by first setting a pdb breakpoint\n-at an appropriate location, running the test to that point, then using\n-`gdb` (or `lldb` on macOS) to attach to the process and debug.\n-\n-For instance, to attach to `self.node[1]` during a run you can get\n-the pid of the node within `pdb`.\n-\n-```\n-(pdb) self.node[1].process.pid\n-```\n-\n-Alternatively, you can find the pid by inspecting the temp folder for the specific test\n-you are running. The path to that folder is printed at the beginning of every\n-test run:\n-\n-```bash\n-2017-06-27 14:13:56.686000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testo9vsdjo3\n-```\n-\n-Use the path to find the pid file in the temp folder:\n-\n-```bash\n-cat /tmp/user/1000/testo9vsdjo3/node1/regtest/bitcoind.pid\n-```\n-\n-Then you can use the pid to start `gdb`:\n-\n-```bash\n-gdb /home/example/bitcoind <pid>\n-```\n-\n-Note: gdb attach step may require ptrace_scope to be modified, or `sudo` preceding the `gdb`.\n-See this link for considerations: https://www.kernel.org/doc/Documentation/security/Yama.txt\n-\n-Often while debugging rpc calls from functional tests, the test might reach timeout before\n-process can return a response. Use `--timeout-factor 0` to disable all rpc timeouts for that partcular\n-functional test. Ex: `test/functional/wallet_hd.py --timeout-factor 0`.\n-\n-##### Profiling\n-\n-An easy way to profile node performance during functional tests is provided\n-for Linux platforms using `perf`.\n-\n-Perf will sample the running node and will generate profile data in the node's\n-datadir. The profile data can then be presented using `perf report` or a graphical\n-tool like [hotspot](https://github.com/KDAB/hotspot).\n-\n-To generate a profile during test suite runs, use the `--perf` flag.\n-\n-To see render the output to text, run\n-\n-```sh\n-perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n-```\n-\n-For ways to generate more granular profiles, see the README in\n-[test/functional](/test/functional).\n-\n-### Util tests\n-\n-Util tests can be run locally by running `test/util/bitcoin-util-test.py`.\n-Use the `-v` option for verbose output.\n-\n-### Lint tests\n-\n-#### Dependencies\n-\n-| Lint test | Dependency | Version [used by CI](../ci/lint/04_install.sh) | Installation\n-|-----------|:----------:|:-------------------------------------------:|--------------\n-| [`lint-python.sh`](lint/lint-python.sh) | [flake8](https://gitlab.com/pycqa/flake8) | [3.8.3](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install flake8==3.8.3`\n-| [`lint-python.sh`](lint/lint-python.sh) | [mypy](https://github.com/python/mypy) | [0.781](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install mypy==0.781`\n-| [`lint-shell.sh`](lint/lint-shell.sh) | [ShellCheck](https://github.com/koalaman/shellcheck) | [0.7.1](https://github.com/bitcoin/bitcoin/pull/19348) | [details...](https://github.com/koalaman/shellcheck#installing)\n-| [`lint-shell.sh`](lint/lint-shell.sh) | [yq](https://github.com/kislyuk/yq) | default | `pip3 install yq`\n-| [`lint-spelling.sh`](lint/lint-spelling.sh) | [codespell](https://github.com/codespell-project/codespell) | [1.17.1](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install codespell==1.17.1`\n-\n-Please be aware that on Linux distributions all dependencies are usually available as packages, but could be outdated.\n-\n-#### Running the tests\n-\n-Individual tests can be run by directly calling the test script, e.g.:\n-\n-```\n-test/lint/lint-filenames.sh\n-```\n-\n-You can run all the shell-based lint tests by running:\n-\n-```\n-test/lint/lint-all.sh\n-```\n-\n-# Writing functional tests\n-\n-You are encouraged to write functional tests for new or existing features.\n-Further information about the functional test framework and individual\n-tests is found in [test/functional](/test/functional)."
      }
    ]
  },
  {
    "sha": "6e48ab595cddbaecf3ca820a09ea2697000a930a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTQ4YWI1OTVjZGRiYWVjZjNjYTgyMGEwOWVhMjY5NzAwMGE5MzBh",
    "commit": {
      "author": {
        "name": "multisignature",
        "email": "72713080+multisignature@users.noreply.github.com",
        "date": "2020-12-28T12:21:42Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-12-28T12:21:42Z"
      },
      "message": "Create README.md",
      "tree": {
        "sha": "cb58c6e3107db58a9d48a2a57dc5ff5a2d53be5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb58c6e3107db58a9d48a2a57dc5ff5a2d53be5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e48ab595cddbaecf3ca820a09ea2697000a930a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6c3WCRBK7hj4Ov3rIwAAdHIIAKyCGkoIcSDeU8ZmuAQgftLe\nn8vSCYGSqsPDI9OcgK0SonqJhILyEqpl1NZOqr5/3G7hgZaESemLL/8J70x1g6PK\nCWSI+gpOa41FwNl7nb9hoe2CbC1X7RwSSILVOJ/ud7QfGZBnFnM81/oWTGHn7/gl\n1PN4yDNZnBVIdEU2tE+92tyKffvnuud2RxUbhqVoeQSECQ7qegmVHno6/R/oxYJM\nNCtwayy8WGMB9VBDXm9BaAsPQa5eTDlj7oTE8mhaC+aCc4A+sGdtP+InzKirBAwf\nS5CIdzgdTqNzsQXDObddObMk3mPbAEDn1wf72sTce710P44maQ1LGaSNtejGxnA=\n=9+4m\n-----END PGP SIGNATURE-----\n",
        "payload": "tree cb58c6e3107db58a9d48a2a57dc5ff5a2d53be5d\nparent 08c3036915bf9b8a49461d9354dd228c61b77c6b\nauthor multisignature <72713080+multisignature@users.noreply.github.com> 1609158102 +0000\ncommitter GitHub <noreply@github.com> 1609158102 +0000\n\nCreate README.md"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e48ab595cddbaecf3ca820a09ea2697000a930a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e48ab595cddbaecf3ca820a09ea2697000a930a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e48ab595cddbaecf3ca820a09ea2697000a930a/comments",
    "author": {
      "login": "multisignature",
      "id": 72713080,
      "node_id": "MDQ6VXNlcjcyNzEzMDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/72713080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/multisignature",
      "html_url": "https://github.com/multisignature",
      "followers_url": "https://api.github.com/users/multisignature/followers",
      "following_url": "https://api.github.com/users/multisignature/following{/other_user}",
      "gists_url": "https://api.github.com/users/multisignature/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/multisignature/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/multisignature/subscriptions",
      "organizations_url": "https://api.github.com/users/multisignature/orgs",
      "repos_url": "https://api.github.com/users/multisignature/repos",
      "events_url": "https://api.github.com/users/multisignature/events{/privacy}",
      "received_events_url": "https://api.github.com/users/multisignature/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08c3036915bf9b8a49461d9354dd228c61b77c6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c3036915bf9b8a49461d9354dd228c61b77c6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08c3036915bf9b8a49461d9354dd228c61b77c6b"
      }
    ],
    "stats": {
      "total": 289,
      "additions": 289,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d1f3bbabd48f097977cd8badc7a5d421e3672f87",
        "filename": "test/README.md",
        "status": "added",
        "additions": 289,
        "deletions": 0,
        "changes": 289,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e48ab595cddbaecf3ca820a09ea2697000a930a/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e48ab595cddbaecf3ca820a09ea2697000a930a/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=6e48ab595cddbaecf3ca820a09ea2697000a930a",
        "patch": "@@ -0,0 +1,289 @@\n+This directory contains integration tests that test bitcoind and its\n+utilities in their entirety. It does not contain unit tests, which\n+can be found in [/src/test](/src/test), [/src/wallet/test](/src/wallet/test),\n+etc.\n+\n+This directory contains the following sets of tests:\n+\n+- [functional](/test/functional) which test the functionality of\n+bitcoind and bitcoin-qt by interacting with them through the RPC and P2P\n+interfaces.\n+- [util](/test/util) which tests the bitcoin utilities, currently only\n+bitcoin-tx.\n+- [lint](/test/lint/) which perform various static analysis checks.\n+\n+The util tests are run as part of `make check` target. The functional\n+tests and lint scripts can be run as explained in the sections below.\n+\n+# Running tests locally\n+\n+Before tests can be run locally, Bitcoin Core must be built.  See the [building instructions](/doc#building) for help.\n+\n+\n+### Functional tests\n+\n+#### Dependencies\n+\n+The ZMQ functional test requires a python ZMQ library. To install it:\n+\n+- on Unix, run `sudo apt-get install python3-zmq`\n+- on mac OS, run `pip3 install pyzmq`\n+\n+#### Running the tests\n+\n+Individual tests can be run by directly calling the test script, e.g.:\n+\n+```\n+test/functional/feature_rbf.py\n+```\n+\n+or can be run through the test_runner harness, e.g.:\n+\n+```\n+test/functional/test_runner.py feature_rbf.py\n+```\n+\n+You can run any combination (incl. duplicates) of tests by calling:\n+\n+```\n+test/functional/test_runner.py <testname1> <testname2> <testname3> ...\n+```\n+\n+Wildcard test names can be passed, if the paths are coherent and the test runner\n+is called from a `bash` shell or similar that does the globbing. For example,\n+to run all the wallet tests:\n+\n+```\n+test/functional/test_runner.py test/functional/wallet*\n+functional/test_runner.py functional/wallet* (called from the test/ directory)\n+test_runner.py wallet* (called from the test/functional/ directory)\n+```\n+\n+but not\n+\n+```\n+test/functional/test_runner.py wallet*\n+```\n+\n+Combinations of wildcards can be passed:\n+\n+```\n+test/functional/test_runner.py ./test/functional/tool* test/functional/mempool*\n+test_runner.py tool* mempool*\n+```\n+\n+Run the regression test suite with:\n+\n+```\n+test/functional/test_runner.py\n+```\n+\n+Run all possible tests with\n+\n+```\n+test/functional/test_runner.py --extended\n+```\n+\n+By default, up to 4 tests will be run in parallel by test_runner. To specify\n+how many jobs to run, append `--jobs=n`\n+\n+The individual tests and the test_runner harness have many command-line\n+options. Run `test/functional/test_runner.py -h` to see them all.\n+\n+#### Troubleshooting and debugging test failures\n+\n+##### Resource contention\n+\n+The P2P and RPC ports used by the bitcoind nodes-under-test are chosen to make\n+conflicts with other processes unlikely. However, if there is another bitcoind\n+process running on the system (perhaps from a previous test which hasn't successfully\n+killed all its bitcoind nodes), then there may be a port conflict which will\n+cause the test to fail. It is recommended that you run the tests on a system\n+where no other bitcoind processes are running.\n+\n+On linux, the test framework will warn if there is another\n+bitcoind process running when the tests are started.\n+\n+If there are zombie bitcoind processes after test failure, you can kill them\n+by running the following commands. **Note that these commands will kill all\n+bitcoind processes running on the system, so they should not be used if any non-test\n+bitcoind processes are being run.**\n+\n+```bash\n+killall bitcoind\n+```\n+\n+or\n+\n+```bash\n+pkill -9 bitcoind\n+```\n+\n+\n+##### Data directory cache\n+\n+A pre-mined blockchain with 200 blocks is generated the first time a\n+functional test is run and is stored in test/cache. This speeds up\n+test startup times since new blockchains don't need to be generated for\n+each test. However, the cache may get into a bad state, in which case\n+tests will fail. If this happens, remove the cache directory (and make\n+sure bitcoind processes are stopped as above):\n+\n+```bash\n+rm -rf test/cache\n+killall bitcoind\n+```\n+\n+##### Test logging\n+\n+The tests contain logging at five different levels (DEBUG, INFO, WARNING, ERROR\n+and CRITICAL). From within your functional tests you can log to these different\n+levels using the logger included in the test_framework, e.g.\n+`self.log.debug(object)`. By default:\n+\n+- when run through the test_runner harness, *all* logs are written to\n+  `test_framework.log` and no logs are output to the console.\n+- when run directly, *all* logs are written to `test_framework.log` and INFO\n+  level and above are output to the console.\n+- when run by [our CI (Continuous Integration)](/ci/README.md), no logs are output to the console. However, if a test\n+  fails, the `test_framework.log` and bitcoind `debug.log`s will all be dumped\n+  to the console to help troubleshooting.\n+\n+These log files can be located under the test data directory (which is always\n+printed in the first line of test output):\n+  - `<test data directory>/test_framework.log`\n+  - `<test data directory>/node<node number>/regtest/debug.log`.\n+\n+The node number identifies the relevant test node, starting from `node0`, which\n+corresponds to its position in the nodes list of the specific test,\n+e.g. `self.nodes[0]`.\n+\n+To change the level of logs output to the console, use the `-l` command line\n+argument.\n+\n+`test_framework.log` and bitcoind `debug.log`s can be combined into a single\n+aggregate log by running the `combine_logs.py` script. The output can be plain\n+text, colorized text or html. For example:\n+\n+```\n+test/functional/combine_logs.py -c <test data directory> | less -r\n+```\n+\n+will pipe the colorized logs from the test into less.\n+\n+Use `--tracerpc` to trace out all the RPC calls and responses to the console. For\n+some tests (e.g. any that use `submitblock` to submit a full block over RPC),\n+this can result in a lot of screen output.\n+\n+By default, the test data directory will be deleted after a successful run.\n+Use `--nocleanup` to leave the test data directory intact. The test data\n+directory is never deleted after a failed test.\n+\n+##### Attaching a debugger\n+\n+A python debugger can be attached to tests at any point. Just add the line:\n+\n+```py\n+import pdb; pdb.set_trace()\n+```\n+\n+anywhere in the test. You will then be able to inspect variables, as well as\n+call methods that interact with the bitcoind nodes-under-test.\n+\n+If further introspection of the bitcoind instances themselves becomes\n+necessary, this can be accomplished by first setting a pdb breakpoint\n+at an appropriate location, running the test to that point, then using\n+`gdb` (or `lldb` on macOS) to attach to the process and debug.\n+\n+For instance, to attach to `self.node[1]` during a run you can get\n+the pid of the node within `pdb`.\n+\n+```\n+(pdb) self.node[1].process.pid\n+```\n+\n+Alternatively, you can find the pid by inspecting the temp folder for the specific test\n+you are running. The path to that folder is printed at the beginning of every\n+test run:\n+\n+```bash\n+2017-06-27 14:13:56.686000 TestFramework (INFO): Initializing test directory /tmp/user/1000/testo9vsdjo3\n+```\n+\n+Use the path to find the pid file in the temp folder:\n+\n+```bash\n+cat /tmp/user/1000/testo9vsdjo3/node1/regtest/bitcoind.pid\n+```\n+\n+Then you can use the pid to start `gdb`:\n+\n+```bash\n+gdb /home/example/bitcoind <pid>\n+```\n+\n+Note: gdb attach step may require ptrace_scope to be modified, or `sudo` preceding the `gdb`.\n+See this link for considerations: https://www.kernel.org/doc/Documentation/security/Yama.txt\n+\n+Often while debugging rpc calls from functional tests, the test might reach timeout before\n+process can return a response. Use `--timeout-factor 0` to disable all rpc timeouts for that partcular\n+functional test. Ex: `test/functional/wallet_hd.py --timeout-factor 0`.\n+\n+##### Profiling\n+\n+An easy way to profile node performance during functional tests is provided\n+for Linux platforms using `perf`.\n+\n+Perf will sample the running node and will generate profile data in the node's\n+datadir. The profile data can then be presented using `perf report` or a graphical\n+tool like [hotspot](https://github.com/KDAB/hotspot).\n+\n+To generate a profile during test suite runs, use the `--perf` flag.\n+\n+To see render the output to text, run\n+\n+```sh\n+perf report -i /path/to/datadir/send-big-msgs.perf.data.xxxx --stdio | c++filt | less\n+```\n+\n+For ways to generate more granular profiles, see the README in\n+[test/functional](/test/functional).\n+\n+### Util tests\n+\n+Util tests can be run locally by running `test/util/bitcoin-util-test.py`.\n+Use the `-v` option for verbose output.\n+\n+### Lint tests\n+\n+#### Dependencies\n+\n+| Lint test | Dependency | Version [used by CI](../ci/lint/04_install.sh) | Installation\n+|-----------|:----------:|:-------------------------------------------:|--------------\n+| [`lint-python.sh`](lint/lint-python.sh) | [flake8](https://gitlab.com/pycqa/flake8) | [3.8.3](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install flake8==3.8.3`\n+| [`lint-python.sh`](lint/lint-python.sh) | [mypy](https://github.com/python/mypy) | [0.781](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install mypy==0.781`\n+| [`lint-shell.sh`](lint/lint-shell.sh) | [ShellCheck](https://github.com/koalaman/shellcheck) | [0.7.1](https://github.com/bitcoin/bitcoin/pull/19348) | [details...](https://github.com/koalaman/shellcheck#installing)\n+| [`lint-shell.sh`](lint/lint-shell.sh) | [yq](https://github.com/kislyuk/yq) | default | `pip3 install yq`\n+| [`lint-spelling.sh`](lint/lint-spelling.sh) | [codespell](https://github.com/codespell-project/codespell) | [1.17.1](https://github.com/bitcoin/bitcoin/pull/19348) | `pip3 install codespell==1.17.1`\n+\n+Please be aware that on Linux distributions all dependencies are usually available as packages, but could be outdated.\n+\n+#### Running the tests\n+\n+Individual tests can be run by directly calling the test script, e.g.:\n+\n+```\n+test/lint/lint-filenames.sh\n+```\n+\n+You can run all the shell-based lint tests by running:\n+\n+```\n+test/lint/lint-all.sh\n+```\n+\n+# Writing functional tests\n+\n+You are encouraged to write functional tests for new or existing features.\n+Further information about the functional test framework and individual\n+tests is found in [test/functional](/test/functional)."
      }
    ]
  }
]