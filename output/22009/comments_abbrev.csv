achow101,2021-05-21 00:32:10,Note that there will be a followup PR to this which introduces a struct that encapsulates the selection. This struct will also do the waste calculation which will remove the ugly tuples stuff that is currently done to allow for the waste calculation.,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-845569762,845569762,
DrahtBot,2021-05-21 03:52:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22100](https://github.com/bitcoin/bitcoin/pull/22100) (refactor: Clean up new wallet spend, receive files added #21207 b",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-845633808,845633808,
achow101,2021-05-25 15:49:44,"With #17331 now merged, this is ready for review.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-847987209,847987209,
achow101,2021-06-02 21:10:54,"> Does this introduce any behavior changes besides the long-term feerate change?\n>\n> I would think not, as the BNB search always has waste 0, so if it works, it will still always be chosen?\n\nThere is a behavior change as BnB can non-zero waste. Part of the waste is the excess thrown away to fees. Because BnB uses a matching window, it is possible for it to have an excess which is included ",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-853384998,853384998,
sipa,2021-06-02 21:13:11,"@achow101 Oh, of course. Thanks for reminding me on the point of the waste metric.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-853386169,853386169,
Xekyo,2021-06-11 17:46:36,"> and choose the one which has the least change. In the event that both find a solution with the same change, we choose the one that spends more inputs.\n\nIs it possible that you meant ""least waste"" and ""same waste"" instead of change?",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-859741685,859741685,
achow101,2021-06-11 17:54:54,"> > and choose the one which has the least change. In the event that both find a solution with the same change, we choose the one that spends more inputs.\n> \n> Is it possible that you meant ""least waste"" and ""same waste"" instead of change?\n\nYes",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-859746007,859746007,
ryanofsky,2021-07-14 11:45:44,"> I'm woking on a functional test to verify the overall flow\n\nThis reminds me to beg for review of #22155. Functional tests for coin selection are great but for some parts unit tests are more convenient, so I really want to add this wallet spend test module and get some tests in there.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-879822963,879822963,
GeneFerneau,2021-08-13 01:56:06,"Approach ACK [1ce0c97](https://github.com/bitcoin/bitcoin/pull/22009/commits/1ce0c97c7a531070328d4d742a32b31e1e0bdce5)\n\nDid a manual review, everything looks good. Tangentially, doing a deeper review of `KnapsackSolver`, but use looks consistent with other uses across the codebase.\n\nStill running tests locally, and trying to think of more edge cases. The existing tests look pretty throroug",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-898100163,898100163,
achow101,2021-08-17 19:34:39,Also rebased to pick up #22686,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-900575727,900575727,
Xekyo,2021-08-18 18:14:13,ACK 15fbe72ede62b9a3686fc000381c1d0fa1807815,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-901326404,901326404,
instagibbs,2021-08-19 09:39:54,">and choose the one which has the least change. In the event that both find a solution with the same change, we choose the one that spends more inputs.\n\n> Is it possible that you meant ""least waste"" and ""same waste"" instead of change?\n\n>Yes\n\nCould you please update the OP with accurate language? I was struggling to understand until I read everything here.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-901766747,901766747,
instagibbs,2021-08-19 09:46:45,concept ACK,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-901771420,901771420,
achow101,2021-08-19 16:06:16,Updated OP,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-902038925,902038925,
Xekyo,2021-08-20 16:28:47,"@meshcollider: I think there are currently three (Knapsack, BnB, and SRD), and it might be interesting to add a couple more. E.g. smallest-first could be an interesting strategy to create transactions at `minRelayTxFee`, or at very high feerates, largest-first could perhaps be preferred if it's smaller.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-902812512,902812512,
Xekyo,2021-08-20 19:31:27,"As a follow-up to my comment about the constructor of `CInputCoin` initializing `effective_value` with `nValue` and the subsequent update of the `effective_value` to the correct magnitude: I ran the functional tests after commenting out the line that initializes `effective_value` in the `CInputCoin` with Valgrind and all tests passed, so I think that it might be possible to make `CInputCoin` const",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-902910839,902910839,
achow101,2021-08-20 20:26:26,@Xekyo I'm not quite sure what you mean. The members of `CInputCoin` can't be const because the constructor has some logic before they can be set.,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-902938857,902938857,
S3RK,2021-08-21 09:54:59,utACK 1858364 per `git range-diff fdd80b0a5 1ce0c97 1858364`. The only changes are related to comments in the PR,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-903092328,903092328,
Xekyo,2021-08-23 14:35:46,"As discussed, let's leave it for a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-903831868,903831868,
achow101,2021-08-24 19:41:29,Had to rebase due to a hidden merge conflict.,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-904922818,904922818,
prayank23,2021-08-24 20:13:22,"> Also this PR sets the long term feerate to 10 sat/vb rather than using the 1008 block estimate.\n\nInitially this didn't look like the right approach but then found this option is configurable.\n\nAccording to this comment it was chosen arbitrarily: https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692371546\n\nAccording to this comment Murch suggested it based on some analysis : h",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-904942533,904942533,
Xekyo,2021-08-25 17:59:39,"I picked it arbitrarily based on staring at a lot of transactions, and then kept it because it produced satisfactory results. I didn't experiment further with other values, so there may be better ones, and I'd expect that the optimal value would be highly dependent on a wallet's usage pattern.\n\nI wrote a bit about the results here: https://blog.bitgo.com/utxo-management-for-enterprise-wallets-",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-905753431,905753431,
Talkless,2021-08-26 14:33:04,"Code review ACK 21566d03d1131f919df65efae7212c18f657f0fd. Did build on Debian Sid, ran unit and (non-extended) functional tests, but did NOT manually tested this code.",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-906467195,906467195,
Xekyo,2021-08-31 22:13:44,"reACK 86beee0 via git range-diff fe47558...86beee0\n",https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-909683835,909683835,
meshcollider,2021-09-01 04:28:56,re-utACK 86beee05795216738f51fa744539336503c26fd9,https://github.com/bitcoin/bitcoin/pull/22009#issuecomment-909873469,909873469,
OttoAllmendinger,2021-06-01 14:23:08,"```\nif (change_cost == 0) {\n  ..\n}\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r643151092,643151092,src/wallet/coinselection.cpp
OttoAllmendinger,2021-06-01 14:23:25,`return waste;`,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r643151389,643151389,src/wallet/coinselection.cpp
achow101,2021-06-01 17:15:10,Fixed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r643325871,643325871,src/wallet/coinselection.cpp
achow101,2021-06-01 17:15:14,Fixed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r643325955,643325955,src/wallet/coinselection.cpp
sipa,2021-06-02 19:16:52,You can std::move `bnb_coins` here to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644254194,644254194,src/wallet/spend.cpp
sipa,2021-06-02 19:17:18,You can std::move `knapsack_coins` here to avoid a copy.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644254456,644254456,src/wallet/spend.cpp
sipa,2021-06-02 19:18:33,"It's slightly inefficient to copy the selected inputs into setCoinsRet inside the loop itself, as it may result in multiple useless copies.\n\nAs an alternative, you could create a vector of e.g. `(CAmount waste, std::ref<std::set<CInputCoins>> inputs)` pairs by `std::transform`ing the `results` vector, and then returning `*std::min_element(that vector).second`.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644255181,644255181,src/wallet/spend.cpp
achow101,2021-06-02 22:16:13,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644355566,644355566,src/wallet/spend.cpp
achow101,2021-06-02 22:16:18,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644355601,644355601,src/wallet/spend.cpp
achow101,2021-06-02 22:17:40,"Based on this suggestion, I've changed this to do the waste calculation at the time of insertion into `results`. This eliminates the need for a `std::transform`. Then `std::min_element` is used to get the least waste element.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r644356278,644356278,src/wallet/spend.cpp
jarolrod,2021-06-08 13:26:35,"What's the rationale behind `10 sat per vbyte`? Why that number?\n\nSeems a bit scary to hard-code a value here.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r647439015,647439015,src/wallet/spend.cpp
jarolrod,2021-06-08 13:26:57,"nit\n```suggestion\n    const auto& best_result = std::min_element(results.begin(), results.end(), [](const auto& a, const auto& b) {\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r647439398,647439398,src/wallet/spend.cpp
achow101,2021-06-08 16:13:28,"@Xekyo suggested it based on his analysis and experience.\n\nThis should really be a configurable option, I just didn't implement that yet.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r647594412,647594412,src/wallet/spend.cpp
Xekyo,2021-06-11 18:07:07,Nit: the introduction `KnapsackGroupOutputs` should be mentioned in the commit message. Should be potentially a separate commit.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650177806,650177806,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-06-11 18:08:38,"How come this uses ""GroupOutputs"" when BnB uses ""GroupCoins""? What's the difference?",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650178647,650178647,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-06-11 18:26:13,"This is not just the excess, but `selected_value - target` will also include all input fees paid for the input set. However, we counted the input fees already above in the comparison with the `long_term_fee`.\n\nI think this should be `selected_value - txweight*feerate - sum(recipient outputs)`, or alternatively additionally deduct `sum(coin.m_fee)` for each input for the code as currently writt",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650188296,650188296,src/wallet/coinselection.cpp
Xekyo,2021-06-11 18:28:10,"As pointed out above, this formula would count the input fees again, and here also the change cost.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650189352,650189352,src/wallet/coinselection.h
achow101,2021-06-11 21:07:24,I've mentioned it in the commit message,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650265145,650265145,src/wallet/test/coinselector_tests.cpp
achow101,2021-06-11 21:08:35,I've added an explanation in the commit message. The reason is because the `KnapsackSolver` tests involve different eligibility filters which `GroupCoins` does not.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650265627,650265627,src/wallet/test/coinselector_tests.cpp
achow101,2021-06-11 21:09:18,"Changed to calculated `selected_value` with `coin.effective_value`. This will ensure the fee is subtracted. Also renamed it to `selected_effective_value`.\n\nAlso added a commit with test cases.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650266000,650266000,src/wallet/coinselection.cpp
achow101,2021-06-11 21:09:29,Changed to `selected_effective_value`.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650266063,650266063,src/wallet/coinselection.h
Xekyo,2021-06-11 21:32:13,"Ah, very elegant!",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r650275698,650275698,src/wallet/coinselection.cpp
Xekyo,2021-06-30 21:05:28,Feels like this part could be a scripted diff.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661810728,661810728,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-06-30 21:10:44,Could perhaps assert that `selected_effective_value` is greater than `target` as it would be a dead giveaway that the inputs to this function are bonkers.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661813675,661813675,src/wallet/coinselection.cpp
Xekyo,2021-06-30 21:12:17,I think we may have removed `actual_target` previously. Is this comment perhaps a holdout?,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661814476,661814476,src/wallet/coinselection.h
Xekyo,2021-06-30 21:13:41,The function's documentation should perhaps explain that it will only ever use either change_cost or excess.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661815255,661815255,src/wallet/coinselection.h
Xekyo,2021-06-30 22:04:02,"You may want to use different values (preferably not direct multiples) for `fee` and `change_cost` as otherwise some weird interaction might hide a defect, maybe something like 100 and 125.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661840942,661840942,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-06-30 22:07:04,Perhaps also add a test where the long_term_fee is greater than the fee.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661842226,661842226,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-06-30 22:10:39,"You may want to be a bit more explicit here whether the third value is the selected value, the selected effective value, or the target value. (I assume it's the first, but we've been juggling all of these, being more precise wouldn't hurt.)",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661843975,661843975,src/wallet/spend.cpp
Xekyo,2021-06-30 22:14:49,"Clearly, this function does not only select by waste, but has a fallback tiebreaker. ;)",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r661845760,661845760,src/wallet/spend.cpp
achow101,2021-07-02 22:31:16,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271215,663271215,src/wallet/test/coinselector_tests.cpp
achow101,2021-07-02 22:31:21,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271232,663271232,src/wallet/coinselection.cpp
achow101,2021-07-02 22:31:31,Changed to just `target`.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271259,663271259,src/wallet/coinselection.h
achow101,2021-07-02 22:31:37,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271272,663271272,src/wallet/coinselection.h
achow101,2021-07-02 22:31:43,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271293,663271293,src/wallet/test/coinselector_tests.cpp
achow101,2021-07-02 22:31:47,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271316,663271316,src/wallet/test/coinselector_tests.cpp
achow101,2021-07-02 22:31:52,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271352,663271352,src/wallet/spend.cpp
achow101,2021-07-02 22:31:55,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r663271356,663271356,src/wallet/spend.cpp
Xekyo,2021-07-08 20:25:09,"I'd have a slight preference for a more specific ""use_effective_value"" than ""real_value"" with an inverted bool value.\n```suggestion\nCAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, const CAmount change_cost, const CAmount target, bool use_effective_value = true);\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r666495109,666495109,src/wallet/coinselection.h
S3RK,2021-07-14 07:07:05,Note to reviewers: this looks much better with #22019,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r669347809,669347809,src/wallet/spend.cpp
S3RK,2021-07-14 07:07:40,"Warrants updating comment in `coinselection.h`\n\nnit: duplicate comment with the one just one line above",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r669348197,669348197,src/wallet/spend.cpp
S3RK,2021-07-14 07:24:11,nit: Maybe add a test for zero waste case?,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r669358253,669358253,src/wallet/test/coinselector_tests.cpp
S3RK,2021-07-22 07:25:19,AssertionError: Please add {'-consolidatefeerate'} to the hidden args in DummyWalletInit::AddWalletOptions,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r674558779,674558779,src/dummywallet.cpp
achow101,2021-07-22 18:17:31,"Oops, fixed.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r675059132,675059132,src/dummywallet.cpp
S3RK,2021-07-26 06:48:53,nit: unnecessary space after the dot in the description,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r676333477,676333477,src/wallet/init.cpp
fjahr,2021-08-01 17:56:58,nit: Empty line not necessary?,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r680544785,680544785,src/wallet/test/coinselector_tests.cpp
fjahr,2021-08-01 18:50:51,excesss,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r680550694,680550694,src/wallet/test/coinselector_tests.cpp
fjahr,2021-08-01 18:51:22,excesss,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r680550730,680550730,src/wallet/test/coinselector_tests.cpp
Talkless,2021-08-17 13:09:54,Maybe worth adding `[[nodiscard]]` for a new `GetSelectionWaste`?,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690354107,690354107,src/wallet/coinselection.h
Talkless,2021-08-17 13:14:27,"Is it necessary to bring variable in to scope that is used only for `if`? Probably personal preference, but adding variable automatically ""makes you"" (a reviewer) to look for it's uses elsewhere, including possible re-assignemnt as it it's nor marked as `const`.\n\nPlease consider adding `const` or just remove that variable and ""`if`"" the `SelectCoinsBnB` result directly.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690357887,690357887,src/wallet/spend.cpp
Talkless,2021-08-17 13:15:10,Same as per `bool bnb_ret` comment.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690358491,690358491,src/wallet/spend.cpp
Talkless,2021-08-17 13:34:25,"Why `.clear()`? It does not change the capacity (actual internal buffer size, if that was in mind). \n\nJust next line completely re-assigns `static_groups` and it seems that should be enough?",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690376105,690376105,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 18:59:44,Forgot to mention that this was made a configurable option.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690641938,690641938,src/wallet/spend.cpp
achow101,2021-08-17 19:20:16,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690655586,690655586,src/wallet/spend.cpp
achow101,2021-08-17 19:20:28,Done both suggestions.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690655725,690655725,src/wallet/coinselection.h
achow101,2021-08-17 19:21:04,No longer relevant with `-consolidatefeerate` option.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656151,690656151,src/wallet/spend.cpp
achow101,2021-08-17 19:21:08,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656194,690656194,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 19:21:16,Fixed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656266,690656266,src/wallet/init.cpp
achow101,2021-08-17 19:21:23,Removed,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656320,690656320,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 19:21:27,Fixed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656354,690656354,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 19:21:31,Fixed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656397,690656397,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 19:21:55,This variable was used in a previous revision. Changed to use the in the `if` directly.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656695,690656695,src/wallet/spend.cpp
achow101,2021-08-17 19:22:00,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690656759,690656759,src/wallet/spend.cpp
achow101,2021-08-17 19:22:23,"This was copied from one of the other functions, but indeed is unnecessary, so I have removed it.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690657001,690657001,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-08-17 20:07:55,"Mh, I'm thinking about the use of ""consolidation transaction"" here. I would usually use that term for a transaction that has the exclusive purpose of converting multiple UTXOs to a single UTXO without performing a payment.\n\nPerhaps: ""the maximum feerate at which transaction building may use more inputs than strictly necessary to reduce the wallet's UTXO pool"".",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690685645,690685645,src/wallet/init.cpp
achow101,2021-08-17 20:11:23,"Note: I believe this change is related to #22686. What I think was happening in previous revisions of this PR is that due to that bug, `KnapsackSolver` would find a solution without change that doesn't actually work, and because of that, it would also have worse waste than the BnB solution. We don't see this in master because there is a BnB solution and in master, we default to the BnB solution. T",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690687789,690687789,test/functional/rpc_fundrawtransaction.py
Xekyo,2021-08-17 20:18:02,"Also, this sentence uses ""fee rate"" and ""feerate"" once each. Personally, I prefer ""feerate"".",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690692038,690692038,src/wallet/init.cpp
Xekyo,2021-08-17 20:20:30,"```suggestion\n    // Set the long term feerate estimate to the wallet's consolidate feerate\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690693503,690693503,src/wallet/spend.cpp
Xekyo,2021-08-17 20:33:52,"It seems odd to me that we'd even allow calling `GetSelectionWaste` with an empty input set. Shouldn't rather the caller that is evaluating the input set candidates notice that this candidate is ineligible rather than us setting the waste high here so that it doesn't get used? What if e.g. both selection methods end up having an empty set, do we then pick the smaller of two `MAX_MONEY` waste value",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690702295,690702295,src/wallet/coinselection.cpp
Xekyo,2021-08-17 20:44:20,"I feel like ""the feerate at which I would perform consolidation transactions"" and ""the feerate that I expect to be a minimum feerate in the long term"" may be subtly different things, but I don't have an improvement suggestion at the moment.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690708978,690708978,src/wallet/spend.cpp
Xekyo,2021-08-17 21:43:50,"Shouldn't this be `coin.effective_value = nValue - fee;`?\n\nIt seems easier to review and more obviously correct to calculate the correct value for `effective_value` here when all the ingredients for this calculation are already input parameters for the function instead of defining it relative to some initial value for `effective_value` that is set by the `CInputCoin` constructor. It does not s",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690744470,690744470,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-17 22:26:26,Changed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690764874,690764874,src/wallet/init.cpp
achow101,2021-08-17 22:26:30,Changed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690764911,690764911,src/wallet/spend.cpp
achow101,2021-08-17 22:27:12,"Originally the intent was to always run this function regardless of success or failure. But we won't be doing that, so it's fine to assert here. Done.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690765181,690765181,src/wallet/coinselection.cpp
achow101,2021-08-17 22:27:28,Changed.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r690765302,690765302,src/wallet/test/coinselector_tests.cpp
instagibbs,2021-08-19 09:45:19,definitely not going to nitpick this but why 10? :) ,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r691956992,691956992,src/wallet/wallet.h
achow101,2021-08-19 16:06:30,It seemed like a reasonable number,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692271206,692271206,src/wallet/wallet.h
Xekyo,2021-08-19 17:53:58,"Given that we have gotten that question twice again in the last 24h, it would probably be best to add context for that number in the commit messages or code somewhere.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692359344,692359344,src/wallet/wallet.h
achow101,2021-08-19 18:11:41,I added to the commit message that it was chosen arbitrarily.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692371546,692371546,src/wallet/wallet.h
meshcollider,2021-08-20 01:10:16,nit: `-consolidatefeerate`,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692588236,692588236,src/wallet/wallet.h
meshcollider,2021-08-20 01:24:41,Do you anticipate having more coin selection algorithms in future? Why bother with the vector etc. rather than just direct comparison between the two results?,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692592450,692592450,src/wallet/spend.cpp
achow101,2021-08-20 01:48:12,"Yes, #17526 will be updated to add another result to this vector.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692600218,692600218,src/wallet/spend.cpp
glozow,2021-08-20 10:00:18,"nit in caab9da230\n```suggestion\n    static_groups = testWallet.GroupOutputs(vCoins, coin_selection_params, filter, /* positive_only */ false);\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692825927,692825927,src/wallet/test/coinselector_tests.cpp
glozow,2021-08-20 10:14:17,"in 5a22462 _Add waste metric calculation function_:\nI see that https://github.com/bitcoin/bitcoin/pull/22009/files#r661815255 was addressed, but I still think it could be made clearer that excess is only used if there is no change? For example\n```suggestion\n/** Compute the waste for this result given whether a change output was made and the\n* opportunity cost of spending these inputs now v",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r692834187,692834187,src/wallet/coinselection.h
S3RK,2021-08-21 09:54:24,I recompiled the old version of this PR and confirmed that,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r693333514,693333514,test/functional/rpc_fundrawtransaction.py
glozow,2021-08-24 09:05:06,"in 5f81b7e9317f703de6f949c532dac49300a14218 _Allow the long term feerate to be configured, default of 10 sat/vb_:\nprefer braced initialization to disallow narrowing conversions\n\nAnd for those of us who don't have much intuition on what feerates make sense, perhaps some sanity check static asserts would make sense? e.g. higher than default minfee, lower than default maxfee, some relationship ",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694662736,694662736,src/wallet/wallet.h
glozow,2021-08-24 09:15:21,"nit In 5f81b7e9317f703de6f949c532dac49300a14218 _Allow the long term feerate to be configured, default of 10 sat/vb_:\nSince this pulls from a wallet member, it can be initialized ~60 lines earlier, right after `coin_selection_params` is declared, or even within the constructor.",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694670605,694670605,src/wallet/spend.cpp
glozow,2021-08-24 09:35:19,"nit in 5a224629549f1b0ce8ccc99b79aceab8ab809d57 _Add waste metric calculation function_:\n\nThese don't need to be const, as they're pass-by-value variables that go out of scope at the end of the function\n```suggestion\nCAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694685480,694685480,src/wallet/coinselection.cpp
glozow,2021-08-24 09:38:13,"nit in 5a22462 _Add waste metric calculation function_:\nI believe this would be clearer, but feel free to ignore\n```suggestion\n    if (change_cost) {\n        // Consider the cost of making change and spending it in the future\n        // If we aren't making change, the caller should've set change_cost to 0\n        assert(change_cost > 0);\n        waste += change_cost;\n    } else {\",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694687749,694687749,src/wallet/coinselection.cpp
glozow,2021-08-24 09:50:07,"In c4acfb73b96041abb5bfacea98f9bf958806ffdf _test GetSelectionWaste_\n```suggestion\n    const CAmount fee{100};\n    const CAmount change_cost{125};\n    const CAmount fee_diff{40};\n    const CAmount in_amt{3 * COIN};\n    const CAmount target{2 * COIN};\n    const CAmount excess{in_amt - fee * 2 - target};\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694696661,694696661,src/wallet/test/coinselector_tests.cpp
glozow,2021-08-24 10:06:42,"in 1858364a949ea8345df5e845e7d1433b7cd5ffd0 _Use waste metric for deciding which selection to use_:\n`emplace_back` to construct in place\nbreak up the line for readability\n(same with the BnB solving portion above)\n```suggestion\n        const auto waste = GetSelectionWaste(knapsack_coins, coin_selection_params.m_cost_of_change, nTargetValue + coin_selection_params.m_change_fee, !coin_selec",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r694708835,694708835,src/wallet/spend.cpp
achow101,2021-08-24 18:06:50,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695084429,695084429,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-24 18:06:55,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695084473,695084473,src/wallet/coinselection.h
achow101,2021-08-24 18:07:34,Changed the initialization I don't think static asserts are necessary.,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695084903,695084903,src/wallet/wallet.h
achow101,2021-08-24 18:07:41,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695084974,695084974,src/wallet/spend.cpp
achow101,2021-08-24 18:07:45,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695085004,695085004,src/wallet/coinselection.cpp
achow101,2021-08-24 18:07:49,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695085078,695085078,src/wallet/coinselection.cpp
achow101,2021-08-24 18:07:53,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695085113,695085113,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-24 18:07:57,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r695085169,695085169,src/wallet/spend.cpp
glozow,2021-08-27 13:08:33,"Assuming the rebase was for #22220, this seems more in keeping with the conventions in https://github.com/bitcoin/bitcoin/commit/5ef2738089efd396186775ad23aaec71ea44ebb1:\n```suggestion\n         if (std::optional<CAmount> consolidate_feerate = ParseMoney(gArgs.GetArg(""-consolidatefeerate"", """"))) {\n             walletInstance->m_consolidate_feerate = CFeeRate{consolidate_feerate.value()};\n  ",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697426583,697426583,src/wallet/wallet.cpp
glozow,2021-08-27 13:09:13,+1,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697427059,697427059,src/wallet/wallet.h
Xekyo,2021-08-27 14:49:43,"Nit:\n```suggestion\n    const CAmount fee_diff{40};\n```",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697503379,697503379,src/wallet/test/coinselector_tests.cpp
achow101,2021-08-27 16:46:28,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697582475,697582475,src/wallet/wallet.h
achow101,2021-08-27 16:46:36,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697582556,697582556,src/wallet/wallet.cpp
achow101,2021-08-27 16:46:41,Done,https://github.com/bitcoin/bitcoin/pull/22009#discussion_r697582610,697582610,src/wallet/test/coinselector_tests.cpp
rajarshimaitra,2021-09-10 10:30:50,"As it was discussed in the [review club](https://github.com/bitcoin/bitcoin/pull/22938), there are more scenarios when the waste can be zero. Thus the ""only"" doesn't seem appropriate here. \n\nI went ahead and opened another PR fixing this with addition of those extra cases. https://github.com/bitcoin/bitcoin/pull/22938. ",https://github.com/bitcoin/bitcoin/pull/22009#discussion_r706075532,706075532,src/wallet/test/coinselector_tests.cpp
