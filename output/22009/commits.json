[
  {
    "sha": "54de7b47463d98f860167d4e0b7e4ebb3926b59c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGRlN2I0NzQ2M2Q5OGY4NjAxNjdkNGUwYjdlNGViYjM5MjZiNTlj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T20:54:23Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:04Z"
      },
      "message": "Allow the long term feerate to be configured, default of 10 sat/vb\n\nThe long term feerate is really the highest feerate that the user is\ncomfortable with making consolidatory transactions. This is should thus\nbe something that can be configured by the user via a new startup option\n-consolidatefeerate. The default value is 10 sat/vbyte, chosen\narbitrarily (it seems like a reasonable number).",
      "tree": {
        "sha": "bd4fa1cf13689cfc6ecbee4153632d03d8dabac8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd4fa1cf13689cfc6ecbee4153632d03d8dabac8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54de7b47463d98f860167d4e0b7e4ebb3926b59c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54de7b47463d98f860167d4e0b7e4ebb3926b59c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54de7b47463d98f860167d4e0b7e4ebb3926b59c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54de7b47463d98f860167d4e0b7e4ebb3926b59c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb09c26724e3f714b613788fc506f2ff3a208d2c"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2d897f4c4015a442f7a41e0bf35cd20d3492f060",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "patch": "@@ -28,6 +28,7 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-addresstype\",\n         \"-avoidpartialspends\",\n         \"-changetype\",\n+        \"-consolidatefeerate=<amt>\",\n         \"-disablewallet\",\n         \"-discardfee=<amt>\",\n         \"-fallbackfee=<amt>\","
      },
      {
        "sha": "bb5f0cceff67e24c82125fa473a55437f0011db4",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "patch": "@@ -45,6 +45,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting many (possibly all) or none, instead of selecting on a per-output basis. Privacy is improved as addresses are mostly swept with fewer transactions and outputs are aggregated in clean change addresses. It may result in higher fees due to less optimal coin selection caused by this added limitation and possibly a larger-than-necessary number of inputs being used. Always enabled for wallets with \\\"avoid_reuse\\\" enabled, otherwise default: %u.\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-consolidatefeerate=<amt>\", strprintf(\"The maximum feerate (in %s/kvB) at which transaction building may use more inputs than strictly necessary so that the wallet's UTXO pool can be reduced (default: %s).\", CURRENCY_UNIT, FormatMoney(DEFAULT_CONSOLIDATE_FEERATE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kvB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\","
      },
      {
        "sha": "3ccb6d6391e7559d36118e9baef291e4866e5f79",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "patch": "@@ -586,6 +586,9 @@ bool CWallet::CreateTransactionInternal(\n     CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n     coin_selection_params.m_avoid_partial_spends = coin_control.m_avoid_partial_spends;\n \n+    // Set the long term feerate estimate to the wallet's consolidate feerate\n+    coin_selection_params.m_long_term_feerate = m_consolidate_feerate;\n+\n     CAmount recipients_sum = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n     ReserveDestination reservedest(this, change_type);\n@@ -659,11 +662,6 @@ bool CWallet::CreateTransactionInternal(\n         return false;\n     }\n \n-    // Get long term estimate\n-    CCoinControl cc_temp;\n-    cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n-    coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n-\n     // Calculate the cost of change\n     // Cost of change is the cost of creating the change output + cost of spending the change output in the future.\n     // For creating the change output now, we use the effective feerate."
      },
      {
        "sha": "c33cc9e164a38d89fc1293705205bf6bf0c63f53",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "patch": "@@ -2701,6 +2701,15 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n         walletInstance->m_default_max_tx_fee = max_fee.value();\n     }\n \n+    if (gArgs.IsArgSet(\"-consolidatefeerate\")) {\n+        if (std::optional<CAmount> consolidate_feerate = ParseMoney(gArgs.GetArg(\"-consolidatefeerate\", \"\"))) {\n+            walletInstance->m_consolidate_feerate = CFeeRate(*consolidate_feerate);\n+        } else {\n+            error = AmountErrMsg(\"consolidatefeerate\", gArgs.GetArg(\"-consolidatefeerate\", \"\"));\n+            return nullptr;\n+        }\n+    }\n+\n     if (chain && chain->relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n         warnings.push_back(AmountHighWarn(\"-minrelaytxfee\") + Untranslated(\" \") +\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));"
      },
      {
        "sha": "607af3efb05b36ca241a8132fc0a4d3c8ed90c82",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54de7b47463d98f860167d4e0b7e4ebb3926b59c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "patch": "@@ -73,6 +73,8 @@ static const CAmount DEFAULT_FALLBACK_FEE = 0;\n static const CAmount DEFAULT_DISCARD_FEE = 10000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+//! -consolidatefeerate default\n+static const CAmount DEFAULT_CONSOLIDATE_FEERATE{10000}; // 10 sat/vbyte\n /**\n  * maximum fee increase allowed to do partial spend avoidance, even for nodes with this feature disabled by default\n  *\n@@ -638,6 +640,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n       * output itself, just drop it to fees. */\n     CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};\n \n+    /** When the actual feerate is less than the consolidate feerate, we will tend to make transactions which\n+     * consolidate inputs. When the actual feerate is greater than the consolidate feerate, we will tend to make\n+     * transactions which have the lowest fees.\n+     */\n+    CFeeRate m_consolidate_feerate{DEFAULT_CONSOLIDATE_FEERATE};\n+\n     /** The maximum fee amount we're willing to pay to prioritize partial spend avoidance. */\n     CAmount m_max_aps_fee{DEFAULT_MAX_AVOIDPARTIALSPEND_FEE}; //!< note: this is absolute fee, not fee rate\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};"
      }
    ]
  },
  {
    "sha": "d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTA2OWZjMWFhN2QzMzVmMzA0MzIyN2Y4NDNjYmI5ZDhiYTE1MDdi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-02T21:27:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:06Z"
      },
      "message": "tests: Use SelectCoinsBnB directly instead of AttemptSelection\n\nInstead of calling AttemptSelection with the hopes/instruction that it\nuses BnB, call SelectCoinsBnB directly to test it.",
      "tree": {
        "sha": "53fcc48741e0a47fc94ce2f4cb33fae0592f9406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53fcc48741e0a47fc94ce2f4cb33fae0592f9406"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5069fc1aa7d335f3043227f843cbb9d8ba1507b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54de7b47463d98f860167d4e0b7e4ebb3926b59c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54de7b47463d98f860167d4e0b7e4ebb3926b59c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "28818250691c74b76f64f79adf4f42237e1f70d7",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5069fc1aa7d335f3043227f843cbb9d8ba1507b/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5069fc1aa7d335f3043227f843cbb9d8ba1507b/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
        "patch": "@@ -281,14 +281,14 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     empty_wallet();\n     add_coin(1);\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n-    BOOST_CHECK(!testWallet.AttemptSelection( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params_bnb));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(vCoins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n \n     // Test fees subtracted from output:\n     empty_wallet();\n     add_coin(1 * CENT);\n     vCoins.at(0).nInputBytes = 40;\n     coin_selection_params_bnb.m_subtract_fee_outputs = true;\n-    BOOST_CHECK(testWallet.AttemptSelection( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params_bnb));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(vCoins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n     BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n     // Make sure that can use BnB when there are preset inputs"
      }
    ]
  },
  {
    "sha": "6a023a6f904efe38dacd662d919aba74f066b1dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTAyM2E2ZjkwNGVmZTM4ZGFjZDY2MmQ5MTlhYmE3NGYwNjZiMWRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-02T21:28:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:06Z"
      },
      "message": "tests: Add KnapsackGroupOutputs helper function\n\nIn order to change the KnapsackSolver tests to call KnapsackSolver, we\nneed KnapsackGroupOutputs to create the OutputGroups filtered with the\nfilter criteria.",
      "tree": {
        "sha": "70ddfa2f8db88433761edf9fa584e2f288823fbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ddfa2f8db88433761edf9fa584e2f288823fbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a023a6f904efe38dacd662d919aba74f066b1dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a023a6f904efe38dacd662d919aba74f066b1dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a023a6f904efe38dacd662d919aba74f066b1dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a023a6f904efe38dacd662d919aba74f066b1dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5069fc1aa7d335f3043227f843cbb9d8ba1507b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5069fc1aa7d335f3043227f843cbb9d8ba1507b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e83e16247809abc3a64622040c78710e59d3b612",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a023a6f904efe38dacd662d919aba74f066b1dc/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a023a6f904efe38dacd662d919aba74f066b1dc/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=6a023a6f904efe38dacd662d919aba74f066b1dc",
        "patch": "@@ -137,6 +137,13 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n     return static_groups;\n }\n \n+inline std::vector<OutputGroup>& KnapsackGroupOutputs(const CoinEligibilityFilter& filter)\n+{\n+    static std::vector<OutputGroup> static_groups;\n+    static_groups = testWallet.GroupOutputs(vCoins, coin_selection_params, filter, /* positive_only */false);\n+    return static_groups;\n+}\n+\n // Branch and bound coin selection tests\n BOOST_AUTO_TEST_CASE(bnb_search_test)\n {"
      }
    ]
  },
  {
    "sha": "935b3ddf72aa390087684e03166c707f5b173434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzViM2RkZjcyYWEzOTAwODc2ODRlMDMxNjZjNzA3ZjViMTczNDM0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-02T21:33:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:06Z"
      },
      "message": "scripted-diff: tests: Use KnapsackSolver directly\n\nWhen doing the coin selector tests for KnapsackSolver, call it directly\ninstead of using AttemptSelection and hoping/instructing it uses\nKnapsackSolver.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/testWallet\\.AttemptSelection( /KnapsackSolver(/g' src/wallet/test/coinselector_tests.cpp\nsed -i 's/testWallet\\.AttemptSelection(/KnapsackSolver(/g' src/wallet/test/coinselector_tests.cpp\nsed -i 's/, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params)/, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet)/g' src/wallet/test/coinselector_tests.cpp\nsed -i 's/, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params)/, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet)/g' src/wallet/test/coinselector_tests.cpp\nsed -i 's/, filter_standard_extra, vCoins, setCoinsRet, nValueRet, coin_selection_params)/, KnapsackGroupOutputs(filter_standard_extra), setCoinsRet, nValueRet)/g' src/wallet/test/coinselector_tests.cpp\nsed -i 's/BOOST_CHECK( /BOOST_CHECK(/g' src/wallet/test/coinselector_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e7032a09a158744deca21d83d13bb9f71cbb242f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7032a09a158744deca21d83d13bb9f71cbb242f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935b3ddf72aa390087684e03166c707f5b173434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b3ddf72aa390087684e03166c707f5b173434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935b3ddf72aa390087684e03166c707f5b173434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b3ddf72aa390087684e03166c707f5b173434/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a023a6f904efe38dacd662d919aba74f066b1dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a023a6f904efe38dacd662d919aba74f066b1dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a023a6f904efe38dacd662d919aba74f066b1dc"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 31,
      "deletions": 31
    },
    "files": [
      {
        "sha": "db34ae18c31403168313f9f9987c3a38a3b750cf",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935b3ddf72aa390087684e03166c707f5b173434/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935b3ddf72aa390087684e03166c707f5b173434/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=935b3ddf72aa390087684e03166c707f5b173434",
        "patch": "@@ -330,24 +330,24 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         empty_wallet();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!testWallet.AttemptSelection( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n \n         add_coin(1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!testWallet.AttemptSelection( 1 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK( testWallet.AttemptSelection( 1 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(1 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n         add_coin(2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!testWallet.AttemptSelection( 3 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(!KnapsackSolver(3 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n \n         // we can make 3 cents of new coins\n-        BOOST_CHECK( testWallet.AttemptSelection( 3 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(3 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n \n         add_coin(5*CENT);           // add a mature 5 cent coin,\n@@ -357,33 +357,33 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!testWallet.AttemptSelection(38 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!testWallet.AttemptSelection(38 * CENT, filter_standard_extra, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_standard_extra), setCoinsRet, nValueRet));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK( testWallet.AttemptSelection(37 * CENT, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(37 * CENT, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK( testWallet.AttemptSelection(38 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(38 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK( testWallet.AttemptSelection(34 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(34 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK( testWallet.AttemptSelection( 7 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(7 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK( testWallet.AttemptSelection( 8 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(8 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK( testWallet.AttemptSelection( 9 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(9 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -397,30 +397,30 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK( testWallet.AttemptSelection(71 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n-        BOOST_CHECK(!testWallet.AttemptSelection(72 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(71 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(72 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK( testWallet.AttemptSelection(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK( testWallet.AttemptSelection(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK( testWallet.AttemptSelection(16 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK( testWallet.AttemptSelection(11 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(11 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -429,11 +429,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin( 2*COIN);\n         add_coin( 3*COIN);\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK( testWallet.AttemptSelection(95 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(95 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        BOOST_CHECK( testWallet.AttemptSelection(195 * CENT, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(195 * CENT, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -448,22 +448,22 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK( testWallet.AttemptSelection(MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK( testWallet.AttemptSelection(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK( testWallet.AttemptSelection(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see https://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n@@ -472,7 +472,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         for (int j = 0; j < 20; j++)\n             add_coin(50000 * COIN);\n \n-        BOOST_CHECK( testWallet.AttemptSelection(500000 * COIN, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(500000 * COIN, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n@@ -485,7 +485,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.AttemptSelection(1 * MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -495,7 +495,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 8 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.AttemptSelection(MIN_CHANGE, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n@@ -506,12 +506,12 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(testWallet.AttemptSelection(MIN_CHANGE * 10001 / 100, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 10001 / 100, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(testWallet.AttemptSelection(MIN_CHANGE * 9990 / 100, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 9990 / 100, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n       }\n@@ -525,7 +525,7 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n            // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n            for (int i = 0; i < RUN_TESTS; i++) {\n-             BOOST_CHECK(testWallet.AttemptSelection(2000, filter_confirmed, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+             BOOST_CHECK(KnapsackSolver(2000, KnapsackGroupOutputs(filter_confirmed), setCoinsRet, nValueRet));\n \n              if (amt - 2000 < MIN_CHANGE) {\n                  // needs more than one input:\n@@ -610,7 +610,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n         add_coin(1000 * COIN);\n     add_coin(3 * COIN);\n \n-    BOOST_CHECK(testWallet.AttemptSelection(1003 * COIN, filter_standard, vCoins, setCoinsRet, nValueRet, coin_selection_params));\n+    BOOST_CHECK(KnapsackSolver(1003 * COIN, KnapsackGroupOutputs(filter_standard), setCoinsRet, nValueRet));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n "
      }
    ]
  },
  {
    "sha": "4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjVhZDQzYjFlMDVjZDdiNDAzZjg3YWFlNGM0ZDQyZTVhZWE4MTBi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T23:06:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:06Z"
      },
      "message": "Add waste metric calculation function",
      "tree": {
        "sha": "a778645b0316ca4af889d9bf2f4321d6a8d54743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a778645b0316ca4af889d9bf2f4321d6a8d54743"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "935b3ddf72aa390087684e03166c707f5b173434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935b3ddf72aa390087684e03166c707f5b173434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/935b3ddf72aa390087684e03166c707f5b173434"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 42,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1699424657ca2d81265e41d6a4f50fa99700572a",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
        "patch": "@@ -341,3 +341,30 @@ CAmount OutputGroup::GetSelectionAmount() const\n {\n     return m_subtract_fee_outputs ? m_value : effective_value;\n }\n+\n+CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value)\n+{\n+    // This function should not be called with empty inputs as that would mean the selection failed\n+    assert(!inputs.empty());\n+\n+    // Always consider the cost of spending an input now vs in the future.\n+    CAmount waste = 0;\n+    CAmount selected_effective_value = 0;\n+    for (const CInputCoin& coin : inputs) {\n+        waste += coin.m_fee - coin.m_long_term_fee;\n+        selected_effective_value += use_effective_value ? coin.effective_value : coin.txout.nValue;\n+    }\n+\n+    if (change_cost) {\n+        // Consider the cost of making change and spending it in the future\n+        // If we aren't making change, the caller should've set change_cost to 0\n+        assert(change_cost > 0);\n+        waste += change_cost;\n+    } else {\n+        // When we are not making change (change_cost == 0), consider the excess we are throwing away to fees\n+        assert(selected_effective_value >= target);\n+        waste += selected_effective_value - target;\n+    }\n+\n+    return waste;\n+}"
      },
      {
        "sha": "35617d455b4b13c353914566423940ecfaeab6a4",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
        "patch": "@@ -166,6 +166,21 @@ struct OutputGroup\n     CAmount GetSelectionAmount() const;\n };\n \n+/** Compute the waste for this result given the cost of change\n+ * and the opportunity cost of spending these inputs now vs in the future.\n+ * If change exists, waste = change_cost + inputs * (effective_feerate - long_term_feerate)\n+ * If no change, waste = excess + inputs * (effective_feerate - long_term_feerate)\n+ * where excess = selected_effective_value - target\n+ * change_cost = effective_feerate * change_output_size + long_term_feerate * change_spend_size\n+ *\n+ * @param[in] inputs The selected inputs\n+ * @param[in] change_cost The cost of creating change and spending it in the future. Only used if there is change. Must be 0 if there is no change.\n+ * @param[in] target The amount targeted by the coin selection algorithm.\n+ * @param[in] use_effective_value Whether to use the input's effective value (when true) or the real value (when false).\n+ * @return The waste\n+ */\n+[[nodiscard]] CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value = true);\n+\n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n \n // Original coin selection algorithm as a fallback"
      }
    ]
  },
  {
    "sha": "b3df0caf7c291a316298e54e73426c765e61c129",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2RmMGNhZjdjMjkxYTMxNjI5OGU1NGU3MzQyNmM3NjVlNjFjMTI5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-06-11T20:59:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:17Z"
      },
      "message": "tests: Test GetSelectionWaste\n\nTests for some waste calculation scenarios\n\nadd_coin is modified to allow fee and long term fee to be set for an\nadded CInputCoin.",
      "tree": {
        "sha": "935ea6308469feb140de9655a79e79cf00346512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/935ea6308469feb140de9655a79e79cf00346512"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3df0caf7c291a316298e54e73426c765e61c129",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3df0caf7c291a316298e54e73426c765e61c129",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3df0caf7c291a316298e54e73426c765e61c129",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3df0caf7c291a316298e54e73426c765e61c129/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f5ad43b1e05cd7b403f87aae4c4d42e5aea810b"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 75,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b2169a5b65a7142a4be863dcb918241f86f1a4b",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 2,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3df0caf7c291a316298e54e73426c765e61c129/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3df0caf7c291a316298e54e73426c765e61c129/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=b3df0caf7c291a316298e54e73426c765e61c129",
        "patch": "@@ -49,12 +49,16 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>&\n     set.emplace_back(MakeTransactionRef(tx), nInput);\n }\n \n-static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fee = 0, CAmount long_term_fee = 0)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    set.emplace(MakeTransactionRef(tx), nInput);\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n+    coin.effective_value = nValue - fee;\n+    coin.m_fee = fee;\n+    coin.m_long_term_fee = long_term_fee;\n+    set.insert(coin);\n }\n \n static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n@@ -658,4 +662,73 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(waste_test)\n+{\n+    CoinSet selection;\n+    const CAmount fee{100};\n+    const CAmount change_cost{125};\n+    const CAmount fee_diff{40};\n+    const CAmount in_amt{3 * COIN};\n+    const CAmount target{2 * COIN};\n+    const CAmount excess{in_amt - fee * 2 - target};\n+\n+    // Waste with change is the change cost and difference between fee and long term fee\n+    add_coin(1 * COIN, 1, selection, fee, fee - fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee - fee_diff);\n+    const CAmount waste1 = GetSelectionWaste(selection, change_cost, target);\n+    BOOST_CHECK_EQUAL(fee_diff * 2 + change_cost, waste1);\n+    selection.clear();\n+\n+    // Waste without change is the excess and difference between fee and long term fee\n+    add_coin(1 * COIN, 1, selection, fee, fee - fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee - fee_diff);\n+    const CAmount waste_nochange1 = GetSelectionWaste(selection, 0, target);\n+    BOOST_CHECK_EQUAL(fee_diff * 2 + excess, waste_nochange1);\n+    selection.clear();\n+\n+    // Waste with change and fee == long term fee is just cost of change\n+    add_coin(1 * COIN, 1, selection, fee, fee);\n+    add_coin(2 * COIN, 2, selection, fee, fee);\n+    BOOST_CHECK_EQUAL(change_cost, GetSelectionWaste(selection, change_cost, target));\n+    selection.clear();\n+\n+    // Waste without change and fee == long term fee is just the excess\n+    add_coin(1 * COIN, 1, selection, fee, fee);\n+    add_coin(2 * COIN, 2, selection, fee, fee);\n+    BOOST_CHECK_EQUAL(excess, GetSelectionWaste(selection, 0, target));\n+    selection.clear();\n+\n+    // Waste will be greater when fee is greater, but long term fee is the same\n+    add_coin(1 * COIN, 1, selection, fee * 2, fee - fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee * 2, fee - fee_diff);\n+    const CAmount waste2 = GetSelectionWaste(selection, change_cost, target);\n+    BOOST_CHECK_GT(waste2, waste1);\n+    selection.clear();\n+\n+    // Waste with change is the change cost and difference between fee and long term fee\n+    // With long term fee greater than fee, waste should be less than when long term fee is less than fee\n+    add_coin(1 * COIN, 1, selection, fee, fee + fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee + fee_diff);\n+    const CAmount waste3 = GetSelectionWaste(selection, change_cost, target);\n+    BOOST_CHECK_EQUAL(fee_diff * -2 + change_cost, waste3);\n+    BOOST_CHECK_LT(waste3, waste1);\n+    selection.clear();\n+\n+    // Waste without change is the excess and difference between fee and long term fee\n+    // With long term fee greater than fee, waste should be less than when long term fee is less than fee\n+    add_coin(1 * COIN, 1, selection, fee, fee + fee_diff);\n+    add_coin(2 * COIN, 2, selection, fee, fee + fee_diff);\n+    const CAmount waste_nochange2 = GetSelectionWaste(selection, 0, target);\n+    BOOST_CHECK_EQUAL(fee_diff * -2 + excess, waste_nochange2);\n+    BOOST_CHECK_LT(waste_nochange2, waste_nochange1);\n+    selection.clear();\n+\n+    // 0 Waste only when fee == long term fee, no change, and no excess\n+    add_coin(1 * COIN, 1, selection, fee, fee);\n+    add_coin(2 * COIN, 2, selection, fee, fee);\n+    const CAmount exact_target = in_amt - 2 * fee;\n+    BOOST_CHECK_EQUAL(0, GetSelectionWaste(selection, 0, exact_target));\n+\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "86beee05795216738f51fa744539336503c26fd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmJlZWUwNTc5NTIxNjczOGY1MWZhNzQ0NTM5MzM2NTAzYzI2ZmQ5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-20T23:52:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T16:46:19Z"
      },
      "message": "Use waste metric for deciding which selection to use\n\nInstead of always choosing BnB if it finds a solution, always do both\nBnB and KnapsackSolver and choose the one which has the least waste.",
      "tree": {
        "sha": "783f0c46d23ae8d767028c8e9c875c2e5aa4b2a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/783f0c46d23ae8d767028c8e9c875c2e5aa4b2a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86beee05795216738f51fa744539336503c26fd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86beee05795216738f51fa744539336503c26fd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86beee05795216738f51fa744539336503c26fd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86beee05795216738f51fa744539336503c26fd9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3df0caf7c291a316298e54e73426c765e61c129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3df0caf7c291a316298e54e73426c765e61c129",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3df0caf7c291a316298e54e73426c765e61c129"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 31,
      "deletions": 4
    },
    "files": [
      {
        "sha": "928335da2bb9c23f04e3f431c9a353258b202c4e",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86beee05795216738f51fa744539336503c26fd9/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86beee05795216738f51fa744539336503c26fd9/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=86beee05795216738f51fa744539336503c26fd9",
        "patch": "@@ -357,17 +357,44 @@ bool CWallet::AttemptSelection(const CAmount& nTargetValue, const CoinEligibilit\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n+    // Vector of results for use with waste calculation\n+    // In order: calculated waste, selected inputs, selected input value (sum of input values)\n+    // TODO: Use a struct representing the selection result\n+    std::vector<std::tuple<CAmount, std::set<CInputCoin>, CAmount>> results;\n \n     // Note that unlike KnapsackSolver, we do not include the fee for creating a change output as BnB will not create a change output.\n     std::vector<OutputGroup> positive_groups = GroupOutputs(coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n-    if (SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, setCoinsRet, nValueRet)) {\n-        return true;\n+    std::set<CInputCoin> bnb_coins;\n+    CAmount bnb_value;\n+    if (SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, bnb_coins, bnb_value)) {\n+        const auto waste = GetSelectionWaste(bnb_coins, /* cost of change */ CAmount(0), nTargetValue, !coin_selection_params.m_subtract_fee_outputs);\n+        results.emplace_back(std::make_tuple(waste, std::move(bnb_coins), bnb_value));\n     }\n+\n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n     std::vector<OutputGroup> all_groups = GroupOutputs(coins, coin_selection_params, eligibility_filter, false /* positive_only */);\n     // While nTargetValue includes the transaction fees for non-input things, it does not include the fee for creating a change output.\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n-    return KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, all_groups, setCoinsRet, nValueRet);\n+    std::set<CInputCoin> knapsack_coins;\n+    CAmount knapsack_value;\n+    if (KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, all_groups, knapsack_coins, knapsack_value)) {\n+        const auto waste = GetSelectionWaste(knapsack_coins, coin_selection_params.m_cost_of_change, nTargetValue + coin_selection_params.m_change_fee, !coin_selection_params.m_subtract_fee_outputs);\n+        results.emplace_back(std::make_tuple(waste, std::move(knapsack_coins), knapsack_value));\n+    }\n+\n+    if (results.size() == 0) {\n+        // No solution found\n+        return false;\n+    }\n+\n+    // Choose the result with the least waste\n+    // If the waste is the same, choose the one which spends more inputs.\n+    const auto& best_result = std::min_element(results.begin(), results.end(), [](const auto& a, const auto& b) {\n+        return std::get<0>(a) < std::get<0>(b) || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a).size() > std::get<1>(b).size());\n+    });\n+    setCoinsRet = std::get<1>(*best_result);\n+    nValueRet = std::get<2>(*best_result);\n+    return true;\n }\n \n bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) const"
      },
      {
        "sha": "0ce58efbcfb7b675b16cdc0804731280827fc113",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86beee05795216738f51fa744539336503c26fd9/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86beee05795216738f51fa744539336503c26fd9/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=86beee05795216738f51fa744539336503c26fd9",
        "patch": "@@ -543,7 +543,7 @@ def test_locked_wallet(self):\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n         inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.09999500}\n+        outputs = {self.nodes[0].getnewaddress():1.19999500}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that does not require a new key for the change output\n         self.nodes[1].fundrawtransaction(rawtx)"
      }
    ]
  }
]