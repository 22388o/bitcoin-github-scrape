laanwj,2014-12-05T12:12:02Z,"ACK on the change to `src/wallet.h`. \n\nAs discussed on IRC, I don't agree readability being a sufficient reason to change the others as it's very subjective.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65782182,65782182,
maaku,2014-12-05T16:52:46Z,"ACK. If/when CAmount is made into its own class for type safety and sidechain extensibility reasons, implicit boolean conversion will no longer be desirable. The alternative `!= 0` construction is just as readable, correct, and achieves future proofing.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65818101,65818101,
jtimon,2014-12-06T22:58:32Z,"The code in https://github.com/jtimon/bitcoin/commit/710d428a1fc8be8737dc9c6ba456629be53713ed doesn't compile giving the error:\n\n```\nIn file included from ./amount.h:9:0,\n                 from qt/guiutil.h:8,\n                 from qt/guiutil.cpp:5:\n./serialize.h: In instantiation of ‘void SerReadWrite(Stream&, const T&, int, int, CSerActionSerialize) [with Stream = CSizeComputer; T = TOperab",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65917944,65917944,
petertodd,2014-12-07T06:59:20Z,"Why are we changing consensus critical code for the sake of altcoins/sidechains? If there is no clear reason to change it, leave that code alone. Frankly we already have a huge number of changes coming down very quickly for v0.10 - I know I personally am finding it hard to find time for reviewing it all. Even bringing up the topic of alt-coins otherwise is loudly discouraged... Yet here you're mak",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65928905,65928905,
petertodd,2014-12-07T07:10:54Z,"And before you reply complaining about this exact pull-req... Keep in mind how utterly tone-deaf this stuff is, for instance saying:\n\n> If/when CAmount is made into its own class for type safety and sidechain extensibility reason\n\nEspecially as we've already handled the type safety issue elsewhere by making it a typedef, and more importantly, this is _consensus critical code that nearly never ",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65929089,65929089,
maaku,2014-12-07T08:01:03Z,"> Yet here you're making dangerous changes to Bitcoin Core just so you'll save money on programmers.\n\nSeriously Peter? Changing `if (integer)` to `if (integer != 0)` is ""dangerous""?\n\n> Especially as we've already handled the type safety issue elsewhere by making it a typedef\n\nI don't want to sidetrack this discussion into a rehash of #4037, but changing from `int64_t` to `CAmount` achieved a",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65929948,65929948,
petertodd,2014-12-07T08:19:11Z,"> Seriously Peter? Changing `if (integer)` to `if (integer != 0)` is\n> ""dangerous""?\n\nLike I said, I'm referring to the impact of this work in totality; not specifically this one single change. I think you missed the intent above, which was _why_ you're arguing we need changes: ultimately for the sake of altcoins and sidechains more than Bitcoin Core's needs.\n\nAlso every line changed does incu",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65930277,65930277,
maaku,2014-12-07T08:39:20Z,"Arguing against changes for the sake of arguing wastes everybody's time. Is this change harmful? No. The C++ standard states that implicit conversion of integers to boolean values is performed by comparing against zero, which is done explicitly here. It solves problems for people who are working with other changes to bitcoin's codebase. The change is innocuous and makes someone's life easier. Why ",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65930652,65930652,
gmaxwell,2014-12-07T11:46:24Z,"Incidentally, this currently has nothing to do with sidechains. (And only commenting here because PT is oddly posting all around the internet saying it does, which makes no sense, and people are asking me... and answering once here is more efficient.)\n\nJtimon has been doing code structure cleanups in Bitcoin core of this kind since something like March.\n\nThe type changes stuff was done a while",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65934716,65934716,
jtimon,2014-12-07T11:59:54Z,"I'm pretty sure that these ""dangerous changes"" to ""consensus critical code"" (wallet.h, qt/guiutil.cpp and qt/receiverequestdialog.cpp no less) actually result in an identical build.\nYou are right that the number of people able to review consensus code is limited (in fact apparently the number people able to distinguish which code is consensus-critical and what changes will actually result in a di",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65935076,65935076,
petertodd,2014-12-07T12:23:44Z,"On 7 December 2014 11:46:56 GMT+00:00, Gregory Maxwell notifications@github.com wrote:\n\n> Incidentally, this has nothing to do with sidechains.\n\nMark's ACK above which specifically mentions sidechains as a reason to make this change; as has been advocated elsewhere by him and the pull-req author. (elsewhere altcoins have been brought up as the reason to make these changes too)\n\nYou'll note h",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65935667,65935667,
gmaxwell,2014-12-07T12:32:10Z,> I simply want to be sure the overall plan is to continue the overall criteria for changing code in Bitcoin remains whether or not it will benefit Bitcoin users \n\nAbsolutely.\n,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65935858,65935858,
jgarzik,2014-12-07T12:34:56Z,"Bitcoin benefits from more typesafe, more modular code.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65935943,65935943,
petertodd,2014-12-07T12:42:07Z,"-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 7 December 2014 12:00:25 GMT+00:00, ""Jorge Timón"" notifications@github.com wrote:\n\n> I'm pretty sure that these ""dangerous changes"" to ""consensus critical\n> code"" (wallet.h, qt/guiutil.cpp and qt/receiverequestdialog.cpp no\n> less) actually result in an identical build.\n> You are right that the number of people able to review consensus co",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65936135,65936135,
sipa,2014-12-07T12:43:51Z,"I completely agree that the criterion for inclusion in Bitcoin Core should whether it benefits Bitcoin, and should be weighed against the risks it introduces for Bitcoin. And readable, robust, auditable, transparent, and more flexible code is a benefit too.\n\nRegarding this pull request in particular: it continues a transformation of the code to abstract the handling of monetary amounts. IMHO, lo",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65936188,65936188,
btcdrak,2014-12-07T12:47:47Z,@petertodd @maaku Clearly these kind of changes were **specifically** proposed to benefit altcoins and sidechains [back in April 2014](https://github.com/bitcoin/bitcoin/pull/4067#issue-31810174) and there were [objections](https://github.com/bitcoin/bitcoin/pull/4067#issuecomment-40862444) (as well as other comments in that ticket).\n\nRefactoring of Bitcoin Core should be beneficial to Bitcoin C,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65936278,65936278,
gmaxwell,2014-12-07T12:52:19Z,"What purpose are you commenting here for?  I'm having trouble extracting it from your message.\n\nThe stuff your're linking to was a prior approach. What was adopted was a recommendation by wumpus (and supported by many, incl. petertodd). The whole motivation for it here is making things cleaner and more explicitly typed.  So I am unable to tell what view your message is intended to express.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65936390,65936390,
jtimon,2014-12-07T14:35:26Z,I do plan to submit more changes related to CAmount but since a class was not wanted I am precisely trying to isolate the changes that could easily be accepted (as I thought these trivial changes would be).\nI believe these changes are beneficial for Bitcoin or I wouldn't propose them here. Other people might disagree and I have stepped back in the past (like not proposing a pow class anymore). Ab,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65939152,65939152,
btcdrak,2014-12-07T16:39:43Z,"@gmaxwell My concerns are general - I am concerned that OP is still advocating for changes for non-Bitcoin Core purposes (i.e. for the benefit of altcoins). Relocating code for modularity aside, I worry about the amount of consensus critical code being touched without express need to do so.\n\nI feel there is an elephant in the room, so let me address it at the risk of being wrong: I'm objecting t",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65943290,65943290,
jtimon,2014-12-07T18:20:57Z,"> I feel there is an elephant in the room, so let me address it at the risk of being wrong: I'm objecting to making changes specifically so that altcoins and sidechains maintenance is easier, as it means we must touch consensus critical code.\n\nWe all agree on that, it has to be better for Bitcoin in general. IMO not because touching consensus should be avoided at all costs but because it what ma",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65947272,65947272,
gmaxwell,2014-12-07T21:44:45Z,@btcdrak Please point to any changes you see to concensus code which you believe are misplaced. I'm still at a loss as to what you're going on about. This PR does none of the things you're talking about.\n,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-65956608,65956608,
laanwj,2014-12-11T17:45:24Z,"> Rather the next step being advocated above as the followup - change consensus critical code by changing CAmount - is the issue.\n\nAgreed. I went along with the CAmount change in the consensus code under the following conditions:\n- `CAmount` would be a typedef for `uint64_t`, not a class or anything more complex\n- The binary would be unchanged. I checked this. There is AFAIK no tool for this t",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-66658258,66658258,
jtimon,2014-12-11T22:08:39Z,"I leave the ""if(x) -> if(x !=0)"" controversial part here.\nThe uncontroversial commit and another one that just completes #4234 (without going as far as offering #4067-like type-safety) can be found in #5464. \nBoth PRs/commits have been rebased on top of 0.10.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-66698171,66698171,
jtimon,2014-12-12T09:44:41Z,Closed #5464 and put back here as suggested by @laanwj .\n,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-66751485,66751485,
laanwj,2014-12-12T09:57:27Z,"Yes, my point is that we wrap up the CAmount-related changes here, and review and check them, to get that over with. It has become clear that no one is looking forward to having a new 'oh, we forgot CAmount in this place' pull every few days.\nSo - please be sure you caught them all now.\n",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-66752843,66752843,
jtimon,2014-12-12T10:22:26Z,"I haven't found anything else. As said I plan to maintain a #4037-like patch but I'm not there yet. Here's what I have so far: https://github.com/jtimon/bitcoin/compare/noamount\nIf you think I should get anything else from there I'm happy to do so.\n\nMaybe ""Use FormatMoney() in CTxOut::ToString()""? Although, honestly I would just show Satoshis there instead of Bitcoins.\nI didn't have the courag",https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-66755361,66755361,
jtimon,2015-03-26T16:27:58Z,Needs rebase but...closing.\n,https://github.com/bitcoin/bitcoin/pull/5430#issuecomment-86604394,86604394,
