[
  {
    "sha": "d6b13283d19b3229ec1aee62bf7b4747c581ddab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmIxMzI4M2QxOWIzMjI5ZWMxYWVlNjJiZjdiNDc0N2M1ODFkZGFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-09-29T09:13:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-10-01T02:57:26Z"
      },
      "message": "data-driven base58 CBitcoinAddress/CBitcoinSecret tests\n\nArbitrary numbers of test vectors can be generated using the script\n`gen_base58_test_vectors.py`.",
      "tree": {
        "sha": "7f7ba485f33dbd8b93a4670fa58365f2ac064f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7ba485f33dbd8b93a4670fa58365f2ac064f90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b13283d19b3229ec1aee62bf7b4747c581ddab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b13283d19b3229ec1aee62bf7b4747c581ddab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b13283d19b3229ec1aee62bf7b4747c581ddab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b13283d19b3229ec1aee62bf7b4747c581ddab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "842a31ad1bea930c7ae2adcea929e3b8f0febfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842a31ad1bea930c7ae2adcea929e3b8f0febfed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/842a31ad1bea930c7ae2adcea929e3b8f0febfed"
      }
    ],
    "stats": {
      "total": 1149,
      "additions": 1085,
      "deletions": 64
    },
    "files": [
      {
        "sha": "02d6c4cdc250ede71dd682021218432015d1cc07",
        "filename": "contrib/testgen/README",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1 @@\n+Utilities to generate test vectors for the data-driven Bitcoin tests"
      },
      {
        "sha": "b716495145f7772cdea37fdd0a7cd1c8caf9dc12",
        "filename": "contrib/testgen/base58.py",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1,104 @@\n+'''\n+Bitcoin base58 encoding and decoding.\n+\n+Based on https://bitcointalk.org/index.php?topic=1026.0 (public domain)\n+'''\n+import hashlib\n+\n+# for compatibility with following code...\n+class SHA256:\n+    new = hashlib.sha256\n+\n+if str != bytes:\n+    # Python 3.x\n+    def ord(c):\n+        return c\n+    def chr(n):\n+        return bytes( (n,) )\n+\n+__b58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+__b58base = len(__b58chars)\n+b58chars = __b58chars\n+\n+def b58encode(v):\n+    \"\"\" encode v, which is a string of bytes, to base58.\n+    \"\"\"\n+    long_value = 0\n+    for (i, c) in enumerate(v[::-1]):\n+        long_value += (256**i) * ord(c)\n+\n+    result = ''\n+    while long_value >= __b58base:\n+        div, mod = divmod(long_value, __b58base)\n+        result = __b58chars[mod] + result\n+        long_value = div\n+    result = __b58chars[long_value] + result\n+\n+    # Bitcoin does a little leading-zero-compression:\n+    # leading 0-bytes in the input become leading-1s\n+    nPad = 0\n+    for c in v:\n+        if c == '\\0': nPad += 1\n+        else: break\n+\n+    return (__b58chars[0]*nPad) + result\n+\n+def b58decode(v, length = None):\n+    \"\"\" decode v into a string of len bytes\n+    \"\"\"\n+    long_value = 0\n+    for (i, c) in enumerate(v[::-1]):\n+        long_value += __b58chars.find(c) * (__b58base**i)\n+\n+    result = bytes()\n+    while long_value >= 256:\n+        div, mod = divmod(long_value, 256)\n+        result = chr(mod) + result\n+        long_value = div\n+    result = chr(long_value) + result\n+\n+    nPad = 0\n+    for c in v:\n+        if c == __b58chars[0]: nPad += 1\n+        else: break\n+\n+    result = chr(0)*nPad + result\n+    if length is not None and len(result) != length:\n+        return None\n+\n+    return result\n+\n+def checksum(v):\n+    \"\"\"Return 32-bit checksum based on SHA256\"\"\"\n+    return SHA256.new(SHA256.new(v).digest()).digest()[0:4]\n+\n+def b58encode_chk(v):\n+    \"\"\"b58encode a string, with 32-bit checksum\"\"\"\n+    return b58encode(v + checksum(v))\n+\n+def b58decode_chk(v):\n+    \"\"\"decode a base58 string, check and remove checksum\"\"\"\n+    result = b58decode(v)\n+    if result is None:\n+        return None\n+    h3 = checksum(result[:-4])\n+    if result[-4:] == checksum(result[:-4]):\n+        return result[:-4]\n+    else:\n+        return None\n+\n+def get_bcaddress_version(strAddress):\n+    \"\"\" Returns None if strAddress is invalid.  Otherwise returns integer version of address. \"\"\"\n+    addr = b58decode_chk(strAddress)\n+    if addr is None or len(addr)!=21: return None\n+    version = addr[0]\n+    return ord(version)\n+\n+if __name__ == '__main__':\n+    # Test case (from http://gitorious.org/bitcoin/python-base58.git)\n+    assert get_bcaddress_version('15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC') is 0\n+    _ohai = 'o hai'.encode('ascii')\n+    _tmp = b58encode(_ohai)\n+    assert _tmp == 'DYB3oMS'\n+    assert b58decode(_tmp, 5) == _ohai\n+    print(\"Tests passed\")"
      },
      {
        "sha": "181343695363a4ed7a9965fc4cf0de72fc7f32ce",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "added",
        "additions": 126,
        "deletions": 0,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1,126 @@\n+#!/usr/bin/env python\n+'''\n+Generate valid and invalid base58 address and private key test vectors.\n+\n+Usage: \n+    gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json\n+    gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json\n+'''\n+# 2012 Wladimir J. van der Laan\n+# Released under MIT License\n+import os\n+from itertools import islice\n+from base58 import b58encode, b58decode, b58encode_chk, b58decode_chk, b58chars\n+import random\n+from binascii import b2a_hex\n+\n+# key types\n+PUBKEY_ADDRESS = 0\n+SCRIPT_ADDRESS = 5\n+PUBKEY_ADDRESS_TEST = 111\n+SCRIPT_ADDRESS_TEST = 196\n+PRIVKEY = 128\n+PRIVKEY_TEST = 239\n+\n+metadata_keys = ['isPrivkey', 'isTestnet', 'addrType', 'isCompressed']\n+# templates for valid sequences\n+templates = [\n+  # prefix, payload_size, suffix, metadata\n+  #                                  None = N/A\n+  ((PUBKEY_ADDRESS,),      20, (),   (False, False, 'pubkey', None)),\n+  ((SCRIPT_ADDRESS,),      20, (),   (False, False, 'script',  None)),\n+  ((PUBKEY_ADDRESS_TEST,), 20, (),   (False, True,  'pubkey', None)),\n+  ((SCRIPT_ADDRESS_TEST,), 20, (),   (False, True,  'script',  None)),\n+  ((PRIVKEY,),             32, (),   (True,  False, None,  False)),\n+  ((PRIVKEY,),             32, (1,), (True,  False, None,  True)),\n+  ((PRIVKEY_TEST,),        32, (),   (True,  True,  None,  False)),\n+  ((PRIVKEY_TEST,),        32, (1,), (True,  True,  None,  True))\n+]\n+\n+def is_valid(v):\n+    '''Check vector v for validity'''\n+    result = b58decode_chk(v)\n+    if result is None:\n+        return False\n+    valid = False\n+    for template in templates:\n+        prefix = str(bytearray(template[0]))\n+        suffix = str(bytearray(template[2]))\n+        if result.startswith(prefix) and result.endswith(suffix):\n+            if (len(result) - len(prefix) - len(suffix)) == template[1]:\n+                return True\n+    return False\n+\n+def gen_valid_vectors():\n+    '''Generate valid test vectors'''\n+    while True:\n+        for template in templates:\n+            prefix = str(bytearray(template[0]))\n+            payload = os.urandom(template[1]) \n+            suffix = str(bytearray(template[2]))\n+            rv = b58encode_chk(prefix + payload + suffix)\n+            assert is_valid(rv)\n+            metadata = dict([(x,y) for (x,y) in zip(metadata_keys,template[3]) if y is not None])\n+            yield (rv, b2a_hex(payload), metadata)\n+\n+def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt_suffix):\n+    '''Generate possibly invalid vector'''\n+    if corrupt_prefix:\n+        prefix = os.urandom(1)\n+    else:\n+        prefix = str(bytearray(template[0]))\n+    \n+    if randomize_payload_size:\n+        payload = os.urandom(max(int(random.expovariate(0.5)), 50))\n+    else:\n+        payload = os.urandom(template[1])\n+    \n+    if corrupt_suffix:\n+        suffix = os.urandom(len(template[2]))\n+    else:\n+        suffix = str(bytearray(template[2]))\n+\n+    return b58encode_chk(prefix + payload + suffix)\n+\n+def randbool(p = 0.5):\n+    '''Return True with P(p)'''\n+    return random.random() < p\n+\n+def gen_invalid_vectors():\n+    '''Generate invalid test vectors'''\n+    # start with some manual edge-cases\n+    yield \"\",\n+    yield \"x\",\n+    while True:\n+        # kinds of invalid vectors:\n+        #   invalid prefix\n+        #   invalid payload length\n+        #   invalid (randomized) suffix (add random data)\n+        #   corrupt checksum\n+        for template in templates:\n+            val = gen_invalid_vector(template, randbool(0.2), randbool(0.2), randbool(0.2))\n+            if random.randint(0,10)<1: # line corruption\n+                if randbool(): # add random character to end\n+                    val += random.choice(b58chars)\n+                else: # replace random character in the middle\n+                    n = random.randint(0, len(val))\n+                    val = val[0:n] + random.choice(b58chars) + val[n+1:]\n+            if not is_valid(val):\n+                yield val,\n+\n+if __name__ == '__main__':\n+    import sys, json\n+    iters = {'valid':gen_valid_vectors, 'invalid':gen_invalid_vectors}\n+    try:\n+        uiter = iters[sys.argv[1]]\n+    except IndexError:\n+        uiter = gen_valid_vectors\n+    try:\n+        count = int(sys.argv[2])\n+    except IndexError:\n+        count = 0\n+   \n+    data = list(islice(uiter(), count))\n+    json.dump(data, sys.stdout, sort_keys=True, indent=4)\n+    sys.stdout.write('\\n')\n+"
      },
      {
        "sha": "7602fa93a6abd777290117bf1b7ac8e1cf8a7908",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 236,
        "deletions": 64,
        "changes": 300,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -1,87 +1,259 @@\n #include <boost/test/unit_test.hpp>\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+#include \"json/json_spirit_utils.h\"\n \n #include \"base58.h\"\n+#include \"util.h\"\n+\n+using namespace json_spirit;\n+extern Array read_json(const std::string& filename);\n \n BOOST_AUTO_TEST_SUITE(base58_tests)\n \n-// TODO:\n-// EncodeBase58Check\n-// DecodeBase58Check\n-// CBase58Data\n-//    bool SetString(const char* psz)\n-    // bool SetString(const std::string& str)\n-    // std::string ToString() const\n-    // int CompareTo(const CBase58Data& b58) const\n-    // bool operator==(const CBase58Data& b58) const\n-    // bool operator<=(const CBase58Data& b58) const\n-    // bool operator>=(const CBase58Data& b58) const\n-    // bool operator< (const CBase58Data& b58) const\n-    // bool operator> (const CBase58Data& b58) const\n-\n-// CBitcoinAddress\n-    // bool SetHash160(const uint160& hash160)\n-    // bool SetPubKey(const std::vector<unsigned char>& vchPubKey)\n-    // bool IsValid() const\n-    // CBitcoinAddress()\n-    // CBitcoinAddress(uint160 hash160In)\n-    // CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n-    // CBitcoinAddress(const std::string& strAddress)\n-    // CBitcoinAddress(const char* pszAddress)\n-    // uint160 GetHash160() const\n-\n-#define U(x) (reinterpret_cast<const unsigned char*>(x))\n-static struct {\n-    const unsigned char *data;\n-    int size;\n-} vstrIn[] = {\n-{U(\"\"), 0},\n-{U(\"\\x61\"), 1},\n-{U(\"\\x62\\x62\\x62\"), 3},\n-{U(\"\\x63\\x63\\x63\"), 3},\n-{U(\"\\x73\\x69\\x6d\\x70\\x6c\\x79\\x20\\x61\\x20\\x6c\\x6f\\x6e\\x67\\x20\\x73\\x74\\x72\\x69\\x6e\\x67\"), 20},\n-{U(\"\\x00\\xeb\\x15\\x23\\x1d\\xfc\\xeb\\x60\\x92\\x58\\x86\\xb6\\x7d\\x06\\x52\\x99\\x92\\x59\\x15\\xae\\xb1\\x72\\xc0\\x66\\x47\"), 25},\n-{U(\"\\x51\\x6b\\x6f\\xcd\\x0f\"), 5},\n-{U(\"\\xbf\\x4f\\x89\\x00\\x1e\\x67\\x02\\x74\\xdd\"), 9},\n-{U(\"\\x57\\x2e\\x47\\x94\"), 4},\n-{U(\"\\xec\\xac\\x89\\xca\\xd9\\x39\\x23\\xc0\\x23\\x21\"), 10},\n-{U(\"\\x10\\xc8\\x51\\x1e\"), 4},\n-{U(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"), 10},\n+// Goal: test low-level base58 encoding functionality\n+BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n+{\n+    Array tests = read_json(\"base58_encode_decode.json\");\n+\n+    BOOST_FOREACH(Value& tv, tests)\n+    {\n+        Array test = tv.get_array();\n+        std::string strTest = write_string(tv, false);\n+        if (test.size() < 2) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n+        std::string base58string = test[1].get_str();\n+        BOOST_CHECK_MESSAGE(\n+                    EncodeBase58(&sourcedata[0], &sourcedata[sourcedata.size()]) == base58string,\n+                    strTest);\n+    }\n+}\n+\n+// Goal: test low-level base58 decoding functionality\n+BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n+{\n+    Array tests = read_json(\"base58_encode_decode.json\");\n+    std::vector<unsigned char> result;\n+\n+    BOOST_FOREACH(Value& tv, tests)\n+    {\n+        Array test = tv.get_array();\n+        std::string strTest = write_string(tv, false);\n+        if (test.size() < 2) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::vector<unsigned char> expected = ParseHex(test[0].get_str());\n+        std::string base58string = test[1].get_str();\n+        BOOST_CHECK_MESSAGE(DecodeBase58(base58string, result), strTest);\n+        BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n+    }\n+\n+    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n+}\n+\n+// Visitor to check address type\n+class TestAddrTypeVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    std::string exp_addrType;\n+public:\n+    TestAddrTypeVisitor(const std::string &exp_addrType) : exp_addrType(exp_addrType) { }\n+    bool operator()(const CKeyID &id) const\n+    {\n+        return (exp_addrType == \"pubkey\");\n+    }\n+    bool operator()(const CScriptID &id) const\n+    {\n+        return (exp_addrType == \"script\");\n+    }\n+    bool operator()(const CNoDestination &no) const\n+    {\n+        return (exp_addrType == \"none\");\n+    }\n };\n \n-const char *vstrOut[] = {\n-\"\",\n-\"2g\",\n-\"a3gV\",\n-\"aPEr\",\n-\"2cFupjhnEsSn59qHXstmK2ffpLv2\",\n-\"1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L\",\n-\"ABnLTmg\",\n-\"3SEo3LWLoPntC\",\n-\"3EFU7m\",\n-\"EJDM8drfXA6uyA\",\n-\"Rt5zm\",\n-\"1111111111\"\n+// Visitor to check address payload\n+class TestPayloadVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    std::vector<unsigned char> exp_payload;\n+public:\n+    TestPayloadVisitor(std::vector<unsigned char> &exp_payload) : exp_payload(exp_payload) { }\n+    bool operator()(const CKeyID &id) const\n+    {\n+        uint160 exp_key(exp_payload);\n+        return exp_key == id;\n+    }\n+    bool operator()(const CScriptID &id) const\n+    {\n+        uint160 exp_key(exp_payload);\n+        return exp_key == id;\n+    }\n+    bool operator()(const CNoDestination &no) const\n+    {\n+        return exp_payload.size() == 0;\n+    }\n };\n \n-BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n+// Goal: check that parsed keys match test payload\n+BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    Array tests = read_json(\"base58_keys_valid.json\");\n+    std::vector<unsigned char> result;\n+    CBitcoinSecret secret;\n+    CBitcoinAddress addr;\n+    // Save global state\n+    bool fTestNet_stored = fTestNet;\n+\n+    BOOST_FOREACH(Value& tv, tests)\n     {\n-        BOOST_CHECK_EQUAL(EncodeBase58(vstrIn[i].data, vstrIn[i].data + vstrIn[i].size), vstrOut[i]);\n+        Array test = tv.get_array();\n+        std::string strTest = write_string(tv, false);\n+        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const Object &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+        fTestNet = isTestnet; // Override testnet flag\n+        if(isPrivkey)\n+        {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            // Must be valid private key\n+            // Note: CBitcoinSecret::SetString tests isValid, whereas CBitcoinAddress does not!\n+            BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n+            BOOST_CHECK_MESSAGE(secret.IsValid(), \"!IsValid:\" + strTest);\n+            bool fCompressedOut = false;\n+            CSecret privkey = secret.GetSecret(fCompressedOut);\n+            BOOST_CHECK_MESSAGE(fCompressedOut == isCompressed, \"compressed mismatch:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n+\n+            // Private key must be invalid public key\n+            addr.SetString(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!addr.IsValid(), \"IsValid privkey as pubkey:\" + strTest);\n+        }\n+        else\n+        {\n+            std::string exp_addrType = find_value(metadata, \"addrType\").get_str(); // \"script\" or \"pubkey\"\n+            // Must be valid public key\n+            BOOST_CHECK_MESSAGE(addr.SetString(exp_base58string), \"SetString:\" + strTest);\n+            BOOST_CHECK_MESSAGE(addr.IsValid(), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_MESSAGE(addr.IsScript() == (exp_addrType == \"script\"), \"isScript mismatch\" + strTest);\n+            CTxDestination dest = addr.Get();\n+            BOOST_CHECK_MESSAGE(boost::apply_visitor(TestAddrTypeVisitor(exp_addrType), dest), \"addrType mismatch\" + strTest);\n+\n+            // Public key must be invalid private key\n+            secret.SetString(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+        }\n     }\n+    // Restore global state\n+    fTestNet = fTestNet_stored;\n }\n \n-BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n+// Goal: check that generated keys match test vectors\n+BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n+    Array tests = read_json(\"base58_keys_valid.json\");\n     std::vector<unsigned char> result;\n-    for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n+    // Save global state\n+    bool fTestNet_stored = fTestNet;\n+\n+    BOOST_FOREACH(Value& tv, tests)\n     {\n-        std::vector<unsigned char> expected(vstrIn[i].data, vstrIn[i].data + vstrIn[i].size);\n-        BOOST_CHECK(DecodeBase58(vstrOut[i], result));\n-        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+        Array test = tv.get_array();\n+        std::string strTest = write_string(tv, false);\n+        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const Object &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n+        fTestNet = isTestnet; // Override testnet flag\n+        if(isPrivkey)\n+        {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            CBitcoinSecret secret;\n+            secret.SetSecret(CSecret(exp_payload.begin(), exp_payload.end()), isCompressed);\n+            BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n+        }\n+        else\n+        {\n+            std::string exp_addrType = find_value(metadata, \"addrType\").get_str();\n+            CTxDestination dest;\n+            if(exp_addrType == \"pubkey\")\n+            {\n+                dest = CKeyID(uint160(exp_payload));\n+            }\n+            else if(exp_addrType == \"script\")\n+            {\n+                dest = CScriptID(uint160(exp_payload));\n+            }\n+            else if(exp_addrType == \"none\")\n+            {\n+                dest = CNoDestination();\n+            }\n+            else\n+            {\n+                BOOST_ERROR(\"Bad addrtype: \" << strTest);\n+                continue;\n+            }\n+            CBitcoinAddress addrOut;\n+            BOOST_CHECK_MESSAGE(boost::apply_visitor(CBitcoinAddressVisitor(&addrOut), dest), \"encode dest: \" + strTest);\n+            BOOST_CHECK_MESSAGE(addrOut.ToString() == exp_base58string, \"mismatch: \" + strTest);\n+        }\n+    }\n+\n+    // Visiting a CNoDestination must fail\n+    CBitcoinAddress dummyAddr;\n+    CTxDestination nodest = CNoDestination();\n+    BOOST_CHECK(!boost::apply_visitor(CBitcoinAddressVisitor(&dummyAddr), nodest));\n+\n+    // Restore global state\n+    fTestNet = fTestNet_stored;\n+}\n+\n+// Goal: check that base58 parsing code is robust against a variety of corrupted data\n+BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n+{\n+    Array tests = read_json(\"base58_keys_invalid.json\"); // Negative testcases\n+    std::vector<unsigned char> result;\n+    CBitcoinSecret secret;\n+    CBitcoinAddress addr;\n+\n+    BOOST_FOREACH(Value& tv, tests)\n+    {\n+        Array test = tv.get_array();\n+        std::string strTest = write_string(tv, false);\n+        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+\n+        // must be invalid as public and as private key\n+        addr.SetString(exp_base58string);\n+        BOOST_CHECK_MESSAGE(!addr.IsValid(), \"IsValid pubkey:\" + strTest);\n+        secret.SetString(exp_base58string);\n+        BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey:\" + strTest);\n     }\n-    BOOST_CHECK(!DecodeBase58(\"invalid\", result));\n }\n \n+\n BOOST_AUTO_TEST_SUITE_END()\n "
      },
      {
        "sha": "9448f256d944d27aa7735e00ab583b447302aef2",
        "filename": "src/test/data/base58_encode_decode.json",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_encode_decode.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_encode_decode.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_encode_decode.json?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1,14 @@\n+[\n+[\"\", \"\"],\n+[\"61\", \"2g\"],\n+[\"626262\", \"a3gV\"],\n+[\"636363\", \"aPEr\"],\n+[\"73696d706c792061206c6f6e6720737472696e67\", \"2cFupjhnEsSn59qHXstmK2ffpLv2\"],\n+[\"00eb15231dfceb60925886b67d065299925915aeb172c06647\", \"1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L\"],\n+[\"516b6fcd0f\", \"ABnLTmg\"],\n+[\"bf4f89001e670274dd\", \"3SEo3LWLoPntC\"],\n+[\"572e4794\", \"3EFU7m\"],\n+[\"ecac89cad93923c02321\", \"EJDM8drfXA6uyA\"],\n+[\"10c8511e\", \"Rt5zm\"],\n+[\"00000000000000000000\", \"1111111111\"]\n+]"
      },
      {
        "sha": "a088620f1b545d308709e7cc0e729555bc174e77",
        "filename": "src/test/data/base58_keys_invalid.json",
        "status": "added",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_keys_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_keys_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_invalid.json?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1,152 @@\n+[\n+    [\n+        \"\"\n+    ], \n+    [\n+        \"x\"\n+    ], \n+    [\n+        \"37qgekLpCCHrQuSjvX3fs496FWTGsHFHizjJAs6NPcR47aefnnCWECAhHV6E3g4YN7u7Yuwod5Y\"\n+    ], \n+    [\n+        \"dzb7VV1Ui55BARxv7ATxAtCUeJsANKovDGWFVgpTbhq9gvPqP3yv\"\n+    ], \n+    [\n+        \"MuNu7ZAEDFiHthiunm7dPjwKqrVNCM3mAz6rP9zFveQu14YA8CxExSJTHcVP9DErn6u84E6Ej7S\"\n+    ], \n+    [\n+        \"rPpQpYknyNQ5AEHuY6H8ijJJrYc2nDKKk9jjmKEXsWzyAQcFGpDLU2Zvsmoi8JLR7hAwoy3RQWf\"\n+    ], \n+    [\n+        \"4Uc3FmN6NQ6zLBK5QQBXRBUREaaHwCZYsGCueHauuDmJpZKn6jkEskMB2Zi2CNgtb5r6epWEFfUJq\"\n+    ], \n+    [\n+        \"7aQgR5DFQ25vyXmqZAWmnVCjL3PkBcdVkBUpjrjMTcghHx3E8wb\"\n+    ], \n+    [\n+        \"17QpPprjeg69fW1DV8DcYYCKvWjYhXvWkov6MJ1iTTvMFj6weAqW7wybZeH57WTNxXVCRH4veVs\"\n+    ], \n+    [\n+        \"KxuACDviz8Xvpn1xAh9MfopySZNuyajYMZWz16Dv2mHHryznWUp3\"\n+    ], \n+    [\n+        \"7nK3GSmqdXJQtdohvGfJ7KsSmn3TmGqExug49583bDAL91pVSGq5xS9SHoAYL3Wv3ijKTit65th\"\n+    ], \n+    [\n+        \"cTivdBmq7bay3RFGEBBuNfMh2P1pDCgRYN2Wbxmgwr4ki3jNUL2va\"\n+    ], \n+    [\n+        \"gjMV4vjNjyMrna4fsAr8bWxAbwtmMUBXJS3zL4NJt5qjozpbQLmAfK1uA3CquSqsZQMpoD1g2nk\"\n+    ], \n+    [\n+        \"emXm1naBMoVzPjbk7xpeTVMFy4oDEe25UmoyGgKEB1gGWsK8kRGs\"\n+    ], \n+    [\n+        \"7VThQnNRj1o3Zyvc7XHPRrjDf8j2oivPTeDXnRPYWeYGE4pXeRJDZgf28ppti5hsHWXS2GSobdqyo\"\n+    ], \n+    [\n+        \"1G9u6oCVCPh2o8m3t55ACiYvG1y5BHewUkDSdiQarDcYXXhFHYdzMdYfUAhfxn5vNZBwpgUNpso\"\n+    ], \n+    [\n+        \"31QQ7ZMLkScDiB4VyZjuptr7AEc9j1SjstF7pRoLhHTGkW4Q2y9XELobQmhhWxeRvqcukGd1XCq\"\n+    ], \n+    [\n+        \"DHqKSnpxa8ZdQyH8keAhvLTrfkyBMQxqngcQA5N8LQ9KVt25kmGN\"\n+    ], \n+    [\n+        \"2LUHcJPbwLCy9GLH1qXmfmAwvadWw4bp4PCpDfduLqV17s6iDcy1imUwhQJhAoNoN1XNmweiJP4i\"\n+    ], \n+    [\n+        \"7USRzBXAnmck8fX9HmW7RAb4qt92VFX6soCnts9s74wxm4gguVhtG5of8fZGbNPJA83irHVY6bCos\"\n+    ], \n+    [\n+        \"1DGezo7BfVebZxAbNT3XGujdeHyNNBF3vnficYoTSp4PfK2QaML9bHzAMxke3wdKdHYWmsMTJVu\"\n+    ], \n+    [\n+        \"2D12DqDZKwCxxkzs1ZATJWvgJGhQ4cFi3WrizQ5zLAyhN5HxuAJ1yMYaJp8GuYsTLLxTAz6otCfb\"\n+    ], \n+    [\n+        \"8AFJzuTujXjw1Z6M3fWhQ1ujDW7zsV4ePeVjVo7D1egERqSW9nZ\"\n+    ], \n+    [\n+        \"163Q17qLbTCue8YY3AvjpUhotuaodLm2uqMhpYirsKjVqnxJRWTEoywMVY3NbBAHuhAJ2cF9GAZ\"\n+    ], \n+    [\n+        \"2MnmgiRH4eGLyLc9eAqStzk7dFgBjFtUCtu\"\n+    ], \n+    [\n+        \"461QQ2sYWxU7H2PV4oBwJGNch8XVTYYbZxU\"\n+    ], \n+    [\n+        \"2UCtv53VttmQYkVU4VMtXB31REvQg4ABzs41AEKZ8UcB7DAfVzdkV9JDErwGwyj5AUHLkmgZeobs\"\n+    ], \n+    [\n+        \"cSNjAsnhgtiFMi6MtfvgscMB2Cbhn2v1FUYfviJ1CdjfidvmeW6mn\"\n+    ], \n+    [\n+        \"gmsow2Y6EWAFDFE1CE4Hd3Tpu2BvfmBfG1SXsuRARbnt1WjkZnFh1qGTiptWWbjsq2Q6qvpgJVj\"\n+    ], \n+    [\n+        \"nksUKSkzS76v8EsSgozXGMoQFiCoCHzCVajFKAXqzK5on9ZJYVHMD5CKwgmX3S3c7M1U3xabUny\"\n+    ], \n+    [\n+        \"L3favK1UzFGgdzYBF2oBT5tbayCo4vtVBLJhg2iYuMeePxWG8SQc\"\n+    ], \n+    [\n+        \"7VxLxGGtYT6N99GdEfi6xz56xdQ8nP2dG1CavuXx7Rf2PrvNMTBNevjkfgs9JmkcGm6EXpj8ipyPZ\"\n+    ], \n+    [\n+        \"2mbZwFXF6cxShaCo2czTRB62WTx9LxhTtpP\"\n+    ], \n+    [\n+        \"dB7cwYdcPSgiyAwKWL3JwCVwSk6epU2txw\"\n+    ], \n+    [\n+        \"HPhFUhUAh8ZQQisH8QQWafAxtQYju3SFTX\"\n+    ], \n+    [\n+        \"4ctAH6AkHzq5ioiM1m9T3E2hiYEev5mTsB\"\n+    ], \n+    [\n+        \"Hn1uFi4dNexWrqARpjMqgT6cX1UsNPuV3cHdGg9ExyXw8HTKadbktRDtdeVmY3M1BxJStiL4vjJ\"\n+    ], \n+    [\n+        \"Sq3fDbvutABmnAHHExJDgPLQn44KnNC7UsXuT7KZecpaYDMU9Txs\"\n+    ], \n+    [\n+        \"6TqWyrqdgUEYDQU1aChMuFMMEimHX44qHFzCUgGfqxGgZNMUVWJ\"\n+    ], \n+    [\n+        \"giqJo7oWqFxNKWyrgcBxAVHXnjJ1t6cGoEffce5Y1y7u649Noj5wJ4mmiUAKEVVrYAGg2KPB3Y4\"\n+    ], \n+    [\n+        \"cNzHY5e8vcmM3QVJUcjCyiKMYfeYvyueq5qCMV3kqcySoLyGLYUK\"\n+    ], \n+    [\n+        \"37uTe568EYc9WLoHEd9jXEvUiWbq5LFLscNyqvAzLU5vBArUJA6eydkLmnMwJDjkL5kXc2VK7ig\"\n+    ], \n+    [\n+        \"EsYbG4tWWWY45G31nox838qNdzksbPySWc\"\n+    ], \n+    [\n+        \"nbuzhfwMoNzA3PaFnyLcRxE9bTJPDkjZ6Rf6Y6o2ckXZfzZzXBT\"\n+    ], \n+    [\n+        \"cQN9PoxZeCWK1x56xnz6QYAsvR11XAce3Ehp3gMUdfSQ53Y2mPzx\"\n+    ], \n+    [\n+        \"1Gm3N3rkef6iMbx4voBzaxtXcmmiMTqZPhcuAepRzYUJQW4qRpEnHvMojzof42hjFRf8PE2jPde\"\n+    ], \n+    [\n+        \"2TAq2tuN6x6m233bpT7yqdYQPELdTDJn1eU\"\n+    ], \n+    [\n+        \"ntEtnnGhqPii4joABvBtSEJG6BxjT2tUZqE8PcVYgk3RHpgxgHDCQxNbLJf7ardf1dDk2oCQ7Cf\"\n+    ], \n+    [\n+        \"Ky1YjoZNgQ196HJV3HpdkecfhRBmRZdMJk89Hi5KGfpfPwS2bUbfd\"\n+    ], \n+    [\n+        \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n+    ]\n+]"
      },
      {
        "sha": "e1e252e22d1dcb5800227fb71f0a2cb9337c8e7b",
        "filename": "src/test/data/base58_keys_valid.json",
        "status": "added",
        "additions": 452,
        "deletions": 0,
        "changes": 452,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_keys_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b13283d19b3229ec1aee62bf7b4747c581ddab/src/test/data/base58_keys_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/base58_keys_valid.json?ref=d6b13283d19b3229ec1aee62bf7b4747c581ddab",
        "patch": "@@ -0,0 +1,452 @@\n+[\n+    [\n+        \"1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i\", \n+        \"65a16059864a2fdbc7c99a4723a8395bc6f188eb\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou\", \n+        \"74f209f6ea907e2ea48f74fae05782ae8a665257\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs\", \n+        \"53c0307d6851aa0ce7825ba883c6bd9ad242b486\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br\", \n+        \"6349a418fc4578d10a372b54b45c280cc8c4382f\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr\", \n+        \"eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD\", \n+        \"55c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c4\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko\", \n+        \"36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH\", \n+        \"b9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f3\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ\", \n+        \"6d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy\", \n+        \"fcc5460dd6e2487c7d75b1963625da0e8f4c5975\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ\", \n+        \"f1d470f9b02370fdec2e6b708b08ac431bf7a5f7\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n\", \n+        \"c579342c2c4c9220205e2cdc285617040c924a0a\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc\", \n+        \"a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi\", \n+        \"7d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb4\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj\", \n+        \"d6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN\", \n+        \"a81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d9\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv\", \n+        \"7987ccaa53d02c8873487ef919677cd3db7a6912\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks\", \n+        \"63bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk\", \n+        \"ef66444b5b17f14e8fae6e7e19b045a78c54fd79\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2NB72XtkjpnATMggui83aEtPawyyKvnbX2o\", \n+        \"c3e55fceceaa4391ed2a9677f4a4d34eacd021a0\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9\", \n+        \"e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT\", \n+        \"8248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo\", \n+        \"44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7\", \n+        \"d1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c69\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu\", \n+        \"adc1cc2081a27206fae25792f28bbc55b831549d\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk\", \n+        \"188f91a931947eddd7432d6e614387e32b244709\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H\", \n+        \"1694f5bc1a7295b600f40018a618a6ea48eeb498\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN\", \n+        \"3b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR\", \n+        \"091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8\", \n+        \"ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq\", \n+        \"b4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA\", \n+        \"e7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4\", \n+        \"c4c1b72491ede1eedaca00618407ee0b772cad0d\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y\", \n+        \"f6fe69bcb548a829cce4c57bf6fff8af3a5981f9\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6\", \n+        \"261f83568a098a8638844bd7aeca039d5f2352c0\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda\", \n+        \"e930e1834a4d234702773951d627cce82fbb5d2e\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg\", \n+        \"d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi\", \n+        \"b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b3\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys\", \n+        \"037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw\", \n+        \"6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r\", \n+        \"5eadaf9bb7121f0f192561a5a62f5e5f54210292\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3\", \n+        \"3f210e7277c899c3a155cc1c90f4106cbddeec6e\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"myoqcgYiehufrsnnkqdqbp69dddVDMopJu\", \n+        \"c8a3c2a09a298592c3e180f02487cd91ba3400b5\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C\", \n+        \"99b31df7c9068d1481b596578ddbb4d3bd90baeb\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4\", \n+        \"c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2\", \n+        \"07f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV\", \n+        \"ea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801\", \n+        {\n+            \"isCompressed\": false, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h\", \n+        \"0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c\", \n+        {\n+            \"isCompressed\": true, \n+            \"isPrivkey\": true, \n+            \"isTestnet\": true\n+        }\n+    ], \n+    [\n+        \"13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE\", \n+        \"1ed467017f043e91ed4c44b4e8dd674db211c4e6\", \n+        {\n+            \"addrType\": \"pubkey\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ], \n+    [\n+        \"3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G\", \n+        \"5ece0cadddc415b1980f001785947120acdb36fc\", \n+        {\n+            \"addrType\": \"script\", \n+            \"isPrivkey\": false, \n+            \"isTestnet\": false\n+        }\n+    ]\n+]"
      }
    ]
  }
]