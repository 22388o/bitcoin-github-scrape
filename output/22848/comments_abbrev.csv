DrahtBot,2021-09-01 07:19:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22762](https://github.com/bitcoin/bitcoin/pull/22762) (Raise InitError when peers.dat is invalid or corrupted by MarcoFa",https://github.com/bitcoin/bitcoin/pull/22848#issuecomment-910000024,910000024,
ryanofsky,2021-09-03 15:38:27,"Rebased b3f46e9058cfdcb2825ea76ed7d5d3c060486a39 -> 19b23cf07636a87e5eb0742d52e5a8b6a7e53ce6 ([`pr/ipc-banmap.1`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-banmap.1) -> [`pr/ipc-banmap.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-banmap.2), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-banmap.1-rebase..pr/ipc-banmap.2)) due to conflict with #22849",https://github.com/bitcoin/bitcoin/pull/22848#issuecomment-912628944,912628944,
ryanofsky,2021-09-03 17:32:28,"Updated 19b23cf07636a87e5eb0742d52e5a8b6a7e53ce6 -> 6919c823cbce92248647880fb1d912828449ae57 ([`pr/ipc-banmap.2`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-banmap.2) -> [`pr/ipc-banmap.3`](https://github.com/ryanofsky/bitcoin/commits/pr/ipc-banmap.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/ipc-banmap.2..pr/ipc-banmap.3)) tweaking include",https://github.com/bitcoin/bitcoin/pull/22848#issuecomment-912697916,912697916,
MarcoFalke,2021-09-03 15:43:21,why?,https://github.com/bitcoin/bitcoin/pull/22848#discussion_r701997262,701997262,src/net_types.h
ryanofsky,2021-09-03 15:46:18,"> why?\n\nI must have added it to avoid compile errors before #22849. Probably wasn't the right place to add the include in any case, though. Will remove",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r702000182,702000182,src/net_types.h
vasild,2021-09-06 08:46:05,"Any reason not to use `#include <univalue.h>` here instead of `class UniValue;` (there is no circular dependency in this case)?\n\nI think by default it should be preferred to include the header instead of doing the forward declaration. And if the forward declaration is really necessary (e.g. circular dependency, compilation speed concerns) then that should be in its own header that is included ",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r702719863,702719863,src/net_types.h
ryanofsky,2021-09-07 14:40:10,"> Any reason not to use `#include <univalue.h>` here instead of `class UniValue;` (there is no circular dependency in this case)?\n> \n> I think by default it should be preferred to include the header instead of doing the forward declaration. And if the forward declaration is really necessary (e.g. circular dependency, compilation speed concerns) then that should be in its own header that is inc",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r703573706,703573706,src/net_types.h
MarcoFalke,2021-09-07 14:53:09,"I think our compile requirements (both time and space) are still too high. Even if all of the heavy boost was removed, we'd still have our own heavy serialize which is included ~everywhere and thus parsed and compiled each time, even if it isn't used. I agree with Russ that  includes should be kept at a minimum (iwyu) and forward decls are acceptable as well. It would be nice if iwyu  (or somethin",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r703585610,703585610,src/net_types.h
vasild,2021-09-09 10:29:54,"Alright, https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md#why-forward-declare mentions some pros and cons of forward declarations and also a workaround of the cons - a 'forwarding headers'.\n\nWhat about this: https://google.github.io/styleguide/cppguide.html#Forward_Declarations\n> * Forward declarations can hide a dependency, allowing user code to skip ",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r705200466,705200466,src/net_types.h
ryanofsky,2021-09-09 11:26:15,"> * Forward declarations can hide a dependency, allowing user code to skip necessary recompilation when headers change.\n> * ... Replacing an #include with a forward declaration can silently change the meaning of code ...\n> \n> I think each one of those two is very nasty on its own.\n\nThe first one would just result in link errors instead of compile errors. Not especially nasty as far as I ",https://github.com/bitcoin/bitcoin/pull/22848#discussion_r705237337,705237337,src/net_types.h
