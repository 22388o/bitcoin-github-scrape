[
  {
    "sha": "6919c823cbce92248647880fb1d912828449ae57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTE5YzgyM2NiY2U5MjI0ODY0Nzg4MGZiMWQ5MTI4Mjg0NDlhZTU3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-31T13:59:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-03T09:21:58Z"
      },
      "message": "MOVEONLY: Expose BanMapToJson / BanMapFromJson\n\nCSubNet serialization code that was removed in\nfa4e6afdae7b82df638b60edf37ac36d57a8cb4f was needed by multiprocess code\nto share ban map between gui and node processes.\n\nRather than adding it back, use suggestion from MarcoFalke\n<falke.marco@gmail.com>\nhttps://github.com/bitcoin/bitcoin/pull/10102#discussion_r690922929 to\nuse JSON serialization. This requires making BanMapToJson /\nBanMapFromJson functions public.",
      "tree": {
        "sha": "a19e26393ec7bffde4f3c86289e1dfd52863203a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a19e26393ec7bffde4f3c86289e1dfd52863203a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6919c823cbce92248647880fb1d912828449ae57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6919c823cbce92248647880fb1d912828449ae57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6919c823cbce92248647880fb1d912828449ae57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6919c823cbce92248647880fb1d912828449ae57/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "629c4ab2e31325614c5b5bb9636705dde4659bb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/629c4ab2e31325614c5b5bb9636705dde4659bb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/629c4ab2e31325614c5b5bb9636705dde4659bb3"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 112,
      "deletions": 85
    },
    "files": [
      {
        "sha": "6f8245de8a0e6e48919748268e666f01845385e9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6919c823cbce92248647880fb1d912828449ae57/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6919c823cbce92248647880fb1d912828449ae57/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6919c823cbce92248647880fb1d912828449ae57",
        "patch": "@@ -548,6 +548,7 @@ libbitcoin_common_a_SOURCES = \\\n   key.cpp \\\n   key_io.cpp \\\n   merkleblock.cpp \\\n+  net_types.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\"
      },
      {
        "sha": "345dbdfb1648f3e95381f655640750822e058906",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 57,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6919c823cbce92248647880fb1d912828449ae57/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6919c823cbce92248647880fb1d912828449ae57/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=6919c823cbce92248647880fb1d912828449ae57",
        "patch": "@@ -19,64 +19,7 @@\n #include <util/settings.h>\n #include <util/system.h>\n \n-CBanEntry::CBanEntry(const UniValue& json)\n-    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n-      nBanUntil(json[\"banned_until\"].get_int64())\n-{\n-}\n-\n-UniValue CBanEntry::ToJson() const\n-{\n-    UniValue json(UniValue::VOBJ);\n-    json.pushKV(\"version\", nVersion);\n-    json.pushKV(\"ban_created\", nCreateTime);\n-    json.pushKV(\"banned_until\", nBanUntil);\n-    return json;\n-}\n-\n namespace {\n-\n-static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n-\n-/**\n- * Convert a `banmap_t` object to a JSON array.\n- * @param[in] bans Bans list to convert.\n- * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n- * passing to `BanMapFromJson()`.\n- */\n-UniValue BanMapToJson(const banmap_t& bans)\n-{\n-    UniValue bans_json(UniValue::VARR);\n-    for (const auto& it : bans) {\n-        const auto& address = it.first;\n-        const auto& ban_entry = it.second;\n-        UniValue j = ban_entry.ToJson();\n-        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n-        bans_json.push_back(j);\n-    }\n-    return bans_json;\n-}\n-\n-/**\n- * Convert a JSON array to a `banmap_t` object.\n- * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n- * @param[out] bans Bans list to create from the JSON.\n- * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n- * unparsable values.\n- */\n-void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n-{\n-    for (const auto& ban_entry_json : bans_json.getValues()) {\n-        CSubNet subnet;\n-        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n-        if (!LookupSubNet(subnet_str, subnet)) {\n-            throw std::runtime_error(\n-                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n-        }\n-        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n-    }\n-}\n-\n template <typename Stream, typename Data>\n bool SerializeDB(Stream& stream, const Data& data)\n {"
      },
      {
        "sha": "26b1c5880fa2b38b1b99793d743998f48af9166e",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6919c823cbce92248647880fb1d912828449ae57/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6919c823cbce92248647880fb1d912828449ae57/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=6919c823cbce92248647880fb1d912828449ae57",
        "patch": "@@ -16,33 +16,6 @@ class CAddress;\n class CAddrMan;\n class CDataStream;\n \n-class CBanEntry\n-{\n-public:\n-    static constexpr int CURRENT_VERSION{1};\n-    int nVersion{CBanEntry::CURRENT_VERSION};\n-    int64_t nCreateTime{0};\n-    int64_t nBanUntil{0};\n-\n-    CBanEntry() {}\n-\n-    explicit CBanEntry(int64_t nCreateTimeIn)\n-        : nCreateTime{nCreateTimeIn} {}\n-\n-    /**\n-     * Create a ban entry from JSON.\n-     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n-     * @throw std::runtime_error if the JSON does not have the expected fields.\n-     */\n-    explicit CBanEntry(const UniValue& json);\n-\n-    /**\n-     * Generate a JSON representation of this ban entry.\n-     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n-     */\n-    UniValue ToJson() const;\n-};\n-\n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB\n {"
      },
      {
        "sha": "c8f57fe6c644acc7ddef5f47de83486d4ae1a19e",
        "filename": "src/net_types.cpp",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6919c823cbce92248647880fb1d912828449ae57/src/net_types.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6919c823cbce92248647880fb1d912828449ae57/src/net_types.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_types.cpp?ref=6919c823cbce92248647880fb1d912828449ae57",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <net_types.h>\n+\n+#include <netaddress.h>\n+#include <netbase.h>\n+#include <univalue.h>\n+\n+CBanEntry::CBanEntry(const UniValue& json)\n+    : nVersion(json[\"version\"].get_int()), nCreateTime(json[\"ban_created\"].get_int64()),\n+      nBanUntil(json[\"banned_until\"].get_int64())\n+{\n+}\n+\n+UniValue CBanEntry::ToJson() const\n+{\n+    UniValue json(UniValue::VOBJ);\n+    json.pushKV(\"version\", nVersion);\n+    json.pushKV(\"ban_created\", nCreateTime);\n+    json.pushKV(\"banned_until\", nBanUntil);\n+    return json;\n+}\n+\n+static const char* BANMAN_JSON_ADDR_KEY = \"address\";\n+\n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans)\n+{\n+    UniValue bans_json(UniValue::VARR);\n+    for (const auto& it : bans) {\n+        const auto& address = it.first;\n+        const auto& ban_entry = it.second;\n+        UniValue j = ban_entry.ToJson();\n+        j.pushKV(BANMAN_JSON_ADDR_KEY, address.ToString());\n+        bans_json.push_back(j);\n+    }\n+    return bans_json;\n+}\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans)\n+{\n+    for (const auto& ban_entry_json : bans_json.getValues()) {\n+        CSubNet subnet;\n+        const auto& subnet_str = ban_entry_json[BANMAN_JSON_ADDR_KEY].get_str();\n+        if (!LookupSubNet(subnet_str, subnet)) {\n+            throw std::runtime_error(\n+                strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+        }\n+        bans.insert_or_assign(subnet, CBanEntry{ban_entry_json});\n+    }\n+}"
      },
      {
        "sha": "ffdc24c772959045b93f94471017bc7741af2169",
        "filename": "src/net_types.h",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6919c823cbce92248647880fb1d912828449ae57/src/net_types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6919c823cbce92248647880fb1d912828449ae57/src/net_types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_types.h?ref=6919c823cbce92248647880fb1d912828449ae57",
        "patch": "@@ -5,11 +5,56 @@\n #ifndef BITCOIN_NET_TYPES_H\n #define BITCOIN_NET_TYPES_H\n \n+#include <cstdint>\n #include <map>\n \n-class CBanEntry;\n class CSubNet;\n+class UniValue;\n+\n+class CBanEntry\n+{\n+public:\n+    static constexpr int CURRENT_VERSION{1};\n+    int nVersion{CBanEntry::CURRENT_VERSION};\n+    int64_t nCreateTime{0};\n+    int64_t nBanUntil{0};\n+\n+    CBanEntry() {}\n+\n+    explicit CBanEntry(int64_t nCreateTimeIn)\n+        : nCreateTime{nCreateTimeIn} {}\n+\n+    /**\n+     * Create a ban entry from JSON.\n+     * @param[in] json A JSON representation of a ban entry, as created by `ToJson()`.\n+     * @throw std::runtime_error if the JSON does not have the expected fields.\n+     */\n+    explicit CBanEntry(const UniValue& json);\n+\n+    /**\n+     * Generate a JSON representation of this ban entry.\n+     * @return JSON suitable for passing to the `CBanEntry(const UniValue&)` constructor.\n+     */\n+    UniValue ToJson() const;\n+};\n \n using banmap_t = std::map<CSubNet, CBanEntry>;\n \n+/**\n+ * Convert a `banmap_t` object to a JSON array.\n+ * @param[in] bans Bans list to convert.\n+ * @return a JSON array, similar to the one returned by the `listbanned` RPC. Suitable for\n+ * passing to `BanMapFromJson()`.\n+ */\n+UniValue BanMapToJson(const banmap_t& bans);\n+\n+/**\n+ * Convert a JSON array to a `banmap_t` object.\n+ * @param[in] bans_json JSON to convert, must be as returned by `BanMapToJson()`.\n+ * @param[out] bans Bans list to create from the JSON.\n+ * @throws std::runtime_error if the JSON does not have the expected fields or they contain\n+ * unparsable values.\n+ */\n+void BanMapFromJson(const UniValue& bans_json, banmap_t& bans);\n+\n #endif // BITCOIN_NET_TYPES_H"
      }
    ]
  }
]