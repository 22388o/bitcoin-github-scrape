[
  {
    "sha": "c84838e7afb7b084a56a75e98325563b6de83124",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODQ4MzhlN2FmYjdiMDg0YTU2YTc1ZTk4MzI1NTYzYjZkZTgzMTI0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-17T17:24:07Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-21T13:00:17Z"
      },
      "message": "contrib: binary verification script verify.sh rewritten in python",
      "tree": {
        "sha": "2421f3b6f2321ec952fb88e275b5d665c9356cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2421f3b6f2321ec952fb88e275b5d665c9356cdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c84838e7afb7b084a56a75e98325563b6de83124",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84838e7afb7b084a56a75e98325563b6de83124",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c84838e7afb7b084a56a75e98325563b6de83124",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84838e7afb7b084a56a75e98325563b6de83124/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "143bd108ed6626405b0361c9939a8e1bf6cfc3d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143bd108ed6626405b0361c9939a8e1bf6cfc3d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/143bd108ed6626405b0361c9939a8e1bf6cfc3d2"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 183,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b97ad11b8ec5e96bc8969e1fc332fc97397b2455",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "added",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84838e7afb7b084a56a75e98325563b6de83124/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84838e7afb7b084a56a75e98325563b6de83124/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=c84838e7afb7b084a56a75e98325563b6de83124",
        "patch": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+def main(args):\n+    # sanity check\n+    if len(args) < 1:\n+        print(\"Error: need to specify a version on the command line\")\n+        return 3\n+\n+    # determine remote dir dependend on provided version string\n+    version_base, version_rc, os_filter = parse_version_string(args[0])\n+    remote_dir = f\"/bin/{VERSIONPREFIX}{version_base}/\"\n+    if version_rc:\n+        remote_dir += f\"test.{version_rc}/\"\n+    remote_sigfile = remote_dir + SIGNATUREFILENAME\n+\n+    # create working directory\n+    os.makedirs(WORKINGDIR, exist_ok=True)\n+    os.chdir(WORKINGDIR)\n+\n+    # fetch first signature file\n+    sigfile1 = SIGNATUREFILENAME\n+    success, output = download_with_wget(HOST1 + remote_sigfile, sigfile1)\n+    if not success:\n+        print(\"Error: couldn't fetch signature file. \"\n+              \"Have you specified the version number in the following format?\")\n+        print(f\"[{VERSIONPREFIX}]<version>[-rc[0-9]][-platform] \"\n+              f\"(example: {VERSIONPREFIX}0.21.0-rc3-osx)\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        return 4\n+\n+    # fetch second signature file\n+    sigfile2 = SIGNATUREFILENAME + \".2\"\n+    success, output = download_with_wget(HOST2 + remote_sigfile, sigfile2)\n+    if not success:\n+        print(\"bitcoin.org failed to provide signature file, \"\n+              \"but bitcoincore.org did?\")\n+        print(\"wget output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1])\n+        return 5\n+\n+    # ensure that both signature files are equal\n+    if not files_are_equal(sigfile1, sigfile2):\n+        print(\"bitcoin.org and bitcoincore.org signature files were not equal?\")\n+        print(f\"See files {WORKINGDIR}/{sigfile1} and {WORKINGDIR}/{sigfile2}\")\n+        return 6\n+\n+    # check signature and extract data into file\n+    retval, output = verify_with_gpg(sigfile1, HASHFILE)\n+    if retval != 0:\n+        if retval == 1:\n+            print(\"Bad signature.\")\n+        elif retval == 2:\n+            print(\"gpg error. Do you have the Bitcoin Core binary release \"\n+                  \"signing key installed?\")\n+        print(\"gpg output:\")\n+        print(indent(output, '\\t'))\n+        remove_files([sigfile1, sigfile2, HASHFILE])\n+        return 1\n+\n+    # extract hashes/filenames of binaries to verify from hash file;\n+    # each line has the following format: \"<hash> <binary_filename>\"\n+    with open(HASHFILE, 'r', encoding='utf8') as hash_file:\n+        hashes_to_verify = [\n+            line.split()[:2] for line in hash_file if os_filter in line]\n+    remove_files([HASHFILE])\n+    if not hashes_to_verify:\n+        print(\"error: no files matched the platform specified\")\n+        return 7\n+\n+    # download binaries\n+    for _, binary_filename in hashes_to_verify:\n+        print(f\"Downloading {binary_filename}\")\n+        download_with_wget(HOST1 + remote_dir + binary_filename)\n+\n+    # verify hashes\n+    offending_files = []\n+    for hash_expected, binary_filename in hashes_to_verify:\n+        with open(binary_filename, 'rb') as binary_file:\n+            hash_calculated = sha256(binary_file.read()).hexdigest()\n+        if hash_calculated != hash_expected:\n+            offending_files.append(binary_filename)\n+    if offending_files:\n+        print(\"Hashes don't match.\")\n+        print(\"Offending files:\")\n+        print('\\n'.join(offending_files))\n+        return 1\n+    verified_binaries = [entry[1] for entry in hashes_to_verify]\n+\n+    # clean up files if desired\n+    if len(args) >= 2:\n+        print(\"Clean up the binaries\")\n+        remove_files([sigfile1, sigfile2] + verified_binaries)\n+    else:\n+        print(f\"Keep the binaries in {WORKINGDIR}\")\n+\n+    print(\"Verified hashes of\")\n+    print('\\n'.join(verified_binaries))\n+    return 0\n+\n+\n+if __name__ == '__main__':\n+    sys.exit(main(sys.argv[1:]))"
      }
    ]
  },
  {
    "sha": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODZiOWE2NWViMGQ2ZDFlNjU5NDE1ODgwNzAyYzRkYzg4OWMzNGU2",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-17T18:23:11Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-12-21T13:01:16Z"
      },
      "message": "contrib: remove verify.sh\n\nThis script has been replaced by verify.py.",
      "tree": {
        "sha": "ee33d15bd048bbe81e925267ddc1393a02e51342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee33d15bd048bbe81e925267ddc1393a02e51342"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c86b9a65eb0d6d1e659415880702c4dc889c34e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c86b9a65eb0d6d1e659415880702c4dc889c34e6/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c84838e7afb7b084a56a75e98325563b6de83124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84838e7afb7b084a56a75e98325563b6de83124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c84838e7afb7b084a56a75e98325563b6de83124"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 7,
      "deletions": 184
    },
    "files": [
      {
        "sha": "c50d4bef7151c4d3b0a56f57d8dc2418c1ee34ca",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c86b9a65eb0d6d1e659415880702c4dc889c34e6/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c86b9a65eb0d6d1e659415880702c4dc889c34e6/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=c86b9a65eb0d6d1e659415880702c4dc889c34e6",
        "patch": "@@ -21,21 +21,21 @@ The script returns 0 if everything passes the checks. It returns 1 if either the\n \n \n ```sh\n-./verify.sh bitcoin-core-0.11.2\n-./verify.sh bitcoin-core-0.12.0\n-./verify.sh bitcoin-core-0.13.0-rc3\n+./verify.py bitcoin-core-0.11.2\n+./verify.py bitcoin-core-0.12.0\n+./verify.py bitcoin-core-0.13.0-rc3\n ```\n \n If you only want to download the binaries of certain platform, add the corresponding suffix, e.g.:\n \n ```sh\n-./verify.sh bitcoin-core-0.11.2-osx\n-./verify.sh 0.12.0-linux\n-./verify.sh bitcoin-core-0.13.0-rc3-win64\n+./verify.py bitcoin-core-0.11.2-osx\n+./verify.py 0.12.0-linux\n+./verify.py bitcoin-core-0.13.0-rc3-win64\n ```\n \n If you do not want to keep the downloaded binaries, specify anything as the second parameter.\n \n ```sh\n-./verify.sh bitcoin-core-0.13.0 delete\n+./verify.py bitcoin-core-0.13.0 delete\n ```"
      },
      {
        "sha": "4296998631cff715d429c5b203c41b53f8e722e0",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 177,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84838e7afb7b084a56a75e98325563b6de83124/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84838e7afb7b084a56a75e98325563b6de83124/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=c84838e7afb7b084a56a75e98325563b6de83124",
        "patch": "@@ -1,177 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-###   This script attempts to download the signature file SHA256SUMS.asc from\n-###   bitcoincore.org and bitcoin.org and compares them.\n-###   It first checks if the signature passes, and then downloads the files specified in\n-###   the file, and checks if the hashes of these files match those that are specified\n-###   in the signature file.\n-###   The script returns 0 if everything passes the checks. It returns 1 if either the\n-###   signature check or the hash check doesn't pass. If an error occurs the return value is 2\n-\n-export LC_ALL=C\n-function clean_up {\n-   for file in \"$@\"\n-   do\n-      rm \"$file\" 2> /dev/null\n-   done\n-}\n-\n-WORKINGDIR=\"/tmp/bitcoin_verify_binaries\"\n-TMPFILE=\"hashes.tmp\"\n-\n-SIGNATUREFILENAME=\"SHA256SUMS.asc\"\n-RCSUBDIR=\"test\"\n-HOST1=\"https://bitcoincore.org\"\n-HOST2=\"https://bitcoin.org\"\n-BASEDIR=\"/bin/\"\n-VERSIONPREFIX=\"bitcoin-core-\"\n-RCVERSIONSTRING=\"rc\"\n-\n-if [ ! -d \"$WORKINGDIR\" ]; then\n-   mkdir \"$WORKINGDIR\"\n-fi\n-\n-cd \"$WORKINGDIR\" || exit 1\n-\n-#test if a version number has been passed as an argument\n-if [ -n \"$1\" ]; then\n-   #let's also check if the version number includes the prefix 'bitcoin-',\n-   #  and add this prefix if it doesn't\n-   if [[ $1 == \"$VERSIONPREFIX\"* ]]; then\n-      VERSION=\"$1\"\n-   else\n-      VERSION=\"$VERSIONPREFIX$1\"\n-   fi\n-\n-   STRIPPEDLAST=\"${VERSION%-*}\"\n-\n-   #now let's see if the version string contains \"rc\" or a platform name (e.g. \"osx\")\n-   if [[ \"$STRIPPEDLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-   else\n-      # let's examine the last part to see if it's rc and/or platform name\n-      STRIPPEDNEXTTOLAST=\"${STRIPPEDLAST%-*}\"\n-      if [[ \"$STRIPPEDNEXTTOLAST-\" == \"$VERSIONPREFIX\" ]]; then\n-\n-         LASTSUFFIX=\"${VERSION##*-}\"\n-         VERSION=\"$STRIPPEDLAST\"\n-\n-         if [[ $LASTSUFFIX == *\"$RCVERSIONSTRING\"* ]]; then\n-            RCVERSION=\"$LASTSUFFIX\"\n-         else\n-            PLATFORM=\"$LASTSUFFIX\"\n-         fi\n-\n-      else\n-         RCVERSION=\"${STRIPPEDLAST##*-}\"\n-         PLATFORM=\"${VERSION##*-}\"\n-\n-         VERSION=\"$STRIPPEDNEXTTOLAST\"\n-      fi\n-\n-      BASEDIR=\"$BASEDIR$VERSION/\"\n-      if [[ $RCVERSION == *\"$RCVERSIONSTRING\"* ]]; then\n-         BASEDIR=\"$BASEDIR$RCSUBDIR.$RCVERSION/\"\n-      fi\n-   fi\n-else\n-   echo \"Error: need to specify a version on the command line\"\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N \"$HOST1$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"Error: couldn't fetch signature file. Have you specified the version number in the following format?\"\n-   # shellcheck disable=SC1087\n-   echo \"[$VERSIONPREFIX]<version>-[$RCVERSIONSTRING[0-9]] (example: ${VERSIONPREFIX}0.10.4-${RCVERSIONSTRING}1)\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   exit 2\n-fi\n-\n-if ! WGETOUT=$(wget -N -O \"$SIGNATUREFILENAME.2\" \"$HOST2$BASEDIR$SIGNATUREFILENAME\" 2>&1); then\n-   echo \"bitcoin.org failed to provide signature file, but bitcoincore.org did?\"\n-   echo \"wget output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$WGETOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME\n-   exit 3\n-fi\n-\n-SIGFILEDIFFS=\"$(diff $SIGNATUREFILENAME $SIGNATUREFILENAME.2)\"\n-if [ \"$SIGFILEDIFFS\" != \"\" ]; then\n-   echo \"bitcoin.org and bitcoincore.org signature files were not equal?\"\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2\n-   exit 4\n-fi\n-\n-#then we check it\n-GPGOUT=$(gpg --yes --decrypt --output \"$TMPFILE\" \"$SIGNATUREFILENAME\" 2>&1)\n-\n-#return value 0: good signature\n-#return value 1: bad signature\n-#return value 2: gpg error\n-\n-RET=\"$?\"\n-if [ $RET -ne 0 ]; then\n-   if [ $RET -eq 1 ]; then\n-      #and notify the user if it's bad\n-      echo \"Bad signature.\"\n-   elif [ $RET -eq 2 ]; then\n-      #or if a gpg error has occurred\n-      echo \"gpg error. Do you have the Bitcoin Core binary release signing key installed?\"\n-   fi\n-\n-   echo \"gpg output:\"\n-   # shellcheck disable=SC2001\n-   echo \"$GPGOUT\"|sed 's/^/\\t/g'\n-   clean_up $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-   exit \"$RET\"\n-fi\n-\n-if [ -n \"$PLATFORM\" ]; then\n-   grep $PLATFORM $TMPFILE > \"$TMPFILE-plat\"\n-   TMPFILESIZE=$(stat -c%s \"$TMPFILE-plat\")\n-   if [ $TMPFILESIZE -eq 0 ]; then\n-      echo \"error: no files matched the platform specified\" && exit 3\n-   fi\n-   mv \"$TMPFILE-plat\" $TMPFILE\n-fi\n-\n-#here we extract the filenames from the signature file\n-FILES=$(awk '{print $2}' \"$TMPFILE\")\n-\n-#and download these one by one\n-for file in $FILES\n-do\n-   echo \"Downloading $file\"\n-   wget --quiet -N \"$HOST1$BASEDIR$file\"\n-done\n-\n-#check hashes\n-DIFF=$(diff <(sha256sum $FILES) \"$TMPFILE\")\n-\n-if [ $? -eq 1 ]; then\n-   echo \"Hashes don't match.\"\n-   echo \"Offending files:\"\n-   echo \"$DIFF\"|grep \"^<\"|awk '{print \"\\t\"$3}'\n-   exit 1\n-elif [ $? -gt 1 ]; then\n-   echo \"Error executing 'diff'\"\n-   exit 2\n-fi\n-\n-if [ -n \"$2\" ]; then\n-   echo \"Clean up the binaries\"\n-   clean_up $FILES $SIGNATUREFILENAME $SIGNATUREFILENAME.2 $TMPFILE\n-else\n-   echo \"Keep the binaries in $WORKINGDIR\"\n-   clean_up $TMPFILE\n-fi\n-\n-echo -e \"Verified hashes of \\n$FILES\"\n-\n-exit 0"
      }
    ]
  }
]