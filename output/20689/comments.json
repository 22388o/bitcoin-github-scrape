[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747656215",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-747656215",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 747656215,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0NzY1NjIxNQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-17T19:38:31Z",
    "updated_at": "2020-12-17T19:38:31Z",
    "author_association": "MEMBER",
    "body": "Concept ACK (modulo context / future plans for this script; I don't know).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/747656215/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748036735",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748036735",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748036735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODAzNjczNQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-18T11:31:54Z",
    "updated_at": "2020-12-18T11:34:47Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, I generally prefer python to shell code as things become more complex, I find it easier to review and structure. It also doesn't need to rely so much on tooling that happens to be scattered around the system (like your OS's [favorite command line sha256 hashers](https://github.com/bitcoin/bitcoin/blob/master/contrib/install_db4.sh#L32-L46)).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748036735/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748118062",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748118062",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748118062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODExODA2Mg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-18T14:38:06Z",
    "updated_at": "2020-12-18T14:38:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK on the general idea of replacing this shell script with a Python script.\r\n\r\nThe current version of the Python script shells out to `wget`, `gpg`, `grep`, `mv`, `diff` and `sha256sum`.\r\n\r\nAFAICT the only necessary external command that would be non-trivial to replace by using only what is supplied by the Python standard library is `gpg`.\r\n\r\nWould it be possible to re-write this script to make it shell out only to `gpg`?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748118062/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748269056",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748269056",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748269056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODI2OTA1Ng==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-18T19:12:21Z",
    "updated_at": "2020-12-18T19:12:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for all the conceptual reviews! I agree with the idea to reduce calls to external tools, if we move to a language that has 'batteries included' we should also use them to be more deterministic, robust and platform-independent.\r\n\r\n> It also doesn't need to rely so much on tooling that happens to be scattered around the system (like your OS's [favorite command line sha256 hashers](https://github.com/bitcoin/bitcoin/blob/master/contrib/install_db4.sh#L32-L46)).\r\n\r\nI didn't know it was that bad and not even `sha256sum` is available consistently across Linux and *BSDs \ud83d\udc40 \r\n\r\n> Would it be possible to re-write this script to make it shell out only to `gpg`?\r\n\r\nChallenge accepted :-)\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748269056/reactions",
      "total_count": 3,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748686395",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748686395",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748686395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODY4NjM5NQ==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-20T23:25:56Z",
    "updated_at": "2020-12-20T23:25:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "Force-pushed with the following changes, eliminating several external tool call (`subprocess.run`) instances, according to the reviewers suggestions:\r\n- replaced call to external `grep` and `mv` with simple manual filtering (we don't need the contents in a file anyways)\r\n- replaced call to external `sha256sum` with python's internal hashing (`hashlib.sha256`)\r\n- replaced call to external `diff` with a trivial comparison routine (new function `files_are_equal(...)`)\r\n\r\nFor now I decided to keep the call to `wget` for two reasons:\r\n1. we currently take advantage of its timestamping function (parameter `-N`, see https://linux.die.net/man/1/wget), that only downloads a file if both local and remote timestamp and size differ: \"_When running Wget with -N, with or without -r or -p, the decision as to whether or not to download a newer copy of a file depends on the local and remote timestamp and size of the file._\" This is useful for not needing to re-download binaries that are already there, and I don't think its worth it to implement a similar mechanism in the script.\r\n\r\n2. IMHO the verbose step-by-step-output in case of failure can be quite useful for diagnosing the problem, that would possibly be quite hard to get in the same detail level in python (w/o possibly catching lots of individual exceptions), e.g.:\r\n```\r\nwget output:\r\n        --2020-12-21 00:17:29--  https://bitcoincore.org/bin/bitcoin-core-0.20.0/test.rc23/SHA256SUMS.asc\r\n        Resolving bitcoincore.org (bitcoincore.org)... 198.251.83.116, 107.191.99.5\r\n        Connecting to bitcoincore.org (bitcoincore.org)|198.251.83.116|:443... connected.\r\n        HTTP request sent, awaiting response... 404 Not Found\r\n        2020-12-21 00:17:29 ERROR 404: Not Found.\r\n```\r\n\r\nSo the remaining external calls would be to `gpg` and `wget` right now. Happy though to also get rid of the latter one, if that is the general wish.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748686395/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748868668",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748868668",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748868668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODg2ODY2OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T09:23:10Z",
    "updated_at": "2020-12-21T09:31:28Z",
    "author_association": "MEMBER",
    "body": "I was thinking of this script yesterday during a [twitter thread](https://twitter.com/orionwl/status/1340286384867860482), and wondered if it would be useful to make it do verification against gitian deterministic build attestations. This would be more thorough than validating my signature. At the least rewriting it in Python makes it easier to do this.\r\n\r\nThis is out of scope for this PR of course.\r\n\r\n> So the remaining external calls would be to gpg and wget right now. Happy though to also get rid of the latter one, if that is the general wish.\r\n\r\n`wget` is not low-hanging fruit in this regard. It's fairly easy to implement a poor man's wget in Python, but adding other features such as a progress bar makes it a lot more work. Especially as we don't want to introduce external Python dependencies. \r\nCould also be done in a later PR. I think it's fine like this.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748868668/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748874322",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748874322",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748874322,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODg3NDMyMg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T09:34:52Z",
    "updated_at": "2020-12-21T09:38:10Z",
    "author_association": "MEMBER",
    "body": "Testing a bit\r\n```bash\r\n$ ./verify.py 0.20.1-linux\r\nDownloading bitcoin-0.20.1-aarch64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.20.1-arm-linux-gnueabihf.tar.gz\r\nDownloading bitcoin-0.20.1-riscv64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.20.1-x86_64-linux-gnu.tar.gz\r\nKeep the binaries in /tmp/bitcoin_verify_binaries\r\nVerified hashes of\r\nbitcoin-0.20.1-aarch64-linux-gnu.tar.gz\r\nbitcoin-0.20.1-arm-linux-gnueabihf.tar.gz\r\nbitcoin-0.20.1-riscv64-linux-gnu.tar.gz\r\nbitcoin-0.20.1-x86_64-linux-gnu.tar.gz\r\n$ ./verify.py 0.19.0.1-linux\r\nDownloading bitcoin-0.19.0.1-aarch64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.0.1-arm-linux-gnueabihf.tar.gz\r\nDownloading bitcoin-0.19.0.1-i686-pc-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.0.1-riscv64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.0.1-x86_64-linux-gnu.tar.gz\r\nKeep the binaries in /tmp/bitcoin_verify_binaries\r\nVerified hashes of\r\nbitcoin-0.19.0.1-aarch64-linux-gnu.tar.gz\r\nbitcoin-0.19.0.1-arm-linux-gnueabihf.tar.gz\r\nbitcoin-0.19.0.1-i686-pc-linux-gnu.tar.gz\r\nbitcoin-0.19.0.1-riscv64-linux-gnu.tar.gz\r\nbitcoin-0.19.0.1-x86_64-linux-gnu.tar.gz\r\n$ ./verify.py 0.20.0-linux  # <---------------------------------------------------\r\nbitcoin.org and bitcoincore.org signature files were not equal?\r\n$ ./verify.py 0.20.0-linux\r\nDownloading bitcoin-0.20.0-aarch64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.20.0-aarch64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.20.0-arm-linux-gnueabihf.tar.gz\r\nDownloading bitcoin-0.20.0-riscv64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.20.0-x86_64-linux-gnu.tar.gz\r\nKeep the binaries in /tmp/bitcoin_verify_binaries\r\nVerified hashes of\r\nbitcoin-0.20.0-aarch64-linux-gnu.tar.gz\r\nbitcoin-0.20.0-arm-linux-gnueabihf.tar.gz\r\nbitcoin-0.20.0-riscv64-linux-gnu.tar.gz\r\nbitcoin-0.20.0-x86_64-linux-gnu.tar.gz\r\n```\r\nThe intermittent issue was strange. I'd love to see more detailed output in case of such an error, or at the least not removing the files immediately. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748874322/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748965498",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748965498",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 748965498,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODk2NTQ5OA==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T13:09:57Z",
    "updated_at": "2020-12-21T13:09:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I was thinking of this script yesterday during a [twitter thread](https://twitter.com/orionwl/status/1340286384867860482), and wondered if it would be useful to make it do verification against gitian deterministic build attestations. This would be more thorough than validating my signature. At the least rewriting it in Python makes it easier to do this.\r\n\r\nWould that mean that we wouldn't need to check any signature at all, but instead simply fetch each versions `...-build.assert` file from the gitian.sigs repository (e.g. from a random contributor) and compare the hashes?\r\n\r\n> The intermittent issue was strange. I'd love to see more detailed output in case of such an error, or at the least not removing the files immediately.\r\n\r\nThanks for testing! I could reproduce this behaviour with both the shell and the python script by starting with an empty working directory, first verifying version 0.19.1, then 0.18.1:\r\n```\r\n$ ./verify.sh 0.19.1-linux\r\nDownloading bitcoin-0.19.1-aarch64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.1-arm-linux-gnueabihf.tar.gz\r\nDownloading bitcoin-0.19.1-i686-pc-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.1-riscv64-linux-gnu.tar.gz\r\nDownloading bitcoin-0.19.1-x86_64-linux-gnu.tar.gz\r\nKeep the binaries in /tmp/bitcoin_verify_binaries\r\nVerified hashes of\r\nbitcoin-0.19.1-aarch64-linux-gnu.tar.gz\r\nbitcoin-0.19.1-arm-linux-gnueabihf.tar.gz\r\nbitcoin-0.19.1-i686-pc-linux-gnu.tar.gz\r\nbitcoin-0.19.1-riscv64-linux-gnu.tar.gz\r\nbitcoin-0.19.1-x86_64-linux-gnu.tar.gz\r\n$ ./verify.sh 0.18.1-linux\r\nbitcoin.org and bitcoincore.org signature files were not equal?\r\n```\r\nThis seems to turn up whenever a signature file of an older release is downloaded _and_ it has the same size than the one from the previous run -- using `wget`s timestamping (`-N`) is obviously counterproductive in this case, and we should ensure to always freshly fetch the signatures.\r\n\r\nForce-pushed with the following changes: \r\n* don't use timestamping mechanism for downloading the signature files (only for the release binaries)\r\n* if the two signature files don't match, keep them and show a more verbose message with file paths\r\n* add missing error message if no files match the specified platform filter\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/748965498/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750708693",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-750708693",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 750708693,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDcwODY5Mw==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-24T02:24:46Z",
    "updated_at": "2020-12-24T02:24:46Z",
    "author_association": "MEMBER",
    "body": "bash scripts longer than 5 lines are a mistake ;)\r\n\r\nconcept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750708693/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 1,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753549728",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-753549728",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 753549728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzU0OTcyOA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-03T00:43:36Z",
    "updated_at": "2021-01-03T00:43:36Z",
    "author_association": "MEMBER",
    "body": "Weak concept NACK. sh scripts are generally preferable over Python. You don't need to run tests to use Bitcoin Core, but verifying is kind of important...\r\n\r\n(Weak because only embedded would be missing Python, and ... we use a lot of resources anyway)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753549728/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761858514",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-761858514",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 761858514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MTg1ODUxNA==",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-17T18:33:38Z",
    "updated_at": "2021-01-17T18:33:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Current conceptual review score state, after 1 month:\r\n4 Concept ACKs (jonatack, laanwj, practicalswift, instagibbs) vs. 1 weak Concept NACK (luke-jr)\r\n\r\n\r\n\r\n\r\n> Weak concept NACK. sh scripts are generally preferable over Python. You don't need to run tests to use Bitcoin Core, but verifying is kind of important...\r\n> \r\n> (Weak because only embedded would be missing Python, and ... we use a lot of resources anyway)\r\n\r\nThough I get your point and agree that it's good to minimize dependencies, I'd argue that the advantage of increased readability/maintainability outweighs the drawback in this case. Looking at the other external dependencies in the script, I think having `wget` and `pgp` available on an embedded target is even much less likely than a Python interpreter...\r\nNot even being able to do something seemingly simple as calculating a SHA256 in a shell script without pain (as [pointed out by laanwj](https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748036735)) doesn't convince me either to the \"sh scripts are generally preferable over Python\" argument.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/761858514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/764787866",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-764787866",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 764787866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NDc4Nzg2Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-21T16:53:06Z",
    "updated_at": "2021-01-21T16:53:06Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/764787866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769990096",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-769990096",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20689",
    "id": 769990096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTk5MDA5Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-29T19:03:10Z",
    "updated_at": "2021-01-29T19:03:23Z",
    "author_association": "MEMBER",
    "body": "Tested and code review ACK c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769990096/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545773078",
    "pull_request_review_id": 555411451,
    "id": 545773078,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MzA3OA==",
    "diff_hunk": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-N', '-O', local_file, remote_file]\n+    else:\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def apply_filter_on_file(filename, filter_):\n+    subprocess.run(f'grep {filter_} {filename} > {filename}-tmp', shell=True)\n+    if os.path.getsize(f\"{filename}-tmp\") == 0:\n+        return False\n+    subprocess.run(f\"mv {filename}-tmp {filename}\", shell=True)\n+    return True\n+\n+\n+def verify_with_sha256sum(files_to_verify, hashfile):",
    "path": "contrib/verifybinaries/verify.py",
    "position": null,
    "original_position": 75,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "bb801302eef5b5a13fc67b8c8e3a48326cbf8ab7",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a missed opportunity; please use python's internal hashing instead of calling out to an utility here.",
    "created_at": "2020-12-18T11:30:49Z",
    "updated_at": "2020-12-21T13:02:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r545773078",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545773078"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r545773078"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545773078/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546037244",
    "pull_request_review_id": 555749155,
    "id": 546037244,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzNzI0NA==",
    "diff_hunk": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-N', '-O', local_file, remote_file]\n+    else:\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def apply_filter_on_file(filename, filter_):\n+    subprocess.run(f'grep {filter_} {filename} > {filename}-tmp', shell=True)\n+    if os.path.getsize(f\"{filename}-tmp\") == 0:\n+        return False\n+    subprocess.run(f\"mv {filename}-tmp {filename}\", shell=True)\n+    return True\n+\n+\n+def verify_with_sha256sum(files_to_verify, hashfile):",
    "path": "contrib/verifybinaries/verify.py",
    "position": null,
    "original_position": 75,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "bb801302eef5b5a13fc67b8c8e3a48326cbf8ab7",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point! When I thought about using internal hashing I was initially put off about potentially loading dozens of MBs into memory (I guess `sha256sum` does this in a smart way by loading chunk after chunk, instead of the whole file at once), but OTOH this should not be a problem at all and the advantage of getting rid of an external tool outweighs this by far.",
    "created_at": "2020-12-18T19:12:14Z",
    "updated_at": "2020-12-21T13:02:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r546037244",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546037244"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r546037244"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/546037244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 545773078
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567059435",
    "pull_request_review_id": 579573185,
    "id": 567059435,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzA1OTQzNQ==",
    "diff_hunk": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-N', '-O', local_file, remote_file]\n+    else:\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def apply_filter_on_file(filename, filter_):\n+    subprocess.run(f'grep {filter_} {filename} > {filename}-tmp', shell=True)\n+    if os.path.getsize(f\"{filename}-tmp\") == 0:\n+        return False\n+    subprocess.run(f\"mv {filename}-tmp {filename}\", shell=True)\n+    return True\n+\n+\n+def verify_with_sha256sum(files_to_verify, hashfile):",
    "path": "contrib/verifybinaries/verify.py",
    "position": null,
    "original_position": 75,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "bb801302eef5b5a13fc67b8c8e3a48326cbf8ab7",
    "user": {
      "login": "shesek",
      "id": 877904,
      "node_id": "MDQ6VXNlcjg3NzkwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shesek",
      "html_url": "https://github.com/shesek",
      "followers_url": "https://api.github.com/users/shesek/followers",
      "following_url": "https://api.github.com/users/shesek/following{/other_user}",
      "gists_url": "https://api.github.com/users/shesek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shesek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shesek/subscriptions",
      "organizations_url": "https://api.github.com/users/shesek/orgs",
      "repos_url": "https://api.github.com/users/shesek/repos",
      "events_url": "https://api.github.com/users/shesek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shesek/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm late to the party, but you can do stream hashing in python:\r\n\r\n```python\r\nimport hashlib as hash\r\n\r\nCHUNKSIZE = 65536\r\n\r\nsha = hash.sha256()\r\nwith open('/path/to/foo.bar', 'rb') as fh:\r\n    buff = fh.read(CHUNKSIZE)\r\n    while len(buff) > 0:\r\n        sha.update(buff)\r\n        buff = fh.read(CHUNKSIZE)\r\ndigest = sha.hexdigest()\r\n```",
    "created_at": "2021-01-29T19:53:33Z",
    "updated_at": "2021-01-29T19:54:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567059435",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567059435"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567059435"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567059435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 545773078
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567102607",
    "pull_request_review_id": 579629620,
    "id": 567102607,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzEwMjYwNw==",
    "diff_hunk": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-N', '-O', local_file, remote_file]\n+    else:\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def apply_filter_on_file(filename, filter_):\n+    subprocess.run(f'grep {filter_} {filename} > {filename}-tmp', shell=True)\n+    if os.path.getsize(f\"{filename}-tmp\") == 0:\n+        return False\n+    subprocess.run(f\"mv {filename}-tmp {filename}\", shell=True)\n+    return True\n+\n+\n+def verify_with_sha256sum(files_to_verify, hashfile):",
    "path": "contrib/verifybinaries/verify.py",
    "position": null,
    "original_position": 75,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "bb801302eef5b5a13fc67b8c8e3a48326cbf8ab7",
    "user": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@shesek: Thanks for posting! I didn't doubt that stream hashing is possible at all in python, I just was put off by the idea of partly reinventing the wheel of `sha256` here and investing more than 2-3 LOC for getting the hash of a file. \r\n\r\n> I'm late to the party, ...\r\n\r\nWell, luckily in open source development there is no \"late to the party\", you can always open a follow-up PR :)",
    "created_at": "2021-01-29T21:26:08Z",
    "updated_at": "2021-01-29T21:26:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567102607",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567102607"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567102607"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567102607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 545773078
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567384709",
    "pull_request_review_id": 579866030,
    "id": 567384709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM4NDcwOQ==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',",
    "path": "contrib/verifybinaries/verify.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Obviously unrelated, but I wondered why we'd use `--decrypt` to `--verify` when the files aren't encrypted ",
    "created_at": "2021-01-31T08:05:41Z",
    "updated_at": "2021-01-31T08:05:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567384709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567384709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567384709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567384709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567386404",
    "pull_request_review_id": 579866737,
    "id": 567386404,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM4NjQwNA==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',",
    "path": "contrib/verifybinaries/verify.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh, I see it is used to protect against attacks where some parts of the file are not covered by the signature.\r\n",
    "created_at": "2021-01-31T08:15:29Z",
    "updated_at": "2021-01-31T08:15:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567386404",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567386404"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567386404"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567386404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 567384709
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567532483",
    "pull_request_review_id": 579977899,
    "id": 567532483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUzMjQ4Mw==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',",
    "path": "contrib/verifybinaries/verify.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "shesek",
      "id": 877904,
      "node_id": "MDQ6VXNlcjg3NzkwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shesek",
      "html_url": "https://github.com/shesek",
      "followers_url": "https://api.github.com/users/shesek/followers",
      "following_url": "https://api.github.com/users/shesek/following{/other_user}",
      "gists_url": "https://api.github.com/users/shesek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shesek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shesek/subscriptions",
      "organizations_url": "https://api.github.com/users/shesek/orgs",
      "repos_url": "https://api.github.com/users/shesek/repos",
      "events_url": "https://api.github.com/users/shesek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shesek/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What attack are you referring to?\r\n\r\nMy understanding is that `--decrypt` is used here because it makes `gpg` output the signed message to `STDOUT` (or the file specified by `--output`), without the header and signature, while `--verify` won't give you that.\r\n\r\nI commonly use it like that: `curl https://foo.bar/SHA256SUMS.asc | gpg --decrypt - | sha256sum -c -`.\r\n\r\nYes, it is kind of strange that its called `decrypt` when in reality it doesn't decrypt anything...",
    "created_at": "2021-02-01T02:31:39Z",
    "updated_at": "2021-02-01T02:31:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567532483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567532483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567532483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567532483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 567384709
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567535674",
    "pull_request_review_id": 579981584,
    "id": 567535674,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzUzNTY3NA==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',",
    "path": "contrib/verifybinaries/verify.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "shesek",
      "id": 877904,
      "node_id": "MDQ6VXNlcjg3NzkwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shesek",
      "html_url": "https://github.com/shesek",
      "followers_url": "https://api.github.com/users/shesek/followers",
      "following_url": "https://api.github.com/users/shesek/following{/other_user}",
      "gists_url": "https://api.github.com/users/shesek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shesek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shesek/subscriptions",
      "organizations_url": "https://api.github.com/users/shesek/orgs",
      "repos_url": "https://api.github.com/users/shesek/repos",
      "events_url": "https://api.github.com/users/shesek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shesek/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Another thing to note is that `gpg` checks the signature against any of the public keys in the local keyring. This can be improved by creating a keyring with just Bitcoin Core's signing key and verifying against that:\r\n\r\n```bash\r\n$ gpg --export 90C8019E36C2E964 |  gpg --no-default-keyring --keyring ./bitcoincore.keyring --import\r\n$ gpg --no-default-keyring --keyring ./bitcoincore.keyring --decrypt SHA256SUMS.asc\r\n```\r\n\r\n(Note the `./` for `--keyring` -- the keyring file will be created in `~/.gnupg` instead of the PWD without it)\r\n\r\nI would also consider switching to [`gpgv`](https://www.gnupg.org/documentation/manuals/gnupg/gpgv.html), which is part of the gnupg suite but does only signature verification, is much smaller/simpler, can be installed independently and is more widely available (i.e. its usually there on these \"slim\" docker images and similar barer-bones environments).",
    "created_at": "2021-02-01T02:46:10Z",
    "updated_at": "2021-02-01T02:47:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567535674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567535674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567535674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567535674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 567384709
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567587887",
    "pull_request_review_id": 580042777,
    "id": 567587887,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4Nzg4Nw==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',",
    "path": "contrib/verifybinaries/verify.py",
    "position": 71,
    "original_position": 71,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can append/prepend any data to any historically valid signature and it will happily \"verify\". E.g. \r\n\r\n\r\n```\r\ngpg --verify SHA256SUMS.asc && tail -2 SHA256SUMS.asc \r\ngpg: Signature made Wed 03 Jun 2020 11:59:52 AM CEST\r\ngpg:                using RSA key 90C8019E36C2E964\r\ngpg: Good signature ...\r\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff  bitcoin-22.0-windows.zip\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  bitcoin-22.0-linux.zip\r\n",
    "created_at": "2021-02-01T06:25:00Z",
    "updated_at": "2021-02-01T06:25:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567587887",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567587887"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567587887"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567587887/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 71,
    "original_line": 71,
    "side": "RIGHT",
    "in_reply_to_id": 567384709
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567784432",
    "pull_request_review_id": 580299742,
    "id": 567784432,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc4NDQzMg==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set",
    "path": "contrib/verifybinaries/verify.py",
    "position": 54,
    "original_position": 54,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "typo: explicitely ==> explicitly",
    "created_at": "2021-02-01T12:23:46Z",
    "updated_at": "2021-02-01T12:23:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567784432",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567784432"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567784432"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567784432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 54,
    "original_line": 54,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567785249",
    "pull_request_review_id": 580300832,
    "id": 567785249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc4NTI0OQ==",
    "diff_hunk": "@@ -0,0 +1,183 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Script for verifying Bitoin Core release binaries\n+\n+This script attempts to download the signature file SHA256SUMS.asc from\n+bitcoincore.org and bitcoin.org and compares them.\n+It first checks if the signature passes, and then downloads the files\n+specified in the file, and checks if the hashes of these files match those\n+that are specified in the signature file.\n+The script returns 0 if everything passes the checks. It returns 1 if either\n+the signature check or the hash check doesn't pass. If an error occurs the\n+return value is >= 2.\n+\"\"\"\n+from hashlib import sha256\n+import os\n+import subprocess\n+import sys\n+from textwrap import indent\n+\n+WORKINGDIR = \"/tmp/bitcoin_verify_binaries\"\n+HASHFILE = \"hashes.tmp\"\n+HOST1 = \"https://bitcoincore.org\"\n+HOST2 = \"https://bitcoin.org\"\n+VERSIONPREFIX = \"bitcoin-core-\"\n+SIGNATUREFILENAME = \"SHA256SUMS.asc\"\n+\n+\n+def parse_version_string(version_str):\n+    if version_str.startswith(VERSIONPREFIX):  # remove version prefix\n+        version_str = version_str[len(VERSIONPREFIX):]\n+\n+    parts = version_str.split('-')\n+    version_base = parts[0]\n+    version_rc = \"\"\n+    version_os = \"\"\n+    if len(parts) == 2:  # \"<version>-rcN\" or \"version-platform\"\n+        if \"rc\" in parts[1]:\n+            version_rc = parts[1]\n+        else:\n+            version_os = parts[1]\n+    elif len(parts) == 3:  # \"<version>-rcN-platform\"\n+        version_rc = parts[1]\n+        version_os = parts[2]\n+\n+    return version_base, version_rc, version_os\n+\n+\n+def download_with_wget(remote_file, local_file=None):\n+    if local_file:\n+        wget_args = ['wget', '-O', local_file, remote_file]\n+    else:\n+        # use timestamping mechanism if local filename is not explicitely set\n+        wget_args = ['wget', '-N', remote_file]\n+\n+    result = subprocess.run(wget_args,\n+                            stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode == 0, result.stdout.decode().rstrip()\n+\n+\n+def files_are_equal(filename1, filename2):\n+    with open(filename1, 'rb') as file1:\n+        contents1 = file1.read()\n+    with open(filename2, 'rb') as file2:\n+        contents2 = file2.read()\n+    return contents1 == contents2\n+\n+\n+def verify_with_gpg(signature_filename, output_filename):\n+    result = subprocess.run(['gpg', '--yes', '--decrypt', '--output',\n+                             output_filename, signature_filename],\n+                             stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n+    return result.returncode, result.stdout.decode().rstrip()\n+\n+\n+def remove_files(filenames):\n+    for filename in filenames:\n+        os.remove(filename)\n+\n+\n+def main(args):\n+    # sanity check\n+    if len(args) < 1:\n+        print(\"Error: need to specify a version on the command line\")\n+        return 3\n+\n+    # determine remote dir dependend on provided version string",
    "path": "contrib/verifybinaries/verify.py",
    "position": 88,
    "original_position": 88,
    "commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "original_commit_id": "c86b9a65eb0d6d1e659415880702c4dc889c34e6",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "typo: dependend ==> dependent",
    "created_at": "2021-02-01T12:25:14Z",
    "updated_at": "2021-02-01T12:25:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567785249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567785249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567785249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20689"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567785249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 88,
    "original_line": 88,
    "side": "RIGHT"
  }
]