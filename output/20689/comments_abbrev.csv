jonatack,2020-12-17 19:38:31,Concept ACK (modulo context / future plans for this script; I don't know).,https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-747656215,747656215,
laanwj,2020-12-18 11:31:54,"Concept ACK, I generally prefer python to shell code as things become more complex, I find it easier to review and structure. It also doesn't need to rely so much on tooling that happens to be scattered around the system (like your OS's [favorite command line sha256 hashers](https://github.com/bitcoin/bitcoin/blob/master/contrib/install_db4.sh#L32-L46)).",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748036735,748036735,
practicalswift,2020-12-18 14:38:06,"Concept ACK on the general idea of replacing this shell script with a Python script.\n\nThe current version of the Python script shells out to `wget`, `gpg`, `grep`, `mv`, `diff` and `sha256sum`.\n\nAFAICT the only necessary external command that would be non-trivial to replace by using only what is supplied by the Python standard library is `gpg`.\n\nWould it be possible to re-write this sc",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748118062,748118062,
theStack,2020-12-18 19:12:21,"Thanks for all the conceptual reviews! I agree with the idea to reduce calls to external tools, if we move to a language that has 'batteries included' we should also use them to be more deterministic, robust and platform-independent.\n\n> It also doesn't need to rely so much on tooling that happens to be scattered around the system (like your OS's [favorite command line sha256 hashers](https://g",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748269056,748269056,
theStack,2020-12-20 23:25:56,"Force-pushed with the following changes, eliminating several external tool call (`subprocess.run`) instances, according to the reviewers suggestions:\n- replaced call to external `grep` and `mv` with simple manual filtering (we don't need the contents in a file anyways)\n- replaced call to external `sha256sum` with python's internal hashing (`hashlib.sha256`)\n- replaced call to external `diff`",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748686395,748686395,
laanwj,2020-12-21 09:23:10,"I was thinking of this script yesterday during a [twitter thread](https://twitter.com/orionwl/status/1340286384867860482), and wondered if it would be useful to make it do verification against gitian deterministic build attestations. This would be more thorough than validating my signature. At the least rewriting it in Python makes it easier to do this.\n\nThis is out of scope for this PR of cou",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748868668,748868668,
laanwj,2020-12-21 09:34:52,"Testing a bit\n```bash\n$ ./verify.py 0.20.1-linux\nDownloading bitcoin-0.20.1-aarch64-linux-gnu.tar.gz\nDownloading bitcoin-0.20.1-arm-linux-gnueabihf.tar.gz\nDownloading bitcoin-0.20.1-riscv64-linux-gnu.tar.gz\nDownloading bitcoin-0.20.1-x86_64-linux-gnu.tar.gz\nKeep the binaries in /tmp/bitcoin_verify_binaries\nVerified hashes of\nbitcoin-0.20.1-aarch64-linux-gnu.tar.gz\nbitcoin-0.20.",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748874322,748874322,
theStack,2020-12-21 13:09:57,"> I was thinking of this script yesterday during a [twitter thread](https://twitter.com/orionwl/status/1340286384867860482), and wondered if it would be useful to make it do verification against gitian deterministic build attestations. This would be more thorough than validating my signature. At the least rewriting it in Python makes it easier to do this.\n\nWould that mean that we wouldn't need",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-748965498,748965498,
instagibbs,2020-12-24 02:24:46,"bash scripts longer than 5 lines are a mistake ;)\n\nconcept ACK",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-750708693,750708693,
luke-jr,2021-01-03 00:43:36,"Weak concept NACK. sh scripts are generally preferable over Python. You don't need to run tests to use Bitcoin Core, but verifying is kind of important...\n\n(Weak because only embedded would be missing Python, and ... we use a lot of resources anyway)",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-753549728,753549728,
theStack,2021-01-17 18:33:38,"Current conceptual review score state, after 1 month:\n4 Concept ACKs (jonatack, laanwj, practicalswift, instagibbs) vs. 1 weak Concept NACK (luke-jr)\n\n\n\n\n> Weak concept NACK. sh scripts are generally preferable over Python. You don't need to run tests to use Bitcoin Core, but verifying is kind of important...\n> \n> (Weak because only embedded would be missing Python, and ... we use ",https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-761858514,761858514,
MarcoFalke,2021-01-21 16:53:06,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-764787866,764787866,
laanwj,2021-01-29 19:03:10,Tested and code review ACK c86b9a65eb0d6d1e659415880702c4dc889c34e6,https://github.com/bitcoin/bitcoin/pull/20689#issuecomment-769990096,769990096,
laanwj,2020-12-18 11:30:49,This is a missed opportunity; please use python's internal hashing instead of calling out to an utility here.,https://github.com/bitcoin/bitcoin/pull/20689#discussion_r545773078,545773078,contrib/verifybinaries/verify.py
theStack,2020-12-18 19:12:14,"Good point! When I thought about using internal hashing I was initially put off about potentially loading dozens of MBs into memory (I guess `sha256sum` does this in a smart way by loading chunk after chunk, instead of the whole file at once), but OTOH this should not be a problem at all and the advantage of getting rid of an external tool outweighs this by far.",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r546037244,546037244,contrib/verifybinaries/verify.py
shesek,2021-01-29 19:53:33,"I'm late to the party, but you can do stream hashing in python:\n\n```python\nimport hashlib as hash\n\nCHUNKSIZE = 65536\n\nsha = hash.sha256()\nwith open('/path/to/foo.bar', 'rb') as fh:\n    buff = fh.read(CHUNKSIZE)\n    while len(buff) > 0:\n        sha.update(buff)\n        buff = fh.read(CHUNKSIZE)\ndigest = sha.hexdigest()\n```",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567059435,567059435,contrib/verifybinaries/verify.py
theStack,2021-01-29 21:26:08,"@shesek: Thanks for posting! I didn't doubt that stream hashing is possible at all in python, I just was put off by the idea of partly reinventing the wheel of `sha256` here and investing more than 2-3 LOC for getting the hash of a file. \n\n> I'm late to the party, ...\n\nWell, luckily in open source development there is no ""late to the party"", you can always open a follow-up PR :)",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567102607,567102607,contrib/verifybinaries/verify.py
MarcoFalke,2021-01-31 08:05:41,"Obviously unrelated, but I wondered why we'd use `--decrypt` to `--verify` when the files aren't encrypted ",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567384709,567384709,contrib/verifybinaries/verify.py
MarcoFalke,2021-01-31 08:15:29,"Oh, I see it is used to protect against attacks where some parts of the file are not covered by the signature.\n",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567386404,567386404,contrib/verifybinaries/verify.py
shesek,2021-02-01 02:31:39,"What attack are you referring to?\n\nMy understanding is that `--decrypt` is used here because it makes `gpg` output the signed message to `STDOUT` (or the file specified by `--output`), without the header and signature, while `--verify` won't give you that.\n\nI commonly use it like that: `curl https://foo.bar/SHA256SUMS.asc | gpg --decrypt - | sha256sum -c -`.\n\nYes, it is kind of strange",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567532483,567532483,contrib/verifybinaries/verify.py
shesek,2021-02-01 02:46:10,"Another thing to note is that `gpg` checks the signature against any of the public keys in the local keyring. This can be improved by creating a keyring with just Bitcoin Core's signing key and verifying against that:\n\n```bash\n$ gpg --export 90C8019E36C2E964 |  gpg --no-default-keyring --keyring ./bitcoincore.keyring --import\n$ gpg --no-default-keyring --keyring ./bitcoincore.keyring --dec",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567535674,567535674,contrib/verifybinaries/verify.py
MarcoFalke,2021-02-01 06:25:00,"You can append/prepend any data to any historically valid signature and it will happily ""verify"". E.g. \n\n\n```\ngpg --verify SHA256SUMS.asc && tail -2 SHA256SUMS.asc \ngpg: Signature made Wed 03 Jun 2020 11:59:52 AM CEST\ngpg:                using RSA key 90C8019E36C2E964\ngpg: Good signature ...\nffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff  bitcoin-22.0-windows.zip",https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567587887,567587887,contrib/verifybinaries/verify.py
hebasto,2021-02-01 12:23:46,typo: explicitely ==> explicitly,https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567784432,567784432,contrib/verifybinaries/verify.py
hebasto,2021-02-01 12:25:14,typo: dependend ==> dependent,https://github.com/bitcoin/bitcoin/pull/20689#discussion_r567785249,567785249,contrib/verifybinaries/verify.py
