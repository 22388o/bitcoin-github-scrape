[
  {
    "sha": "0b1f4b3c6685d0a6307926d43d166add538061b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjFmNGIzYzY2ODVkMGE2MzA3OTI2ZDQzZDE2NmFkZDUzODA2MWI3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-30T21:43:15Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-07-31T17:35:46Z"
      },
      "message": "wallet: Drop unused OldKey",
      "tree": {
        "sha": "7823d13dde28c39a9abdc2a598c8ce90b6c96e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7823d13dde28c39a9abdc2a598c8ce90b6c96e60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b1f4b3c6685d0a6307926d43d166add538061b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b1f4b3c6685d0a6307926d43d166add538061b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b1f4b3c6685d0a6307926d43d166add538061b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b1f4b3c6685d0a6307926d43d166add538061b7/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74f1a27f2f45af7dafcc34df766cf76d29c7c6ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74f1a27f2f45af7dafcc34df766cf76d29c7c6ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74f1a27f2f45af7dafcc34df766cf76d29c7c6ed"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 7,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3e66f982250a4d2c6aa8ef99218cfb19eb12cc4b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b1f4b3c6685d0a6307926d43d166add538061b7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b1f4b3c6685d0a6307926d43d166add538061b7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0b1f4b3c6685d0a6307926d43d166add538061b7",
        "patch": "@@ -676,28 +676,6 @@ class COutput\n     }\n };\n \n-/** Private key that was serialized by an old wallet (only used for deserialization) */\n-struct OldKey {\n-    CPrivKey vchPrivKey;\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        // no longer used by the wallet, thus dropped after deserialization:\n-        int64_t nTimeCreated;\n-        int64_t nTimeExpires;\n-        std::string strComment;\n-\n-        int nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(nVersion);\n-        READWRITE(vchPrivKey);\n-        READWRITE(nTimeCreated);\n-        READWRITE(nTimeExpires);\n-        READWRITE(LIMITED_STRING(strComment, 65536));\n-    }\n-};\n-\n struct CoinSelectionParams\n {\n     bool use_bnb = true;"
      },
      {
        "sha": "635997afc9ecd53b0c409acdac1f099b7479f12d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b1f4b3c6685d0a6307926d43d166add538061b7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b1f4b3c6685d0a6307926d43d166add538061b7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0b1f4b3c6685d0a6307926d43d166add538061b7",
        "patch": "@@ -115,7 +115,6 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n         return false;\n     }\n     EraseIC(std::make_pair(DBKeys::KEY, vchPubKey));\n-    EraseIC(std::make_pair(DBKeys::OLD_KEY, vchPubKey));\n     return true;\n }\n \n@@ -256,7 +255,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-        } else if (strType == DBKeys::KEY || strType == DBKeys::OLD_KEY) {\n+        } else if (strType == DBKeys::KEY) {\n             CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             if (!vchPubKey.IsValid())\n@@ -268,14 +267,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CPrivKey pkey;\n             uint256 hash;\n \n-            if (strType == DBKeys::KEY) {\n-                wss.nKeys++;\n-                ssValue >> pkey;\n-            } else {\n-                OldKey wkey;\n-                ssValue >> wkey;\n-                pkey = wkey.vchPrivKey;\n-            }\n+            wss.nKeys++;\n+            ssValue >> pkey;\n \n             // Old wallets store keys as DBKeys::KEY [pubkey] => [privkey]\n             // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key\n@@ -407,6 +400,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n                 return false;\n             }\n+        } else if (strType == DBKeys::OLD_KEY) {\n+            strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n+            return false;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -428,7 +424,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n-    return (strType == DBKeys::KEY || strType == DBKeys::OLD_KEY ||\n+    return (strType == DBKeys::KEY ||\n             strType == DBKeys::MASTER_KEY || strType == DBKeys::CRYPTED_KEY);\n }\n "
      }
    ]
  }
]