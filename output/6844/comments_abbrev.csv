sipa,2015-10-17T20:33:14Z,"This makes sense to me. It was already possible to do over RPC, but there\nis no need for authentication.\n\nSomething similar could be done for submitting blocks?\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148949482,148949482,
jgarzik,2015-10-17T21:42:26Z,"ut ACK.\n\nNits:\n- No need to adopt over-long RPC naming system.  ""sendtx"" or ""pushtx"" works.\n- Agree that sending blocks should be added also (note - not a blocker for this PR)\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148953949,148953949,
dcousens,2015-10-17T23:19:22Z,"> No need to adopt over-long RPC naming system. ""sendtx"" or ""pushtx"" works.\n\n@jgarzik why not just: `POST /rest/tx`\nIf you want to be able to post in the different formats... `POST /rest/tx/[format]`\n\nAlso, concept ACK, this would be great\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148960162,148960162,
dcousens,2015-10-17T23:25:12Z,"utACK, except the nits posted _are_ blockers to the merge IMHO.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148960331,148960331,
jgarzik,2015-10-18T03:00:18Z,agree w/ @dcousens \n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148972938,148972938,
jonasschnelli,2015-10-18T06:35:34Z,+1 for POST /rest/tx\n\nI would also think supporting BIN (and JSON) as input format could make sense and would be consistent.\n\nutACK.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-148985173,148985173,
lclc,2015-10-18T13:18:38Z,"Thanks for the fast feedback.\n\nI've changed it to POST /rest/tx\n\nRegarding the format: So far there is support for JSON / HEX / BIN for some of the REST methods.  IMHO it should be either all methods support all formats or there is only one until there is a demand / request for other formats. I think the REST API was mostly created for webclients, which are probably most confortable with JSON ",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149013838,149013838,
dcousens,2015-10-18T23:05:00Z,@lclc agreed we should use the `Content-Type` header to specify in the request what response we are giving.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149060169,149060169,
dcousens,2015-10-18T23:06:02Z,@lclc I have no doubt the file name extensions were made for easily viewing the data via a browser URL.  Not for API usage.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149060218,149060218,
jgarzik,2015-10-19T03:29:06Z,"As background, the discussion in IRC generally concluded that Content-type **as the only method of specifying file type** was not good.  Command line users (curl, wget) and web browser URL bars generally make it easy to alter a URL, yet difficult to specify Content-type.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149087303,149087303,
dcousens,2015-10-19T04:52:23Z,"@jgarzik then lets take the approach of `/rest/tx/[format]`?   A file type seems odd here, these aren't files.\nBut this argument is also relevant to all the other routes,  so,  may be for _this_ pull request, we just use file types (such as `.hex`) for consistency,  then discuss that elsewhere?\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149098301,149098301,
jgarzik,2015-10-19T05:30:39Z,"It is fair to open the topic - not disputing that.\n\nWhat is the best for the most likely users?  If most users are automated, content-type would seem reasonable.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149104319,149104319,
lclc,2015-10-19T06:55:49Z,"If we want to have it easy to alter the URL I would vote for using GET for everything ;)\n\nWith the RPC interface we already have a easy to use API for command line usage.\nI see the REST API as a self-hosted, potentially decentralize alternative to REST APIs from Blockchain.info, Blocktrail, etc.\n\nDoes anyone know a project that is using the REST API?\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149120668,149120668,
jonasschnelli,2015-10-19T06:55:53Z,"If I think about it without looking at other REST API designs, I like the file extension to determine the output format. Adding a file extension to the URL is much easier as adding a content-type request header.\n\nI could see:\n- **URL file** **_extension**_ = desired output forma\n- **request header** **_content-type**_ = POST input format\n\nNon post commands (currently everything expect `rest/",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149120694,149120694,
jonasschnelli,2015-10-19T07:04:16Z,"Using GET has some length limitations (not in RFC [there it is uint32max IIRC] but in most implementations). Using POST for posting data makes sense IMO.\n\nAnother nice addition would be to support an array of transactions.\nEither `content-type: application/json` with `[""<hex>"", [""<hex>"", ...]]` or by binary stream (content-type: `application/octet-stream`):  `<varint><vector:transactions>`.\n\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149123084,149123084,
lclc,2015-10-19T07:37:12Z,"I don't think Bitcoin Core should do it different then everyone else because we think it's easier.\nBut with this PR I just wanted to add the functionality to send raw transactions, not changing the general API format. Maybe we could discuss that in a new Github issue?\nAnd keep this PR for now the same like it is for the other methods.\n\nAnother topic to discuss there is adding a REST API versio",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149127870,149127870,
jonasschnelli,2015-10-19T08:06:45Z,@lclc: fair enough.\nSupporting input formats – although – should be done to keep constancy. `rest/getutxo` also supports posting JSON/HEX/BIN as input format. But i agree – can also be done later.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149137698,149137698,
lclc,2015-10-19T08:20:13Z,"Thanks. I'll add JSON & BIN as input formats next, determining them from the requested output format based on the 'file' ending in the URL (I expect if someone sends binary he wants binary back. Other scenarios can be covered ones we agree or disagree on Content-Type & Accept for data formats).\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149140410,149140410,
jonasschnelli,2015-10-19T08:25:22Z,> [...] I expect if someone sends binary he wants binary back [...] \n\nRight. That exactly how `rest/getutxo` works.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149141277,149141277,
jgarzik,2015-10-19T12:52:25Z,"In terms of HTTP ""verbs"", the method _can_ be GET but _should_ be POST or PUT.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149204731,149204731,
laanwj,2015-10-19T14:18:09Z,"- Please don't add a JSON input format. For security reasons (to reduce attack surface as there is no authentication), we don't want to parse complex input in REST (HEX and BIN are fine).\n- The verb should be POST or PUT. GET is not acceptable for submitting new data in REST, it should be reserved for operations without side effects.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-149226217,149226217,
jgarzik,2015-10-27T19:34:13Z,"Re-reviewing latest version:\n- Send different URI/behavior to a different dispatch function - avoid rest_tx() - and you don't need to reformat huge amounts of untouched code, vastly shrinking diff.\n- Agree w/ @laanwj comments:  Verb should be PUT or POST (done) and avoid JSON input.\n\nACK with those updates\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-151619197,151619197,
lclc,2015-10-27T20:31:53Z,"Thanks for the review.  It's strange that Travis says the checks passed even when they actually didn't (https://travis-ci.org/bitcoin/bitcoin/builds/87533414).\n\nMakes sense, moved the POST /rest/tx (without /) code to rest_tx_sendrawtx (although the naming isn't consistent anymore now, anyone has a better idea for a function name?).\n\nMy binary tests (see latest part of rest.py) are still faili",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-151635154,151635154,
lclc,2015-11-01T12:28:10Z,"Ok.\nWhat do you prefer @sipa , fRejectAbsurdFee always to be true or as an extra parameter to pass?\n\n@MarcoFalke that's not the problem. You can run the same tx with hex (currently commented out) and it works. I'll look at this again when I've changed the Fee thing\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-152822621,152822621,
MarcoFalke,2015-11-18T15:54:51Z,@lclc So why would travis fail if that's not the problem? You can try to set it to `false` and the see if `qa/pull-tester/rpc-tests.py rest` fails.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-157757525,157757525,
dcousens,2015-11-19T03:01:19Z,@lclc I'm happy to take over this if you're busy\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-157934133,157934133,
lclc,2015-11-19T19:50:38Z,"Sorry didn't have time for this, started at a new job (in Bitcoin), been abroad the last 3 weeks :)\n\n@dcousens If you like to finish it that would be great, so maybe this makes it into 0.12. I can give you merge rights on my Github fork so we don't lose the discussions in here?\n\nOtherwise I'll work on it again at the last weekend before December.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-158174711,158174711,
dcousens,2015-11-19T20:51:41Z,"@lclc sounds good, add me when you can.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-158194186,158194186,
paveljanik,2016-01-20T20:48:47Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-173354698,173354698,
laanwj,2016-05-09T10:49:50Z,I'm still not entirely convinced that _submitting_ anything belongs on this interface.\n\nI've always felt that the REST interface was read-only on purpose - a way to query data that is public anyway without authentication. Making is possible to submit something changes the security expectations.\n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-217833688,217833688,
lclc,2016-05-22T09:50:48Z,"Closing this PR for now, to keep this interface read-only.\n",https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-220823624,220823624,
dcousens,2016-05-22T10:07:41Z,> to keep this interface read-only.\n\nI think that is a valid reason :+1: \n,https://github.com/bitcoin/bitcoin/pull/6844#issuecomment-220824287,220824287,
dcousens,2015-10-17T23:21:09Z,"It should not be a `GET`... if this is intended to be a REST-ful interface.\nSome  proxies won't allow URL's longer than 2000 chars anyway,  so using this hacky [in-the-url] approach will be prone to issues.\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r42315229,42315229,doc/REST-interface.md
dcousens,2015-10-18T23:02:54Z,"You should specify:\n- `""application/octet-stream""` for plain-old-data\n- `""text/plain""` for hex\n- `""application/json""` for JSON\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r42328057,42328057,doc/REST-interface.md
lclc,2015-10-19T06:39:37Z,"I will ones we agreed on it :)\n\nIn the code in this version it's like in the other methods, determined by the ending, e.g.\nPOST 127.0.0.1:18332/rest/tx.hex\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r42339661,42339661,doc/REST-interface.md
sipa,2015-10-28T01:43:16Z,The 6th argument is not fRejectAbsurdFee currently.\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43211038,43211038,src/rest.cpp
lclc,2015-10-28T07:22:34Z,"Thanks, set both to false now.\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43223869,43223869,src/rest.cpp
MarcoFalke,2015-10-28T09:33:32Z,Why would you set it to false? A better (but not perfect) solution would be something like https://github.com/MarcoFalke/bitcoin/commit/18f5df4740c12c182667fc5c886e6605f4537a4b#diff-52257e4c1cedbf5e302f183065cab880L812\n\nBut #6726 is not yet merged and needs more work anyway. So let's just consider this as NIT and I will clean it up in a later PR if this gets merged before #6726.\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43232970,43232970,src/rest.cpp
MarcoFalke,2015-10-28T09:34:38Z,"Also travis fails with ""absurdly-high-fee"" so you'd have to pass it on, I guess. (Haven't looked closely, yet)\n\nBut then this is more like a blocking NIT.\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43233080,43233080,src/rest.cpp
lclc,2015-10-28T10:18:03Z,"I think it's job of the API user / wallet to check if the fee is too high or not, instead of trusting the node to check this and care about it.\n\nThe Travis error regarding ""absurdly-high-fee"" comes later, not because of this but because of the RPC-call to cross-check the result I do there. I'm aware of that, but it already fails earlier.\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43237105,43237105,src/rest.cpp
MarcoFalke,2015-10-28T10:22:30Z,There is no wallet when you use raw transactions...\n\nThe rpc interface checks for high fee by default and you can disable it with an additional argument. Any chance you could implement something like that?\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43237619,43237619,src/rest.cpp
lclc,2015-10-28T10:49:59Z,Somewhere there is a wallet to create that raw transaction.\n\nIMO it should be checked on the sender side (the user of the REST API) if\nthe fee is too high and not trust the node with this.\n\nE.g. someone could implement a web wallet that only relies on some nodes it\ndoesn't control so you trust that node that it actually cares if you added\na too high fee or not. False security.\nE.g. Nodes o,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43240284,43240284,src/rest.cpp
MarcoFalke,2015-10-28T10:57:54Z,You can't hard code this as `1`. Travis seems to fail here.\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43240971,43240971,qa/rpc-tests/rest.py
MarcoFalke,2015-10-28T10:58:27Z,Fee of .6 btc is too high. Travis seems to fail here\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43241005,43241005,qa/rpc-tests/rest.py
sipa,2015-10-28T15:44:13Z,"Lucas: in a raw API the creator of the transactions _cannot_ verify the\nfee, because he doesn't have the actual network's txouts, so they don't\nknow the amounts being spent.\n\nIt's a serious layer violation IMHO to make AcceptToMemoryPool perform this\ncheck, but I do agree that sendrawtransaction or its equivalent REST\ninterface should do this validation. People do shoot themselves in the foo",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r43273376,43273376,qa/rpc-tests/rest.py
dcousens,2015-11-18T13:11:18Z,why is this parameter still here?\nIsn't the POST expecting a pure octet stream?\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r45196759,45196759,src/rest.cpp
dcousens,2015-11-18T13:12:42Z,"It seems you're expecting: `transaction=<binary>`, that seems very odd.\nIt should just be `<binary>`\n",https://github.com/bitcoin/bitcoin/pull/6844#discussion_r45196887,45196887,src/rest.cpp
jgarzik,2015-11-19T02:46:02Z,Agreed.  This needs to be removed.  strBody should treated as equivalent to strTx.\n,https://github.com/bitcoin/bitcoin/pull/6844#discussion_r45293942,45293942,src/rest.cpp
