[
  {
    "sha": "fae63c3ef4134120d10ca2aab52716fa0291db08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU2M2MzZWY0MTM0MTIwZDEwY2EyYWFiNTI3MTZmYTAyOTFkYjA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T20:14:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T21:32:05Z"
      },
      "message": "rpc: Actually use sendmany::minconf",
      "tree": {
        "sha": "32298f7921fa48256cc573bc109622899d3b09f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32298f7921fa48256cc573bc109622899d3b09f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae63c3ef4134120d10ca2aab52716fa0291db08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJciXbVAAoJEM4rdWl+aaVIK4ML/3XJWD+CzlYQ9aTolhWcVara\navQ1FPFaqDZzbATneeYOIIhZp6VEnUZMaVQkMEMH3/6zb7SqBTqK3z671ZhZvbnz\nPxhly6TK+urqlvWg563JEO8qRSCZ7naFCyCEbATlJLKs/pfSzDyurbmjEKE7pAGg\nmqLwok0SLtPfgMU/hHt28rwyVjwMTkaxJGCGCm5mGVCxtPIGxa4iKsENC8DNZyTc\nzQVDiVdcA9ev/WXg2dpjmj+MriRVNrHjQEUDUbGWmKDpngs3PIFcNKnb6XDi6py4\nmfR6/Jf2zhGzivpCcsWuXld97wiE/8z1LC5uYfz/TthXh6HRzTFo+efUDM8l3mfN\ntZP4mx4zyJhRA2dxY04NDi4S/qTyGS/d5k21xzCVWkx9m8LvHDRyg/+m1MBk9Doo\n8Zo/HvOosQkP1zbUlDOucxuH5gg9B0OXLV1vYrXRd8lGmNIFE1sAzIBMp7NzHNzv\nTPoo8+SH0sDILBgrNo3yPxzmPhFdJuE2mA0qrF5dng==\n=f+2q\n-----END PGP SIGNATURE-----",
        "payload": "tree 32298f7921fa48256cc573bc109622899d3b09f9\nparent 887f57eb727643eb1f37999a022f3817aaab6d00\nauthor MarcoFalke <falke.marco@gmail.com> 1552508060 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552512725 -0400\n\nrpc: Actually use sendmany::minconf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae63c3ef4134120d10ca2aab52716fa0291db08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae63c3ef4134120d10ca2aab52716fa0291db08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae63c3ef4134120d10ca2aab52716fa0291db08/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "887f57eb727643eb1f37999a022f3817aaab6d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887f57eb727643eb1f37999a022f3817aaab6d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/887f57eb727643eb1f37999a022f3817aaab6d00"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 73,
      "deletions": 22
    },
    "files": [
      {
        "sha": "8326a9ecfdca8accad225f97f3d1abb2f2804b7f",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -18,6 +18,7 @@ void CCoinControl::SetNull()\n     fOverrideFeeRate = false;\n     m_confirm_target.reset();\n     m_signal_bip125_rbf.reset();\n+    m_min_conf_depth.reset();\n     m_fee_mode = FeeEstimateMode::UNSET;\n }\n "
      },
      {
        "sha": "e8d7e549fbe544ea3f8114b3ed46bed2f32fc54e",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -32,6 +32,8 @@ class CCoinControl\n     boost::optional<unsigned int> m_confirm_target;\n     //! Override the wallet's m_signal_rbf if set\n     boost::optional<bool> m_signal_bip125_rbf;\n+    //! Only use coins confirmed at least this often\n+    boost::optional<int> m_min_conf_depth;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n     //! Fee estimation mode to control arguments to estimateSmartFee"
      },
      {
        "sha": "d286d36e143e9a0374473662a7396771917c3716",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -807,9 +807,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"sendmany\",\n+    const RPCHelpMan help{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n                     HelpRequiringPassphrase(pwallet) + \"\\n\",\n                 {\n@@ -850,7 +848,11 @@ static UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -867,9 +869,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n     }\n     UniValue sendTo = request.params[1].get_obj();\n-    int nMinDepth = 1;\n-    if (!request.params[2].isNull())\n-        nMinDepth = request.params[2].get_int();\n \n     mapValue_t mapValue;\n     if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n@@ -880,6 +879,7 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         subtractFeeFromAmount = request.params[4].get_array();\n \n     CCoinControl coin_control;\n+    coin_control.m_min_conf_depth = request.params[2].isNull() ? 1 : request.params[2].get_int();\n     if (!request.params[5].isNull()) {\n         coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n@@ -897,7 +897,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     std::set<CTxDestination> destinations;\n     std::vector<CRecipient> vecSend;\n \n-    CAmount totalAmount = 0;\n     std::vector<std::string> keys = sendTo.getKeys();\n     for (const std::string& name_ : keys) {\n         CTxDestination dest = DecodeDestination(name_);\n@@ -914,7 +913,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n         CAmount nAmount = AmountFromValue(sendTo[name_]);\n         if (nAmount <= 0)\n             throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-        totalAmount += nAmount;\n \n         bool fSubtractFeeFromAmount = false;\n         for (unsigned int idx = 0; idx < subtractFeeFromAmount.size(); idx++) {\n@@ -929,11 +927,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    // Check funds\n-    if (totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth)) {\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Wallet has insufficient funds\");\n-    }\n-\n     // Shuffle recipient list\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n "
      },
      {
        "sha": "4ed219a7029534dc8bed79f1e7f7d17c02a2a5b8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -2595,15 +2595,19 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     size_t max_ancestors = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT));\n     size_t max_descendants = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+    const auto conf = [&coin_control](const int conf_in) {\n+        // Return the passed in conf_in or what is prescribed by coin_control, whichever is higher\n+        return coin_control.m_min_conf_depth ? std::max(*coin_control.m_min_conf_depth, conf_in) : conf_in;\n+    };\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+               SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(1), conf(6), 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+               SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(1), conf(1), 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n+               (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(0), conf(1), 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+               (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(0), conf(1), std::min((size_t)4, max_ancestors / 3), std::min((size_t)4, max_descendants / 3)), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+               (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(0), conf(1), max_ancestors / 2, max_descendants / 2), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+               (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(0), conf(1), max_ancestors - 1, max_descendants - 1), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+               (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(conf(0), conf(1), std::numeric_limits<uint64_t>::max()), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     util::insert(setCoinsRet, setPresetCoins);"
      },
      {
        "sha": "010e86d8564576454791bd5677b71dcbf7d6ae3c",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -155,6 +155,7 @@\n     'rpc_signmessage.py',\n     'wallet_balance.py',\n     'feature_nulldummy.py',\n+    'wallet_send.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',\n     'wallet_import_with_label.py',"
      },
      {
        "sha": "0ff098c9a81ca87e57f8c91036052a4dd945c4b5",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -24,7 +24,8 @@ def run_test(self):\n         self.restart_node(0, extra_args=[\"-fallbackfee=0\"])\n         assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n         assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n-        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n+        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(minconf=0, amounts={self.nodes[0].getnewaddress(): 1}))\n+\n \n if __name__ == '__main__':\n     WalletRBFTest().main()"
      },
      {
        "sha": "4c771832e6d3eace2d7f4ed06324d71588abaa0b",
        "filename": "test/functional/wallet_send.py",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae63c3ef4134120d10ca2aab52716fa0291db08/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=fae63c3ef4134120d10ca2aab52716fa0291db08",
        "patch": "@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the wallet send RPC methods.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class WalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Check that nodes don't own any UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+\n+        self.log.info(\"Mine blocks on node 1 and give two coins to wallet 0\")\n+\n+        self.nodes[1].generate(101)\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        self.nodes[1].generate(1)\n+        self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        self.log.info(\"Check that we have two coins at different confirmation levels\")\n+        assert_equal(self.nodes[0].getbalance(), 2)\n+        assert_equal({u['confirmations'] for u in self.nodes[0].listunspent()}, {1, 2})\n+\n+        self.log.info(\"Check that we only spend the older coin\")\n+        self.nodes[0].sendmany(amounts={self.nodes[1].getnewaddress(): 0.1}, minconf=2)\n+        assert_equal({u['confirmations'] for u in self.nodes[0].listunspent()}, {1})\n+\n+        self.log.info(\"Check that sending more than we have fails\")\n+        assert_raises_rpc_error(-6, 'Insufficient funds', lambda: self.nodes[0].sendmany(minconf=0, amounts={self.nodes[1].getnewaddress(): 3}))\n+\n+\n+if __name__ == '__main__':\n+    WalletTest().main()"
      }
    ]
  }
]