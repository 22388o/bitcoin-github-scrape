[
  {
    "sha": "cea91a1e40e12029140ebfba969ce3ef2965029c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWE5MWExZTQwZTEyMDI5MTQwZWJmYmE5NjljZTNlZjI5NjUwMjlj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-21T19:09:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-21T19:10:04Z"
      },
      "message": "Bugfix: GUI: Use unsigned long long type to avoid implicit conversion of MSB check",
      "tree": {
        "sha": "ad8bf07c0791f2b1e832f68607285aa9f163fa2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad8bf07c0791f2b1e832f68607285aa9f163fa2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea91a1e40e12029140ebfba969ce3ef2965029c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea91a1e40e12029140ebfba969ce3ef2965029c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cea91a1e40e12029140ebfba969ce3ef2965029c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea91a1e40e12029140ebfba969ce3ef2965029c/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94c0287aec9a250f58c4c633dabaf405d82cecd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94c0287aec9a250f58c4c633dabaf405d82cecd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94c0287aec9a250f58c4c633dabaf405d82cecd2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c6ff0ad91db0c4c3ce389552edc85b028c37c0ab",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea91a1e40e12029140ebfba969ce3ef2965029c/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea91a1e40e12029140ebfba969ce3ef2965029c/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=cea91a1e40e12029140ebfba969ce3ef2965029c",
        "patch": "@@ -760,7 +760,7 @@ QString formatServicesStr(quint64 mask)\n     QStringList strList;\n \n     for (int i = 0; i < 64; i++) {\n-        uint64_t check = 1LL << i;\n+        uint64_t check = 1ull << i;\n         if (mask & check)\n         {\n             strList.append(serviceFlagToStr(check, i));"
      }
    ]
  },
  {
    "sha": "c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzFiYzViY2ZkZGY0NDBlOWExNzEzZjdiYTJjYTJiZjljZmE4ZTJl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-17T01:53:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-21T19:10:04Z"
      },
      "message": "Consolidate service flag bit-to-name conversion to a shared serviceFlagToStr function\n\nSide effect: this results in the RPC showing unknown service bits as \"UNKNOWN[n]\" like the GUI.\n\nNote that there is no common mask-to-vector<string> function because both GUI and RPC would need to iterate through it to convert to their desired target formats.",
      "tree": {
        "sha": "7d04a6ac6765a3591963d9420d68d2c64620cbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d04a6ac6765a3591963d9420d68d2c64620cbd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cea91a1e40e12029140ebfba969ce3ef2965029c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea91a1e40e12029140ebfba969ce3ef2965029c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cea91a1e40e12029140ebfba969ce3ef2965029c"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 35,
      "deletions": 30
    },
    "files": [
      {
        "sha": "816b3ead0cce90989bf27cf0d4423ec9065ec8e6",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
        "patch": "@@ -199,3 +199,27 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+std::string serviceFlagToStr(const uint64_t mask, const int bit)\n+{\n+    switch (ServiceFlags(mask)) {\n+    case NODE_NONE: abort();  // impossible\n+    case NODE_NETWORK:         return \"NETWORK\";\n+    case NODE_GETUTXO:         return \"GETUTXO\";\n+    case NODE_BLOOM:           return \"BLOOM\";\n+    case NODE_WITNESS:         return \"WITNESS\";\n+    case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n+    // Not using default, so we get warned when a case is missing\n+    }\n+\n+    std::ostringstream stream;\n+    stream.imbue(std::locale::classic());\n+    stream << \"UNKNOWN[\";\n+    if (bit < 8) {\n+        stream << mask;\n+    } else {\n+        stream << \"2^\" << bit;\n+    }\n+    stream << \"]\";\n+    return stream.str();\n+}"
      },
      {
        "sha": "2d29c2fee289dd142841820472321191528302a2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
        "patch": "@@ -237,7 +237,7 @@ const std::vector<std::string> &getAllNetMessageTypes();\n \n /** nServices flags */\n enum ServiceFlags : uint64_t {\n-    // NOTE: When adding here, be sure to update qt/guiutil.cpp's formatServicesStr too\n+    // NOTE: When adding here, be sure to update serviceFlagToStr too\n     // Nothing\n     NODE_NONE = 0,\n     // NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently\n@@ -268,6 +268,8 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+std::string serviceFlagToStr(uint64_t mask, int bit);\n+\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *"
      },
      {
        "sha": "0e316408c6d45e170fbc523a2be7601019373879",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
        "patch": "@@ -737,24 +737,6 @@ QString formatDurationStr(int secs)\n     return strList.join(\" \");\n }\n \n-QString serviceFlagToStr(const quint64 mask, const int bit)\n-{\n-    switch (ServiceFlags(mask)) {\n-    case NODE_NONE: abort();  // impossible\n-    case NODE_NETWORK:         return \"NETWORK\";\n-    case NODE_GETUTXO:         return \"GETUTXO\";\n-    case NODE_BLOOM:           return \"BLOOM\";\n-    case NODE_WITNESS:         return \"WITNESS\";\n-    case NODE_NETWORK_LIMITED: return \"NETWORK_LIMITED\";\n-    // Not using default, so we get warned when a case is missing\n-    }\n-    if (bit < 8) {\n-        return QString(\"%1[%2]\").arg(\"UNKNOWN\").arg(mask);\n-    } else {\n-        return QString(\"%1[2^%2]\").arg(\"UNKNOWN\").arg(bit);\n-    }\n-}\n-\n QString formatServicesStr(quint64 mask)\n {\n     QStringList strList;\n@@ -763,7 +745,7 @@ QString formatServicesStr(quint64 mask)\n         uint64_t check = 1ull << i;\n         if (mask & check)\n         {\n-            strList.append(serviceFlagToStr(check, i));\n+            strList.append(QString::fromStdString(serviceFlagToStr(mask, i)));\n         }\n     }\n "
      },
      {
        "sha": "c0bc5c1f3f6b5d127d68d4dd01d6d63c7d04b37c",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=c31bc5bcfddf440e9a1713f7ba2ca2bf9cfa8e2e",
        "patch": "@@ -736,18 +736,15 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n \n UniValue GetServicesNames(ServiceFlags services)\n {\n+    const uint64_t services_n = services;\n     UniValue servicesNames(UniValue::VARR);\n \n-    if (services & NODE_NETWORK)\n-        servicesNames.push_back(\"NETWORK\");\n-    if (services & NODE_GETUTXO)\n-        servicesNames.push_back(\"GETUTXO\");\n-    if (services & NODE_BLOOM)\n-        servicesNames.push_back(\"BLOOM\");\n-    if (services & NODE_WITNESS)\n-        servicesNames.push_back(\"WITNESS\");\n-    if (services & NODE_NETWORK_LIMITED)\n-        servicesNames.push_back(\"NETWORK_LIMITED\");\n+    for (int i = 0; i < 64; ++i) {\n+        const uint64_t mask = 1ull << i;\n+        if (services_n & mask) {\n+            servicesNames.push_back(serviceFlagToStr(mask, i));\n+        }\n+    }\n \n     return servicesNames;\n }"
      }
    ]
  }
]