[
  {
    "sha": "675a9338943e173edfff107cfe384635c5fd7963",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzVhOTMzODk0M2UxNzNlZGZmZjEwN2NmZTM4NDYzNWM1ZmQ3OTYz",
    "commit": {
      "author": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2014-05-05T17:28:22Z"
      },
      "committer": {
        "name": "super3",
        "email": "me@super3.org",
        "date": "2014-05-05T17:28:22Z"
      },
      "message": "Update BitRPC Script\n\nSpecial thanks to @jpiasetz",
      "tree": {
        "sha": "df4fad42e3bdb0f4bd92ece1c45ecff94d91cd85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df4fad42e3bdb0f4bd92ece1c45ecff94d91cd85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/675a9338943e173edfff107cfe384635c5fd7963",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675a9338943e173edfff107cfe384635c5fd7963",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/675a9338943e173edfff107cfe384635c5fd7963",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675a9338943e173edfff107cfe384635c5fd7963/comments",
    "author": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4ffe4e425b5a3f6fe4ff0ce7297608dfe6c7417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4ffe4e425b5a3f6fe4ff0ce7297608dfe6c7417",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4ffe4e425b5a3f6fe4ff0ce7297608dfe6c7417"
      }
    ],
    "stats": {
      "total": 437,
      "additions": 172,
      "deletions": 265
    },
    "files": [
      {
        "sha": "ca0a1b1c1fdce6531a3c728bf54fbaa8331f5cd5",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "modified",
        "additions": 172,
        "deletions": 265,
        "changes": 437,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/675a9338943e173edfff107cfe384635c5fd7963/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/675a9338943e173edfff107cfe384635c5fd7963/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=675a9338943e173edfff107cfe384635c5fd7963",
        "patch": "@@ -1,325 +1,232 @@\n-from jsonrpc import ServiceProxy\n import sys\n import string\n-import getpass\n-\n-# ===== BEGIN USER SETTINGS =====\n-# if you do not set these you will be prompted for a password for every command\n-rpcuser = \"\"\n-rpcpass = \"\"\n-# ====== END USER SETTINGS ======\n+from jsonrpc import ServiceProxy\n \n \n-if rpcpass == \"\":\n-    access = ServiceProxy(\"http://127.0.0.1:8332\")\n-else:\n-    access = ServiceProxy(\"http://\"+rpcuser+\":\"+rpcpass+\"@127.0.0.1:8332\")\n-cmd = sys.argv[1].lower()\n+class BitcoinRPC:\n+    def __init__(self, username=None, password=None):\n+        if rpcuser and rpcpass:\n+            url = \"http://%s:%s@127.0.0.1:8332\" % (username, password)\n+        else:\n+            url = \"http://127.0.0.1:8332\"\n+        self.access = ServiceProxy(url)\n \n-if cmd == \"backupwallet\":\n-    try:\n+    def backupwallet(self):\n         path = raw_input(\"Enter destination path/filename: \")\n-        print access.backupwallet(path)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getaccount\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address: \")\n-        print access.getaccount(addr)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getaccountaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaccountaddress(acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getaddressesbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaddressesbyaccount(acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getbalance\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+        return self.access.backupwallet(path)\n+\n+    def getaccount(self):\n+        address = raw_input(\"Enter a Bitcoin addressess: \")\n+        return self.access.getaccount(address)\n+\n+    def getaccountaddressess(self):\n+        account = raw_input(\"Enter an account name: \")\n+        return self.access.getaccountaddressess(account)\n+\n+    def getaddressessesbyaccount(self):\n+        account = raw_input(\"Enter an account name: \")\n+        return self.access.getaddressessesbyaccount(account)\n+\n+    def getbalance(self):\n+        account = raw_input(\"Enter an account (optional): \")\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         try:\n-            print access.getbalance(acct, mc)\n+            return self.access.getbalance(account, minimum_confirmations)\n         except:\n-            print access.getbalance()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.getbalance()\n \n-elif cmd == \"getblockbycount\":\n-    try:\n+    def getblockbycount(self):\n         height = raw_input(\"Height: \")\n-        print access.getblockbycount(height)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getblockcount\":\n-    try:\n-        print access.getblockcount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getblocknumber\":\n-    try:\n-        print access.getblocknumber()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getconnectioncount\":\n-    try:\n-        print access.getconnectioncount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getdifficulty\":\n-    try:\n-        print access.getdifficulty()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getgenerate\":\n-    try:\n-        print access.getgenerate()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"gethashespersec\":\n-    try:\n-        print access.gethashespersec()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getinfo\":\n-    try:\n-        print access.getinfo()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getnewaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n+        return self.access.getblockbycount(height)\n+\n+    def getblockcount(self):\n+        return self.access.getblockcount()\n+\n+    def getblocknumber(self):\n+        return self.access.getblocknumber()\n+\n+    def getconnectioncount(self):\n+        return self.access.getconnectioncount()\n+\n+    def getdifficulty(self):\n+        return self.access.getdifficulty()\n+\n+    def getgenerate(self):\n+        return self.access.getgenerate()\n+\n+    def gethashespersec(self):\n+        return self.access.gethashespersec()\n+\n+    def getinfo(self):\n+        return self.access.getinfo()\n+\n+    def getnewaddressess(self):\n+        account = raw_input(\"Enter an account name: \")\n         try:\n-            print access.getnewaddress(acct)\n+            return self.access.getnewaddressess(account)\n         except:\n-            print access.getnewaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getreceivedbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+            return self.access.getnewaddressess()\n+\n+    def getreceivedbyaccount(self):\n+        account = raw_input(\"Enter an account (optional): \")\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         try:\n-            print access.getreceivedbyaccount(acct, mc)\n+            return self.access.getreceivedbyaccount(\n+                account, minimum_confirmations)\n         except:\n-            print access.getreceivedbyaccount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"getreceivedbyaddress\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+            return self.access.getreceivedbyaccount()\n+\n+    def getreceivedbyaddressess(self):\n+        address = raw_input(\"Enter a Bitcoin addressess (optional): \")\n+        minimum_confirmations = raw_input(\n+            \"Minimum confirmations (optional): \")\n         try:\n-            print access.getreceivedbyaddress(addr, mc)\n+            return self.access.getreceivedbyaddressess(\n+                address, minimum_confirmations)\n         except:\n-            print access.getreceivedbyaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.getreceivedbyaddressess()\n \n-elif cmd == \"gettransaction\":\n-    try:\n+    def gettransaction(self):\n         txid = raw_input(\"Enter a transaction ID: \")\n-        print access.gettransaction(txid)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+        return self.access.gettransaction(txid)\n \n-elif cmd == \"getwork\":\n-    try:\n+    def getwork(self):\n         data = raw_input(\"Data (optional): \")\n         try:\n-            print access.gettransaction(data)\n+            return self.access.gettransaction(data)\n         except:\n-            print access.gettransaction()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.gettransaction()\n \n-elif cmd == \"help\":\n-    try:\n+    def help(self):\n         cmd = raw_input(\"Command (optional): \")\n         try:\n-            print access.help(cmd)\n+            return self.access.help(cmd)\n         except:\n-            print access.help()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.help()\n \n-elif cmd == \"listaccounts\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+    def listaccounts(self):\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         try:\n-            print access.listaccounts(mc)\n+            return self.access.listaccounts(minimum_confirmations)\n         except:\n-            print access.listaccounts()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"listreceivedbyaccount\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n+            return self.access.listaccounts()\n+\n+    def listreceivedbyaccount(self):\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n+        include_empty = raw_input(\"Include empty? (true/false, optional): \")\n         try:\n-            print access.listreceivedbyaccount(mc, incemp)\n+            return self.access.listreceivedbyaccount(\n+                minimum_confirmations, include_empty)\n         except:\n-            print access.listreceivedbyaccount()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"listreceivedbyaddress\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n+            return self.access.listreceivedbyaccount()\n+\n+    def listreceivedbyaddressess(self):\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n+        include_empty = raw_input(\"Include empty? (true/false, optional): \")\n         try:\n-            print access.listreceivedbyaddress(mc, incemp)\n+            return self.access.listreceivedbyaddressess(\n+                minimum_confirmations, include_empty)\n         except:\n-            print access.listreceivedbyaddress()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.listreceivedbyaddressess()\n \n-elif cmd == \"listtransactions\":\n-    try:\n-        acct = raw_input(\"Account (optional): \")\n+    def listtransactions(self):\n+        account = raw_input(\"Account (optional): \")\n         count = raw_input(\"Number of transactions (optional): \")\n-        frm = raw_input(\"Skip (optional):\")\n+        frm = raw_input(\"Skip (optional): \")\n         try:\n-            print access.listtransactions(acct, count, frm)\n+            return self.access.listtransactions(account, count, frm)\n         except:\n-            print access.listtransactions()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.listtransactions()\n \n-elif cmd == \"move\":\n-    try:\n+    def move(self):\n         frm = raw_input(\"From: \")\n         to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+        amount = raw_input(\"Amount: \")\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         comment = raw_input(\"Comment (optional): \")\n         try:\n-            print access.move(frm, to, amt, mc, comment)\n+            return self.access.move(\n+                frm, to, amount, minimum_confirmations, comment)\n         except:\n-            print access.move(frm, to, amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.move(frm, to, amount)\n \n-elif cmd == \"sendfrom\":\n-    try:\n+    def sendfrom(self):\n         frm = raw_input(\"From: \")\n         to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+        amount = raw_input(\"Amount: \")\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n+        comment_to = raw_input(\"Comment-to (optional): \")\n         try:\n-            print access.sendfrom(frm, to, amt, mc, comment, commentto)\n+            return self.access.sendfrom(\n+                frm, to, amount, minimum_confirmations, comment, comment_to)\n         except:\n-            print access.sendfrom(frm, to, amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n+            return self.access.sendfrom(frm, to, amount)\n \n-elif cmd == \"sendmany\":\n-    try:\n+    def sendmany(self):\n         frm = raw_input(\"From: \")\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n+        to = raw_input(\n+            \"To (format addressess1:amount1,addressess2:amount2,...): \")\n+        minimum_confirmations = raw_input(\"Minimum confirmations (optional): \")\n         comment = raw_input(\"Comment (optional): \")\n         try:\n-            print access.sendmany(frm,to,mc,comment)\n+            return self.access.sendmany(\n+                rm, to, minimum_confirmations, comment)\n         except:\n-            print access.sendmany(frm,to)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"sendtoaddress\":\n-    try:\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        amt = raw_input(\"Amount:\")\n+            return self.access.sendmany(frm, to)\n+\n+    def sendtoaddressess(self):\n+        to = raw_input(\n+            \"To (format addressess1:amount1,addressess2:amount2,...): \")\n+        amount = raw_input(\"Amount: \")\n         comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n+        comment_to = raw_input(\"Comment-to (optional): \")\n         try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n+            return self.access.sendtoaddressess(\n+                to, amount, comment, comment_to)\n         except:\n-            print access.sendtoaddress(to,amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"setaccount\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"setgenerate\":\n-    try:\n-        gen= raw_input(\"Generate? (true/false): \")\n-        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional):\")\n+            return self.access.sendtoaddressess(to, amount)\n+\n+    def setaccount(self):\n+        address = raw_input(\"Address: \")\n+        account = raw_input(\"Account: \")\n+        return self.access.setaccount(address, account)\n+\n+    def setgenerate(self):\n+        gen = raw_input(\"Generate? (true/false): \")\n+        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional): \")\n         try:\n-            print access.setgenerate(gen, cpus)\n+            return self.access.setgenerate(gen, cpus)\n         except:\n-            print access.setgenerate(gen)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"settxfee\":\n-    try:\n-        amt = raw_input(\"Amount:\")\n-        print access.settxfee(amt)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"stop\":\n-    try:\n-        print access.stop()\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"validateaddress\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        print access.validateaddress(addr)\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"walletpassphrase\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n-        access.walletpassphrase(pwd, 60)\n-        print \"\\n---Wallet unlocked---\\n\"\n-    except:\n-        print \"\\n---An error occurred---\\n\"\n-\n-elif cmd == \"walletpassphrasechange\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter old wallet passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Enter new wallet passphrase: \")\n-        access.walletpassphrasechange(pwd, pwd2)\n-        print\n-        print \"\\n---Passphrase changed---\\n\"\n-    except:\n-        print\n-        print \"\\n---An error occurred---\\n\"\n-        print\n-\n-else:\n+            return self.access.setgenerate(gen)\n+\n+    def settxfee(self):\n+        amount = raw_input(\"Amount: \")\n+        return self.access.settxfee(amount)\n+\n+    def stop(self):\n+        return self.access.stop()\n+\n+    def validateaddressess(self):\n+        address = raw_input(\"Address: \")\n+        return self.access.validateaddressess(address)\n+\n+    def walletpassphrase(self):\n+        password = raw_input(\"Enter wallet passphrase: \")\n+        self.access.walletpassphrase(password, 60)\n+        return \"\\n---Wallet unlocked---\\n\"\n+\n+    def walletpassphrasechange(self):\n+        password = raw_input(\"Enter old wallet passphrase: \")\n+        new_password = raw_input(\"Enter new wallet passphrase: \")\n+        self.access.walletpassphrasechange(password, new_password)\n+        return \"\\n---Passphrase changed---\\n\"\n+\n+cmd = sys.argv[1].lower()\n+rpc_client = BitcoinRPC()\n+try:\n+    print getattr(rpc_client, cmd)\n+except AttributeError:\n     print \"Command not found or not supported\"\n+except:\n+    print \"\\n---An error occurred---\\n\"\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "f2b2201014cebc8c37a05209689b003caa693bca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmIyMjAxMDE0Y2ViYzhjMzdhMDUyMDk2ODliMDAzY2FhNjkzYmNh",
    "commit": {
      "author": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2014-05-14T17:25:26Z"
      },
      "committer": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2014-05-14T17:25:26Z"
      },
      "message": "Small Bug Fixes",
      "tree": {
        "sha": "bec624b3177057c4d091695da1ec85d285fbffc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bec624b3177057c4d091695da1ec85d285fbffc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2b2201014cebc8c37a05209689b003caa693bca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b2201014cebc8c37a05209689b003caa693bca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b2201014cebc8c37a05209689b003caa693bca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b2201014cebc8c37a05209689b003caa693bca/comments",
    "author": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675a9338943e173edfff107cfe384635c5fd7963",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675a9338943e173edfff107cfe384635c5fd7963",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675a9338943e173edfff107cfe384635c5fd7963"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c6f71b88c3ed74e23705f81b647f35ad10d13fb4",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b2201014cebc8c37a05209689b003caa693bca/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b2201014cebc8c37a05209689b003caa693bca/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=f2b2201014cebc8c37a05209689b003caa693bca",
        "patch": "@@ -1,11 +1,11 @@\n+from jsonrpc import ServiceProxy\n import sys\n import string\n-from jsonrpc import ServiceProxy\n \n \n class BitcoinRPC:\n     def __init__(self, username=None, password=None):\n-        if rpcuser and rpcpass:\n+        if username and password:\n             url = \"http://%s:%s@127.0.0.1:8332\" % (username, password)\n         else:\n             url = \"http://127.0.0.1:8332\"\n@@ -225,8 +225,9 @@ def walletpassphrasechange(self):\n cmd = sys.argv[1].lower()\n rpc_client = BitcoinRPC()\n try:\n-    print getattr(rpc_client, cmd)\n+    func = getattr(rpc_client, cmd)\n+    print func()\n except AttributeError:\n     print \"Command not found or not supported\"\n except:\n-    print \"\\n---An error occurred---\\n\"\n\\ No newline at end of file\n+    print \"\\n---An error occurred---\\n\""
      }
    ]
  }
]