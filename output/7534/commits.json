[
  {
    "sha": "fed7d2f19c107dbbd6ada92b29acb9568691f26a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWQ3ZDJmMTljMTA3ZGJiZDZhZGE5MmIyOWFjYjk1Njg2OTFmMjZh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-14T11:05:15Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-15T20:24:55Z"
      },
      "message": "Bugfix: wallet: Check nLockTime before deciding an output is spendable",
      "tree": {
        "sha": "9838d3c3e6fb8ae279cf0811d12bc7d0abc5f9c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9838d3c3e6fb8ae279cf0811d12bc7d0abc5f9c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fed7d2f19c107dbbd6ada92b29acb9568691f26a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed7d2f19c107dbbd6ada92b29acb9568691f26a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fed7d2f19c107dbbd6ada92b29acb9568691f26a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed7d2f19c107dbbd6ada92b29acb9568691f26a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4382fbef56a0e04b0ed834e8b3a3a16f81db149"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 47,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e0d36fd6d2ed946f94cd1ef18ca6332f52a17f5e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "patch": "@@ -63,7 +63,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n-            if(out.fSpendable)\n+            if(out.IsSpendableAfter(*chainActive.Tip()))\n                 nBalance += out.tx->vout[out.i].nValue;\n \n         return nBalance;\n@@ -600,8 +600,9 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true, true);\n-        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n+        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE && out.IsSpendableAfter(*chainActive.Tip())) {\n             vCoins.push_back(out);\n+        }\n     }\n \n     BOOST_FOREACH(const COutput& out, vCoins)\n@@ -615,8 +616,9 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         }\n \n         CTxDestination address;\n-        if(!out.fSpendable || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address))\n+        if(!out.IsSpendableAfter(*chainActive.Tip()) || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address)) {\n             continue;\n+        }\n         mapCoins[QString::fromStdString(CBitcoinAddress(address).ToString())].push_back(out);\n     }\n }"
      },
      {
        "sha": "7e02f8a6d0deb503f99b9e0f2b6231e01dc028e5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "patch": "@@ -2423,8 +2423,8 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n         entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->vout[out.i].nValue)));\n         entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n+        entry.push_back(Pair(\"spendable\", out.IsSpendableAfter(*chainActive.Tip())));\n+        entry.push_back(Pair(\"solvable\", out.IsSolvableAfter(*chainActive.Tip())));\n         results.push_back(entry);\n     }\n "
      },
      {
        "sha": "8a2423c3527160ad703725692ffd34f214ddcf42",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 2,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "patch": "@@ -77,6 +77,36 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue));\n }\n \n+bool COutput::IsSpendableAt(int nBlockHeight, int64_t nBlockTime) const\n+{\n+    if (!fMaybeSpendable) {\n+        return false;\n+    }\n+    if (!IsFinalTx(*tx, nBlockHeight, nBlockTime)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool COutput::IsSpendableAfter(const CBlockIndex& blockindex) const {\n+    return IsSpendableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast());\n+}\n+\n+bool COutput::IsSolvableAt(int nBlockHeight, int64_t nBlockTime) const\n+{\n+    if (!fMaybeSolvable) {\n+        return false;\n+    }\n+    if (!IsFinalTx(*tx, nBlockHeight, nBlockTime)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool COutput::IsSolvableAfter(const CBlockIndex& blockindex) const {\n+    return IsSolvableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast());\n+}\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -1900,7 +1930,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n \n     BOOST_FOREACH(const COutput &output, vCoins)\n     {\n-        if (!output.fSpendable)\n+        if (!output.IsSpendableAfter(*chainActive.Tip()))\n             continue;\n \n         const CWalletTx *pcoin = output.tx;\n@@ -1994,7 +2024,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if (!out.fSpendable)\n+            if (!out.IsSpendableAfter(*chainActive.Tip()))\n                  continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));"
      },
      {
        "sha": "5b94094b45cecced969a9229deb00aa49e4dcb84",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed7d2f19c107dbbd6ada92b29acb9568691f26a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "patch": "@@ -414,15 +414,20 @@ class COutput\n     const CWalletTx *tx;\n     int i;\n     int nDepth;\n-    bool fSpendable;\n-    bool fSolvable;\n+    bool fMaybeSpendable;\n+    bool fMaybeSolvable;\n \n     COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fMaybeSpendable = fSpendableIn; fMaybeSolvable = fSolvableIn;\n     }\n \n     std::string ToString() const;\n+\n+    bool IsSpendableAt(int nBlockHeight, int64_t nBlockTime) const;\n+    bool IsSpendableAfter(const CBlockIndex& blockindex) const;\n+    bool IsSolvableAt(int nBlockHeight, int64_t nBlockTime) const;\n+    bool IsSolvableAfter(const CBlockIndex& blockindex) const;\n };\n \n "
      }
    ]
  },
  {
    "sha": "864c493a3c640d22d38153fec14e4454a29a177a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjRjNDkzYTNjNjQwZDIyZDM4MTUzZmVjMTRlNDQ1NGEyOWExNzdh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-14T11:54:52Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-15T20:24:55Z"
      },
      "message": "Recognise a simple CLTV prefix to multisigs",
      "tree": {
        "sha": "fab87cd017f79024706cfd9b6efb969159069b29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fab87cd017f79024706cfd9b6efb969159069b29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/864c493a3c640d22d38153fec14e4454a29a177a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864c493a3c640d22d38153fec14e4454a29a177a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/864c493a3c640d22d38153fec14e4454a29a177a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864c493a3c640d22d38153fec14e4454a29a177a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed7d2f19c107dbbd6ada92b29acb9568691f26a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fed7d2f19c107dbbd6ada92b29acb9568691f26a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4784b703cb36367947f9c803856f1acdbe9149db",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -170,7 +170,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                     txnouttype type;\n                     vector<vector<unsigned char> > vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n-                            (type == TX_PUBKEY || type == TX_MULTISIG))\n+                            (type == TX_PUBKEY || type == TX_MULTISIG || type == TX_MULTISIG_CLTV))\n                         insert(COutPoint(hash, i));\n                 }\n                 break;"
      },
      {
        "sha": "d71e60f6d5c2c59153674296246a441e49104283",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -46,6 +46,8 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n             return false;\n         if (m < 1 || m > n)\n             return false;\n+    } else if (whichType == TX_MULTISIG_CLTV) {\n+        return false;\n     } else if (whichType == TX_NULL_DATA &&\n                (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;"
      },
      {
        "sha": "8bb1b22157265eaf465562170355cbf77e6955a9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -139,7 +139,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n             BOOST_FOREACH(const CTxDestination& addr, addresses)\n                 a.push_back(CBitcoinAddress(addr).ToString());\n             obj.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n+            if (whichType == TX_MULTISIG || whichType == TX_MULTISIG_CLTV)\n                 obj.push_back(Pair(\"sigsrequired\", nRequired));\n         }\n         return obj;"
      },
      {
        "sha": "0c2173a95c844f8061dfe0c19148f0df0c7721cb",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -88,6 +88,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n \n     case TX_MULTISIG:\n+    case TX_MULTISIG_CLTV:\n     {\n         // Only consider transactions \"mine\" if we own ALL the\n         // keys involved. Multi-signature transactions that are"
      },
      {
        "sha": "9e617f70d26ad90fcad11bac2359bb0e1def854e",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -179,6 +179,7 @@ enum opcodetype\n \n \n     // template matching params\n+    OP_U32INT = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,"
      },
      {
        "sha": "1b45ed80827c67f15f555a973126022dccc0666c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -350,6 +350,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             return result;\n         }\n     case TX_MULTISIG:\n+    case TX_MULTISIG_CLTV:\n         return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script, sigversion));\n     case TX_WITNESS_V0_SCRIPTHASH:\n         if (sigs1.witness.empty() || sigs1.witness.back().empty())"
      },
      {
        "sha": "e6c01ed296532793e75e418b9ca49154bb51d445",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -30,6 +30,7 @@ const char* GetTxnOutputType(txnouttype t)\n     case TX_PUBKEYHASH: return \"pubkeyhash\";\n     case TX_SCRIPTHASH: return \"scripthash\";\n     case TX_MULTISIG: return \"multisig\";\n+    case TX_MULTISIG_CLTV: return \"multisig_cltv\";\n     case TX_NULL_DATA: return \"nulldata\";\n     case TX_WITNESS_V0_KEYHASH: return \"witness_v0_keyhash\";\n     case TX_WITNESS_V0_SCRIPTHASH: return \"witness_v0_scripthash\";"
      },
      {
        "sha": "0b136ea5832f58d92c6534e69674d5cb49829cd8",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864c493a3c640d22d38153fec14e4454a29a177a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864c493a3c640d22d38153fec14e4454a29a177a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=864c493a3c640d22d38153fec14e4454a29a177a",
        "patch": "@@ -50,6 +50,7 @@ enum txnouttype\n     TX_PUBKEYHASH,\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n+    TX_MULTISIG_CLTV,\n     TX_NULL_DATA,\n     TX_WITNESS_V0_SCRIPTHASH,\n     TX_WITNESS_V0_KEYHASH,"
      }
    ]
  },
  {
    "sha": "bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDcxNzhhMGU0MDc3YjNiNDEzYmI3ZGQ3MWEwMWMzZjJhNTE4MmFh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-02-14T12:22:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-15T20:24:55Z"
      },
      "message": "Minimal RPC & wallet support for CLTV-enabled multisig addresses",
      "tree": {
        "sha": "b3746fc494196b96618694f5c8027ca54ae1d7a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3746fc494196b96618694f5c8027ca54ae1d7a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "864c493a3c640d22d38153fec14e4454a29a177a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864c493a3c640d22d38153fec14e4454a29a177a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/864c493a3c640d22d38153fec14e4454a29a177a"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 243,
      "deletions": 35
    },
    "files": [
      {
        "sha": "68a9a6856d39f38460d09cb5b5dbe6a1d3abc3c8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -63,7 +63,7 @@ CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n-            if(out.IsSpendableAfter(*chainActive.Tip()))\n+            if(out.IsSpendableAfter(*chainActive.Tip(), *wallet))\n                 nBalance += out.tx->vout[out.i].nValue;\n \n         return nBalance;\n@@ -600,7 +600,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true, true);\n-        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE && out.IsSpendableAfter(*chainActive.Tip())) {\n+        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE && out.IsSpendableAfter(*chainActive.Tip(), *wallet)) {\n             vCoins.push_back(out);\n         }\n     }\n@@ -616,7 +616,7 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         }\n \n         CTxDestination address;\n-        if(!out.IsSpendableAfter(*chainActive.Tip()) || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address)) {\n+        if(!out.IsSpendableAfter(*chainActive.Tip(), *wallet) || !ExtractDestination(cout.tx->vout[cout.i].scriptPubKey, address)) {\n             continue;\n         }\n         mapCoins[QString::fromStdString(CBitcoinAddress(address).ToString())].push_back(out);"
      },
      {
        "sha": "1ad72df9b0a53c98cd9cf9ef9b5e98fd0540cad0",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 5,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -216,11 +216,27 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n /**\n  * Used by addmultisigaddress / createmultisig:\n  */\n-CScript _createmultisig_redeemScript(const UniValue& params)\n+CScript _createmultisig_redeemScript(const UniValue& params, const UniValue& options)\n {\n     int nRequired = params[0].get_int();\n     const UniValue& keys = params[1].get_array();\n \n+    int64_t cltv_height = 0, cltv_time = 0;\n+    if (!options.isNull()) {\n+        std::vector<std::string> keys = options.getKeys();\n+        BOOST_FOREACH(const std::string& key, keys) {\n+            const UniValue& val = options[key];\n+            if (key == \"cltv_height\" && val.isNum()) {\n+                cltv_height = val.get_int64();\n+            } else\n+            if (key == \"cltv_time\" && val.isNum()) {\n+                cltv_time = val.get_int64();\n+            } else {\n+                throw runtime_error(strprintf(\"unknown key/type for option '%s'\", key));\n+            }\n+        }\n+    }\n+\n     // Gather public keys\n     if (nRequired < 1)\n         throw runtime_error(\"a multisignature address must require at least one key to redeem\");\n@@ -268,7 +284,7 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n             throw runtime_error(\" Invalid public key: \"+ks);\n         }\n     }\n-    CScript result = GetScriptForMultisig(nRequired, pubkeys);\n+    CScript result = GetScriptForMultisig(nRequired, pubkeys, cltv_height, cltv_time);\n \n     if (result.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         throw runtime_error(\n@@ -279,9 +295,9 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n \n UniValue createmultisig(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 2)\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n-        string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n+        string msg = \"createmultisig nrequired [\\\"key\\\",...] ( { options } )\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n \n@@ -292,6 +308,11 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n             \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n+            \"3. options        (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"cltv_height\\\"  (numeric, optional) Minimum block height before received funds can be spent\\n\"\n+            \"     \\\"cltv_time\\\"    (numeric, optional) Minimum approximate time before received funds can be spent (WARNING: This version of \" PACKAGE_NAME \" does not support spending time-locked coins)\\n\"\n+            \"   }\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -309,7 +330,11 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    UniValue options;\n+    if (params.size() > 2) {\n+        options = params[2];\n+    }\n+    CScript inner = _createmultisig_redeemScript(params, options);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n "
      },
      {
        "sha": "3f1b5f71342913a8ff05391515eaa8ba9abd2965",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -312,6 +312,11 @@ class CScriptNum\n         return m_value;\n     }\n \n+    int64_t getint64() const\n+    {\n+        return m_value;\n+    }\n+\n     std::vector<unsigned char> getvch() const\n     {\n         return serialize(m_value);"
      },
      {
        "sha": "c102096206cef0836701d899b6ff4615f3dd3cf7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -101,6 +101,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n \n     case TX_MULTISIG:\n+    case TX_MULTISIG_CLTV:\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n "
      },
      {
        "sha": "1e5030eb258b93a4878ad3bad5a202d8355d2a53",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 3,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -10,6 +10,8 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n+#include <stdexcept>\n+\n #include <boost/foreach.hpp>\n \n using namespace std;\n@@ -55,6 +57,9 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n         // Sender provides N pubkeys, receivers provides M signatures\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n+\n+        // Sender provides N pubkeys, receivers provides M signatures (with CLTV)\n+        mTemplates.insert(make_pair(TX_MULTISIG_CLTV, CScript() << OP_U32INT << OP_CHECKLOCKTIMEVERIFY << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n     }\n \n     vSolutionsRet.clear();\n@@ -114,7 +119,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n             {\n                 // Found a match\n                 typeRet = tplate.first;\n-                if (typeRet == TX_MULTISIG)\n+                if (typeRet == TX_MULTISIG || typeRet == TX_MULTISIG_CLTV)\n                 {\n                     // Additional checks for TX_MULTISIG:\n                     unsigned char m = vSolutionsRet.front()[0];\n@@ -167,6 +172,19 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n+            else if (opcode2 == OP_U32INT)\n+            {\n+                CScriptNum sn(0);\n+                try {\n+                    sn = CScriptNum(vch1, true, 5);\n+                } catch (scriptnum_error) {\n+                    break;\n+                }\n+                // 0 CLTV is pointless, so expect at least height 1\n+                if (sn < 1 || sn > std::numeric_limits<uint32_t>::max()) {\n+                    break;\n+                }\n+            }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n                 // Others must match exactly\n@@ -222,7 +240,7 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n         return false;\n     }\n \n-    if (typeRet == TX_MULTISIG)\n+    if (typeRet == TX_MULTISIG || typeRet == TX_MULTISIG_CLTV)\n     {\n         nRequiredRet = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n@@ -291,10 +309,25 @@ CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n     return CScript() << std::vector<unsigned char>(pubKey.begin(), pubKey.end()) << OP_CHECKSIG;\n }\n \n-CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys, const int64_t cltv_height, const int64_t cltv_time)\n {\n     CScript script;\n \n+    if (cltv_height > 0) {\n+        if (cltv_time) {\n+            throw std::invalid_argument(\"cannot lock for both height and time\");\n+        }\n+        if (cltv_height >= LOCKTIME_THRESHOLD) {\n+            throw std::invalid_argument(\"requested lock height is beyond locktime threshold\");\n+        }\n+        script << cltv_height << OP_CHECKLOCKTIMEVERIFY;\n+    } else if (cltv_time) {\n+        if (cltv_time < LOCKTIME_THRESHOLD || cltv_time > std::numeric_limits<uint32_t>::max()) {\n+            throw std::invalid_argument(\"requested lock time is outside of valid range\");\n+        }\n+        script << cltv_time << OP_CHECKLOCKTIMEVERIFY;\n+    }\n+\n     script << CScript::EncodeOP_N(nRequired);\n     BOOST_FOREACH(const CPubKey& key, keys)\n         script << ToByteVector(key);\n@@ -324,3 +357,36 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n     ret << OP_0 << ToByteVector(hash);\n     return ret;\n }\n+\n+bool IsSimpleCLTV(const CScript& script, int64_t& cltv_height, int64_t& cltv_time)\n+{\n+    CScript::const_iterator pc = script.begin();\n+    opcodetype opcode;\n+    vector<unsigned char> vch;\n+\n+    cltv_height = 0;\n+    cltv_time = 0;\n+\n+    if (!(script.GetOp(pc, opcode, vch)\n+       && opcode <= OP_PUSHDATA4\n+       && script.GetOp(pc, opcode)\n+       && opcode != OP_CHECKLOCKTIMEVERIFY)) {\n+        return false;\n+    }\n+\n+    CScriptNum sn(0);\n+    try {\n+        sn = CScriptNum(vch, true, 5);\n+    } catch (scriptnum_error) {\n+        return false;\n+    }\n+    if (sn < 0 || sn > std::numeric_limits<uint32_t>::max()) {\n+        return false;\n+    }\n+    if (sn < LOCKTIME_THRESHOLD) {\n+        cltv_height = sn.getint64();\n+    } else {\n+        cltv_time = sn.getint64();\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "f6aafb24d621453b121ef6f8ab993ee5d3db670c",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -79,7 +79,9 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n \n CScript GetScriptForDestination(const CTxDestination& dest);\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n-CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys, const int64_t cltv_height=0, const int64_t cltv_time=0);\n CScript GetScriptForWitness(const CScript& redeemscript);\n \n+bool IsSimpleCLTV(const CScript& script, int64_t& cltv_height, int64_t& cltv_time);\n+\n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "2991c6503c704160f717b693b8cc8c8cdecd4192",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -1115,7 +1115,16 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n     BOOST_CHECK(combined.scriptSig == scriptSig);\n \n-    // Hardest case:  Multisig 2-of-3\n+    // Hardest case:  Multisig 2-of-3 with CLTV\n+    scriptPubKey = GetScriptForMultisig(2, pubkeys, 0, 1455444340);\n+    keystore.AddCScript(scriptPubKey);\n+    SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n+    BOOST_CHECK(combined.scriptSig == scriptSig);\n+\n+    // Almost hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n@@ -1347,4 +1356,25 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK(s == expect);\n }\n \n+BOOST_AUTO_TEST_CASE(script_multisig_cltv)\n+{\n+    std::string pubKey(\"03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2\");\n+    std::vector<unsigned char> vchPubKey = ToByteVector(ParseHex(pubKey));\n+    std::vector<CPubKey> pubkeys;\n+    CScript script;\n+\n+    pubkeys.push_back(vchPubKey);\n+\n+    script = GetScriptForMultisig(1, pubkeys, 0, 1455444340);\n+    BOOST_CHECK_EQUAL(\"1455444340 OP_CHECKLOCKTIMEVERIFY 1 \" + pubKey + \" 1 OP_CHECKMULTISIG\", ScriptToAsmStr(script));\n+\n+    script = GetScriptForMultisig(1, pubkeys, 1234, 0);\n+    BOOST_CHECK_EQUAL(\"1234 OP_CHECKLOCKTIMEVERIFY 1 \" + pubKey + \" 1 OP_CHECKMULTISIG\", ScriptToAsmStr(script));\n+\n+    BOOST_REQUIRE_THROW(GetScriptForMultisig(1, pubkeys, 1455444340, 0), std::invalid_argument);\n+    BOOST_REQUIRE_THROW(GetScriptForMultisig(1, pubkeys, 0, 1234), std::invalid_argument);\n+    BOOST_REQUIRE_THROW(GetScriptForMultisig(1, pubkeys, 1234, 1455444340), std::invalid_argument);\n+    BOOST_REQUIRE_THROW(GetScriptForMultisig(1, pubkeys, 0, -40), std::invalid_argument);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "63eeea34de3e7f346c31d296f3f9adef37c631ec",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -961,7 +961,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n }\n \n // Defined in rpc/misc.cpp\n-extern CScript _createmultisig_redeemScript(const UniValue& params);\n+extern CScript _createmultisig_redeemScript(const UniValue& params, const UniValue& options);\n \n UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n {\n@@ -970,7 +970,7 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n \n     if (fHelp || params.size() < 2 || params.size() > 3)\n     {\n-        string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n+        string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( { options } )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n             \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n             \"If 'account' is specified (DEPRECATED), assign address to that account.\\n\"\n@@ -982,7 +982,10 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n             \"       \\\"address\\\"  (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ...,\\n\"\n             \"     ]\\n\"\n-            \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n+            \"3. options        (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"cltv_height\\\"  (numeric, optional) Minimum block height before received funds can be spent\\n\"\n+            \"   }\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"  (string) A bitcoin address associated with the keys.\\n\"\n@@ -999,11 +1002,30 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount;\n-    if (params.size() > 2)\n-        strAccount = AccountFromValue(params[2]);\n+    UniValue options(UniValue::VOBJ);\n+    if (params.size() > 2 && !params[2].isNull()) {\n+        if (params.type() == UniValue::VSTR) {\n+            // Deprecated account parameter\n+            strAccount = AccountFromValue(params[2].get_str());\n+        } else {\n+            const UniValue& optionsIn = params[2].get_obj();\n+            std::vector<std::string> keys = optionsIn.getKeys();\n+            BOOST_FOREACH(const std::string& key, keys) {\n+                const UniValue& val = optionsIn[key];\n+                if (key == \"account\") {\n+                    strAccount = AccountFromValue(val.get_str());\n+                    continue;\n+                }\n+                if (key == \"cltv_time\") {\n+                    throw runtime_error(\"cltv_time not supported\");\n+                }\n+                options.pushKV(key, val);\n+            }\n+        }\n+    }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(params, options);\n     CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n@@ -2423,8 +2445,8 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n         entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->vout[out.i].nValue)));\n         entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.IsSpendableAfter(*chainActive.Tip())));\n-        entry.push_back(Pair(\"solvable\", out.IsSolvableAfter(*chainActive.Tip())));\n+        entry.push_back(Pair(\"spendable\", out.IsSpendableAfter(*chainActive.Tip(), *pwalletMain)));\n+        entry.push_back(Pair(\"solvable\", out.IsSolvableAfter(*chainActive.Tip(), *pwalletMain)));\n         results.push_back(entry);\n     }\n "
      },
      {
        "sha": "efdbe2af0b1106b9851cac3953bc92c19f2e489c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 10,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -72,39 +72,85 @@ struct CompareValueOnly\n     }\n };\n \n+static bool IsSimpleCLTV(CScript script, bool& failure, int64_t& cltv_height, int64_t& cltv_time, const CKeyStore& keystore)\n+{\n+    failure = false;\n+\n+    if (script.IsPayToScriptHash()) {\n+        // Need to get redeem script template\n+        std::vector< std::vector<unsigned char> > vSolutions;\n+        txnouttype whichType;\n+        if (!(Solver(script, whichType, vSolutions)) && whichType == TX_SCRIPTHASH && !vSolutions.empty()) {\n+            failure = true;\n+            return false;\n+        }\n+        const CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        if (!keystore.GetCScript(scriptID, script)) {\n+            failure = true;\n+            return false;\n+        }\n+    }\n+\n+    return IsSimpleCLTV(script, cltv_height, cltv_time);\n+}\n+\n std::string COutput::ToString() const\n {\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue));\n }\n \n-bool COutput::IsSpendableAt(int nBlockHeight, int64_t nBlockTime) const\n+bool COutput::IsMature(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const\n+{\n+    if (!IsFinalTx(*tx, nBlockHeight, nBlockTime)) {\n+        return false;\n+    }\n+\n+    const CScript& script = tx->vout[i].scriptPubKey;\n+    bool failure;\n+    int64_t cltv_height, cltv_time;\n+    if (IsSimpleCLTV(script, failure, cltv_height, cltv_time, keystore)) {\n+        if (cltv_height && nBlockHeight < cltv_height) {\n+            return false;\n+        }\n+        if (cltv_time /* && nBlockTime < cltv_time */) {\n+            // SelectCoins & FundTransaction need to be taught how to deal with this first\n+            return false;\n+        }\n+    } else if (failure) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool COutput::IsSpendableAt(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const\n {\n     if (!fMaybeSpendable) {\n         return false;\n     }\n-    if (!IsFinalTx(*tx, nBlockHeight, nBlockTime)) {\n+    if (!IsMature(nBlockHeight, nBlockTime, keystore)) {\n         return false;\n     }\n     return true;\n }\n \n-bool COutput::IsSpendableAfter(const CBlockIndex& blockindex) const {\n-    return IsSpendableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast());\n+bool COutput::IsSpendableAfter(const CBlockIndex& blockindex, const CKeyStore& keystore) const {\n+    return IsSpendableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast(), keystore);\n }\n \n-bool COutput::IsSolvableAt(int nBlockHeight, int64_t nBlockTime) const\n+bool COutput::IsSolvableAt(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const\n {\n     if (!fMaybeSolvable) {\n         return false;\n     }\n-    if (!IsFinalTx(*tx, nBlockHeight, nBlockTime)) {\n+    if (!IsMature(nBlockHeight, nBlockTime, keystore)) {\n         return false;\n     }\n     return true;\n }\n \n-bool COutput::IsSolvableAfter(const CBlockIndex& blockindex) const {\n-    return IsSolvableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast());\n+bool COutput::IsSolvableAfter(const CBlockIndex& blockindex, const CKeyStore& keystore) const {\n+    return IsSolvableAt(blockindex.nHeight + 1, blockindex.GetMedianTimePast(), keystore);\n }\n \n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n@@ -1930,7 +1976,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n \n     BOOST_FOREACH(const COutput &output, vCoins)\n     {\n-        if (!output.IsSpendableAfter(*chainActive.Tip()))\n+        if (!output.IsSpendableAfter(*chainActive.Tip(), *this))\n             continue;\n \n         const CWalletTx *pcoin = output.tx;\n@@ -2024,7 +2070,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     {\n         BOOST_FOREACH(const COutput& out, vCoins)\n         {\n-            if (!out.IsSpendableAfter(*chainActive.Tip()))\n+            if (!out.IsSpendableAfter(*chainActive.Tip(), *this))\n                  continue;\n             nValueRet += out.tx->vout[out.i].nValue;\n             setCoinsRet.insert(make_pair(out.tx, out.i));\n@@ -2346,9 +2392,19 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // Note how the sequence number is set to max()-1 so that the\n                 // nLockTime set above actually works.\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n+                {\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n                                               std::numeric_limits<unsigned int>::max()-1));\n \n+                    // Make sure our nLockTime satisfies inputs\n+                    const CScript& script = coin.first->vout[coin.second].scriptPubKey;\n+                    bool failure;\n+                    int64_t cltv_height, cltv_time;\n+                    if (IsSimpleCLTV(script, failure, cltv_height, cltv_time, *this)) {\n+                        txNew.nLockTime = std::max(uint32_t(cltv_height), txNew.nLockTime);\n+                    }\n+                }\n+\n                 // Sign\n                 int nIn = 0;\n                 CTransaction txNewConst(txNew);"
      },
      {
        "sha": "460cf1d01fb549cf0ec7f2e4a84c632a1c8d2e56",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bd7178a0e4077b3b413bb7dd71a01c3f2a5182aa",
        "patch": "@@ -424,10 +424,11 @@ class COutput\n \n     std::string ToString() const;\n \n-    bool IsSpendableAt(int nBlockHeight, int64_t nBlockTime) const;\n-    bool IsSpendableAfter(const CBlockIndex& blockindex) const;\n-    bool IsSolvableAt(int nBlockHeight, int64_t nBlockTime) const;\n-    bool IsSolvableAfter(const CBlockIndex& blockindex) const;\n+    bool IsMature(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const;\n+    bool IsSpendableAt(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const;\n+    bool IsSpendableAfter(const CBlockIndex& blockindex, const CKeyStore& keystore) const;\n+    bool IsSolvableAt(int nBlockHeight, int64_t nBlockTime, const CKeyStore& keystore) const;\n+    bool IsSolvableAfter(const CBlockIndex& blockindex, const CKeyStore& keystore) const;\n };\n \n "
      }
    ]
  }
]