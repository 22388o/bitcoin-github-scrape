[
  {
    "sha": "cc61e687c26ca68271020a3214664943fcf61fe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzYxZTY4N2MyNmNhNjgyNzEwMjBhMzIxNDY2NDk0M2ZjZjYxZmU2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T18:11:49Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:37:16Z"
      },
      "message": "remove maxTxFee check outside of GetMinimumFee",
      "tree": {
        "sha": "04c4c9fe687f510baaeb543e78e7ccfb396b2861",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04c4c9fe687f510baaeb543e78e7ccfb396b2861"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc61e687c26ca68271020a3214664943fcf61fe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61e687c26ca68271020a3214664943fcf61fe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc61e687c26ca68271020a3214664943fcf61fe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61e687c26ca68271020a3214664943fcf61fe6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "776ba233e939fe41a74c6b2632b93a0679a32c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/776ba233e939fe41a74c6b2632b93a0679a32c71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/776ba233e939fe41a74c6b2632b93a0679a32c71"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 13,
      "deletions": 3
    },
    "files": [
      {
        "sha": "603f8b263a29b48b2c7f3b1f08c6be0648340994",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61e687c26ca68271020a3214664943fcf61fe6/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61e687c26ca68271020a3214664943fcf61fe6/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=cc61e687c26ca68271020a3214664943fcf61fe6",
        "patch": "@@ -513,6 +513,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         // Fee\n         nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, ::mempool, ::feeEstimator);\n+        if (nPayFee > maxTxFee) {\n+            nPayFee = maxTxFee;\n+        }\n         if (nPayFee > 0 && coinControl->nMinimumTotalFee > nPayFee)\n             nPayFee = coinControl->nMinimumTotalFee;\n "
      },
      {
        "sha": "098b252e68e75d8724f68ef39ff6103b672c41f4",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61e687c26ca68271020a3214664943fcf61fe6/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61e687c26ca68271020a3214664943fcf61fe6/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=cc61e687c26ca68271020a3214664943fcf61fe6",
        "patch": "@@ -167,6 +167,10 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n             nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator);\n         }\n \n+        if (nNewFee > maxTxFee) {\n+            nNewFee = maxTxFee;\n+        }\n+\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "a70ac3743ca013f11781f4809001510d6394b24e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc61e687c26ca68271020a3214664943fcf61fe6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc61e687c26ca68271020a3214664943fcf61fe6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc61e687c26ca68271020a3214664943fcf61fe6",
        "patch": "@@ -2599,6 +2599,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator);\n+\n+                // If total estimated fee is too high, just set to default maximum\n+                if (nFeeNeeded > maxTxFee) {\n+                    nFeeNeeded = maxTxFee;\n+                }\n+\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n@@ -2786,9 +2792,6 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     }\n     // prevent user from paying a fee below minRelayTxFee or minTxFee\n     nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n-    // But always obey the maximum\n-    if (nFeeNeeded > maxTxFee)\n-        nFeeNeeded = maxTxFee;\n     return nFeeNeeded;\n }\n "
      }
    ]
  },
  {
    "sha": "61ee854f53225c4c79056c0dea26f513be9fa6d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWVlODU0ZjUzMjI1YzRjNzkwNTZjMGRlYTI2ZjUxM2JlOWZhNmQ5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T18:13:07Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:37:17Z"
      },
      "message": "add FeeRate companions to Get_Fee wallet helpers",
      "tree": {
        "sha": "cf1772698d7887f3ccc38b39abee81a8d412f0a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf1772698d7887f3ccc38b39abee81a8d412f0a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61ee854f53225c4c79056c0dea26f513be9fa6d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ee854f53225c4c79056c0dea26f513be9fa6d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61ee854f53225c4c79056c0dea26f513be9fa6d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ee854f53225c4c79056c0dea26f513be9fa6d9/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc61e687c26ca68271020a3214664943fcf61fe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc61e687c26ca68271020a3214664943fcf61fe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc61e687c26ca68271020a3214664943fcf61fe6"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 33,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2bb2a70794988356903fd7bdaf6d75b2d58ad0b3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61ee854f53225c4c79056c0dea26f513be9fa6d9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61ee854f53225c4c79056c0dea26f513be9fa6d9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=61ee854f53225c4c79056c0dea26f513be9fa6d9",
        "patch": "@@ -2778,6 +2778,11 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n+CFeeRate CWallet::GetRequiredFeeRate()\n+{\n+    return std::max(minTxFee, ::minRelayTxFee);\n+}\n+\n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee)\n {\n     // payTxFee is the user-set global for desired feerate\n@@ -2795,7 +2800,22 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n     return nFeeNeeded;\n }\n \n-\n+CFeeRate CWallet::GetMinimumFeeRate(unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee)\n+{\n+    CFeeRate nFeeRateNeeded = payTxFee;\n+    // payTxFee is the user-set global for desired feerate\n+    // User didn't set: use -txconfirmtarget to estimate...\n+    if (nFeeRateNeeded == CFeeRate(0) || ignoreUserSetFee) {\n+        int estimateFoundTarget = nConfirmTarget;\n+        nFeeRateNeeded = estimator.estimateSmartFee(nConfirmTarget, &estimateFoundTarget, pool);\n+        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n+        if (nFeeRateNeeded == CFeeRate(0))\n+            nFeeRateNeeded = fallbackFee;\n+    }\n+    // prevent user from paying a fee below minRelayTxFee or minTxFee\n+    nFeeRateNeeded = std::max(nFeeRateNeeded, GetRequiredFeeRate());\n+    return nFeeRateNeeded;\n+}\n \n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)"
      },
      {
        "sha": "79c76b2961c41a06de1457b911a5a8e34fb848a6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61ee854f53225c4c79056c0dea26f513be9fa6d9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61ee854f53225c4c79056c0dea26f513be9fa6d9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=61ee854f53225c4c79056c0dea26f513be9fa6d9",
        "patch": "@@ -947,12 +947,24 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * and the required fee\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee = false);\n+    /**\n+     * Estimate the minimum fee rate considering user set parameters\n+     * and the required fee\n+     */\n+    static CFeeRate GetMinimumFeeRate(unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee = false);\n+\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n      */\n     static CAmount GetRequiredFee(unsigned int nTxBytes);\n \n+    /**\n+     * Return the minimum required fee taking into account the\n+     * floating relay fee and user set minimum transaction fee\n+     */\n+    static CFeeRate GetRequiredFeeRate();\n+\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      }
    ]
  },
  {
    "sha": "d0947cfda1197d79a9ea7361e6d873d6eaa12967",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDk0N2NmZGExMTk3ZDc5YTllYTczNjFlNmQ4NzNkNmVhYTEyOTY3",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T18:27:04Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:42:38Z"
      },
      "message": "Remove absolute fee estimator functions",
      "tree": {
        "sha": "137225103eb91200d70fee8064701699cd94ab44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/137225103eb91200d70fee8064701699cd94ab44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0947cfda1197d79a9ea7361e6d873d6eaa12967",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0947cfda1197d79a9ea7361e6d873d6eaa12967",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0947cfda1197d79a9ea7361e6d873d6eaa12967",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0947cfda1197d79a9ea7361e6d873d6eaa12967/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61ee854f53225c4c79056c0dea26f513be9fa6d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61ee854f53225c4c79056c0dea26f513be9fa6d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61ee854f53225c4c79056c0dea26f513be9fa6d9"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 4,
      "deletions": 26
    },
    "files": [
      {
        "sha": "bb72cca8e9b399e8b3a8b73abfa21142a477d80e",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "patch": "@@ -512,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, nTxConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFeeRate(nTxConfirmTarget, ::mempool, ::feeEstimator).GetFee(nBytes);\n         if (nPayFee > maxTxFee) {\n             nPayFee = maxTxFee;\n         }"
      },
      {
        "sha": "207b47980ce5970219ea15409908c0b2055253d9",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "patch": "@@ -160,11 +160,11 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     } else {\n         // if user specified a confirm target then don't consider any global payTxFee\n         if (specifiedConfirmTarget) {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, true);\n+            nNewFee = CWallet::GetMinimumFeeRate(newConfirmTarget, mempool, ::feeEstimator, true).GetFee(maxNewTxSize);\n         }\n         // otherwise use the regular wallet logic to select payTxFee or default confirm target\n         else {\n-            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator);\n+            nNewFee = CWallet::GetMinimumFeeRate(newConfirmTarget, mempool, ::feeEstimator).GetFee(maxNewTxSize);\n         }\n \n         if (nNewFee > maxTxFee) {"
      },
      {
        "sha": "ddb797441039520ca3182f6c2a99647a5b574f51",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "patch": "@@ -2598,7 +2598,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator);\n+                CAmount nFeeNeeded = GetMinimumFeeRate(currentConfirmationTarget, ::mempool, ::feeEstimator).GetFee(nBytes);\n \n                 // If total estimated fee is too high, just set to default maximum\n                 if (nFeeNeeded > maxTxFee) {\n@@ -2783,23 +2783,6 @@ CFeeRate CWallet::GetRequiredFeeRate()\n     return std::max(minTxFee, ::minRelayTxFee);\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee)\n-{\n-    // payTxFee is the user-set global for desired feerate\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n-    // User didn't set: use -txconfirmtarget to estimate...\n-    if (nFeeNeeded == 0 || ignoreUserSetFee) {\n-        int estimateFoundTarget = nConfirmTarget;\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, &estimateFoundTarget, pool).GetFee(nTxBytes);\n-        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n-        if (nFeeNeeded == 0)\n-            nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n-    }\n-    // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n-    return nFeeNeeded;\n-}\n-\n CFeeRate CWallet::GetMinimumFeeRate(unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee)\n {\n     CFeeRate nFeeRateNeeded = payTxFee;"
      },
      {
        "sha": "884975cf7616c33aa1d32e49223e0bfe22bc65ef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0947cfda1197d79a9ea7361e6d873d6eaa12967/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "patch": "@@ -942,11 +942,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n-    /**\n-     * Estimate the minimum fee considering user set parameters\n-     * and the required fee\n-     */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee = false);\n     /**\n      * Estimate the minimum fee rate considering user set parameters\n      * and the required fee"
      }
    ]
  },
  {
    "sha": "4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWJlYTcyZjI3OGE1Y2Q5ZDBlM2E2NWVjZGM0NmMyMzNlYjVhYmZi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T18:32:42Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:42:38Z"
      },
      "message": "rename Mempool GetMinFee to GetMinFeeRate",
      "tree": {
        "sha": "7997f974ca36c4663a4342d61af7164afbd16ca0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7997f974ca36c4663a4342d61af7164afbd16ca0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0947cfda1197d79a9ea7361e6d873d6eaa12967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0947cfda1197d79a9ea7361e6d873d6eaa12967"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4884f5bce2dba433488b8097467d521f94984e59",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -3260,7 +3260,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n         if (pto->nVersion >= FEEFILTER_VERSION && GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n             !(pto->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n-            CAmount currentFilter = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+            CAmount currentFilter = mempool.GetMinFeeRate(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             int64_t timeNow = GetTimeMicros();\n             if (timeNow > pto->nextSendTimeFeeFilter) {\n                 static CFeeRate default_feerate(DEFAULT_MIN_RELAY_TX_FEE);"
      },
      {
        "sha": "f5013be54a37fa5e3aac91cad842a4efcb0ff97d",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -566,7 +566,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n         *answerFoundAtTarget = confTarget - 1;\n \n     // If mempool is limiting txs , return at least the min feerate from the mempool\n-    CAmount minPoolFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount minPoolFee = pool.GetMinFeeRate(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     if (minPoolFee > 0 && minPoolFee > median)\n         return CFeeRate(minPoolFee);\n "
      },
      {
        "sha": "2a59df910357d7210d7b62f8646ca4ec2c060a34",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -1277,7 +1277,7 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n     size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFeeRate(maxmempool).GetFeePerK())));\n \n     return ret;\n }"
      },
      {
        "sha": "0fda1369b84248c21d506b6a135141b1ef68a2c9",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -478,7 +478,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK(!pool.exists(tx3.GetHash()));\n \n     CFeeRate maxFeeRateRemoved(25000, GetVirtualTransactionSize(tx3) + GetVirtualTransactionSize(tx2));\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n \n     CMutableTransaction tx4 = CMutableTransaction();\n     tx4.vin.resize(2);\n@@ -555,27 +555,27 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n     // ... then feerate should drop 1/2 each halflife\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n     // ... with a 1/2 halflife when mempool is < 1/2 its target size\n \n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n     SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(1).GetFeePerK(), 1000);\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    BOOST_CHECK_EQUAL(pool.GetMinFeeRate(1).GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n \n     SetMockTime(0);"
      },
      {
        "sha": "7435ebb7fa5bd0f51bf714b126bb47a8edcc5e38",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -189,10 +189,10 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[5]).Time(GetTime()).Height(blocknum).FromTx(tx));\n     // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[5]\n     mpool.TrimToSize(1);\n-    BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n+    BOOST_CHECK(mpool.GetMinFeeRate(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n         BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateFee(i).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFeeRate(1).GetFeePerK());\n     }\n }\n "
      },
      {
        "sha": "77ea165c993479e81f1cf22562b2eee9f5f64d45",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -988,7 +988,7 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     return it->second.children;\n }\n \n-CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n+CFeeRate CTxMemPool::GetMinFeeRate(size_t sizelimit) const {\n     LOCK(cs);\n     if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n         return CFeeRate(rollingMinimumFeeRate);"
      },
      {
        "sha": "9ac5a7e39428fb4960443b96f65b443443d78f14",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -576,13 +576,13 @@ class CTxMemPool\n      *  already in it.  */\n     void CalculateDescendants(txiter it, setEntries &setDescendants);\n \n-    /** The minimum fee to get into the mempool, which may itself not be enough\n+    /** The minimum fee rate to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n       *  The incrementalRelayFee policy variable is used to bound the time it\n       *  takes the fee rate to go back down all the way to 0. When the feerate\n       *  would otherwise be half of this, it is set to 0 instead.\n       */\n-    CFeeRate GetMinFee(size_t sizelimit) const;\n+    CFeeRate GetMinFeeRate(size_t sizelimit) const;\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit.\n       *  pvNoSpendsRemaining, if set, will be populated with the list of transactions"
      },
      {
        "sha": "472522ea571086a47122cd19ad43e6569d7adaff",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -715,7 +715,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        CAmount mempoolRejectFee = pool.GetMinFeeRate(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }"
      },
      {
        "sha": "4ffa055bf5d5d87e276320375ab986e18b9dc51d",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "patch": "@@ -197,7 +197,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFeeRate(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         vErrors.push_back(strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n         currentResult = BumpFeeResult::WALLET_ERROR;"
      }
    ]
  },
  {
    "sha": "0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmMwYmEzNzk3ZDExNzVhMmZjYjA0ZjBjOGU1YjE1Y2MzNGI3ZWQ0",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T18:47:18Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:42:45Z"
      },
      "message": "pull out pre-transaction-completion fee estimation outside main loop",
      "tree": {
        "sha": "ef0309c555323be20082b608160d6b2e1f5ae48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef0309c555323be20082b608160d6b2e1f5ae48c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ebea72f278a5cd9d0e3a65ecdc46c233eb5abfb"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "2a406dff486be79e7b59f97b9d0ba75313b96b17",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
        "patch": "@@ -2420,8 +2420,21 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n-            nFeeRet = 0;\n+            // Estimate feerate and apply user constraints\n+\n+            // Allow to override the default confirmation target over the CoinControl instance\n+            int currentConfirmationTarget = nTxConfirmTarget;\n+            if (coinControl && coinControl->nConfirmTarget > 0) {\n+                currentConfirmationTarget = coinControl->nConfirmTarget;\n+            }\n+\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(currentConfirmationTarget, ::mempool, ::feeEstimator);\n+\n+            if (coinControl && coinControl->fOverrideFeeRate)\n+                nFeeRateNeeded = coinControl->nFeeRate;\n+\n             // Start with no fee and loop until there is enough fee\n+            nFeeRet = 0;\n             while (true)\n             {\n                 nChangePosInOut = nChangePosRequest;\n@@ -2593,11 +2606,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                // Allow to override the default confirmation target over the CoinControl instance\n-                int currentConfirmationTarget = nTxConfirmTarget;\n-                if (coinControl && coinControl->nConfirmTarget > 0)\n-                    currentConfirmationTarget = coinControl->nConfirmTarget;\n-\n                 CAmount nFeeNeeded = GetMinimumFeeRate(currentConfirmationTarget, ::mempool, ::feeEstimator).GetFee(nBytes);\n \n                 // If total estimated fee is too high, just set to default maximum\n@@ -2608,9 +2616,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n-                if (coinControl && coinControl->fOverrideFeeRate)\n-                    nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n-\n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n                 if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))"
      }
    ]
  },
  {
    "sha": "8e49f95642af548e219a1434d344ac676359812b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTQ5Zjk1NjQyYWY1NDhlMjE5YTE0MzRkMzQ0YWM2NzYzNTk4MTJi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T19:03:52Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:21Z"
      },
      "message": "replace GetRequiredFee with GetRequiredFeeRate",
      "tree": {
        "sha": "4f94e7997b3705a44c9dc1cc671de4e626a1e9ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f94e7997b3705a44c9dc1cc671de4e626a1e9ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e49f95642af548e219a1434d344ac676359812b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e49f95642af548e219a1434d344ac676359812b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e49f95642af548e219a1434d344ac676359812b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e49f95642af548e219a1434d344ac676359812b/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc0ba3797d1175a2fcb04f0c8e5b15cc34b7ed4"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 9,
      "deletions": 20
    },
    "files": [
      {
        "sha": "040c53ddfc2342bba0c86dfa6d11751e99ed2ea7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -593,9 +593,9 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     // how many satoshis the estimated fee can vary per byte we guess wrong\n     double dFeeVary;\n     if (payTxFee.GetFeePerK() > 0)\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFeeRate().GetFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(nTxConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFeeRate().GetFee(1000), ::feeEstimator.estimateSmartFee(nTxConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "c7b310fa5d7734631a45664d09e9abc0c3481c38",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -18,7 +18,7 @@\n #include \"txdb.h\" // for -dbcache defaults\n \n #ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\" // for CWallet::GetRequiredFee()\n+#include \"wallet/wallet.h\" // for CWallet::GetRequiredFeeRate()\n #endif\n \n #include <boost/thread.hpp>"
      },
      {
        "sha": "2d0f45e8325487f203b4ef1532d304bd5075b401",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -169,7 +169,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n+        ui->customFee->setSingleStep(CWallet::GetRequiredFeeRate().GetFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n@@ -592,7 +592,7 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n void SendCoinsDialog::setMinimumFee()\n {\n     ui->radioCustomPerKilobyte->setChecked(true);\n-    ui->customFee->setValue(CWallet::GetRequiredFee(1000));\n+    ui->customFee->setValue(CWallet::GetRequiredFeeRate().GetFee(1000));\n }\n \n void SendCoinsDialog::updateFeeSectionControls()\n@@ -652,7 +652,7 @@ void SendCoinsDialog::updateMinFeeLabel()\n {\n     if (model && model->getOptionsModel())\n         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFee(1000)) + \"/kB\")\n+            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFeeRate().GetFee(1000)) + \"/kB\")\n         );\n }\n \n@@ -667,7 +667,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n+                                                                std::max(CWallet::fallbackFee.GetFeePerK(), CWallet::GetRequiredFeeRate().GetFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)\n         ui->labelFeeEstimation->setText(\"\");\n         ui->fallbackFeeWarningLabel->setVisible(true);\n@@ -679,7 +679,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     else\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),\n-                                                                std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFee(1000))) + \"/kB\");\n+                                                                std::max(feeRate.GetFeePerK(), CWallet::GetRequiredFeeRate().GetFee(1000))) + \"/kB\");\n         ui->labelSmartFee2->hide();\n         ui->labelFeeEstimation->setText(tr(\"Estimated to begin confirmation within %n block(s).\", \"\", estimateFoundAtBlocks));\n         ui->fallbackFeeWarningLabel->setVisible(false);"
      },
      {
        "sha": "d76958a395270d0b5cdeb38a7a626c7734e26d78",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -148,7 +148,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+        CAmount requiredFee = CWallet::GetRequiredFeeRate().GetFee(maxNewTxSize);\n         if (totalFee < requiredFee) {\n             vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));"
      },
      {
        "sha": "92a797ccc13a76457c01b00272e664262e6a10d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -2778,11 +2778,6 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n     return true;\n }\n \n-CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n-{\n-    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n-}\n-\n CFeeRate CWallet::GetRequiredFeeRate()\n {\n     return std::max(minTxFee, ::minRelayTxFee);"
      },
      {
        "sha": "0591954f6e805d85d5b4e5ff5b86f39ee0949655",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e49f95642af548e219a1434d344ac676359812b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e49f95642af548e219a1434d344ac676359812b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8e49f95642af548e219a1434d344ac676359812b",
        "patch": "@@ -948,12 +948,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     static CFeeRate GetMinimumFeeRate(unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, bool ignoreUserSetFee = false);\n \n-    /**\n-     * Return the minimum required fee taking into account the\n-     * floating relay fee and user set minimum transaction fee\n-     */\n-    static CAmount GetRequiredFee(unsigned int nTxBytes);\n-\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "c1ccde5b526f9ea92a20f5383313644317842891",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWNjZGU1YjUyNmY5ZWE5MmEyMGY1MzgzMzEzNjQ0MzE3ODQyODkx",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-05T20:50:37Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:22Z"
      },
      "message": "Move subtractFeeFromOutput logic to after full transaction fee estimation",
      "tree": {
        "sha": "88e33df11d8b53fe4006973b56abb7512969c6dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88e33df11d8b53fe4006973b56abb7512969c6dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1ccde5b526f9ea92a20f5383313644317842891",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccde5b526f9ea92a20f5383313644317842891",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ccde5b526f9ea92a20f5383313644317842891",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccde5b526f9ea92a20f5383313644317842891/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e49f95642af548e219a1434d344ac676359812b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e49f95642af548e219a1434d344ac676359812b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e49f95642af548e219a1434d344ac676359812b"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 80,
      "deletions": 59
    },
    "files": [
      {
        "sha": "18fb01e3c5ca196bdb381063cca167da4af685fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 59,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1ccde5b526f9ea92a20f5383313644317842891/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1ccde5b526f9ea92a20f5383313644317842891/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c1ccde5b526f9ea92a20f5383313644317842891",
        "patch": "@@ -2441,43 +2441,17 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n-                bool fFirst = true;\n \n-                CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n-                // vouts to the payees\n-                for (const auto& recipient : vecSend)\n-                {\n+                // First construct the transaction with no inputs and outputs to payees\n+                for (const auto& recipient : vecSend) {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n-\n-                    if (recipient.fSubtractFeeFromAmount)\n-                    {\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n-\n-                        if (fFirst) // first receiver pays the remainder not divisible by output count\n-                        {\n-                            fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n-                        }\n-                    }\n-\n-                    if (IsDust(txout, ::dustRelayFee))\n-                    {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n-                        {\n-                            if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\");\n-                            else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                        }\n-                        else\n-                            strFailReason = _(\"Transaction amount too small\");\n-                        return false;\n-                    }\n                     txNew.vout.push_back(txout);\n                 }\n \n+                CAmount nValueToSelect = nValue;\n+                if (nSubtractFeeFromAmount == 0)\n+                    nValueToSelect += nFeeRet;\n+\n                 // Choose coins to use\n                 CAmount nValueIn = 0;\n                 setCoins.clear();\n@@ -2524,31 +2498,9 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                     CTxOut newTxOut(nChange, scriptChange);\n \n-                    // We do not move dust-change to fees, because the sender would end up paying more than requested.\n-                    // This would be against the purpose of the all-inclusive feature.\n-                    // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && IsDust(newTxOut, ::dustRelayFee))\n-                    {\n-                        CAmount nDust = GetDustThreshold(newTxOut, ::dustRelayFee) - newTxOut.nValue;\n-                        newTxOut.nValue += nDust; // raise change until no more dust\n-                        for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n-                        {\n-                            if (vecSend[i].fSubtractFeeFromAmount)\n-                            {\n-                                txNew.vout[i].nValue -= nDust;\n-                                if (IsDust(txNew.vout[i], ::dustRelayFee))\n-                                {\n-                                    strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n-                                    return false;\n-                                }\n-                                break;\n-                            }\n-                        }\n-                    }\n-\n-                    // Never create dust outputs; if we would, just\n-                    // add the dust to the fee.\n-                    if (IsDust(newTxOut, ::dustRelayFee))\n+                    // Don't create dust change unless subtracting fee from outputs;\n+                    // Instead just add the dust to the fee.\n+                    if (nSubtractFeeFromAmount == 0 && IsDust(newTxOut, dustRelayFee))\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n@@ -2567,8 +2519,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             return false;\n                         }\n \n-                        std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n-                        txNew.vout.insert(position, newTxOut);\n+                        // For now stick change on end since we may adjust recipient/change values\n+                        txNew.vout.push_back(newTxOut);\n                     }\n                 } else {\n                     reservekey.ReturnKey();\n@@ -2624,6 +2576,75 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     return false;\n                 }\n \n+                // Now that we know required fee, if we are subtracting fee from amounts, do so\n+                if (nSubtractFeeFromAmount > 0) {\n+                    assert(vecSend.size() <= txNew.vout.size());\n+                    bool fFirst = true;\n+                    // Iterate over non-change outputs\n+                    for (unsigned int i = 0; i < vecSend.size(); i++)\n+                    {\n+                        CTxOut& txout = txNew.vout[i];\n+                        const CRecipient& recipient = vecSend[i];\n+\n+                        if (recipient.fSubtractFeeFromAmount)\n+                        {\n+                            txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+\n+                            if (fFirst) // first receiver pays the remainder not divisible by output count\n+                            {\n+                                fFirst = false;\n+                                txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                            }\n+                        }\n+\n+                        if (IsDust(txout, dustRelayFee))\n+                        {\n+                            if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                            {\n+                                if (txout.nValue < 0)\n+                                    strFailReason = _(\"The transaction amount is too small to pay the fee\");\n+                                else\n+                                    strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                            }\n+                            else\n+                                strFailReason = _(\"Transaction amount too small\");\n+                            return false;\n+                        }\n+                    }\n+                    // We do not move dust-change to fees, because the sender would end up paying more than requested.\n+                    // This would be against the purpose of the all-inclusive feature.\n+                    // So instead we raise the change and deduct from the recipient.\n+                    if (nChangePosInOut != -1)\n+                    {\n+                        assert(txNew.vout.size() == vecSend.size() + 1);\n+                        CTxOut& txout = txNew.vout.back();\n+                        if (IsDust(txout, dustRelayFee)) {\n+                            CAmount nDust = GetDustThreshold(txout, dustRelayFee) - txout.nValue;\n+                            txout.nValue += nDust; // raise change until no more dust\n+                            for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n+                            {\n+                                if (vecSend[i].fSubtractFeeFromAmount)\n+                                {\n+                                    txNew.vout[i].nValue -= nDust;\n+                                    if (IsDust(txNew.vout[i], dustRelayFee))\n+                                    {\n+                                        strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n+                                        return false;\n+                                    }\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                // Move change into required position\n+                if (nChangePosInOut != -1) {\n+                    std::vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosInOut;\n+                    txNew.vout.insert(position, txNew.vout.back());\n+                    txNew.vout.pop_back();\n+                }\n+\n                 if (nFeeRet >= nFeeNeeded) {\n                     // Reduce fee to only the needed amount if we have change\n                     // output to increase.  This prevents potential overpayment"
      }
    ]
  },
  {
    "sha": "4e3f40980f185a608d83f05773230ade3d30d66a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTNmNDA5ODBmMTg1YTYwOGQ4M2YwNTc3MzIzMGFkZTNkMzBkNjZh",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-06T18:00:04Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:22Z"
      },
      "message": "Avoid needless copying of coins list in SelectCoinsMinConf",
      "tree": {
        "sha": "130e8dc63e748045ec3d460fee5bf022c3a3d561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/130e8dc63e748045ec3d460fee5bf022c3a3d561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e3f40980f185a608d83f05773230ade3d30d66a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e3f40980f185a608d83f05773230ade3d30d66a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e3f40980f185a608d83f05773230ade3d30d66a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e3f40980f185a608d83f05773230ade3d30d66a/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1ccde5b526f9ea92a20f5383313644317842891",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1ccde5b526f9ea92a20f5383313644317842891",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1ccde5b526f9ea92a20f5383313644317842891"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2f1b1a8c192fe9606863ef94ac0377621bcad7f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e3f40980f185a608d83f05773230ade3d30d66a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e3f40980f185a608d83f05773230ade3d30d66a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4e3f40980f185a608d83f05773230ade3d30d66a",
        "patch": "@@ -2100,7 +2100,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput>& vCoins,\n                                  std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();"
      },
      {
        "sha": "7be1c8372055fa29d9ec045e1936362564821fea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e3f40980f185a608d83f05773230ade3d30d66a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e3f40980f185a608d83f05773230ade3d30d66a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4e3f40980f185a608d83f05773230ade3d30d66a",
        "patch": "@@ -826,7 +826,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n "
      }
    ]
  },
  {
    "sha": "1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmY2Y2Q5YzIyOWYwMGQ1MGRmZmIzY2Y3ZWExM2ZmNjRmMzFjMmI5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-07T12:31:06Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:22Z"
      },
      "message": "move CalculateMaximumSignedTxSize to CWallet, use during tx creation",
      "tree": {
        "sha": "8b814ebede9326f6f9e43d8505d4e029d0134601",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b814ebede9326f6f9e43d8505d4e029d0134601"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e3f40980f185a608d83f05773230ade3d30d66a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e3f40980f185a608d83f05773230ade3d30d66a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e3f40980f185a608d83f05773230ade3d30d66a"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 26,
      "deletions": 35
    },
    "files": [
      {
        "sha": "5082058786a45713a5292d1d1cd9a92e6b327df3",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
        "patch": "@@ -14,33 +14,6 @@\n #include \"util.h\"\n #include \"net.h\"\n \n-// Calculate the size of the transaction assuming all signatures are max size\n-// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n-// TODO: re-use this in CWallet::CreateTransaction (right now\n-// CreateTransaction uses the constructed dummy-signed tx to do a priority\n-// calculation, but we should be able to refactor after priority is removed).\n-// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n-// be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n-{\n-    CMutableTransaction txNew(tx);\n-    std::vector<CInputCoin> vCoins;\n-    // Look up the inputs.  We should have already checked that this transaction\n-    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array.\n-    for (auto& input : tx.vin) {\n-        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n-        assert(mi != pWallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n-        vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n-    }\n-    if (!pWallet->DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n-        return -1;\n-    }\n-    return GetVirtualTransactionSize(txNew);\n-}\n-\n CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool specifiedConfirmTarget, CAmount totalFee, bool newTxReplaceable)\n     :\n     txid(std::move(txidIn)),\n@@ -121,7 +94,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, pWallet);\n+    const int64_t maxNewTxSize = pWallet->CalculateMaximumSignedTxSize(*wtx.tx);\n     if (maxNewTxSize < 0) {\n         vErrors.push_back(\"Transaction contains inputs that cannot be signed\");\n         currentResult = BumpFeeResult::INVALID_ADDRESS_OR_KEY;"
      },
      {
        "sha": "d1b08c9ce668e970ac15852f17cbbe59c1ad99b8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
        "patch": "@@ -1350,6 +1350,28 @@ bool CWallet::IsHDEnabled() const\n     return !hdChain.masterKeyID.IsNull();\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+int64_t CWallet::CalculateMaximumSignedTxSize(const CTransaction &tx) const\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<CInputCoin> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = mapWallet.find(input.prevout.hash);\n+        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n+    }\n+    if (!DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -2542,13 +2564,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (rbf ? 2 : 1)));\n \n-                // Fill in dummy signatures for fee calculation.\n-                if (!DummySignTx(txNew, setCoins)) {\n-                    strFailReason = _(\"Signing transaction failed\");\n-                    return false;\n-                }\n-\n-                unsigned int nBytes = GetVirtualTransactionSize(txNew);\n+                unsigned int nBytes = CalculateMaximumSignedTxSize(txNew);\n \n                 CTransaction txNewConst(txNew);\n "
      },
      {
        "sha": "16b32120b919b6acb097b7c81bdc8bffe92a88b0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
        "patch": "@@ -954,6 +954,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     static CFeeRate GetRequiredFeeRate();\n \n+    int64_t CalculateMaximumSignedTxSize(const CTransaction &tx) const;\n+\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      }
    ]
  },
  {
    "sha": "fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDQyZDlhYjU3YWM5NTU4MmNlY2JiM2EyNDhmMDMwZTE0YTZjMGYz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-15T16:54:20Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:22Z"
      },
      "message": "CalculateMaximumSignedTxSize returns -1 more consistently",
      "tree": {
        "sha": "7917732ce6e6d9d0b0f225004e2dd4d25b676e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7917732ce6e6d9d0b0f225004e2dd4d25b676e33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ff6cd9c229f00d50dffb3cf7ea13ff64f31c2b9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "282fdf894edb98c144abcbfcf1b6a98b41171504",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
        "patch": "@@ -1358,15 +1358,16 @@ int64_t CWallet::CalculateMaximumSignedTxSize(const CTransaction &tx) const\n     std::vector<CInputCoin> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n-    // wallet, with a valid index into the vout array.\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n     for (auto& input : tx.vin) {\n         const auto mi = mapWallet.find(input.prevout.hash);\n-        assert(mi != mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        if (mi == mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n         vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n     if (!DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(txNew);"
      }
    ]
  },
  {
    "sha": "ac04798c466469586438124ced2352d8efce694b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzA0Nzk4YzQ2NjQ2OTU4NjQzODEyNGNlZDIzNTJkOGVmY2U2OTRi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-15T16:59:29Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T14:43:22Z"
      },
      "message": "COutput caches marginal bytes to spend the output",
      "tree": {
        "sha": "71b7a2f6992a27888347dd1896d51c5e77d92546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71b7a2f6992a27888347dd1896d51c5e77d92546"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac04798c466469586438124ced2352d8efce694b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac04798c466469586438124ced2352d8efce694b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac04798c466469586438124ced2352d8efce694b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac04798c466469586438124ced2352d8efce694b/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd42d9ab57ac95582cecbb3a248f030e14a6c0f3"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e74b1251ab0882b52caf696f54a197a66bbfd952",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac04798c466469586438124ced2352d8efce694b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac04798c466469586438124ced2352d8efce694b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ac04798c466469586438124ced2352d8efce694b",
        "patch": "@@ -1418,6 +1418,21 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+int CWalletTx::GetSpendSize(unsigned int i) const\n+{\n+    CMutableTransaction txn;\n+    txn.vin.push_back(CTxIn(COutPoint(GetHash(), i)));\n+    int totalBytes = pwallet->CalculateMaximumSignedTxSize(txn);\n+    if (totalBytes == -1) return -1;\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    // We don't want to multi-count segwit empty vin and flag bytes\n+    if (tx->vout[i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        totalBytes -= 2;\n+    }\n+    return totalBytes - GetVirtualTransactionSize(CMutableTransaction());\n+}\n+\n void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n                            std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const\n {"
      },
      {
        "sha": "6446e07daab79cceea616c2b2e4a33fa1ebce2df",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac04798c466469586438124ced2352d8efce694b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac04798c466469586438124ced2352d8efce694b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ac04798c466469586438124ced2352d8efce694b",
        "patch": "@@ -449,6 +449,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n     CAmount GetChange() const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(unsigned int i) const;\n+\n     void GetAmounts(std::list<COutputEntry>& listReceived,\n                     std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n@@ -508,6 +511,9 @@ class COutput\n     int i;\n     int nDepth;\n \n+    /** Pre-computed estimated size of this output as a fully-signed input in a transaction */\n+    int nInputBytes;\n+\n     /** Whether we have the private keys to spend this output */\n     bool fSpendable;\n \n@@ -523,7 +529,12 @@ class COutput\n \n     COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn; nInputBytes = -1;\n+        // If known and signable by the given wallet, compute nInputBytes\n+        // Failure will keep this value -1\n+        if (fSpendable && tx) {\n+            nInputBytes = tx->GetSpendSize(i);\n+        }\n     }\n \n     std::string ToString() const;"
      }
    ]
  },
  {
    "sha": "c04b88f45e5d74238d34213391cf9d6e9522c698",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDRiODhmNDVlNWQ3NDIzOGQzNDIxMzM5MWNmOWQ2ZTk1MjJjNjk4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-15T17:35:13Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:42:51Z"
      },
      "message": "coincontrol updateLabels uses precomputed input sizes",
      "tree": {
        "sha": "b8bc872939042a339632aa604559cc9ecd6b5490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8bc872939042a339632aa604559cc9ecd6b5490"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c04b88f45e5d74238d34213391cf9d6e9522c698",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04b88f45e5d74238d34213391cf9d6e9522c698",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c04b88f45e5d74238d34213391cf9d6e9522c698",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04b88f45e5d74238d34213391cf9d6e9522c698/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ac04798c466469586438124ced2352d8efce694b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac04798c466469586438124ced2352d8efce694b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac04798c466469586438124ced2352d8efce694b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 6,
      "deletions": 13
    },
    "files": [
      {
        "sha": "bfc28152b46dc5bc40bdca5092e97c9f8c3cf1e7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c04b88f45e5d74238d34213391cf9d6e9522c698/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c04b88f45e5d74238d34213391cf9d6e9522c698/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=c04b88f45e5d74238d34213391cf9d6e9522c698",
        "patch": "@@ -475,21 +475,15 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         std::vector<unsigned char> witnessprogram;\n         if (out.tx->tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n         {\n-            nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n             fWitness = true;\n         }\n-        else if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n-        {\n-            CPubKey pubkey;\n-            CKeyID *keyid = boost::get<CKeyID>(&address);\n-            if (keyid && model->getPubKey(*keyid, pubkey))\n-            {\n-                nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n-            }\n-            else\n-                nBytesInputs += 148; // in all error cases, simply assume 148 here\n+\n+        // in all error cases, simply assume 148 here\n+        if (out.nInputBytes == -1) {\n+            nBytesInputs += 148;\n+        } else {\n+            nBytesInputs += out.nInputBytes;\n         }\n-        else nBytesInputs += 148;\n     }\n \n     // calculation\n@@ -503,7 +497,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n             // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n             nBytes += 2; // account for the serialized marker and flag bytes\n-            nBytes += nQuantity; // account for the witness byte that holds the number of stack items for each input.\n         }\n \n         // in the subtract fee from amount case, we can tell if zero change already and subtract the bytes, so that fee calculation afterwards is accurate"
      }
    ]
  },
  {
    "sha": "e1c7677650514978d2fd8bb636c4db8318cc8416",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWM3Njc3NjUwNTE0OTc4ZDJmZDhiYjYzNmM0ZGI4MzE4Y2M4NDE2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-08T14:34:01Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:42:51Z"
      },
      "message": "Use effective value of coins to target a defined feerate",
      "tree": {
        "sha": "f08ce4709d56dd4fa1bcd9c9d5b083fdf87849f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f08ce4709d56dd4fa1bcd9c9d5b083fdf87849f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1c7677650514978d2fd8bb636c4db8318cc8416",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c7677650514978d2fd8bb636c4db8318cc8416",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c7677650514978d2fd8bb636c4db8318cc8416",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c7677650514978d2fd8bb636c4db8318cc8416/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c04b88f45e5d74238d34213391cf9d6e9522c698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04b88f45e5d74238d34213391cf9d6e9522c698",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c04b88f45e5d74238d34213391cf9d6e9522c698"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 172,
      "deletions": 116
    },
    "files": [
      {
        "sha": "06507ff3608bd027debc2b7a8dd8aaf685778552",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c7677650514978d2fd8bb636c4db8318cc8416/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c7677650514978d2fd8bb636c4db8318cc8416/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=e1c7677650514978d2fd8bb636c4db8318cc8416",
        "patch": "@@ -39,7 +39,7 @@ static void CoinSelection(benchmark::State& state)\n \n     while (state.KeepRunning()) {\n         // Empty wallet.\n-        BOOST_FOREACH (COutput output, vCoins)\n+        for (auto& output : vCoins)\n             delete output.tx;\n         vCoins.clear();\n \n@@ -50,7 +50,7 @@ static void CoinSelection(benchmark::State& state)\n \n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n-        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet);\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet, CFeeRate(0));\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);"
      },
      {
        "sha": "c4b7dbde2b71c0389dcb483c3b31ec4b610022df",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 37,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e1c7677650514978d2fd8bb636c4db8318cc8416",
        "patch": "@@ -75,6 +75,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n     CAmount nValueRet;\n+    CFeeRate feeRate;\n \n     LOCK(testWallet.cs_wallet);\n \n@@ -84,24 +85,24 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         empty_wallet();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n \n         add_coin(1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 1 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 1 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n \n         add_coin(2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n \n         // we can make 3 cents of new  coins\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n \n         add_coin(5*CENT);           // add a mature 5 cent coin,\n@@ -111,33 +112,33 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, 6, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(38 * CENT, 6, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(37 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(37 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(38 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(38 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(34 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(34 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 7 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 7 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 8 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 8 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf( 9 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf( 9 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -151,30 +152,30 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(71 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK(!testWallet.SelectCoinsMinConf(72 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(71 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n+        BOOST_CHECK(!testWallet.SelectCoinsMinConf(72 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(16 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(11 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(11 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -183,11 +184,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin( 2*COIN);\n         add_coin( 3*COIN);\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(95 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(95 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(195 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(195 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -202,22 +203,22 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n@@ -226,7 +227,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         for (int j = 0; j < 20; j++)\n             add_coin(50000 * COIN);\n \n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(500000 * COIN, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(500000 * COIN, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n@@ -239,7 +240,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 7 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n@@ -249,7 +250,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 6 / 10);\n         add_coin(MIN_CHANGE * 8 / 10);\n         add_coin(1111 * MIN_CHANGE);\n-        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK( testWallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n@@ -260,12 +261,12 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 10001 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(MIN_CHANGE * 9990 / 100, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n         BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n@@ -275,7 +276,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n              // Create 676 inputs (=  (old MAX_STANDARD_TX_SIZE == 100000)  / 148 bytes per input)\n              for (uint16_t j = 0; j < 676; j++)\n                  add_coin(amt);\n-             BOOST_CHECK(testWallet.SelectCoinsMinConf(2000, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n+             BOOST_CHECK(testWallet.SelectCoinsMinConf(2000, 1, 1, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n              if (amt - 2000 < MIN_CHANGE) {\n                  // needs more than one input:\n                  uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n@@ -297,17 +298,17 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet, feeRate));\n+            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet, feeRate));\n             BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet , nValueRet, feeRate));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, 1, 6, 0, vCoins, setCoinsRet2, nValueRet, feeRate));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -327,8 +328,8 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n             {\n                 // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n                 // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet , nValueRet));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet2, nValueRet));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet , nValueRet, feeRate));\n+                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, 1, 6, 0, vCoins, setCoinsRet2, nValueRet, feeRate));\n                 if (equal_sets(setCoinsRet, setCoinsRet2))\n                     fails++;\n             }\n@@ -342,6 +343,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n {\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n+    CFeeRate feeRate;\n \n     LOCK(testWallet.cs_wallet);\n \n@@ -352,7 +354,7 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n         add_coin(1000 * COIN);\n     add_coin(3 * COIN);\n \n-    BOOST_CHECK(testWallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n+    BOOST_CHECK(testWallet.SelectCoinsMinConf(1003 * COIN, 1, 6, 0, vCoins, setCoinsRet, nValueRet, feeRate));\n     BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n     BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n "
      },
      {
        "sha": "1dfc5acbf516a5b116c6fed9a98f072dca0429ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 107,
        "deletions": 75,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e1c7677650514978d2fd8bb636c4db8318cc8416",
        "patch": "@@ -73,6 +73,15 @@ struct CompareValueOnly\n     }\n };\n \n+struct CompareEffectiveValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.eValue < t2.eValue;\n+    }\n+};\n+\n std::string COutput::ToString() const\n {\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n@@ -2119,7 +2128,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n                 //the selection random.\n                 if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n                 {\n-                    nTotal += vValue[i].txout.nValue;\n+                    nTotal += vValue[i].eValue;\n                     vfIncluded[i] = true;\n                     if (nTotal >= nTargetValue)\n                     {\n@@ -2129,7 +2138,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n                             nBest = nTotal;\n                             vfBest = vfIncluded;\n                         }\n-                        nTotal -= vValue[i].txout.nValue;\n+                        nTotal -= vValue[i].eValue;\n                         vfIncluded[i] = false;\n                     }\n                 }\n@@ -2139,7 +2148,7 @@ static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const C\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput>& vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CFeeRate effectiveFee) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n@@ -2149,9 +2158,9 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     std::vector<CInputCoin> vValue;\n     CAmount nTotalLower = 0;\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(const COutput &output, vCoins)\n+    for (auto& output : vCoins)\n     {\n         if (!output.fSpendable)\n             continue;\n@@ -2166,20 +2175,21 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n         int i = output.i;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+        // Tests do not cache effective size of input, avoid assertion\n+        CInputCoin coin = CInputCoin(pcoin, i, effectiveFee.GetFee((output.nInputBytes == -1) ? 0 : output.nInputBytes));\n \n-        if (coin.txout.nValue == nTargetValue)\n+        if (coin.eValue == nTargetValue)\n         {\n             setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n+            nValueRet += coin.eValue;\n             return true;\n         }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n+        else if (coin.eValue < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n+            nTotalLower += coin.eValue;\n         }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n+        else if (!coinLowestLarger || coin.eValue < coinLowestLarger->eValue)\n         {\n             coinLowestLarger = coin;\n         }\n@@ -2190,7 +2200,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n         for (unsigned int i = 0; i < vValue.size(); ++i)\n         {\n             setCoinsRet.insert(vValue[i]);\n-            nValueRet += vValue[i].txout.nValue;\n+            nValueRet += vValue[i].eValue;\n         }\n         return true;\n     }\n@@ -2200,12 +2210,12 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n         if (!coinLowestLarger)\n             return false;\n         setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n+        nValueRet += coinLowestLarger->eValue;\n         return true;\n     }\n \n     // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n+    std::sort(vValue.begin(), vValue.end(), CompareEffectiveValueOnly());\n     std::reverse(vValue.begin(), vValue.end());\n     std::vector<char> vfBest;\n     CAmount nBest;\n@@ -2217,17 +2227,17 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->eValue <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n+        nValueRet += coinLowestLarger->eValue;\n     }\n     else {\n         for (unsigned int i = 0; i < vValue.size(); i++)\n             if (vfBest[i])\n             {\n                 setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+                nValueRet += vValue[i].eValue;\n             }\n \n         if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n@@ -2244,18 +2254,19 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CFeeRate effectiveFee, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)\n     {\n-        BOOST_FOREACH(const COutput& out, vCoins)\n+        for (auto& out : vCoins)\n         {\n             if (!out.fSpendable)\n                  continue;\n-            nValueRet += out.tx->tx->vout[out.i].nValue;\n+            //TODO Account for witness empty-vin and flag\n+            nValueRet += (out.tx->tx->vout[out.i].nValue - effectiveFee.GetFee(out.nInputBytes));\n             setCoinsRet.insert(CInputCoin(out.tx, out.i));\n         }\n         return (nValueRet >= nTargetValue);\n@@ -2277,32 +2288,35 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             // Clearly invalid input, fail\n             if (pcoin->tx->vout.size() <= outpoint.n)\n                 return false;\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n+            // Just to calculate the marginal byte size\n+            COutput output(pcoin, outpoint.n, 0, true, true, true);\n+            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue - effectiveFee.GetFee(output.nInputBytes);\n             setPresetCoins.insert(CInputCoin(pcoin, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n     }\n \n     // remove preset inputs from vCoins\n-    for (std::vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n+    for (auto&& it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)\n     {\n         if (setPresetCoins.count(CInputCoin(it->tx, it->i)))\n             it = vCoins.erase(it);\n         else\n             ++it;\n     }\n \n+\n     size_t nMaxChainLength = std::min(GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT), GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT));\n     bool fRejectLongChains = GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, 0, vCoins, setCoinsRet, nValueRet) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, 2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::min((size_t)4, nMaxChainLength/3), vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength/2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::numeric_limits<uint64_t>::max(), vCoins, setCoinsRet, nValueRet));\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet, effectiveFee) ||\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, 0, vCoins, setCoinsRet, nValueRet, effectiveFee) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, 2, vCoins, setCoinsRet, nValueRet, effectiveFee)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::min((size_t)4, nMaxChainLength/3), vCoins, setCoinsRet, nValueRet, effectiveFee)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength/2, vCoins, setCoinsRet, nValueRet, effectiveFee)) ||\n+        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength, vCoins, setCoinsRet, nValueRet, effectiveFee)) ||\n+        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::numeric_limits<uint64_t>::max(), vCoins, setCoinsRet, nValueRet, effectiveFee));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n@@ -2471,77 +2485,87 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             if (coinControl && coinControl->fOverrideFeeRate)\n                 nFeeRateNeeded = coinControl->nFeeRate;\n \n-            // Start with no fee and loop until there is enough fee\n-            nFeeRet = 0;\n             while (true)\n             {\n+                // Track value of fee when input/output set is chosen\n+                nFeeRet = 0;\n+\n                 nChangePosInOut = nChangePosRequest;\n                 txNew.vin.clear();\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n+                // Get scriptPubKey to yourself for change\n+                // TODO: pass in scriptChange instead of reservekey so\n+                // change transaction isn't always pay-to-bitcoin-address\n+                CScript scriptChange;\n+\n+                // coin control: send change to custom address\n+                if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n+                    scriptChange = GetScriptForDestination(coinControl->destChange);\n+\n+                // no coin control: send change to newly generated address\n+                else\n+                {\n+                    // Note: We use a new key here to keep it from being obvious which side is the change.\n+                    //  The drawback is that by not reusing a previous key, the change may be lost if a\n+                    //  backup is restored, if the backup doesn't have the new private key for the change.\n+                    //  If we reused the old key, it would be possible to add code to look for and\n+                    //  rediscover unknown transactions that were written with keys of ours to recover\n+                    //  post-backup change.\n+\n+                    // Reserve a new key pair from key pool\n+                    CPubKey vchPubKey;\n+                    bool ret;\n+                    ret = reservekey.GetReservedKey(vchPubKey, true);\n+                    if (!ret)\n+                    {\n+                        strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n+                        return false;\n+                    }\n+\n+                    scriptChange = GetScriptForDestination(vchPubKey.GetID());\n+                }\n+\n                 // First construct the transaction with no inputs and outputs to payees\n                 for (const auto& recipient : vecSend) {\n                     CTxOut txout(recipient.nAmount, recipient.scriptPubKey);\n                     txNew.vout.push_back(txout);\n                 }\n \n+                // Append dummy change output, to make sure we are targeting suffient fee\n+                txNew.vout.push_back(CTxOut(0, scriptChange));\n+\n+                // The estimated fee to cover the transaction minus the inputs\n+                CAmount outputFee = nFeeRateNeeded.GetFee(GetVirtualTransactionSize(txNew));\n+\n+                // Now that we estimate full size with change, remove\n+                txNew.vout.pop_back();\n+\n                 CAmount nValueToSelect = nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+                if (nSubtractFeeFromAmount == 0) {\n+                    nValueToSelect += outputFee;\n+                }\n \n                 // Choose coins to use\n-                CAmount nValueIn = 0;\n+                CAmount nSelectedEValue = 0;\n                 setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                if (!SelectCoins(vAvailableCoins, nSubtractFeeFromAmount > 0 ? CFeeRate(0) : nFeeRateNeeded, nValueToSelect, setCoins, nSelectedEValue, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n \n-                const CAmount nChange = nValueIn - nValueToSelect;\n+                const CAmount nChange = nSelectedEValue - nValueToSelect;\n                 if (nChange > 0)\n                 {\n-                    // Fill a vout to ourself\n-                    // TODO: pass in scriptChange instead of reservekey so\n-                    // change transaction isn't always pay-to-bitcoin-address\n-                    CScript scriptChange;\n-\n-                    // coin control: send change to custom address\n-                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange = GetScriptForDestination(coinControl->destChange);\n-\n-                    // no coin control: send change to newly generated address\n-                    else\n-                    {\n-                        // Note: We use a new key here to keep it from being obvious which side is the change.\n-                        //  The drawback is that by not reusing a previous key, the change may be lost if a\n-                        //  backup is restored, if the backup doesn't have the new private key for the change.\n-                        //  If we reused the old key, it would be possible to add code to look for and\n-                        //  rediscover unknown transactions that were written with keys of ours to recover\n-                        //  post-backup change.\n-\n-                        // Reserve a new key pair from key pool\n-                        CPubKey vchPubKey;\n-                        bool ret;\n-                        ret = reservekey.GetReservedKey(vchPubKey, true);\n-                        if (!ret)\n-                        {\n-                            strFailReason = _(\"Keypool ran out, please call keypoolrefill first\");\n-                            return false;\n-                        }\n-\n-                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n-                    }\n-\n                     CTxOut newTxOut(nChange, scriptChange);\n \n                     // Don't create dust change unless subtracting fee from outputs;\n                     // Instead just add the dust to the fee.\n                     if (nSubtractFeeFromAmount == 0 && IsDust(newTxOut, dustRelayFee))\n                     {\n                         nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n                         reservekey.ReturnKey();\n                     }\n                     else\n@@ -2576,9 +2600,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n                 bool rbf = coinControl ? coinControl->signalRbf : fWalletRbf;\n-                for (const auto& coin : setCoins)\n+                for (const auto& coin : setCoins) {\n+                    nFeeRet += coin.txout.nValue;\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               std::numeric_limits<unsigned int>::max() - (rbf ? 2 : 1)));\n+                }\n+\n+                for (const auto& output : txNew.vout) {\n+                    nFeeRet -= output.nValue;\n+                }\n \n                 unsigned int nBytes = CalculateMaximumSignedTxSize(txNew);\n \n@@ -2590,7 +2620,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFeeRate(currentConfirmationTarget, ::mempool, ::feeEstimator).GetFee(nBytes);\n+                CAmount nFeeNeeded = nFeeRateNeeded.GetFee(nBytes);\n \n                 // If total estimated fee is too high, just set to default maximum\n                 if (nFeeNeeded > maxTxFee) {\n@@ -2610,6 +2640,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                 // Now that we know required fee, if we are subtracting fee from amounts, do so\n                 if (nSubtractFeeFromAmount > 0) {\n+                    assert(nFeeRet == 0);\n                     assert(vecSend.size() <= txNew.vout.size());\n                     bool fFirst = true;\n                     // Iterate over non-change outputs\n@@ -2620,18 +2651,20 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n \n                         if (recipient.fSubtractFeeFromAmount)\n                         {\n-                            txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+                            txout.nValue -= nFeeNeeded / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+                            nFeeRet += nFeeNeeded / nSubtractFeeFromAmount;\n \n                             if (fFirst) // first receiver pays the remainder not divisible by output count\n                             {\n                                 fFirst = false;\n-                                txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                                txout.nValue -= nFeeNeeded % nSubtractFeeFromAmount;\n+                                nFeeRet += nFeeNeeded % nSubtractFeeFromAmount;\n                             }\n                         }\n \n                         if (IsDust(txout, dustRelayFee))\n                         {\n-                            if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                            if (recipient.fSubtractFeeFromAmount && nFeeNeeded > 0)\n                             {\n                                 if (txout.nValue < 0)\n                                     strFailReason = _(\"The transaction amount is too small to pay the fee\");\n@@ -2710,7 +2743,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n                 continue;\n             }\n         }"
      },
      {
        "sha": "22bb7b72b71f07991a52cc8383b842f52aceac5a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c7677650514978d2fd8bb636c4db8318cc8416/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e1c7677650514978d2fd8bb636c4db8318cc8416",
        "patch": "@@ -486,11 +486,33 @@ class CInputCoin {\n \n         outpoint = COutPoint(walletTx->GetHash(), i);\n         txout = walletTx->tx->vout[i];\n+        eValue = txout.nValue;\n+    }\n+\n+    CInputCoin(const CWalletTx* walletTx, unsigned int i, CAmount effectiveFee)\n+    {\n+        if (!walletTx)\n+            throw std::invalid_argument(\"walletTx should not be null\");\n+        if (i >= walletTx->tx->vout.size())\n+            throw std::out_of_range(\"The output index is out of range\");\n+        if (effectiveFee < 0) {\n+            throw std::invalid_argument(\"effectiveFee should be non-negative\");\n+        }\n+\n+        outpoint = COutPoint(walletTx->GetHash(), i);\n+        txout = walletTx->tx->vout[i];\n+        eValue = txout.nValue - effectiveFee;\n     }\n \n     COutPoint outpoint;\n     CTxOut txout;\n+    // \"Effective value\" of an input coin for coin selection purposes.\n+    // Typically this is nValue - feeRate*nBytes_for_input.\n+    // This ensures that each coin \"pays its way\" to the final target amount.\n+    CAmount eValue;\n+\n \n+    // TODO remove?\n     bool operator<(const CInputCoin& rhs) const {\n         return outpoint < rhs.outpoint;\n     }\n@@ -669,7 +691,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * all coins from coinControl are selected; Never select unconfirmed coins\n      * if they are not ours\n      */\n-    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CFeeRate effectiveFee, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -837,7 +859,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput>& vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CFeeRate effectiveFee) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n "
      }
    ]
  },
  {
    "sha": "53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2RhNTVlNDhhOGViODJjMDc1NzFhZWI3ZTNhYzRhNTU3MmQwMDhl",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:32:29Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:42:51Z"
      },
      "message": "f'coincontrol updateLabels uses precomputed input sizes'",
      "tree": {
        "sha": "739697be7f25304ecdca15d306d212beab355c03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/739697be7f25304ecdca15d306d212beab355c03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53da55e48a8eb82c07571aeb7e3ac4a5572d008e/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1c7677650514978d2fd8bb636c4db8318cc8416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c7677650514978d2fd8bb636c4db8318cc8416",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c7677650514978d2fd8bb636c4db8318cc8416"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7d296b21f0c8eba574e9f4b9ec00d788b6eaefdb",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53da55e48a8eb82c07571aeb7e3ac4a5572d008e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53da55e48a8eb82c07571aeb7e3ac4a5572d008e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
        "patch": "@@ -495,7 +495,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             // there is some fudging in these numbers related to the actual virtual transaction size calculation that will keep this estimate from being exact.\n             // usually, the result will be an overestimate within a couple of satoshis so that the confirmation dialog ends up displaying a slightly smaller fee.\n-            // also, the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit.\n             nBytes += 2; // account for the serialized marker and flag bytes\n         }\n "
      }
    ]
  },
  {
    "sha": "7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzZlNzQ3NDc3MTllNDM0ZDVmZWIyY2Y1ZDJiYzA2NmFlYjU2Y2Fi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:33:11Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:42:51Z"
      },
      "message": "f'COutput caches marginal bytes to spend the output'",
      "tree": {
        "sha": "190d82e4e7b70c804394e734353eae932e5f0628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/190d82e4e7b70c804394e734353eae932e5f0628"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6e74747719e434d5feb2cf5d2bc066aeb56cab/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53da55e48a8eb82c07571aeb7e3ac4a5572d008e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53da55e48a8eb82c07571aeb7e3ac4a5572d008e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eba8d5c774ca6411b130303fe08ae44c68a65c23",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c6e74747719e434d5feb2cf5d2bc066aeb56cab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c6e74747719e434d5feb2cf5d2bc066aeb56cab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
        "patch": "@@ -1435,10 +1435,12 @@ int CWalletTx::GetSpendSize(unsigned int i) const\n     if (totalBytes == -1) return -1;\n     int witnessversion = 0;\n     std::vector<unsigned char> witnessprogram;\n-    // We don't want to multi-count segwit empty vin and flag bytes\n+    // We don't want to multi-count segwit empty vin and flag bytes, nor witness stack size byte\n     if (tx->vout[i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-        totalBytes -= 2;\n+        totalBytes -= 3;\n     }\n+    // the witness stack size value value is a variable sized integer. usually, the number of stack items will be well under the single byte var int limit\n+    totalBytes++;\n     return totalBytes - GetVirtualTransactionSize(CMutableTransaction());\n }\n "
      }
    ]
  },
  {
    "sha": "412d478cebbaba057a1925e6d012bc11f028bf13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTJkNDc4Y2ViYmFiYTA1N2ExOTI1ZTZkMDEyYmMxMWYwMjhiZjEz",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:33:35Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T15:42:51Z"
      },
      "message": "f'Use effective value of coins to target a defined feerate'",
      "tree": {
        "sha": "8780a7741f78e76a0f1aca5baf9be98e3fde2da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8780a7741f78e76a0f1aca5baf9be98e3fde2da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/412d478cebbaba057a1925e6d012bc11f028bf13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/412d478cebbaba057a1925e6d012bc11f028bf13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/412d478cebbaba057a1925e6d012bc11f028bf13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/412d478cebbaba057a1925e6d012bc11f028bf13/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6e74747719e434d5feb2cf5d2bc066aeb56cab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6e74747719e434d5feb2cf5d2bc066aeb56cab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "32692fd1bc0d3b175d931af4dd9ffb547cbe4bbf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/412d478cebbaba057a1925e6d012bc11f028bf13/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/412d478cebbaba057a1925e6d012bc11f028bf13/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=412d478cebbaba057a1925e6d012bc11f028bf13",
        "patch": "@@ -2267,7 +2267,6 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CFe\n         {\n             if (!out.fSpendable)\n                  continue;\n-            //TODO Account for witness empty-vin and flag\n             nValueRet += (out.tx->tx->vout[out.i].nValue - effectiveFee.GetFee(out.nInputBytes));\n             setCoinsRet.insert(CInputCoin(out.tx, out.i));\n         }\n@@ -2539,7 +2538,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 txNew.vout.push_back(CTxOut(0, scriptChange));\n \n                 // The estimated fee to cover the transaction minus the inputs\n-                CAmount outputFee = nFeeRateNeeded.GetFee(GetVirtualTransactionSize(txNew));\n+                // plus a buffer for empty vin and flag for witness transactions\n+                CAmount outputFee = nFeeRateNeeded.GetFee(GetVirtualTransactionSize(txNew)+2);\n \n                 // Now that we estimate full size with change, remove\n                 txNew.vout.pop_back();"
      }
    ]
  },
  {
    "sha": "8b39192c79266ca4b9474a33226c8509e9541579",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjM5MTkyYzc5MjY2Y2E0Yjk0NzRhMzMyMjZjODUwOWU5NTQxNTc5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T16:43:01Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-05-16T16:43:01Z"
      },
      "message": "f'Use effective value of coins to target a defined feerate'",
      "tree": {
        "sha": "78e26563dd7d2e3a5c82ae66eac1142d0c339f96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78e26563dd7d2e3a5c82ae66eac1142d0c339f96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b39192c79266ca4b9474a33226c8509e9541579",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b39192c79266ca4b9474a33226c8509e9541579",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b39192c79266ca4b9474a33226c8509e9541579",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b39192c79266ca4b9474a33226c8509e9541579/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "412d478cebbaba057a1925e6d012bc11f028bf13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/412d478cebbaba057a1925e6d012bc11f028bf13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/412d478cebbaba057a1925e6d012bc11f028bf13"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9264f2eb42cd3c04a6940cbb6afbf64afc8a318f",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b39192c79266ca4b9474a33226c8509e9541579/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b39192c79266ca4b9474a33226c8509e9541579/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=8b39192c79266ca4b9474a33226c8509e9541579",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n def get_unspent(listunspent, amount):\n     for utx in listunspent:\n         if utx['amount'] == amount:\n@@ -40,10 +39,10 @@ def run_test(self):\n         # if the fee's positive delta is higher than this value tests will fail,\n         # neg. delta always fail the tests.\n         # The size of the signature of every input may be at most 2 bytes larger\n-        # than a minimum sized signature.\n+        # than a minimum sized signature and one additional byte for witness stack byte.\n \n         #            = 2 bytes * minRelayTxFeePerByte\n-        feeTolerance = 2 * min_relay_tx_fee/1000\n+        feeTolerance = 3 * min_relay_tx_fee/1000\n \n         self.nodes[2].generate(1)\n         self.sync_all()"
      }
    ]
  }
]