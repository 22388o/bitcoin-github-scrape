luke-jr,2016-02-11T17:15:22Z,"You need to update the help. I suggest replacing the Boolean with the Object entirely, and just supporting the boolean in code as a backward compatibility thing.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-182963415,182963415,
promag,2016-02-11T18:34:30Z,@luke-jr done.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183000517,183000517,
promag,2016-02-11T19:07:13Z,"@luke-jr ok, added a test for the changeAddress option.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183013239,183013239,
luke-jr,2016-02-13T03:48:43Z,"Also, this conflicts with #7159 , so one of them will need to rebase. I think #7159 should adopt the options Object used here.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183581000,183581000,
promag,2016-02-13T04:28:33Z,@luke-jr agree #7159 should adopt options.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183587703,183587703,
promag,2016-02-13T04:49:45Z,@luke-jr done.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183588578,183588578,
promag,2016-02-13T10:59:02Z,Added changePosition option to specify the desired vout index of change address.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-183642446,183642446,
jonasschnelli,2016-02-19T13:11:36Z,"utACK.\nNice work!\n\nI'm not sure if we should add the backward compatibility fallback (includeWatchonly = true). Because it could also lead to problems in future. If so, we should also mention in in the RPC help (something like `a plain True results in includeWatchonly=true`).\n\nIMO a API break would be acceptable.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-186207032,186207032,
nunofgs,2016-03-02T15:11:18Z,"@promag: it would be useful to add an option ""lockUnspents: true"" to ensure that chosen unspents are effectively locked before sending the transaction.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-191280222,191280222,
promag,2016-03-02T16:30:07Z,"@nunofgs yes, that idea was also in #7498.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-191314517,191314517,
promag,2016-03-05T09:50:35Z,@nunofgs lockUnspents option added. Missing test for the moment.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-192614708,192614708,
promag,2016-03-05T09:52:05Z,Visited all comments and rebased. Please review.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-192614777,192614777,
promag,2016-03-05T09:53:04Z,What about adding unlockUnspents option to `sendrawtransaction`?\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-192614824,192614824,
ruimarinho,2016-03-07T10:47:37Z,"@promag I think that should be part of the standard process - as soon as the transaction is sent to the network, the unspents should be unlocked and considered spent.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193201046,193201046,
jonasschnelli,2016-03-07T10:58:45Z,"@ruimarinho: you probably mean ""locking"". I think locking of the unspents should happen somewhere between sign and send. I'm fine with an option in fundrawtransaction, but IMO we should not make it the default.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193204393,193204393,
promag,2016-03-07T11:02:17Z,@sipa @laanwj do you think it's acceptable to specify a fixed fee and bypass the minimal fee calculation through iteration in `CWallet::CreateTransaction`?\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193205779,193205779,
promag,2016-03-07T11:05:17Z,"@jonasschnelli sure, default for locking is false. The use case is to prevent consecutive `fundrawtransactions` calls selecting the same unspents.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193206399,193206399,
ruimarinho,2016-03-07T11:09:31Z,"@jonasschnelli if I call `lockUnspent(false, [unspents])` manually, those unspents will remain unlocked until bitcoind is restarted or `lockUnspent(true, [unspents])` is called. I did not see a code path where these unspents are cleaned up - removed from the ""locked"" list but still unavailable for future spending.\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193207217,193207217,
jonasschnelli,2016-03-07T11:15:03Z,"@ruimarinho: Yes. There is no such thing as a auto-release because the intention is the keep these unspents locked.\n\nBut if you lock the unspents in `fundrawtransaction` by default, you need to unlock them in case you don't sign or send them (or in cases of an error).\nBut I agree, there are use-cases where you want to directly lock the unspent in the fundrawtransaction call (concurrency).\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193208697,193208697,
promag,2016-03-07T11:20:01Z,@jonasschnelli the same applies if someone locks some unspents with `lockunspent` and don't use it.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193210377,193210377,
jonasschnelli,2016-03-07T11:21:03Z,@promag: yes. Agree. The default value is debatable.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-193210984,193210984,
promag,2016-03-24T22:01:29Z,@laanwj @sipa bump.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-201043858,201043858,
promag,2016-03-24T22:01:55Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-201043956,201043956,
jonasschnelli,2016-03-29T09:21:57Z,"I really think this is useful!\n@promag can you look at the travis issues, maybe rebase it? I promise to test it afterwards. :)\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-202796756,202796756,
promag,2016-03-29T17:09:00Z,@MarcoFalke fixed\n@jonasschnelli rebased and renamed `nChangePosRet` to `nChangePosInOut`. I wonder if other `*Ret` should be renamed to `*Out`?\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203002769,203002769,
jonasschnelli,2016-03-29T19:28:05Z,"I think this PR should be in 0.13 (once finalized)!\nTested a bit after fixing the compile error (see above).\n\n**Some issues:**\n\n**1)**\nI called\n\n`fundrawtransaction 01000000000100e1f505000000001976a914f592d5ff0f4cad760d23601e32714639c244d27588ac00000000 '{""changeAddress"":""mfrczJz4p5ziD4CiVTip3R7jjXJAjDKBmf"", ""includeWatching"":true, ""changePos"":0}'\n`\nI used `changePos` but the valid argum",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203063061,203063061,
promag,2016-03-29T20:53:06Z,"@jonasschnelli Thanks, I'll add tests to cover those cases. BTW, travis is not picking this PR?\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203097445,203097445,
promag,2016-03-30T01:05:50Z,Please review.\n\n@jonasschnelli FYI\n- [x] detect invalid options and reject command with an error: 7ba5713\n- [x] detect invalid change addresses and reject if so\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203177734,203177734,
ruimarinho,2016-03-30T02:19:43Z,"@jonasschnelli, since you're more involved in this PR, what do you think of @promag's suggestion above?\n\n> do you think it's acceptable to specify a fixed fee and bypass the minimal fee calculation through iteration in CWallet::CreateTransaction?\n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203196961,203196961,
promag,2016-03-30T02:32:27Z,@ruimarinho maybe a separate PR on top of this because that is a change on `CWallet::CreateTransaction`.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203201638,203201638,
jonasschnelli,2016-03-30T06:07:42Z,"@ruimarinho: Yes. A common problems of Bitcoin Core pulls is the ""expanding scope"". Keep it simple, add other features later in a different PR.\n\nI think we need to distinct FRT and keep it â€“ relatively simple. If we add options to set the fee, the only thing thats left is the coin selection then? not? Maybe someone could just grab the unspents over `listunspents` and do his own coin selection an",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203265504,203265504,
promag,2016-03-30T07:48:13Z,"> And if you know the changeoutputs address, you could rewrite the transaction after FRT (on your side of the application) and change its fee.\n\n@jonasschnelli this is not entirely correct because there may be a better subset of unspents to better satisfy the output value + fixed fee. But since the fee is very low this may be a good tradeoff.\n\n**Edit**: \n\nAlso there this special case when no ",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203299523,203299523,
promag,2016-03-30T11:29:27Z,> the only thing thats left is the coin selection then\n\n@jonasschnelli actually this is accomplished with `createrawtransaction`.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203388409,203388409,
jonasschnelli,2016-03-30T14:34:35Z,> [...] And the worst case is when the total input value of the selected unspents isn't enough to cover the fixed fee. So I would say that having the option to specify the fixed fee is the way to go.\n\nYes. This is a point.\n\n> > the only thing thats left is the coin selection then\n> \n> actually this is accomplished with createrawtransaction.\n\ncreaterawtransaction does not use coinselection ,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203460793,203460793,
jonasschnelli,2016-03-30T15:07:24Z,The type check works and I think it's great.\nMissing LockCoin lock needs to be fixed.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203480665,203480665,
promag,2016-03-30T15:52:05Z,@jonasschnelli Thanks! Fixed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203498834,203498834,
ruimarinho,2016-03-31T00:11:00Z,"I was not suggesting otherwise regarding merging this PR and only then creating a new one to add the fixed fee feature :) like @promag mentioned on the edited comments, I believe there is still space for such feature as at least two scenarios are not covered by standard calls. \n",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203691894,203691894,
jonasschnelli,2016-03-31T12:10:49Z,Allmost done. Last iteration:\n- [ ] needs out-of-range detection of `changePosition`.\n- [ ] needs simple documentation of backward compatibility (`true` instead of an parameter object)\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-203902786,203902786,
promag,2016-04-02T08:10:23Z,@jonasschnelli updated and rebased. not sure where is the best place to put the new help message.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-204671083,204671083,
jonasschnelli,2016-04-06T12:01:05Z,"ping @promag: Would be nice if you could take the change output order check into `CreateTransaction()`: https://github.com/bitcoin/bitcoin/pull/7518/files#r58496250 \nI'm convince that this is the last issue before this is ready for merging.\n\nPlease also fix the commit order.  The head commit is from March 5, but the HEAD~2 is March 30.\n\n```\ncommit 4b0360f4160e059b61a21a95a6106d0eed927bd9\nAu",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-206339203,206339203,
jonasschnelli,2016-04-13T07:20:56Z,Tested ACK 18be394cd8cf5b021e25fff34066f1a3a002858c.\n\nThis is very useful.\nIt allows to fully decouple the private keys from the node/wallet.\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-209268801,209268801,
btcdrak,2016-04-14T11:19:26Z,utACK 18be394\n,https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-209887356,209887356,
laanwj,2016-04-15T14:24:37Z,"Merged this as be14ca5, with a trivial rebase (only overlap in test framework) to master\n- 41e835d (was https://github.com/bitcoin/bitcoin/pull/7518/commits/f7dc1d32bbd23ff593e63f575a2d446a96e1ea15) Add strict flag to RPCTypeCheckObj \n- af4fe7f (was https://github.com/bitcoin/bitcoin/pull/7518/commits/db992eadbcbde0ca14df66c120a5868938e61e83) Add change options to fundrawtransaction \n- f2d0944 ",https://github.com/bitcoin/bitcoin/pull/7518#issuecomment-210481504,210481504,
promag,2016-02-11T17:02:39Z,Mixed feelings about how to do this since the second argument can be one of two types.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52631645,52631645,src/wallet/rpcwallet.cpp
promag,2016-02-11T17:03:52Z,Don't know if the best place is at the end.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52631851,52631851,src/wallet/wallet.h
luke-jr,2016-02-11T17:14:23Z,IIRC you can just leave off the second type for RPCTypeCheck and it will skip it. Then do the check by hand.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52633534,52633534,src/wallet/rpcwallet.cpp
luke-jr,2016-02-11T17:16:31Z,As good a place as any. But you need to update the implementation too...\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52633796,52633796,src/wallet/wallet.h
promag,2016-02-11T17:34:29Z,"Ops, missed that in `git add -p`.\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52636585,52636585,src/wallet/wallet.h
luke-jr,2016-02-11T18:39:14Z,The VOBJ check should be independent of RPCTypeCheck if you want to support boolean for backward compatibility.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52646017,52646017,src/wallet/rpcwallet.cpp
luke-jr,2016-02-11T18:39:42Z,Please don't change unrelated whitespace like this.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52646086,52646086,src/wallet/wallet.cpp
promag,2016-02-11T18:52:00Z,"I see, so the help says it accepts a JSON object, but the implementation allows both?\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52647838,52647838,src/wallet/rpcwallet.cpp
luke-jr,2016-02-13T03:47:40Z,This probably needs to be defaulting to CNoDestination()\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52822446,52822446,src/wallet/rpcwallet.cpp
luke-jr,2016-02-13T03:47:58Z,A default CNoDestination() here might be a good idea.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52822449,52822449,src/wallet/wallet.h
MarcoFalke,2016-02-13T12:54:19Z,Can you leave one of them and mention that this is testing backward compatibility?\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52827500,52827500,qa/rpc-tests/fundrawtransaction.py
promag,2016-02-13T13:39:43Z,:+1:\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52827907,52827907,qa/rpc-tests/fundrawtransaction.py
promag,2016-02-13T13:47:45Z,@MarcoFalke FYI.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52827981,52827981,qa/rpc-tests/fundrawtransaction.py
promag,2016-02-13T14:46:58Z,"I feel we should have a better argument order. Suggestion:\n\n``` cxx\nbool FundTransaction(CMutableTransaction& tx, const CTxDestination& changeDestination, int& changePosition, bool includeWatching, CAmount& nFeeRet, std::string& strFailReason);\n```\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52828729,52828729,src/wallet/wallet.h
luke-jr,2016-02-13T20:54:59Z,"It doesn't really matter as long as existing code either fails to compile or behaves the same. Note that to put destChange earlier, you would need to make it a required option.\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r52833316,52833316,src/wallet/wallet.h
jonasschnelli,2016-02-19T12:57:30Z,"If we go for the backward compatibility way: I guess then this code part should be commented as ""backward compatibility bool only fallback"".\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53457247,53457247,src/wallet/rpcwallet.cpp
jonasschnelli,2016-02-19T13:01:13Z,I guess we should rename `nChangePosRet` to `nChangePosInOut` and add a comment in the header that -1 as a input value will result in setting a random position.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53457550,53457550,src/wallet/wallet.h
jonasschnelli,2016-02-19T13:03:23Z,nit: indent.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53457746,53457746,src/wallet/wallet.cpp
jonasschnelli,2016-02-19T13:03:55Z,"nit: indent (2 instead 4), maybe run the clang format script.\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53457915,53457915,src/wallet/wallet.cpp
jonasschnelli,2016-02-19T13:05:50Z,"nit: Not sure if we should make this check case insensitive. Very likely, some users will try it with ""changeaddress"".\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53458108,53458108,src/wallet/rpcwallet.cpp
jonasschnelli,2016-02-19T13:08:15Z,"Maybe add a `RPCTypeCheckObj()` to ensure that `changePosition`, etc. are the correct types? Otherwise you get a plain `JSON value is not a boolean as expected` (etc.)?\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53458313,53458313,src/wallet/rpcwallet.cpp
luke-jr,2016-02-19T15:26:16Z,I think we already have precedent for case-sensitive options?\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r53473710,53473710,src/wallet/rpcwallet.cpp
promag,2016-03-05T09:37:01Z,:+1:\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r55118846,55118846,src/wallet/rpcwallet.cpp
promag,2016-03-24T22:02:59Z,See below.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57395154,57395154,qa/rpc-tests/fundrawtransaction.py
promag,2016-03-24T22:03:18Z,See below.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57395203,57395203,src/wallet/rpcwallet.cpp
MarcoFalke,2016-03-25T16:52:42Z,Where does this scope start?\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57462858,57462858,src/wallet/wallet.cpp
promag,2016-03-25T22:22:27Z,It doesn't :)\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57497755,57497755,src/wallet/wallet.cpp
MarcoFalke,2016-03-29T09:31:16Z,Mind to fix it?\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57695090,57695090,src/wallet/wallet.cpp
jonasschnelli,2016-03-29T18:43:24Z,"missing `bool lockUnspents,` argument.\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57777697,57777697,src/wallet/wallet.cpp
jonasschnelli,2016-03-30T14:42:58Z,"You need to hold `cs_wallet` for this operation.\nI think between L1944 and L1945 you should add a `LOCK2(cs_main, cs_wallet);`\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57900405,57900405,src/wallet/wallet.cpp
ruimarinho,2016-03-31T00:12:56Z,Bikeshedding but have you considered `includeWatchOnly` to follow a consistent nomenclature?\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r57984490,57984490,src/wallet/rpcwallet.cpp
promag,2016-03-31T08:04:28Z,The underlying flag is `allowWatchOnly`. `includeWatching` is the old parameter name. Happy to rename if others agree.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58014265,58014265,src/wallet/rpcwallet.cpp
jonasschnelli,2016-03-31T11:56:22Z,IMO we should keep `includeWatching`.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58041204,58041204,src/wallet/rpcwallet.cpp
jonasschnelli,2016-03-31T12:01:50Z,"nit: here we should mention something like : ""for backward compatibility: passing in a `true` instead of an object will result in `{""includeWatching"":true}""`\n",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58041743,58041743,src/wallet/rpcwallet.cpp
jonasschnelli,2016-03-31T12:09:15Z,Here we need another check.\nWhat if `nChangePosInOut = 10` but `tx.vout.size()==2`?\nWe need a out-of-range exception in a such case.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58042439,58042439,src/wallet/wallet.cpp
promag,2016-04-02T08:10:55Z,Check is in rpcwallet.cpp.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58290503,58290503,src/wallet/wallet.cpp
jonasschnelli,2016-04-05T07:22:27Z,"@promag: The check should should really be here (maybe an additional check). If someone uses `CWallet::FundTransaction()` with a `nChangePosInOut >= wtx.vout.size()`, the app crashes/throws an exceptions. Future changes might easy get trapped by this.\n\nThe problematic part is `wtx.vout[nChangePosInOut]`. There should be a check somewhere in `CWallet::FundTransaction()` that leads to a `return fa",https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58496250,58496250,src/wallet/wallet.cpp
promag,2016-04-06T22:11:10Z,@jonasschnelli I think the best place to check if index is out of range is here.\n,https://github.com/bitcoin/bitcoin/pull/7518#discussion_r58791138,58791138,src/wallet/wallet.cpp
