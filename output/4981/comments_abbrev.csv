Diapolo,2014-09-25T11:38:26Z,"@theuni Sorry for hitting you with that bunch of nits, but they should be fixed IMHO.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56806523,56806523,
Diapolo,2014-09-25T20:52:20Z,"@theuni After the last few of my style nits are fixed you've got my style ACK. No, really thanks for updating this pull and taking care of the style stuff :)!\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56882080,56882080,
theuni,2014-09-25T21:13:59Z,"@Diapolo I'd put a _rollseyes_ emoticon in the commit message if I could ;)\nKeeping things uniform is nice though, so thanks for reviewing.\n\n@laanwj What do you suggest? It'd defeat the purpose to depend on Core for the parsing. This seems like a reasonable place to make an exception, but I understand the case against as well.\n\nutilstrencodings.h itself isn't a terrible dependency, as it only",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56884939,56884939,
laanwj,2014-09-26T07:19:39Z,"@theuni Ok if a hexstr is really, truly, the only thing you need in the script lib, I'm fine with making an exception. This is trivially simple code.\n\nOne other remark though. The old implementation of that function is:\n\n```\nif (vch.size() <= 4)\n    return strprintf(""%d"", CScriptNum(vch).getint());\nelse\n    return HexStr(vch);\n```\n\nThis makes sure that normal scriptnums are printed as n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56927651,56927651,
theuni,2014-09-26T17:12:46Z,"@laanwj That all sounds perfectly reasonable. How about this, then: Since there's still a good bit of work left before we can break out verification entirely, I'll leave the include for CScript for now. If, at the end, it's still the only thing needed from core, we'll dupe it here as you've specified.\n\nSound good?\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56990971,56990971,
sipa,2014-09-26T17:39:04Z,I disagree with including script.h in key; that makes no sense - script is higher level.\n\nI see why you're doing that - the problem is CScriptID being declared in key.h in the first place. I think it should move to script/standard.h instead.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56994511,56994511,
theuni,2014-09-26T17:55:00Z,"@sipa: I was also unhappy with that include and tried moving CScriptID to a few places, but never found a better home. I'll give that a shot.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-56996807,56996807,
theuni,2014-09-26T19:31:53Z,"Moved CScriptID to standard.h as @sipa requested.\n\nRe-added the string processing deps as described above. When the library can stand on its own, we can evaluate whether it's worth it to dupe the core functions there.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57009503,57009503,
BitcoinPullTester,2014-10-01T01:54:37Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4981_ea9d733a5af528833580eaaada3bef3fb86e0daa/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57409345,57409345,
theuni,2014-10-01T01:57:28Z,"Updated, rebased, and squashed. Simplified to avoid the use of virtuals. I believe this has addressed of all previous comments.\n\nSorry for the squash mid-review, but so much changed that it didn't make sense to read the commits in-order anymore.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57409524,57409524,
sipa,2014-10-02T02:13:26Z,"Needs rebase, but with the different test/script refactors still going on, it may make sense to wait a bit?\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57571591,57571591,
laanwj,2014-10-02T07:43:15Z,"@sipa Agreed that there are a lot of changes pending to the same area. In this case it may make sense to plan ahead a bit, what makes sense to merge first, to avoid unnecessary non-trivial rebases. \n\nWe have at least:\n- #4981 Remove core dependencies from CScript\n- #5004 Make SCRIPT_VERIFY_STRICTENC compatible with BIP62\n- #5000 Blacklist NOPs reserved for soft-fork upgrades \n- #4954 Don't r",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57594263,57594263,
jtimon,2014-10-02T18:53:02Z,There's also #4989 which is built on top #4890.\n #4311 and #4954 already need rebase.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57683802,57683802,
theuni,2014-10-02T19:10:40Z,"I'm fine with rebasing this as long as necessary. I'd rather not hold off for too long if there are no objections though, as it does block future reorg work. Though to be fair, future reorg work will only cause more churn, so I suppose that doesn't really help my case :)\n\nMuch of https://github.com/theuni/bitcoin/commit/4e4ae57fd28ef0a191ccd8f88192ea53daed9d3f could be moved out to a new PR that",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57689567,57689567,
TheBlueMatt,2014-10-03T00:58:34Z,Actually I'll wait and review this when things are more clear as to the way forward.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57735231,57735231,
jtimon,2014-10-03T03:32:32Z,"Actually now that things are more separated I don't think this conflicts with #4694 or #4890, and #4989 needs more discussion anyway and I may want to rebase it on top of another PR I'm preparing. So on my part I'm fine with merging this first. I mean, I would oppose to merging #4694 and #4890 first, but as said I'm not concerned about the potential conflicts around script if the order is differen",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57747753,57747753,
theuni,2014-10-03T19:35:23Z,rebased and nits addressed (i believe).\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57844821,57844821,
jtimon,2014-10-03T20:11:20Z,Untested ack.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57851206,57851206,
Diapolo,2014-10-03T23:31:41Z,"Just 2 nits left, but if this gets merged I'll clean them up anyway ;).\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-57880877,57880877,
sipa,2014-10-06T22:26:07Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58109950,58109950,
theuni,2014-10-06T22:58:47Z,Rebased and nits addressed.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58113259,58113259,
sipa,2014-10-08T22:54:51Z,"Untested ACK, but needs rebase again (sorry...).\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58441047,58441047,
theuni,2014-10-08T23:21:34Z,"No worries, will do.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58443414,58443414,
theuni,2014-10-10T16:27:18Z,"rebased again, should be good to go.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58679932,58679932,
sipa,2014-10-10T17:19:41Z,"ACK, verified move-only (23b504f).\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58686841,58686841,
jgarzik,2014-10-13T15:04:09Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58904998,58904998,
jtimon,2014-10-13T16:23:44Z,ut re-ACK\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-58916918,58916918,
theuni,2014-10-14T20:43:42Z,Nit addressed. Will squash when ready.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59113123,59113123,
sipa,2014-10-15T00:05:37Z,utACK. I'm fine with squashing now.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59138205,59138205,
theuni,2014-10-15T00:26:22Z,squashed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59140263,59140263,
theuni,2014-10-15T03:30:26Z,made the const ref change as requested by @sipa and squashed it down.\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59153219,59153219,
sipa,2014-10-15T19:46:10Z,"We could of course just have a CScript::operator<<(T begin, T end) { std::vector<unsigned char> vch(begin, end); *this << vch; } ?\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59264283,59264283,
theuni,2014-10-16T17:53:44Z,"Updated to use ToByteVector, squashed, and rebased.\n\nToByteVector() is currently in script.h, which is not a good place for it, but I don't see a better one that wouldn't drag in the deps we're working to remove here. I'm hoping we can at least agree to leave it there long enough to get this merged in, then move it around later if desired.\n\nAlso, I didn't add any extra checks or conditions to ",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59402177,59402177,
sipa,2014-10-16T18:05:15Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59403894,59403894,
sipa,2014-10-16T23:33:25Z,"Agree with @jtimon; the first group of 3 commits and the second 3 commits make much more sense when squashed together, for example.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59447042,59447042,
TheBlueMatt,2014-10-16T23:57:56Z,```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nutACK commithash c558f43500d5bd6fcad74a7254dd509b928c9183\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBAgAGBQJUQFraAAoJEIm7uGY+LmXO2iEP/R/Pc0345ZTn6mdQb2qGZP3q\nZVs4hsK9xIexPY44GfpEV+oF+CHSeb7zqEZKb9V3U6Wv4Q/AjvjOkfCWxIvJLZ++\nbXQm8acqywW1Rp4UmMap+UfiOJGyWnhZIZmdMTBKbbMPpyNZlop1IVJgw+vn78jW\nlyNQM5Sf5PW2K1CntTRNHX+lB9oLgG1OnVsm,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59448941,59448941,
theuni,2014-10-17T00:20:14Z,"Ok. I find it easier to review/digest that way, but I'll keep em more grouped together.\nWill squash.\n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59450544,59450544,
theuni,2014-10-17T17:46:30Z,"Squished down deeper. The header removal commit remains on top though, that was the purpose of this series. Not re-rebased against master, so this is identical code-wise to previously ACKed changes. \n",https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59549334,59549334,
gavinandresen,2014-10-17T19:11:01Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/4981#issuecomment-59560924,59560924,
Diapolo,2014-09-25T11:28:21Z,Nit: Can you add a newline above.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026363,18026363,src/script/binarydata.cpp
Diapolo,2014-09-25T11:29:08Z,Same here as above.\n\nAlso this is missing here:\n\n#ifndef BITCOIN_BINARYDATA_H\n#define BITCOIN_BINARYDATA_H\n\nAnd at the file ending:\n#endif // BITCOIN_BINARYDATA_H\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026398,18026398,src/script/binarydata.h
Diapolo,2014-09-25T11:29:54Z,Nit: This should be at the top of the class stuff (alphabetical ordering).\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026430,18026430,src/script/binarydata.h
Diapolo,2014-09-25T11:32:46Z,Nit: One up (alphabetical ordering).\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026525,18026525,src/script/compressor.h
Diapolo,2014-09-25T11:33:27Z,Nit: Wrong alphabetical ordering of #includes.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026553,18026553,src/script/script.h
Diapolo,2014-09-25T11:34:05Z,Nit: Indentation\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026582,18026582,src/script/script.h
Diapolo,2014-09-25T11:34:43Z,Is this cast needed?\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026610,18026610,src/script/script.h
Diapolo,2014-09-25T11:34:58Z,Indentation.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026624,18026624,src/script/script.h
Diapolo,2014-09-25T11:35:19Z,Nit: Alphabtical ordering.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026631,18026631,src/script/sign.cpp
Diapolo,2014-09-25T11:35:37Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026641,18026641,src/script/standard.cpp
Diapolo,2014-09-25T11:36:01Z,Needs to go after a newline below stdint.h.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026656,18026656,src/script/standard.h
Diapolo,2014-09-25T11:36:18Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026671,18026671,src/test/multisig_tests.cpp
Diapolo,2014-09-25T11:36:35Z,Nit: Alphabetical ordering.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026683,18026683,src/test/script_P2SH_tests.cpp
Diapolo,2014-09-25T11:37:00Z,This file on a whole seems unordered... well.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026698,18026698,src/test/script_tests.cpp
Diapolo,2014-09-25T11:37:13Z,Same here.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026708,18026708,src/test/sigopcount_tests.cpp
Diapolo,2014-09-25T11:37:25Z,And here...\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18026722,18026722,src/test/transaction_tests.cpp
laanwj,2014-09-25T11:53:19Z,Please don't implement hexadecimal conversion code here. We've spent a lot of time going _from_ duplicated code like this left around all over the place to the current state.\nMy point of moving the string encoding/decoding to a separate utility file without dependencies (utilstrencodings) was that we can use those in places like here.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18027233,18027233,src/script/script.h
theuni,2014-09-25T19:31:25Z,"alphabetical fixed. what does ""at the top of the class stuff"" mean?\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18054245,18054245,src/script/binarydata.h
Diapolo,2014-09-25T20:47:40Z,Nit: Misses a single new line here still.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18058902,18058902,src/script/binarydata.h
Diapolo,2014-09-25T20:48:31Z,Nit: Also a new line before the closing endif is missing + the end comment `#endif // BITCOIN_BINARYDATA_H`\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18058997,18058997,src/script/binarydata.h
sipa,2014-09-26T20:18:09Z,"Is this necessary to be virtual and overridable? Just having a templated method/constructor that takes any type, and copied the vector from x.begin() to x.end() seems like it would suffice. This is really just convenience - the user of CScript can always use his own code to first convert to a vector.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18111396,18111396,src/script/script.h
theuni,2014-09-26T21:34:30Z,"Yea, it was done that way so that a user could make a distinction between input types and define his own serializers. If you'd rather avoid the overhead, I'm fine with a templated ctor.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18115222,18115222,src/script/script.h
sipa,2014-09-26T22:22:22Z,"Yeah, I understand, I just don't think it's worth it for the cases where we need it.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18117166,18117166,src/script/script.h
laanwj,2014-09-29T08:08:01Z,Agreed with @sipa. Let's avoid virtuals here. There is no need for external parties to add anything here.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18141469,18141469,src/script/script.h
Diapolo,2014-10-01T08:37:36Z,"@theuni This nit is still current, even if very very minor :).\n\n<pre>\n#include stdint.h\n\n#include boost/variant.hpp\n</pre>\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18266654,18266654,src/script/standard.h
sipa,2014-10-02T02:12:03Z,Coding style (spaces).\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18319646,18319646,src/script/script.h
Diapolo,2014-10-03T23:30:16Z,Nit: string.h should be after stdint.h\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18424724,18424724,src/script/script.h
laanwj,2014-10-14T09:13:52Z,"From a readability point I'd greatly prefer:\n\n```\nm_vch.reserve(size + 1);\nm_vch.push_back(size);\nm_vch.insert(m_vch.end(), in.begin(), in.end());\n```\n\n(edit: oeps)\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18816585,18816585,src/script/script.h
sipa,2014-10-14T22:17:40Z,"Hmm, this is not strict enough; the size needs to be at most 75 for this to work.\n\nAn alternative is not serializing the size in here, and doing that inside CScript::operator<<, which selects based on the size.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18863105,18863105,src/script/script.h
theuni,2014-10-14T22:42:22Z,will do.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18864335,18864335,src/script/script.h
sipa,2014-10-14T23:05:35Z,"And when combined with BIP62, the data pushed should be at least 2 bytes too.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18865490,18865490,src/script/script.h
TheBlueMatt,2014-10-15T05:51:08Z,It seems the only point of using a CScriptBinaryData over just using vectors is to assert that they are at least 2 bytes in size?\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18875676,18875676,src/script/script.h
TheBlueMatt,2014-10-15T05:53:56Z,"Nit: Probably place this at line 267, right before the only function that uses it?\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18875722,18875722,src/script/script.cpp
laanwj,2014-10-15T07:07:55Z,"...and that they're prefixed with the size?\n\nEdit: right? I don't see the size being added here, but it used to be the case in the last implementation of CScriptBinaryData\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18877539,18877539,src/script/script.h
laanwj,2014-10-15T07:09:36Z,"This expression `in.size() ? std::vector<unsigned char>(in.begin(), in.end()) : std::vector<unsigned char>()` is unnecessary. \n`std::vector<unsigned char>(in.begin(), in.end())` would work just as well. Passing an empty range to the std::vector constructor is allowed. It won't dereference the iterators if they're equal.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18877585,18877585,src/script/script.h
TheBlueMatt,2014-10-15T07:28:30Z,"There should be no size added here. The next line just calls this << std::vector, which will prefix the size properly...I dont see why we need CScriptBinaryData?\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18878118,18878118,src/script/script.h
laanwj,2014-10-15T07:45:00Z,"Right, the size is added somewhere else. \n\nAFAIK CScriptBinaryData is necessary to convert the argument (which is usually a uint160 or derived type) into a std::vector. It could be a function instead of a class.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18878669,18878669,src/script/script.h
theuni,2014-10-15T18:36:23Z,"Well, this has been through many iterations now. Originally it was polymorphic so that eventual users could add their own serialization functionality. Then that was dropped and serialization was done on a per-type basis. Then that was dropped, and it was templated so that it's all done the same way.\n\nSo I suppose this should go one of two ways, rather than the hybrid that it is now\n- keep the c",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18913118,18913118,src/script/script.h
TheBlueMatt,2014-10-16T04:32:31Z,I would do it in a very explicitly-named CScript function (ie want to make sure callers know that this is gonna go from begin() to end()).\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18937828,18937828,src/script/script.h
sipa,2014-10-16T05:36:37Z,See #5091.\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18939003,18939003,src/script/script.h
laanwj,2014-10-16T06:38:23Z,"I like the idea of having it explicit as in this pull. I don't like the CBinaryData name, maybe simply a function\n\n```\n<< ToByteVector(xxx) << \n```\n\nI think Cory is on the right track. I don't like the 'everything with a begin() and end() can apply here' as much. It makes the code hard to follow. And for the serialization code it is important to be easy to follow, as people (also those not v",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18940095,18940095,src/script/script.h
TheBlueMatt,2014-10-16T06:39:37Z,See-also comment thread on https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939366\n,https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18940106,18940106,src/script/script.h
sipa,2014-10-16T06:42:52Z,"So #5091 is a change I've wanted to do for a while - the part about replacing the pushers for uint160/CPubKey isn't important there. As this PR already has more work towards have some wrapping, it's probably easier to use something like the suggested ToByteVector here; I can rebase #5091.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18940188,18940188,src/script/script.h
theuni,2014-10-16T08:03:26Z,"I still really don't mind either way. I see the merit in being explicit, and I see the merit in letting CScript handle whatever comes its way.\n\nSounds like everyone's ok with making the change to ToByteVector here, then discussing #5091 as a follow-up. It's fine by me if ToByteVector is essentially reverted there, as long as progress is being made.\n\nI'll push that change.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18942199,18942199,src/script/script.h
sipa,2014-10-16T08:50:55Z,"I'm not planning to revert ToByteVector in #5091 - I was just trying to avoid touching too much code there, but as it's exactly code you're already touching, that's fine.\n",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18943918,18943918,src/script/script.h
laanwj,2014-10-16T10:09:20Z,"> I still really don't mind either way. I see the merit in being explicit, and I see the merit in letting CScript handle whatever comes its way.\n\nI see merit in it, and I wouldn't care either way if this was, for example, GUI code. But for consensus-critical code it's too dangerous to just ""handle everything that comes its way in _some_ way"". I like to be explicit and clear in what gets handled ",https://github.com/bitcoin/bitcoin/pull/4981#discussion_r18947280,18947280,src/script/script.h
