[
  {
    "sha": "066e2a1403fe306787a2ce0c8571aa9de57386cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjZlMmExNDAzZmUzMDY3ODdhMmNlMGM4NTcxYWE5ZGU1NzM4NmNm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T02:24:46Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-17T17:44:14Z"
      },
      "message": "script: move CScriptID to standard.h and add a ctor for creating them from CScripts\n\nThis allows for a reversal of the current behavior.\n\nThis:\nCScript foo;\nCScriptID bar(foo.GetID());\n\nBecomes:\nCScript foo;\nCScriptID bar(foo);\n\nThis way, CScript is no longer dependent on CScriptID or Hash();",
      "tree": {
        "sha": "5a4257c467978f1260a0d69e937c16ba16a01773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a4257c467978f1260a0d69e937c16ba16a01773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/066e2a1403fe306787a2ce0c8571aa9de57386cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e2a1403fe306787a2ce0c8571aa9de57386cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/066e2a1403fe306787a2ce0c8571aa9de57386cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e2a1403fe306787a2ce0c8571aa9de57386cf/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "756538836df9d0c4c86f2ec6798ea9e7efb647dc",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -5,6 +5,7 @@\n #include \"crypter.h\"\n \n #include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <string>"
      },
      {
        "sha": "48b1652536395270b9966380fb7ea7a3784d0a56",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -30,14 +30,6 @@ class CKeyID : public uint160\n     CKeyID(const uint160& in) : uint160(in) {}\n };\n \n-/** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n-class CScriptID : public uint160\n-{\n-public:\n-    CScriptID() : uint160(0) {}\n-    CScriptID(const uint160& in) : uint160(in) {}\n-};\n-\n /** An encapsulated public key. */\n class CPubKey\n {"
      },
      {
        "sha": "039c690625d884f003a066dec00a5a8af4e83b19",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -8,6 +8,7 @@\n #include \"crypter.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n@@ -38,7 +39,7 @@ bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n         return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n-    mapScripts[redeemScript.GetID()] = redeemScript;\n+    mapScripts[CScriptID(redeemScript)] = redeemScript;\n     return true;\n }\n "
      },
      {
        "sha": "4f8189c8f560498c62a05b8577443dc3b23298c2",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -13,6 +13,7 @@\n #include <boost/variant.hpp>\n \n class CScript;\n+class CScriptID;\n \n /** A virtual base class for key stores */\n class CKeyStore"
      },
      {
        "sha": "92ed1c3e2bd59cfcf98772306614de70519ddeb5",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -292,7 +292,7 @@ Value createmultisig(const Array& params, bool fHelp)\n \n     // Construct using pay-to-script-hash:\n     CScript inner = _createmultisig_redeemScript(params);\n-    CScriptID innerID = inner.GetID();\n+    CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n     Object result;"
      },
      {
        "sha": "fdfcb59eeb91b5c32fc2ff75ca6d7760f464bc9e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -480,7 +480,7 @@ Value decodescript(const Array& params, bool fHelp)\n     }\n     ScriptPubKeyToJSON(script, r, false);\n \n-    r.push_back(Pair(\"p2sh\", CBitcoinAddress(script.GetID()).ToString()));\n+    r.push_back(Pair(\"p2sh\", CBitcoinAddress(CScriptID(script)).ToString()));\n     return r;\n }\n "
      },
      {
        "sha": "68bb4068b82a49114c0f5850823ec96be1eff429",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -918,7 +918,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n     // Construct using pay-to-script-hash:\n     CScript inner = _createmultisig_redeemScript(params);\n-    CScriptID innerID = inner.GetID();\n+    CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n     pwalletMain->SetAddressBook(innerID, strAccount, \"send\");"
      },
      {
        "sha": "dbb4df8b7c1a9a31aa18eb0665b891cd45a32f08",
        "filename": "src/script/compressor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"compressor.h\"\n+#include \"script/standard.h\"\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const\n {"
      },
      {
        "sha": "f48ecf500179c29c5181f93b78e9cf8224d0e8c9",
        "filename": "src/script/compressor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.h?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -8,6 +8,8 @@\n \n #include \"script/script.h\"\n \n+class CScriptID;\n+\n /** Compact serializer for scripts.\n  *\n  *  It detects common cases and encodes them much more efficiently."
      },
      {
        "sha": "4d685f55965fd572c32d3c6a11de284c76c19dcc",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -610,12 +610,6 @@ class CScript : public std::vector<unsigned char>\n         }\n         return str;\n     }\n-\n-    CScriptID GetID() const\n-    {\n-        return CScriptID(Hash160(*this));\n-    }\n-\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory."
      },
      {
        "sha": "adbec01f2ebc2f04e3380bf97070fc300bd44d2b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -14,6 +14,8 @@ using namespace std;\n \n typedef vector<unsigned char> valtype;\n \n+CScriptID::CScriptID(const CScript& in) : uint160(in.size() ? Hash160(in.begin(), in.end()) : 0) {}\n+\n const char* GetTxnOutputType(txnouttype t)\n {\n     switch (t)"
      },
      {
        "sha": "38d0b59885da409dfa3817113f731f5ae45fb74d",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -13,6 +13,15 @@\n \n class CScript;\n \n+/** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n+class CScriptID : public uint160\n+{\n+public:\n+    CScriptID() : uint160(0) {}\n+    CScriptID(const CScript& in);\n+    CScriptID(const uint160& in) : uint160(in) {}\n+};\n+\n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n \n // Mandatory script verification flags that all new blocks must comply with for"
      },
      {
        "sha": "93b7fe189a38c715dbc70097e8bfa29d1ff4b739",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey = GetScriptForDestination(script.GetID());\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;"
      },
      {
        "sha": "a23792a4f346e77a8c4dbbbbd62c6b392f07f04a",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(sign)\n     for (int i = 0; i < 4; i++)\n     {\n         keystore.AddCScript(standardScripts[i]);\n-        evalScripts[i] = GetScriptForDestination(standardScripts[i].GetID());\n+        evalScripts[i] = GetScriptForDestination(CScriptID(standardScripts[i]));\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -129,7 +129,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     CScript invalidAsScript;\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n-    CScript p2sh = GetScriptForDestination(invalidAsScript.GetID());\n+    CScript p2sh = GetScriptForDestination(CScriptID(invalidAsScript));\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -139,7 +139,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n     // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n-    CScript p2sh2 = GetScriptForDestination(p2sh.GetID());\n+    CScript p2sh2 = GetScriptForDestination(CScriptID(p2sh));\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -169,7 +169,7 @@ BOOST_AUTO_TEST_CASE(set)\n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i] = GetScriptForDestination(inner[i].GetID());\n+        outer[i] = GetScriptForDestination(CScriptID(inner[i]));\n         keystore.AddCScript(inner[i]);\n     }\n \n@@ -242,7 +242,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     CScript scriptSig;\n     scriptSig << Serialize(notValid);\n \n-    CScript fund = GetScriptForDestination(notValid.GetID());\n+    CScript fund = GetScriptForDestination(CScriptID(notValid));\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     keystore.AddCScript(pay1);\n     CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey = GetScriptForDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(pay1)); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n     txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n@@ -290,7 +290,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     keystore.AddCScript(oneAndTwo);\n-    txFrom.vout[3].scriptPubKey = GetScriptForDestination(oneAndTwo.GetID());\n+    txFrom.vout[3].scriptPubKey = GetScriptForDestination(CScriptID(oneAndTwo));\n     txFrom.vout[3].nValue = 4000;\n \n     // vout[4] is max sigops:\n@@ -299,17 +299,17 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         fifteenSigops << key[i%3].GetPubKey();\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     keystore.AddCScript(fifteenSigops);\n-    txFrom.vout[4].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n+    txFrom.vout[4].scriptPubKey = GetScriptForDestination(CScriptID(fifteenSigops));\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n     keystore.AddCScript(sixteenSigops);\n-    txFrom.vout[5].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n+    txFrom.vout[5].scriptPubKey = GetScriptForDestination(CScriptID(fifteenSigops));\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     keystore.AddCScript(twentySigops);\n-    txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n+    txFrom.vout[6].scriptPubKey = GetScriptForDestination(CScriptID(twentySigops));\n     txFrom.vout[6].nValue = 6000;\n \n     coins.ModifyCoins(txFrom.GetHash())->FromTx(txFrom, 0);"
      },
      {
        "sha": "cfb4fa6e7da8e980bbe6d78521f1ab348caa898b",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -162,7 +162,7 @@ class TestBuilder\n     TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n     {\n         if (P2SH) {\n-            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << redeemScript.GetID() << OP_EQUAL);\n+            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << CScriptID(redeemScript) << OP_EQUAL);\n         } else {\n             creditTx = BuildCreditingTransaction(redeemScript);\n         }\n@@ -697,7 +697,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n-    scriptPubKey = GetScriptForDestination(pkSingle.GetID());\n+    scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);"
      },
      {
        "sha": "4ce2c87a0d2420482162a14605b568bf2391aab3",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -38,7 +38,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n-    CScript p2sh = GetScriptForDestination(s1.GetID());\n+    CScript p2sh = GetScriptForDestination(CScriptID(s1));\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n@@ -54,7 +54,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n-    p2sh = GetScriptForDestination(s2.GetID());\n+    p2sh = GetScriptForDestination(CScriptID(s2));\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;"
      },
      {
        "sha": "65944587f8b8b8e7173ff6ef341af92144d8e2fd",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/066e2a1403fe306787a2ce0c8571aa9de57386cf/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "patch": "@@ -158,7 +158,7 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n      * these. Do not add them to the wallet and warn. */\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n     {\n-        std::string strAddr = CBitcoinAddress(redeemScript.GetID()).ToString();\n+        std::string strAddr = CBitcoinAddress(CScriptID(redeemScript)).ToString();\n         LogPrintf(\"%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\\n\",\n             __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);\n         return true;"
      }
    ]
  },
  {
    "sha": "e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWNhNDI4MGYzYWJiOGIyYjZmYTM1YTQxZTg4MTk5NjI3OGViZmZm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T02:54:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-17T17:44:14Z"
      },
      "message": "script: add ToByteVector() for converting anything with begin/end\n\nThis should move to a util header once their dependencies are cleaned up.",
      "tree": {
        "sha": "ee09dcf4ec7f9177ee329581382e001459ff2e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee09dcf4ec7f9177ee329581382e001459ff2e16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/066e2a1403fe306787a2ce0c8571aa9de57386cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/066e2a1403fe306787a2ce0c8571aa9de57386cf"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 91,
      "deletions": 108
    },
    "files": [
      {
        "sha": "6a2718e40340558a4962534f8aa2fa35e0dd7948",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -398,7 +398,7 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n     if (!reservekey.GetReservedKey(pubkey))\n         return NULL;\n \n-    CScript scriptPubKey = CScript() << pubkey << OP_CHECKSIG;\n+    CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n     return CreateNewBlock(scriptPubKey);\n }\n "
      },
      {
        "sha": "6676e852ae4395620bce265d9ced26cfee652c4c",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 23,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -16,6 +16,12 @@\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n \n+template <typename T>\n+std::vector<unsigned char> ToByteVector(const T& in)\n+{\n+    return std::vector<unsigned char>(in.begin(), in.end());\n+}\n+\n /** Script opcodes */\n enum opcodetype\n {\n@@ -358,7 +364,6 @@ class CScript : public std::vector<unsigned char>\n     CScript(int64_t b)        { operator<<(b); }\n \n     explicit CScript(opcodetype b)     { operator<<(b); }\n-    explicit CScript(const uint256& b) { operator<<(b); }\n     explicit CScript(const CScriptNum& b) { operator<<(b); }\n     explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n \n@@ -373,28 +378,6 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n-    CScript& operator<<(const uint160& b)\n-    {\n-        insert(end(), sizeof(b));\n-        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const uint256& b)\n-    {\n-        insert(end(), sizeof(b));\n-        insert(end(), (unsigned char*)&b, (unsigned char*)&b + sizeof(b));\n-        return *this;\n-    }\n-\n-    CScript& operator<<(const CPubKey& key)\n-    {\n-        assert(key.size() < OP_PUSHDATA1);\n-        insert(end(), (unsigned char)key.size());\n-        insert(end(), key.begin(), key.end());\n-        return *this;\n-    }\n-\n     CScript& operator<<(const CScriptNum& b)\n     {\n         *this << b.getvch();"
      },
      {
        "sha": "bf98c40394f7c520370414f3077840672e91ea48",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -78,7 +78,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n         {\n             CPubKey vch;\n             keystore.GetPubKey(keyID, vch);\n-            scriptSigRet << vch;\n+            scriptSigRet << ToByteVector(vch);\n         }\n         return true;\n     case TX_SCRIPTHASH:"
      },
      {
        "sha": "7e6b136a28d4419e7e075b6d79bc9f68f1f34b27",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -282,13 +282,13 @@ class CScriptVisitor : public boost::static_visitor<bool>\n \n     bool operator()(const CKeyID &keyID) const {\n         script->clear();\n-        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        *script << OP_DUP << OP_HASH160 << ToByteVector(keyID) << OP_EQUALVERIFY << OP_CHECKSIG;\n         return true;\n     }\n \n     bool operator()(const CScriptID &scriptID) const {\n         script->clear();\n-        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        *script << OP_HASH160 << ToByteVector(scriptID) << OP_EQUAL;\n         return true;\n     }\n };\n@@ -308,7 +308,7 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n \n     script << CScript::EncodeOP_N(nRequired);\n     BOOST_FOREACH(const CPubKey& key, keys)\n-        script << key;\n+        script << ToByteVector(key);\n     script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }"
      },
      {
        "sha": "e9fc86779abe2475d563ca7abe8da7bb5b09e42f",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -51,13 +51,13 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         key[i].MakeNewKey(true);\n \n     CScript a_and_b;\n-    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CScript a_or_b;\n-    a_or_b << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_or_b << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CScript escrow;\n-    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);\n@@ -138,28 +138,28 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n     txnouttype whichType;\n \n     CScript a_and_b;\n-    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK(::IsStandard(a_and_b, whichType));\n \n     CScript a_or_b;\n-    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK(::IsStandard(a_or_b, whichType));\n \n     CScript escrow;\n-    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n     BOOST_CHECK(::IsStandard(escrow, whichType));\n \n     CScript one_of_four;\n-    one_of_four << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << key[3].GetPubKey() << OP_4 << OP_CHECKMULTISIG;\n+    one_of_four << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << ToByteVector(key[3].GetPubKey()) << OP_4 << OP_CHECKMULTISIG;\n     BOOST_CHECK(!::IsStandard(one_of_four, whichType));\n \n     CScript malformed[6];\n-    malformed[0] << OP_3 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-    malformed[1] << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n-    malformed[2] << OP_0 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n-    malformed[3] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_0 << OP_CHECKMULTISIG;\n-    malformed[4] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_CHECKMULTISIG;\n-    malformed[5] << OP_1 << key[0].GetPubKey() << key[1].GetPubKey();\n+    malformed[0] << OP_3 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n+    malformed[1] << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n+    malformed[2] << OP_0 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n+    malformed[3] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_0 << OP_CHECKMULTISIG;\n+    malformed[4] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_CHECKMULTISIG;\n+    malformed[5] << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey());\n \n     for (int i = 0; i < 6; i++)\n         BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n@@ -192,7 +192,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << key[0].GetPubKey() << OP_CHECKSIG;\n+        s << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n         CTxDestination addr;\n@@ -207,7 +207,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_DUP << OP_HASH160 << key[0].GetPubKey().GetID() << OP_EQUALVERIFY << OP_CHECKSIG;\n+        s << OP_DUP << OP_HASH160 << ToByteVector(key[0].GetPubKey().GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n         CTxDestination addr;\n@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         CTxDestination addr;\n@@ -237,7 +237,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         vector<CTxDestination> addrs;\n@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 5);\n     }\n@@ -274,13 +274,13 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     }\n \n     CScript a_and_b;\n-    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_and_b << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CScript a_or_b;\n-    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_or_b  << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CScript escrow;\n-    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    escrow << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);"
      },
      {
        "sha": "fcab652783e63faa803f6162ce6a2141328d1dc3",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -67,9 +67,9 @@ BOOST_AUTO_TEST_CASE(sign)\n     // 8 Scripts: checking all combinations of\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n-    standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[0] << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n     standardScripts[1] = GetScriptForDestination(key[1].GetPubKey().GetID());\n-    standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[2] << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n     standardScripts[3] = GetScriptForDestination(key[2].GetPubKey().GetID());\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n@@ -206,9 +206,9 @@ BOOST_AUTO_TEST_CASE(set)\n BOOST_AUTO_TEST_CASE(is)\n {\n     // Test CScript::IsPayToScriptHash()\n-    uint160 dummy;\n+    uint160 dummy(0);\n     CScript p2sh;\n-    p2sh << OP_HASH160 << dummy << OP_EQUAL;\n+    p2sh << OP_HASH160 << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(p2sh.IsPayToScriptHash());\n \n     // Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:\n@@ -224,13 +224,13 @@ BOOST_AUTO_TEST_CASE(is)\n     CScript not_p2sh;\n     BOOST_CHECK(!not_p2sh.IsPayToScriptHash());\n \n-    not_p2sh.clear(); not_p2sh << OP_HASH160 << dummy << dummy << OP_EQUAL;\n+    not_p2sh.clear(); not_p2sh << OP_HASH160 << ToByteVector(dummy) << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(!not_p2sh.IsPayToScriptHash());\n \n-    not_p2sh.clear(); not_p2sh << OP_NOP << dummy << OP_EQUAL;\n+    not_p2sh.clear(); not_p2sh << OP_NOP << ToByteVector(dummy) << OP_EQUAL;\n     BOOST_CHECK(!not_p2sh.IsPayToScriptHash());\n \n-    not_p2sh.clear(); not_p2sh << OP_HASH160 << dummy << OP_CHECKSIG;\n+    not_p2sh.clear(); not_p2sh << OP_HASH160 << ToByteVector(dummy) << OP_CHECKSIG;\n     BOOST_CHECK(!not_p2sh.IsPayToScriptHash());\n }\n \n@@ -285,9 +285,9 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // vout[3] is complicated 1-of-3 AND 2-of-3\n     // ... that is OK if wrapped in P2SH:\n     CScript oneAndTwo;\n-    oneAndTwo << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey();\n+    oneAndTwo << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey());\n     oneAndTwo << OP_3 << OP_CHECKMULTISIGVERIFY;\n-    oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n+    oneAndTwo << OP_2 << ToByteVector(key[3].GetPubKey()) << ToByteVector(key[4].GetPubKey()) << ToByteVector(key[5].GetPubKey());\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     keystore.AddCScript(oneAndTwo);\n     txFrom.vout[3].scriptPubKey = GetScriptForDestination(CScriptID(oneAndTwo));\n@@ -296,7 +296,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // vout[4] is max sigops:\n     CScript fifteenSigops; fifteenSigops << OP_1;\n     for (unsigned i = 0; i < MAX_P2SH_SIGOPS; i++)\n-        fifteenSigops << key[i%3].GetPubKey();\n+        fifteenSigops << ToByteVector(key[i%3].GetPubKey());\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     keystore.AddCScript(fifteenSigops);\n     txFrom.vout[4].scriptPubKey = GetScriptForDestination(CScriptID(fifteenSigops));"
      },
      {
        "sha": "d3fc673a7934a4c48b9650682a78b39421292d5c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 44,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -162,7 +162,7 @@ class TestBuilder\n     TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n     {\n         if (P2SH) {\n-            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << CScriptID(redeemScript) << OP_EQUAL);\n+            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n         } else {\n             creditTx = BuildCreditingTransaction(redeemScript);\n         }\n@@ -270,135 +270,135 @@ BOOST_AUTO_TEST_CASE(script_build)\n     std::vector<TestBuilder> good;\n     std::vector<TestBuilder> bad;\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2PK\", 0\n                               ).PushSig(keys.key0));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK, bad sig\", 0\n                              ).PushSig(keys.key0).DamagePush(10));\n \n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2PKH\", 0\n                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey2C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2PKH, bad pubkey\", 0\n                              ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK anyonecanpay\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK anyonecanpay marked with normal hashtype\", 0\n                              ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                               \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n                              ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n \n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n                              ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n \n-    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3\", 0\n                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3, 2 sigs\", 0\n                              ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n \n-    good.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n                              ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding but no DERSIG\", 0\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                               \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n                              ).PushSig(keys.key0, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n                              ).PushSig(keys.key0, SIGHASH_ALL));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n                               ).PushSig(keys.key0, SIGHASH_ALL));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n \n-    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n                              ).PushSig(keys.key1, 5));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n                              ).PushSig(keys.key1, 5).DamagePush(10));\n \n-    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                               \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n \n@@ -582,7 +582,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     key3.MakeNewKey(true);\n \n     CScript scriptPubKey12;\n-    scriptPubKey12 << OP_1 << key1.GetPubKey() << key2.GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    scriptPubKey12 << OP_1 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n@@ -608,7 +608,7 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     key4.MakeNewKey(false);\n \n     CScript scriptPubKey23;\n-    scriptPubKey23 << OP_2 << key1.GetPubKey() << key2.GetPubKey() << key3.GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    scriptPubKey23 << OP_2 << ToByteVector(key1.GetPubKey()) << ToByteVector(key2.GetPubKey()) << ToByteVector(key3.GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n \n     CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n     CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n@@ -695,7 +695,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == scriptSigCopy || combined == scriptSig);\n \n     // P2SH, single-signature case:\n-    CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n+    CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0);"
      },
      {
        "sha": "7b27703b622306ac598048b1695210d93fc0489d",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -31,8 +31,8 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0U);\n \n-    uint160 dummy;\n-    s1 << OP_1 << dummy << dummy << OP_2 << OP_CHECKMULTISIG;\n+    uint160 dummy(0);\n+    s1 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2U);\n     s1 << OP_IF << OP_CHECKSIG << OP_ENDIF;\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;\n-    scriptSig2 << OP_1 << dummy << dummy << Serialize(s2);\n+    scriptSig2 << OP_1 << ToByteVector(dummy) << ToByteVector(dummy) << Serialize(s2);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig2), 3U);\n }\n "
      },
      {
        "sha": "41ccaaac9452065ece50aea67aed395b57984689",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9ca4280f3abb8b2b6fa35a41e881996278ebfff/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "patch": "@@ -259,9 +259,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n     // Create some dummy input transactions\n     dummyTransactions[0].vout.resize(2);\n     dummyTransactions[0].vout[0].nValue = 11*CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n     coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n \n     dummyTransactions[1].vout.resize(2);"
      }
    ]
  },
  {
    "sha": "db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjhlYjU0YmQ3MjM5ZmYyYjA0NmZlMzRiMWM4ZDY5Mjg2MGM2YjVi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T23:45:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-17T17:44:14Z"
      },
      "message": "script: move ToString and ValueString out of the header",
      "tree": {
        "sha": "1e7f930b2adeb44df71e1c32d55a8bdc71aff485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e7f930b2adeb44df71e1c32d55a8bdc71aff485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9ca4280f3abb8b2b6fa35a41e881996278ebfff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9ca4280f3abb8b2b6fa35a41e881996278ebfff"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 34,
      "deletions": 29
    },
    "files": [
      {
        "sha": "1ce8ddb6df3e05843ff162547bef448cacb82a87",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
        "patch": "@@ -7,6 +7,16 @@\n \n #include <boost/foreach.hpp>\n \n+namespace {\n+inline std::string ValueString(const std::vector<unsigned char>& vch)\n+{\n+    if (vch.size() <= 4)\n+        return strprintf(\"%d\", CScriptNum(vch).getint());\n+    else\n+        return HexStr(vch);\n+}\n+} // anon namespace\n+\n using namespace std;\n \n const char* GetOpName(opcodetype opcode)\n@@ -253,3 +263,26 @@ bool CScript::HasCanonicalPushes() const\n     }\n     return true;\n }\n+\n+std::string CScript::ToString() const\n+{\n+    std::string str;\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    const_iterator pc = begin();\n+    while (pc < end())\n+    {\n+        if (!str.empty())\n+            str += \" \";\n+        if (!GetOp(pc, opcode, vch))\n+        {\n+            str += \"[error]\";\n+            return str;\n+        }\n+        if (0 <= opcode && opcode <= OP_PUSHDATA4)\n+            str += ValueString(vch);\n+        else\n+            str += GetOpName(opcode);\n+    }\n+    return str;\n+}"
      },
      {
        "sha": "4f6ee0c521146ff716f8fdc5a8df179314262ed0",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 29,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
        "patch": "@@ -318,13 +318,6 @@ class CScriptNum\n     int64_t m_value;\n };\n \n-inline std::string ValueString(const std::vector<unsigned char>& vch)\n-{\n-    if (vch.size() <= 4)\n-        return strprintf(\"%d\", CScriptNum(vch).getint());\n-    else\n-        return HexStr(vch);\n-}\n \n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n@@ -571,28 +564,7 @@ class CScript : public std::vector<unsigned char>\n         return (size() > 0 && *begin() == OP_RETURN);\n     }\n \n-    std::string ToString() const\n-    {\n-        std::string str;\n-        opcodetype opcode;\n-        std::vector<unsigned char> vch;\n-        const_iterator pc = begin();\n-        while (pc < end())\n-        {\n-            if (!str.empty())\n-                str += \" \";\n-            if (!GetOp(pc, opcode, vch))\n-            {\n-                str += \"[error]\";\n-                return str;\n-            }\n-            if (0 <= opcode && opcode <= OP_PUSHDATA4)\n-                str += ValueString(vch);\n-            else\n-                str += GetOpName(opcode);\n-        }\n-        return str;\n-    }\n+    std::string ToString() const;\n     void clear()\n     {\n         // The default std::vector::clear() does not release memory."
      }
    ]
  },
  {
    "sha": "85c579e3a63cf505d6cedc454755265572e97d3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWM1NzllM2E2M2NmNTA1ZDZjZWRjNDU0NzU1MjY1NTcyZTk3ZDNl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T03:32:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-17T17:44:57Z"
      },
      "message": "script: add a slew of includes all around and drop includes from script.h\n\nLots of files ended up with indirect includes from script.h.",
      "tree": {
        "sha": "116da64bbc269152c7026948b8600cfa1ac8f87a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/116da64bbc269152c7026948b8600cfa1ac8f87a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85c579e3a63cf505d6cedc454755265572e97d3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c579e3a63cf505d6cedc454755265572e97d3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85c579e3a63cf505d6cedc454755265572e97d3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c579e3a63cf505d6cedc454755265572e97d3e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db8eb54bd7239ff2b046fe34b1c8d692860c6b5b"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 31,
      "deletions": 7
    },
    "files": [
      {
        "sha": "961919d97eab8e6baae65480ebda576101d50720",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"core.h\"\n #include \"pow.h\"\n+#include \"tinyformat.h\"\n #include \"uint256.h\"\n \n #include <vector>"
      },
      {
        "sha": "68960762455d120f96c0250e777861d132792b3e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"random.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <assert.h>\n "
      },
      {
        "sha": "73e6de88e1f5d0083aced4a7c5ce8a0f9dd6e184",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -5,7 +5,9 @@\n \n #include \"core.h\"\n \n+#include \"hash.h\"\n #include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n \n std::string COutPoint::ToString() const\n {"
      },
      {
        "sha": "8b85a03c548f48218ded557f2e0c95b032083543",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -9,6 +9,8 @@\n #include \"serialize.h\"\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"version.h\"\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>"
      },
      {
        "sha": "e42e0b62a9417140cc31ca46e2ff926b4875269d",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -12,6 +12,7 @@\n #include \"univalue/univalue.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "9f9401653e7f5dda448e4ccddaeb35f200346e33",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -20,6 +20,7 @@\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n+#include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"uint256.h\"\n "
      },
      {
        "sha": "72fdd753a81b8084c2399294dcbb5192643f6a1d",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"chainparams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #ifndef WIN32\n # include <arpa/inet.h>"
      },
      {
        "sha": "84cab01c50530818f96dcfde9a2dcc0bc77d8a74",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"paymentrequestdata.h\"\n \n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>"
      },
      {
        "sha": "af1acf48db382d716ed365fdd22e3d392bd9b525",
        "filename": "src/script/compressor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/compressor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/compressor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"compressor.h\"\n+\n+#include \"key.h\"\n #include \"script/standard.h\"\n \n bool CScriptCompressor::IsToKeyID(CKeyID &hash) const"
      },
      {
        "sha": "154e0b266243c4bc91b2c399b0b4859720d25586",
        "filename": "src/script/compressor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/compressor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/compressor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/compressor.h?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -7,7 +7,10 @@\n #define H_BITCOIN_SCRIPT_COMPRESSOR\n \n #include \"script/script.h\"\n+#include \"serialize.h\"\n \n+class CKeyID;\n+class CPubKey;\n class CScriptID;\n \n /** Compact serializer for scripts."
      },
      {
        "sha": "cd73b88210c0d200fad66c99e321d191f14aaf03",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n+#include \"key.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\""
      },
      {
        "sha": "3e19d0c2bf04d26f4a00794c3ec44dbe4a5d02b2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -5,7 +5,8 @@\n \n #include \"script.h\"\n \n-#include <boost/foreach.hpp>\n+#include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n \n namespace {\n inline std::string ValueString(const std::vector<unsigned char>& vch)"
      },
      {
        "sha": "a68924c73a3b45c117066169df7ed020a33c788b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -6,13 +6,13 @@\n #ifndef H_BITCOIN_SCRIPT\n #define H_BITCOIN_SCRIPT\n \n-#include \"key.h\"\n-#include \"tinyformat.h\"\n-#include \"utilstrencodings.h\"\n-\n+#include <assert.h>\n+#include <climits>\n+#include <limits>\n #include <stdexcept>\n-\n-#include <boost/variant.hpp>\n+#include <stdint.h>\n+#include <string.h>\n+#include <vector>\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n "
      },
      {
        "sha": "05938961bc6d3715b20a54b96c6a17a9cc2544fd",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"script/script.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "961b214c8949f19c618f4ba303a7f7e472898268",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -6,9 +6,12 @@\n #ifndef H_BITCOIN_SCRIPT_STANDARD\n #define H_BITCOIN_SCRIPT_STANDARD\n \n+#include \"key.h\"\n #include \"script/script.h\"\n #include \"script/interpreter.h\"\n \n+#include <boost/variant.hpp>\n+\n #include <stdint.h>\n \n class CScript;"
      },
      {
        "sha": "e495435b81750351408029ca6f929a775bb2190f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -12,6 +12,7 @@\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "4522c63617be5240a703659677a5646185e2be7b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -8,6 +8,7 @@\n #include \"core.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"version.h\"\n \n #include <boost/circular_buffer.hpp>\n "
      },
      {
        "sha": "95be06aa18755548c3df674b714e0ce121c92560",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c579e3a63cf505d6cedc454755265572e97d3e/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c579e3a63cf505d6cedc454755265572e97d3e/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=85c579e3a63cf505d6cedc454755265572e97d3e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"core.h\"\n #include \"tinyformat.h\"\n+#include \"utilstrencodings.h\"\n \n using namespace std;\n "
      }
    ]
  }
]