MarcoFalke,2020-04-28 00:33:19,"Not sure how to test manually, but I have included a unit test",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-620307462,620307462,
hebasto,2020-04-28 00:41:11,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-620309571,620309571,
practicalswift,2020-04-28 06:18:58,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-620404249,620404249,
laanwj,2020-04-30 10:35:50,"The main thing to review here is the change in behavior: `interruption_point` raises an exception that escalates all the way to the thread main level, while the new code returns `false`, which is handled differently. For example it will still continue iterating over `for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {`. so `dbh.nLastSeen` and `dbh.nLastWalletUpdate` will be updated for ",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-621752339,621752339,
MarcoFalke,2020-04-30 11:05:10,"> I do not know if this is a problem\n\nMe neither, but it seems avoidable by adding one more if-check. Done that.",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-621764970,621764970,
laanwj,2020-04-30 11:48:43,Shouldn't the check be at the beginning of the for loop instead of of `MaybeCompactWalletDB` in that case?,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-621783740,621783740,
MarcoFalke,2020-04-30 15:35:29,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-621930861,621930861,
MarcoFalke,2020-05-04 17:56:50,Rebased after silent merge conflict,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-623613055,623613055,
DrahtBot,2020-05-14 04:34:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19137 (wallettool: Add dump and createfromdump commands by achow101)\n* #19102 (wallet: Introduce and use DummyDatabase i",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-628380699,628380699,
MarcoFalke,2020-05-26 10:28:49,"> Concept ACK. Can you add a description for this PR?\n\nDone",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-633943106,633943106,
MarcoFalke,2020-05-26 10:49:24,"> You say here: #18758 (comment) that these interruption points can't be used.\n\nSorry, that pull is still marked as draft and is not ready for review. The decision boils down to ""Is the interruption point run in a `std::thread`? If yes, the interruption point is unused"".\n\n*Here*, the scheduler is (still) a `boost::thread`, so the point should not be unused.",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-633951589,633951589,
MarcoFalke,2020-05-26 12:07:13,Force pushed to address feedback by @jnewbery (remove boost include from db.cpp),https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-633984020,633984020,
jnewbery,2020-05-26 18:46:21,"> Force pushed to address feedback by @jnewbery (remove boost include from db.cpp)\n\nI also suggested removing it from `walletdb.cpp`. Is that not possible?",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634207975,634207975,
jnewbery,2020-05-26 20:08:01,"> the scheduler is (still) a boost::thread, so the point should not be unused.\n\nFrom a quick read of https://www.boost.org/doc/libs/1_53_0/doc/html/thread/thread_management.html#thread.thread_management.tutorial.interruption, it seems to me that the `boost::thread::interruption_point` only does anything if that thread's `interrupt()` function is called.\n\nThe only place that happens is the ",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634251470,634251470,
MarcoFalke,2020-05-26 23:29:18,walletdb.cpp is still using it https://github.com/bitcoin/bitcoin/blob/fabd1c91b4c715f0b0cfa28457cf766246568449/src/wallet/walletdb.cpp#L742,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634333600,634333600,
MarcoFalke,2020-05-26 23:46:55,"> The only place that happens is the threadGroup.interrupt_all() call in Shutdown(), which (since #18234) happens after the scheduler thread is stopped.\n\nIt looks like 306f71b4eb4a0fd8e64f47dc008bc235b80b13d9 tells the scheduler to stop *after* the current task is executed or *before* the execution starts (i.e. the scheduler is waiting for the next flush). The call is non-blocking when a task ",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634338877,634338877,
MarcoFalke,2020-05-26 23:54:37,I start to wonder if it is worth to abort the periodic flush when flush(true) is called shortly after in `StopWallets`.,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634341090,634341090,
jnewbery,2020-05-27 15:32:23,"> walletdb.cpp is still using it ...\n\nThat's a catch in `WalletBatch::LoadWallet()`, which I think is only called in the main thread or rpc thread.\n\n",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634743665,634743665,
jnewbery,2020-05-27 15:54:39,"> It looks like 306f71b tells the scheduler to stop after the current task is executed or before the execution starts (i.e. the scheduler is waiting for the next flush). The call is non-blocking when a task is currently executed. Consequently, the next line will interrupt all threads in the thread group, which will also interrupt the periodic flush action in case it is currently running. So I don'",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634758374,634758374,
MarcoFalke,2020-05-27 17:48:45,Simplified pull request to only remove code :rocket: ,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634831591,634831591,
jnewbery,2020-05-27 19:59:09,"concept ACK just removing the boost interruption stuff. It's essentially unused for the reason you give. We'd only ever interrupt a flush that we're doing between two other flushes.\n\nutACK fa7b885f51ff848d3f913bc6e15d24528300c210",https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-634907986,634907986,
MarcoFalke,2020-05-28 11:25:08,@laanwj @hebasto Mind taking another look here?,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-635281145,635281145,
MarcoFalke,2020-06-02 13:14:48,@fanquake Good catch. Added a commit with rationale to remove that as well.,https://github.com/bitcoin/bitcoin/pull/18792#issuecomment-637534501,637534501,
jnewbery,2020-05-25 18:14:23,Why not use default member initialization in the header file?,https://github.com/bitcoin/bitcoin/pull/18792#discussion_r430038437,430038437,src/wallet/wallet.cpp
MarcoFalke,2020-05-26 10:28:28,This wouldn't compile. Thanks C++,https://github.com/bitcoin/bitcoin/pull/18792#discussion_r430312435,430312435,src/wallet/wallet.cpp
