[
  {
    "sha": "868d041622e2f589ab4535c30ce683534b6d4f71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjhkMDQxNjIyZTJmNTg5YWI0NTM1YzMwY2U2ODM1MzRiNmQ0Zjcx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-12T00:41:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-08T22:05:42Z"
      },
      "message": "Remove coinbase-dependant transactions during reorg.\n\nThis still leaves transactions in mempool that are potentially\ninvalid if the maturity period has been reorged out of, but at\nleast they're not missing inputs entirely.",
      "tree": {
        "sha": "bb46d3a10c60d9601fb38ed9d8f587aab1ee1327",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb46d3a10c60d9601fb38ed9d8f587aab1ee1327"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/868d041622e2f589ab4535c30ce683534b6d4f71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868d041622e2f589ab4535c30ce683534b6d4f71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/868d041622e2f589ab4535c30ce683534b6d4f71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868d041622e2f589ab4535c30ce683534b6d4f71/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b5b263ac0ee44fe432a713b444df9880cfce4a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b5b263ac0ee44fe432a713b444df9880cfce4a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b5b263ac0ee44fe432a713b444df9880cfce4a2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3a2c167e805e0a0863eeca1fef628567b7bb07f4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/868d041622e2f589ab4535c30ce683534b6d4f71/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/868d041622e2f589ab4535c30ce683534b6d4f71/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=868d041622e2f589ab4535c30ce683534b6d4f71",
        "patch": "@@ -1892,9 +1892,8 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (!tx.IsCoinBase())\n-            if (!AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n-                mempool.remove(tx, removed, true);\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n+            mempool.remove(tx, removed, true);\n     }\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables."
      }
    ]
  },
  {
    "sha": "723d12c098456e7682e641076e76468a9fb0cec0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNkMTJjMDk4NDU2ZTc2ODJlNjQxMDc2ZTc2NDY4YTlmYjBjZWMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-12T04:57:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-08T22:05:42Z"
      },
      "message": "Remove txn which are invalidated by coinbase maturity during reorg",
      "tree": {
        "sha": "f50a3c3ee4baa4e0507dc1befda01ed03784d8af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f50a3c3ee4baa4e0507dc1befda01ed03784d8af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723d12c098456e7682e641076e76468a9fb0cec0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723d12c098456e7682e641076e76468a9fb0cec0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723d12c098456e7682e641076e76468a9fb0cec0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723d12c098456e7682e641076e76468a9fb0cec0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "868d041622e2f589ab4535c30ce683534b6d4f71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/868d041622e2f589ab4535c30ce683534b6d4f71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/868d041622e2f589ab4535c30ce683534b6d4f71"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9e1c41ada7c9b80adfac61cdff43c97ccf62a619",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723d12c098456e7682e641076e76468a9fb0cec0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723d12c098456e7682e641076e76468a9fb0cec0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=723d12c098456e7682e641076e76468a9fb0cec0",
        "patch": "@@ -1895,6 +1895,7 @@ bool static DisconnectTip(CValidationState &state) {\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n     }\n+    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);"
      },
      {
        "sha": "ff04a8ad9ae939d909b7177bd7a82f5d5c695cf7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723d12c098456e7682e641076e76468a9fb0cec0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723d12c098456e7682e641076e76468a9fb0cec0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=723d12c098456e7682e641076e76468a9fb0cec0",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n+#include \"main.h\" // for COINBASE_MATURITY\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -453,6 +454,31 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n     }\n }\n \n+void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+{\n+    // Remove transactions spending a coinbase which are now immature\n+    LOCK(cs);\n+    list<CTransaction> transactionsToRemove;\n+    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+        const CTransaction& tx = it->second.GetTx();\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            if (it2 != mapTx.end())\n+                continue;\n+            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+            if (fSanityCheck) assert(coins);\n+            if (!coins || (coins->IsCoinBase() && nMemPoolHeight - coins->nHeight < COINBASE_MATURITY)) {\n+                transactionsToRemove.push_back(tx);\n+                break;\n+            }\n+        }\n+    }\n+    BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n+        list<CTransaction> removed;\n+        remove(tx, removed, true);\n+    }\n+}\n+\n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively"
      },
      {
        "sha": "f671352b58552d68c68f787bf787f27b91bee77f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723d12c098456e7682e641076e76468a9fb0cec0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723d12c098456e7682e641076e76468a9fb0cec0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=723d12c098456e7682e641076e76468a9fb0cec0",
        "patch": "@@ -113,6 +113,7 @@ class CTxMemPool\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n+    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts);"
      }
    ]
  },
  {
    "sha": "b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2I0MzE4ZjNhNjVkNmU1NWQ0NGJmZjVkYTEwOTFlYzBiM2EyNmQy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-12T05:06:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-08T22:05:42Z"
      },
      "message": "Make CTxMemPool::check more thourough by using CheckInputs",
      "tree": {
        "sha": "725f34ae07e2c8c203b696f98240a0575f808653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/725f34ae07e2c8c203b696f98240a0575f808653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723d12c098456e7682e641076e76468a9fb0cec0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723d12c098456e7682e641076e76468a9fb0cec0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723d12c098456e7682e641076e76468a9fb0cec0"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6ecd64636b4968835c7aeb33e2cb1d36e235474c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
        "patch": "@@ -6,7 +6,7 @@\n #include \"txmempool.h\"\n \n #include \"clientversion.h\"\n-#include \"main.h\" // for COINBASE_MATURITY\n+#include \"main.h\"\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -539,17 +539,22 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n     uint64_t checkTotal = 0;\n \n+    CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n+\n     LOCK(cs);\n+    list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n         const CTransaction& tx = it->second.GetTx();\n+        bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n             std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->second.GetTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n+                fDependsWait = true;\n             } else {\n                 const CCoins* coins = pcoins->AccessCoins(txin.prevout.hash);\n                 assert(coins && coins->IsAvailable(txin.prevout.n));\n@@ -561,6 +566,29 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             assert(it3->second.n == i);\n             i++;\n         }\n+        if (fDependsWait)\n+            waitingOnDependants.push_back(&it->second);\n+        else {\n+            CValidationState state; CTxUndo undo;\n+            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            UpdateCoins(tx, state, mempoolDuplicate, undo, 1000000);\n+        }\n+    }\n+    unsigned int stepsSinceLastRemove = 0;\n+    while (!waitingOnDependants.empty()) {\n+        const CTxMemPoolEntry* entry = waitingOnDependants.front();\n+        waitingOnDependants.pop_front();\n+        CValidationState state;\n+        if (!mempoolDuplicate.HaveInputs(entry->GetTx())) {\n+            waitingOnDependants.push_back(entry);\n+            stepsSinceLastRemove++;\n+            assert(stepsSinceLastRemove < waitingOnDependants.size());\n+        } else {\n+            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            CTxUndo undo;\n+            UpdateCoins(entry->GetTx(), state, mempoolDuplicate, undo, 1000000);\n+            stepsSinceLastRemove = 0;\n+        }\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();"
      }
    ]
  },
  {
    "sha": "7fd6219af7006fddc4b675236bcd43dd7a9eb553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmQ2MjE5YWY3MDA2ZmRkYzRiNjc1MjM2YmNkNDNkZDdhOWViNTUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-18T22:57:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-08T22:09:58Z"
      },
      "message": "Make CTxMemPool::remove more effecient by avoiding recursion",
      "tree": {
        "sha": "6397d687af17ebf52c854051e44e8d18458b060a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6397d687af17ebf52c854051e44e8d18458b060a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fd6219af7006fddc4b675236bcd43dd7a9eb553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd6219af7006fddc4b675236bcd43dd7a9eb553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd6219af7006fddc4b675236bcd43dd7a9eb553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd6219af7006fddc4b675236bcd43dd7a9eb553/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b4318f3a65d6e55d44bff5da1091ec0b3a26d2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "840eb536baa01157010dc88d10bcd78570cf0d2a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd6219af7006fddc4b675236bcd43dd7a9eb553/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd6219af7006fddc4b675236bcd43dd7a9eb553/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7fd6219af7006fddc4b675236bcd43dd7a9eb553",
        "patch": "@@ -427,26 +427,32 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive)\n+void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n-        uint256 hash = tx.GetHash();\n-        if (fRecursive) {\n-            for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                if (it == mapNextTx.end())\n-                    continue;\n-                remove(*it->second.ptx, removed, true);\n-            }\n-        }\n-        if (mapTx.count(hash))\n+        std::deque<uint256> txToRemove;\n+        txToRemove.push_back(origTx.GetHash());\n+        while (!txToRemove.empty())\n         {\n-            removed.push_front(tx);\n+            uint256 hash = txToRemove.front();\n+            txToRemove.pop_front();\n+            if (!mapTx.count(hash))\n+                continue;\n+            const CTransaction& tx = mapTx[hash].GetTx();\n+            if (fRecursive) {\n+                for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+                    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n+                    if (it == mapNextTx.end())\n+                        continue;\n+                    txToRemove.push_back(it->second.ptx->GetHash());\n+                }\n+            }\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n \n+            removed.push_back(tx);\n             totalTxSize -= mapTx[hash].GetTxSize();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;"
      }
    ]
  },
  {
    "sha": "34318d7fad7922ce56ff47908ff70e2c8a42ee56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDMxOGQ3ZmFkNzkyMmNlNTZmZjQ3OTA4ZmY3MGUyYzhhNDJlZTU2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-11-24T20:18:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-08T22:09:58Z"
      },
      "message": "RPC-test based on invalidateblock for mempool coinbase spends",
      "tree": {
        "sha": "6b7e2c9e7fd3d3b928865937d5f7e6e7f9ea24f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b7e2c9e7fd3d3b928865937d5f7e6e7f9ea24f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34318d7fad7922ce56ff47908ff70e2c8a42ee56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34318d7fad7922ce56ff47908ff70e2c8a42ee56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34318d7fad7922ce56ff47908ff70e2c8a42ee56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34318d7fad7922ce56ff47908ff70e2c8a42ee56/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd6219af7006fddc4b675236bcd43dd7a9eb553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd6219af7006fddc4b675236bcd43dd7a9eb553",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd6219af7006fddc4b675236bcd43dd7a9eb553"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 95,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d6ee00bb7df06a310ae270f5e6c64835a64072ba",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34318d7fad7922ce56ff47908ff70e2c8a42ee56/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34318d7fad7922ce56ff47908ff70e2c8a42ee56/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=34318d7fad7922ce56ff47908ff70e2c8a42ee56",
        "patch": "@@ -25,6 +25,7 @@ if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/rest.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/mempool_spendcoinbase.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/httpbasics.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/mempool_coinbase_spends.py --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n else\n   echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "7b43712768bf6eca4f309eb40030f019f729b463",
        "filename": "qa/rpc-tests/mempool_coinbase_spends.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34318d7fad7922ce56ff47908ff70e2c8a42ee56/qa/rpc-tests/mempool_coinbase_spends.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34318d7fad7922ce56ff47908ff70e2c8a42ee56/qa/rpc-tests/mempool_coinbase_spends.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_coinbase_spends.py?ref=34318d7fad7922ce56ff47908ff70e2c8a42ee56",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test re-org scenarios with a mempool that contains transactions\n+# that spend (directly or indirectly) coinbase transactions.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+# Create one-input, one-output, no-fee transaction:\n+class MempoolCoinbaseTest(BitcoinTestFramework):\n+\n+    alert_filename = None  # Set by setup_network\n+\n+    def setup_network(self):\n+        args = [\"-checkmempool\", \"-debug=mempool\"]\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(start_node(1, self.options.tmpdir, args))\n+        connect_nodes(self.nodes[1], 0)\n+        self.is_network_split = False\n+        self.sync_all\n+\n+    def create_tx(self, from_txid, to_address, amount):\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signresult = self.nodes[0].signrawtransaction(rawtx)\n+        assert_equal(signresult[\"complete\"], True)\n+        return signresult[\"hex\"]\n+\n+    def run_test(self):\n+        start_count = self.nodes[0].getblockcount()\n+\n+        # Mine three blocks. After this, nodes[0] blocks\n+        # 101, 102, and 103 are spend-able.\n+        new_blocks = self.nodes[1].setgenerate(True, 4)\n+        self.sync_all()\n+\n+        node0_address = self.nodes[0].getnewaddress()\n+        node1_address = self.nodes[1].getnewaddress()\n+\n+        # Three scenarios for re-orging coinbase spends in the memory pool:\n+        # 1. Direct coinbase spend  :  spend_101\n+        # 2. Indirect (coinbase spend in chain, child in mempool) : spend_102 and spend_102_1\n+        # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n+        # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n+        # and make sure the mempool code behaves correctly.\n+        b = [ self.nodes[0].getblockhash(n) for n in range(102, 105) ]\n+        coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n+        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+\n+        # Broadcast and mine spend_102 and 103:\n+        spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n+        spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n+        self.nodes[0].setgenerate(True, 1)\n+\n+        # Create 102_1 and 103_1:\n+        spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n+        spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n+\n+        # Broadcast and mine 103_1:\n+        spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n+        self.nodes[0].setgenerate(True, 1)\n+\n+        # ... now put spend_101 and spend_102_1 in memory pools:\n+        spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n+        spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n+\n+        self.sync_all()\n+\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+\n+        # Use invalidateblock to re-org back and make all those coinbase spends\n+        # immature/invalid:\n+        for node in self.nodes:\n+            node.invalidateblock(new_blocks[0])\n+\n+        self.sync_all()\n+\n+        # mempool should be empty.\n+        assert_equal(set(self.nodes[0].getrawmempool()), set())\n+\n+if __name__ == '__main__':\n+    MempoolCoinbaseTest().main()"
      }
    ]
  }
]