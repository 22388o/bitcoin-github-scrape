sipa,2014-11-17T14:47:49Z,@TheBlueMatt Can you get this in a state where the tests pass (perhaps by delaying the enabling of large-reorg)?\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-63314571,63314571,
gavinandresen,2014-11-19T16:24:49Z,"Upon review... it seems to me the first immature-coinbase-in-the-mempool bug is due to this code:\n\n```\n   // Resurrect mempool transactions from the disconnected block.\n    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n        // ignore validation errors in resurrected transactions\n        list<CTransaction> removed;\n        CValidationState stateDummy;\n        if (!tx.IsCoinBase())\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-63667210,63667210,
TheBlueMatt,2014-11-19T19:31:04Z,"@gavinandresen re: first bug: its not about transactions that are in the block, its about transactions in mempool, so calling AcceptToMemoryPool on anything that is within that loop wont help, afaict.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-63698507,63698507,
ghost,2014-11-24T05:49:16Z,"You don't need a large reorganization. Just connect some peers and start mining, then send some of the coinbase to each of the peers and keep mining, you will see it. The problem and solution is clear since this issue has been known since 5 years ago. :+1: \n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64154324,64154324,
TheBlueMatt,2014-11-24T06:10:12Z,"@john-connor I'd love to know what issue you're referring to here. There is certainly no way to ""send some of the coinbase to each of the peers"" and, in #2821 you seem to think it is a locking issue, but the proper locks appear to be taken in the block creation code.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64155126,64155126,
gavinandresen,2014-11-24T20:24:34Z,FYI: I'm working on tests for these cases using @sipa's excellent invalidatblock:\n   https://github.com/gavinandresen/bitcoin-git/tree/coinbase_in_mempool_tests\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64257988,64257988,
gavinandresen,2014-11-25T15:57:56Z,"Fails a test case I wrote:\n1. Spend a coinbase at depth 100+2, only in mempool (not confirmed)\n2. Re-org back to depth 99\n\nEXPECT: mempool empty\nRESULT: mempool contains the spend\n\nSee https://github.com/gavinandresen/bitcoin-git/commit/24eba4feffd29c0bee3e2296f04ed789b0b715f7 for code. (spend_101 is the transaction that is being left in the mempool)\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64421903,64421903,
ghost,2014-11-26T09:12:01Z,"@TheBlueMatt I never mentioned ""locks"". Setup a testnet of N peers and start mining, let the coinbase mature spend it around to the ""loosely organized"" peers (addresses), when N or more nodes generate a block a reorganization will possibly happen leaving some of the mempool's full of (now) invalid transactions. gavinandresen's latest test results confirm my theory. So, just remove them from the me",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64534189,64534189,
TheBlueMatt,2014-11-27T01:29:16Z,@john-connor So...you're referring to the bug that both of these pulls fix in different ways?\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64734500,64734500,
TheBlueMatt,2014-11-27T07:47:29Z,"Note that the failures here are only from the test-update. I spent a while trying to get it to not overrun travis' memory, and while I have one I think should work, I miscompiled it and then left and forgot to even push the source...so its gonna be till next week before I can get that updated. In any case, its been passing locally for a while, and I also added gavin's tester from #5368 on a branch",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64755971,64755971,
ghost,2014-11-28T01:47:32Z,"@TheBlueMatt These don't fix the entire problem(s) but is a start.The invalid transaction will make it into the mempool long enough to get broadcasted out to the network where it will cause further mempool pollution. So, it's still going to waste global network bandwidth. Luckily the wallet is smart enough to not allow the invalid transaction onto the network during a resend so it stops with the m",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64843717,64843717,
TheBlueMatt,2014-11-28T02:21:18Z,"Huh? The transactions are valid, but become invalid during a reorg (not even after)... Each node is responsible for keeping its mempool valid, not its peers. Again, I'm really not sure what bug you're talking about. \n\nOn November 27, 2014 8:47:40 PM EST, John Connor notifications@github.com wrote:\n\n> @TheBlueMatt These don't exactly fix the problem(s). The invalid\n> transaction will make it i",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64845783,64845783,
ghost,2014-11-28T19:54:16Z,@TheBlueMatt then we are talking about two very similar but different bugs. I'll open an issue that shows the full problem.\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64924672,64924672,
sipa,2014-11-29T12:14:09Z,"@gavinandresen @TheBlueMatt Just to be clear about the off-by-one: a transaction that made it into block N, can be spent at block N+100, which means with 101 confirmations (as the block it's in already counts for 1).\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64949896,64949896,
TheBlueMatt,2014-11-29T17:56:59Z,"Hmm? The confusion actually wasn't about which block can spend an output, but about the definition of the memorial mempool's spendability requirement. \n\nOn November 29, 2014 7:14:16 AM EST, Pieter Wuille notifications@github.com wrote:\n\n> @gavinandresen @TheBlueMatt Just to be clear about the off-by-one: a\n> transaction that made it into block N, can be spent at block N+100,\n> which means wi",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-64959728,64959728,
TheBlueMatt,2014-12-04T10:07:09Z,"I rebased on top of master, allowing me to pull in @gavinandresen's test from #5368 without depending on another pull req, fixed the block-tester issues, and removed the commit which got rid of the removed-tx tracking (that @dgenr8 had issues with, though I'm still not able to reproduce...I'll reintroduce that in a separate pull req).\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65603353,65603353,
sipa,2014-12-04T15:25:28Z,"@TheBlueMatt If you can get Travis to succeed here, I'll reconsider, but right now this is just not mergable.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65647832,65647832,
TheBlueMatt,2014-12-04T20:11:42Z,"@sipa I said the failures are just the test-update, could easily merge without it...anyway, I removed that commit, I'll add it again via another pull.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65695162,65695162,
sipa,2014-12-04T20:14:29Z,"@TheBlueMatt Sorry, missed that. I knew that the problem was just in the tester, but really - if Travis doesn't pass, I tend to ignore it.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65695552,65695552,
sipa,2014-12-05T02:00:52Z,"Untested ACK; I prefer this approach over #5368, and it seems to pass the same tests.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65736943,65736943,
gavinandresen,2014-12-05T02:23:14Z,"Untested ACK, I have no preference on which version of this makes it in.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-65738555,65738555,
TheBlueMatt,2014-12-08T22:06:37Z,Rebased for dumb merge conflict (new tests in rpc-test.sh).\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-66196723,66196723,
TheBlueMatt,2014-12-08T22:10:37Z,"Oh, and resolved sipa's nit.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-66197302,66197302,
sipa,2014-12-09T14:21:20Z,Which one?\n,https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-66288906,66288906,
laanwj,2014-12-10T07:28:41Z,"utACK commithash 34318d7fad7922ce56ff47908ff70e2c8a42ee56. \n\nI have no preference which one makes it in either, #5267 or #5368. Which I suppose means that @sipa's preference for this one is the tie-breaker.\n([signature](https://dev.visucore.com/bitcoin/acks/5267))\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-66413868,66413868,
TheBlueMatt,2014-12-10T07:31:08Z,"@sipa the ""while(!thing.empty())"" vs ""while (thing.size())"" one.\n",https://github.com/bitcoin/bitcoin/pull/5267#issuecomment-66414044,66414044,
luke-jr,2014-11-13T00:36:34Z,Won't AcceptToMemoryPool short-circuit since it's already in there? (irrelevant if the short-circuit returns true or false)\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20264839,20264839,src/main.cpp
luke-jr,2014-11-13T00:37:51Z,Why would they be immature? In the rare event of a reorg-to-chain-with-more-work-but-less-height?\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20264899,20264899,src/txmempool.cpp
TheBlueMatt,2014-11-13T00:40:28Z,"Yes, and to keep mempool consistent during reorgs.\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20264996,20264996,src/txmempool.cpp
TheBlueMatt,2014-11-13T00:41:02Z,Huh? The AcceptToMemoryPool is returning the tx that is being resurrected.\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20265016,20265016,src/main.cpp
luke-jr,2014-11-13T01:57:39Z,"AcceptToMemoryPool isn't returning any tx, it's trying to add the already-set-variable tx to the memory pool.\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20268267,20268267,src/main.cpp
TheBlueMatt,2014-11-13T02:00:31Z,"AcceptToMemoryPool is returning the tx to the mempool (ie is doing the resurrecting), sorry that comment was entirely unclear.\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20268354,20268354,src/main.cpp
luke-jr,2014-11-13T02:07:44Z,"Got it. The mempool.remove still doesn't make sense, though...\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20268555,20268555,src/main.cpp
TheBlueMatt,2014-11-13T02:12:57Z,I didnt change the mempool.remove??? I just made it remove dependents of a coinbase transaction by changing the conditional...\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20268706,20268706,src/main.cpp
luke-jr,2014-11-13T02:51:59Z,I'm not sure it made sense before the change either. Maybe I'm missing something.\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20269826,20269826,src/main.cpp
TheBlueMatt,2014-11-13T02:53:46Z,"Well it certainly makes sense now (ie now, if a coinbase is removed during a reorg, it will remove its dependants from mempool, which it did not use to)\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r20269887,20269887,src/main.cpp
dgenr8,2014-11-29T23:45:44Z,@TheBlueMatt This declaration can be removed.\n,https://github.com/bitcoin/bitcoin/pull/5267#discussion_r21057163,21057163,src/txmempool.cpp
laanwj,2014-12-11T12:35:29Z,"People may wonder about this so this const_cast needs a comment why it doesn't break expectations: the resulting child cache is never flushed so it is effectively const, and we don't have a CConstCoinsViewCache that would make this explicit.\n",https://github.com/bitcoin/bitcoin/pull/5267#discussion_r21673587,21673587,src/txmempool.cpp
