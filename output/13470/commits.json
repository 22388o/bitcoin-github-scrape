[
  {
    "sha": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTcyYTM4ZDMxMWQ2ZGFjYTdlZTA1MDNmMjM5NzNmZjVlNzAzOGY4",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-06-14T14:06:11Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-06-14T14:06:11Z"
      },
      "message": "[bench] CCoinsView(Cache): measure various scenarios",
      "tree": {
        "sha": "fc1c93a6cdab3cceb6b3a00fa16ffbed28a40a0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc1c93a6cdab3cceb6b3a00fa16ffbed28a40a0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8572a38d311d6daca7ee0503f23973ff5e7038f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlsidlMACgkQV/+b28ww\nEAmHwQ//aOgis53LMqOXbGOKJ2FyDdPdeVF4rhaQmJrMlJ2GIUyNwxLOnOEXGNzV\nQvzC1QGtikbj4MD1MRR3vIok3h3eQu8Cs6nVsA4VhX2CW6Ro7HgMTkBS4wY1sqri\nYIKAPxn7CRU75/c4d8rprzu88qn7fS69Hs3NWRU/TioJwhk6bG/qywIXrRQfC6X2\nhgNjx+nJKShd+Wz6gF7dS1HXEm/1TB8uckpR73sqJgLOKWm8UH+A2ia9EBhsdwU6\ncsFUU5bSZpANb3zRxUMH0SzMQ5asXePVM239UOC33sbWq8vIXVvN1x6Krsx2ae6z\n5I4pajje8iAhfAViNRq+8L+oHsBEh95gOBLFbdB5HxQK3poA1koPrnUgGnIBKcw1\nWeprYgveYXhNHxHZTqjX0CDvcEuAWKmRE5orLDtjDFHSixtU6td10cROyqiLFgJS\n5ibfzpSFndj0mh1KI8RHb6xLkVChz/cnrK8vAJRmjyIbfuTxE0qzq8CxBV7+KPLq\nU6MHYSNOOA5kzjLF5PPVkWv3nujWTAQPPVkn6hDjZ1L/YNDvP3aUq9vuxdToR7gg\ntA5t/z2utWECNoAstDNI9FxIHpDn+hSt/5cbVYWrr7iIGmX8gco+oENRZbEUn+gY\nbwFbNYlHfmLuZ16/AZDmxyk/VPN3CL25ua0Gk762Sl08gUG8XNs=\n=nPIS\n-----END PGP SIGNATURE-----",
        "payload": "tree fc1c93a6cdab3cceb6b3a00fa16ffbed28a40a0c\nparent f532d52d39658d0b58d9117a567336cab479dfed\nauthor Sjors Provoost <sjors@sprovoost.nl> 1528985171 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1528985171 +0200\n\n[bench] CCoinsView(Cache): measure various scenarios\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8572a38d311d6daca7ee0503f23973ff5e7038f8/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f532d52d39658d0b58d9117a567336cab479dfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f532d52d39658d0b58d9117a567336cab479dfed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f532d52d39658d0b58d9117a567336cab479dfed"
      }
    ],
    "stats": {
      "total": 297,
      "additions": 231,
      "deletions": 66
    },
    "files": [
      {
        "sha": "20b7b670632a27ce6320313dafdbb978cb163fcc",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=8572a38d311d6daca7ee0503f23973ff5e7038f8",
        "patch": "@@ -116,7 +116,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n         if (0 == num_iters) {\n             num_iters = 1;\n         }\n-        State state(p.first, num_evals, num_iters, printer);\n+        State state(p.first, num_evals, num_iters, scaling, printer);\n         if (!is_list_only) {\n             p.second.func(state);\n         }"
      },
      {
        "sha": "6472716afb743b619d50873e92462e35e46a9069",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=8572a38d311d6daca7ee0503f23973ff5e7038f8",
        "patch": "@@ -56,28 +56,59 @@ class State\n public:\n     std::string m_name;\n     uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n+    uint64_t m_num_iters;\n+    double m_scaling;\n     const uint64_t m_num_evals;\n     std::vector<double> m_elapsed_results;\n     time_point m_start_time;\n \n     bool UpdateTimer(time_point finish_time);\n \n-    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)\n+    State(std::string name, uint64_t num_evals, double num_iters, double scaling, Printer& printer) : m_name(name), m_num_iters_left(num_iters), m_num_iters(num_iters), m_scaling(scaling), m_num_evals(num_evals)\n     {\n     }\n+    \n+    inline bool IsNewEval()\n+    {\n+        return m_num_iters_left == m_num_iters;\n+    }\n+    \n+    inline void ResetTimer()\n+    {\n+        m_start_time = clock::now();\n+    }\n \n     inline bool KeepRunning()\n-    {\n+    {        \n+        // Start clock on first iteration of first eval, subsequent clock resets\n+        // are handled in UpdateTimer.\n+        if (m_num_iters_left == m_num_iters) {\n+            m_start_time = clock::now();\n+        }\n+        \n         if (m_num_iters_left--) {\n             return true;\n         }\n-\n+        \n         bool result = UpdateTimer(clock::now());\n         // measure again so runtime of UpdateTimer is not included\n         m_start_time = clock::now();\n+                \n         return result;\n     }\n+    \n+    inline bool IsLastIteration()\n+    {\n+        if (m_num_iters_left == 0) {\n+            // Measure time before cleaup\n+            bool lastEval = !UpdateTimer(clock::now());\n+            if (!lastEval) {\n+                m_num_iters_left = m_num_iters;\n+            }\n+            return true;\n+        };\n+        return false;\n+    }\n };\n \n typedef std::function<void(State&)> BenchFunction;"
      },
      {
        "sha": "88223a59fec0048b1429816fce211e5ca062091e",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 195,
        "deletions": 61,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8572a38d311d6daca7ee0503f23973ff5e7038f8/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=8572a38d311d6daca7ee0503f23973ff5e7038f8",
        "patch": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {\n+        AddCoins(coinsViewCache, tx, 0);\n+        outpoints.push_back(COutPoint(tx.GetHash(), 0));\n+    }\n+    \n+    return outpoints;\n+}\n+\n+// Add coins to cache that doesn't exist on disk.\n+static void CCoinsViewCacheAddCoinFresh(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+\n+    while (state.IsNewEval()) {\n+        CCoinsView coinsView;\n+        CCoinsViewCache coinsViewCache(&coinsView);\n+        \n+        int i = 0;\n+        \n+        state.ResetTimer();\n+                \n+        // Benchmark:\n+        while (state.KeepRunning()) {\n+            AddCoins(coinsViewCache, transactions[i], 0);\n+            \n+            if (state.IsLastIteration()) {\n+                // fprintf(stderr, \"Cached coins: %u\\n\", coinsViewCache.GetCacheSize());\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+                break;\n+            }\n+            \n+            i++;\n+        }\n+    }\n+}\n+\n+// Flush cache\n+static void CCoinsViewCacheFlush(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+    \n+\n+    while (state.IsNewEval()) {\n+        // TODO: dedup from test suite\n+        SelectParams(CBaseChainParams::REGTEST);\n+        // const CChainParams& chainparams = Params();\n+        ClearDatadirCache();\n+        fs::path pathTemp = fs::temp_directory_path() / \"bench_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n+        fs::create_directories(pathTemp);\n+        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+        // fprintf(stderr, \"Path: %s\\n\", pathTemp.string().c_str());\n+\n+        int64_t nCoinDBCache = 50 * N_CACHE_SCALE;\n+        pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, true));\n+        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        CCoinsViewCache coinsViewCache(pcoinsdbview.get());\n+        FastRandomContext rng(true);\n+        coinsViewCache.SetBestBlock(rng.rand256());\n+                \n+        // Add coins to cache:\n+        for (const CTransaction tx : transactions) {\n+            AddCoins(coinsViewCache, tx, 0);\n+        }\n+                \n+        state.ResetTimer();\n+                \n+        // Benchmark:\n+        while (state.KeepRunning()) {\n+            // Flush only in the last iteration so we get the average time per transaction\n+            // for the flush.\n+            \n+            if (state.m_num_iters_left == 0) {\n+                // fprintf(stderr, \"Cached coins: %u\\n\", coinsViewCache.GetCacheSize());\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+                coinsViewCache.Flush();\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+            }\n+            \n+            if (state.IsLastIteration()) break;         \n+        }\n+        \n+        // Clean up:\n+        pcoinsTip.reset();\n+        pcoinsdbview.reset();\n+        fs::remove_all(pathTemp);\n+    }\n+}\n+\n+\n+// Read coin from cache\n+static void CCoinsViewCacheAccess(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    uint64_t n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n-    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n-\n-    CMutableTransaction t1;\n-    t1.vin.resize(3);\n-    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n-    t1.vin[0].prevout.n = 1;\n-    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n-    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n-    t1.vin[1].prevout.n = 0;\n-    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n-    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n-    t1.vin[2].prevout.n = 1;\n-    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n-    t1.vout.resize(2);\n-    t1.vout[0].nValue = 90 * CENT;\n-    t1.vout[0].scriptPubKey << OP_1;\n-\n-    // Benchmark.\n+    std::vector<COutPoint> outpoints = SetupDummyCoins(keystore, coins, n_txs, n_keys);\n+\n+    FastRandomContext rng(true);\n+    std::vector <uint64_t> sequence;\n+    sequence.resize(state.m_num_iters * state.m_num_evals);\n+    for (uint64_t i = 0; i < state.m_num_iters * state.m_num_evals; i++) {\n+        sequence[i] = rng.rand64() % outpoints.size();\n+    }\n+\n+    // Benchmark:\n+    uint64_t i = 0;\n     while (state.KeepRunning()) {\n-        bool success = AreInputsStandard(t1, coins);\n-        assert(success);\n-        CAmount value = coins.GetValueIn(t1);\n-        assert(value == (50 + 21 + 22) * CENT);\n+        coins.AccessCoin(outpoints[sequence[i]]);\n+        i++;\n     }\n }\n \n-BENCHMARK(CCoinsCaching, 170 * 1000);\n+BENCHMARK(CCoinsViewCacheAccess, 3500 * 1000);\n+\n+// These ignore -scaling param:\n+BENCHMARK(CCoinsViewCacheAddCoinFresh, N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE);\n+BENCHMARK(CCoinsViewCacheFlush, N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE);"
      }
    ]
  }
]