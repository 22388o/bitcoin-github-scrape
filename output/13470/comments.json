[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400272971",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-400272971",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
    "id": 400272971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDI3Mjk3MQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T11:23:48Z",
    "updated_at": "2018-09-27T04:06:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14244 (amount: Move CAmount CENT to unit test header by MarcoFalke)\n* #14224 (Document intentional and unintentional unsigned integer overflows (wraparounds) using annotations by practicalswift)\n* #14156 ([WIP] refactor: Make explicit CMutableTransaction -> CTransaction conversion. by lucash-dev)\n* #13525 (Report reason inputs are nonstandard from AreInputsStandard by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400272971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412069620",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-412069620",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
    "id": 412069620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxMjA2OTYyMA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-08-10T12:37:11Z",
    "updated_at": "2018-08-10T12:37:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 56 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/412069620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/425179246",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-425179246",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
    "id": 425179246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNTE3OTI0Ng==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-27T17:36:52Z",
    "updated_at": "2018-09-27T17:36:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/425179246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443178655",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#issuecomment-443178655",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13470",
    "id": 443178655,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzE3ODY1NQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T11:40:27Z",
    "updated_at": "2018-11-30T11:40:36Z",
    "author_association": "MEMBER",
    "body": "Consider this up for grabs. It should be a matter of rebasing and cleaning up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443178655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195557293",
    "pull_request_review_id": 128952222,
    "id": 195557293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU1NzI5Mw==",
    "diff_hunk": "@@ -116,7 +116,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n         if (0 == num_iters) {\n             num_iters = 1;\n         }\n-        State state(p.first, num_evals, num_iters, printer);\n+        State state(p.first, num_evals, num_iters, scaling, printer);",
    "path": "src/bench/bench.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why is this change required? Should be in a separate commit",
    "created_at": "2018-06-14T20:17:05Z",
    "updated_at": "2018-06-14T20:17:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195557293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195557293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195557293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195557293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195666958",
    "pull_request_review_id": 129082000,
    "id": 195666958,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTY2Njk1OA==",
    "diff_hunk": "@@ -116,7 +116,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n         if (0 == num_iters) {\n             num_iters = 1;\n         }\n-        State state(p.first, num_evals, num_iters, printer);\n+        State state(p.first, num_evals, num_iters, scaling, printer);",
    "path": "src/bench/bench.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I need to disable the effect of the `scaling` setting, see above. The current implementation is a bit of a hack though; once refactored it can go in its own commit.",
    "created_at": "2018-06-15T08:38:33Z",
    "updated_at": "2018-06-15T08:38:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195666958",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195666958"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r195666958"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195666958/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 195557293
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762762",
    "pull_request_review_id": 155560456,
    "id": 217762762,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzc2Mjc2Mg==",
    "diff_hunk": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {",
    "path": "src/bench/ccoins_caching.cpp",
    "position": 111,
    "original_position": 111,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be `const CTransaction &`?",
    "created_at": "2018-09-14T16:02:07Z",
    "updated_at": "2018-09-14T16:02:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762762",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762762"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762762"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762762/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 78,
    "original_line": 78,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762873",
    "pull_request_review_id": 155560591,
    "id": 217762873,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzc2Mjg3Mw==",
    "diff_hunk": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {\n+        AddCoins(coinsViewCache, tx, 0);\n+        outpoints.push_back(COutPoint(tx.GetHash(), 0));\n+    }\n+    \n+    return outpoints;\n+}\n+\n+// Add coins to cache that doesn't exist on disk.\n+static void CCoinsViewCacheAddCoinFresh(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+\n+    while (state.IsNewEval()) {\n+        CCoinsView coinsView;\n+        CCoinsViewCache coinsViewCache(&coinsView);\n+        \n+        int i = 0;\n+        \n+        state.ResetTimer();\n+                \n+        // Benchmark:\n+        while (state.KeepRunning()) {\n+            AddCoins(coinsViewCache, transactions[i], 0);\n+            \n+            if (state.IsLastIteration()) {\n+                // fprintf(stderr, \"Cached coins: %u\\n\", coinsViewCache.GetCacheSize());\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+                break;\n+            }\n+            \n+            i++;\n+        }\n+    }\n+}\n+\n+// Flush cache\n+static void CCoinsViewCacheFlush(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+    \n+\n+    while (state.IsNewEval()) {\n+        // TODO: dedup from test suite\n+        SelectParams(CBaseChainParams::REGTEST);\n+        // const CChainParams& chainparams = Params();\n+        ClearDatadirCache();\n+        fs::path pathTemp = fs::temp_directory_path() / \"bench_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n+        fs::create_directories(pathTemp);\n+        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+        // fprintf(stderr, \"Path: %s\\n\", pathTemp.string().c_str());\n+\n+        int64_t nCoinDBCache = 50 * N_CACHE_SCALE;\n+        pcoinsdbview.reset(new CCoinsViewDB(nCoinDBCache, false, true));\n+        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n+\n+        CCoinsViewCache coinsViewCache(pcoinsdbview.get());\n+        FastRandomContext rng(true);\n+        coinsViewCache.SetBestBlock(rng.rand256());\n+                \n+        // Add coins to cache:\n+        for (const CTransaction tx : transactions) {",
    "path": "src/bench/ccoins_caching.cpp",
    "position": 196,
    "original_position": 196,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be `const CTransaction &`?",
    "created_at": "2018-09-14T16:02:31Z",
    "updated_at": "2018-09-14T16:02:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762873",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762873"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r217762873"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217762873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 163,
    "original_line": 163,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218393252",
    "pull_request_review_id": 156318777,
    "id": 218393252,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODM5MzI1Mg==",
    "diff_hunk": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>",
    "path": "src/bench/ccoins_caching.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-18 10:55:16 clang-tidy(pr=13470): src/bench/ccoins_caching.cpp:6:1: warning: #includes are not sorted properly [llvm-include-order]\r\n```",
    "created_at": "2018-09-18T11:25:31Z",
    "updated_at": "2018-09-18T11:25:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r218393252",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218393252"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r218393252"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218393252/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 9,
    "original_line": 9,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691621",
    "pull_request_review_id": 157932223,
    "id": 219691621,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTYyMQ==",
    "diff_hunk": "@@ -56,28 +56,59 @@ class State\n public:\n     std::string m_name;\n     uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n+    uint64_t m_num_iters;\n+    double m_scaling;\n     const uint64_t m_num_evals;\n     std::vector<double> m_elapsed_results;\n     time_point m_start_time;\n \n     bool UpdateTimer(time_point finish_time);\n \n-    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)\n+    State(std::string name, uint64_t num_evals, double num_iters, double scaling, Printer& printer) : m_name(name), m_num_iters_left(num_iters), m_num_iters(num_iters), m_scaling(scaling), m_num_evals(num_evals)\n     {\n     }\n+    ",
    "path": "src/bench/bench.h",
    "position": 17,
    "original_position": 17,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:70:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:75:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:82:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:96:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:99:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```",
    "created_at": "2018-09-23T08:16:22Z",
    "updated_at": "2018-09-23T08:16:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691621",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691621"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691621"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 70,
    "original_line": 70,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691630",
    "pull_request_review_id": 157932228,
    "id": 219691630,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTYzMA==",
    "diff_hunk": "@@ -56,28 +56,59 @@ class State\n public:\n     std::string m_name;\n     uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n+    uint64_t m_num_iters;\n+    double m_scaling;\n     const uint64_t m_num_evals;\n     std::vector<double> m_elapsed_results;\n     time_point m_start_time;\n \n     bool UpdateTimer(time_point finish_time);\n \n-    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)\n+    State(std::string name, uint64_t num_evals, double num_iters, double scaling, Printer& printer) : m_name(name), m_num_iters_left(num_iters), m_num_iters(num_iters), m_scaling(scaling), m_num_evals(num_evals)\n     {\n     }\n+    \n+    inline bool IsNewEval()\n+    {\n+        return m_num_iters_left == m_num_iters;\n+    }\n+    \n+    inline void ResetTimer()\n+    {\n+        m_start_time = clock::now();\n+    }\n \n     inline bool KeepRunning()\n-    {\n+    {        \n+        // Start clock on first iteration of first eval, subsequent clock resets\n+        // are handled in UpdateTimer.\n+        if (m_num_iters_left == m_num_iters) {\n+            m_start_time = clock::now();\n+        }\n+        \n         if (m_num_iters_left--) {\n             return true;\n         }\n-\n+        \n         bool result = UpdateTimer(clock::now());\n         // measure again so runtime of UpdateTimer is not included\n         m_start_time = clock::now();\n+                \n         return result;\n     }\n+    \n+    inline bool IsLastIteration()\n+    {\n+        if (m_num_iters_left == 0) {\n+            // Measure time before cleaup\n+            bool lastEval = !UpdateTimer(clock::now());\n+            if (!lastEval) {\n+                m_num_iters_left = m_num_iters;\n+            }\n+            return true;\n+        };",
    "path": "src/bench/bench.h",
    "position": 58,
    "original_position": 58,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/bench.h:109:  You don't need a ; after a }  [readability/braces] [4]\r\n```",
    "created_at": "2018-09-23T08:16:39Z",
    "updated_at": "2018-09-23T08:16:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691630",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691630"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691630"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691630/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 109,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691640",
    "pull_request_review_id": 157932242,
    "id": 219691640,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTY0MA==",
    "diff_hunk": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    ",
    "path": "src/bench/ccoins_caching.cpp",
    "position": 48,
    "original_position": 48,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:38:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:43:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:45:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:47:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:54:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:55:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:58:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:60:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:64:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\r\n```\r\n\r\nPlease fix throughout :-)",
    "created_at": "2018-09-23T08:17:17Z",
    "updated_at": "2018-09-23T08:17:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691640",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691640"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691640"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 38,
    "original_line": 38,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691649",
    "pull_request_review_id": 157932250,
    "id": 219691649,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTY0OQ==",
    "diff_hunk": "@@ -6,82 +6,216 @@\n #include <coins.h>\n #include <policy/policy.h>\n #include <wallet/crypter.h>\n+#include <validation.h>\n+#include <util.h>\n+#include <txdb.h>\n+#include <chainparams.h>\n+#include <validationinterface.h>\n+\n+#include <random.h>\n+\n \n #include <vector>\n \n-// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n-//\n-// Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n-// paid to a TX_PUBKEYHASH.\n-//\n-static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+const uint64_t N_CACHE_SCALE = 1; // 40 MB (bench needs ~3x dbcache size RAM)\n+                                  // FIXME: make this a parameter\n+const uint64_t N_DEFAULT_CACHE_ENTRIES = 200 * 1000;\n+\n+// FIXME: dedup from src/test/test_bitcoin.h\n+FastRandomContext insecure_rand_ctx;\n+uint64_t InsecureRandRange(uint64_t range) { return insecure_rand_ctx.randrange(range); }\n+\n+static std::vector<CKey> SetupDummyKeys(CBasicKeyStore& keystoreRet, int n_keys)\n {\n-    std::vector<CMutableTransaction> dummyTransactions;\n-    dummyTransactions.resize(2);\n+    std::vector<CKey> keys;\n+    keys.resize(n_keys);\n \n     // Add some keys to the keystore:\n-    CKey key[4];\n-    for (int i = 0; i < 4; i++) {\n-        key[i].MakeNewKey(i % 2);\n-        keystoreRet.AddKey(key[i]);\n+    for (int i = 0; i < n_keys; i++) {\n+        keys[i].MakeNewKey(true);\n+        keystoreRet.AddKey(keys[i]);\n     }\n+    \n+    return keys;\n+}\n \n-    // Create some dummy input transactions\n-    dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, dummyTransactions[0], 0);\n-\n-    dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, dummyTransactions[1], 0);\n-\n-    return dummyTransactions;\n+static std::vector<CTransaction> SetupDummyTransactions(std::vector<CKey> keys, int n_transactions)\n+{    \n+    std::vector<CTransaction> transactions;\n+    \n+    FastRandomContext rng(true);\n+    \n+    // Create dummy transactions\n+    for (int i = 0; i < n_transactions; i++) {\n+        CMutableTransaction tx;\n+        tx.vin.resize(1);\n+        tx.vout.resize(1);\n+\n+        // Random input to prevent duplicate CCoinsView(Cache) entries:        \n+        tx.vin[0].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4); \n+        tx.vin[0].prevout.hash = rng.rand256();\n+        tx.vin[0].prevout.n = 0;\n+        \n+        tx.vout[0].nValue = 10 * CENT;\n+        tx.vout[0].scriptPubKey << ToByteVector(keys[(i + 0) % keys.size()].GetPubKey()) << OP_CHECKSIG;     \n+\n+        transactions.push_back(tx);\n+    }\n+    \n+    return transactions;\n }\n \n-// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n-// laanwj, \"replicating the actual usage patterns of the client is hard though,\n-// many times micro-benchmarks of the database showed completely different\n-// characteristics than e.g. reindex timings. But that's not a requirement of\n-// every benchmark.\"\n-// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n-static void CCoinsCaching(benchmark::State& state)\n+static std::vector<COutPoint>\n+SetupDummyCoins(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsViewCache, int n_coins, int n_keys)\n {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(n_coins);\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystoreRet, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_coins);\n+        \n+    for (const CTransaction tx : transactions) {\n+        AddCoins(coinsViewCache, tx, 0);\n+        outpoints.push_back(COutPoint(tx.GetHash(), 0));\n+    }\n+    \n+    return outpoints;\n+}\n+\n+// Add coins to cache that doesn't exist on disk.\n+static void CCoinsViewCacheAddCoinFresh(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+\n+    while (state.IsNewEval()) {\n+        CCoinsView coinsView;\n+        CCoinsViewCache coinsViewCache(&coinsView);\n+        \n+        int i = 0;\n+        \n+        state.ResetTimer();\n+                \n+        // Benchmark:\n+        while (state.KeepRunning()) {\n+            AddCoins(coinsViewCache, transactions[i], 0);\n+            \n+            if (state.IsLastIteration()) {\n+                // fprintf(stderr, \"Cached coins: %u\\n\", coinsViewCache.GetCacheSize());\n+                // fprintf(stderr, \"Cache size: %zu MiB\\n\", coinsViewCache.DynamicMemoryUsage() / 1024 / 1024);\n+                break;\n+            }\n+            \n+            i++;\n+        }\n+    }\n+}\n+\n+// Flush cache\n+static void CCoinsViewCacheFlush(benchmark::State& state)\n+{\n+    int n_keys = 1000;\n+    int n_txs = N_DEFAULT_CACHE_ENTRIES * N_CACHE_SCALE;\n+    \n+    // Ignore scaling parameter.\n+    state.m_scaling = 1;\n+    state.m_num_iters = n_txs;\n+    state.m_num_iters_left = n_txs;\n+\n+    CBasicKeyStore keystore;\n+    \n+    const std::vector<CKey> keys = SetupDummyKeys(keystore, n_keys);\n+    \n+    const std::vector<CTransaction> transactions = SetupDummyTransactions(keys, n_txs);\n+    \n+\n+    while (state.IsNewEval()) {\n+        // TODO: dedup from test suite\n+        SelectParams(CBaseChainParams::REGTEST);\n+        // const CChainParams& chainparams = Params();\n+        ClearDatadirCache();\n+        fs::path pathTemp = fs::temp_directory_path() / \"bench_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));",
    "path": "src/bench/ccoins_caching.cpp",
    "position": 182,
    "original_position": 182,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-22 22:13:03 cpplint(pr=13470): src/bench/ccoins_caching.cpp:149:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]\r\n```",
    "created_at": "2018-09-23T08:17:44Z",
    "updated_at": "2018-09-23T08:17:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691649",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691649"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r219691649"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 149,
    "original_line": 149,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220430292",
    "pull_request_review_id": 158835928,
    "id": 220430292,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyMDQzMDI5Mg==",
    "diff_hunk": "@@ -56,28 +56,59 @@ class State\n public:\n     std::string m_name;\n     uint64_t m_num_iters_left;\n-    const uint64_t m_num_iters;\n+    uint64_t m_num_iters;\n+    double m_scaling;\n     const uint64_t m_num_evals;\n     std::vector<double> m_elapsed_results;\n     time_point m_start_time;\n \n     bool UpdateTimer(time_point finish_time);\n \n-    State(std::string name, uint64_t num_evals, double num_iters, Printer& printer) : m_name(name), m_num_iters_left(0), m_num_iters(num_iters), m_num_evals(num_evals)\n+    State(std::string name, uint64_t num_evals, double num_iters, double scaling, Printer& printer) : m_name(name), m_num_iters_left(num_iters), m_num_iters(num_iters), m_scaling(scaling), m_num_evals(num_evals)",
    "path": "src/bench/bench.h",
    "position": 14,
    "original_position": 14,
    "commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "original_commit_id": "8572a38d311d6daca7ee0503f23973ff5e7038f8",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`num_iters` should be `uint64_t` and not `double`?",
    "created_at": "2018-09-26T05:30:11Z",
    "updated_at": "2018-09-26T05:30:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r220430292",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220430292"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13470#discussion_r220430292"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13470"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/220430292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 67,
    "original_line": 67,
    "side": "RIGHT"
  }
]