[
  {
    "sha": "b3a04c963d4e761b66a1a8c1aae1c835534e47eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2EwNGM5NjNkNGU3NjFiNjZhMWE4YzFhYWUxYzgzNTUzNGU0N2Vi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-04T20:02:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2019-04-15T16:16:21Z"
      },
      "message": "[rpc] Remove the addresses field from the getaddressinfo return object\n\nThe \"addresses\" field was confusing because it refered to public keys\nusing their P2PKH address.  It was included in the return object when\nneeded for backward compatibility. Remove that compatibility now that\nthe -deprecatedrpc=validateaddress option has been removed.\n\nNew applications should use the 'embedded'->'address' field for P2SH or\nP2WSH wrapped addresses, and 'pubkeys' for inspecting multisig\nparticipants.\n\nGithub-Pull: 15750\nRebased-From: b4338c151d4788c33f4b7c54daaf7f94b193a624",
      "tree": {
        "sha": "d949f6c634a5b4bffd8f361776c7c3e002023a43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d949f6c634a5b4bffd8f361776c7c3e002023a43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3a04c963d4e761b66a1a8c1aae1c835534e47eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a04c963d4e761b66a1a8c1aae1c835534e47eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3a04c963d4e761b66a1a8c1aae1c835534e47eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3a04c963d4e761b66a1a8c1aae1c835534e47eb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bcf90cb01aa964a54e3450ec5515e67db7088b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bcf90cb01aa964a54e3450ec5515e67db7088b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bcf90cb01aa964a54e3450ec5515e67db7088b7"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9393d86577ce83d0ced08854d177d84c662f119e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3a04c963d4e761b66a1a8c1aae1c835534e47eb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3a04c963d4e761b66a1a8c1aae1c835534e47eb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b3a04c963d4e761b66a1a8c1aae1c835534e47eb",
        "patch": "@@ -3513,7 +3513,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n public:\n     CWallet * const pwallet;\n \n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n     {\n         // Always present: script type and redeemscript\n         std::vector<std::vector<unsigned char>> solutions_data;\n@@ -3522,7 +3522,6 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n \n         CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n         if (ExtractDestination(subscript, embedded)) {\n             // Only when the script corresponds to an address.\n             UniValue subobj(UniValue::VOBJ);\n@@ -3535,25 +3534,17 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n             if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n             obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n         } else if (which_type == TX_MULTISIG) {\n             // Also report some information on multisig scripts (which do not have a corresponding address).\n             // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n             obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n             UniValue pubkeys(UniValue::VARR);\n             for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n                 CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n                 pubkeys.push_back(HexStr(key.begin(), key.end()));\n             }\n             obj.pushKV(\"pubkeys\", std::move(pubkeys));\n         }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n     }\n \n     explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n@@ -3576,7 +3567,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+            ProcessSubScript(subscript, obj);\n         }\n         return obj;\n     }"
      }
    ]
  }
]