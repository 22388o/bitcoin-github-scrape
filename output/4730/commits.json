[
  {
    "sha": "42642c96950f50bec0866483876a6eef27318fec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjY0MmM5Njk1MGY1MGJlYzA4NjY0ODM4NzZhNmVlZjI3MzE4ZmVj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-19T17:41:25Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T04:27:42Z"
      },
      "message": "UniValue: use correct setNumStr() input val, when setting number values",
      "tree": {
        "sha": "2cc20636fe278d97ef2f8f29c2f19832e6e5c16e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cc20636fe278d97ef2f8f29c2f19832e6e5c16e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42642c96950f50bec0866483876a6eef27318fec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42642c96950f50bec0866483876a6eef27318fec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42642c96950f50bec0866483876a6eef27318fec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42642c96950f50bec0866483876a6eef27318fec/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "335e3a5c95165ed778e84757657da65b1358bdff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/335e3a5c95165ed778e84757657da65b1358bdff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/335e3a5c95165ed778e84757657da65b1358bdff"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b0171e48c41d5b4f871298dcfa49f7cdd6675030",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42642c96950f50bec0866483876a6eef27318fec/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42642c96950f50bec0866483876a6eef27318fec/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=42642c96950f50bec0866483876a6eef27318fec",
        "patch": "@@ -44,7 +44,7 @@ static bool validNumStr(const string& s)\n \n bool UniValue::setNumStr(const string& val_)\n {\n-    if (!validNumStr(val))\n+    if (!validNumStr(val_))\n         return false;\n \n     clear();"
      }
    ]
  },
  {
    "sha": "dee9324a0bdbf92a0764213f9b24424a7600f47b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWU5MzI0YTBiZGJmOTJhMDc2NDIxM2Y5YjI0NDI0YTc2MDBmNDdi",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T04:14:53Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T04:27:49Z"
      },
      "message": "UniValue: compact (!pretty) output should not include extra whitespace",
      "tree": {
        "sha": "e6cb922b4b4a0de2848b4b6e8ac7fe3c2f1c922c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6cb922b4b4a0de2848b4b6e8ac7fe3c2f1c922c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dee9324a0bdbf92a0764213f9b24424a7600f47b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee9324a0bdbf92a0764213f9b24424a7600f47b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dee9324a0bdbf92a0764213f9b24424a7600f47b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee9324a0bdbf92a0764213f9b24424a7600f47b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "42642c96950f50bec0866483876a6eef27318fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42642c96950f50bec0866483876a6eef27318fec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42642c96950f50bec0866483876a6eef27318fec"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "042091a8274ae34dfd877004c01295bec72291fd",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dee9324a0bdbf92a0764213f9b24424a7600f47b/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dee9324a0bdbf92a0764213f9b24424a7600f47b/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=dee9324a0bdbf92a0764213f9b24424a7600f47b",
        "patch": "@@ -91,8 +91,11 @@ void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, s\n         if (prettyIndent)\n             s += indentStr(prettyIndent, indentLevel);\n         s += values[i].write(prettyIndent, indentLevel + 1);\n-        if (i != (values.size() - 1))\n-            s += \", \";\n+        if (i != (values.size() - 1)) {\n+            s += \",\";\n+            if (prettyIndent)\n+                s += \" \";\n+        }\n         if (prettyIndent)\n             s += \"\\n\";\n     }\n@@ -111,7 +114,9 @@ void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel,\n     for (unsigned int i = 0; i < keys.size(); i++) {\n         if (prettyIndent)\n             s += indentStr(prettyIndent, indentLevel);\n-        s += \"\\\"\" + json_escape(keys[i]) + \"\\\": \";\n+        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        if (prettyIndent)\n+            s += \" \";\n         s += values[i].write(prettyIndent, indentLevel + 1);\n         if (i != (values.size() - 1))\n             s += \",\";"
      }
    ]
  },
  {
    "sha": "e85267be6306a54a0cfe0055c88b0b753f7d68cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODUyNjdiZTYzMDZhNTRhMGNmZTAwNTVjODhiMGI3NTNmN2Q2OGNk",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T04:28:46Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T04:28:46Z"
      },
      "message": "UniValue: add unit tests",
      "tree": {
        "sha": "706a3c344940b7f2e0a0f05dcee7656c8ae3ae7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/706a3c344940b7f2e0a0f05dcee7656c8ae3ae7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e85267be6306a54a0cfe0055c88b0b753f7d68cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85267be6306a54a0cfe0055c88b0b753f7d68cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e85267be6306a54a0cfe0055c88b0b753f7d68cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85267be6306a54a0cfe0055c88b0b753f7d68cd/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dee9324a0bdbf92a0764213f9b24424a7600f47b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee9324a0bdbf92a0764213f9b24424a7600f47b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dee9324a0bdbf92a0764213f9b24424a7600f47b"
      }
    ],
    "stats": {
      "total": 276,
      "additions": 276,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bf6534cf39f05ba0c39c2d4ed00e2ddb60ff0988",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e85267be6306a54a0cfe0055c88b0b753f7d68cd/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e85267be6306a54a0cfe0055c88b0b753f7d68cd/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e85267be6306a54a0cfe0055c88b0b753f7d68cd",
        "patch": "@@ -58,6 +58,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/transaction_tests.cpp \\\n   test/uint256_tests.cpp \\\n+  test/univalue_tests.cpp \\\n   test/util_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n   test/sighash_tests.cpp"
      },
      {
        "sha": "25d1df34314f4f54c23471fc3b687edc607c3dd5",
        "filename": "src/test/univalue_tests.cpp",
        "status": "added",
        "additions": 275,
        "deletions": 0,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e85267be6306a54a0cfe0055c88b0b753f7d68cd/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e85267be6306a54a0cfe0055c88b0b753f7d68cd/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=e85267be6306a54a0cfe0055c88b0b753f7d68cd",
        "patch": "@@ -0,0 +1,275 @@\n+// Copyright 2014 BitPay, Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include \"univalue/univalue.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(univalue_tests)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK_EQUAL(numTest.isNum(), true);\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK_EQUAL(v4.isNum(), true);\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK_EQUAL(v5.isNum(), true);\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK_EQUAL(v6.isNum(), true);\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK_EQUAL(v7.isNum(), true);\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK_EQUAL(v8.isStr(), true);\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK_EQUAL(v9.isStr(), true);\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK_EQUAL(v.isNull(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK_EQUAL(v.isObject(), true);\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK_EQUAL(v.empty(), true);\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK_EQUAL(v.isArray(), true);\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK_EQUAL(v.isStr(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK_EQUAL(v.isNull(), true);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_array)\n+{\n+    UniValue arr(UniValue::VARR);\n+\n+    UniValue v((int64_t)1023LL);\n+    BOOST_CHECK(arr.push_back(v));\n+\n+    string vStr(\"zippy\");\n+    BOOST_CHECK(arr.push_back(vStr));\n+\n+    const char *s = \"pippy\";\n+    BOOST_CHECK(arr.push_back(s));\n+\n+    vector<UniValue> vec;\n+    v.setStr(\"boing\");\n+    vec.push_back(v);\n+\n+    v.setStr(\"going\");\n+    vec.push_back(v);\n+\n+    BOOST_CHECK(arr.push_backV(vec));\n+\n+    BOOST_CHECK_EQUAL(arr.empty(), false);\n+    BOOST_CHECK_EQUAL(arr.count(), 5);\n+\n+    BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n+    BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n+    BOOST_CHECK_EQUAL(arr[2].getValStr(), \"pippy\");\n+    BOOST_CHECK_EQUAL(arr[3].getValStr(), \"boing\");\n+    BOOST_CHECK_EQUAL(arr[4].getValStr(), \"going\");\n+\n+    BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n+\n+    arr.clear();\n+    BOOST_CHECK_EQUAL(arr.empty(), true);\n+    BOOST_CHECK_EQUAL(arr.count(), 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_object)\n+{\n+    UniValue obj(UniValue::VOBJ);\n+    string strKey, strVal;\n+    UniValue v;\n+\n+    strKey = \"age\";\n+    v.setInt(100);\n+    BOOST_CHECK(obj.pushKV(strKey, v));\n+\n+    strKey = \"first\";\n+    strVal = \"John\";\n+    BOOST_CHECK(obj.pushKV(strKey, strVal));\n+\n+    strKey = \"last\";\n+    const char *cVal = \"Smith\";\n+    BOOST_CHECK(obj.pushKV(strKey, cVal));\n+\n+    strKey = \"distance\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int64_t) 25));\n+\n+    strKey = \"time\";\n+    BOOST_CHECK(obj.pushKV(strKey, (uint64_t) 3600));\n+\n+    strKey = \"calories\";\n+    BOOST_CHECK(obj.pushKV(strKey, (int) 12));\n+\n+    strKey = \"temperature\";\n+    BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n+\n+    UniValue obj2(UniValue::VOBJ);\n+    BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n+    BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n+\n+    BOOST_CHECK(obj.pushKVs(obj2));\n+\n+    BOOST_CHECK_EQUAL(obj.empty(), false);\n+    BOOST_CHECK_EQUAL(obj.count(), 9);\n+\n+    BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n+    BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n+    BOOST_CHECK_EQUAL(obj[\"last\"].getValStr(), \"Smith\");\n+    BOOST_CHECK_EQUAL(obj[\"distance\"].getValStr(), \"25\");\n+    BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n+    BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n+    BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n+    BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n+\n+    BOOST_CHECK_EQUAL(obj[\"nyuknyuknyuk\"].getValStr(), \"\");\n+\n+    BOOST_CHECK(obj.exists(\"age\"));\n+    BOOST_CHECK(obj.exists(\"first\"));\n+    BOOST_CHECK(obj.exists(\"last\"));\n+    BOOST_CHECK(obj.exists(\"distance\"));\n+    BOOST_CHECK(obj.exists(\"time\"));\n+    BOOST_CHECK(obj.exists(\"calories\"));\n+    BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"cat1\"));\n+    BOOST_CHECK(obj.exists(\"cat2\"));\n+\n+    BOOST_CHECK(!obj.exists(\"nyuknyuknyuk\"));\n+\n+    map<string, UniValue::VType> objTypes;\n+    objTypes[\"age\"] = UniValue::VNUM;\n+    objTypes[\"first\"] = UniValue::VSTR;\n+    objTypes[\"last\"] = UniValue::VSTR;\n+    objTypes[\"distance\"] = UniValue::VNUM;\n+    objTypes[\"time\"] = UniValue::VNUM;\n+    objTypes[\"calories\"] = UniValue::VNUM;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"cat1\"] = UniValue::VNUM;\n+    objTypes[\"cat2\"] = UniValue::VNUM;\n+    BOOST_CHECK(obj.checkObject(objTypes));\n+\n+    objTypes[\"cat2\"] = UniValue::VSTR;\n+    BOOST_CHECK(!obj.checkObject(objTypes));\n+\n+    obj.clear();\n+    BOOST_CHECK_EQUAL(obj.empty(), true);\n+    BOOST_CHECK_EQUAL(obj.count(), 0);\n+}\n+\n+static const char *json1 =\n+\"[1.1,{\\\"key1\\\":\\\"str\\\",\\\"key2\\\":800,\\\"key3\\\":{\\\"name\\\":\\\"martian\\\"}}]\";\n+\n+BOOST_AUTO_TEST_CASE(univalue_readwrite)\n+{\n+    UniValue v;\n+    BOOST_CHECK(v.read(json1));\n+\n+    string strJson1(json1);\n+    BOOST_CHECK(v.read(strJson1));\n+\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.count(), 2);\n+\n+    BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.1\");\n+\n+    UniValue obj = v[1];\n+    BOOST_CHECK(obj.isObject());\n+    BOOST_CHECK_EQUAL(obj.count(), 3);\n+\n+    BOOST_CHECK(obj[\"key1\"].isStr());\n+    BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), \"str\");\n+    BOOST_CHECK(obj[\"key2\"].isNum());\n+    BOOST_CHECK_EQUAL(obj[\"key2\"].getValStr(), \"800\");\n+    BOOST_CHECK(obj[\"key3\"].isObject());\n+\n+    BOOST_CHECK_EQUAL(strJson1, v.write());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  },
  {
    "sha": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzI3MWZjMDI1ZDIxOWMxODQyOGE0ZDM2ZGJjMzcyYzhlNDU3OTA4",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T05:09:21Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T05:09:21Z"
      },
      "message": "UniValue tests: use more BOOST_CHECK()",
      "tree": {
        "sha": "aecb892909c9844809d371d1fd70ca20e43ef1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aecb892909c9844809d371d1fd70ca20e43ef1a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc271fc025d219c18428a4d36dbc372c8e457908",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc271fc025d219c18428a4d36dbc372c8e457908",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc271fc025d219c18428a4d36dbc372c8e457908",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc271fc025d219c18428a4d36dbc372c8e457908/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e85267be6306a54a0cfe0055c88b0b753f7d68cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e85267be6306a54a0cfe0055c88b0b753f7d68cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e85267be6306a54a0cfe0055c88b0b753f7d68cd"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "23bc5f6b1265b35284f0e2a2665046afffa895b0",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc271fc025d219c18428a4d36dbc372c8e457908/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc271fc025d219c18428a4d36dbc372c8e457908/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=dc271fc025d219c18428a4d36dbc372c8e457908",
        "patch": "@@ -28,79 +28,79 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     UniValue numTest;\n     BOOST_CHECK(numTest.setNumStr(\"82\"));\n-    BOOST_CHECK_EQUAL(numTest.isNum(), true);\n+    BOOST_CHECK(numTest.isNum());\n     BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n \n     uint64_t vu64 = 82;\n     UniValue v4(vu64);\n-    BOOST_CHECK_EQUAL(v4.isNum(), true);\n+    BOOST_CHECK(v4.isNum());\n     BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n \n     int64_t vi64 = -82;\n     UniValue v5(vi64);\n-    BOOST_CHECK_EQUAL(v5.isNum(), true);\n+    BOOST_CHECK(v5.isNum());\n     BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n \n     int vi = -688;\n     UniValue v6(vi);\n-    BOOST_CHECK_EQUAL(v6.isNum(), true);\n+    BOOST_CHECK(v6.isNum());\n     BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK_EQUAL(v7.isNum(), true);\n+    BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n     UniValue v8(vs);\n-    BOOST_CHECK_EQUAL(v8.isStr(), true);\n+    BOOST_CHECK(v8.isStr());\n     BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n \n     const char *vcs = \"zappa\";\n     UniValue v9(vcs);\n-    BOOST_CHECK_EQUAL(v9.isStr(), true);\n+    BOOST_CHECK(v9.isStr());\n     BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n }\n \n BOOST_AUTO_TEST_CASE(univalue_set)\n {\n     UniValue v(UniValue::VSTR, \"foo\");\n     v.clear();\n-    BOOST_CHECK_EQUAL(v.isNull(), true);\n+    BOOST_CHECK(v.isNull());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n \n     BOOST_CHECK(v.setObject());\n-    BOOST_CHECK_EQUAL(v.isObject(), true);\n+    BOOST_CHECK(v.isObject());\n     BOOST_CHECK_EQUAL(v.count(), 0);\n     BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n-    BOOST_CHECK_EQUAL(v.empty(), true);\n+    BOOST_CHECK(v.empty());\n \n     BOOST_CHECK(v.setArray());\n-    BOOST_CHECK_EQUAL(v.isArray(), true);\n+    BOOST_CHECK(v.isArray());\n     BOOST_CHECK_EQUAL(v.count(), 0);\n \n     BOOST_CHECK(v.setStr(\"zum\"));\n-    BOOST_CHECK_EQUAL(v.isStr(), true);\n+    BOOST_CHECK(v.isStr());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n-    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n \n     BOOST_CHECK(v.setInt((int64_t)-1023LL));\n-    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n \n     BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n-    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n \n     BOOST_CHECK(v.setNumStr(\"-688\"));\n-    BOOST_CHECK_EQUAL(v.isNum(), true);\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n \n     BOOST_CHECK(v.setBool(false));\n@@ -118,7 +118,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n \n     BOOST_CHECK(v.setNull());\n-    BOOST_CHECK_EQUAL(v.isNull(), true);\n+    BOOST_CHECK(v.isNull());\n }\n \n BOOST_AUTO_TEST_CASE(univalue_array)\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n     BOOST_CHECK_EQUAL(arr[999].getValStr(), \"\");\n \n     arr.clear();\n-    BOOST_CHECK_EQUAL(arr.empty(), true);\n+    BOOST_CHECK(arr.empty());\n     BOOST_CHECK_EQUAL(arr.count(), 0);\n }\n \n@@ -238,7 +238,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(!obj.checkObject(objTypes));\n \n     obj.clear();\n-    BOOST_CHECK_EQUAL(obj.empty(), true);\n+    BOOST_CHECK(obj.empty());\n     BOOST_CHECK_EQUAL(obj.count(), 0);\n }\n "
      }
    ]
  }
]