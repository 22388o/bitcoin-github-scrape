[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/52735178",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4730#issuecomment-52735178",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4730",
    "id": 52735178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzM1MTc4",
    "user": {
      "login": "BitcoinPullTester",
      "id": 2110907,
      "node_id": "MDQ6VXNlcjIxMTA5MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2110907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinPullTester",
      "html_url": "https://github.com/BitcoinPullTester",
      "followers_url": "https://api.github.com/users/BitcoinPullTester/followers",
      "following_url": "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinPullTester/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinPullTester/orgs",
      "repos_url": "https://api.github.com/users/BitcoinPullTester/repos",
      "events_url": "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinPullTester/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-20T05:22:44Z",
    "updated_at": "2014-08-20T05:22:44Z",
    "author_association": "NONE",
    "body": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4730_dc271fc025d219c18428a4d36dbc372c8e457908/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/52735178/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/52854856",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4730#issuecomment-52854856",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/4730",
    "id": 52854856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODU0ODU2",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-20T22:35:16Z",
    "updated_at": "2014-08-20T22:35:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "ut ACK.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/52854856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16446603",
    "pull_request_review_id": null,
    "id": 16446603,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NDQ2NjAz",
    "diff_hunk": "@@ -0,0 +1,264 @@\n+// Copyright 2014 BitPay, Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include \"univalue/univalue.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(univalue_tests)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK_EQUAL(v1.isNull(), true);\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK_EQUAL(v2.isStr(), true);\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK_EQUAL(v3.isStr(), true);\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    bool rc = numTest.setNumStr(\"82\");",
    "path": "src/test/univalue_tests.cpp",
    "position": null,
    "original_position": 30,
    "commit_id": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "original_commit_id": "0c4444a318932d87001106ed80d4edba57ca9f3b",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'd write this as CHECK(numTest.SetNumStr(\"82\"));\n",
    "created_at": "2014-08-19T21:54:39Z",
    "updated_at": "2014-08-20T05:09:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16446603",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16446603"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16446603"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16446603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512585",
    "pull_request_review_id": null,
    "id": 16512585,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEyNTg1",
    "diff_hunk": "@@ -0,0 +1,275 @@\n+// Copyright 2014 BitPay, Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include \"univalue/univalue.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(univalue_tests)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));\n+\n+    BOOST_CHECK(v.setNull());\n+    BOOST_CHECK(v.isNull());\n+}",
    "path": "src/test/univalue_tests.cpp",
    "position": 122,
    "original_position": 122,
    "commit_id": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "original_commit_id": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems most of these checks assume pretty sane input. It'd be nice to see some exotic and/or blatantly wrong set's here, in order to test that they work or fail as anticipated.\nfor ex: \nsetInt(INT_MAX+1LL);\nsetNumStr(\"-2147483647\")\nsetNumStr(\"1.1\");\nsetStr(\"2\") && isStr()/isNum()\netc.\n\nFor those, I really don't know what the expected results would be, so I suppose it'd serve as some poor-man's documentation as well.\n",
    "created_at": "2014-08-20T23:22:55Z",
    "updated_at": "2014-08-20T23:22:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16512585",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512585"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16512585"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 122,
    "original_line": 122,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512774",
    "pull_request_review_id": null,
    "id": 16512774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NTEyNzc0",
    "diff_hunk": "@@ -0,0 +1,275 @@\n+// Copyright 2014 BitPay, Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <vector>\n+#include <string>\n+#include <map>\n+#include \"univalue/univalue.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using namespace std;\n+\n+BOOST_AUTO_TEST_SUITE(univalue_tests)\n+\n+BOOST_AUTO_TEST_CASE(univalue_constructor)\n+{\n+    UniValue v1;\n+    BOOST_CHECK(v1.isNull());\n+\n+    UniValue v2(UniValue::VSTR);\n+    BOOST_CHECK(v2.isStr());\n+\n+    UniValue v3(UniValue::VSTR, \"foo\");\n+    BOOST_CHECK(v3.isStr());\n+    BOOST_CHECK_EQUAL(v3.getValStr(), \"foo\");\n+\n+    UniValue numTest;\n+    BOOST_CHECK(numTest.setNumStr(\"82\"));\n+    BOOST_CHECK(numTest.isNum());\n+    BOOST_CHECK_EQUAL(numTest.getValStr(), \"82\");\n+\n+    uint64_t vu64 = 82;\n+    UniValue v4(vu64);\n+    BOOST_CHECK(v4.isNum());\n+    BOOST_CHECK_EQUAL(v4.getValStr(), \"82\");\n+\n+    int64_t vi64 = -82;\n+    UniValue v5(vi64);\n+    BOOST_CHECK(v5.isNum());\n+    BOOST_CHECK_EQUAL(v5.getValStr(), \"-82\");\n+\n+    int vi = -688;\n+    UniValue v6(vi);\n+    BOOST_CHECK(v6.isNum());\n+    BOOST_CHECK_EQUAL(v6.getValStr(), \"-688\");\n+\n+    double vd = -7.21;\n+    UniValue v7(vd);\n+    BOOST_CHECK(v7.isNum());\n+    BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n+\n+    string vs(\"yawn\");\n+    UniValue v8(vs);\n+    BOOST_CHECK(v8.isStr());\n+    BOOST_CHECK_EQUAL(v8.getValStr(), \"yawn\");\n+\n+    const char *vcs = \"zappa\";\n+    UniValue v9(vcs);\n+    BOOST_CHECK(v9.isStr());\n+    BOOST_CHECK_EQUAL(v9.getValStr(), \"zappa\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(univalue_set)\n+{\n+    UniValue v(UniValue::VSTR, \"foo\");\n+    v.clear();\n+    BOOST_CHECK(v.isNull());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"\");\n+\n+    BOOST_CHECK(v.setObject());\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n+    BOOST_CHECK(v.empty());\n+\n+    BOOST_CHECK(v.setArray());\n+    BOOST_CHECK(v.isArray());\n+    BOOST_CHECK_EQUAL(v.count(), 0);\n+\n+    BOOST_CHECK(v.setStr(\"zum\"));\n+    BOOST_CHECK(v.isStr());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n+\n+    BOOST_CHECK(v.setFloat(-1.01));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n+\n+    BOOST_CHECK(v.setInt((int)1023));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setInt((int64_t)-1023LL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-1023\");\n+\n+    BOOST_CHECK(v.setInt((uint64_t)1023ULL));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"1023\");\n+\n+    BOOST_CHECK(v.setNumStr(\"-688\"));\n+    BOOST_CHECK(v.isNum());\n+    BOOST_CHECK_EQUAL(v.getValStr(), \"-688\");\n+\n+    BOOST_CHECK(v.setBool(false));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), false);\n+    BOOST_CHECK_EQUAL(v.isFalse(), true);\n+    BOOST_CHECK_EQUAL(v.getBool(), false);\n+\n+    BOOST_CHECK(v.setBool(true));\n+    BOOST_CHECK_EQUAL(v.isBool(), true);\n+    BOOST_CHECK_EQUAL(v.isTrue(), true);\n+    BOOST_CHECK_EQUAL(v.isFalse(), false);\n+    BOOST_CHECK_EQUAL(v.getBool(), true);\n+\n+    BOOST_CHECK(!v.setNumStr(\"zombocom\"));",
    "path": "src/test/univalue_tests.cpp",
    "position": 118,
    "original_position": 118,
    "commit_id": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "original_commit_id": "dc271fc025d219c18428a4d36dbc372c8e457908",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "welcome to zombocom!\n",
    "created_at": "2014-08-20T23:27:34Z",
    "updated_at": "2014-08-20T23:27:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16512774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/4730#discussion_r16512774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/4730"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/16512774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 118,
    "original_line": 118,
    "side": "RIGHT"
  }
]