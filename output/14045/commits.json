[
  {
    "sha": "3ced0b5ce087fad84eb25e552abc9faa113828e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2VkMGI1Y2UwODdmYWQ4NGViMjVlNTUyYWJjOWZhYTExMzgyOGU5",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-28T06:54:56Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-06-05T10:55:11Z"
      },
      "message": "Move SetupChainParamsBaseOptions to util\n\nThese options are intimately tied to ArgsManager, so their\npresence here makes sense, and moving them removes a final cause for a\ncircular dependency between util and chainparamsbase.",
      "tree": {
        "sha": "3e0c91a8efc2df84997c473320e8c74a7ba286ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e0c91a8efc2df84997c473320e8c74a7ba286ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ced0b5ce087fad84eb25e552abc9faa113828e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJc95+RAAoJEG7l83hfeLNF/IYH/0DokGDSb4aoJIqSy7ywzU4k\nrIafJ8fNNoWa7Jwe8u/MGWE9bBGtTQWywggAUkkR6Xf+V0DgRabRRMStDctNkZl6\nfCeI7J00TLZANImE+5D8+GRLlpJX5zQ7gfHO4c3B6ADeT4tFMg4/b0Ayvfn/+E/7\nO+nd/roFYpxl5OgES7Ss4cDygRqXuNIpSNQfx4oVvr4rDiTJUrr4tv2kv+zY6yP4\nXgzYh/G/2130KbMZJ3rktUXYwqMkZarytgypItThtkgFUnq/dkEo1PuWEjReyT+l\n2LRENp/+0tliSDfUDvWYMrYXMaTjrtE7SmRTYp5glW8R+PXRYNisjH9qDwvWvUU=\n=xHbd\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e0c91a8efc2df84997c473320e8c74a7ba286ba\nparent 52ec4c64e89f478cd2134dbf25f5987d39e9b8bc\nauthor Ben Woosley <ben.woosley@gmail.com> 1532760896 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1559732111 +0200\n\nMove SetupChainParamsBaseOptions to util\n\nThese options are intimately tied to ArgsManager, so their\npresence here makes sense, and moving them removes a final cause for a\ncircular dependency between util and chainparamsbase.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ced0b5ce087fad84eb25e552abc9faa113828e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ced0b5ce087fad84eb25e552abc9faa113828e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ced0b5ce087fad84eb25e552abc9faa113828e9/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52ec4c64e89f478cd2134dbf25f5987d39e9b8bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52ec4c64e89f478cd2134dbf25f5987d39e9b8bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52ec4c64e89f478cd2134dbf25f5987d39e9b8bc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "bc4a30897de6b2e448cbe6c0695777e43ac8c221",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "patch": "@@ -15,14 +15,6 @@ const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n-void SetupChainParamsBaseOptions()\n-{\n-    gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-                                   \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n-}\n-\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()"
      },
      {
        "sha": "64b148ea09228d6a428c9e43e569d317b0d30f47",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "patch": "@@ -39,11 +39,6 @@ class CBaseChainParams\n  */\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n \n-/**\n- *Set the arguments for chainparams\n- */\n-void SetupChainParamsBaseOptions();\n-\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests."
      },
      {
        "sha": "67a28d55d51084d85d52d74d596c49e88a17ac8b",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "patch": "@@ -629,6 +629,14 @@ std::string ArgsManager::GetHelpMessage() const\n     return usage;\n }\n \n+void SetupChainParamsBaseOptions()\n+{\n+    gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n+                                   \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n+}\n+\n bool HelpRequested(const ArgsManager& args)\n {\n     return args.IsArgSet(\"-?\") || args.IsArgSet(\"-h\") || args.IsArgSet(\"-help\") || args.IsArgSet(\"-help-debug\");"
      },
      {
        "sha": "4019abcd2a8125e29a1f5fb1b63ffadc22ea69da",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ced0b5ce087fad84eb25e552abc9faa113828e9/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "patch": "@@ -295,6 +295,11 @@ class ArgsManager\n \n extern ArgsManager gArgs;\n \n+/**\n+ * Set the chain name arguments for ArgsManager::GetChainName\n+ */\n+void SetupChainParamsBaseOptions();\n+\n /**\n  * @return true if help has been requested via a command-line arg\n  */"
      }
    ]
  },
  {
    "sha": "764106e07906d86a46d31435f399fa4f5045b39a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjQxMDZlMDc5MDZkODZhNDZkMzE0MzVmMzk5ZmE0ZjUwNDViMzlh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-24T08:28:34Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-06-05T11:57:12Z"
      },
      "message": "Make CBaseChainParams responsible for holding the chain name\n\nAnd call into BaseParams from ArgsManager. Introduce BaseParamsSelected\nas it's necessary to prevent access to BaseParams prior to selection.\n\nThis eliminates the chainparamsbase -> util -> chainparamsbase\ncircular dependency.\n\nNote I had to guard ArgsManagerHelper::NetworkArg calls with a test for a\nleading '-' as NetworkArg asserts against the alternative, while values without\n- are tested for in the util_tests.",
      "tree": {
        "sha": "e7909b4130c8a9de0a5dccc3cc3400efb12af50a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7909b4130c8a9de0a5dccc3cc3400efb12af50a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/764106e07906d86a46d31435f399fa4f5045b39a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJc964dAAoJEG7l83hfeLNFLQAIAIwT9oCFWXGCTB39pySHJV+9\n5aq+JmiP6KryTLFjEKK7s2y61ALoDCzEuPtxI3ham6kZL0MaeOhpb3roYhiKJSJx\n8rzFVCqAUnp1LAc2v05cXrDyX/X/Bcqg9r1NHJVdVnCqmKcMSqv3p6OGn0un9MHP\nna+I2qSKTxbDG8B+Tc82+hz74P0l2TJjU0amQRKdX3L5H77v6rPJCKwmC4dqyWVm\ni8sdbVsU7O7pyL0KJcHGzSDo3UBnUcBvmw5i6jwtpge4FLHVPzbPmxvkGBBUn+1N\nod9KPFeRDd0nSXcyDFmtWE2uxqXZKcK8JTh2rctO7dyqHleXIBlvNiZaIynM7bk=\n=HuBw\n-----END PGP SIGNATURE-----",
        "payload": "tree e7909b4130c8a9de0a5dccc3cc3400efb12af50a\nparent 3ced0b5ce087fad84eb25e552abc9faa113828e9\nauthor Ben Woosley <ben.woosley@gmail.com> 1535099314 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1559735832 +0200\n\nMake CBaseChainParams responsible for holding the chain name\n\nAnd call into BaseParams from ArgsManager. Introduce BaseParamsSelected\nas it's necessary to prevent access to BaseParams prior to selection.\n\nThis eliminates the chainparamsbase -> util -> chainparamsbase\ncircular dependency.\n\nNote I had to guard ArgsManagerHelper::NetworkArg calls with a test for a\nleading '-' as NetworkArg asserts against the alternative, while values without\n- are tested for in the util_tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/764106e07906d86a46d31435f399fa4f5045b39a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/764106e07906d86a46d31435f399fa4f5045b39a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/764106e07906d86a46d31435f399fa4f5045b39a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ced0b5ce087fad84eb25e552abc9faa113828e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ced0b5ce087fad84eb25e552abc9faa113828e9"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 90,
      "deletions": 79
    },
    "files": [
      {
        "sha": "dffb94bbb37d245fd161f8722ebbe485dfc96d91",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -6,7 +6,6 @@\n #include <chainparamsbase.h>\n \n #include <tinyformat.h>\n-#include <util/system.h>\n #include <util/memory.h>\n \n #include <assert.h>\n@@ -26,17 +25,26 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return MakeUnique<CBaseChainParams>(\"\", 8332);\n+        return MakeUnique<CBaseChainParams>(chain, \"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n+        return MakeUnique<CBaseChainParams>(chain, \"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n+        return MakeUnique<CBaseChainParams>(chain, \"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+bool BaseParamsSelected()\n+{\n+    return globalChainBaseParams != nullptr;\n+}\n+\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n-    gArgs.SelectConfigNetwork(chain);\n+}\n+\n+void UnselectBaseParams()\n+{\n+    globalChainBaseParams.reset();\n }"
      },
      {
        "sha": "cf2a353711259480131276c57154af46d14f8b85",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -21,13 +21,16 @@ class CBaseChainParams\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n \n+    const std::string& ChainName() const { return m_chain_name; }\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n \n     CBaseChainParams() = delete;\n-    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}\n+    CBaseChainParams(const std::string& chain_name, const std::string& data_dir, int rpc_port)\n+        : m_chain_name(chain_name), nRPCPort(rpc_port), strDataDir(data_dir) {}\n \n private:\n+    std::string m_chain_name;\n     int nRPCPort;\n     std::string strDataDir;\n };\n@@ -39,6 +42,11 @@ class CBaseChainParams\n  */\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain);\n \n+/**\n+ * @return true if BaseParams have been selected, false if not\n+ */\n+bool BaseParamsSelected();\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests."
      },
      {
        "sha": "c3d0a4d63c01390ace07725c23c2832bbe14cd92",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 49,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -22,6 +22,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+void UnselectBaseParams();\n+\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -184,7 +186,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     // a non-option argument (non-GNU option parsing)\n     BOOST_CHECK(testArgs.GetOverrideArgs().size() == 3 && testArgs.GetConfigArgs().empty());\n     BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n-                && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n+                && !testArgs.IsArgSet(\"-d\"));\n     BOOST_CHECK(testArgs.GetOverrideArgs().count(\"-a\") && testArgs.GetOverrideArgs().count(\"-b\") && testArgs.GetOverrideArgs().count(\"-ccc\")\n                 && !testArgs.GetOverrideArgs().count(\"f\") && !testArgs.GetOverrideArgs().count(\"-d\"));\n \n@@ -296,23 +298,25 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"noh=1\\n\"\n        \"noi=1\\n\"\n        \"i=1\\n\"\n-       \"sec1.ccc=extend1\\n\"\n+       \"test.ccc=extend1\\n\"\n        \"\\n\"\n-       \"[sec1]\\n\"\n+       \"[test]\\n\"\n        \"ccc=extend2\\n\"\n        \"d=eee\\n\"\n        \"h=1\\n\"\n-       \"[sec2]\\n\"\n+       \"[regtest]\\n\"\n        \"ccc=extend3\\n\"\n        \"iii=2\\n\";\n \n+    UnselectBaseParams();\n+\n     TestArgsManager test_args;\n     const char* avail_args[] = {\"-a\", \"-b\", \"-ccc\", \"-d\", \"-e\", \"-fff\", \"-ggg\", \"-h\", \"-i\", \"-iii\"};\n     test_args.SetupArgs(10, avail_args);\n \n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n-    // so do sec1.ccc, sec1.d, sec1.h, sec2.ccc, sec2.iii\n+    // so do test.ccc, test.d, test.h, regtest.ccc, regtest.iii\n \n     BOOST_CHECK(test_args.GetOverrideArgs().empty());\n     BOOST_CHECK(test_args.GetConfigArgs().size() == 13);\n@@ -326,10 +330,10 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.GetConfigArgs().count(\"-h\")\n                 && test_args.GetConfigArgs().count(\"-i\")\n                );\n-    BOOST_CHECK(test_args.GetConfigArgs().count(\"-sec1.ccc\")\n-                && test_args.GetConfigArgs().count(\"-sec1.h\")\n-                && test_args.GetConfigArgs().count(\"-sec2.ccc\")\n-                && test_args.GetConfigArgs().count(\"-sec2.iii\")\n+    BOOST_CHECK(test_args.GetConfigArgs().count(\"-test.ccc\")\n+                && test_args.GetConfigArgs().count(\"-test.h\")\n+                && test_args.GetConfigArgs().count(\"-regtest.ccc\")\n+                && test_args.GetConfigArgs().count(\"-regtest.iii\")\n                );\n \n     BOOST_CHECK(test_args.IsArgSet(\"-a\")\n@@ -400,7 +404,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(!test_args.IsArgNegated(\"-zzz\"));\n \n     // Test sections work\n-    test_args.SelectConfigNetwork(\"sec1\");\n+    SelectBaseParams(CBaseChainParams::TESTNET);\n \n     // same as original\n     BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n@@ -417,11 +421,11 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // section takes priority for multiple values\n     BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend1\");\n     // check multiple values works\n-    const std::vector<std::string> sec1_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n-    const auto& sec1_ccc_res = test_args.GetArgs(\"-ccc\");\n-    BOOST_CHECK_EQUAL_COLLECTIONS(sec1_ccc_res.begin(), sec1_ccc_res.end(), sec1_ccc_expected.begin(), sec1_ccc_expected.end());\n+    const std::vector<std::string> test_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n+    const auto& test_ccc_res = test_args.GetArgs(\"-ccc\");\n+    BOOST_CHECK_EQUAL_COLLECTIONS(test_ccc_res.begin(), test_ccc_res.end(), test_ccc_expected.begin(), test_ccc_expected.end());\n \n-    test_args.SelectConfigNetwork(\"sec2\");\n+    SelectBaseParams(CBaseChainParams::REGTEST);\n \n     // same as original\n     BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n@@ -437,28 +441,28 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // section takes priority for multiple values\n     BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend3\");\n     // check multiple values works\n-    const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n-    const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n-    BOOST_CHECK_EQUAL_COLLECTIONS(sec2_ccc_res.begin(), sec2_ccc_res.end(), sec2_ccc_expected.begin(), sec2_ccc_expected.end());\n+    const std::vector<std::string> regtest_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n+    const auto& regtest_ccc_res = test_args.GetArgs(\"-ccc\");\n+    BOOST_CHECK_EQUAL_COLLECTIONS(regtest_ccc_res.begin(), regtest_ccc_res.end(), regtest_ccc_expected.begin(), regtest_ccc_expected.end());\n \n     // Test section only options\n \n     test_args.SetNetworkOnlyArg(\"-d\");\n     test_args.SetNetworkOnlyArg(\"-ccc\");\n     test_args.SetNetworkOnlyArg(\"-h\");\n \n-    test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n+    SelectBaseParams(CBaseChainParams::MAIN);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n     BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n \n-    test_args.SelectConfigNetwork(\"sec1\");\n+    SelectBaseParams(CBaseChainParams::TESTNET);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 1);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n     BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n \n-    test_args.SelectConfigNetwork(\"sec2\");\n+    SelectBaseParams(CBaseChainParams::REGTEST);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"xxx\");\n     BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 1);\n@@ -469,42 +473,44 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n     TestArgsManager testArgs;\n     testArgs.GetOverrideArgs().clear();\n-    testArgs.GetOverrideArgs()[\"strtest1\"] = {\"string...\"};\n+    testArgs.GetOverrideArgs()[\"-strtest1\"] = {\"string...\"};\n     // strtest2 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"inttest1\"] = {\"12345\"};\n-    testArgs.GetOverrideArgs()[\"inttest2\"] = {\"81985529216486895\"};\n+    testArgs.GetOverrideArgs()[\"-inttest1\"] = {\"12345\"};\n+    testArgs.GetOverrideArgs()[\"-inttest2\"] = {\"81985529216486895\"};\n     // inttest3 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"booltest1\"] = {\"\"};\n+    testArgs.GetOverrideArgs()[\"-booltest1\"] = {\"\"};\n     // booltest2 undefined on purpose\n-    testArgs.GetOverrideArgs()[\"booltest3\"] = {\"0\"};\n-    testArgs.GetOverrideArgs()[\"booltest4\"] = {\"1\"};\n+    testArgs.GetOverrideArgs()[\"-booltest3\"] = {\"0\"};\n+    testArgs.GetOverrideArgs()[\"-booltest4\"] = {\"1\"};\n \n     // priorities\n-    testArgs.GetOverrideArgs()[\"pritest1\"] = {\"a\", \"b\"};\n-    testArgs.GetConfigArgs()[\"pritest2\"] = {\"a\", \"b\"};\n-    testArgs.GetOverrideArgs()[\"pritest3\"] = {\"a\"};\n-    testArgs.GetConfigArgs()[\"pritest3\"] = {\"b\"};\n-    testArgs.GetOverrideArgs()[\"pritest4\"] = {\"a\",\"b\"};\n-    testArgs.GetConfigArgs()[\"pritest4\"] = {\"c\",\"d\"};\n-\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n-    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n-    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n-    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n-    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest4\", false), true);\n-\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest1\", \"default\"), \"b\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest2\", \"default\"), \"a\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest3\", \"default\"), \"a\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest4\", \"default\"), \"b\");\n+    testArgs.GetOverrideArgs()[\"-pritest1\"] = {\"a\", \"b\"};\n+    testArgs.GetConfigArgs()[\"-pritest2\"] = {\"a\", \"b\"};\n+    testArgs.GetOverrideArgs()[\"-pritest3\"] = {\"a\"};\n+    testArgs.GetConfigArgs()[\"-pritest3\"] = {\"b\"};\n+    testArgs.GetOverrideArgs()[\"-pritest4\"] = {\"a\",\"b\"};\n+    testArgs.GetConfigArgs()[\"-pritest4\"] = {\"c\",\"d\"};\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-strtest1\", \"default\"), \"string...\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-strtest2\", \"default\"), \"default\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"-booltest1\", false), true);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"-booltest2\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"-booltest3\", false), false);\n+    BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"-booltest4\", false), true);\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-pritest1\", \"default\"), \"b\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-pritest2\", \"default\"), \"a\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-pritest3\", \"default\"), \"a\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"-pritest4\", \"default\"), \"b\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetChainName)\n {\n+    UnselectBaseParams();\n+\n     TestArgsManager test_args;\n     const char* avail_args[] = {\"-testnet\", \"-regtest\"};\n     test_args.SetupArgs(2, avail_args);\n@@ -556,7 +562,7 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n \n     // check setting the network to test (and thus making\n     // [test] regtest=1 potentially relevant) doesn't break things\n-    test_args.SelectConfigNetwork(\"test\");\n+    SelectBaseParams(CBaseChainParams::TESTNET);\n \n     BOOST_CHECK(test_args.ParseParameters(0, (char**)argv_testnet, error));\n     test_args.ReadConfigString(testnetconf);\n@@ -774,7 +780,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <IsArgSet/IsArgNegated/GetArg output> | <GetArgs output> | <GetUnsuitable output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"b835eef5977d69114eb039a976201f8c7121f34fe2b7ea2b73cafb516e5c9dc8\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"6e84c6b6a1702f5c2247d175e7e1ad76c342be58b95bf2b7ed7e271d38197a14\");\n }\n \n // Similar test as above, but for ArgsManager::GetChainName function."
      },
      {
        "sha": "aff099f843028326b3c419e22f7de0d653ad7c71",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -172,14 +172,15 @@ class ArgsManagerHelper {\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n-        return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n+        return ((BaseParamsSelected() && BaseParams().ChainName() == CBaseChainParams::MAIN)\n+            || am.m_network_only_args.count(arg) == 0);\n     }\n \n     /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n+    static inline std::string NetworkArg(const std::string& network, const std::string& arg)\n     {\n         assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n+        return \"-\" + network + \".\" + arg.substr(1);\n     }\n \n     /** Find arguments in a map and add them to a vector */\n@@ -229,8 +230,8 @@ class ArgsManagerHelper {\n         // But in contrast we return the first argument seen in a config file,\n         // so \"foo=bar \\n foo=baz\" in the config file gives\n         // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n+        if (BaseParamsSelected()) {\n+            found_result = GetArgHelper(am.m_config_args, NetworkArg(BaseParams().ChainName(), arg));\n             if (found_result.first) {\n                 return found_result;\n             }\n@@ -331,10 +332,10 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n     LOCK(cs_args);\n \n     // if there's no section selected, don't worry\n-    if (m_network.empty()) return std::set<std::string> {};\n+    if (!BaseParamsSelected()) return std::set<std::string> {};\n \n     // if it's okay to use the default section for this network, don't worry\n-    if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n+    if (BaseParams().ChainName() == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n         std::pair<bool, std::string> found_result;\n@@ -344,7 +345,7 @@ const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n         if (found_result.first) continue;\n \n         // if there's a network-specific value for this option, it's fine\n-        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n+        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(BaseParams().ChainName(), arg));\n         if (found_result.first) continue;\n \n         // if there isn't a default value for this option, it's fine\n@@ -372,12 +373,6 @@ const std::list<SectionInfo> ArgsManager::GetUnrecognizedSections() const\n     return unrecognized;\n }\n \n-void ArgsManager::SelectConfigNetwork(const std::string& network)\n-{\n-    LOCK(cs_args);\n-    m_network = network;\n-}\n-\n bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)\n {\n     LOCK(cs_args);\n@@ -458,8 +453,8 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n     LOCK(cs_args);\n \n     ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    if (BaseParamsSelected()) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(BaseParams().ChainName(), strArg));\n     }\n \n     if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n@@ -482,8 +477,8 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n     const auto& ov = m_override_args.find(strArg);\n     if (ov != m_override_args.end()) return ov->second.empty();\n \n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n+    if (BaseParamsSelected()) {\n+        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(BaseParams().ChainName(), strArg));\n         if (cfs != m_config_args.end()) return cfs->second.empty();\n     }\n "
      },
      {
        "sha": "c114930e81c86e46912c18d83d9afabb6a17d6d4",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -163,11 +163,6 @@ class ArgsManager\n public:\n     ArgsManager();\n \n-    /**\n-     * Select the network in use\n-     */\n-    void SelectConfigNetwork(const std::string& network);\n-\n     NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n     NODISCARD bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n "
      },
      {
        "sha": "4b3f46e8226b7b8c75b94eef7af6205358a2f126",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/764106e07906d86a46d31435f399fa4f5045b39a/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/764106e07906d86a46d31435f399fa4f5045b39a/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=764106e07906d86a46d31435f399fa4f5045b39a",
        "patch": "@@ -9,7 +9,6 @@\n export LC_ALL=C\n \n EXPECTED_CIRCULAR_DEPENDENCIES=(\n-    \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/policy -> policy/settings -> policy/policy\""
      }
    ]
  }
]