[
  {
    "sha": "cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmFlZjY5YWNlNmM1MmFlYjRjZTM0NzU5N2M2ZGFlNjFiZGNlNzQ0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T14:41:14Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "remove default argument from GetMinimumFee",
      "tree": {
        "sha": "5acacb04a9644b98183c99fa9548d292fed1112d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5acacb04a9644b98183c99fa9548d292fed1112d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "10a8d6b887302903dd8082c26df64a971f8180e9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -510,7 +510,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n \n         if (nPayAmount > 0)\n         {"
      },
      {
        "sha": "4b00404d2aeb0255b34c6bb21f55bbed65ced24d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -2724,7 +2724,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n "
      },
      {
        "sha": "232673a2f76dd1985763bf749b10b8be3aad9d49",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaef69ace6c52aeb4ce347597c6dae61bdce744/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "patch": "@@ -963,7 +963,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "d507c301bc49c72ed7303658a309e7d204134f80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTA3YzMwMWJjNDljNzJlZDczMDM2NThhMzA5ZTdkMjA0MTM0Zjgw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T15:28:30Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "Introduce a fee estimate mode.\n\nGetMinimumFee now passes the conservative argument into estimateSmartFee.\nCall CalculateEstimateType(mode) before calling GetMinimumFee or estimateSmartFee to determine the value of this argument.\nCCoinControl can now be used to control this mode.",
      "tree": {
        "sha": "33e3d8fed65c98f105bf80bcfb2dfb3f32c98cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33e3d8fed65c98f105bf80bcfb2dfb3f32c98cf9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d507c301bc49c72ed7303658a309e7d204134f80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d507c301bc49c72ed7303658a309e7d204134f80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaef69ace6c52aeb4ce347597c6dae61bdce744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaef69ace6c52aeb4ce347597c6dae61bdce744"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 42,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8a98e55520812233642a37adaa126cd311c068a0",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -90,6 +90,13 @@ enum class FeeReason {\n \n std::string StringForFeeReason(FeeReason reason);\n \n+/* Used to determine type of fee estimation requested */\n+enum class FeeEstimateMode {\n+    UNSET,        //! Use default settings based on other criteria\n+    ECONOMICAL,   //! Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n+};\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      },
      {
        "sha": "477cee1c0411cfe2435790e7b62d027f8933fc0d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -490,6 +490,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+\n     // calculation\n     if (nQuantity > 0)\n     {\n@@ -510,7 +512,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */);\n+        nPayFee = CWallet::GetMinimumFee(nBytes, coinControl->nConfirmTarget, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n \n         if (nPayAmount > 0)\n         {\n@@ -585,7 +587,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     if (payTxFee.GetFeePerK() > 0)\n         dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), payTxFee.GetFeePerK()) / 1000;\n     else {\n-        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool).GetFeePerK()) / 1000;\n+        dFeeVary = (double)std::max(CWallet::GetRequiredFee(1000), ::feeEstimator.estimateSmartFee(coinControl->nConfirmTarget, NULL, ::mempool, conservative_estimate).GetFeePerK()) / 1000;\n     }\n     QString toolTip4 = tr(\"Can vary +/- %1 satoshi(s) per input.\").arg(dFeeVary);\n "
      },
      {
        "sha": "d9439fe248c41dcce600211a88bb7bc74e629d76",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -652,7 +652,8 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n         ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(),"
      },
      {
        "sha": "354225090f77761f715db2f476e36bc8295c241f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -19,6 +19,7 @@\n #include \"keystore.h\"\n #include \"validation.h\"\n #include \"net.h\" // for g_connman\n+#include \"policy/fees.h\"\n #include \"policy/rbf.h\"\n #include \"sync.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "bdd01bec12acd3fb58786a5fa0b82c56d5bc1bb7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_COINCONTROL_H\n \n #include \"policy/feerate.h\"\n+#include \"policy/fees.h\"\n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n \n@@ -26,6 +27,8 @@ class CCoinControl\n     int nConfirmTarget;\n     //! Signal BIP-125 replace by fee.\n     bool signalRbf;\n+    //! Fee estimation mode to control arguments to estimateSmartFee\n+    FeeEstimateMode m_fee_mode;\n \n     CCoinControl()\n     {\n@@ -42,6 +45,7 @@ class CCoinControl\n         fOverrideFeeRate = false;\n         nConfirmTarget = 0;\n         signalRbf = fWalletRbf;\n+        m_fee_mode = FeeEstimateMode::UNSET;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "a36f6798f0f48b97e75fc7855f0c288572dcb7f0",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -165,7 +165,8 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr, ignoreGlobalPayTxFee);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "a43b5398e04c60bae6471f535b5f2667f830a179",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -2724,7 +2724,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (coinControl && coinControl->nConfirmTarget > 0)\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */);\n+                // Allow to override the default fee estimate mode over the CoinControl instance\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n                     nFeeNeeded = coinControl->nFeeRate.GetFee(nBytes);\n \n@@ -2905,13 +2908,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n     return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate)\n {\n     // payTxFee is the user-set global for desired feerate\n     CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0 || ignoreGlobalPayTxFee) {\n-        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, true).GetFee(nTxBytes);\n+        nFeeNeeded = estimator.estimateSmartFee(nConfirmTarget, feeCalc, pool, conservative_estimate).GetFee(nTxBytes);\n         // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n         if (nFeeNeeded == 0) {\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n@@ -4154,3 +4157,14 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n {\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode) {\n+    switch (mode) {\n+    case FeeEstimateMode::UNSET:\n+    case FeeEstimateMode::CONSERVATIVE:\n+        return true;\n+    case FeeEstimateMode::ECONOMICAL:\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "813bf530acf3d658fb2b4a5f8c11cdd019214e8a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d507c301bc49c72ed7303658a309e7d204134f80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d507c301bc49c72ed7303658a309e7d204134f80",
        "patch": "@@ -80,6 +80,7 @@ class CTxMemPool;\n class CBlockPolicyEstimator;\n class CWalletTx;\n struct FeeCalculation;\n+enum class FeeEstimateMode;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -963,7 +964,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Estimate the minimum fee considering user set parameters\n      * and the required fee\n      */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc, bool ignoreGlobalPayTxFee, bool conservative_estimate);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee\n@@ -1211,4 +1212,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     }\n     return true;\n }\n+\n+bool CalculateEstimateType(FeeEstimateMode mode);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDczOGUzZDMxOWFiNTA0NjZiZjc2Yzk1ODQxYmI3Mjc1YWQ0ZDIy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T17:44:52Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "remove default argument from estimateSmartFee",
      "tree": {
        "sha": "8b7ea639c1024426e5fe0e465f911568e5c007c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b7ea639c1024426e5fe0e465f911568e5c007c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0738e3d319ab50466bf76c95841bb7275ad4d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d507c301bc49c72ed7303658a309e7d204134f80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d507c301bc49c72ed7303658a309e7d204134f80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d507c301bc49c72ed7303658a309e7d204134f80"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "059415418dd630a52a82bbec126a3cdfe2647c56",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "patch": "@@ -204,7 +204,7 @@ class CBlockPolicyEstimator\n      *  the closest target where one can be given.  'conservative' estimates are\n      *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative = true) const;\n+    CFeeRate estimateSmartFee(int confTarget, FeeCalculation *feeCalc, const CTxMemPool& pool, bool conservative) const;\n \n     /** Return a specific fee estimate calculation with a given success\n      * threshold and time horizon, and optionally return detailed data about"
      },
      {
        "sha": "8cdd392109633bff26cfb35f66d5f09bc8e8b0e9",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0738e3d319ab50466bf76c95841bb7275ad4d22/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "patch": "@@ -184,8 +184,8 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[5]);\n     for (int i = 1; i < 10; i++) {\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n-        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= feeEst.estimateRawFee(i, 0.85, FeeEstimateHorizon::MED_HALFLIFE).GetFeePerK());\n+        BOOST_CHECK(feeEst.estimateSmartFee(i, NULL, mpool, true).GetFeePerK() >= mpool.GetMinFee(1).GetFeePerK());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGJmMzNkYTgzNTdiZDZhZmYxMDBiYmU1Yjg0YTdmMDE5MzdlMzc5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-13T18:02:55Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-07T02:20:23Z"
      },
      "message": "Change default fee estimation mode.\n\nFee estimates will default to be non-conservative if the transaction in question is opt-in-RBF.",
      "tree": {
        "sha": "7fe52cd82773d8bd31f35fc74489d1527784c53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fe52cd82773d8bd31f35fc74489d1527784c53b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0738e3d319ab50466bf76c95841bb7275ad4d22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0738e3d319ab50466bf76c95841bb7275ad4d22"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c19420beb5614c5d8982609ad753fc3c656e12f8",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -490,7 +490,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         else nBytesInputs += 148;\n     }\n \n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, coinControl->signalRbf);\n \n     // calculation\n     if (nQuantity > 0)"
      },
      {
        "sha": "27634eb179ba0b9fe2d86fb389128da62d5fa568",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -166,6 +166,8 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateGlobalFeeVariables()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n+        connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n@@ -652,7 +654,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n \n     int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 2;\n     FeeCalculation feeCalc;\n-    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+    bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, ui->optInRBF->isChecked());\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocksToConfirm, &feeCalc, ::mempool, conservative_estimate);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n     {\n@@ -828,6 +830,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     } else {\n         CoinControlDialog::coinControl->nConfirmTarget = model->getDefaultConfirmTarget();\n     }\n+    CoinControlDialog::coinControl->signalRbf = ui->optInRBF->isChecked();\n \n     for(int i = 0; i < ui->entries->count(); ++i)\n     {"
      },
      {
        "sha": "a25530d8bdbc99b3f6f945a4d791d7c904fb64c1",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET);\n+        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, newTxReplaceable);\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n "
      },
      {
        "sha": "9a5f6b279194c694a4ffd0e1239c8826d72934af",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -2725,7 +2725,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     currentConfirmationTarget = coinControl->nConfirmTarget;\n \n                 // Allow to override the default fee estimate mode over the CoinControl instance\n-                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET);\n+                bool conservative_estimate = CalculateEstimateType(coinControl ? coinControl->m_fee_mode : FeeEstimateMode::UNSET, rbf);\n \n                 CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, ::mempool, ::feeEstimator, &feeCalc, false /* ignoreGlobalPayTxFee */, conservative_estimate);\n                 if (coinControl && coinControl->fOverrideFeeRate)\n@@ -4158,9 +4158,10 @@ bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState&\n     return ::AcceptToMemoryPool(mempool, state, tx, true, NULL, NULL, false, nAbsurdFee);\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode) {\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf) {\n     switch (mode) {\n     case FeeEstimateMode::UNSET:\n+        return !opt_in_rbf; // Allow for lower fees if RBF is an option\n     case FeeEstimateMode::CONSERVATIVE:\n         return true;\n     case FeeEstimateMode::ECONOMICAL:"
      },
      {
        "sha": "e3715cdf376d356a4791ee53c6d6b84eafb1285c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0bf33da8357bd6aff100bbe5b84a7f01937e379/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "patch": "@@ -1213,6 +1213,6 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n-bool CalculateEstimateType(FeeEstimateMode mode);\n+bool CalculateEstimateType(FeeEstimateMode mode, bool opt_in_rbf);\n \n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTM1OTIzZWUyY2YxYTFhOWE0MzY2MjZkYzViOTIxOWY4YWQ5N2Rh",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-06-14T19:15:40Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-07-10T16:40:02Z"
      },
      "message": "Add RPC options for RBF, confirmation target, and conservative fee estimation.\n\nAdd support for setting each of these attributes on a per RPC call basis to sendtoaddress, sendmany, fundrawtransaction (already had RBF), and bumpfee (already had RBF and conf target).",
      "tree": {
        "sha": "adde79ee8ba6dc1a97167c2b8686b7d59654f9e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adde79ee8ba6dc1a97167c2b8686b7d59654f9e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0bf33da8357bd6aff100bbe5b84a7f01937e379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0bf33da8357bd6aff100bbe5b84a7f01937e379"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 109,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c39a2d55c383405e8ab1db4580e919594051bcae",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -36,6 +36,20 @@ std::string StringForFeeReason(FeeReason reason) {\n     return reason_string->second;\n }\n \n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode) {\n+    static const std::map<std::string, FeeEstimateMode> fee_modes = {\n+        {\"UNSET\", FeeEstimateMode::UNSET},\n+        {\"ECONOMICAL\", FeeEstimateMode::ECONOMICAL},\n+        {\"CONSERVATIVE\", FeeEstimateMode::CONSERVATIVE},\n+    };\n+    auto mode = fee_modes.find(mode_string);\n+\n+    if (mode == fee_modes.end()) return false;\n+\n+    fee_estimate_mode = mode->second;\n+    return true;\n+}\n+\n /**\n  * We will instantiate an instance of this class to track transactions that were\n  * included in a block. We will lump transactions into a bucket according to their"
      },
      {
        "sha": "fea279e47785e87a9ff9fb3ce286bd16c696ac71",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -97,6 +97,8 @@ enum class FeeEstimateMode {\n     CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n };\n \n+bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n+\n /* Used to return detailed information about a feerate bucket */\n struct EstimatorBucket\n {"
      },
      {
        "sha": "60b55da3e70f22ec905a9d3db52810d67091763f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -668,7 +668,7 @@ bool WalletModel::bumpFee(uint256 hash)\n     std::unique_ptr<CFeeBumper> feeBump;\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n-        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true));\n+        feeBump.reset(new CFeeBumper(wallet, hash, nTxConfirmTarget, false, 0, true, FeeEstimateMode::UNSET));\n     }\n     if (feeBump->getResult() != BumpFeeResult::OK)\n     {"
      },
      {
        "sha": "81390d7e4779a2a7a4978876306818afb43b2bb5",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -37,6 +37,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 1, \"height\" },\n     { \"sendtoaddress\", 1, \"amount\" },\n     { \"sendtoaddress\", 4, \"subtractfeefromamount\" },\n+    { \"sendtoaddress\", 5 , \"replaceable\" },\n+    { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"settxfee\", 0, \"amount\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n@@ -69,6 +71,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 1, \"amounts\" },\n     { \"sendmany\", 2, \"minconf\" },\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n+    { \"sendmany\", 5 , \"replaceable\" },\n+    { \"sendmany\", 6 , \"conf_target\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },\n     { \"createmultisig\", 0, \"nrequired\" },"
      },
      {
        "sha": "607ecf4182b79129cd976f7df0049623cc6af96e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -66,7 +66,7 @@ bool CFeeBumper::preconditionChecks(const CWallet *pWallet, const CWalletTx& wtx\n     return true;\n }\n \n-CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable)\n+CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode)\n     :\n     txid(std::move(txidIn)),\n     nOldFee(0),\n@@ -165,7 +165,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, int newConf\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        bool conservative_estimate = CalculateEstimateType(FeeEstimateMode::UNSET, newTxReplaceable);\n+        bool conservative_estimate = CalculateEstimateType(fee_mode, newTxReplaceable);\n         nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, ::feeEstimator, nullptr /* FeeCalculation */, ignoreGlobalPayTxFee, conservative_estimate);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n "
      },
      {
        "sha": "11e2f5f95373df7d1cd19ce223921b70950ea3e4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -10,6 +10,7 @@\n class CWallet;\n class CWalletTx;\n class uint256;\n+enum class FeeEstimateMode;\n \n enum class BumpFeeResult\n {\n@@ -24,7 +25,7 @@ enum class BumpFeeResult\n class CFeeBumper\n {\n public:\n-    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable);\n+    CFeeBumper(const CWallet *pWalletIn, const uint256 txidIn, int newConfirmTarget, bool ignoreGlobalPayTxFee, CAmount totalFee, bool newTxReplaceable, FeeEstimateMode fee_mode);\n     BumpFeeResult getResult() const { return currentResult; }\n     const std::vector<std::string>& getErrors() const { return vErrors; }\n     CAmount getOldFee() const { return nOldFee; }"
      },
      {
        "sha": "5f72e3b6f598bb90bbbe0eed377e482eae916d39",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 14,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f135923ee2cf1a1a9a436626dc5b9219f8ad97da/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f135923ee2cf1a1a9a436626dc5b9219f8ad97da",
        "patch": "@@ -356,7 +356,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew, CCoinControl *coin_control = nullptr)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -382,7 +382,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n@@ -401,9 +401,9 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n@@ -416,6 +416,12 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -444,12 +450,29 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n         wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull()) {\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n+    }\n+\n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx, &coin_control);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -888,9 +911,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n         throw std::runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -910,7 +933,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n-            \"\\nResult:\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n+             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n@@ -942,9 +971,24 @@ UniValue sendmany(const JSONRPCRequest& request)\n         wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (request.params.size() > 4)\n+    if (request.params.size() > 4 && !request.params[4].isNull())\n         subtractFeeFromAmount = request.params[4].get_array();\n \n+    CCoinControl coin_control;\n+    if (request.params.size() > 5 && !request.params[5].isNull()) {\n+        coin_control.signalRbf = request.params[5].get_bool();\n+    }\n+\n+    if (request.params.size() > 6 && !request.params[6].isNull()) {\n+        coin_control.nConfirmTarget = request.params[6].get_int();\n+    }\n+\n+    if (request.params.size() > 7 && !request.params[7].isNull()) {\n+        if (!FeeModeFromString(request.params[7].get_str(), coin_control.m_fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+    }\n+\n     std::set<CBitcoinAddress> setAddress;\n     std::vector<CRecipient> vecSend;\n \n@@ -989,7 +1033,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     std::string strFailReason;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, &coin_control);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n@@ -2658,6 +2702,11 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                                  [vout_index,...]\\n\"\n                             \"     \\\"replaceable\\\"            (boolean, optional) Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\\n\"\n+                            \"     \\\"conf_target\\\"            (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"estimate_mode\\\"          (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+                            \"         \\\"UNSET\\\"\\n\"\n+                            \"         \\\"ECONOMICAL\\\"\\n\"\n+                            \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"\\nResult:\\n\"\n@@ -2710,6 +2759,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2746,6 +2797,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             coinControl.signalRbf = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"conf_target\")) {\n+            coinControl.nConfirmTarget = options[\"conf_target\"].get_int();\n+        }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coinControl.m_fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n       }\n     }\n \n@@ -2823,6 +2882,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n+            \"     \\\"estimate_mode\\\"     (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"         \\\"UNSET\\\"\\n\"\n+            \"         \\\"ECONOMICAL\\\"\\n\"\n+            \"         \\\"CONSERVATIVE\\\"\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -2845,13 +2908,15 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     int newConfirmTarget = nTxConfirmTarget;\n     CAmount totalFee = 0;\n     bool replaceable = true;\n+    FeeEstimateMode fee_mode = FeeEstimateMode::UNSET;\n     if (request.params.size() > 1) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n                 {\"totalFee\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n@@ -2876,12 +2941,17 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         if (options.exists(\"replaceable\")) {\n             replaceable = options[\"replaceable\"].get_bool();\n         }\n+        if (options.exists(\"estimate_mode\")) {\n+            if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), fee_mode)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+            }\n+        }\n     }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n     EnsureWalletIsUnlocked(pwallet);\n \n-    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable);\n+    CFeeBumper feeBump(pwallet, hash, newConfirmTarget, ignoreGlobalPayTxFee, totalFee, replaceable, fee_mode);\n     BumpFeeResult res = feeBump.getResult();\n     if (res != BumpFeeResult::OK)\n     {\n@@ -3023,8 +3093,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n     { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\"} },"
      }
    ]
  }
]