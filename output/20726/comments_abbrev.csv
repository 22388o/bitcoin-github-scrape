DrahtBot,2020-12-20 00:26:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21186 (Net/Net Processing: Move addr data into net_processing by jnewbery)\n* #20277 (test: Extend p2p_ibd_tx_relay.py to",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748544179,748544179,
jonatack,2020-12-20 08:27:04,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748578410,748578410,
laanwj,2020-12-20 12:02:47,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748598786,748598786,
jnewbery,2020-12-20 12:32:25,"Concept ACK to having a way to not send `addr` messages to inbound block-relay-only peers.\n\nDid you consider doing this implicitly, i.e. only consider a peer an addr-relay peer if:\n\n1. it's an outbound peer that isn't block-relay-peer; or\n2. it's an inbound peer and we've received an `addr`, `addrv2` or `getaddr` from the peer.\n\nFor inbound peers we would defer initializing the addr-",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748601961,748601961,
sdaftuar,2020-12-20 16:52:42,"@sipa Thanks for taking a look!\n\n> If I understand it correctly, the BIP idea doesn't concern itself with this being outbound->inbound or not, but the implementation only ever announces it in the outbound direction, and will disconnect if it's received from a (full) outbound peer. Is that worth pointing out (e.g. ""Peers MAY decide to not serve peers that announce this flag"").\n\nYes good obs",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748632153,748632153,
sdaftuar,2020-12-21 03:55:21," > Did you consider doing this implicitly, i.e. only consider a peer an addr-relay peer if:\n\n@jnewbery I think we could improve addr-relay by making guesses about our peers, but it seems to me that the logic is much clearer if we just explicitly add support for peers telling each other what they're trying to do.  Updating the protocol with a new message type is not particularly difficult or co",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748742978,748742978,
jnewbery,2020-12-21 09:39:29,"I'm not suggesting that we make guesses or have workarounds. The proposal is that peers opt in to address relay by relaying addresses. That's the most reliable heuristic we have, and it works reliably for all peers on the network, not just those that have upgraded to version 70018. This would work today with clients that connect to us and that are addr relay black holes.\n\n> ... increases the m",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-748876374,748876374,
sdaftuar,2020-12-21 17:25:46,"> I've implemented my suggestion here: https://github.com/bitcoin/bitcoin/compare/master...jnewbery:2020-12-implicit-addr-relay?expand=1. It's a 20 line change, and doesn't seem too complex.\n\nThe downside to an approach like this (for both `m_addr_known` and `m_tx_relay`) is that we don't get the benefit of limiting and bounding the resources that will be used on the peer at the time of connec",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-749097571,749097571,
jnewbery,2020-12-22 13:34:29,"@sdaftuar Thanks for the additional context. This makes much more sense to me now that I understand the longer term plan. The change in #19670 to favour inbound-block-relay-only peers also makes much more sense when we're limiting the memory usage of inbound-block-relay-only peers.\n\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-749542537,749542537,
sipa,2020-12-23 19:00:50,"@Limpisey168 If you're going to review, please leave meaningful comments.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-750431457,750431457,
luke-jr,2021-01-03 01:02:39,">a block-relay-only connection today, our peer doesn't know that we don't want addr relay on the link\n\nThese seem like they're conceptually different topics, and treating them as the same seems like an implementation-specific thing...\n\n> only want blocks/compactblocks/headers to be sent on the link, and not transaction-relay traffic\n\nWhat is the purpose of compactblocks without transac",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-753551432,753551432,
jnewbery,2021-01-03 10:56:31,"I agree with some of the other comments here that it seems too implementation-specific to encode ""relay blocks, don't relay txs, don't relay addrs"" in a single P2P message.\n\nI think a more general approach would be to introduce three new P2P messages for relay negotiation:\n\n- `sendblocks` to opt in to block relay (can be followed by `sendheaders` and `sendcmpct` for those features)\n- `se",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-753599400,753599400,
sdaftuar,2021-01-05 15:04:33,"Thanks all for the comments so far.  I've renamed the p2p message to ""disabletx"" to more clearly communicate what the effect of processing this message is.  Current draft is here: https://github.com/sdaftuar/bips/blob/2020-09-negotiate-block-relay/bip-disable-tx.mediawiki\n\nSome highlights, besides the message being renamed:\n * I've made it more explicit that the BIP37-related messages are di",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-754691586,754691586,
sdaftuar,2021-01-05 18:04:14,"@amitiuttarwar Hopefully I addressed most of your comments/questions on the BIP and future direction I have in mind.  Just wanted to answer this:\n \n> * #19670 introduced a workaround to deduce inbound block-relay-only peers and protect them from eviction. After this PR, do you think we could revisit to make it more direct?\n\nI think we would wait until this has been deployed for a while and",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-754802089,754802089,
sdaftuar,2021-01-05 18:28:21,"> > a block-relay-only connection today, our peer doesn't know that we don't want addr relay on the link\n> \n> These seem like they're conceptually different topics, and treating them as the same seems like an implementation-specific thing...\n> \n\n> I agree with some of the other comments here that it seems too implementation-specific to encode ""relay blocks, don't relay txs, don't relay a",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-754816629,754816629,
practicalswift,2021-01-10 19:06:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-757526893,757526893,
MarcoFalke,2021-02-11 10:47:23,"Needs rebase:\n\n```\nfuzz: test/fuzz/process_message.cpp:57: auto initialize_process_message()::(anonymous class)::operator()() const:\nAssertion `""GetNumMsgTypes() == getAllNetMessageTypes().size()"" && check' failed.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-777356958,777356958,
sdaftuar,2021-02-11 16:37:54,"@jonatack Thanks for the review, I included your commit that adds the addrv2 test as well.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-777626740,777626740,
pstratem,2021-02-11 19:29:11,@sdaftuar We seem to have a number of p2p commands now that are effectively just telling the peer which commands we want to/support receiving.  Maybe it's time for a command that just lists which commands we want/support?,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-777733904,777733904,
sdaftuar,2021-02-11 19:33:06,"@pstratem I'm not opposed to that idea, but it seems to me that a change to the way feature negotiation works generally that incorporates existing p2p message negotiation could happen independently of this proposal, so I'd prefer not to gate this work on it.  If a proposal like that is ready for deployment before this, I'd be happy to change the implementation here.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-777737035,777737035,
MarcoFalke,2021-02-12 11:07:27,"I am wondering why it is allowed to send a `disabletx` message and then follow up with a `tx` message. See also https://github.com/bitcoin/bips/pull/1052/files#r575130294 which raises the same question in the bip. Even if the bip stays as is, we might want to disallow `tx` messages as well, or is there some downside I am missing?\n\n<details><summary>The ""test"" I wrote</summary>\n\n\n```diff",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-778130639,778130639,
sdaftuar,2021-02-12 13:24:57,"> I am wondering why it is allowed to send a `disabletx` message and then follow up with a `tx` message. See also https://github.com/bitcoin/bips/pull/1052/files#r575130294 which raises the same question in the bip. Even if the bip stays as is, we might want to disallow `tx` messages as well, or is there some downside I am missing?\n\n@MarcoFalke The intent is to disallow sending a tx on such a ",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-778193492,778193492,
sdaftuar,2021-03-10 01:23:55,"Seems like we’re going in circles discussing this at length, with no consensus on how to move forward.  I am happy for someone to implement this another way, if that is the preference — but I think this approach is superior to the alternate suggestions being made about reusing fRelay.\n\nI’m closing this PR for now; please feel free to consider this up for grabs if anyone else is interested.",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-794702092,794702092,
ariard,2021-03-15 14:51:19,"@sdaftuar, fixups sounds good to me. FWIW, see my [comment](https://github.com/bitcoin/bitcoin/pull/20726#discussion_r594399480) on your proposed bip338 changes. I agree this approach is superior to the alternate suggestions. I hope some of the bip content around defining well the set of messages excluded in case of tx-relay disabling could be incorporated in some bip37/60 extension.\n\nI don't ",https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-799482200,799482200,
laanwj,2021-03-16 14:00:31,Somewhat sad to see this closed. I think it made a lot of sense.,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-800281829,800281829,
Rspigler,2021-06-21 03:10:10,Mark up for grabs?,https://github.com/bitcoin/bitcoin/pull/20726#issuecomment-864691152,864691152,
sipa,2020-12-20 05:21:50,"We do relay transactions with manual peers, right?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r546324067,546324067,src/net_processing.cpp
sdaftuar,2020-12-20 16:56:53,"I should update the comment to be clearer. What I meant to describe was that we only disconnect an outbound peer who sends us the BLOCKRELAY message if we expect them to be a tx-relay or addr-relay peer.  If we are connecting to them as a MANUAL connection, then we'll stay connected and just not relay transactions on that link.\n\nIn addition to fixing the comment, I could improve the code to en",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r546402275,546402275,src/net_processing.cpp
ajtowns,2020-12-24 01:51:17,"Does it make sense to have `m_conn_type` be `std::atomic` (rather than protected by a mutex) if updating it is going to also invalidate other members?\n\nIt's not clear to me that having `m_conn_type` be modified is actually the right approach -- we don't change the connection type when a peer wants us to send compact block announcements or not, eg. It might make more sense to have the connectio",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r548346466,548346466,src/net.cpp
ajtowns,2020-12-24 02:20:00,"Wouldn't ""BLKRELAYONLY"" be a better name for this concept, or even separating it out into its components as ""TXRELAY false"" and ""ADDRRELAY false"" ? Seems surprising that a ""BLOCKRELAY"" message would change tx and addr relay behaviour, but not change block relay behaviour...",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r548352366,548352366,src/net_processing.cpp
amitiuttarwar,2020-12-24 02:57:16,"I thiiink this could be problematic if the peer sends two `BLOCKRELAY` messages in a row?\n\n- initially `ConnectionType::INBOUND` \n- they send first `BLOCKRELAY` message, we hit this code & update to `ConnectionType::INBOUND_BLOCK_RELAY`\n- they send another `BLOCKRELAY` message, we hit this code again because `IsInboundConn()` would be true \n- `UpdateConnectionType` is invoked, which asse",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r548359957,548359957,src/net_processing.cpp
amitiuttarwar,2020-12-25 01:33:43,why does this protocol version number get bumped by 2? ,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r548774535,548774535,src/version.h
ariard,2020-12-28 00:24:03,"Nice found!\n\nIf the code purpose of the sequence of assert was to validate the `ConnectionType` state transition before to operate it, another approach could be to resort to a switch statement, far less harmful and easier to reason on ?\n\n```\ndiff --git a/src/net.cpp b/src/net.cpp\nindex 8027723b5..086fbf227 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -562,11 +562,17 @@ Network C",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549180568,549180568,src/net_processing.cpp
ariard,2020-12-28 00:40:34,"IIUC, after this commit, outbound block-relay-only peers are excluded from requesting addrs. Was this intended ? Further, the new connection type should already be excluded as `IsInboundConn` is extended in same commit.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549181974,549181974,src/net_processing.cpp
ariard,2020-12-28 01:01:50,"I wonder if the rational shouldn't be different. AFAICT, BLOCKRELAY aims to inform the connected node about the initiator expectations on traffic relayed on this link. So a connected node inverting the logic and announcing its link expectations will break the effect and force the initiator to adapt its peer resource allocation.\n\nI would say the restriction here is motivated only by the outboun",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549183959,549183959,src/net_processing.cpp
ariard,2020-12-28 01:17:27,"This is where I don't understand BIP following excerpt :\n\n> this is because the transaction relay field in the version message is not a permanent setting for the lifetime of the connection. Consequently, a node receiving an inbound connection with transaction relay disabled cannot distinguish between a peer that will never enable transaction relay and one that will.\n\nWhy do you mean exactl",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549185589,549185589,src/net_processing.cpp
dhruv,2020-12-28 18:00:47,"@ariard If I am reading this correctly, outbound-block-relay peers would not get a response to `getaddr` even prior to this commit.\n\nI am not sure I understand how the new connection type should already be excluded as:\n```\n!pfrom.IsInboundConn() => ( !INBOUND && !INBOUND_BLOCK_RELAY )\n( !pfrom.IsInboundConn() || !pfrom.RelayAddrsWithConn() ) => ( !INBOUND || BLOCK_RELAY || INBOUND_BLOCK_",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549434277,549434277,src/net_processing.cpp
dhruv,2020-12-28 18:12:25,"I am confused by what constitutes a new connection type v/s a negotiated feature of a connection. Other negotiated features that do not seem to change the connection type include `WTXIDRELAY`,`SENDADDRV2`, `SENDCMPCT`, etc.\n\nAs a starting point, I'd suggest that connection types imply (1) a different level of trust in the peer (eg. `INBOUND` vs `OUTBOUND`) or (2) connection limits(eg. 2 for `O",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549437514,549437514,src/net.cpp
dhruv,2020-12-28 18:18:35,"Out of curiosity, why must `BLOCKRELAY` be negotiated between `VERSION` and `VERACK`? The only reason I can think of is to avoid allocating (`m_tx_relay`, `m_addr_known`) altogether instead of allocating, then de-allocating. Is that correct?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549439194,549439194,src/net_processing.cpp
dhruv,2020-12-28 18:22:10,"Would some users be using `-addnode` to start with a trusted peer that can then also provide addrs? If so, when we receive `BLOCKRELAY` from a `MANUAL` connection, and if addrman is empty, is it worth alerting the user by logging?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549441869,549441869,src/net_processing.cpp
sdaftuar,2020-12-28 19:23:07,"I wondered whether the better approach would be to add a new bool to indicate whether tx-relay is disabled (like we have for compact blocks, or sendheaders, etc), or to update the connection type like I've done here. \n\nMy hesitation to add a new bool was that it seemed counter to the recent work to refactor `net` to use connection types as an alternative to the bucket-of-bool's approach for de",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549460093,549460093,src/net.cpp
sdaftuar,2020-12-28 19:23:48,How about `disabletx`?,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549460285,549460285,src/net_processing.cpp
sdaftuar,2020-12-28 19:24:31,I thought Erlay might be using one!,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549460466,549460466,src/version.h
ariard,2020-12-29 22:39:40,"You're right that's an OR! Maybe we can rename `RelayAddrsWithConn()` to `IsFullConn` to reduce confusion, like other predicates on connection types. We're stretching slowly from the #19316 original goal of simplifying handling of connection types...",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549876463,549876463,src/net_processing.cpp
jonatack,2020-12-29 22:50:25,@ariard Agreed; this is the motivation for #20729. Feel free to suggest naming improvements to the scripted diff there.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549878735,549878735,src/net_processing.cpp
ajtowns,2020-12-30 04:42:53,"I think we've got a few different ways in which nodes differ:\n\n 1. which random features they support (wtxid relay, compact blocks, addrv2; erlay, pkg relay, p2p encryption in the future) that might make things more efficient (and which we might prefer our connections to support) but don't really change anything\n 2. how much we trust them (manually privileged/selected, we chose them as an ou",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549933501,549933501,src/net.cpp
ajtowns,2020-12-30 04:46:16,"Sure, `disabletx` or `txrelay false` sound about the same to me; though opting-out vs opting-in still maybe seems odd?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r549933987,549933987,src/net_processing.cpp
sdaftuar,2021-01-05 13:53:15,"Well my thinking is that the default on the network is that everything gets relayed, so the natural thing to add is an opt-out.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r551944543,551944543,src/net_processing.cpp
sdaftuar,2021-01-12 13:59:34,"Sending a FILTERCLEAR (at least, to a node with NODE_BLOOM set) will enable transaction relay; see BIP37.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r555788869,555788869,src/net_processing.cpp
jonatack,2021-02-05 22:26:45,"Could update the `RelayAddress` Doxygen documentation.\n```diff\n  * @param[in] connman Connection manager to choose nodes to relay to.\n+ * @param[in] peerman ...\n  */\n```\n",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r571284399,571284399,src/net_processing.cpp
jonatack,2021-02-05 22:28:20,"Some doc suggestions following recent updates on master to the wtxidrelay and addrv2 documentation immediately above\n```diff\n+    // BIPXXX defines feature negotiation of disabletx, which must happen\n+    // between VERSION and VERACK.\n     if (msg_type == NetMsgType::DISABLETX) {\n         if (pfrom.fSuccessfullyConnected) {\n-            // Disconnect peers that send this message after",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r571285093,571285093,src/net_processing.cpp
jonatack,2021-02-05 22:29:30,"```suggestion\n    const PeerRef peer = GetPeerRef(pnode.GetId());\n```",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r571285535,571285535,src/net_processing.cpp
jonatack,2021-02-05 22:30:51,"```suggestion\nstatic constexpr int PROTOCOL_VERSION = 70017;\n```",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r571286112,571286112,src/version.h
jonatack,2021-02-05 22:31:05,"```suggestion\nstatic constexpr int DISABLE_TX_VERSION = 70017;\n```",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r571286206,571286206,src/version.h
sdaftuar,2021-02-11 16:36:11,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r574649216,574649216,src/version.h
sdaftuar,2021-02-11 16:36:18,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r574649313,574649313,src/version.h
sdaftuar,2021-02-11 16:36:28,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r574649434,574649434,src/net_processing.cpp
sdaftuar,2021-02-11 16:37:02,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r574649844,574649844,src/net_processing.cpp
sdaftuar,2021-02-11 16:37:10,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r574649943,574649943,src/net_processing.cpp
MarcoFalke,2021-02-12 09:23:16,"in the first commit:\n\nThe other negotiation message types have a NET-debug log statement preceding this disconnect. Is there any reason to not log to NET-debug as well here?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575086380,575086380,src/net_processing.cpp
MarcoFalke,2021-02-12 10:29:53,"unrelated style nit in the second commit: instead of passing connman and peerman, this could be made a member function of peerman. The following diff on top of this commit compiles for me. Though, this can also be done in a separate pull.\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex e9584ddac1..84ac462099 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575125883,575125883,src/net_processing.cpp
sdaftuar,2021-02-12 14:15:40,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575254816,575254816,src/net_processing.cpp
sdaftuar,2021-02-12 14:17:31,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575256006,575256006,src/net_processing.cpp
jnewbery,2021-02-12 14:40:26,"Is it possible to avoid this extreme coupling between the net and net_processing layers? Here, net_processing is constructing a callback (`sortfunc`) which it hands to net via `ForEachNodeThen()`. In that callback, net calls into a net_processing function (`IsAddRelayPeer()`), which in turn calls into a function in the net layer (`RelayAddrsWithConn()`). This net_processing -> net -> net_processin",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575271596,575271596,src/net_processing.cpp
MarcoFalke,2021-02-12 15:30:46,"Haven't looked at the details, but I'd presume that `RelayAddrsWithConn` will be (can be) removed once the addr filter is moved to net processing and initialized only when needed.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575306552,575306552,src/net_processing.cpp
sdaftuar,2021-02-12 15:55:34,"Yeah I think this will get better once we finish moving things from `net` to `net_processing`.  In this case, I've added a new variable and member function to `net_processing` (which is where I think it should live in the long run) but until the rest of it moves, we're going to have to look in both places for some logic.  (I'm assuming we all agree that the logic around which addresses get relayed",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575323550,575323550,src/net_processing.cpp
jnewbery,2021-02-14 09:35:20,"I don't agree with this line of logic. I think it'd be far better to remove complexity first and then implement this cleanly, rather than add on more complexity and hoping to remove it later. Also note that this change is a pessimization: it locks and releases `m_peer_mutex` for every peer (up to 125 times). My understanding is that the `ForEachNode()` helpers exist in part to avoid this kind of r",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575781212,575781212,src/net_processing.cpp
sdaftuar,2021-02-14 10:39:04,"@jnewbery You've been doing the most work on moving things out of `net` -- can you be more specific about what you want to see in this implementation?  I was trying to follow a guideline of ""don't add new things to `net` if they should end up in `net_processing`"", in the hopes of not making that work any harder.  Are you suggesting that I add this to `net` to make this implementation cleaner, or w",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575788555,575788555,src/net_processing.cpp
jnewbery,2021-02-14 11:32:01,"> Are you suggesting that I add this to net to make this implementation cleaner, or wait for more of your refactoring work to land, or something else?\n\nYes, certainly rebasing this on the https://github.com/jnewbery/bitcoin/tree/2020-06-cs-main-split branch from https://github.com/bitcoin/bitcoin/issues/19398 would remove this tight net-net_processing coupling. We all agree that we want addr r",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575794641,575794641,src/net_processing.cpp
sdaftuar,2021-02-14 11:56:21,"Thanks for being clear about your preference here.  I don't think it's worth gating this work on all those commits landing in master, but if other reviewers prefer to see that work land first, then of course I'll rebase after your commits are merged.\n\nFor now I've gone ahead and simplified this PR by just putting `m_disable_tx` in `CNode`, which makes things no worse than they are today as far",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575797614,575797614,src/net_processing.cpp
MarcoFalke,2021-02-14 11:58:05,"nit: Could mention the BIP number, now that one was assigned?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575797896,575797896,src/protocol.h
sdaftuar,2021-02-16 18:34:00,Done.,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r577048063,577048063,src/protocol.h
ajtowns,2021-02-18 02:44:50,"Moving `RelayAddrsWithConn` to net_processing and making it:\n\n```c++\nstatic inline bool RelayAddrsWithConn(const Node& node, const Peer& peer) {\n    return !node.IsBlockOnlyConn() && !peer.m_disable_tx;\n}\n```\n\nwould preserve the net/net_processing separation better, I think?",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r578088724,578088724,src/net.h
sdaftuar,2021-02-18 14:02:33,"I think that without a bigger refactoring, John's observation that we call into `ForEachNode` but access data in `net_processing` would still remain.  Given that we have a major refactoring effort underway (and I think #21186 will address this directly, from a quick glance), I'd rather leave efforts to refactor out of this PR -- if the refactors get merged first, I'll update the approach here.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r578440578,578440578,src/net.h
jnewbery,2021-02-18 15:08:57,Suhas is right. I think until we move addr data into net_processing there are only bad and less bad approaches here. Leaving this in net to avoid having to make net_processing function calls in ForEachNode() seems like the less bad option to me (see https://github.com/bitcoin/bitcoin/pull/20726#discussion_r575271596).,https://github.com/bitcoin/bitcoin/pull/20726#discussion_r578495634,578495634,src/net.h
ariard,2021-02-23 13:45:18,"Should we also severe connections for block-relay-only peers sending us inv(tx) to be consistent with transaction message reception ?\n\nCurrently the BIP mentions that the following messages shouldn't be relayed between block-relay-only peers : {inv(tx), getdata(tx), getdata(merkleblock), filter*, mempool, tx}. This PR implements disconnections for filter*, mempool, tx but not for the remaining",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r581045679,581045679,src/net_processing.cpp
ariard,2021-02-23 13:58:50,"Should this check also includes `IsAddrFetchConn()` ?\n\nA peer implementing the recommendation around disabling addr-relay won't provide us any addrs, devoiding such connection type on our side from its purpose.\n\nNote, I don't think it's an issue if you have two peers of this software talking as `m_disable_tx` is only set by the DISABLETX receiver. Our node won't send a DISABLETX for such n",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r581055978,581055978,src/net_processing.cpp
ariard,2021-02-23 14:38:53,"I don't think this interaction with BIP37 is described in the new BIP. The following case ""If a node sets the transaction relay field in the version message to a peer to true it MUST NOT send a disabletx message"" isn't covered ?\n\nOr do you consider our software to be more severe than the BIP and another implementation can decide to override BIP 37 tx-relay in version message ? It's maybe what ",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r581090222,581090222,src/net_processing.cpp
ariard,2021-02-23 14:44:30,"Should the BIP recommendation around addr-relay updated to scope `GETADDR` ? Behavior should already be compliant on sender-side, we don't send getaddr to block-relay peers.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r581095051,581095051,src/net.h
sdaftuar,2021-03-03 20:32:38,"I think this is unnecessary for now, for two reasons:\n- it will be unusual to get a disabletx from an outbound peer. So given that, it's not clear what their behavior is if they send us a disabletx, and maybe they will respond to a getaddr anyway (which is permitted by the BIP).\n\n- I think the better behavior is for us to disconnect an addr fetch peer after some timeout if no addr message is",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r586758008,586758008,src/net_processing.cpp
sdaftuar,2021-03-03 20:36:52,"Ah, I didn't realize this was confusing, but yes I can make this clearer in the BIP.  The language currently says \n\n> If a node sets the transaction relay field in the version message to a peer to false, then the disabletx message MAY also be sent in response to a version message from that peer if the peer's protocol version is >= 70017. If sent, the disabletx message MUST be sent prior to sen",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r586760583,586760583,src/net_processing.cpp
sdaftuar,2021-03-09 18:40:28,"I don't know that it's worth disconnecting for getdata(merkleblock); it already seems to be the case that by default we permit any peer to send us a getdata(merkleblock) and we ignore it.  As getdata(block) is always permitted, it seems like this is harmless to allow and ignore.\n\nI'll update the PR to disconnect for inv(tx) and getdata(tx).",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r590624904,590624904,src/net_processing.cpp
sdaftuar,2021-03-09 18:44:54,"If the BIP were centered around block-relay-only behavior (as I had originally proposed), then I would think it would make sense to fully specify addr-related behavior, including getaddr.\n\nHowever as the BIP is scoped more narrowly to just define disabletx, I think it's better to leave out getaddr.  If a peer sends us a disabletx and a getaddr, I think we ought to just respond to it and assume",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r590627874,590627874,src/net.h
sdaftuar,2021-03-09 18:46:12,"My goal is for software to know at the time of connection what kind of peer it's got, so that we can do inbound peer accounting (and reserve spots for lightweight peers) more easily.  \n\nWe wait for VERACK before we start communicating with a peer, so we should negotiate this behavior before that VERACK is sent.",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r590628816,590628816,src/net_processing.cpp
ariard,2021-03-15 14:45:42,"Receiver-side, we can enforce a _consistency_ requirement between `fRelay` and DISABLETX to detect buggy upgraded peers signaling differing relay type preferences.\n\nSender-side, if we're connected to a non-upgraded peer (`nVersion` < 70017), we should send a `fRelay`, otherwise they can't discover our relay preferences. If we're connected to an upgraded peer, we can ignore setting `fRelay` in ",https://github.com/bitcoin/bitcoin/pull/20726#discussion_r594399480,594399480,src/net_processing.cpp
