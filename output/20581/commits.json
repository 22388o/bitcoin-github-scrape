[
  {
    "sha": "12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmRjZGFhYTU0YjlhNGM1NTM4NGU2YjA0Mzc5ZGE4MTI1ZmE2ZTdk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T00:14:17Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-06T00:22:40Z"
      },
      "message": "Don't make \"in\" parameters look like \"out\"/\"in-out\" parameters: pass by ref to const instead of ref to non-const",
      "tree": {
        "sha": "bf2c64baa3c7642c7b5a716ba788936b22e6f447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf2c64baa3c7642c7b5a716ba788936b22e6f447"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f35e4d906fee907f28ac5d8f32d4948e6b7b14c3"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9756a7dfb3c06a853109de6e3792ceed1a6da9c9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -914,7 +914,7 @@ std::set<BlockFilterType> g_enabled_filter_types;\n     std::terminate();\n };\n \n-bool AppInitBasicSetup(ArgsManager& args)\n+bool AppInitBasicSetup(const ArgsManager& args)\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER"
      },
      {
        "sha": "c04d966d0685cf5e06a46d6b92f9ac0f0013d893",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -33,7 +33,7 @@ void InitParameterInteraction(ArgsManager& args);\n  *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n-bool AppInitBasicSetup(ArgsManager& args);\n+bool AppInitBasicSetup(const ArgsManager& args);\n /**\n  * Initialization: parameter interaction.\n  * @note This can be done before daemonization. Do not call Shutdown() if this function fails."
      },
      {
        "sha": "02e50c4dbe00f91329a40a501e19c75983369516",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -112,7 +112,7 @@ bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, CoinStatsHashType hash_t\n }\n \n // The legacy hash serializes the hashBlock\n-static void PrepareHash(CHashWriter& ss, CCoinsStats& stats)\n+static void PrepareHash(CHashWriter& ss, const CCoinsStats& stats)\n {\n     ss << stats.hashBlock;\n }"
      },
      {
        "sha": "122a92f0845432dc9b47964e5fd59fc54c29d70d",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -286,7 +286,7 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n     SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n }\n \n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result)\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, std::string>& input_errors, UniValue& result)\n {\n     // Make errors UniValue\n     UniValue vErrors(UniValue::VARR);"
      },
      {
        "sha": "ce7d5834fade5080e514bbd8889997990c7a0411",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -25,7 +25,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, const std::map<int, std::string>& input_errors, UniValue& result);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "582341bd3eff8a099c20e1c64e96f425b0b907d0",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -66,7 +66,7 @@ class CSignatureCache\n         return setValid.contains(entry, erase);\n     }\n \n-    void Set(uint256& entry)\n+    void Set(const uint256& entry)\n     {\n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n         setValid.insert(entry);"
      },
      {
        "sha": "37ff8a9afe9dce29a812958ec807482526709f91",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -71,7 +71,7 @@ class CAddrManTest : public CAddrMan\n     }\n \n     // Simulates connection failure so that we can test eviction of offline nodes\n-    void SimConnFail(CService& addr)\n+    void SimConnFail(const CService& addr)\n     {\n          LOCK(cs);\n          int64_t nLastSuccess = 1;"
      },
      {
        "sha": "cec4a8df6145848d8c6d75da6312346fee747093",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -75,7 +75,7 @@ class CAddrManCorrupted : public CAddrManSerializationMock\n     }\n };\n \n-static CDataStream AddrmanToStream(CAddrManSerializationMock& _addrman)\n+static CDataStream AddrmanToStream(const CAddrManSerializationMock& _addrman)\n {\n     CDataStream ssPeersIn(SER_DISK, CLIENT_VERSION);\n     ssPeersIn << Params().MessageStart();"
      },
      {
        "sha": "a9ef0f73cce106e3ddaa35ac97a058e5402a6bbf",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -1860,7 +1860,7 @@ BOOST_AUTO_TEST_CASE(test_Capitalize)\n     BOOST_CHECK_EQUAL(Capitalize(\"\\x00\\xfe\\xff\"), \"\\x00\\xfe\\xff\");\n }\n \n-static std::string SpanToStr(Span<const char>& span)\n+static std::string SpanToStr(const Span<const char>& span)\n {\n     return std::string(span.begin(), span.end());\n }"
      },
      {
        "sha": "3aec96bc5addf8a8adec49ea495810ebac6876aa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -505,13 +505,13 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n@@ -921,7 +921,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n \n@@ -948,7 +948,7 @@ bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, Workspace& ws, Precompute\n     return true;\n }\n \n-bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;"
      },
      {
        "sha": "7a8bc0b7f3ec1eb0ce904e1b6551bb21b0e1b51f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -111,7 +111,7 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     return feebumper::Result::OK;\n }\n \n-static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CAmount old_fee, CCoinControl& coin_control)\n+static CFeeRate EstimateFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CAmount old_fee, const CCoinControl& coin_control)\n {\n     // Get the fee rate of the original transaction. This is calculated from\n     // the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the"
      },
      {
        "sha": "e8dbc20e566fe9b76ff39b53c6a4a4cf1ffe6045",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dcdaaa54b9a4c55384e6b04379da8125fa6e7d/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=12dcdaaa54b9a4c55384e6b04379da8125fa6e7d",
        "patch": "@@ -77,7 +77,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(CWallet& wallet, const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(const CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n     result.block_height = wtx.m_confirm.block_height > 0 ? wtx.m_confirm.block_height : std::numeric_limits<int>::max();\n@@ -94,7 +94,7 @@ WalletTxStatus MakeWalletTxStatus(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(CWallet& wallet,\n+WalletTxOut MakeWalletTxOut(const CWallet& wallet,\n     const CWalletTx& wtx,\n     int n,\n     int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)"
      }
    ]
  }
]