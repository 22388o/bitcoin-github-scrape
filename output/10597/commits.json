[
  {
    "sha": "30726c3bcf567c58c17205464563631c937fdd3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDcyNmMzYmNmNTY3YzU4YzE3MjA1NDY0NTYzNjMxYzkzN2ZkZDNm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-15T09:21:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-15T09:48:55Z"
      },
      "message": "scripted-diff: Make use of the improved handling of two consecutive right angle brackets in C++11\n\nImprove code readability by removing the legacy handling of two consecutive\nright angle brackets that was required prior to C++11. Non-functional change.\n\nAfter this commit:\n\n```\n$ git grep \"> >\" -- \"*.cpp\" \"*.h\" | grep -v '/leveldb/' | wc -l\n0\n```\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/> >/>>/g' src/*.cpp src/*.h src/compat/*.cpp src/policy/*.cpp src/qt/*.cpp src/qt/*.h src/qt/test/*.cpp src/rpc/*.cpp src/script/*.cpp src/script/*.h src/support/allocators/*.h src/test/*.cpp src/wallet/*.cpp src/wallet/*.h\nsed -i 's/> >/>>/g' src/keystore.h\nsed -i 's/std::vector< std::vector/std::vector<std::vector/g' src/qt/rpcconsole.cpp\nsed -i 's/std::set< std::set/std::set<std::set/g' src/wallet/wallet.cpp src/wallet/wallet.h\nsed -i 's/>\\* >/>*>/g' src/wallet/wallet.cpp\nsed -i 's/std::map< CTxDestination/std::map<CTxDestination/g' src/wallet/wallet.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "f22d18062cdc663639417244417e4a41b5de01cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f22d18062cdc663639417244417e4a41b5de01cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30726c3bcf567c58c17205464563631c937fdd3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30726c3bcf567c58c17205464563631c937fdd3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30726c3bcf567c58c17205464563631c937fdd3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30726c3bcf567c58c17205464563631c937fdd3f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228c319a944b0ba7c835b1909ee1c2056c652eb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228c319a944b0ba7c835b1909ee1c2056c652eb1"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 103,
      "deletions": 103
    },
    "files": [
      {
        "sha": "862881fbaf1be5849b8806dbca1a3ec71f4060be",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -75,7 +75,7 @@ class CBase58Data\n     std::vector<unsigned char> vchVersion;\n \n     //! the actually encoded data\n-    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n+    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char>> vector_uchar;\n     vector_uchar vchData;\n \n     CBase58Data();"
      },
      {
        "sha": "14b19eb25bc405eb31723e2552bc0e836290f975",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -106,7 +106,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     std::vector<bool> have_txn(txn_available.size());\n     {\n     LOCK(pool->cs);\n-    const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n+    const std::vector<std::pair<uint256, CTxMemPool::txiter>>& vTxHashes = pool->vTxHashes;\n     for (size_t i = 0; i < vTxHashes.size(); i++) {\n         uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n         std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);"
      },
      {
        "sha": "c9c2d4112ff6ec9877f2ad7bff547f1f94a0537a",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -166,7 +166,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     txnouttype type;\n-                    std::vector<std::vector<unsigned char> > vSolutions;\n+                    std::vector<std::vector<unsigned char>> vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n                             (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));"
      },
      {
        "sha": "bdad6d2ccd3c5566a58b2de9ab8e769212374327",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -13,7 +13,7 @@ namespace\n //   matches the original.\n bool sanity_test_widen(char testchar)\n {\n-    const std::ctype<char>& test(std::use_facet<std::ctype<char> >(std::locale()));\n+    const std::ctype<char>& test(std::use_facet<std::ctype<char>>(std::locale()));\n     return test.narrow(test.widen(testchar), 'b') == testchar;\n }\n "
      },
      {
        "sha": "a54a52fb64fcf52a41df5c51820ef71cc3b96b9b",
        "filename": "src/core_memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -19,7 +19,7 @@ static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n \n static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n     size_t mem = RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout) + memusage::DynamicUsage(in.scriptWitness.stack);\n-    for (std::vector<std::vector<unsigned char> >::const_iterator it = in.scriptWitness.stack.begin(); it != in.scriptWitness.stack.end(); it++) {\n+    for (std::vector<std::vector<unsigned char>>::const_iterator it = in.scriptWitness.stack.begin(); it != in.scriptWitness.stack.end(); it++) {\n          mem += memusage::DynamicUsage(*it);\n     }\n     return mem;"
      },
      {
        "sha": "7ee3131b87b05a191cabe59b26dcd8dd930fe833",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -311,7 +311,7 @@ static bool ThreadHTTP(struct event_base* base, struct evhttp* http)\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n     int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n-    std::vector<std::pair<std::string, uint16_t> > endpoints;\n+    std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n     if (!IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n@@ -333,7 +333,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     }\n \n     // Bind addresses\n-    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+    for (std::vector<std::pair<std::string, uint16_t>>::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? NULL : i->first.c_str(), i->second);\n         if (bind_handle) {"
      },
      {
        "sha": "3ef6fb9b880ecf9e8901f5d070fc29e982e7dab5",
        "filename": "src/indirectmap.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/indirectmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/indirectmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/indirectmap.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -10,7 +10,7 @@ struct DereferencingComparator { bool operator()(const T a, const T b) const { r\n \n /* Map whose keys are pointers, but are compared by their dereferenced values.\n  *\n- * Differs from a plain std::map<const K*, T, DereferencingComparator<K*> > in\n+ * Differs from a plain std::map<const K*, T, DereferencingComparator<K*>> in\n  * that methods that take a key for comparison take a K rather than taking a K*\n  * (taking a K* would be confusing, since it's the value rather than the address\n  * of the object for comparison that matters due to the dereferencing comparator).\n@@ -21,7 +21,7 @@ struct DereferencingComparator { bool operator()(const T a, const T b) const { r\n template <class K, class T>\n class indirectmap {\n private:\n-    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;\n+    typedef std::map<const K*, T, DereferencingComparator<const K*>> base;\n     base m;\n public:\n     typedef typename base::iterator iterator;"
      },
      {
        "sha": "ec4c3eda7482e7b3053cccbdd92674a82ae8df5e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -29,7 +29,7 @@\n  * secure_allocator is defined in allocators.h\n  * CPrivKey is a serialized private key, with all parameters included (279 bytes)\n  */\n-typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n+typedef std::vector<unsigned char, secure_allocator<unsigned char>> CPrivKey;\n \n /** An encapsulated private key. */\n class CKey\n@@ -43,7 +43,7 @@ class CKey\n     bool fCompressed;\n \n     //! The actual byte data\n-    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n+    std::vector<unsigned char, secure_allocator<unsigned char>> keydata;\n \n     //! Check whether the 32-byte array pointed to by vch is valid keydata.\n     bool static Check(const unsigned char* vch);"
      },
      {
        "sha": "117b0c86d79443680f3855d01bf83b314ce73ad3",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -107,7 +107,7 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool HaveWatchOnly() const;\n };\n \n-typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n-typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n+typedef std::vector<unsigned char, secure_allocator<unsigned char>> CKeyingMaterial;\n+typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> CryptedKeyMap;\n \n #endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "0a02ac73c8a105b36671fd97fa0ddf7d7b47c921",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -38,7 +38,7 @@ template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0;\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n- *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n+ *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int>>)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n@@ -108,27 +108,27 @@ static inline size_t IncrementalDynamicUsage(const std::set<X, Y>& s)\n template<typename X, typename Y, typename Z>\n static inline size_t DynamicUsage(const std::map<X, Y, Z>& m)\n {\n-    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y>>)) * m.size();\n }\n \n template<typename X, typename Y, typename Z>\n static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n {\n-    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y>>));\n }\n \n // indirectmap has underlying map with pointer as key\n \n template<typename X, typename Y>\n static inline size_t DynamicUsage(const indirectmap<X, Y>& m)\n {\n-    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >)) * m.size();\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y>>)) * m.size();\n }\n \n template<typename X, typename Y>\n static inline size_t IncrementalDynamicUsage(const indirectmap<X, Y>& m)\n {\n-    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y>>));\n }\n \n template<typename X>\n@@ -162,7 +162,7 @@ static inline size_t DynamicUsage(const std::unordered_set<X, Y>& s)\n template<typename X, typename Y, typename Z>\n static inline size_t DynamicUsage(const std::unordered_map<X, Y, Z>& m)\n {\n-    return MallocUsage(sizeof(unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n+    return MallocUsage(sizeof(unordered_node<std::pair<const X, Y>>)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n }"
      },
      {
        "sha": "904f420ef948ea9e5199aff96e1555881cb50646",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -131,7 +131,7 @@ class CMerkleBlock\n \n public:\n     /** Public only for unit testing and relay testing (not relayed) */\n-    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;\n+    std::vector<std::pair<unsigned int, uint256>> vMatchedTxn;\n \n     /**\n      * Create from a CBlock, filtering transactions according to filter"
      },
      {
        "sha": "e1515a2cca1252d60637bdd253bd005bbccaea83",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -1014,7 +1014,7 @@ bool CConnman::AttemptToEvictConnection()\n     uint64_t naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapNetGroupNodes;\n+    std::map<uint64_t, std::vector<NodeEvictionCandidate>> mapNetGroupNodes;\n     for (const NodeEvictionCandidate &node : vEvictionCandidates) {\n         mapNetGroupNodes[node.nKeyedNetGroup].push_back(node);\n         int64_t grouptime = mapNetGroupNodes[node.nKeyedNetGroup][0].nTimeConnected;\n@@ -1739,7 +1739,7 @@ void CConnman::ThreadOpenConnections()\n         // Do this here so we don't have to critsect vNodes inside mapAddresses critsect.\n         int nOutbound = 0;\n         int nOutboundRelevant = 0;\n-        std::set<std::vector<unsigned char> > setConnected;\n+        std::set<std::vector<unsigned char>> setConnected;\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n@@ -2313,22 +2313,22 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     }\n \n     // Send and receive from sockets, accept connections\n-    threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n+    threadSocketHandler = std::thread(&TraceThread<std::function<void()>>, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n \n     if (!GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n+        threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()>>, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n \n     // Initiate outbound connections from -addnode\n-    threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n+    threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()>>, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n     if (!gArgs.IsArgSet(\"-connect\") || gArgs.GetArgs(\"-connect\").size() != 1 || gArgs.GetArgs(\"-connect\")[0] != \"0\")\n-        threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n+        threadOpenConnections = std::thread(&TraceThread<std::function<void()>>, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages\n-    threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n+    threadMessageHandler = std::thread(&TraceThread<std::function<void()>>, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n     // Dump network addresses\n     scheduler.scheduleEvery(std::bind(&CConnman::DumpData, this), DUMP_ADDRESSES_INTERVAL * 1000);"
      },
      {
        "sha": "9aa78d1c5a1e0f33b513975bc8455914de60873a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -104,7 +104,7 @@ namespace {\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>> mapBlocksInFlight;\n \n     /** Stack of nodes which we have set to announce using compact blocks */\n     std::list<NodeId> lNodesAnnouncingHeaderAndIDs;\n@@ -311,7 +311,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>>::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n@@ -340,7 +340,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const CBlockIndex*\n     assert(state != NULL);\n \n     // Short-circuit most stuff in case its from the same node\n-    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>>::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n         *pit = &itInFlight->second.second;\n         return false;\n@@ -2022,7 +2022,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n-        std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n+        std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>>::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n@@ -2175,7 +2175,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             LOCK(cs_main);\n \n-            std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator>>::iterator it = mapBlocksInFlight.find(resp.blockhash);\n             if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                     it->second.first != pfrom->GetId()) {\n                 LogPrint(BCLog::NET, \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->GetId());"
      },
      {
        "sha": "6f2b28a0a5fafeeb27490644aca4b3c13e1fd473",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -59,7 +59,7 @@ class TxConfirmStats\n     // Mempool counts of outstanding transactions\n     // For each bucket X, track the number of transactions in the mempool\n     // that are unconfirmed for each possible confirmation value Y\n-    std::vector<std::vector<int> > unconfTxs;  //unconfTxs[Y][X]\n+    std::vector<std::vector<int>> unconfTxs;  //unconfTxs[Y][X]\n     // transactions still unconfirmed after GetMaxConfirms for each bucket\n     std::vector<int> oldUnconfTxs;\n "
      },
      {
        "sha": "e0b39147dc92c2d987c14612b22a40af73109625",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -71,7 +71,7 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled)\n {\n-    std::vector<std::vector<unsigned char> > vSolutions;\n+    std::vector<std::vector<unsigned char>> vSolutions;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n@@ -167,7 +167,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     {\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n-        std::vector<std::vector<unsigned char> > vSolutions;\n+        std::vector<std::vector<unsigned char>> vSolutions;\n         txnouttype whichType;\n         // get the scriptPubKey corresponding to this input:\n         const CScript& prevScript = prev.scriptPubKey;\n@@ -176,7 +176,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n-            std::vector<std::vector<unsigned char> > stack;\n+            std::vector<std::vector<unsigned char>> stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n                 return false;\n@@ -210,7 +210,7 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         CScript prevScript = prev.scriptPubKey;\n \n         if (prevScript.IsPayToScriptHash()) {\n-            std::vector <std::vector<unsigned char> > stack;\n+            std::vector <std::vector<unsigned char>> stack;\n             // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n             // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n             // If the check fails at this stage, we know that this txid must be a bad one."
      },
      {
        "sha": "46ac15f183ba552f962b2d32c499461d0225dd52",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -623,7 +623,7 @@ void CoinControlDialog::updateView()\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n-    std::map<QString, std::vector<COutput> > mapCoins;\n+    std::map<QString, std::vector<COutput>> mapCoins;\n     model->listCoins(mapCoins);\n \n     for (const std::pair<QString, std::vector<COutput>>& coins : mapCoins) {"
      },
      {
        "sha": "cb9a30c2b96797437ba9342fe357ae57b14a4e29",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -158,12 +158,12 @@ bool parseBitcoinURI(const QUrl &uri, SendCoinsRecipient *out)\n     rv.amount = 0;\n \n #if QT_VERSION < 0x050000\n-    QList<QPair<QString, QString> > items = uri.queryItems();\n+    QList<QPair<QString, QString>> items = uri.queryItems();\n #else\n     QUrlQuery uriQuery(uri);\n-    QList<QPair<QString, QString> > items = uriQuery.queryItems();\n+    QList<QPair<QString, QString>> items = uriQuery.queryItems();\n #endif\n-    for (QList<QPair<QString, QString> >::iterator i = items.begin(); i != items.end(); i++)\n+    for (QList<QPair<QString, QString>>::iterator i = items.begin(); i != items.end(); i++)\n     {\n         bool fShouldReturnFalse = false;\n         if (i->first.startsWith(\"req-\"))"
      },
      {
        "sha": "997c62f21399f23bde725124d45befb8711d480a",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -42,7 +42,7 @@ public Q_SLOTS:\n     Ui::ModalOverlay *ui;\n     int bestHeaderHeight; //best known height (based on the headers)\n     QDateTime bestHeaderDate;\n-    QVector<QPair<qint64, double> > blockProcessTime;\n+    QVector<QPair<qint64, double>> blockProcessTime;\n     bool layerIsVisible;\n     bool userClosed;\n };"
      },
      {
        "sha": "b897c6ed3d13e0457526fdfe16e31ac83e7b8642",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -203,9 +203,9 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n+QList<std::pair<CScript,CAmount>> PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,CAmount> > result;\n+    QList<std::pair<CScript,CAmount>> result;\n     for (int i = 0; i < details.outputs_size(); i++)\n     {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();"
      },
      {
        "sha": "853a217512fee3ba0a3a56fcd33d3f2256a675f1",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -39,7 +39,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,CAmount> > getPayTo() const;\n+    QList<std::pair<CScript,CAmount>> getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "b87607812ca52dbf35ef17aa7a91cbc0d33e389d",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -552,7 +552,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n     request.getMerchant(certStore.get(), recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n+    QList<std::pair<CScript, CAmount>> sendingTos = request.getPayTo();\n     QStringList addresses;\n \n     for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {"
      },
      {
        "sha": "ac3c106a7c04e2570c82022cef8eda99b5729b87",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -146,7 +146,7 @@ class QtRPCTimerInterface: public RPCTimerInterface\n \n bool RPCConsole::RPCParseCommandLine(std::string &strResult, const std::string &strCommand, const bool fExecute, std::string * const pstrFilteredOut)\n {\n-    std::vector< std::vector<std::string> > stack;\n+    std::vector<std::vector<std::string>> stack;\n     stack.push_back(std::vector<std::string>());\n \n     enum CmdParseState"
      },
      {
        "sha": "7d4df3602cdb38819a9b7b8cb9f7fff5a64623dc",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -195,7 +195,7 @@ void PaymentServerTests::paymentServerTests()\n     // Ensure the request is initialized\n     QVERIFY(r.paymentRequest.IsInitialized());\n     // Extract address and amount from the request\n-    QList<std::pair<CScript, CAmount> > sendingTos = r.paymentRequest.getPayTo();\n+    QList<std::pair<CScript, CAmount>> sendingTos = r.paymentRequest.getPayTo();\n     for (const std::pair<CScript, CAmount>& sendingTo : sendingTos) {\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest))"
      },
      {
        "sha": "4b012ce2718f15b3075be52f9cc79ba6b7de4282",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -591,7 +591,7 @@ bool WalletModel::isSpent(const COutPoint& outpoint) const\n }\n \n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n-void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n+void WalletModel::listCoins(std::map<QString, std::vector<COutput>>& mapCoins) const\n {\n     for (auto& group : wallet->ListCoins()) {\n         auto& resultGroup = mapCoins[QString::fromStdString(CBitcoinAddress(group.first).ToString())];"
      },
      {
        "sha": "e051215e4a0df2a912cc00d753d88db4e3bb121b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -194,7 +194,7 @@ class WalletModel : public QObject\n     bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n-    void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;\n+    void listCoins(std::map<QString, std::vector<COutput>>& mapCoins) const;\n \n     bool isLockedCoin(uint256 hash, unsigned int n) const;\n     void lockCoin(COutPoint& output);"
      },
      {
        "sha": "b060c6786e2a44681c723b41c45f0d33f8168cc0",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -33,7 +33,7 @@ static CCriticalSection cs_rpcWarmup;\n /* Timer-creating functions */\n static RPCTimerInterface* timerInterface = NULL;\n /* Map of name to timer. */\n-static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+static std::map<std::string, std::unique_ptr<RPCTimerBase>> deadlineTimers;\n \n static struct CRPCSignals\n {\n@@ -174,7 +174,7 @@ std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest&\n     std::string strRet;\n     std::string category;\n     std::set<rpcfn_type> setDone;\n-    std::vector<std::pair<std::string, const CRPCCommand*> > vCommands;\n+    std::vector<std::pair<std::string, const CRPCCommand*>> vCommands;\n \n     for (std::map<std::string, const CRPCCommand*>::const_iterator mi = mapCommands.begin(); mi != mapCommands.end(); ++mi)\n         vCommands.push_back(make_pair(mi->second->category + mi->first, mi->second));"
      },
      {
        "sha": "c748b3214ef7d0db3967dd563190bee99ea6fcf7",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -41,7 +41,7 @@ void CScheduler::serviceQueue()\n     while (!shouldStop()) {\n         try {\n             if (!shouldStop() && taskQueue.empty()) {\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<boost::unique_lock<boost::mutex>> rlock(lock);\n                 // Use this chance to get a tiny bit more entropy\n                 RandAddSeedSleep();\n             }\n@@ -79,7 +79,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<boost::unique_lock<boost::mutex>> rlock(lock);\n                 f();\n             }\n         } catch (...) {"
      },
      {
        "sha": "98f49fd31dee6423b25bb894154cf07815e56871",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -243,7 +243,7 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     return true;\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n+bool EvalScript(std::vector<std::vector<unsigned char>>& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);\n@@ -1353,7 +1353,7 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n \n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n-    std::vector<std::vector<unsigned char> > stack;\n+    std::vector<std::vector<unsigned char>> stack;\n     CScript scriptPubKey;\n \n     if (witversion == 0) {\n@@ -1363,7 +1363,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n             scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n-            stack = std::vector<std::vector<unsigned char> >(witness.stack.begin(), witness.stack.end() - 1);\n+            stack = std::vector<std::vector<unsigned char>>(witness.stack.begin(), witness.stack.end() - 1);\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), &program[0], 32)) {\n@@ -1418,7 +1418,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         return set_error(serror, SCRIPT_ERR_SIG_PUSHONLY);\n     }\n \n-    std::vector<std::vector<unsigned char> > stack, stackCopy;\n+    std::vector<std::vector<unsigned char>> stack, stackCopy;\n     if (!EvalScript(stack, scriptSig, flags, checker, SIGVERSION_BASE, serror))\n         // serror is set\n         return false;"
      },
      {
        "sha": "2d9c0436096c6987e114ab48820894d5e504d308",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -174,7 +174,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn), txTo(*txToIn) {}\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = NULL);\n+bool EvalScript(std::vector<std::vector<unsigned char>>& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = NULL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = NULL);\n \n size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);"
      },
      {
        "sha": "b39e6185e4751ea5482cd53570d41bac164a78fd",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -658,7 +658,7 @@ struct CScriptWitness\n {\n     // Note that this encodes the data elements being pushed, rather than\n     // encoding them as a CScript that pushes them.\n-    std::vector<std::vector<unsigned char> > stack;\n+    std::vector<std::vector<unsigned char>> stack;\n \n     // Some compilers complain without a default constructor\n     CScriptWitness() { }"
      },
      {
        "sha": "91a721d66b47fee8e4dd828070b6bf2bccc0121b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -337,7 +337,7 @@ static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n             CScript pubKey2(spk.begin(), spk.end());\n \n             txnouttype txType2;\n-            std::vector<std::vector<unsigned char> > vSolutions2;\n+            std::vector<std::vector<unsigned char>> vSolutions2;\n             Solver(pubKey2, txType2, vSolutions2);\n             sigs1.script.pop_back();\n             sigs2.script.pop_back();\n@@ -380,7 +380,7 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n                           const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n {\n     txnouttype txType;\n-    std::vector<std::vector<unsigned char> > vSolutions;\n+    std::vector<std::vector<unsigned char>> vSolutions;\n     Solver(scriptPubKey, txType, vSolutions);\n \n     return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), SIGVERSION_BASE).Output();"
      },
      {
        "sha": "d41224a68d5343bb1146b8d9b56cf8e1eeb522ca",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -38,7 +38,7 @@ const char* GetTxnOutputType(txnouttype t)\n /**\n  * Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n  */\n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet)\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char>>& vSolutionsRet)\n {\n     // Templates\n     static std::multimap<txnouttype, CScript> mTemplates;\n@@ -304,7 +304,7 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n     CScript ret;\n \n     txnouttype typ;\n-    std::vector<std::vector<unsigned char> > vSolutions;\n+    std::vector<std::vector<unsigned char>> vSolutions;\n     if (Solver(redeemscript, typ, vSolutions)) {\n         if (typ == TX_PUBKEY) {\n             unsigned char h160[20];"
      },
      {
        "sha": "c696c7fdaef3b2736a2b9413adb7f24d65f6a07a",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -72,7 +72,7 @@ typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n \n const char* GetTxnOutputType(txnouttype t);\n \n-bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char>>& vSolutionsRet);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "6bec919d4479eaf542fa7115a5c23cf8cad799e4",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -53,6 +53,6 @@ struct secure_allocator : public std::allocator<T> {\n };\n \n // This is exactly like std::string, but with a custom allocator.\n-typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char>> SecureString;\n \n #endif // BITCOIN_SUPPORT_ALLOCATORS_SECURE_H"
      },
      {
        "sha": "8905a954c055f72b46bccea56c95dfa06342255a",
        "filename": "src/support/allocators/zeroafterfree.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/support/allocators/zeroafterfree.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/support/allocators/zeroafterfree.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/zeroafterfree.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -43,6 +43,6 @@ struct zero_after_free_allocator : public std::allocator<T> {\n };\n \n // Byte-vector that clears its contents before deletion.\n-typedef std::vector<char, zero_after_free_allocator<char> > CSerializeData;\n+typedef std::vector<char, zero_after_free_allocator<char>> CSerializeData;\n \n #endif // BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H"
      },
      {
        "sha": "f37a408b67ab5dce36a3c5f2463eb8748fbae26a",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -53,9 +53,9 @@ struct CLockLocation {\n     int sourceLine;\n };\n \n-typedef std::vector<std::pair<void*, CLockLocation> > LockStack;\n+typedef std::vector<std::pair<void*, CLockLocation>> LockStack;\n typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n-typedef std::set<std::pair<void*, void*> > InvLockOrders;\n+typedef std::set<std::pair<void*, void*>> InvLockOrders;\n \n struct LockData {\n     // Very ugly hack: as the global constructs and destructors run single"
      },
      {
        "sha": "05bdab2768abb3e8467a26483eaa3e953a0b1ce0",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -16,7 +16,7 @@ BOOST_AUTO_TEST_CASE(reverselock_basics)\n \n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<boost::unique_lock<boost::mutex>> rlock(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n     BOOST_CHECK(lock.owns_lock());\n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n \n     bool failed = false;\n     try {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<boost::unique_lock<boost::mutex>> rlock(lock);\n     } catch(...) {\n         failed = true;\n     }\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n     lock.lock();\n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<boost::unique_lock<boost::mutex>> rlock(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n "
      },
      {
        "sha": "2328ab65ad6cfe97d9ccf6f6914a96a571ed8cbe",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -998,21 +998,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     ScriptError err;\n-    std::vector<std::vector<unsigned char> > directStack;\n+    std::vector<std::vector<unsigned char>> directStack;\n     BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    std::vector<std::vector<unsigned char> > pushdata1Stack;\n+    std::vector<std::vector<unsigned char>> pushdata1Stack;\n     BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    std::vector<std::vector<unsigned char> > pushdata2Stack;\n+    std::vector<std::vector<unsigned char>> pushdata2Stack;\n     BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n-    std::vector<std::vector<unsigned char> > pushdata4Stack;\n+    std::vector<std::vector<unsigned char>> pushdata4Stack;\n     BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SIGVERSION_BASE, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));"
      },
      {
        "sha": "ed11428fe0b1c31eb6cde2d788277137ee7d105e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -104,7 +104,7 @@ class TestArgsManager : public ArgsManager\n     {\n         return mapArgs;\n     };\n-    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs()\n+    const std::map<std::string, std::vector<std::string>>& GetMapMultiArgs()\n     {\n         return mapMultiArgs;\n     };"
      },
      {
        "sha": "7a798918160ce933fa1f6253a0d65bb6ce452e89",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -175,9 +175,9 @@ void CCoinsViewDBCursor::Next()\n     }\n }\n \n-bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n+bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n-    for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n+    for (std::vector<std::pair<int, const CBlockFileInfo*>>::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n@@ -191,9 +191,9 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n     return Read(std::make_pair(DB_TXINDEX, txid), pos);\n }\n \n-bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n+bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>>&vect) {\n     CDBBatch batch(*this);\n-    for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n+    for (std::vector<std::pair<uint256,CDiskTxPos>>::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(std::make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }"
      },
      {
        "sha": "3410cedb79e530d2742795e638dce7754ec6e0df",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -113,13 +113,13 @@ class CBlockTreeDB : public CDBWrapper\n     CBlockTreeDB(const CBlockTreeDB&);\n     void operator=(const CBlockTreeDB&);\n public:\n-    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n+    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*>>& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &fileinfo);\n     bool ReadLastBlockFile(int &nFile);\n     bool WriteReindexing(bool fReindex);\n     bool ReadReindexing(bool &fReindex);\n     bool ReadTxIndex(const uint256 &txid, CDiskTxPos &pos);\n-    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> > &list);\n+    bool WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos>> &list);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(std::function<CBlockIndex*(const uint256&)> insertBlockIndex);"
      },
      {
        "sha": "090bf4de7a853d1cf17f34f05a34f4e4445f5ccb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -468,7 +468,7 @@ class CTxMemPool\n     indexed_transaction_set mapTx;\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n-    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter>> vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {"
      },
      {
        "sha": "e14b9ec75a02336d8efb1f6659b72b8892caa95f",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -72,10 +72,10 @@ class CClientUIInterface\n     };\n \n     /** Show message box. */\n-    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;\n+    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool>> ThreadSafeMessageBox;\n \n     /** If possible, ask the user a question. If not, falls back to ThreadSafeMessageBox(noninteractive_message, caption, style) and returns false. */\n-    boost::signals2::signal<bool (const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeQuestion;\n+    boost::signals2::signal<bool (const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool>> ThreadSafeQuestion;\n \n     /** Progress message during initialization. */\n     boost::signals2::signal<void (const std::string &message)> InitMessage;"
      },
      {
        "sha": "46034d382cce7d0393ea2a2357e9befa69e565e6",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -182,7 +182,7 @@ class ArgsManager\n protected:\n     CCriticalSection cs_args;\n     std::map<std::string, std::string> mapArgs;\n-    std::map<std::string, std::vector<std::string> > mapMultiArgs;\n+    std::map<std::string, std::vector<std::string>> mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);"
      },
      {
        "sha": "f60d159d723e9e6c47fd9eef87cc881d4cb540aa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -1619,7 +1619,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int nInputs = 0;\n     int64_t nSigOpsCost = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     std::vector<PrecomputedTransactionData> txdata;\n@@ -1797,7 +1797,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n         FlushBlockFile();\n         // Then update all block file information (which may refer to block and undo files).\n         {\n-            std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n+            std::vector<std::pair<int, const CBlockFileInfo*>> vFiles;\n             vFiles.reserve(setDirtyFileInfo.size());\n             for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n                 vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n@@ -3328,7 +3328,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     boost::this_thread::interruption_point();\n \n     // Calculate nChainWork\n-    std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n+    std::vector<std::pair<int, CBlockIndex*>> vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     for (const std::pair<uint256, CBlockIndex*>& item : mapBlockIndex)\n     {"
      },
      {
        "sha": "673d796422273dd3f89ddd082564ff8666651208",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -63,7 +63,7 @@ class CMasterKey\n     }\n };\n \n-typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n+typedef std::vector<unsigned char, secure_allocator<unsigned char>> CKeyingMaterial;\n \n namespace wallet_crypto\n {"
      },
      {
        "sha": "570cc0a1f07712b02030619fcd5770c4526b82c3",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -65,7 +65,7 @@ class CDBEnv\n      * NOTE: reads the entire database into memory, so cannot be used\n      * for huge databases.\n      */\n-    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char>> KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n     bool Open(const fs::path& path);"
      },
      {
        "sha": "ef856647888f4d057f58442fcbde1be14f39eabb",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -629,7 +629,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     pwallet->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n-    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n+    std::vector<std::pair<int64_t, CKeyID>> vKeyBirth;\n     for (const auto& entry : mapKeyBirth) {\n         if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n             vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n@@ -660,7 +660,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n         }\n     }\n-    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+    for (std::vector<std::pair<int64_t, CKeyID>>::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();"
      },
      {
        "sha": "294ea336205802cad904b018ddcf60004c9ebb62",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -3298,10 +3298,10 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n     return balances;\n }\n \n-std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n+std::set<std::set<CTxDestination>> CWallet::GetAddressGroupings()\n {\n     AssertLockHeld(cs_wallet); // mapWallet\n-    std::set< std::set<CTxDestination> > groupings;\n+    std::set<std::set<CTxDestination>> groupings;\n     std::set<CTxDestination> grouping;\n \n     for (const auto& walletEntry : mapWallet)\n@@ -3355,13 +3355,13 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             }\n     }\n \n-    std::set< std::set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n-    std::map< CTxDestination, std::set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n+    std::set<std::set<CTxDestination>*> uniqueGroupings; // a set of pointers to groups of addresses\n+    std::map<CTxDestination, std::set<CTxDestination>*> setmap;  // map addresses to the unique group containing it\n     for (std::set<CTxDestination> _grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n-        std::set< std::set<CTxDestination>* > hits;\n-        std::map< CTxDestination, std::set<CTxDestination>* >::iterator it;\n+        std::set<std::set<CTxDestination>*> hits;\n+        std::map<CTxDestination, std::set<CTxDestination>*>::iterator it;\n         for (CTxDestination address : _grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n@@ -3381,7 +3381,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             setmap[element] = merged;\n     }\n \n-    std::set< std::set<CTxDestination> > ret;\n+    std::set<std::set<CTxDestination>> ret;\n     for (std::set<CTxDestination>* uniqueGrouping : uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);"
      },
      {
        "sha": "a9abad318948d9a644627a08fd5a0887ac8021be",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30726c3bcf567c58c17205464563631c937fdd3f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=30726c3bcf567c58c17205464563631c937fdd3f",
        "patch": "@@ -292,7 +292,7 @@ class CWalletTx : public CMerkleTx\n      *                         2014 (removed in commit 93a18a3)\n      */\n     mapValue_t mapValue;\n-    std::vector<std::pair<std::string, std::string> > vOrderForm;\n+    std::vector<std::pair<std::string, std::string>> vOrderForm;\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived; //!< time received by this node\n     /**\n@@ -976,7 +976,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n+    std::set<std::set<CTxDestination>> GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(const std::string& strAccount) const;"
      }
    ]
  }
]