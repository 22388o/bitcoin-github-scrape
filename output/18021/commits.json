[
  {
    "sha": "37d800bea016d5cba5635db036f53a486614ed30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2Q4MDBiZWEwMTZkNWNiYTU2MzVkYjAzNmY1M2E0ODY2MTRlZDMw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-06T18:25:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-30T04:56:05Z"
      },
      "message": "Add a constant for the maximum vector allocation (5 Mbyte)",
      "tree": {
        "sha": "45dfff1beb3c8bd4b42bf175a3d6c80b69541261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45dfff1beb3c8bd4b42bf175a3d6c80b69541261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37d800bea016d5cba5635db036f53a486614ed30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d800bea016d5cba5635db036f53a486614ed30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37d800bea016d5cba5635db036f53a486614ed30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d800bea016d5cba5635db036f53a486614ed30/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1607b5df4877e5f799d861784cb91dba3ea5887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1607b5df4877e5f799d861784cb91dba3ea5887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1607b5df4877e5f799d861784cb91dba3ea5887"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8161f6c91fbc9da9c1cbbd3eb6445040d0413877",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37d800bea016d5cba5635db036f53a486614ed30/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37d800bea016d5cba5635db036f53a486614ed30/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=37d800bea016d5cba5635db036f53a486614ed30",
        "patch": "@@ -25,6 +25,9 @@\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n+/** Maximum amount of memory (in bytes) to allocate at once when deserializing vectors. */\n+static const unsigned int MAX_VECTOR_ALLOCATE = 5000000;\n+\n /**\n  * Dummy data type to identify deserializing constructors.\n  *\n@@ -750,7 +753,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n     unsigned int nMid = 0;\n     while (nMid < nSize)\n     {\n-        nMid += 5000000 / sizeof(T);\n+        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n         if (nMid > nSize)\n             nMid = nSize;\n         v.resize_uninitialized(nMid);\n@@ -830,7 +833,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)\n     unsigned int nMid = 0;\n     while (nMid < nSize)\n     {\n-        nMid += 5000000 / sizeof(T);\n+        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n         if (nMid > nSize)\n             nMid = nSize;\n         v.resize(nMid);"
      }
    ]
  },
  {
    "sha": "abf86243568af380c1384ac4e0bfcdcfd4dab085",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmY4NjI0MzU2OGFmMzgwYzEzODRhYzRlMGJmY2RjZmQ0ZGFiMDg1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-18T14:49:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-07T02:58:44Z"
      },
      "message": "Add custom vector-element formatter\n\nThis allows a very compact notation for serialization of vectors whose\nelements are not serialized using their default encoding.",
      "tree": {
        "sha": "6d3d8745677c81923af8fcc8800894b63ec94dba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d3d8745677c81923af8fcc8800894b63ec94dba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abf86243568af380c1384ac4e0bfcdcfd4dab085",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf86243568af380c1384ac4e0bfcdcfd4dab085",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abf86243568af380c1384ac4e0bfcdcfd4dab085",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf86243568af380c1384ac4e0bfcdcfd4dab085/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37d800bea016d5cba5635db036f53a486614ed30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37d800bea016d5cba5635db036f53a486614ed30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37d800bea016d5cba5635db036f53a486614ed30"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd0a20e346ff2420495f51f5d959d6f6a80e94f3",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abf86243568af380c1384ac4e0bfcdcfd4dab085/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abf86243568af380c1384ac4e0bfcdcfd4dab085/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=abf86243568af380c1384ac4e0bfcdcfd4dab085",
        "patch": "@@ -596,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            static_assert(sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE, \"Vector element size too large\");\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));\n+            v.reserve(allocated);\n+            while (v.size() < allocated) {\n+                typename V::value_type val;\n+                s >> Using<Formatter>(val);\n+                v.push_back(std::move(val));\n+            }\n+        }\n+    };\n+};\n+\n /**\n  * Forward declarations\n  */"
      }
    ]
  },
  {
    "sha": "3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Q4YWI5ZDExZTRjMGVhNDdlNTZiZTRmNmYyZmRkNDg4MDY3OTZj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-29T18:44:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-07T03:06:09Z"
      },
      "message": "Make std::vector and prevector reuse the VectorFormatter logic",
      "tree": {
        "sha": "693b1a892773722f7fa9176264df823402a2a421",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/693b1a892773722f7fa9176264df823402a2a421"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abf86243568af380c1384ac4e0bfcdcfd4dab085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abf86243568af380c1384ac4e0bfcdcfd4dab085",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abf86243568af380c1384ac4e0bfcdcfd4dab085"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 18,
      "deletions": 32
    },
    "files": [
      {
        "sha": "75d6b5215412599129bad89811bb080fca699675",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 18,
        "deletions": 32,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
        "patch": "@@ -723,6 +723,20 @@ inline void Unserialize(Stream& is, T&& a)\n     a.Unserialize(is);\n }\n \n+/** Default formatter. Serializes objects as themselves.\n+ *\n+ * The vector/prevector serialization code passes this to VectorFormatter\n+ * to enable reusing that logic. It shouldn't be needed elsewhere.\n+ */\n+struct DefaultFormatter\n+{\n+    template<typename Stream, typename T>\n+    static void Ser(Stream& s, const T& t) { Serialize(s, t); }\n+\n+    template<typename Stream, typename T>\n+    static void Unser(Stream& s, T& t) { Unserialize(s, t); }\n+};\n+\n \n \n \n@@ -763,9 +777,7 @@ void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)\n template<typename Stream, unsigned int N, typename T, typename V>\n void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)\n {\n-    WriteCompactSize(os, v.size());\n-    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi));\n+    Serialize(os, Using<VectorFormatter<DefaultFormatter>>(v));\n }\n \n template<typename Stream, unsigned int N, typename T>\n@@ -794,19 +806,7 @@ void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)\n template<typename Stream, unsigned int N, typename T, typename V>\n void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)\n {\n-    v.clear();\n-    unsigned int nSize = ReadCompactSize(is);\n-    unsigned int i = 0;\n-    unsigned int nMid = 0;\n-    while (nMid < nSize)\n-    {\n-        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n-        if (nMid > nSize)\n-            nMid = nSize;\n-        v.resize_uninitialized(nMid);\n-        for (; i < nMid; ++i)\n-            Unserialize(is, v[i]);\n-    }\n+    Unserialize(is, Using<VectorFormatter<DefaultFormatter>>(v));\n }\n \n template<typename Stream, unsigned int N, typename T>\n@@ -843,9 +843,7 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, const bool&)\n template<typename Stream, typename T, typename A, typename V>\n void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)\n {\n-    WriteCompactSize(os, v.size());\n-    for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n-        ::Serialize(os, (*vi));\n+    Serialize(os, Using<VectorFormatter<DefaultFormatter>>(v));\n }\n \n template<typename Stream, typename T, typename A>\n@@ -874,19 +872,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)\n template<typename Stream, typename T, typename A, typename V>\n void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)\n {\n-    v.clear();\n-    unsigned int nSize = ReadCompactSize(is);\n-    unsigned int i = 0;\n-    unsigned int nMid = 0;\n-    while (nMid < nSize)\n-    {\n-        nMid += MAX_VECTOR_ALLOCATE / sizeof(T);\n-        if (nMid > nSize)\n-            nMid = nSize;\n-        v.resize(nMid);\n-        for (; i < nMid; i++)\n-            Unserialize(is, v[i]);\n-    }\n+    Unserialize(is, Using<VectorFormatter<DefaultFormatter>>(v));\n }\n \n template<typename Stream, typename T, typename A>"
      }
    ]
  },
  {
    "sha": "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzk0YjAwMzlkMmNhMmE4YzQxZmQ2MTI3ZmY1MDE5YTJhZmMzMDRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-01-29T19:21:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-02-07T03:08:11Z"
      },
      "message": "Convert undo.h to new serialization framework",
      "tree": {
        "sha": "4db7ca2cc494740e5decafb3e9b4d3120606b8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4db7ca2cc494740e5decafb3e9b4d3120606b8b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd8ab9d11e4c0ea47e56be4f6f2fdd48806796c"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 13,
      "deletions": 56
    },
    "files": [
      {
        "sha": "47f132c7d85eb67fe6f63da9acbba1d529bbfd32",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 13,
        "deletions": 56,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c94b0039d2ca2a8c41fd6127ff5019a2afc304e/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
        "patch": "@@ -13,88 +13,50 @@\n #include <serialize.h>\n #include <version.h>\n \n-/** Undo information for a CTxIn\n+/** Formatter for undo information for a CTxIn\n  *\n  *  Contains the prevout's CTxOut being spent, and its metadata as well\n  *  (coinbase or not, height). The serialization contains a dummy value of\n  *  zero. This is compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+struct TxInUndoFormatter\n {\n-    const Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1u : 0u)));\n-        if (txout->nHeight > 0) {\n+    void Ser(Stream &s, const Coin& txout) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Serialize(s, Using<TxOutCompression>(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Unserialize(Stream &s) {\n+    void Unser(Stream &s, Coin& txout) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             unsigned int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Unserialize(s, Using<TxOutCompression>(txout.out));\n     }\n-\n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, TxInUndoSerializer(&prevout));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {\n-            throw std::ios_base::failure(\"Too many input undo records\");\n-        }\n-        vprevout.resize(count);\n-        for (auto& prevout : vprevout) {\n-            ::Unserialize(s, TxInUndoDeserializer(&prevout));\n-        }\n-    }\n+    SERIALIZE_METHODS(CTxUndo, obj) { READWRITE(Using<VectorFormatter<TxInUndoFormatter>>(obj.vprevout)); }\n };\n \n /** Undo information for a CBlock */\n@@ -103,12 +65,7 @@ class CBlockUndo\n public:\n     std::vector<CTxUndo> vtxundo; // for all but the coinbase\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(vtxundo);\n-    }\n+    SERIALIZE_METHODS(CBlockUndo, obj) { READWRITE(obj.vtxundo); }\n };\n \n #endif // BITCOIN_UNDO_H"
      }
    ]
  }
]