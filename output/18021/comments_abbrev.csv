sipa,2020-01-29 19:31:38,"@ryanofsky I added another small improvement here that wasn't present in #10785, namely reusing the `VectorUsing` logic in the vector/prevector serializers themselves (avoiding code duplication).",https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-579921768,579921768,
kallewoof,2020-02-03 06:27:53,Code review ACK 24235e50e9d532cbe5836dcebbce0c6a04be8652,https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-581258978,581258978,
DrahtBot,2020-02-07 10:06:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18088](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18088.html) (build: ensure we aren't using GNU extension",https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-583321333,583321333,
laanwj,2020-02-10 14:47:18,code review ACK 3c94b0039d2ca2a8c41fd6127ff5019a2afc304e,https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-584157462,584157462,
Empact,2020-01-29 23:33:44,nit: specify units?,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372689082,372689082,src/serialize.h
sipa,2020-01-30 04:57:52,Done.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372759739,372759739,src/serialize.h
laanwj,2020-02-05 10:10:14,"Maybe add a comment when this is to be used, on first glance it seems like a no-op.",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375164775,375164775,src/serialize.h
laanwj,2020-02-05 10:13:57,A static assert that ` sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE` could catch an edge case here.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375166767,375166767,src/serialize.h
ryanofsky,2020-02-05 19:30:22,"In commit ""Add custom vector-element formatter"" (741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7)\n\nCould avoid creating the temporary:\n\n```c++\nv.emplace_back();\ns >> Using<Formatter>(v.back());\n```",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375462422,375462422,src/serialize.h
ryanofsky,2020-02-05 19:50:12,"In commit ""Convert undo.h to new serialization framework"" (24235e50e9d532cbe5836dcebbce0c6a04be8652)\n\nNote: With this check going away, there doesn't appear to be any limit on the total size of the deserialized `vprevout` vector. The incremental allocation size is now limited to MAX_VECTOR_ALLOCATE, though.",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375472656,375472656,src/undo.h
ryanofsky,2020-02-05 20:07:07,"I don't think the `VectorUsing` and `UsingSelf` names for formatters are the best. Would suggest sticking to the `FooFormatter` convention and renaming `VectorUsing` to `VectorFormatter` and `UsingSelf` to `DefaultFormatter`.\n\nAside from giving more consistent class names, it should also make usages more readable: `Using<VectorUsing<UsingSelf>>(v)` -> `Using<VectorFormatter<DefaultFormatter>>(",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375480709,375480709,src/serialize.h
sipa,2020-02-07 03:09:24,Done.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195107,376195107,src/serialize.h
sipa,2020-02-07 03:09:36,Done.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195138,376195138,src/serialize.h
sipa,2020-02-07 03:09:44,Done.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195163,376195163,src/serialize.h
sipa,2020-02-07 03:10:39,"Yeah, I'm aware. I don't think this is significant. The earlier code needed a sanity limit, and had custom code, so it used a custom limit. The new code is safe by default (even though the limit in practice is much higher).",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195351,376195351,src/undo.h
sipa,2020-02-07 03:10:51,That's indeed better. Done.,https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195394,376195394,src/serialize.h
jonatack,2020-02-07 14:00:26,"Lines 632 and 633, so the documentation doesn't go out of date if the value of `MAX_VECTOR_ALLOCATE` changes, perhaps replace ""5 MiB"" and ""5 Mib"" with ""MAX_VECTOR_ALLOCATE"" (and s/X Mib/X/ as the constant is defined in bytes).",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376403864,376403864,src/serialize.h
jonatack,2020-02-07 14:09:39,"<strike>Now that the static assert suggested in https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375166767 has been added, possibly worthwhile (or not) to calculate `sizeof(typename V::value_type)` once and cache it.</strike>",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376408131,376408131,src/serialize.h
jonatack,2020-02-07 14:54:04,"Noting that the result of sizeof is always nonzero, even if applied to an empty class type, so (normally) no risk of division by zero.",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376431958,376431958,src/serialize.h
kallewoof,2020-02-07 15:31:03,"Unless I'm confused, sizeof(..) is determined at compile-time, so no reason to cache it.",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376452925,376452925,src/serialize.h
jonatack,2020-02-07 16:55:12,"Oops yes, `static_assert` requires a bool constexpr, otherwise a compile-time error is issued.",https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376498299,376498299,src/serialize.h
