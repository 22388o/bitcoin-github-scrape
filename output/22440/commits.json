[
  {
    "sha": "11f31c25d103b2a194b514a7176480105709800f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWYzMWMyNWQxMDNiMmExOTRiNTE0YTcxNzY0ODAxMDU3MDk4MDBm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T01:53:59Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T02:33:43Z"
      },
      "message": "Use LIFETIMEBOUND to eliminate ambiguous interfaces from checkers w.r.t. data ownership",
      "tree": {
        "sha": "dc8a281d327bc3ee4f454720ea63f83a8e034ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc8a281d327bc3ee4f454720ea63f83a8e034ced"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11f31c25d103b2a194b514a7176480105709800f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f31c25d103b2a194b514a7176480105709800f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11f31c25d103b2a194b514a7176480105709800f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f31c25d103b2a194b514a7176480105709800f/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ab0c77299a5b184a8d0edf38f26a97bf9bbed6e"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 111,
      "deletions": 99
    },
    "files": [
      {
        "sha": "93068addfb24608e63333793ed4d4ce5d532d719",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -47,7 +47,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back());\n     witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n     witness.stack.push_back(ToByteVector(pubkey));\n-\n+    PrecomputedTransactionData txdata{txSpend};\n     // Benchmark.\n     bench.run([&] {\n         ScriptError err;\n@@ -56,7 +56,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n             txCredit.vout[0].scriptPubKey,\n             &txSpend.vin[0].scriptWitness,\n             flags,\n-            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL),\n+            MutableTransactionSignatureChecker(txSpend, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL),\n             &err);\n         assert(err == SCRIPT_ERR_OK);\n         assert(success);"
      },
      {
        "sha": "81ae43898b9d050c8b91092c83b8117b62e55651",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -652,9 +652,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         const CAmount& amount = coin.out.nValue;\n \n         SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out);\n+        PrecomputedTransactionData txdata{mergedTx};\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(mergedTx, i, amount, txdata, nHashType), prevPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "02441587ca9eea6a2fb13d5448670d50ca482e61",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -223,7 +223,8 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     // Construct a would-be spend of this output, to update sigdata with.\n     // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n     // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n-    MutableTransactionSignatureCreator creator(&tx, /* index */ 0, out.nValue, SIGHASH_ALL);\n+    PrecomputedTransactionData txdata{tx};\n+    MutableTransactionSignatureCreator creator(tx, /* index */ 0, out.nValue, txdata, SIGHASH_ALL);\n     ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n \n     // Put redeem_script, witness_script, key paths, into PSBTOutput.\n@@ -290,7 +291,7 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     if (txdata == nullptr) {\n         sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n     } else {\n-        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, txdata, sighash);\n+        MutableTransactionSignatureCreator creator(tx, index, utxo.nValue, *txdata, sighash);\n         sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n     }\n     // Verify that a witness signature was produced in case one was required."
      },
      {
        "sha": "3e6d4237f3fbc6e791535d38a9511635affb6c0d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -714,7 +714,8 @@ static RPCHelpMan combinerawtransaction()\n                 sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out));\n             }\n         }\n-        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, coin.out.nValue, 1), coin.out.scriptPubKey, sigdata);\n+        PrecomputedTransactionData txdata{mergedTx};\n+        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(mergedTx, i, coin.out.nValue, txdata, 1), coin.out.scriptPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "b80875a13eb5fac1de974209d38081fddded0e95",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -92,7 +92,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         set_error(err, bitcoinconsensus_ERR_OK);\n \n         PrecomputedTransactionData txdata(tx);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(&tx, nIn, amount, txdata, MissingDataBehavior::FAIL), nullptr);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(tx, nIn, amount, txdata, MissingDataBehavior::FAIL), nullptr);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "a3da7434fe5348cf5e35246abdd37470e1f23ff8",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -1683,7 +1683,7 @@ bool GenericTransactionSignatureChecker<T>::CheckECDSASignature(const std::vecto\n     // Witness sighashes need the amount.\n     if (sigversion == SigVersion::WITNESS_V0 && amount < 0) return HandleMissingData(m_mdb);\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->txdata);\n+    uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType, amount, sigversion, &this->txdata);\n \n     if (!VerifyECDSASignature(vchSig, pubkey, sighash))\n         return false;\n@@ -1711,8 +1711,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     uint256 sighash;\n-    if (!this->txdata) return HandleMissingData(m_mdb);\n-    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, *this->txdata, m_mdb)) {\n+    if (!SignatureHashSchnorr(sighash, execdata, txTo, nIn, hashtype, sigversion, this->txdata, m_mdb)) {\n         return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     if (!VerifySchnorrSignature(sig, pubkey, sighash)) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG);\n@@ -1730,14 +1729,14 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n         return false;\n \n     // Finally the nLockTime feature can be disabled in IsFinalTx()\n@@ -1750,7 +1749,7 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n+    if (CTxIn::SEQUENCE_FINAL == txTo.vin[nIn].nSequence)\n         return false;\n \n     return true;\n@@ -1761,11 +1760,11 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n {\n     // Relative lock times are supported by comparing the passed\n     // in operand to the sequence number of the input.\n-    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+    const int64_t txToSequence = (int64_t)txTo.vin[nIn].nSequence;\n \n     // Fail if the transaction's version number is not set high\n     // enough to trigger BIP 68 rules.\n-    if (static_cast<uint32_t>(txTo->nVersion) < 2)\n+    if (static_cast<uint32_t>(txTo.nVersion) < 2)\n         return false;\n \n     // Sequence numbers with their most significant bit set are not"
      },
      {
        "sha": "ead90e0df69f1262ac6ecf2d2067fa4a35f6eb3b",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n+#include <attributes.h>\n #include <hash.h>\n #include <script/script_error.h>\n #include <span.h>\n@@ -267,19 +268,18 @@ template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {\n private:\n-    const T* txTo;\n+    const T& txTo;\n     const MissingDataBehavior m_mdb;\n     unsigned int nIn;\n     const CAmount amount;\n-    const PrecomputedTransactionData* txdata;\n+    const PrecomputedTransactionData& txdata;\n \n protected:\n     virtual bool VerifyECDSASignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n     virtual bool VerifySchnorrSignature(Span<const unsigned char> sig, const XOnlyPubKey& pubkey, const uint256& sighash) const;\n \n public:\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n+    GenericTransactionSignatureChecker(const T& txToIn LIFETIMEBOUND, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn LIFETIMEBOUND, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(txdataIn) {}\n     bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;"
      },
      {
        "sha": "64e358fd56e20353325e5c0884788f8844457d9b",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -27,7 +27,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn, MissingDataBehavior::ASSERT_FAIL), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction& txToIn LIFETIMEBOUND, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn LIFETIMEBOUND) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn, MissingDataBehavior::ASSERT_FAIL), store(storeIn) {}\n \n     bool VerifyECDSASignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;\n     bool VerifySchnorrSignature(Span<const unsigned char> sig, const XOnlyPubKey& pubkey, const uint256& sighash) const override;"
      },
      {
        "sha": "d6573da0f42e5d68dc9bcf5bd0d377b59bb0c5c0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 15,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -15,16 +15,10 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn)\n-    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL),\n-      m_txdata(nullptr)\n-{\n-}\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn)\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction& txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdata, int nHashTypeIn)\n     : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn),\n-      checker(txdata ? MutableTransactionSignatureChecker(txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL) :\n-          MutableTransactionSignatureChecker(txTo, nIn, amount, MissingDataBehavior::FAIL)),\n+      checker(MutableTransactionSignatureChecker(txTo, nIn, amount, txdata, MissingDataBehavior::FAIL)),\n       m_txdata(txdata)\n {\n }\n@@ -47,7 +41,7 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     // BASE/WITNESS_V0 signatures don't support explicit SIGHASH_DEFAULT, use SIGHASH_ALL instead.\n     const int hashtype = nHashType == SIGHASH_DEFAULT ? SIGHASH_ALL : nHashType;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, hashtype, amount, sigversion, m_txdata);\n+    uint256 hash = SignatureHash(scriptCode, txTo, nIn, hashtype, amount, sigversion, &m_txdata);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)hashtype);\n@@ -79,7 +73,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n     // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n     // of data present, for now, only support signing when everything is provided.\n-    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+    if (!m_txdata.m_bip341_taproot_ready || !m_txdata.m_spent_outputs_ready) return false;\n \n     ScriptExecutionData execdata;\n     execdata.m_annex_init = true;\n@@ -92,7 +86,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n         execdata.m_tapleaf_hash = *leaf_hash;\n     }\n     uint256 hash;\n-    if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    if (!SignatureHashSchnorr(hash, execdata, txTo, nIn, nHashType, sigversion, m_txdata, MissingDataBehavior::FAIL)) return false;\n     sig.resize(64);\n     if (!key.SignSchnorr(hash, sig, merkle_root, nullptr)) return false;\n     if (nHashType) sig.push_back(nHashType);\n@@ -446,7 +440,8 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     Stacks stack(data);\n \n     // Get signatures\n-    MutableTransactionSignatureChecker tx_checker(&tx, nIn, txout.nValue, MissingDataBehavior::FAIL);\n+    PrecomputedTransactionData txdata{tx};\n+    MutableTransactionSignatureChecker tx_checker(tx, nIn, txout.nValue, txdata, MissingDataBehavior::FAIL);\n     SignatureExtractorChecker extractor_checker(data, tx_checker);\n     if (VerifyScript(data.scriptSig, txout.scriptPubKey, &data.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, extractor_checker)) {\n         data.complete = true;\n@@ -528,7 +523,8 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n {\n     assert(nIn < txTo.vin.size());\n \n-    MutableTransactionSignatureCreator creator(&txTo, nIn, amount, nHashType);\n+    PrecomputedTransactionData txdata{txTo};\n+    MutableTransactionSignatureCreator creator(txTo, nIn, amount, txdata, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n@@ -667,7 +663,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(mtx, i, amount, txdata, nHashType), prevPubKey, sigdata);\n         }\n \n         UpdateInput(txin, sigdata);\n@@ -679,7 +675,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         }\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, txdata, MissingDataBehavior::FAIL), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(txConst, i, amount, txdata, MissingDataBehavior::FAIL), &serror)) {\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n                 input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";"
      },
      {
        "sha": "429b59b54000b956c23eece30a52db56cb1b77a0",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SIGN_H\n #define BITCOIN_SCRIPT_SIGN_H\n \n+#include <attributes.h>\n #include <coins.h>\n #include <hash.h>\n #include <pubkey.h>\n@@ -36,16 +37,15 @@ class BaseSignatureCreator {\n \n /** A signature creator for transactions. */\n class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n-    const CMutableTransaction* txTo;\n+    const CMutableTransaction& txTo;\n     unsigned int nIn;\n     int nHashType;\n     CAmount amount;\n     const MutableTransactionSignatureChecker checker;\n-    const PrecomputedTransactionData* m_txdata;\n+    const PrecomputedTransactionData& m_txdata;\n \n public:\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn = SIGHASH_ALL);\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn = SIGHASH_ALL);\n+    MutableTransactionSignatureCreator(const CMutableTransaction& txToIn LIFETIMEBOUND, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdata LIFETIMEBOUND, int nHashTypeIn = SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;"
      },
      {
        "sha": "e2ce246ebb72d14a61f5578be7953906c57c8b64",
        "filename": "src/signet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/signet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/signet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/signet.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -141,7 +141,7 @@ bool CheckSignetBlockSolution(const CBlock& block, const Consensus::Params& cons\n \n     PrecomputedTransactionData txdata;\n     txdata.Init(signet_txs->m_to_sign, {signet_txs->m_to_spend.vout[0]});\n-    TransactionSignatureChecker sigcheck(&signet_txs->m_to_sign, /*nIn=*/ 0, /*amount=*/ signet_txs->m_to_spend.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n+    TransactionSignatureChecker sigcheck(signet_txs->m_to_sign, /*nIn=*/ 0, /*amount=*/ signet_txs->m_to_spend.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n \n     if (!VerifyScript(scriptSig, signet_txs->m_to_spend.vout[0].scriptPubKey, &witness, BLOCK_SCRIPT_VERIFY_FLAGS, sigcheck)) {\n         LogPrint(BCLog::VALIDATION, \"CheckSignetBlockSolution: Errors in block (block solution invalid)\\n\");"
      },
      {
        "sha": "5205b5a9f9f9ba40efdc423b288e46a9f9176d45",
        "filename": "src/test/fuzz/script_assets_test_minimizer.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_assets_test_minimizer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_assets_test_minimizer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_assets_test_minimizer.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -160,7 +160,7 @@ void Test(const std::string& str)\n         tx.vin[idx].scriptWitness = ScriptWitnessFromJSON(test[\"success\"][\"witness\"]);\n         PrecomputedTransactionData txdata;\n         txdata.Init(tx, std::vector<CTxOut>(prevouts));\n-        MutableTransactionSignatureChecker txcheck(&tx, idx, prevouts[idx].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n+        MutableTransactionSignatureChecker txcheck(tx, idx, prevouts[idx].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n         for (const auto flags : ALL_FLAGS) {\n             // \"final\": true tests are valid for all flags. Others are only valid with flags that are\n             // a subset of test_flags.\n@@ -175,7 +175,7 @@ void Test(const std::string& str)\n         tx.vin[idx].scriptWitness = ScriptWitnessFromJSON(test[\"failure\"][\"witness\"]);\n         PrecomputedTransactionData txdata;\n         txdata.Init(tx, std::vector<CTxOut>(prevouts));\n-        MutableTransactionSignatureChecker txcheck(&tx, idx, prevouts[idx].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n+        MutableTransactionSignatureChecker txcheck(tx, idx, prevouts[idx].nValue, txdata, MissingDataBehavior::ASSERT_FAIL);\n         for (const auto flags : ALL_FLAGS) {\n             // If a test is supposed to fail with test_flags, it should also fail with any superset thereof.\n             if ((flags & test_flags) == test_flags) {"
      },
      {
        "sha": "fd18ca16e85e960ab6cc719f77766333e7121c08",
        "filename": "src/test/fuzz/script_flags.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_flags.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_flags.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_flags.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -52,7 +52,7 @@ FUZZ_TARGET_INIT(script_flags, initialize_script_flags)\n \n         for (unsigned i = 0; i < tx.vin.size(); ++i) {\n             const CTxOut& prevout = txdata.m_spent_outputs.at(i);\n-            const TransactionSignatureChecker checker{&tx, i, prevout.nValue, txdata, MissingDataBehavior::ASSERT_FAIL};\n+            const TransactionSignatureChecker checker{tx, i, prevout.nValue, txdata, MissingDataBehavior::ASSERT_FAIL};\n \n             ScriptError serror;\n             const bool ret = VerifyScript(tx.vin.at(i).scriptSig, prevout.scriptPubKey, &tx.vin.at(i).scriptWitness, verify_flags, checker, &serror);"
      },
      {
        "sha": "80e1da84aa62dd8a416b961c5115e59ec0acf41e",
        "filename": "src/test/fuzz/script_sigcache.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 19,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sigcache.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -28,25 +28,27 @@ FUZZ_TARGET_INIT(script_sigcache, initialize_script_sigcache)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n \n-    const std::optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n-    const CTransaction tx{mutable_transaction ? *mutable_transaction : CMutableTransaction{}};\n-    const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n-    const CAmount amount = ConsumeMoney(fuzzed_data_provider);\n-    const bool store = fuzzed_data_provider.ConsumeBool();\n-    PrecomputedTransactionData tx_data;\n-    CachingTransactionSignatureChecker caching_transaction_signature_checker{mutable_transaction ? &tx : nullptr, n_in, amount, store, tx_data};\n-    if (fuzzed_data_provider.ConsumeBool()) {\n-        const auto random_bytes = fuzzed_data_provider.ConsumeBytes<unsigned char>(64);\n-        const XOnlyPubKey pub_key(ConsumeUInt256(fuzzed_data_provider));\n-        if (random_bytes.size() == 64) {\n-            (void)caching_transaction_signature_checker.VerifySchnorrSignature(random_bytes, pub_key, ConsumeUInt256(fuzzed_data_provider));\n-        }\n-    } else {\n-        const auto random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-        const auto pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n-        if (pub_key) {\n-            if (!random_bytes.empty()) {\n-                (void)caching_transaction_signature_checker.VerifyECDSASignature(random_bytes, *pub_key, ConsumeUInt256(fuzzed_data_provider));\n+    const std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    if (mtx) {\n+        const CTransaction tx{*mtx};\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        const CAmount amount = ConsumeMoney(fuzzed_data_provider);\n+        const bool store = fuzzed_data_provider.ConsumeBool();\n+        PrecomputedTransactionData tx_data;\n+        CachingTransactionSignatureChecker caching_transaction_signature_checker{tx, n_in, amount, store, tx_data};\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto random_bytes = fuzzed_data_provider.ConsumeBytes<unsigned char>(64);\n+            const XOnlyPubKey pub_key(ConsumeUInt256(fuzzed_data_provider));\n+            if (random_bytes.size() == 64) {\n+                (void)caching_transaction_signature_checker.VerifySchnorrSignature(random_bytes, pub_key, ConsumeUInt256(fuzzed_data_provider));\n+            }\n+        } else {\n+            const auto random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+            const auto pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (pub_key) {\n+                if (!random_bytes.empty()) {\n+                    (void)caching_transaction_signature_checker.VerifyECDSASignature(random_bytes, *pub_key, ConsumeUInt256(fuzzed_data_provider));\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "8d1597019646c3a0ef458aff911aa4e18e623a24",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -111,7 +111,8 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n             }\n             if (n_in < script_tx_to.vin.size()) {\n                 (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n-                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                PrecomputedTransactionData txdata{tx_to};\n+                MutableTransactionSignatureCreator signature_creator{tx_to, n_in, ConsumeMoney(fuzzed_data_provider), txdata, fuzzed_data_provider.ConsumeIntegral<int>()};\n                 std::vector<unsigned char> vch_sig;\n                 CKeyID address;\n                 if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "1fd7a42cb872e0ae819401389801256e33fc187a",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -61,13 +61,15 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     txFrom.vout[2].scriptPubKey = escrow;\n \n     CMutableTransaction txTo[3]; // Spending transaction\n+    PrecomputedTransactionData txdata[3];\n     for (int i = 0; i < 3; i++)\n     {\n         txTo[i].vin.resize(1);\n         txTo[i].vout.resize(1);\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1;\n+        txdata[i].Init(txTo[i], {});\n     }\n \n     std::vector<CKey> keys;\n@@ -77,20 +79,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -101,18 +103,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, CTransaction(txTo[1]), 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -124,12 +126,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, CTransaction(txTo[2]), 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(txTo[2], 0, amount, txdata[2], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(txTo[2], 0, amount, txdata[2], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "05ef1cf75a45428ae3e22f676678358b6d537f4e",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -40,8 +40,8 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].prevout.hash = txFrom.GetHash();\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n-\n-    return VerifyScript(scriptSig, scriptPubKey, nullptr, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err);\n+    PrecomputedTransactionData txdata{txTo};\n+    return VerifyScript(scriptSig, scriptPubKey, nullptr, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(txTo, 0, txFrom.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err);\n }\n \n "
      },
      {
        "sha": "6f02f3ff8681fb75b60c42460dd2dc6156c319c9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -134,7 +134,8 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     const CTransaction txCredit{BuildCreditingTransaction(scriptPubKey, nValue)};\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message);\n+    PrecomputedTransactionData txdata{tx};\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(tx, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, FormatScriptError(err) + \" where \" + FormatScriptError((ScriptError_t)scriptError) + \" expected: \" + message);\n \n     // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n@@ -144,7 +145,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n         // Weed out some invalid flag combinations.\n         if (combined_flags & SCRIPT_VERIFY_CLEANSTACK && ~combined_flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) continue;\n         if (combined_flags & SCRIPT_VERIFY_WITNESS && ~combined_flags & SCRIPT_VERIFY_P2SH) continue;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(tx, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n     }\n \n #if defined(HAVE_CONSENSUS_LIB)\n@@ -1070,18 +1071,19 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, CTransaction(txTo12));\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    PrecomputedTransactionData txdata12{txTo12};\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(txTo12, 0, txFrom12.vout[0].nValue, txdata12, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(txTo12, 0, txFrom12.vout[0].nValue, txdata12, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, CTransaction(txTo12));\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(txTo12, 0, txFrom12.vout[0].nValue, txdata12, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, CTransaction(txTo12));\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(txTo12, 0, txFrom12.vout[0].nValue, txdata12, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -1099,58 +1101,59 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n \n     const CTransaction txFrom23{BuildCreditingTransaction(scriptPubKey23)};\n     CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom23);\n+    PrecomputedTransactionData txdata23{txTo23};\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(txTo23, 0, txFrom23.vout[0].nValue, txdata23, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n@@ -1160,7 +1163,8 @@ SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction&\n     SignatureData data;\n     data.MergeSignatureData(scriptSig1);\n     data.MergeSignatureData(scriptSig2);\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&tx, 0, txout.nValue), txout.scriptPubKey, data);\n+    PrecomputedTransactionData txdata{tx};\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(tx, 0, txout.nValue, txdata), txout.scriptPubKey, data);\n     return data;\n }\n \n@@ -1686,7 +1690,7 @@ static void AssetTest(const UniValue& test)\n         CTransaction tx(mtx);\n         PrecomputedTransactionData txdata;\n         txdata.Init(tx, std::vector<CTxOut>(prevouts));\n-        CachingTransactionSignatureChecker txcheck(&tx, idx, prevouts[idx].nValue, true, txdata);\n+        CachingTransactionSignatureChecker txcheck(tx, idx, prevouts[idx].nValue, true, txdata);\n         for (const auto flags : ALL_CONSENSUS_FLAGS) {\n             // \"final\": true tests are valid for all flags. Others are only valid with flags that are\n             // a subset of test_flags.\n@@ -1703,7 +1707,7 @@ static void AssetTest(const UniValue& test)\n         CTransaction tx(mtx);\n         PrecomputedTransactionData txdata;\n         txdata.Init(tx, std::vector<CTxOut>(prevouts));\n-        CachingTransactionSignatureChecker txcheck(&tx, idx, prevouts[idx].nValue, true, txdata);\n+        CachingTransactionSignatureChecker txcheck(tx, idx, prevouts[idx].nValue, true, txdata);\n         for (const auto flags : ALL_CONSENSUS_FLAGS) {\n             // If a test is supposed to fail with test_flags, it should also fail with any superset thereof.\n             if ((flags & test_flags) == test_flags) {"
      },
      {
        "sha": "afd82e02d52ac72963de8b465b6fabfe96289aae",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -71,7 +71,8 @@ static ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTran\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &error);\n+    PrecomputedTransactionData txdata{inputi};\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(inputi, 0, output.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &error);\n     BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;"
      },
      {
        "sha": "dcf4ea95619324390fd1b169b536198d3008f559",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -122,7 +122,7 @@ bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>&\n         const CAmount amount = map_prevout_values.count(input.prevout) ? map_prevout_values.at(input.prevout) : 0;\n         try {\n             tx_valid = VerifyScript(input.scriptSig, map_prevout_scriptPubKeys.at(input.prevout),\n-                &input.scriptWitness, flags, TransactionSignatureChecker(&tx, i, amount, txdata, MissingDataBehavior::ASSERT_FAIL), &err);\n+                &input.scriptWitness, flags, TransactionSignatureChecker(tx, i, amount, txdata, MissingDataBehavior::ASSERT_FAIL), &err);\n         } catch (...) {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n             return true; // The test format is bad and an error is thrown. Return true to silence further error.\n@@ -450,7 +450,8 @@ static void CheckWithFlag(const CTransactionRef& output, const CMutableTransacti\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &error);\n+    PrecomputedTransactionData txdata{inputi};\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(inputi, 0, output->vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &error);\n     assert(ret == success);\n }\n \n@@ -561,7 +562,8 @@ SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutabl\n     SignatureData sigdata;\n     sigdata = DataFromTransaction(input1, 0, tx->vout[0]);\n     sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0]));\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue), tx->vout[0].scriptPubKey, sigdata);\n+    PrecomputedTransactionData txdata{input1};\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(input1, 0, tx->vout[0].nValue, txdata), tx->vout[0].scriptPubKey, sigdata);\n     return sigdata;\n }\n "
      },
      {
        "sha": "25abc604d607356c1cfa4aa8767ca7c265c5206b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -320,7 +320,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n         // Sign\n         SignatureData sigdata;\n-        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n+        PrecomputedTransactionData txdata{valid_with_witness_tx};\n+        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(valid_with_witness_tx, 0, 11*CENT, txdata, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n@@ -348,7 +349,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Sign\n         for (int i=0; i<2; ++i) {\n             SignatureData sigdata;\n-            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n+            PrecomputedTransactionData txdata{tx};\n+            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(tx, i, 11*CENT, txdata, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n             UpdateInput(tx.vin[i], sigdata);\n         }\n "
      },
      {
        "sha": "26b13d87dc23a6e48dd031bbaa5a00b57795696f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f31c25d103b2a194b514a7176480105709800f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f31c25d103b2a194b514a7176480105709800f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=11f31c25d103b2a194b514a7176480105709800f",
        "patch": "@@ -1361,7 +1361,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n-    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n+    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(*ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)"
      }
    ]
  },
  {
    "sha": "ce920aa0657d228441c5abff7647141529a253e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTkyMGFhMDY1N2QyMjg0NDFjNWFiZmY3NjQ3MTQxNTI5YTI1M2Uw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T02:04:06Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T02:33:43Z"
      },
      "message": "Use LIFETIMEBOUND in CScriptCheck",
      "tree": {
        "sha": "d36f69d481ca72c4cc90715a705d06e1476ac607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d36f69d481ca72c4cc90715a705d06e1476ac607"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce920aa0657d228441c5abff7647141529a253e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce920aa0657d228441c5abff7647141529a253e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce920aa0657d228441c5abff7647141529a253e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce920aa0657d228441c5abff7647141529a253e0/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11f31c25d103b2a194b514a7176480105709800f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f31c25d103b2a194b514a7176480105709800f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11f31c25d103b2a194b514a7176480105709800f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "32252057f9bd631d3c6b1c83a8f39c8116f8a15b",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce920aa0657d228441c5abff7647141529a253e0/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce920aa0657d228441c5abff7647141529a253e0/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=ce920aa0657d228441c5abff7647141529a253e0",
        "patch": "@@ -110,7 +110,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(txFrom.vout[txTo[i].vin[0].prevout.n], CTransaction(txTo[i]), 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n+            bool sigOK = CScriptCheck(txFrom.vout[txTo[i].vin[0].prevout.n], CTransaction(txTo[i]), 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, txdata)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "52ad5b6fb88a99ea6817df75ece8a1d03d195ea3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce920aa0657d228441c5abff7647141529a253e0/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce920aa0657d228441c5abff7647141529a253e0/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ce920aa0657d228441c5abff7647141529a253e0",
        "patch": "@@ -546,7 +546,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n \n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n         std::vector<CScriptCheck> vChecks;\n-        CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+        CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, txdata);\n         vChecks.push_back(CScriptCheck());\n         check.swap(vChecks.back());\n         control.Add(vChecks);"
      },
      {
        "sha": "429fabd3b43222305866de6acf4810f1a5099139",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce920aa0657d228441c5abff7647141529a253e0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce920aa0657d228441c5abff7647141529a253e0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ce920aa0657d228441c5abff7647141529a253e0",
        "patch": "@@ -1457,7 +1457,7 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\n         // spent being checked as a part of CScriptCheck.\n \n         // Verify signature\n-        CScriptCheck check(txdata.m_spent_outputs[i], tx, i, flags, cacheSigStore, &txdata);\n+        CScriptCheck check(txdata.m_spent_outputs[i], tx, i, flags, cacheSigStore, txdata);\n         if (pvChecks) {\n             pvChecks->push_back(CScriptCheck());\n             check.swap(pvChecks->back());\n@@ -1472,7 +1472,7 @@ bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\n                 // non-upgraded nodes by banning CONSENSUS-failing\n                 // data providers.\n                 CScriptCheck check2(txdata.m_spent_outputs[i], tx, i,\n-                        flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, &txdata);\n+                        flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheSigStore, txdata);\n                 if (check2())\n                     return state.Invalid(TxValidationResult::TX_NOT_STANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n             }"
      },
      {
        "sha": "d27823d1691f62c6d508849505ae070bbbeb6acf",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce920aa0657d228441c5abff7647141529a253e0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce920aa0657d228441c5abff7647141529a253e0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ce920aa0657d228441c5abff7647141529a253e0",
        "patch": "@@ -309,8 +309,8 @@ class CScriptCheck\n \n public:\n     CScriptCheck(): ptxTo(nullptr), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CTxOut& outIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n-        m_tx_out(outIn), ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n+    CScriptCheck(const CTxOut& outIn LIFETIMEBOUND, const CTransaction& txToIn LIFETIMEBOUND, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData& txdataIn LIFETIMEBOUND) :\n+        m_tx_out(outIn), ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(&txdataIn) { }\n \n     bool operator()();\n "
      }
    ]
  },
  {
    "sha": "f9934b23d8319e678568b92ae64f6f196f022e00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTkzNGIyM2Q4MzE5ZTY3ODU2OGI5MmFlNjRmNmYxOTZmMDIyZTAw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T02:26:42Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-07-14T02:33:43Z"
      },
      "message": "Make DataFromTransaction take a PrecomputedTransactionData argument to avoid recomputing where possible",
      "tree": {
        "sha": "6d7f7682be1ee3145cb86a92ed566860ca3a5e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d7f7682be1ee3145cb86a92ed566860ca3a5e17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9934b23d8319e678568b92ae64f6f196f022e00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9934b23d8319e678568b92ae64f6f196f022e00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9934b23d8319e678568b92ae64f6f196f022e00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9934b23d8319e678568b92ae64f6f196f022e00/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce920aa0657d228441c5abff7647141529a253e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce920aa0657d228441c5abff7647141529a253e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce920aa0657d228441c5abff7647141529a253e0"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5d3d7348c2628ed0828b3d7a6ce55cb55cc72c1a",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -651,8 +651,8 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         const CScript& prevPubKey = coin.out.scriptPubKey;\n         const CAmount& amount = coin.out.nValue;\n \n-        SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out);\n         PrecomputedTransactionData txdata{mergedTx};\n+        SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n             ProduceSignature(keystore, MutableTransactionSignatureCreator(mergedTx, i, amount, txdata, nHashType), prevPubKey, sigdata);"
      },
      {
        "sha": "16178e8f0f436ce18a9ae163281fe718c76bc1f1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -711,7 +711,8 @@ static RPCHelpMan combinerawtransaction()\n         // ... and merge in other signatures:\n         for (const CMutableTransaction& txv : txVariants) {\n             if (txv.vin.size() > i) {\n-                sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out));\n+                PrecomputedTransactionData txdata{txv};\n+                sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out, txdata));\n             }\n         }\n         PrecomputedTransactionData txdata{mergedTx};"
      },
      {
        "sha": "08da772d33880acfa3db8db156f1005c16e20389",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -431,7 +431,7 @@ struct Stacks\n }\n \n // Extracts signatures and scripts from incomplete scriptSigs. Please do not extend this, use PSBT instead\n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout, const PrecomputedTransactionData& txdata)\n {\n     SignatureData data;\n     assert(tx.vin.size() > nIn);\n@@ -440,7 +440,6 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     Stacks stack(data);\n \n     // Get signatures\n-    PrecomputedTransactionData txdata{tx};\n     MutableTransactionSignatureChecker tx_checker(tx, nIn, txout.nValue, txdata, MissingDataBehavior::FAIL);\n     SignatureExtractorChecker extractor_checker(data, tx_checker);\n     if (VerifyScript(data.scriptSig, txout.scriptPubKey, &data.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, extractor_checker)) {\n@@ -660,7 +659,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         const CScript& prevPubKey = coin->second.out.scriptPubKey;\n         const CAmount& amount = coin->second.out.nValue;\n \n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(mtx, i, amount, txdata, nHashType), prevPubKey, sigdata);"
      },
      {
        "sha": "c59a613df47d4569de02d20a60f37fbd660784ed",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -165,7 +165,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n /** Extract signature data from a transaction input, and insert it. */\n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout, const PrecomputedTransactionData& txdata);\n void UpdateInput(CTxIn& input, const SignatureData& data);\n \n /* Check whether we know how to sign for an output like this, assuming we"
      },
      {
        "sha": "fa2e766d6c5e09d142e78e3f9da5099f72342f3a",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -90,7 +90,8 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         const std::optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n         const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n         if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n-            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            PrecomputedTransactionData txdata{*mutable_transaction};\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out, txdata);\n             CTxIn input;\n             UpdateInput(input, signature_data_1);\n             const CScript script = ConsumeScript(fuzzed_data_provider);"
      },
      {
        "sha": "d6cc530c3d243f0b754ee20005f37f6259c00805",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -1192,17 +1192,18 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     SignatureData combined = CombineSignatures(txFrom.vout[0], txTo, empty, empty);\n     BOOST_CHECK(combined.scriptSig.empty());\n \n+    PrecomputedTransactionData txdata{txTo};\n     // Single signature case:\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL)); // changes scriptSig\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     SignatureData scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n@@ -1211,22 +1212,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(keystore.AddCScript(pkSingle));\n     scriptPubKey = GetScriptForDestination(ScriptHash(pkSingle));\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     scriptSigCopy = scriptSig;\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);"
      },
      {
        "sha": "d24868afea9e4294f9d5c1999685bf8a66cd3fc7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9934b23d8319e678568b92ae64f6f196f022e00/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f9934b23d8319e678568b92ae64f6f196f022e00",
        "patch": "@@ -560,10 +560,11 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)\n {\n     SignatureData sigdata;\n-    sigdata = DataFromTransaction(input1, 0, tx->vout[0]);\n-    sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0]));\n-    PrecomputedTransactionData txdata{input1};\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(input1, 0, tx->vout[0].nValue, txdata), tx->vout[0].scriptPubKey, sigdata);\n+    PrecomputedTransactionData txdata1{input1};\n+    sigdata = DataFromTransaction(input1, 0, tx->vout[0], txdata1);\n+    PrecomputedTransactionData txdata2{input2};\n+    sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0], txdata2));\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(input1, 0, tx->vout[0].nValue, txdata1), tx->vout[0].scriptPubKey, sigdata);\n     return sigdata;\n }\n "
      }
    ]
  }
]