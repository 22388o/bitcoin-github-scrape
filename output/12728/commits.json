[
  {
    "sha": "728667b771e80388812d521eca03682c9366ce4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Mjg2NjdiNzcxZTgwMzg4ODEyZDUyMWVjYTAzNjgyYzkzNjZjZTRi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:22:58Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-19T18:58:00Z"
      },
      "message": "scripted-diff: rename TestNode to TestP2PConn in tests\n\nSeveral test scripts define a subclass of P2PInterface called TestNode.\nThis commit renames those to TestP2PConn since we already have a\nTestNode class in the test framework.\n\n-BEGIN VERIFY SCRIPT-\nsed -i s/TestNode/TestP2PConn/ test/functional/*py test/functional/test_framework/comptool.py\n_END VERIFY SCRIPT-",
      "tree": {
        "sha": "0f0be9bb146364d2fd94251636cbae6ffade5c22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f0be9bb146364d2fd94251636cbae6ffade5c22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/728667b771e80388812d521eca03682c9366ce4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/728667b771e80388812d521eca03682c9366ce4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/728667b771e80388812d521eca03682c9366ce4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/728667b771e80388812d521eca03682c9366ce4b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee7b67e2784a5f08dffa6b05cee0e64c53a693c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee7b67e2784a5f08dffa6b05cee0e64c53a693c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee7b67e2784a5f08dffa6b05cee0e64c53a693c8"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 21,
      "deletions": 21
    },
    "files": [
      {
        "sha": "c92fe8dd4560e13759175e920d638e6675bf6bc9",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.block_receive_map = defaultdict(int)\n@@ -55,7 +55,7 @@ def run_test(self):\n         p2p_conns = []\n \n         for _ in range(3):\n-            p2p_conns.append(self.nodes[0].add_p2p_connection(TestNode()))\n+            p2p_conns.append(self.nodes[0].add_p2p_connection(TestP2PConn()))\n \n         network_thread_start()\n         for p2pc in p2p_conns:\n@@ -147,7 +147,7 @@ def run_test(self):\n         self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         # Reconnect to self.nodes[0]\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        self.nodes[0].add_p2p_connection(TestP2PConn())\n \n         network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()"
      },
      {
        "sha": "e700e599a85edf0b1355b502bbcbac51eb29d3f4",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -14,8 +14,8 @@\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.script import CScript, OP_TRUE\n \n-# TestNode: A peer we use to send messages to bitcoind, and store responses.\n-class TestNode(P2PInterface):\n+# TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.last_sendcmpct = []\n@@ -788,9 +788,9 @@ def announce_cmpct_block(node, peer):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode())\n-        self.segwit_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n-        self.old_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n+        self.segwit_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.old_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n \n         network_thread_start()\n "
      },
      {
        "sha": "7c954cdca2d7e69f0615d72b95df310b3174bcb4",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -22,7 +22,7 @@ def allInvsMatch(invsExpected, testnode):\n         time.sleep(1)\n     return False\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.txinvs = []\n@@ -48,7 +48,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # Setup the p2p connections and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        self.nodes[0].add_p2p_connection(TestP2PConn())\n         network_thread_start()\n         self.nodes[0].p2p.wait_for_verack()\n "
      },
      {
        "sha": "40f86d13876a79eeb4f94aa2955a68c8900405a0",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -59,7 +59,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True):\n     p2p.sync_with_ping()\n     assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def __init__(self):\n         super().__init__()\n         self.getdataset = set()\n@@ -1878,11 +1878,11 @@ def test_non_standard_witness(self):\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         # self.test_node sets NODE_WITNESS|NODE_NETWORK\n-        self.test_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n         # self.old_node sets only NODE_NETWORK\n-        self.old_node = self.nodes[0].add_p2p_connection(TestNode(), services=NODE_NETWORK)\n+        self.old_node = self.nodes[0].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n         # self.std_node is for testing node1 (fRequireStandard=true)\n-        self.std_node = self.nodes[1].add_p2p_connection(TestNode(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.std_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n \n         network_thread_start()\n "
      },
      {
        "sha": "6a21b693b4e40c9a2bfd3c3174f71112ce328b90",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -27,7 +27,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n     def on_version(self, message):\n         # Don't send a verack in response\n         pass\n@@ -39,9 +39,9 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        no_verack_node = self.nodes[0].add_p2p_connection(TestNode())\n-        no_version_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n-        no_send_node = self.nodes[0].add_p2p_connection(TestNode(), send_version=False)\n+        no_verack_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n+        no_version_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n+        no_send_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n \n         network_thread_start()\n "
      },
      {
        "sha": "e0ca78e5d166685e88dc9193e4beec90129b6703",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/728667b771e80388812d521eca03682c9366ce4b/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/728667b771e80388812d521eca03682c9366ce4b/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=728667b771e80388812d521eca03682c9366ce4b",
        "patch": "@@ -8,7 +8,7 @@\n as the test generator to TestManager.  get_tests() should be a python\n generator that returns TestInstance objects.  See below for definition.\n \n-TestNode behaves as follows:\n+TestP2PConn behaves as follows:\n     Configure with a BlockStore and TxStore\n     on_inv: log the message but don't request\n     on_headers: log the chain tip\n@@ -39,7 +39,7 @@ def match(self, other):\n     def __repr__(self):\n         return '%i:%s' % (self.code,self.reason or '*')\n \n-class TestNode(P2PInterface):\n+class TestP2PConn(P2PInterface):\n \n     def __init__(self, block_store, tx_store):\n         super().__init__()\n@@ -170,7 +170,7 @@ def __init__(self, testgen, datadir):\n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            node = TestNode(self.block_store, self.tx_store)\n+            node = TestP2PConn(self.block_store, self.tx_store)\n             node.peer_connect('127.0.0.1', p2p_port(i))\n             self.p2p_connections.append(node)\n "
      }
    ]
  }
]