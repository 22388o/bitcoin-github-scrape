[
  {
    "sha": "4441ad677a4cdc70ecac63e03edb4e236e36801e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQxYWQ2NzdhNGNkYzcwZWNhYzYzZTAzZWRiNGUyMzZlMzY4MDFl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-10T15:19:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-10T15:28:59Z"
      },
      "message": "Make format string linter understand basic template parameter syntax",
      "tree": {
        "sha": "5c2f999901eecc610af7abde382367b6e8acce7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c2f999901eecc610af7abde382367b6e8acce7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4441ad677a4cdc70ecac63e03edb4e236e36801e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441ad677a4cdc70ecac63e03edb4e236e36801e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4441ad677a4cdc70ecac63e03edb4e236e36801e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441ad677a4cdc70ecac63e03edb4e236e36801e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66e1c793eda7a6143fd03400c98512a9b6f00c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66e1c793eda7a6143fd03400c98512a9b6f00c7"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 37,
      "deletions": 1
    },
    "files": [
      {
        "sha": "60389176c928744d26bdcdd45f4110d215b188d3",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4441ad677a4cdc70ecac63e03edb4e236e36801e/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4441ad677a4cdc70ecac63e03edb4e236e36801e/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=4441ad677a4cdc70ecac63e03edb4e236e36801e",
        "patch": "@@ -123,6 +123,32 @@ def parse_function_call_and_arguments(function_name, function_call):\n     ['foo(', '123', ')']\n     >>> parse_function_call_and_arguments(\"foo\", 'foo(\"foo\")')\n     ['foo(', '\"foo\"', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t>().to_bytes(buf), err);')\n+    ['strprintf(', '\"%s (%d)\",', ' std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t>().to_bytes(buf),', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo<wchar_t>().to_bytes(buf), err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo<wchar_t>().to_bytes(buf),', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo().to_bytes(buf), err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo().to_bytes(buf),', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo << 1, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo << 1,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo<bar>() >> 1, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo<bar>() >> 1,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo < 1 ? bar : foobar, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo < 1 ? bar : foobar,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo < 1, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo < 1,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo > 1 ? bar : foobar, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo > 1 ? bar : foobar,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo > 1, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo > 1,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo <= 1, err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo <= 1,', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo <= bar<1, 2>(1, 2), err);')\n+    ['strprintf(', '\"%s (%d)\",', ' foo <= bar<1, 2>(1, 2),', ' err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo>foo<1,2>(1,2)?bar:foobar,err)');\n+    ['strprintf(', '\"%s (%d)\",', ' foo>foo<1,2>(1,2)?bar:foobar,', 'err', ')']\n+    >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo>foo<1,2>(1,2),err)');\n+    ['strprintf(', '\"%s (%d)\",', ' foo>foo<1,2>(1,2),', 'err', ')']\n     \"\"\"\n     assert(type(function_name) is str and type(function_call) is str and function_name)\n     remaining = normalize(escape(function_call))\n@@ -131,9 +157,10 @@ def parse_function_call_and_arguments(function_name, function_call):\n     parts = [expected_function_call]\n     remaining = remaining[len(expected_function_call):]\n     open_parentheses = 1\n+    open_template_arguments = 0\n     in_string = False\n     parts.append(\"\")\n-    for char in remaining:\n+    for i, char in enumerate(remaining):\n         parts.append(parts.pop() + char)\n         if char == \"\\\"\":\n             in_string = not in_string\n@@ -151,6 +178,15 @@ def parse_function_call_and_arguments(function_name, function_call):\n             parts.append(parts.pop()[:-1])\n             parts.append(char)\n             break\n+        prev_char = remaining[i - 1] if i - 1 >= 0 else None\n+        next_char = remaining[i + 1] if i + 1 <= len(remaining) - 1 else None\n+        if char == \"<\" and next_char not in [\" \", \"<\", \"=\"] and prev_char not in [\" \", \"<\"]:\n+            open_template_arguments += 1\n+            continue\n+        if char == \">\" and next_char not in [\" \", \">\", \"=\"] and prev_char not in [\" \", \">\"] and open_template_arguments > 0:\n+            open_template_arguments -= 1\n+        if open_template_arguments > 0:\n+            continue\n         if char == \",\":\n             parts.append(\"\")\n     return parts"
      }
    ]
  }
]