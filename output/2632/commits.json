[
  {
    "sha": "70e7fba06da36218688a4cae4a5d12332c714247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGU3ZmJhMDZkYTM2MjE4Njg4YTRjYWU0YTVkMTIzMzJjNzE0MjQ3",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-05-07T11:59:29Z"
      },
      "committer": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-06-19T13:39:45Z"
      },
      "message": "Move implementation of some CBlockLocator methods\n\nMove out of main.h to improve compile times and add documentation\nfor what the methods do.",
      "tree": {
        "sha": "fe11b5b63d2ff11d9c0d2eab54ee4e806c70caab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe11b5b63d2ff11d9c0d2eab54ee4e806c70caab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70e7fba06da36218688a4cae4a5d12332c714247",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70e7fba06da36218688a4cae4a5d12332c714247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70e7fba06da36218688a4cae4a5d12332c714247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70e7fba06da36218688a4cae4a5d12332c714247/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "25dbb928600b2c65bc20ce026c5f9cf1fb457d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25dbb928600b2c65bc20ce026c5f9cf1fb457d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25dbb928600b2c65bc20ce026c5f9cf1fb457d60"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 100,
      "deletions": 89
    },
    "files": [
      {
        "sha": "8d53e3be43dcd8d009ca6af5b5105e776c58b226",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 2,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70e7fba06da36218688a4cae4a5d12332c714247/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70e7fba06da36218688a4cae4a5d12332c714247/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=70e7fba06da36218688a4cae4a5d12332c714247",
        "patch": "@@ -158,8 +158,6 @@ void static ResendWalletTransactions()\n         pwallet->ResendWalletTransactions();\n }\n \n-\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -177,7 +175,95 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n     nodeSignals.SendMessages.disconnect(&SendMessages);\n }\n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// CBlockLocator implementation\n+//\n+\n+CBlockLocator::CBlockLocator(uint256 hashBlock)\n+{\n+    std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n+    if (mi != mapBlockIndex.end())\n+        Set((*mi).second);\n+}\n+\n+void CBlockLocator::Set(const CBlockIndex* pindex)\n+{\n+    vHave.clear();\n+    int nStep = 1;\n+    while (pindex)\n+    {\n+        vHave.push_back(pindex->GetBlockHash());\n+\n+        // Exponentially larger steps back\n+        for (int i = 0; pindex && i < nStep; i++)\n+            pindex = pindex->pprev;\n+        if (vHave.size() > 10)\n+            nStep *= 2;\n+    }\n+    vHave.push_back(hashGenesisBlock);\n+}\n+\n+int CBlockLocator::GetDistanceBack()\n+{\n+    // Retrace how far back it was in the sender's branch\n+    int nDistance = 0;\n+    int nStep = 1;\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return nDistance;\n+        }\n+        nDistance += nStep;\n+        if (nDistance > 10)\n+            nStep *= 2;\n+    }\n+    return nDistance;\n+}\n+\n+CBlockIndex *CBlockLocator::GetBlockIndex()\n+{\n+    // Find the first block the caller has in the main chain\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return pindex;\n+        }\n+    }\n+    return pindexGenesisBlock;\n+}\n+\n+uint256 CBlockLocator::GetBlockHash()\n+{\n+    // Find the first block the caller has in the main chain\n+    BOOST_FOREACH(const uint256& hash, vHave)\n+    {\n+        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n+        if (mi != mapBlockIndex.end())\n+        {\n+            CBlockIndex* pindex = (*mi).second;\n+            if (pindex->IsInMainChain())\n+                return hash;\n+        }\n+    }\n+    return hashGenesisBlock;\n+}\n \n+int CBlockLocator::GetHeight()\n+{\n+    CBlockIndex* pindex = GetBlockIndex();\n+    if (!pindex)\n+        return 0;\n+    return pindex->nHeight;\n+}\n \n //////////////////////////////////////////////////////////////////////////////\n //"
      },
      {
        "sha": "615a3b3ec4127978b225c9cbaee7762cd5cb320f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 12,
        "deletions": 87,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70e7fba06da36218688a4cae4a5d12332c714247/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70e7fba06da36218688a4cae4a5d12332c714247/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=70e7fba06da36218688a4cae4a5d12332c714247",
        "patch": "@@ -1202,22 +1202,14 @@ class CBlockLocator\n protected:\n     std::vector<uint256> vHave;\n public:\n-\n-    CBlockLocator()\n-    {\n-    }\n+    CBlockLocator() {}\n \n     explicit CBlockLocator(const CBlockIndex* pindex)\n     {\n         Set(pindex);\n     }\n \n-    explicit CBlockLocator(uint256 hashBlock)\n-    {\n-        std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashBlock);\n-        if (mi != mapBlockIndex.end())\n-            Set((*mi).second);\n-    }\n+    explicit CBlockLocator(uint256 hashBlock);\n \n     CBlockLocator(const std::vector<uint256>& vHaveIn)\n     {\n@@ -1241,83 +1233,16 @@ class CBlockLocator\n         return vHave.empty();\n     }\n \n-    void Set(const CBlockIndex* pindex)\n-    {\n-        vHave.clear();\n-        int nStep = 1;\n-        while (pindex)\n-        {\n-            vHave.push_back(pindex->GetBlockHash());\n-\n-            // Exponentially larger steps back\n-            for (int i = 0; pindex && i < nStep; i++)\n-                pindex = pindex->pprev;\n-            if (vHave.size() > 10)\n-                nStep *= 2;\n-        }\n-        vHave.push_back(hashGenesisBlock);\n-    }\n-\n-    int GetDistanceBack()\n-    {\n-        // Retrace how far back it was in the sender's branch\n-        int nDistance = 0;\n-        int nStep = 1;\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return nDistance;\n-            }\n-            nDistance += nStep;\n-            if (nDistance > 10)\n-                nStep *= 2;\n-        }\n-        return nDistance;\n-    }\n-\n-    CBlockIndex* GetBlockIndex()\n-    {\n-        // Find the first block the caller has in the main chain\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return pindex;\n-            }\n-        }\n-        return pindexGenesisBlock;\n-    }\n-\n-    uint256 GetBlockHash()\n-    {\n-        // Find the first block the caller has in the main chain\n-        BOOST_FOREACH(const uint256& hash, vHave)\n-        {\n-            std::map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hash);\n-            if (mi != mapBlockIndex.end())\n-            {\n-                CBlockIndex* pindex = (*mi).second;\n-                if (pindex->IsInMainChain())\n-                    return hash;\n-            }\n-        }\n-        return hashGenesisBlock;\n-    }\n-\n-    int GetHeight()\n-    {\n-        CBlockIndex* pindex = GetBlockIndex();\n-        if (!pindex)\n-            return 0;\n-        return pindex->nHeight;\n-    }\n+    /** Given a block initialises the locator to that point in the chain. */\n+    void Set(const CBlockIndex* pindex);\n+    /** Returns the distance in blocks this locator is from our chain head. */\n+    int GetDistanceBack();\n+    /** Returns the first best-chain block the locator contains. */\n+    CBlockIndex* GetBlockIndex();\n+    /** Returns the hash of the first best chain block the locator contains. */\n+    uint256 GetBlockHash();\n+    /** Returns the height of the first best chain block the locator has. */\n+    int GetHeight();\n };\n \n "
      }
    ]
  },
  {
    "sha": "0e4b31755534fac4ea6c20a60f719e3694252220",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTRiMzE3NTU1MzRmYWM0ZWE2YzIwYTYwZjcxOWUzNjk0MjUyMjIw",
    "commit": {
      "author": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-05-07T13:16:25Z"
      },
      "committer": {
        "name": "Mike Hearn",
        "email": "hearn@google.com",
        "date": "2013-06-19T14:28:52Z"
      },
      "message": "Introduce a CChainParameters singleton class and regtest mode.\n\nThe new class is accessed via the Params() method and holds\nmost things that vary between main, test and regtest networks.\nThe regtest mode has two purposes, one is to run the\nbitcoind/bitcoinj comparison tool which compares two separate\nimplementations of the Bitcoin protocol looking for divergence.\n\nThe other is that when run, you get a local node which can mine\na single block instantly, which is highly convenient for testing\napps during development as there's no need to wait 10 minutes for\na block on the testnet.",
      "tree": {
        "sha": "80f576f67c855485e5d82007b98a45536bbf2f9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80f576f67c855485e5d82007b98a45536bbf2f9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e4b31755534fac4ea6c20a60f719e3694252220",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e4b31755534fac4ea6c20a60f719e3694252220",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e4b31755534fac4ea6c20a60f719e3694252220",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e4b31755534fac4ea6c20a60f719e3694252220/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "70e7fba06da36218688a4cae4a5d12332c714247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70e7fba06da36218688a4cae4a5d12332c714247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70e7fba06da36218688a4cae4a5d12332c714247"
      }
    ],
    "stats": {
      "total": 1111,
      "additions": 540,
      "deletions": 571
    },
    "files": [
      {
        "sha": "1d62941e68b97730592233e4cb8b25825a5ec91d",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -147,6 +147,7 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/addrman.h \\\n     src/base58.h \\\n     src/bignum.h \\\n+    src/chainparams.h \\\n     src/checkpoints.h \\\n     src/compat.h \\\n     src/sync.h \\\n@@ -227,6 +228,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/editaddressdialog.cpp \\\n     src/qt/bitcoinaddressvalidator.cpp \\\n     src/alert.cpp \\\n+    src/chainparams.cpp \\\n     src/version.cpp \\\n     src/sync.cpp \\\n     src/util.cpp \\"
      },
      {
        "sha": "f82b102e2aa105174f57554b4a387e32b95f7e2a",
        "filename": "contrib/test-patches/bitcoind-comparison.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 196,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70e7fba06da36218688a4cae4a5d12332c714247/contrib/test-patches/bitcoind-comparison.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70e7fba06da36218688a4cae4a5d12332c714247/contrib/test-patches/bitcoind-comparison.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/test-patches/bitcoind-comparison.patch?ref=70e7fba06da36218688a4cae4a5d12332c714247",
        "patch": "@@ -1,196 +0,0 @@\n-diff --git a/contrib/test-patches/bitcoind-comparison.patch b/contrib/test-patches/bitcoind-comparison.patch\n-index 04a8618..519429a 100644\n---- a/src/main.cpp\n-+++ b/src/main.cpp\n-@@ -31,8 +31,8 @@ CTxMemPool mempool;\n- \n- map<uint256, CBlockIndex*> mapBlockIndex;\n- std::vector<CBlockIndex*> vBlockIndexByHeight;\n--uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n--static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n-+uint256 hashGenesisBlock(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\");\n-+static CBigNum bnProofOfWorkLimit(~uint256(0) >> 1);\n- CBlockIndex* pindexGenesisBlock = NULL;\n- int nBestHeight = -1;\n- uint256 nBestChainWork = 0;\n-@@ -1055,7 +1055,7 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n-     int64 nSubsidy = 50 * COIN;\n- \n-     // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n--    nSubsidy >>= (nHeight / 210000);\n-+    nSubsidy >>= (nHeight / 150);\n- \n-     return nSubsidy + nFees;\n- }\n-@@ -2736,9 +2736,9 @@ bool InitBlockIndex() {\n-         block.hashPrevBlock = 0;\n-         block.hashMerkleRoot = block.BuildMerkleTree();\n-         block.nVersion = 1;\n--        block.nTime    = 1231006505;\n--        block.nBits    = 0x1d00ffff;\n--        block.nNonce   = 2083236893;\n-+        block.nTime    = 1296688602;\n-+        block.nBits    = 0x207fffff;\n-+        block.nNonce   = 2;\n- \n-         if (fTestNet)\n-         {\n-@@ -3024,7 +3024,7 @@ bool static AlreadyHave(const CInv& inv)\n- // The message start string is designed to be unlikely to occur in normal data.\n- // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n- // a large 4-byte int at any alignment.\n--unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n-+unsigned char pchMessageStart[4] = { 0xfa, 0xbf, 0xb5, 0xda };\n- \n- \n- void static ProcessGetData(CNode* pfrom)\n-diff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp\n-index af28465..ee9a4db 100644\n---- a/src/test/miner_tests.cpp\n-+++ b/src/test/miner_tests.cpp\n-@@ -15,34 +15,117 @@ struct {\n-     unsigned char extranonce;\n-     unsigned int nonce;\n- } blockinfo[] = {\n--    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n--    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n--    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n--    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n--    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n--    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n--    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n--    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n--    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n--    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n--    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n--    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n--    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n--    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n--    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n--    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n--    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n--    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n--    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n--    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n--    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n--    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n--    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n--    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n--    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n--    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n--    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n--    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n-+{4, 2762203683},\n-+{2, 365113248},\n-+{1, 58045772},\n-+{1, 1879353512},\n-+{2, 3460563607},\n-+{2, 1389355416},\n-+{1, 2007444690},\n-+{2, 3143462790},\n-+{2, 2213743660},\n-+{1, 1218919771},\n-+{1, 4017999107},\n-+{2, 1745471173},\n-+{2, 142846780},\n-+{1, 142326754},\n-+{2, 553953301},\n-+{2, 3757796778},\n-+{1, 4002023946},\n-+{2, 3124901826},\n-+{1, 2802010589},\n-+{1, 877077181},\n-+{3, 3593029427},\n-+{2, 3969866902},\n-+{2, 3392125996},\n-+{1, 1805972490},\n-+{2, 22889779},\n-+{1, 1846647676},\n-+{2, 1139340052},\n-+{2, 664153912},\n-+{2, 3044128027},\n-+{2, 3010194979},\n-+{2, 3514377385},\n-+{2, 1807880922},\n-+{1, 1661815113},\n-+{2, 2588692156},\n-+{2, 1431037239},\n-+{1, 3594379210},\n-+{2, 2701839377},\n-+{1, 1973060452},\n-+{2, 4218620174},\n-+{1, 3895224884},\n-+{1, 3812528857},\n-+{3, 1703867851},\n-+{2, 3123904294},\n-+{5, 36151564},\n-+{1, 2846294357},\n-+{5, 3499546633},\n-+{1, 924279160},\n-+{1, 2198572304},\n-+{1, 3336802574},\n-+{2, 2185182379},\n-+{1, 2575632458},\n-+{1, 1965161345},\n-+{1, 2865408940},\n-+{1, 3594887915},\n-+{5, 2062161796},\n-+{5, 2641251194},\n-+{1, 1290342362},\n-+{1, 2883355438},\n-+{6, 1244984107},\n-+{2, 4065479712},\n-+{2, 465481866},\n-+{1, 2907174016},\n-+{1, 2667735788},\n-+{1, 363417673},\n-+{2, 3519780275},\n-+{2, 4165713317},\n-+{1, 262548689},\n-+{1, 3764359529},\n-+{1, 2027001003},\n-+{5, 1043862655},\n-+{5, 1937481940},\n-+{1, 1664585233},\n-+{1, 1834979792},\n-+{2, 2288070330},\n-+{2, 3915617412},\n-+{1, 3086662813},\n-+{2, 430970259},\n-+{1, 1519443249},\n-+{2, 1540874280},\n-+{2, 2496660261},\n-+{1, 2847522842},\n-+{1, 977329763},\n-+{1, 1458040519},\n-+{5, 2241822454},\n-+{1, 4253963824},\n-+{1, 722247551},\n-+{1, 3127905834},\n-+{1, 1903207432},\n-+{1, 1893631657},\n-+{1, 1960201429},\n-+{1, 1239890082},\n-+{2, 1762702850},\n-+{0, 1681675873},\n-+{1, 1411795775},\n-+{2, 2548720534},\n-+{2, 1427588186},\n-+{2, 65566621},\n-+{1, 2566081936},\n-+{1, 3229297415},\n-+{1, 3756168812},\n-+{1, 826394561},\n-+{1, 3015022068},\n-+{1, 1935326986},\n-+{5, 1648098256},\n-+{2, 3545360164},\n-+{1, 4106897609},\n-+{1, 1528415857},\n-+{1, 2707734286},\n-+{2, 3149837061},\n-+{2, 4263280906},\n-+\n- };\n- \n- // NOTE: These tests rely on CreateNewBlock doing its own self-validation!"
      },
      {
        "sha": "e00847aadb680aa1234f80858c8ac30ac937bdf8",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -19,9 +19,6 @@ using namespace std;\n map<uint256, CAlert> mapAlerts;\n CCriticalSection cs_mapAlerts;\n \n-static const char* pszMainKey = \"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\";\n-static const char* pszTestKey = \"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\";\n-\n void CUnsignedAlert::SetNull()\n {\n     nVersion = 1;\n@@ -144,7 +141,7 @@ bool CAlert::RelayTo(CNode* pnode) const\n \n bool CAlert::CheckSignature() const\n {\n-    CPubKey key(ParseHex(fTestNet ? pszTestKey : pszMainKey));\n+    CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n         return error(\"CAlert::CheckSignature() : verify signature failed\");\n "
      },
      {
        "sha": "630d6fe9aa7421e8796413ed07757cdd70b5e327",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 23,
        "deletions": 84,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -18,6 +18,7 @@\n #include <string>\n #include <vector>\n \n+#include \"chainparams.h\"\n #include \"bignum.h\"\n #include \"key.h\"\n #include \"script.h\"\n@@ -270,21 +271,13 @@ class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n class CBitcoinAddress : public CBase58Data\n {\n public:\n-    enum\n-    {\n-        PUBKEY_ADDRESS = 0,\n-        SCRIPT_ADDRESS = 5,\n-        PUBKEY_ADDRESS_TEST = 111,\n-        SCRIPT_ADDRESS_TEST = 196,\n-    };\n-\n     bool Set(const CKeyID &id) {\n-        SetData(fTestNet ? PUBKEY_ADDRESS_TEST : PUBKEY_ADDRESS, &id, 20);\n+        SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n         return true;\n     }\n \n     bool Set(const CScriptID &id) {\n-        SetData(fTestNet ? SCRIPT_ADDRESS_TEST : SCRIPT_ADDRESS, &id, 20);\n+        SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n         return true;\n     }\n \n@@ -295,32 +288,10 @@ class CBitcoinAddress : public CBase58Data\n \n     bool IsValid() const\n     {\n-        unsigned int nExpectedSize = 20;\n-        bool fExpectTestNet = false;\n-        switch(nVersion)\n-        {\n-            case PUBKEY_ADDRESS:\n-                nExpectedSize = 20; // Hash of public key\n-                fExpectTestNet = false;\n-                break;\n-            case SCRIPT_ADDRESS:\n-                nExpectedSize = 20; // Hash of CScript\n-                fExpectTestNet = false;\n-                break;\n-\n-            case PUBKEY_ADDRESS_TEST:\n-                nExpectedSize = 20;\n-                fExpectTestNet = true;\n-                break;\n-            case SCRIPT_ADDRESS_TEST:\n-                nExpectedSize = 20;\n-                fExpectTestNet = true;\n-                break;\n-\n-            default:\n-                return false;\n-        }\n-        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+        bool fCorrectSize = vchData.size() == 20;\n+        bool fKnownVersion = nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                             nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        return fCorrectSize && fKnownVersion;\n     }\n \n     CBitcoinAddress()\n@@ -345,48 +316,27 @@ class CBitcoinAddress : public CBase58Data\n     CTxDestination Get() const {\n         if (!IsValid())\n             return CNoDestination();\n-        switch (nVersion) {\n-        case PUBKEY_ADDRESS:\n-        case PUBKEY_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n+        uint160 id;\n+        memcpy(&id, &vchData[0], 20);\n+        if (nVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return CKeyID(id);\n-        }\n-        case SCRIPT_ADDRESS:\n-        case SCRIPT_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n+        else if (nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n             return CScriptID(id);\n-        }\n-        }\n-        return CNoDestination();\n+        else\n+            return CNoDestination();\n     }\n \n     bool GetKeyID(CKeyID &keyID) const {\n-        if (!IsValid())\n+        if (!IsValid() || nVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n             return false;\n-        switch (nVersion) {\n-        case PUBKEY_ADDRESS:\n-        case PUBKEY_ADDRESS_TEST: {\n-            uint160 id;\n-            memcpy(&id, &vchData[0], 20);\n-            keyID = CKeyID(id);\n-            return true;\n-        }\n-        default: return false;\n-        }\n+        uint160 id;\n+        memcpy(&id, &vchData[0], 20);\n+        keyID = CKeyID(id);\n+        return true;\n     }\n \n     bool IsScript() const {\n-        if (!IsValid())\n-            return false;\n-        switch (nVersion) {\n-        case SCRIPT_ADDRESS:\n-        case SCRIPT_ADDRESS_TEST: {\n-            return true;\n-        }\n-        default: return false;\n-        }\n+        return IsValid() && nVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n     }\n };\n \n@@ -401,7 +351,7 @@ class CBitcoinSecret : public CBase58Data\n     void SetKey(const CKey& vchSecret)\n     {\n         assert(vchSecret.IsValid());\n-        SetData(fTestNet ? 239 : 128, vchSecret.begin(), vchSecret.size());\n+        SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n         if (vchSecret.IsCompressed())\n             vchData.push_back(1);\n     }\n@@ -415,20 +365,9 @@ class CBitcoinSecret : public CBase58Data\n \n     bool IsValid() const\n     {\n-        bool fExpectTestNet = false;\n-        switch(nVersion)\n-        {\n-            case 128:\n-                break;\n-\n-            case 239:\n-                fExpectTestNet = true;\n-                break;\n-\n-            default:\n-                return false;\n-        }\n-        return fExpectTestNet == fTestNet && (vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1));\n+        bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n+        bool fCorrectVersion = nVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        return fExpectedFormat && fCorrectVersion;\n     }\n \n     bool SetString(const char* pszSecret)"
      },
      {
        "sha": "bc23cf55071009fc06f483d1b02f6fb38abd5a9d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -67,6 +67,10 @@ bool AppInit(int argc, char* argv[])\n \n         if (fCommandLine)\n         {\n+            if (!SelectParamsFromCommandLine()) {\n+                fprintf(stderr, \"Error: invalid combination of -regtest and -testnet.\\n\");\n+                return false;\n+            }\n             int ret = CommandLineRPC(argc, argv);\n             exit(ret);\n         }"
      },
      {
        "sha": "febb475db38056ebe51705378072abc043c7592d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"init.h\"\n #include \"util.h\"\n #include \"sync.h\"\n@@ -38,11 +39,6 @@ static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n \n-static inline unsigned short GetDefaultRPCPort()\n-{\n-    return GetBoolArg(\"-testnet\", false) ? 18332 : 8332;\n-}\n-\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -724,8 +720,8 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n void StartRPCThreads()\n {\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    if ((mapArgs[\"-rpcpassword\"] == \"\") ||\n-        (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"]))\n+    if (((mapArgs[\"-rpcpassword\"] == \"\") ||\n+         (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"])) && Params().RequireRPCPassword())\n     {\n         unsigned char rand_pwd[32];\n         RAND_bytes(rand_pwd, 32);\n@@ -780,7 +776,7 @@ void StartRPCThreads()\n     // Try a dual IPv6/IPv4 socket, falling back to separate IPv4 and IPv6 sockets\n     const bool loopback = !mapArgs.count(\"-rpcallowip\");\n     asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n-    ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", GetDefaultRPCPort()));\n+    ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", Params().RPCPort()));\n     boost::system::error_code v6_only_error;\n     boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n \n@@ -1078,7 +1074,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n     asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);\n     SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);\n     iostreams::stream< SSLIOStreamDevice<asio::ip::tcp> > stream(d);\n-    if (!d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(GetDefaultRPCPort()))))\n+    if (!d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(Params().RPCPort()))))\n         throw runtime_error(\"couldn't connect to server\");\n \n     // HTTP basic authentication"
      },
      {
        "sha": "8859424d201a6d58808a2f7e52c43d4b51a1178d",
        "filename": "src/chainparams.cpp",
        "status": "added",
        "additions": 286,
        "deletions": 0,
        "changes": 286,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -0,0 +1,286 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"assert.h\"\n+\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+//\n+// Main network\n+//\n+\n+unsigned int pnSeed[] =\n+{\n+    0xe473042e, 0xb177f2ad, 0xd63f3fb2, 0xf864f736, 0x44a23ac7, 0xcf6d9650, 0xd648042e, 0x0536f447,\n+    0x3c654ed0, 0x3e16a5bc, 0xa38e09b0, 0xdfae795b, 0xabfeca5b, 0x94ad7840, 0xf3b9f1c7, 0xbe70e0ad,\n+    0x3bbd09b0, 0x8d0c7dd5, 0x3b2a7332, 0x1a06175e, 0x581f175e, 0xca0d2dcc, 0x0fdbc658, 0xcf591ec7,\n+    0x295a12b2, 0xb4707bce, 0x68bb09b0, 0x4e735747, 0x89709553, 0x05a7814e, 0x5b8ec658, 0x402c5512,\n+    0xe80d0905, 0x17681a5e, 0xc02aa748, 0x9f811741, 0x5f321cb0, 0x23e1ee47, 0xaf7f170c, 0xaa240ab0,\n+    0xedea6257, 0x76106bc1, 0x2cf310cc, 0x08612acb, 0x9c682e4e, 0x8e963c6c, 0x443c795b, 0x22e246b8,\n+    0xfa1f2dcc, 0x90118140, 0x3821042e, 0x33c3fd2e, 0x10046d5b, 0x40d14b3e, 0x7fb8f8ce, 0x67696550,\n+    0xeeecbe58, 0x4f341745, 0x46b8fbd5, 0xc8463932, 0x6b73e862, 0x4c715932, 0x4a6785d5, 0xce3a64c2,\n+    0xde9604c7, 0x9b06884f, 0x18002a45, 0xea9bc345, 0xc4f1c658, 0xe475c1c7, 0xdd3e795b, 0x9722175e,\n+    0x34562f4e, 0x66c46e4e, 0x40bb1243, 0x7d9171d0, 0x17b8dbd5, 0x63cbfd2e, 0x1a08b8d8, 0x6175a73b,\n+    0x228d2660, 0x8627c658, 0x9c566644, 0x38cca5bc, 0x3089de5b, 0x92e25f5d, 0xa393f73f, 0xcc92dc3e,\n+    0x27487446, 0x62cbfd2e, 0x9d983b45, 0xf72a09b0, 0xf75f042e, 0x6434bb6a, 0xb29e77d8, 0x19be4fd9,\n+    0x76443243, 0x9dd72645, 0x694cef43, 0x89c2efd5, 0x5f1c5058, 0x46c6e45b, 0xe1391b40, 0x77ccefd5,\n+    0x472e5a6d, 0x85709553, 0xdd4f5d4c, 0x64ef5a46, 0x7f0ae502, 0xcf08d850, 0x3460042e, 0xeafa2d42,\n+    0x793c9044, 0x9d094746, 0x1ab9b153, 0xbfe9a5bc, 0x34771fb0, 0xb7722e32, 0x1168964b, 0x19b06ab8,\n+    0x19243b25, 0x13188045, 0xb4070905, 0x728ebb5d, 0x44f24ac8, 0xa317fead, 0x642f6a57, 0x3d951f32,\n+    0x3d312e4e, 0xfac4d048, 0xefc4dd50, 0x52b9f1c7, 0xc14d3cc3, 0x0219ea44, 0x3b79d058, 0xfa217242,\n+    0x39c80647, 0xfb697252, 0x1d495a42, 0x0aa81f4e, 0x58249ab8, 0xe6a8e6c3, 0x2bc4dad8, 0x85963c6c,\n+    0xa4ce09b0, 0x2005f536, 0x5cc2703e, 0x1992de43, 0x74e86b4c, 0xe7085653, 0xf5e15a51, 0xb4872b60,\n+    0x29e2b162, 0xa07ea053, 0x8229fd18, 0x4562ec4d, 0x8dec814e, 0x36cfa4cf, 0x96461032, 0x3c8770de,\n+    0xd10a1f5f, 0x95934641, 0x97cd65d0, 0x2e35324a, 0x2566ba1f, 0x1ca1a9d1, 0xb808b8d5, 0xf9a24a5d,\n+    0xafc8d431, 0xe4b8d9b2, 0x0f5321b2, 0x330bc658, 0x74b347ce, 0x972babd5, 0x044f7d4f, 0x06562f4e,\n+    0x8b8d3c6c, 0x3507c658, 0xe4174e4d, 0xf1c009b0, 0x52249ab8, 0x27211772, 0xf6a9ba59, 0x7a391b40,\n+    0x855dc6c0, 0x291f20b2, 0xe29bc345, 0x90963c6c, 0x0af70732, 0x4242a91f, 0x4c531d48, 0xa32df948,\n+    0x627e3044, 0x65be1f54, 0x1a0cbf83, 0x6a443532, 0x8d5f1955, 0xbafa8132, 0x3534bdd5, 0xca019dd9,\n+    0x8a0d9332, 0x5584e7d8, 0x7cd1f25e, 0xeabe3fb2, 0x2945d0d1, 0x46415718, 0x70d6042e, 0x99eb76d0,\n+    0x9ece09b0, 0xb3777418, 0x5e5e91d9, 0x237a3ab0, 0xf512b62e, 0x45dec347, 0x59b7f862, 0x4c443b25,\n+    0x3cc6484b, 0x9a8ec6d1, 0x021eea44, 0xc9483944, 0xfd567e32, 0xfd204bb2, 0xc5330bcc, 0x5202894e,\n+    0xf9e309b0, 0x4cc17557, 0xdb9064ae, 0xe19e77d8, 0x25857f60, 0xeb4a15ad, 0x1f47f554, 0xea4472d9,\n+    0xd20de593, 0xf5733b25, 0x11892b54, 0x5729d35f, 0xe6188cd1, 0x488b132e, 0x541c534a, 0xa8e854ae,\n+    0xa255a66c, 0x33688763, 0xc6629ac6, 0xc20a6265, 0xcd92a059, 0x72029d3b, 0x4c298f5e, 0x51452e4e,\n+    0xbb065058, 0x15fd2dcc, 0xf40c135e, 0x615a0bad, 0x0c6a6805, 0x4971a7ad, 0x17f2a5d5, 0xf8babf47,\n+    0xb61f50ad, 0x4e1451b1, 0xf72d9252, 0x5c2abe58, 0xbd987c61, 0x084ae5cf, 0x20781fb0, 0x38b0f160,\n+    0x18aac705, 0x14f86dc1, 0x5556f481, 0x0a36c144, 0xeb446e4c, 0x2c1c0d6c, 0xbd0ff860, 0x869f92db,\n+    0x36c94f4c, 0x05502444, 0x148fe55b, 0xd5301e59, 0xd57a8f45, 0x110dc04a, 0x8670fc36, 0xee733b25,\n+    0xca56f481, 0x2a5c3bae, 0x844b0905, 0x1e51fe53, 0x0241c244, 0x59c0614e, 0x94e70a55, 0x7312fead,\n+    0xb735be44, 0xa55d0905, 0x2f63962e, 0x14a4e15b, 0x63f8f05c, 0x62d0d262, 0x3cab41ad, 0x87f1b1cb,\n+    0x018da6b8, 0xb3967dd5, 0xcb56f481, 0x685ad718, 0x3b4aeeca, 0x8d106bc1, 0x51180905, 0x72660f48,\n+    0x1521a243, 0x5b56f481, 0x6390e560, 0xdd61464e, 0x58353b25, 0x553fc062, 0x27c45d59, 0xacc62e4e,\n+    0x0d5a1cd9, 0x7f65f442, 0xbdeef660, 0xf1bd1855, 0xf8473cae, 0x13b120b2, 0x442440d0, 0x53fd4352,\n+    0xa305fc57, 0x458be84d, 0x639ce1c3, 0xebaaee47, 0x95e2c247, 0xf056f481, 0x6256f481, 0x1d87c65e,\n+    0x0a453418, 0x5beb175e, 0xd64f1618, 0xc360795b, 0x2fbf5753, 0xa8c58e53, 0x651cec52, 0x9d37b043,\n+    0x124a9758, 0x5242e4a9, 0x89913c6c, 0x880efe2e, 0x2f2f2f0c, 0x72b26751, 0x2896e46d, 0x80f4166c,\n+    0x320d59ad, 0xc50151d0, 0x11a8aa43, 0xccf56057, 0x5fbad118, 0x4719b151, 0x2b5f4bc0, 0x4d7a4a50,\n+    0xad06e047, 0x62ef5a46, 0x5aebde58, 0xdf7aa66c, 0x851acb50, 0x66b9a559, 0x3e9bb153, 0xcc512f2e,\n+    0xc073b08e, 0xd519be58, 0xe981ea4d, 0x12fd50cb, 0x378739ad, 0x06683cae, 0xa22310b2, 0xc185c705,\n+    0x8741b545, 0xa26c8318, 0x22d5bc43, 0x39201ec0, 0x68581e3e, 0xdc9bcf62, 0xd508cc82, 0xb149675b,\n+    0x4c9609b0, 0x84feb84c, 0x08291e2e, 0xfd2253b2, 0x1fd269c1, 0xc9483932, 0x4d641fb0, 0x7d37c918,\n+    0xa9de20ad, 0x77e2d655, 0x6d421b59, 0xd7668f80, 0xced09b62, 0xa9e5a5bc, 0xa4074e18, 0x60fc5ecc,\n+    0x01300148, 0x68062444, 0xb4224847, 0xed3aa443, 0xb772fb43, 0x9f56f481, 0x220dfd18, 0x8e1c3d6c,\n+    0xc44f09b0, 0x7df2bb73, 0xe22fb844, 0xea534242, 0xb6a755d4, 0xa036654b, 0x138ece5b, 0xda65d3c3,\n+    0x955871bc, 0x792124b0, 0xfc82594c, 0x851d494b, 0x2c7aee47, 0x26af46b8, 0x1416252e, 0xa8abb944,\n+    0x36c49d25, 0x674f645d, 0x363646b8, 0x9e1a2942, 0x66d0c154, 0xc6c2a545, 0x3570f2ad, 0xe7d547c7,\n+    0x7d104932, 0x18cb9c18, 0x1dcfa4cf, 0xd156f481, 0x2a02b91f, 0x3eeb3fa8, 0xcac4175e, 0x34146d42,\n+    0x994c4d46, 0x5666f440, 0x85d6713e, 0x5ecb296c, 0x0ea0ae46, 0x87e69f42, 0xc58409b0, 0x1f3436ae,\n+    0x21dc6a57, 0x4ad1cd42, 0xfb8c1a4c, 0x52d3dab2, 0x3769894b, 0xb52f1c62, 0x3677916d, 0x82b3fe57,\n+    0x493d4ac6, 0x9f963c6c, 0x5d91ff60, 0x458e0dad, 0xa49d0947, 0x491a3e18, 0x4aadcd5b, 0x0e46494b,\n+    0x1d1610ad, 0x1a10af5d, 0x4956f481, 0x207a3eae, 0x77e73244, 0xfa3b8742, 0x3261fc36, 0xfcebf536,\n+    0x1662e836, 0xf655f636, 0xa2dbd0ad, 0x23036693, 0x30448432, 0xa2b03463, 0x30730344, 0x8e4a6882,\n+    0x0c50a1cb, 0xc8d8c06b, 0xc9cd6191, 0xf443db50, 0xa9553c50, 0x23145847, 0xc35da66c, 0x29c12a60,\n+    0x55c2b447, 0x7434f75c, 0x61660640, 0xde2a7018, 0xc639494c, 0x1c306fce, 0x19b89244, 0xd29a6462,\n+    0x462cd1b2, 0x29902f44, 0x2817fa53, 0x21a30905, 0x7777ae46, 0x288443a1, 0x7bee5148, 0xc2a8b043,\n+    0xf5c3d35f, 0x2311ef84, 0x57de08a4, 0x6b221bb2, 0xf2625846, 0x4b9e09b0, 0xa24f880e, 0x22b11447,\n+    0xb3a0c744, 0x919e77d8, 0xec8b64ae, 0xff5c8d45, 0x7b15b484, 0x32679a5f, 0xba80b62e, 0x05c25c61,\n+    0x60014746, 0x5e8fb04c, 0xe67c0905, 0x4329c658, 0xac8fe555, 0xf875e647, 0x67406386, 0x35ceea18,\n+    0xbb79484b, 0xd7b9fa62, 0x238209b0, 0x208a1d32, 0x9630995e, 0x039c1318, 0x6e48006c, 0x60582344,\n+    0xadbb0150, 0x853fd462, 0x03772e4e, 0x652ce960, 0x49b630ad, 0x9993af43, 0x3735b34b, 0x548a07d9,\n+    0x55a44aad, 0xa23d1bcc, 0xfdbb2f4e, 0x530b24a0, 0x0a44b451, 0x6827c657, 0x1f66494b, 0x4e680a47,\n+    0x77e7b747, 0xa5eb3fa8, 0x6649764a, 0xd4e76c4b, 0x2c691fb0, 0xf1292e44, 0xc6d6c774, 0x85d23775,\n+    0x28275f4d, 0x259ae46d, 0x02424e81, 0x5f16be58, 0xe707c658, 0x49eae5c7, 0xd5d147ad, 0x9a7abdc3,\n+    0xe8ac7fc7, 0x84ec3aae, 0xc24942d0, 0x294aa318, 0x08ac3d18, 0x8894042e, 0xb24609b0, 0x9bcaab58,\n+    0xc400f712, 0xd5c512b8, 0x2c02cc62, 0x25080fd8, 0xed74a847, 0x18a5ec5e, 0x9850ec6d, 0xf8909758,\n+    0x7f56f481, 0x4496f23c, 0xae27784f, 0xcb7cd93e, 0x06e32860, 0x50b9a84f, 0x3660434a, 0x09161f5f,\n+    0x900486bc, 0x08055459, 0xe7ec1017, 0x7e39494c, 0x4f443b25, 0x14751a8a, 0x717d03d4, 0xbd0e24d8,\n+    0x054b6f56, 0x854c496c, 0xd92a454a, 0xc39bd054, 0x6093614b, 0x9dbad754, 0x5bf0604a, 0x99f22305\n+};\n+\n+class CMainParams : public CChainParams {\n+public:\n+    CMainParams() {\n+        // The message start string is designed to be unlikely to occur in normal data.\n+        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+        // a large 4-byte int at any alignment.\n+        pchMessageStart[0] = 0xf9;\n+        pchMessageStart[1] = 0xbe;\n+        pchMessageStart[2] = 0xb4;\n+        pchMessageStart[3] = 0xd9;\n+        vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n+        nDefaultPort = 8333;\n+        nRPCPort = 8332;\n+        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 32);\n+        nSubsidyHalvingInterval = 210000;\n+\n+        // Build the genesis block. Note that the output of the genesis coinbase cannot\n+        // be spent as it did not originally exist in the database.\n+        //\n+        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+        //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+        //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+        //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+        //   vMerkleTree: 4a5e1e\n+        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+        CTransaction txNew;\n+        txNew.vin.resize(1);\n+        txNew.vout.resize(1);\n+        txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+        txNew.vout[0].nValue = 50 * COIN;\n+        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+        genesis.vtx.push_back(txNew);\n+        genesis.hashPrevBlock = 0;\n+        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+        genesis.nVersion = 1;\n+        genesis.nTime    = 1231006505;\n+        genesis.nBits    = 0x1d00ffff;\n+        genesis.nNonce   = 2083236893;\n+\n+        hashGenesisBlock = genesis.GetHash();\n+        assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n+        assert(genesis.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"));\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\"));\n+        vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\"));\n+        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 0;\n+        base58Prefixes[SCRIPT_ADDRESS] = 5;\n+        base58Prefixes[SECRET_KEY] = 128;\n+\n+        // Convert the pnSeeds array into usable address objects.\n+        for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n+        {\n+            // It'll only connect to one or two seed nodes because once it connects,\n+            // it'll get a pile of addresses with newer timestamps.\n+            // Seed nodes are given a random 'last seen time' of between one and two\n+            // weeks ago.\n+            const int64 nOneWeek = 7*24*60*60;\n+            struct in_addr ip;\n+            memcpy(&ip, &pnSeed[i], sizeof(ip));\n+            CAddress addr(CService(ip, GetDefaultPort()));\n+            addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n+            vFixedSeeds.push_back(addr);\n+        }\n+    }\n+\n+    virtual const CBlock& GenesisBlock() const { return genesis; }\n+    virtual Network NetworkID() const { return CChainParams::MAIN; }\n+\n+    virtual const vector<CAddress>& FixedSeeds() const {\n+        return vFixedSeeds;\n+    }\n+protected:\n+    CBlock genesis;\n+    vector<CAddress> vFixedSeeds;\n+};\n+static CMainParams mainParams;\n+\n+\n+//\n+// Testnet (v3)\n+//\n+class CTestNetParams : public CMainParams {\n+public:\n+    CTestNetParams() {\n+        // The message start string is designed to be unlikely to occur in normal data.\n+        // The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n+        // a large 4-byte int at any alignment.\n+        pchMessageStart[0] = 0x0b;\n+        pchMessageStart[1] = 0x11;\n+        pchMessageStart[2] = 0x09;\n+        pchMessageStart[3] = 0x07;\n+        vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n+        nDefaultPort = 18333;\n+        nRPCPort = 18332;\n+        strDataDir = \"testnet3\";\n+\n+        // Modify the testnet genesis block so the timestamp is valid for a later start.\n+        genesis.nTime = 1296688602;\n+        genesis.nNonce = 414098458;\n+        hashGenesisBlock = genesis.GetHash();\n+        assert(hashGenesisBlock == uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+\n+        vFixedSeeds.clear();\n+        vSeeds.clear();\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"));\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 111;\n+        base58Prefixes[SCRIPT_ADDRESS] = 196;\n+        base58Prefixes[SECRET_KEY] = 239;\n+\n+    }\n+    virtual Network NetworkID() const { return CChainParams::TESTNET; }\n+};\n+static CTestNetParams testNetParams;\n+\n+\n+//\n+// Regression test\n+//\n+class CRegTestParams : public CTestNetParams {\n+public:\n+    CRegTestParams() {\n+        pchMessageStart[0] = 0xfa;\n+        pchMessageStart[1] = 0xbf;\n+        pchMessageStart[2] = 0xb5;\n+        pchMessageStart[3] = 0xda;\n+        nSubsidyHalvingInterval = 150;\n+        bnProofOfWorkLimit = CBigNum(~uint256(0) >> 1);\n+        genesis.nTime = 1296688602;\n+        genesis.nBits = 0x207fffff;\n+        genesis.nNonce = 2;\n+        hashGenesisBlock = genesis.GetHash();\n+        nDefaultPort = 18444;\n+        strDataDir = \"regtest\";\n+        assert(hashGenesisBlock == uint256(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        base58Prefixes[PUBKEY_ADDRESS] = 0;\n+        base58Prefixes[SCRIPT_ADDRESS] = 5;\n+        base58Prefixes[SECRET_KEY] = 128;\n+    }\n+\n+    virtual bool RequireRPCPassword() const { return false; }\n+    virtual Network NetworkID() const { return CChainParams::REGTEST; }\n+};\n+static CRegTestParams regTestParams;\n+\n+static CChainParams *pCurrentParams = &mainParams;\n+\n+const CChainParams &Params() {\n+    return *pCurrentParams;\n+}\n+\n+void SelectParams(CChainParams::Network network) {\n+    switch (network) {\n+        case CChainParams::MAIN:\n+            pCurrentParams = &mainParams;\n+            break;\n+        case CChainParams::TESTNET:\n+            pCurrentParams = &testNetParams;\n+            break;\n+        case CChainParams::REGTEST:\n+            pCurrentParams = &regTestParams;\n+            break;\n+        default:\n+            assert(false && \"Unimplemented network\");\n+            return;\n+    }\n+}\n+\n+bool SelectParamsFromCommandLine() {\n+    bool fRegTest = GetBoolArg(\"-regtest\", false);\n+    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+\n+    if (fTestNet && fRegTest) {\n+        return false;\n+    }\n+\n+    if (fRegTest) {\n+        SelectParams(CChainParams::REGTEST);\n+    } else if (fTestNet) {\n+        SelectParams(CChainParams::TESTNET);\n+    } else {\n+        SelectParams(CChainParams::MAIN);\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "572712b5893091ddab8f0d3cde9f7fd6dc79506b",
        "filename": "src/chainparams.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CHAIN_PARAMS_H\n+#define BITCOIN_CHAIN_PARAMS_H\n+\n+#include \"bignum.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+using namespace std;\n+\n+#define MESSAGE_START_SIZE 4\n+typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n+\n+class CAddress;\n+class CBlock;\n+\n+struct CDNSSeedData {\n+    string name, host;\n+    CDNSSeedData(const string &strName, const string &strHost) : name(strName), host(strHost) {}\n+};\n+\n+/**\n+ * CChainParams defines various tweakable parameters of a given instance of the\n+ * Bitcoin system. There are three: the main network on which people trade goods\n+ * and services, the public test network which gets reset from time to time and\n+ * a regression test mode which is intended for private networks only. It has\n+ * minimal difficulty to ensure that blocks can be found instantly.\n+ */\n+class CChainParams\n+{\n+public:\n+    enum Network {\n+        MAIN,\n+        TESTNET,\n+        REGTEST,\n+    };\n+\n+    enum Base58Type {\n+        PUBKEY_ADDRESS,\n+        SCRIPT_ADDRESS,\n+        SECRET_KEY,\n+\n+        MAX_BASE58_TYPES\n+    };\n+\n+    const uint256& HashGenesisBlock() const { return hashGenesisBlock; }\n+    const MessageStartChars& MessageStart() const { return pchMessageStart; }\n+    const vector<unsigned char>& AlertKey() const { return vAlertPubKey; }\n+    int GetDefaultPort() const { return nDefaultPort; }\n+    const CBigNum& ProofOfWorkLimit() const { return bnProofOfWorkLimit; }\n+    int SubsidyHalvingInterval() const { return nSubsidyHalvingInterval; }\n+    virtual const CBlock& GenesisBlock() const = 0;\n+    virtual bool RequireRPCPassword() const { return true; }\n+    const string& DataDir() const { return strDataDir; }\n+    virtual Network NetworkID() const = 0;\n+    const vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n+    int Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n+    virtual const vector<CAddress>& FixedSeeds() const = 0;\n+    int RPCPort() const { return nRPCPort; }\n+protected:\n+    CChainParams() {};\n+\n+    uint256 hashGenesisBlock;\n+    MessageStartChars pchMessageStart;\n+    // Raw pub key bytes for the broadcast alert signing key.\n+    vector<unsigned char> vAlertPubKey;\n+    int nDefaultPort;\n+    int nRPCPort;\n+    CBigNum bnProofOfWorkLimit;\n+    int nSubsidyHalvingInterval;\n+    string strDataDir;\n+    vector<CDNSSeedData> vSeeds;\n+    int base58Prefixes[MAX_BASE58_TYPES];\n+};\n+\n+/**\n+ * Return the currently selected parameters. This won't change after app startup\n+ * outside of the unit tests.\n+ */\n+const CChainParams &Params();\n+\n+/** Sets the params returned by Params() to those for the given network. */\n+void SelectParams(CChainParams::Network network);\n+\n+/**\n+ * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n+ * Returns false if an invalid combination is given.\n+ */\n+bool SelectParamsFromCommandLine();\n+\n+inline bool TestNet() {\n+    // Note: it's deliberate that this returns \"false\" for regression test mode.\n+    return Params().NetworkID() == CChainParams::TESTNET;\n+}\n+\n+#endif"
      },
      {
        "sha": "ba29e2463ebe7a499b03f11ec4f44fd3371a0277",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -56,7 +56,7 @@ namespace Checkpoints\n         60000.0     // * estimated number of transactions per day after checkpoint\n     };\n \n-    static MapCheckpoints mapCheckpointsTestnet = \n+    static MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n         ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n         ;\n@@ -68,7 +68,7 @@ namespace Checkpoints\n     };\n \n     const CCheckpointData &Checkpoints() {\n-        if (fTestNet)\n+        if (TestNet())\n             return dataTestnet;\n         else\n             return data;"
      },
      {
        "sha": "93f3f5d8c440dc9d4abc8c8b6dcfbd3eb783a521",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"db.h\"\n #include \"util.h\"\n #include \"hash.h\"\n@@ -488,8 +489,6 @@ void CDBEnv::Flush(bool fShutdown)\n // CAddrDB\n //\n \n-unsigned char CAddrDB::pchMessageStart[4] = { 0x00, 0x00, 0x00, 0x00 };\n-\n CAddrDB::CAddrDB()\n {\n     pathAddr = GetDataDir() / \"peers.dat\";\n@@ -504,7 +503,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n \n     // serialize addresses, checksum data up to that point, then append csum\n     CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(CAddrDB::pchMessageStart);\n+    ssPeers << FLATDATA(Params().MessageStart());\n     ssPeers << addr;\n     uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n     ssPeers << hash;\n@@ -569,11 +568,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n     unsigned char pchMsgTmp[4];\n     try {\n-        // de-serialize file header (CAddrDB::pchMessageStart magic number) and\n+        // de-serialize file header (network specific magic number) and ..\n         ssPeers >> FLATDATA(pchMsgTmp);\n \n-        // verify the network matches ours\n-        if (memcmp(pchMsgTmp, CAddrDB::pchMessageStart, sizeof(pchMsgTmp)))\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n             return error(\"CAddrman::Read() : invalid network magic number\");\n \n         // de-serialize address data into one CAddrMan object"
      },
      {
        "sha": "b3f269f3dabbe5f8c9f8ae08ba498ec330ebca74",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -318,14 +318,10 @@ class CAddrDB\n {\n private:\n     boost::filesystem::path pathAddr;\n-    static unsigned char pchMessageStart[4];\n-\n public:\n     CAddrDB();\n     bool Write(const CAddrMan& addr);\n     bool Read(CAddrMan& addr);\n-\n-    static void SetMessageStart(unsigned char _pchMessageStart[]) { memcpy(CAddrDB::pchMessageStart, _pchMessageStart, sizeof(CAddrDB::pchMessageStart)); }\n };\n \n #endif // BITCOIN_DB_H"
      },
      {
        "sha": "4e599048ac1f942fe5791dd4f218a6c26165bfb3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -6,13 +6,15 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"core.h\"\n+#include \"chainparams.h\"\n #include \"txdb.h\"\n #include \"walletdb.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"checkpoints.h\"\n+#include \"chainparams.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -210,6 +212,8 @@ std::string HelpMessage()\n     strUsage += \"  -logtimestamps         \" + _(\"Prepend debug output with timestamp\") + \"\\n\";\n     strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n     strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n #ifdef WIN32\n     strUsage += \"  -printtodebugger       \" + _(\"Send trace/debug info to debugger\") + \"\\n\";\n #endif\n@@ -366,8 +370,10 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     // ********************************************************* Step 2: parameter interactions\n \n-    fTestNet = GetBoolArg(\"-testnet\", false);\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n+    if (!SelectParamsFromCommandLine()) {\n+        return InitError(\"Invalid combination of -testnet and -regtest.\");\n+    }\n \n     if (mapArgs.count(\"-bind\")) {\n         // when specifying an explicit binding address, you want to listen on it\n@@ -572,7 +578,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // ********************************************************* Step 6: network initialization\n \n     RegisterNodeSignals(GetNodeSignals());\n- \n+\n     int nSocksVersion = GetArg(\"-socks\", 5);\n     if (nSocksVersion != 4 && nSocksVersion != 5)\n         return InitError(strprintf(_(\"Unknown -socks proxy version requested: %i\"), nSocksVersion));\n@@ -937,7 +943,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     nStart = GetTimeMillis();\n \n     {\n-        CAddrDB::SetMessageStart(pchMessageStart);\n         CAddrDB adb;\n         if (!adb.Read(addrman))\n             printf(\"Invalid or missing peers.dat; recreating\\n\");"
      },
      {
        "sha": "975e0f6e6c9e54713ac6b3c67e782047962363ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 94,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -11,6 +11,7 @@\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"checkqueue.h\"\n+#include \"chainparams.h\"\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n@@ -32,8 +33,6 @@ unsigned int nTransactionsUpdated = 0;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n std::vector<CBlockIndex*> vBlockIndexByHeight;\n-uint256 hashGenesisBlock(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n-static CBigNum bnProofOfWorkLimit(~uint256(0) >> 32);\n CBlockIndex* pindexGenesisBlock = NULL;\n int nBestHeight = -1;\n uint256 nBestChainWork = 0;\n@@ -201,7 +200,7 @@ void CBlockLocator::Set(const CBlockIndex* pindex)\n         if (vHave.size() > 10)\n             nStep *= 2;\n     }\n-    vHave.push_back(hashGenesisBlock);\n+    vHave.push_back(Params().HashGenesisBlock());\n }\n \n int CBlockLocator::GetDistanceBack()\n@@ -254,7 +253,7 @@ uint256 CBlockLocator::GetBlockHash()\n                 return hash;\n         }\n     }\n-    return hashGenesisBlock;\n+    return Params().HashGenesisBlock();\n }\n \n int CBlockLocator::GetHeight()\n@@ -798,7 +797,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n \n     // Rather not work on nonstandard transactions (unless -testnet)\n-    if (!fTestNet && !IsStandardTx(tx))\n+    if (!TestNet() && !IsStandardTx(tx))\n         return error(\"CTxMemPool::accept() : nonstandard transaction type\");\n \n     // is it already in the memory pool?\n@@ -873,7 +872,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fLimitFr\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n-        if (!AreInputsStandard(tx, view) && !fTestNet)\n+        if (!TestNet() && !AreInputsStandard(tx, view))\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n \n         // Note: if you modify this code to accept non-standard transactions, then\n@@ -1183,8 +1182,8 @@ int64 static GetBlockValue(int nHeight, int64 nFees)\n {\n     int64 nSubsidy = 50 * COIN;\n \n-    // Subsidy is cut in half every 210000 blocks, which will occur approximately every 4 years\n-    nSubsidy >>= (nHeight / 210000);\n+    // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n+    nSubsidy >>= (nHeight / Params().SubsidyHalvingInterval());\n \n     return nSubsidy + nFees;\n }\n@@ -1199,28 +1198,29 @@ static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n //\n unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n {\n+    const CBigNum &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n     // after nTargetSpacing*2 time between blocks:\n-    if (fTestNet && nTime > nTargetSpacing*2)\n-        return bnProofOfWorkLimit.GetCompact();\n+    if (TestNet() && nTime > nTargetSpacing*2)\n+        return bnLimit.GetCompact();\n \n     CBigNum bnResult;\n     bnResult.SetCompact(nBase);\n-    while (nTime > 0 && bnResult < bnProofOfWorkLimit)\n+    while (nTime > 0 && bnResult < bnLimit)\n     {\n         // Maximum 400% adjustment...\n         bnResult *= 4;\n         // ... in best-case exactly 4-times-normal target time\n         nTime -= nTargetTimespan*4;\n     }\n-    if (bnResult > bnProofOfWorkLimit)\n-        bnResult = bnProofOfWorkLimit;\n+    if (bnResult > bnLimit)\n+        bnResult = bnLimit;\n     return bnResult.GetCompact();\n }\n \n unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n-    unsigned int nProofOfWorkLimit = bnProofOfWorkLimit.GetCompact();\n+    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n@@ -1229,9 +1229,9 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n     // Only change once per interval\n     if ((pindexLast->nHeight+1) % nInterval != 0)\n     {\n-        // Special difficulty rule for testnet:\n-        if (fTestNet)\n+        if (TestNet())\n         {\n+            // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n             if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)\n@@ -1245,7 +1245,6 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n                 return pindex->nBits;\n             }\n         }\n-\n         return pindexLast->nBits;\n     }\n \n@@ -1269,8 +1268,8 @@ unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBl\n     bnNew *= nActualTimespan;\n     bnNew /= nTargetTimespan;\n \n-    if (bnNew > bnProofOfWorkLimit)\n-        bnNew = bnProofOfWorkLimit;\n+    if (bnNew > Params().ProofOfWorkLimit())\n+        bnNew = Params().ProofOfWorkLimit();\n \n     /// debug print\n     printf(\"GetNextWorkRequired RETARGET\\n\");\n@@ -1287,7 +1286,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bnTarget.SetCompact(nBits);\n \n     // Check range\n-    if (bnTarget <= 0 || bnTarget > bnProofOfWorkLimit)\n+    if (bnTarget <= 0 || bnTarget > Params().ProofOfWorkLimit())\n         return error(\"CheckProofOfWork() : nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n@@ -1405,7 +1404,7 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n     block.nTime = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n \n     // Updating time can change work required on testnet:\n-    if (fTestNet)\n+    if (TestNet())\n         block.nBits = GetNextWorkRequired(pindexPrev, &block);\n }\n \n@@ -1694,7 +1693,7 @@ bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsVi\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n-    if (GetHash() == hashGenesisBlock) {\n+    if (GetHash() == Params().HashGenesisBlock()) {\n         view.SetBestBlock(pindex);\n         pindexGenesisBlock = pindex;\n         return true;\n@@ -2222,7 +2221,7 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n     // Get prev block index\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n-    if (hash != hashGenesisBlock) {\n+    if (hash != Params().HashGenesisBlock()) {\n         map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"));\n@@ -2249,8 +2248,8 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (nVersion < 2)\n         {\n-            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n-                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 950, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 75, 100)))\n             {\n                 return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"));\n             }\n@@ -2259,8 +2258,8 @@ bool CBlock::AcceptBlock(CValidationState &state, CDiskBlockPos *dbp)\n         if (nVersion >= 2)\n         {\n             // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n-            if ((!fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n-                (fTestNet && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 750, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(2, pindexPrev, 51, 100)))\n             {\n                 CScript expect = CScript() << nHeight;\n                 if (!std::equal(expect.begin(), expect.end(), vtx[0].vin[0].scriptSig.begin()))\n@@ -2790,21 +2789,9 @@ void UnloadBlockIndex()\n \n bool LoadBlockIndex()\n {\n-    if (fTestNet)\n-    {\n-        pchMessageStart[0] = 0x0b;\n-        pchMessageStart[1] = 0x11;\n-        pchMessageStart[2] = 0x09;\n-        pchMessageStart[3] = 0x07;\n-        hashGenesisBlock = uint256(\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\");\n-    }\n-\n-    //\n     // Load block index from databases\n-    //\n     if (!fReindex && !LoadBlockIndexDB())\n         return false;\n-\n     return true;\n }\n \n@@ -2821,47 +2808,9 @@ bool InitBlockIndex() {\n \n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n-        // Genesis Block:\n-        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-        //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-        //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-        //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-        //   vMerkleTree: 4a5e1e\n-\n-        // Genesis block\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CTransaction txNew;\n-        txNew.vin.resize(1);\n-        txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-        txNew.vout[0].nValue = 50 * COIN;\n-        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        CBlock block;\n-        block.vtx.push_back(txNew);\n-        block.hashPrevBlock = 0;\n-        block.hashMerkleRoot = block.BuildMerkleTree();\n-        block.nVersion = 1;\n-        block.nTime    = 1231006505;\n-        block.nBits    = 0x1d00ffff;\n-        block.nNonce   = 2083236893;\n-\n-        if (fTestNet)\n-        {\n-            block.nTime    = 1296688602;\n-            block.nNonce   = 414098458;\n-        }\n-\n-        //// debug print\n-        uint256 hash = block.GetHash();\n-        printf(\"%s\\n\", hash.ToString().c_str());\n-        printf(\"%s\\n\", hashGenesisBlock.ToString().c_str());\n-        printf(\"%s\\n\", block.hashMerkleRoot.ToString().c_str());\n-        assert(block.hashMerkleRoot == uint256(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n-        block.print();\n-        assert(hash == hashGenesisBlock);\n-\n-        // Start new block file\n         try {\n+            CBlock &block = const_cast<CBlock&>(Params().GenesisBlock());\n+            // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;\n             CValidationState state;\n@@ -2978,10 +2927,10 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             try {\n                 // locate a header\n                 unsigned char buf[4];\n-                blkdat.FindByte(pchMessageStart[0]);\n+                blkdat.FindByte(Params().MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, pchMessageStart, 4))\n+                if (memcmp(buf, Params().MessageStart(), 4))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -3126,12 +3075,6 @@ bool static AlreadyHave(const CInv& inv)\n \n \n \n-// The message start string is designed to be unlikely to occur in normal data.\n-// The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n-// a large 4-byte int at any alignment.\n-unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n-\n-\n void static ProcessGetData(CNode* pfrom)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n@@ -3854,7 +3797,7 @@ bool ProcessMessages(CNode* pfrom)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, pchMessageStart, sizeof(pchMessageStart)) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0) {\n             printf(\"\\n\\nPROCESSMESSAGE: INVALID MESSAGESTART\\n\\n\");\n             fOk = false;\n             break;\n@@ -4598,8 +4541,12 @@ void static BitcoinMiner(CWallet *pwallet)\n     unsigned int nExtraNonce = 0;\n \n     try { loop {\n-        while (vNodes.empty())\n-            MilliSleep(1000);\n+        if (Params().NetworkID() != CChainParams::REGTEST) {\n+            // Busy-wait for the network to come online so we don't waste time mining\n+            // on an obsolete chain. In regtest mode we expect to fly solo.\n+            while (vNodes.empty())\n+                MilliSleep(1000);\n+        }\n \n         //\n         // Create new block\n@@ -4661,6 +4608,12 @@ void static BitcoinMiner(CWallet *pwallet)\n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n                     CheckWork(pblock, *pwalletMain, reservekey);\n                     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+\n+                    // In regression test mode, stop mining after a block is found. This\n+                    // allows developers to controllably generate a block on demand.\n+                    if (Params().NetworkID() == CChainParams::REGTEST)\n+                        throw boost::thread_interrupted();\n+\n                     break;\n                 }\n             }\n@@ -4696,7 +4649,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Check for stop or if block needs to be rebuilt\n             boost::this_thread::interruption_point();\n-            if (vNodes.empty())\n+            if (vNodes.empty() && Params().NetworkID() != CChainParams::REGTEST)\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n                 break;\n@@ -4708,7 +4661,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Update nTime every few seconds\n             UpdateTime(*pblock, pindexPrev);\n             nBlockTime = ByteReverse(pblock->nTime);\n-            if (fTestNet)\n+            if (TestNet())\n             {\n                 // Changing pblock->nTime can change work required on testnet:\n                 nBlockBits = ByteReverse(pblock->nBits);\n@@ -4728,8 +4681,12 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n     static boost::thread_group* minerThreads = NULL;\n \n     int nThreads = GetArg(\"-genproclimit\", -1);\n-    if (nThreads < 0)\n-        nThreads = boost::thread::hardware_concurrency();\n+    if (nThreads < 0) {\n+        if (Params().NetworkID() == CChainParams::REGTEST)\n+            nThreads = 1;\n+        else\n+            nThreads = boost::thread::hardware_concurrency();\n+    }\n \n     if (minerThreads != NULL)\n     {"
      },
      {
        "sha": "ec89d8bdd3fd986a565fab86a80092b7ec913981",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -70,7 +70,6 @@ extern CCriticalSection cs_main;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n extern std::vector<CBlockIndex*> vBlockIndexByHeight;\n extern std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexValid;\n-extern uint256 hashGenesisBlock;\n extern CBlockIndex* pindexGenesisBlock;\n extern int nBestHeight;\n extern uint256 nBestChainWork;\n@@ -86,7 +85,6 @@ extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n extern CCriticalSection cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n-extern unsigned char pchMessageStart[4];\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;\n@@ -353,7 +351,7 @@ class CBlockUndo\n \n         // Write index header\n         unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(pchMessageStart) << nSize;\n+        fileout << FLATDATA(Params().MessageStart()) << nSize;\n \n         // Write undo data\n         long fileOutPos = ftell(fileout);\n@@ -692,7 +690,7 @@ class CBlock : public CBlockHeader\n \n         // Write index header\n         unsigned int nSize = fileout.GetSerializeSize(*this);\n-        fileout << FLATDATA(pchMessageStart) << nSize;\n+        fileout << FLATDATA(Params().MessageStart()) << nSize;\n \n         // Write block\n         long fileOutPos = ftell(fileout);"
      },
      {
        "sha": "f17de05cb9288762c782a5e6f95287c98d9c510f",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -143,7 +143,8 @@ OBJS= \\\n     obj/bloom.o \\\n     obj/noui.o \\\n     obj/leveldb.o \\\n-    obj/txdb.o\n+    obj/txdb.o \\\n+    obj/chainparams.o\n \n \n all: bitcoind"
      },
      {
        "sha": "0adf26ef0d6ee60cff5fc9262582a400aa4d506c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 130,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"db.h\"\n #include \"net.h\"\n #include \"core.h\"\n@@ -80,7 +81,7 @@ void AddOneShot(string strDest)\n \n unsigned short GetListenPort()\n {\n-    return (unsigned short)(GetArg(\"-port\", GetDefaultPort()));\n+    return (unsigned short)(GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer\n@@ -464,7 +465,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n \n     // Connect\n     SOCKET hSocket;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, GetDefaultPort()) : ConnectSocket(addrConnect, hSocket))\n+    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort()) : ConnectSocket(addrConnect, hSocket))\n     {\n         addrman.Attempt(addrConnect);\n \n@@ -1170,53 +1171,31 @@ void MapPort(bool)\n \n \n \n-\n-\n-\n-// DNS seeds\n-// Each pair gives a source name and a seed name.\n-// The first name is used as information source for addrman.\n-// The second name should resolve to a list of seed addresses.\n-static const char *strMainNetDNSSeed[][2] = {\n-    {\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\"},\n-    {\"bluematt.me\", \"dnsseed.bluematt.me\"},\n-    {\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\"},\n-    {\"xf2.org\", \"bitseed.xf2.org\"},\n-    {NULL, NULL}\n-};\n-\n-static const char *strTestNetDNSSeed[][2] = {\n-    {\"bitcoin.petertodd.org\", \"testnet-seed.bitcoin.petertodd.org\"},\n-    {\"bluematt.me\", \"testnet-seed.bluematt.me\"},\n-    {NULL, NULL}\n-};\n-\n void ThreadDNSAddressSeed()\n {\n-    static const char *(*strDNSSeed)[2] = fTestNet ? strTestNetDNSSeed : strMainNetDNSSeed;\n-\n+    const vector<CDNSSeedData> &vSeeds = Params().DNSSeeds();\n     int found = 0;\n \n     printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-    for (unsigned int seed_idx = 0; strDNSSeed[seed_idx][0] != NULL; seed_idx++) {\n+    BOOST_FOREACH(const CDNSSeedData &seed, vSeeds) {\n         if (HaveNameProxy()) {\n-            AddOneShot(strDNSSeed[seed_idx][1]);\n+            AddOneShot(seed.host);\n         } else {\n-            vector<CNetAddr> vaddr;\n+            vector<CNetAddr> vIPs;\n             vector<CAddress> vAdd;\n-            if (LookupHost(strDNSSeed[seed_idx][1], vaddr))\n+            if (LookupHost(seed.host.c_str(), vIPs))\n             {\n-                BOOST_FOREACH(CNetAddr& ip, vaddr)\n+                BOOST_FOREACH(CNetAddr& ip, vIPs)\n                 {\n                     int nOneDay = 24*3600;\n-                    CAddress addr = CAddress(CService(ip, GetDefaultPort()));\n+                    CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()));\n                     addr.nTime = GetTime() - 3*nOneDay - GetRand(4*nOneDay); // use a random age between 3 and 7 days old\n                     vAdd.push_back(addr);\n                     found++;\n                 }\n             }\n-            addrman.Add(vAdd, CNetAddr(strDNSSeed[seed_idx][0], true));\n+            addrman.Add(vAdd, CNetAddr(seed.name, true));\n         }\n     }\n \n@@ -1234,85 +1213,6 @@ void ThreadDNSAddressSeed()\n \n \n \n-unsigned int pnSeed[] =\n-{\n-    0xe473042e, 0xb177f2ad, 0xd63f3fb2, 0xf864f736, 0x44a23ac7, 0xcf6d9650, 0xd648042e, 0x0536f447,\n-    0x3c654ed0, 0x3e16a5bc, 0xa38e09b0, 0xdfae795b, 0xabfeca5b, 0x94ad7840, 0xf3b9f1c7, 0xbe70e0ad,\n-    0x3bbd09b0, 0x8d0c7dd5, 0x3b2a7332, 0x1a06175e, 0x581f175e, 0xca0d2dcc, 0x0fdbc658, 0xcf591ec7,\n-    0x295a12b2, 0xb4707bce, 0x68bb09b0, 0x4e735747, 0x89709553, 0x05a7814e, 0x5b8ec658, 0x402c5512,\n-    0xe80d0905, 0x17681a5e, 0xc02aa748, 0x9f811741, 0x5f321cb0, 0x23e1ee47, 0xaf7f170c, 0xaa240ab0,\n-    0xedea6257, 0x76106bc1, 0x2cf310cc, 0x08612acb, 0x9c682e4e, 0x8e963c6c, 0x443c795b, 0x22e246b8,\n-    0xfa1f2dcc, 0x90118140, 0x3821042e, 0x33c3fd2e, 0x10046d5b, 0x40d14b3e, 0x7fb8f8ce, 0x67696550,\n-    0xeeecbe58, 0x4f341745, 0x46b8fbd5, 0xc8463932, 0x6b73e862, 0x4c715932, 0x4a6785d5, 0xce3a64c2,\n-    0xde9604c7, 0x9b06884f, 0x18002a45, 0xea9bc345, 0xc4f1c658, 0xe475c1c7, 0xdd3e795b, 0x9722175e,\n-    0x34562f4e, 0x66c46e4e, 0x40bb1243, 0x7d9171d0, 0x17b8dbd5, 0x63cbfd2e, 0x1a08b8d8, 0x6175a73b,\n-    0x228d2660, 0x8627c658, 0x9c566644, 0x38cca5bc, 0x3089de5b, 0x92e25f5d, 0xa393f73f, 0xcc92dc3e,\n-    0x27487446, 0x62cbfd2e, 0x9d983b45, 0xf72a09b0, 0xf75f042e, 0x6434bb6a, 0xb29e77d8, 0x19be4fd9,\n-    0x76443243, 0x9dd72645, 0x694cef43, 0x89c2efd5, 0x5f1c5058, 0x46c6e45b, 0xe1391b40, 0x77ccefd5,\n-    0x472e5a6d, 0x85709553, 0xdd4f5d4c, 0x64ef5a46, 0x7f0ae502, 0xcf08d850, 0x3460042e, 0xeafa2d42,\n-    0x793c9044, 0x9d094746, 0x1ab9b153, 0xbfe9a5bc, 0x34771fb0, 0xb7722e32, 0x1168964b, 0x19b06ab8,\n-    0x19243b25, 0x13188045, 0xb4070905, 0x728ebb5d, 0x44f24ac8, 0xa317fead, 0x642f6a57, 0x3d951f32,\n-    0x3d312e4e, 0xfac4d048, 0xefc4dd50, 0x52b9f1c7, 0xc14d3cc3, 0x0219ea44, 0x3b79d058, 0xfa217242,\n-    0x39c80647, 0xfb697252, 0x1d495a42, 0x0aa81f4e, 0x58249ab8, 0xe6a8e6c3, 0x2bc4dad8, 0x85963c6c,\n-    0xa4ce09b0, 0x2005f536, 0x5cc2703e, 0x1992de43, 0x74e86b4c, 0xe7085653, 0xf5e15a51, 0xb4872b60,\n-    0x29e2b162, 0xa07ea053, 0x8229fd18, 0x4562ec4d, 0x8dec814e, 0x36cfa4cf, 0x96461032, 0x3c8770de,\n-    0xd10a1f5f, 0x95934641, 0x97cd65d0, 0x2e35324a, 0x2566ba1f, 0x1ca1a9d1, 0xb808b8d5, 0xf9a24a5d,\n-    0xafc8d431, 0xe4b8d9b2, 0x0f5321b2, 0x330bc658, 0x74b347ce, 0x972babd5, 0x044f7d4f, 0x06562f4e,\n-    0x8b8d3c6c, 0x3507c658, 0xe4174e4d, 0xf1c009b0, 0x52249ab8, 0x27211772, 0xf6a9ba59, 0x7a391b40,\n-    0x855dc6c0, 0x291f20b2, 0xe29bc345, 0x90963c6c, 0x0af70732, 0x4242a91f, 0x4c531d48, 0xa32df948,\n-    0x627e3044, 0x65be1f54, 0x1a0cbf83, 0x6a443532, 0x8d5f1955, 0xbafa8132, 0x3534bdd5, 0xca019dd9,\n-    0x8a0d9332, 0x5584e7d8, 0x7cd1f25e, 0xeabe3fb2, 0x2945d0d1, 0x46415718, 0x70d6042e, 0x99eb76d0,\n-    0x9ece09b0, 0xb3777418, 0x5e5e91d9, 0x237a3ab0, 0xf512b62e, 0x45dec347, 0x59b7f862, 0x4c443b25,\n-    0x3cc6484b, 0x9a8ec6d1, 0x021eea44, 0xc9483944, 0xfd567e32, 0xfd204bb2, 0xc5330bcc, 0x5202894e,\n-    0xf9e309b0, 0x4cc17557, 0xdb9064ae, 0xe19e77d8, 0x25857f60, 0xeb4a15ad, 0x1f47f554, 0xea4472d9,\n-    0xd20de593, 0xf5733b25, 0x11892b54, 0x5729d35f, 0xe6188cd1, 0x488b132e, 0x541c534a, 0xa8e854ae,\n-    0xa255a66c, 0x33688763, 0xc6629ac6, 0xc20a6265, 0xcd92a059, 0x72029d3b, 0x4c298f5e, 0x51452e4e,\n-    0xbb065058, 0x15fd2dcc, 0xf40c135e, 0x615a0bad, 0x0c6a6805, 0x4971a7ad, 0x17f2a5d5, 0xf8babf47,\n-    0xb61f50ad, 0x4e1451b1, 0xf72d9252, 0x5c2abe58, 0xbd987c61, 0x084ae5cf, 0x20781fb0, 0x38b0f160,\n-    0x18aac705, 0x14f86dc1, 0x5556f481, 0x0a36c144, 0xeb446e4c, 0x2c1c0d6c, 0xbd0ff860, 0x869f92db,\n-    0x36c94f4c, 0x05502444, 0x148fe55b, 0xd5301e59, 0xd57a8f45, 0x110dc04a, 0x8670fc36, 0xee733b25,\n-    0xca56f481, 0x2a5c3bae, 0x844b0905, 0x1e51fe53, 0x0241c244, 0x59c0614e, 0x94e70a55, 0x7312fead,\n-    0xb735be44, 0xa55d0905, 0x2f63962e, 0x14a4e15b, 0x63f8f05c, 0x62d0d262, 0x3cab41ad, 0x87f1b1cb,\n-    0x018da6b8, 0xb3967dd5, 0xcb56f481, 0x685ad718, 0x3b4aeeca, 0x8d106bc1, 0x51180905, 0x72660f48,\n-    0x1521a243, 0x5b56f481, 0x6390e560, 0xdd61464e, 0x58353b25, 0x553fc062, 0x27c45d59, 0xacc62e4e,\n-    0x0d5a1cd9, 0x7f65f442, 0xbdeef660, 0xf1bd1855, 0xf8473cae, 0x13b120b2, 0x442440d0, 0x53fd4352,\n-    0xa305fc57, 0x458be84d, 0x639ce1c3, 0xebaaee47, 0x95e2c247, 0xf056f481, 0x6256f481, 0x1d87c65e,\n-    0x0a453418, 0x5beb175e, 0xd64f1618, 0xc360795b, 0x2fbf5753, 0xa8c58e53, 0x651cec52, 0x9d37b043,\n-    0x124a9758, 0x5242e4a9, 0x89913c6c, 0x880efe2e, 0x2f2f2f0c, 0x72b26751, 0x2896e46d, 0x80f4166c,\n-    0x320d59ad, 0xc50151d0, 0x11a8aa43, 0xccf56057, 0x5fbad118, 0x4719b151, 0x2b5f4bc0, 0x4d7a4a50,\n-    0xad06e047, 0x62ef5a46, 0x5aebde58, 0xdf7aa66c, 0x851acb50, 0x66b9a559, 0x3e9bb153, 0xcc512f2e,\n-    0xc073b08e, 0xd519be58, 0xe981ea4d, 0x12fd50cb, 0x378739ad, 0x06683cae, 0xa22310b2, 0xc185c705,\n-    0x8741b545, 0xa26c8318, 0x22d5bc43, 0x39201ec0, 0x68581e3e, 0xdc9bcf62, 0xd508cc82, 0xb149675b,\n-    0x4c9609b0, 0x84feb84c, 0x08291e2e, 0xfd2253b2, 0x1fd269c1, 0xc9483932, 0x4d641fb0, 0x7d37c918,\n-    0xa9de20ad, 0x77e2d655, 0x6d421b59, 0xd7668f80, 0xced09b62, 0xa9e5a5bc, 0xa4074e18, 0x60fc5ecc,\n-    0x01300148, 0x68062444, 0xb4224847, 0xed3aa443, 0xb772fb43, 0x9f56f481, 0x220dfd18, 0x8e1c3d6c,\n-    0xc44f09b0, 0x7df2bb73, 0xe22fb844, 0xea534242, 0xb6a755d4, 0xa036654b, 0x138ece5b, 0xda65d3c3,\n-    0x955871bc, 0x792124b0, 0xfc82594c, 0x851d494b, 0x2c7aee47, 0x26af46b8, 0x1416252e, 0xa8abb944,\n-    0x36c49d25, 0x674f645d, 0x363646b8, 0x9e1a2942, 0x66d0c154, 0xc6c2a545, 0x3570f2ad, 0xe7d547c7,\n-    0x7d104932, 0x18cb9c18, 0x1dcfa4cf, 0xd156f481, 0x2a02b91f, 0x3eeb3fa8, 0xcac4175e, 0x34146d42,\n-    0x994c4d46, 0x5666f440, 0x85d6713e, 0x5ecb296c, 0x0ea0ae46, 0x87e69f42, 0xc58409b0, 0x1f3436ae,\n-    0x21dc6a57, 0x4ad1cd42, 0xfb8c1a4c, 0x52d3dab2, 0x3769894b, 0xb52f1c62, 0x3677916d, 0x82b3fe57,\n-    0x493d4ac6, 0x9f963c6c, 0x5d91ff60, 0x458e0dad, 0xa49d0947, 0x491a3e18, 0x4aadcd5b, 0x0e46494b,\n-    0x1d1610ad, 0x1a10af5d, 0x4956f481, 0x207a3eae, 0x77e73244, 0xfa3b8742, 0x3261fc36, 0xfcebf536,\n-    0x1662e836, 0xf655f636, 0xa2dbd0ad, 0x23036693, 0x30448432, 0xa2b03463, 0x30730344, 0x8e4a6882,\n-    0x0c50a1cb, 0xc8d8c06b, 0xc9cd6191, 0xf443db50, 0xa9553c50, 0x23145847, 0xc35da66c, 0x29c12a60,\n-    0x55c2b447, 0x7434f75c, 0x61660640, 0xde2a7018, 0xc639494c, 0x1c306fce, 0x19b89244, 0xd29a6462,\n-    0x462cd1b2, 0x29902f44, 0x2817fa53, 0x21a30905, 0x7777ae46, 0x288443a1, 0x7bee5148, 0xc2a8b043,\n-    0xf5c3d35f, 0x2311ef84, 0x57de08a4, 0x6b221bb2, 0xf2625846, 0x4b9e09b0, 0xa24f880e, 0x22b11447,\n-    0xb3a0c744, 0x919e77d8, 0xec8b64ae, 0xff5c8d45, 0x7b15b484, 0x32679a5f, 0xba80b62e, 0x05c25c61,\n-    0x60014746, 0x5e8fb04c, 0xe67c0905, 0x4329c658, 0xac8fe555, 0xf875e647, 0x67406386, 0x35ceea18,\n-    0xbb79484b, 0xd7b9fa62, 0x238209b0, 0x208a1d32, 0x9630995e, 0x039c1318, 0x6e48006c, 0x60582344,\n-    0xadbb0150, 0x853fd462, 0x03772e4e, 0x652ce960, 0x49b630ad, 0x9993af43, 0x3735b34b, 0x548a07d9,\n-    0x55a44aad, 0xa23d1bcc, 0xfdbb2f4e, 0x530b24a0, 0x0a44b451, 0x6827c657, 0x1f66494b, 0x4e680a47,\n-    0x77e7b747, 0xa5eb3fa8, 0x6649764a, 0xd4e76c4b, 0x2c691fb0, 0xf1292e44, 0xc6d6c774, 0x85d23775,\n-    0x28275f4d, 0x259ae46d, 0x02424e81, 0x5f16be58, 0xe707c658, 0x49eae5c7, 0xd5d147ad, 0x9a7abdc3,\n-    0xe8ac7fc7, 0x84ec3aae, 0xc24942d0, 0x294aa318, 0x08ac3d18, 0x8894042e, 0xb24609b0, 0x9bcaab58,\n-    0xc400f712, 0xd5c512b8, 0x2c02cc62, 0x25080fd8, 0xed74a847, 0x18a5ec5e, 0x9850ec6d, 0xf8909758,\n-    0x7f56f481, 0x4496f23c, 0xae27784f, 0xcb7cd93e, 0x06e32860, 0x50b9a84f, 0x3660434a, 0x09161f5f,\n-    0x900486bc, 0x08055459, 0xe7ec1017, 0x7e39494c, 0x4f443b25, 0x14751a8a, 0x717d03d4, 0xbd0e24d8,\n-    0x054b6f56, 0x854c496c, 0xd92a454a, 0xc39bd054, 0x6093614b, 0x9dbad754, 0x5bf0604a, 0x99f22305\n-};\n-\n void DumpAddresses()\n {\n     int64 nStart = GetTimeMillis();\n@@ -1374,24 +1274,14 @@ void ThreadOpenConnections()\n         CSemaphoreGrant grant(*semOutbound);\n         boost::this_thread::interruption_point();\n \n-        // Add seed nodes if IRC isn't working\n-        if (addrman.size()==0 && (GetTime() - nStart > 60) && !fTestNet)\n-        {\n-            std::vector<CAddress> vAdd;\n-            for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n-            {\n-                // It'll only connect to one or two seed nodes because once it connects,\n-                // it'll get a pile of addresses with newer timestamps.\n-                // Seed nodes are given a random 'last seen time' of between one and two\n-                // weeks ago.\n-                const int64 nOneWeek = 7*24*60*60;\n-                struct in_addr ip;\n-                memcpy(&ip, &pnSeed[i], sizeof(ip));\n-                CAddress addr(CService(ip, GetDefaultPort()));\n-                addr.nTime = GetTime()-GetRand(nOneWeek)-nOneWeek;\n-                vAdd.push_back(addr);\n+        // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n+        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n+            static bool done = false;\n+            if (!done) {\n+                printf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n+                addrman.Add(Params().FixedSeeds(), CNetAddr(\"127.0.0.1\"));\n+                done = true;\n             }\n-            addrman.Add(vAdd, CNetAddr(\"127.0.0.1\"));\n         }\n \n         //\n@@ -1440,7 +1330,7 @@ void ThreadOpenConnections()\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already\n-            if (addr.GetPort() != GetDefaultPort() && nTries < 50)\n+            if (addr.GetPort() != Params().GetDefaultPort() && nTries < 50)\n                 continue;\n \n             addrConnect = addr;\n@@ -1490,7 +1380,7 @@ void ThreadOpenAddedConnections()\n         BOOST_FOREACH(string& strAddNode, lAddresses)\n         {\n             vector<CService> vservNode(0);\n-            if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+            if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             {\n                 lservAddressesToAdd.push_back(vservNode);\n                 {"
      },
      {
        "sha": "745b4338e4cd32a0a79444fad62a4190d1ffc009",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -21,7 +21,7 @@ static const char* ppszTypeName[] =\n \n CMessageHeader::CMessageHeader()\n {\n-    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     pchCommand[1] = 1;\n     nMessageSize = -1;\n@@ -30,7 +30,7 @@ CMessageHeader::CMessageHeader()\n \n CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n {\n-    memcpy(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart));\n+    memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n     nChecksum = 0;\n@@ -47,7 +47,7 @@ std::string CMessageHeader::GetCommand() const\n bool CMessageHeader::IsValid() const\n {\n     // Check start string\n-    if (memcmp(pchMessageStart, ::pchMessageStart, sizeof(pchMessageStart)) != 0)\n+    if (memcmp(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE) != 0)\n         return false;\n \n     // Check the command string for errors"
      },
      {
        "sha": "ae541dfdba13da60542e028663b372377b2b7749",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -10,20 +10,12 @@\n #ifndef __INCLUDED_PROTOCOL_H__\n #define __INCLUDED_PROTOCOL_H__\n \n+#include \"chainparams.h\"\n #include \"serialize.h\"\n #include \"netbase.h\"\n #include <string>\n #include \"uint256.h\"\n \n-extern bool fTestNet;\n-static inline unsigned short GetDefaultPort(const bool testnet = fTestNet)\n-{\n-    return testnet ? 18333 : 8333;\n-}\n-\n-\n-extern unsigned char pchMessageStart[4];\n-\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -50,7 +42,6 @@ class CMessageHeader\n     // TODO: make private (improves encapsulation)\n     public:\n         enum {\n-            MESSAGE_START_SIZE=sizeof(::pchMessageStart),\n             COMMAND_SIZE=12,\n             MESSAGE_SIZE_SIZE=sizeof(int),\n             CHECKSUM_SIZE=sizeof(int),"
      },
      {
        "sha": "5cf4dd811132ff4f494c817da266a3ba4488e418",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -5,6 +5,7 @@\n #include \"addresstablemodel.h\"\n #include \"transactiontablemodel.h\"\n \n+#include \"chainparams.h\"\n #include \"alert.h\"\n #include \"main.h\"\n #include \"checkpoints.h\"\n@@ -110,7 +111,7 @@ void ClientModel::updateAlert(const QString &hash, int status)\n \n bool ClientModel::isTestNet() const\n {\n-    return fTestNet;\n+    return TestNet();\n }\n \n bool ClientModel::inInitialBlockDownload() const"
      },
      {
        "sha": "d0b0a70be459d6082e7398c88bb7878c29646459",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"db.h\"\n #include \"init.h\"\n@@ -93,7 +94,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"hashespersec\",     gethashespersec(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          fTestNet));\n+    obj.push_back(Pair(\"testnet\",          TestNet()));\n     return obj;\n }\n "
      },
      {
        "sha": "bd7bc0ba10ccf0f1a7423b0b4f170dad96ac315c",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -157,7 +157,7 @@ Value getaddednodeinfo(const Array& params, bool fHelp)\n     BOOST_FOREACH(string& strAddNode, laddedNodes)\n     {\n         vector<CService> vservNode(0);\n-        if(Lookup(strAddNode.c_str(), vservNode, GetDefaultPort(), fNameLookup, 0))\n+        if(Lookup(strAddNode.c_str(), vservNode, Params().GetDefaultPort(), fNameLookup, 0))\n             laddedAddreses.push_back(make_pair(strAddNode, vservNode));\n         else\n         {"
      },
      {
        "sha": "5388bd4d8483f400762e828cf1f6806c98fcfc5e",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -79,7 +79,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       fTestNet));\n+    obj.push_back(Pair(\"testnet\",       TestNet()));\n     obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   pwalletMain->GetKeyPoolSize()));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));"
      },
      {
        "sha": "ea0cc1bcef6e282694de088678ad547b90b019d8",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -8,6 +8,7 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/foreach.hpp>\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"wallet.h\"\n #include \"net.h\"\n@@ -25,7 +26,7 @@ CService ip(uint32_t i)\n {\n     struct in_addr s;\n     s.s_addr = i;\n-    return CService(CNetAddr(s), GetDefaultPort());\n+    return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n BOOST_AUTO_TEST_SUITE(DoS_tests)"
      },
      {
        "sha": "af65416485a40eed3b0a78e026f45890fb230f9f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -108,8 +108,6 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     std::vector<unsigned char> result;\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n-    // Save global state\n-    bool fTestNet_stored = fTestNet;\n \n     BOOST_FOREACH(Value& tv, tests)\n     {\n@@ -125,7 +123,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        fTestNet = isTestnet; // Override testnet flag\n+        if (isTestnet)\n+            SelectParams(CChainParams::TESTNET);\n+        else\n+            SelectParams(CChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -156,18 +157,14 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    // Restore global state\n-    fTestNet = fTestNet_stored;\n+    SelectParams(CChainParams::MAIN);\n }\n \n // Goal: check that generated keys match test vectors\n BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(\"base58_keys_valid.json\");\n     std::vector<unsigned char> result;\n-    // Save global state\n-    bool fTestNet_stored = fTestNet;\n-\n     BOOST_FOREACH(Value& tv, tests)\n     {\n         Array test = tv.get_array();\n@@ -182,7 +179,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n         const Object &metadata = test[2].get_obj();\n         bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n         bool isTestnet = find_value(metadata, \"isTestnet\").get_bool();\n-        fTestNet = isTestnet; // Override testnet flag\n+        if (isTestnet)\n+            SelectParams(CChainParams::TESTNET);\n+        else\n+            SelectParams(CChainParams::MAIN);\n         if(isPrivkey)\n         {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n@@ -225,8 +225,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!boost::apply_visitor(CBitcoinAddressVisitor(&dummyAddr), nodest));\n \n-    // Restore global state\n-    fTestNet = fTestNet_stored;\n+    SelectParams(CChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "34836eaa975f5603be65545a1279c273e67cc2a8",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txdb.h\"\n #include \"main.h\"\n #include \"hash.h\"\n+#include \"chainparams.h\"\n \n using namespace std;\n \n@@ -223,7 +224,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 // Watch for genesis block\n-                if (pindexGenesisBlock == NULL && diskindex.GetBlockHash() == hashGenesisBlock)\n+                if (pindexGenesisBlock == NULL && diskindex.GetBlockHash() == Params().HashGenesisBlock())\n                     pindexGenesisBlock = pindexNew;\n \n                 if (!pindexNew->CheckIndex())"
      },
      {
        "sha": "bfb6d758387991807ca82872ec503528876347d5",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -13,6 +13,7 @@\n #include <sys/resource.h>\n #endif\n \n+#include \"chainparams.h\"\n #include \"util.h\"\n #include \"sync.h\"\n #include \"version.h\"\n@@ -78,7 +79,6 @@ bool fDaemon = false;\n bool fServer = false;\n bool fCommandLine = false;\n string strMiscWarning;\n-bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n@@ -1068,8 +1068,8 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     } else {\n         path = GetDefaultDataDir();\n     }\n-    if (fNetSpecific && GetBoolArg(\"-testnet\", false))\n-        path /= \"testnet3\";\n+    if (fNetSpecific)\n+        path /= Params().DataDir();\n \n     fs::create_directories(path);\n "
      },
      {
        "sha": "86a38ad3312e13136de2b85bcfe82d0fa292edc5",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e4b31755534fac4ea6c20a60f719e3694252220/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e4b31755534fac4ea6c20a60f719e3694252220/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0e4b31755534fac4ea6c20a60f719e3694252220",
        "patch": "@@ -143,7 +143,6 @@ extern bool fDaemon;\n extern bool fServer;\n extern bool fCommandLine;\n extern std::string strMiscWarning;\n-extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n extern volatile bool fReopenDebugLog;"
      }
    ]
  }
]