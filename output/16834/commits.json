[
  {
    "sha": "100ce28f5a313afa772178fbe8970556c17605ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDBjZTI4ZjVhMzEzYWZhNzcyMTc4ZmJlODk3MDU1NmMxNzYwNWVj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2019-03-29T21:48:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "Adds a rust library to bitcoin to demonstrate linking and building rust code.\n\nThe demonstration library compiles a rust hello world example and auto-generates\na header which can be included in C++ code.\n\nCo-Authored-By: Jeremy Rubin <j@rubin.io>\nCo-Authored-By: Cory Fields <cory-nospam-@coryfields.com>\nVarious changes by: Matt Corallo <git@bluematt.me>",
      "tree": {
        "sha": "74e6aa3e04612ee44767f5261babd73c432de486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74e6aa3e04612ee44767f5261babd73c432de486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/100ce28f5a313afa772178fbe8970556c17605ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100ce28f5a313afa772178fbe8970556c17605ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/100ce28f5a313afa772178fbe8970556c17605ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100ce28f5a313afa772178fbe8970556c17605ec/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fff333c9f00cf379562ed38c2599997f9821cfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fff333c9f00cf379562ed38c2599997f9821cfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fff333c9f00cf379562ed38c2599997f9821cfb"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 137,
      "deletions": 8
    },
    "files": [
      {
        "sha": "359524ee76be5f22dfa444e48941a4120a9915bf",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -211,6 +211,12 @@ AC_ARG_ENABLE([asm],\n   [use_asm=$enableval],\n   [use_asm=yes])\n \n+AC_ARG_ENABLE([rust],\n+  [AS_HELP_STRING([--enable-rust],\n+  [Enable rust code (default is no)])],\n+  [use_rust=$enableval],\n+  [use_rust=no])\n+\n if test \"x$use_asm\" = xyes; then\n   AC_DEFINE(USE_ASM, 1, [Define this symbol to build in assembly routines])\n fi\n@@ -478,6 +484,39 @@ AC_ARG_WITH([daemon],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n+if test \"x$use_rust\" = xyes; then\n+  AC_PATH_PROG(RUSTC,rustc,none)\n+  if test x$RUSTC = xnone; then\n+    AC_MSG_ERROR(\"rustc required to enable rust support.\")\n+  fi\n+\n+  AC_DEFINE(ENABLE_RUSTY, 1, [Define this symbol to build in rust modules])\n+\n+  dnl Find the additional lib (if any) responsible for handling\n+  dnl dlopen/dlsym/etc.\n+  TEMP_LIBS=\"$LIBS\"\n+  LIBS=\n+  AC_SEARCH_LIBS([dlsym],[dl])\n+  DL_LIBS=\"$LIBS\"\n+  LIBS=\"$TEMP_LIBS\"\n+\n+  RUST_FLAGS=\"\"\n+  if test \"x$enable_debug\" = xyes; then\n+    RUST_FLAGS=\"$RUST_FLAGS -g\"\n+  else\n+    RUST_FLAGS=\"$RUST_FLAGS -O\"\n+  fi\n+\n+  case $host in\n+    ${host_cpu}-w64-mingw*) RUST_FLAGS=\"$RUST_FLAGS --target=${host_cpu}-pc-windows-gnu\" ;;\n+    ${host_cpu}-pc-linux*) RUST_FLAGS=\"$RUST_FLAGS --target=${host_cpu}-unknown-${host_os}\" ;;\n+    ${host_cpu}-apple-darwin*) RUST_FLAGS=\"$RUST_FLAGS --target=${host_cpu}-apple-darwin\" ;;\n+    *) RUST_FLAGS=\"$RUST_FLAGS --target=${host}\" ;;\n+  esac\n+\n+  dnl TODO: create a rust test project and check host_alias as well as host.\n+fi\n+\n use_pkgconfig=yes\n case $host in\n   *mingw*)\n@@ -1535,6 +1574,7 @@ AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n AM_CONDITIONAL([ENABLE_AVX2],[test x$enable_avx2 = xyes])\n AM_CONDITIONAL([ENABLE_SHANI],[test x$enable_shani = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n+AM_CONDITIONAL([ENABLE_RUSTY], [test x$use_rust = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n@@ -1593,6 +1633,8 @@ AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(QR_LIBS)\n+AC_SUBST(DL_LIBS)\n+AC_SUBST(RUST_FLAGS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])"
      },
      {
        "sha": "bcf69bab35073dbaf15f4b08625f4c75c1906c7d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 41,
        "deletions": 3,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -9,6 +9,8 @@ AM_CXXFLAGS = $(DEBUG_CXXFLAGS) $(HARDENED_CXXFLAGS) $(WARN_CXXFLAGS) $(NOWARN_C\n AM_CPPFLAGS = $(DEBUG_CPPFLAGS) $(HARDENED_CPPFLAGS)\n AM_LIBTOOLFLAGS = --preserve-dup-deps\n EXTRA_LIBRARIES =\n+CLEANFILES =\n+LIBBITCOIN_RUST_LIBS =\n \n if EMBEDDED_UNIVALUE\n LIBUNIVALUE = univalue/libunivalue.la\n@@ -33,6 +35,9 @@ LIBBITCOIN_CRYPTO_BASE=crypto/libbitcoin_crypto_base.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n+if ENABLE_RUSTY\n+LIBBITCOIN_RUSTY = rusty/librusty.a\n+endif\n if ENABLE_ZMQ\n LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n endif\n@@ -365,6 +370,22 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS)\n+\t$(RUSTC) --crate-name rusty $< --crate-type=staticlib --emit=link $(RUST_FLAGS) -C overflow-checks=on -C panic=unwind --out-dir $(@D)\n+\ttouch $@\n+\n # crypto primitives library\n crypto_libbitcoin_crypto_base_a_CPPFLAGS = $(AM_CPPFLAGS)\n crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -571,7 +592,7 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS) $(LIBBITCOIN_RUST_LIBS) $(DL_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -663,7 +684,23 @@ CTAES_DIST += crypto/ctaes/ctaes.h\n CTAES_DIST += crypto/ctaes/README.md\n CTAES_DIST += crypto/ctaes/test.c\n \n-CLEANFILES = $(EXTRA_LIBRARIES)\n+BITCOIN_CORE_H += rusty/src/rust_bridge.h\n+\n+if ENABLE_RUSTY\n+LIBBITCOIN_RUST_LIBS += $(LIBBITCOIN_RUSTY)\n+\n+RUSTY_TEST_BIN=rusty/test_rusty\n+$(RUSTY_TEST_BIN): $(LIBBITCOIN_RUSTY_SRCS)\n+\t$(RUSTC) --crate-name test_rusty $< --emit=link --test $(RUST_FLAGS) low-checks=on --out-dir $(@D)\n+\n+## FIXME: always build RUSTY_TEST_BIN the same as we do test_bitcoin\n+RUSTY_CHECK=rusty-check\n+$(RUSTY_CHECK): $(RUSTY_TEST_BIN)\n+\t$(RUSTY_TEST_BIN)\n+\n+CLEANFILES += $(LIBBITCOIN_RUSTY)\n+endif\n+CLEANFILES += $(EXTRA_LIBRARIES)\n \n CLEANFILES += *.gcda *.gcno\n CLEANFILES += compat/*.gcda compat/*.gcno\n@@ -679,7 +716,7 @@ CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n CLEANFILES += zmq/*.gcda zmq/*.gcno\n CLEANFILES += obj/build.h\n \n-EXTRA_DIST = $(CTAES_DIST)\n+EXTRA_DIST = $(CTAES_DIST) $(LIBBITCOIN_RUSTY_SRCS)\n \n \n config/bitcoin-config.h: config/stamp-h1\n@@ -692,6 +729,7 @@ $(top_srcdir)/$(subdir)/config/bitcoin-config.h.in:  $(am__configure_deps)\n clean-local:\n \t-$(MAKE) -C secp256k1 clean\n \t-$(MAKE) -C univalue clean\n+\t-rm -rf rusty/test_rusty rusty/test_rusty.dSYM\n \t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n \t-rm -rf test/__pycache__"
      },
      {
        "sha": "72bb0f71f5c15dc37a13365896ea600a41a56870",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -73,7 +73,7 @@ bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n bench_bench_bitcoin_SOURCES += bench/wallet_balance.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(LIBBITCOIN_RUST_LIBS) $(DL_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "3c9759efab57f5dfd9b114d33a2f6fed42a76382",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -314,7 +314,7 @@ qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n-  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(LIBBITCOIN_RUST_LIBS) $(DL_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n "
      },
      {
        "sha": "6f88f70e4aadcb6980beb9f59b5eb303256130a8",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -56,7 +56,7 @@ endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n-  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(LIBBITCOIN_RUST_LIBS) $(DL_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_test_test_bitcoin_qt_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)\n "
      },
      {
        "sha": "dc8375390768e8eff87a0b9512c04b83fbaa7707",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -195,7 +195,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS) $(LIBBITCOIN_RUST_LIBS) $(DL_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ\n@@ -397,7 +397,7 @@ bitcoin_test_check: $(TEST_BINARY) FORCE\n bitcoin_test_clean : FORCE\n \trm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)\n \n-check-local: $(BITCOIN_TESTS:.cpp=.cpp.test)\n+check-local: $(RUSTY_CHECK) $(BITCOIN_TESTS:.cpp=.cpp.test)\n if BUILD_BITCOIN_TX\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py"
      },
      {
        "sha": "7a0cfea89e36e8d26f6771b29b39473dd007c7ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -336,8 +336,16 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n+#if ENABLE_RUSTY\n+#include <rusty/src/rust_bridge.h>\n+#endif\n+\n void SetupServerArgs()\n {\n+#if ENABLE_RUSTY\n+    assert(rust_hello_world_example::RUST_CONSTANT == 43);\n+    rust_hello_world_example::hello_world();\n+#endif\n     SetupHelpOptions(gArgs);\n     gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n "
      },
      {
        "sha": "855c7706ae1d8a5ec2367dee76c3550eb48b7ad1",
        "filename": "src/rusty/src/lib.rs",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/rusty/src/lib.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/rusty/src/lib.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/lib.rs?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -0,0 +1,15 @@\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn it_works() {\n+        assert_eq!(2 + 2, 4);\n+    }\n+}\n+\n+#[no_mangle]\n+pub static RUST_CONSTANT: i32 = 43;\n+\n+#[no_mangle]\n+pub extern \"C\" fn hello_world() {\n+    println!(\"Hello World!\");\n+}"
      },
      {
        "sha": "a26f97cc783ea5b3cf52ea228d9fcb21f0346585",
        "filename": "src/rusty/src/rust_bridge.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100ce28f5a313afa772178fbe8970556c17605ec/src/rusty/src/rust_bridge.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100ce28f5a313afa772178fbe8970556c17605ec/src/rusty/src/rust_bridge.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/rust_bridge.h?ref=100ce28f5a313afa772178fbe8970556c17605ec",
        "patch": "@@ -0,0 +1,26 @@\n+// Rust functions which are exposed to C++ (ie are #[no_mangle] pub extern \"C\")\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RUSTY_H\n+#define BITCOIN_RUSTY_H\n+\n+#include <cstdarg>\n+#include <cstdint>\n+#include <cstdlib>\n+#include <new>\n+\n+namespace rust_hello_world_example {\n+\n+extern \"C\" {\n+\n+extern int32_t RUST_CONSTANT;\n+\n+void hello_world();\n+\n+} // extern \"C\"\n+\n+} // namespace rust_hello_world_example\n+\n+#endif // BITCOIN_RUSTY_H"
      }
    ]
  },
  {
    "sha": "4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODMwZDllMGM4ZDYwZmEzZDE5ZGNkOThkNjkzYWZkNjU1ZjlhY2Ni",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-06-15T10:44:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "build: show rust enabled in configure output",
      "tree": {
        "sha": "15379f2040f943f35335fe4d333e86454335bbfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15379f2040f943f35335fe4d333e86454335bbfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4830d9e0c8d60fa3d19dcd98d693afd655f9accb/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "100ce28f5a313afa772178fbe8970556c17605ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100ce28f5a313afa772178fbe8970556c17605ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/100ce28f5a313afa772178fbe8970556c17605ec"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "404bb904a25922080f8cdea95ba0e6a9c4db163b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4830d9e0c8d60fa3d19dcd98d693afd655f9accb/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4830d9e0c8d60fa3d19dcd98d693afd655f9accb/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
        "patch": "@@ -1703,6 +1703,7 @@ echo \"  sanitizers    = $use_sanitizers\"\n echo \"  debug enabled = $enable_debug\"\n echo \"  gprof enabled = $enable_gprof\"\n echo \"  werror        = $enable_werror\"\n+echo \"  rust enabled  = $use_rust\"\n echo\n echo \"  target os     = $TARGET_OS\"\n echo \"  build os      = $BUILD_OS\""
      }
    ]
  },
  {
    "sha": "828a9822a00d0f9f7502ce23bd6276bae30681cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjhhOTgyMmEwMGQwZjlmNzUwMmNlMjNiZDYyNzZiYWUzMDY4MWNm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-06-15T10:44:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "build: gitignore src/rusty_test",
      "tree": {
        "sha": "903433080f7ea84a5f95b3de8bf055b2fb258ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/903433080f7ea84a5f95b3de8bf055b2fb258ae2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/828a9822a00d0f9f7502ce23bd6276bae30681cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828a9822a00d0f9f7502ce23bd6276bae30681cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/828a9822a00d0f9f7502ce23bd6276bae30681cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828a9822a00d0f9f7502ce23bd6276bae30681cf/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4830d9e0c8d60fa3d19dcd98d693afd655f9accb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4830d9e0c8d60fa3d19dcd98d693afd655f9accb"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b20a3fb37236fa5bc7dbe242a81eb5506c98e80",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/828a9822a00d0f9f7502ce23bd6276bae30681cf/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/828a9822a00d0f9f7502ce23bd6276bae30681cf/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=828a9822a00d0f9f7502ce23bd6276bae30681cf",
        "patch": "@@ -7,6 +7,7 @@ src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n src/bitcoin-wallet\n+src/rusty_test\n src/test/test_bitcoin\n src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt"
      }
    ]
  },
  {
    "sha": "9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmQ1ZjZmYmEwYjU3ZTZmYzI4NzY0M2RkNWYxYTk3ZDZjMDViOTAx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2019-09-30T20:31:47Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "Add basic ffi bindings for Rust header download\n\nAlso, break circular dependency with a new helper lib courtesy of\nCory Fields <cory-nospam-@coryfields.com>.",
      "tree": {
        "sha": "597d14d253ba45f068963a50e300d8a75125fc46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/597d14d253ba45f068963a50e300d8a75125fc46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "828a9822a00d0f9f7502ce23bd6276bae30681cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828a9822a00d0f9f7502ce23bd6276bae30681cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/828a9822a00d0f9f7502ce23bd6276bae30681cf"
      }
    ],
    "stats": {
      "total": 227,
      "additions": 199,
      "deletions": 28
    },
    "files": [
      {
        "sha": "a43da50e7003608bfe08f6462656e8018715fe65",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -37,6 +37,7 @@ LIBSECP256K1=secp256k1/libsecp256k1.la\n \n if ENABLE_RUSTY\n LIBBITCOIN_RUSTY = rusty/librusty.a\n+LIBBITCOIN_RUSTY_BRIDGE = libbitcoin_rustybridge.a\n endif\n if ENABLE_ZMQ\n LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n@@ -77,6 +78,7 @@ EXTRA_LIBRARIES += \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_WALLET_TOOL) \\\n+  $(LIBBITCOIN_RUSTY_BRIDGE) \\\n   $(LIBBITCOIN_ZMQ)\n \n lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n@@ -268,6 +270,10 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+# libbitcoin_rustybridge should not need headers other than Core's internal ones.\n+libbitcoin_rustybridge_a_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir) $(LEVELDB_CPPFLAGS)\n+libbitcoin_rustybridge_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+libbitcoin_rustybridge_a_SOURCES = rusty/src/cpp_bridge.cpp\n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n # from wallet and gui code (see node/README.md). Shared code should go in\n@@ -374,7 +380,11 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n # if any of the other files change. List the main file first, then targets can\n # depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n LIBBITCOIN_RUSTY_SRCS= \\\n-  rusty/src/lib.rs\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n \n # We force overflow checks on so that any integer overflows result in a panic\n # instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n@@ -688,10 +698,11 @@ BITCOIN_CORE_H += rusty/src/rust_bridge.h\n \n if ENABLE_RUSTY\n LIBBITCOIN_RUST_LIBS += $(LIBBITCOIN_RUSTY)\n+LIBBITCOIN_RUST_LIBS += $(LIBBITCOIN_RUSTY_BRIDGE)\n \n RUSTY_TEST_BIN=rusty/test_rusty\n-$(RUSTY_TEST_BIN): $(LIBBITCOIN_RUSTY_SRCS)\n-\t$(RUSTC) --crate-name test_rusty $< --emit=link --test $(RUST_FLAGS) low-checks=on --out-dir $(@D)\n+$(RUSTY_TEST_BIN): $(LIBBITCOIN_RUSTY_SRCS) $(LIBBITCOIN_RUSTY_TEST_SRCS)\n+\t$(RUSTC) --crate-name test_rusty $< --emit=link --test $(RUST_FLAGS) -C overflow-checks=on --out-dir $(@D)\n \n ## FIXME: always build RUSTY_TEST_BIN the same as we do test_bitcoin\n RUSTY_CHECK=rusty-check\n@@ -716,7 +727,7 @@ CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n CLEANFILES += zmq/*.gcda zmq/*.gcno\n CLEANFILES += obj/build.h\n \n-EXTRA_DIST = $(CTAES_DIST) $(LIBBITCOIN_RUSTY_SRCS)\n+EXTRA_DIST = $(CTAES_DIST) $(LIBBITCOIN_RUSTY_SRCS) $(LIBBITCOIN_RUSTY_TEST_SRCS)\n \n \n config/bitcoin-config.h: config/stamp-h1"
      },
      {
        "sha": "a4a2b39438007153d916a9e6bb4f6d769918a7d1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -342,10 +342,6 @@ static void OnRPCStopped()\n \n void SetupServerArgs()\n {\n-#if ENABLE_RUSTY\n-    assert(rust_hello_world_example::RUST_CONSTANT == 43);\n-    rust_hello_world_example::hello_world();\n-#endif\n     SetupHelpOptions(gArgs);\n     gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n "
      },
      {
        "sha": "ac46d409adb9db82178b33cc369663080eb5994c",
        "filename": "src/rusty/src/bridge.rs",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/bridge.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/bridge.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/bridge.rs?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -0,0 +1,44 @@\n+use std::ffi::c_void;\n+extern \"C\" {\n+    pub fn rusty_IsInitialBlockDownload() -> bool;\n+    pub fn rusty_ShutdownRequested() -> bool;\n+\n+    /// Connects count headers serialized in a block of memory, each stride bytes from each other.\n+    /// Returns the last header which was connected, if any (or NULL).\n+    fn rusty_ConnectHeaders(headers: *const u8, stride: usize, count: usize) -> *const c_void;\n+\n+    // Utilities to work with CBlockIndex pointers. Wrapped in a safe wrapper below.\n+\n+    /// Gets a CBlockIndex* pointer (casted to a c_void) representing the current tip.\n+    /// Guaranteed to never be NULL (but may be genesis)\n+    fn rusty_GetChainTip() -> *const c_void;\n+\n+    /// Gets the height of a given CBlockIndex* pointer\n+    fn rusty_IndexToHeight(index: *const c_void) -> i32;\n+}\n+\n+/// Connects the given array of (sorted, in chain order) headers (in serialized, 80-byte form).\n+/// Returns the last header which was connected, if any.\n+pub fn connect_headers_flat_bytes(headers: &[u8]) -> Option<BlockIndex> {\n+    if headers.len() % 80 != 0 { return None; }\n+    if headers.is_empty() { return None; }\n+    let index = unsafe { rusty_ConnectHeaders(headers.as_ptr(), 80, headers.len() / 80) };\n+    if index.is_null() { None } else { Some(BlockIndex { index }) }\n+}\n+\n+#[derive(PartialEq, Clone, Copy)]\n+pub struct BlockIndex {\n+    index: *const c_void,\n+}\n+\n+impl BlockIndex {\n+    pub fn tip() -> Self {\n+        Self {\n+            index: unsafe { rusty_GetChainTip() },\n+        }\n+    }\n+\n+    pub fn height(&self) -> i32 {\n+        unsafe { rusty_IndexToHeight(self.index) }\n+    }\n+}"
      },
      {
        "sha": "6d36eeea6342e6b1d28352f04b093fdfb1175838",
        "filename": "src/rusty/src/cpp_bridge.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/cpp_bridge.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/cpp_bridge.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/cpp_bridge.cpp?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -0,0 +1,88 @@\n+#include <chainparams.h>\n+#include <validation.h>\n+#include <shutdown.h>\n+#include <serialize.h>\n+#include <consensus/validation.h>\n+\n+/** A class that deserializes a single thing one time. */\n+class InputStream\n+{\n+public:\n+    InputStream(int nTypeIn, int nVersionIn, const unsigned char *data, size_t datalen) :\n+    m_type(nTypeIn),\n+    m_version(nVersionIn),\n+    m_data(data),\n+    m_remaining(datalen)\n+    {}\n+\n+    void read(char* pch, size_t nSize)\n+    {\n+        if (nSize > m_remaining)\n+            throw std::ios_base::failure(std::string(__func__) + \": end of data\");\n+\n+        if (pch == nullptr)\n+            throw std::ios_base::failure(std::string(__func__) + \": bad destination buffer\");\n+\n+        if (m_data == nullptr)\n+            throw std::ios_base::failure(std::string(__func__) + \": bad source buffer\");\n+\n+        memcpy(pch, m_data, nSize);\n+        m_remaining -= nSize;\n+        m_data += nSize;\n+    }\n+\n+    template<typename T>\n+    InputStream& operator>>(T&& obj)\n+    {\n+        ::Unserialize(*this, obj);\n+        return *this;\n+    }\n+\n+    int GetVersion() const { return m_version; }\n+    int GetType() const { return m_type; }\n+private:\n+    const int m_type;\n+    const int m_version;\n+    const unsigned char* m_data;\n+    size_t m_remaining;\n+};\n+\n+extern \"C\" {\n+\n+bool rusty_IsInitialBlockDownload() {\n+    return ::ChainstateActive().IsInitialBlockDownload();\n+}\n+\n+bool rusty_ShutdownRequested() {\n+    return ShutdownRequested();\n+}\n+\n+const void* rusty_ConnectHeaders(const uint8_t* headers_data, size_t stride, size_t count) {\n+    std::vector<CBlockHeader> headers;\n+    for(size_t i = 0; i < count; i++) {\n+        CBlockHeader header;\n+        try {\n+            InputStream(SER_NETWORK, PROTOCOL_VERSION, headers_data + (stride * i), 80) >> header;\n+        } catch (...) {}\n+        headers.push_back(header);\n+    }\n+    BlockValidationState state_dummy;\n+    const CBlockIndex* last_index = nullptr;\n+    ProcessNewBlockHeaders(headers, state_dummy, ::Params(), &last_index);\n+    return last_index;\n+}\n+\n+const void* rusty_GetChainTip() {\n+    LOCK(cs_main);\n+    const CBlockIndex* tip = ::ChainActive().Tip();\n+    assert(tip != nullptr);\n+    return tip;\n+}\n+\n+int32_t rusty_IndexToHeight(const void* pindexvoid) {\n+    const CBlockIndex *pindex = (const CBlockIndex*) pindexvoid;\n+    assert(pindex != nullptr);\n+    return pindex->nHeight;\n+}\n+\n+}"
      },
      {
        "sha": "a43b2b707487282e14baca4c29e10810e97c61f0",
        "filename": "src/rusty/src/lib.rs",
        "status": "modified",
        "additions": 23,
        "deletions": 12,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/lib.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/lib.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/lib.rs?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -1,15 +1,26 @@\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn it_works() {\n-        assert_eq!(2 + 2, 4);\n-    }\n-}\n+#[cfg(not(test))] mod bridge;\n+#[cfg(test)] pub mod test_bridge;\n+#[cfg(test)] pub use test_bridge as bridge;\n+use bridge::*;\n \n-#[no_mangle]\n-pub static RUST_CONSTANT: i32 = 43;\n+use std::time::{Duration, Instant};\n \n-#[no_mangle]\n-pub extern \"C\" fn hello_world() {\n-    println!(\"Hello World!\");\n+/// Waits for IBD to complete, to get stuck, or shutdown to be initiated. This should be called\n+/// prior to any background block fetchers initiating connections.\n+pub fn await_ibd_complete_or_stalled() {\n+    // Wait until we have finished IBD or aren't making any progress before kicking off\n+    // redundant sync.\n+    let mut last_tip = BlockIndex::tip();\n+    let mut last_tip_change = Instant::now();\n+    while unsafe { !rusty_ShutdownRequested() } {\n+        std::thread::sleep(Duration::from_millis(500));\n+        if unsafe { !rusty_IsInitialBlockDownload() } { break; }\n+        let new_tip = BlockIndex::tip();\n+        if new_tip != last_tip {\n+            last_tip = new_tip;\n+            last_tip_change = Instant::now();\n+        } else if (Instant::now() - last_tip_change) > Duration::from_secs(600) {\n+            break;\n+        }\n+    }\n }"
      },
      {
        "sha": "6c12a35813798ea5d4a480b11c77548f7e9460f0",
        "filename": "src/rusty/src/rust_bridge.h",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/rust_bridge.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/rust_bridge.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/rust_bridge.h?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -3,24 +3,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_RUSTY_H\n-#define BITCOIN_RUSTY_H\n+#ifndef BITCOIN_RUSTY_SRC_RUST_BRIDGE_H\n+#define BITCOIN_RUSTY_SRC_RUST_BRIDGE_H\n \n #include <cstdarg>\n #include <cstdint>\n #include <cstdlib>\n #include <new>\n \n-namespace rust_hello_world_example {\n+namespace rust_block_fetch {\n \n extern \"C\" {\n \n-extern int32_t RUST_CONSTANT;\n-\n-void hello_world();\n \n } // extern \"C\"\n \n-} // namespace rust_hello_world_example\n+} // namespace rust_block_fetch\n \n-#endif // BITCOIN_RUSTY_H\n+#endif // BITCOIN_RUSTY_SRC_RUST_BRIDGE_H"
      },
      {
        "sha": "9553353a18fc294647a0622eb0ae30a5329d872d",
        "filename": "src/rusty/src/test_bridge.rs",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/test_bridge.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901/src/rusty/src/test_bridge.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/test_bridge.rs?ref=9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "patch": "@@ -0,0 +1,24 @@\n+///! \"bridge\" to C++ code without any backing C++ code. Used for shimming in dummies for testing.\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn rusty_IsInitialBlockDownload() -> bool { unimplemented!(); }\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn rusty_ShutdownRequested() -> bool { unimplemented!(); }\n+\n+pub fn connect_headers_flat_bytes(_headers: &[u8]) -> Option<BlockIndex> {\n+    unimplemented!();\n+}\n+\n+#[derive(PartialEq, Clone, Copy)]\n+pub struct BlockIndex { }\n+\n+impl BlockIndex {\n+    pub fn tip() -> Self {\n+        unimplemented!();\n+    }\n+\n+    pub fn height(&self) -> i32 {\n+        unimplemented!();\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDc2M2IyOGVhMWFhMmNiZDgwNTVlN2ViYzQ1NGU4MmViZDE3OThm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-10T21:58:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "Add headers-over-DNS fetcher in Rust",
      "tree": {
        "sha": "b4f5cd77a7e270a93ffa08938b4b979f03cdb95d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4f5cd77a7e270a93ffa08938b4b979f03cdb95d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bd5f6fba0b57e6fc287643dd5f1a97d6c05b901"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 154,
      "deletions": 5
    },
    "files": [
      {
        "sha": "92c7ee7d90ff318d1614d0a0e165d9e734a08e93",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "patch": "@@ -381,7 +381,8 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n # depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n LIBBITCOIN_RUSTY_SRCS= \\\n   rusty/src/lib.rs \\\n-  rusty/src/bridge.rs\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs\n \n LIBBITCOIN_RUSTY_TEST_SRCS= \\\n   rusty/src/test_bridge.rs"
      },
      {
        "sha": "48d3b61aa20b195fdad6dc6949117484bd710f2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "patch": "@@ -77,6 +77,10 @@\n #include <zmq/zmqrpc.h>\n #endif\n \n+#if ENABLE_RUSTY\n+#include <rusty/src/rust_bridge.h>\n+#endif\n+\n static bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n@@ -183,6 +187,10 @@ void Shutdown(NodeContext& node)\n     util::ThreadRename(\"shutoff\");\n     mempool.AddTransactionsUpdated(1);\n \n+#if ENABLE_RUSTY\n+    rust_block_fetch::stop_fetch_dns_headers();\n+#endif\n+\n     StopHTTPRPC();\n     StopREST();\n     StopRPC();\n@@ -336,10 +344,6 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-#if ENABLE_RUSTY\n-#include <rusty/src/rust_bridge.h>\n-#endif\n-\n void SetupServerArgs()\n {\n     SetupHelpOptions(gArgs);\n@@ -401,6 +405,9 @@ void SetupServerArgs()\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n+#if ENABLE_RUSTY\n+    gArgs.AddArg(\"-headersfetchdns=<domain>\", \"A domain name from which to fetch headers. eg bitcoinheaders.net\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+#endif\n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1825,5 +1832,13 @@ bool AppInitMain(NodeContext& node)\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL * 1000);\n \n+    // ********************************************************* Step 14: kick off backup block downloaders\n+\n+#if ENABLE_RUSTY\n+    for (const std::string& domain : gArgs.GetArgs(\"-headersfetchdns\")) {\n+        rust_block_fetch::init_fetch_dns_headers(domain.c_str());\n+    }\n+#endif\n+\n     return true;\n }"
      },
      {
        "sha": "6e2ac53dd96419f5e0b3452647f82edcc198f4a2",
        "filename": "src/rusty/src/dns_headers.rs",
        "status": "added",
        "additions": 129,
        "deletions": 0,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/dns_headers.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/dns_headers.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/dns_headers.rs?ref=f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "patch": "@@ -0,0 +1,129 @@\n+use std::net::{IpAddr, Ipv6Addr, ToSocketAddrs};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::time::Duration;\n+use std::panic::catch_unwind;\n+\n+use std::ffi::CStr;\n+use std::os::raw::c_char;\n+\n+use crate::bridge::*;\n+use crate::await_ibd_complete_or_stalled;\n+\n+/// Maps a set of six IPv6 addresses to an 80-byte Bitcoin header.\n+/// The first two bytes of each address are ignored.\n+/// The next 4 bits in each address indicate the ordering of the addresses\n+/// (as DNS resolvers/servers often shuffle the addresses)\n+/// The first 8 bits (ie the second half of the 3rd byte and first half of the 4th)\n+/// of the first address are interpreted as a version and must currently be 0.\n+/// The remaining bits are placed into the 80 byte result in order.\n+fn map_addrs_to_header(ips: &mut [Ipv6Addr]) -> [u8; 80] {\n+    let mut header = [0u8; 80];\n+    if ips.len() != 6 { return header; }\n+    ips.sort_unstable_by(|a, b| {\n+        // Sort based on the first 4 bits in the 3rd byte...\n+        (&(a.octets()[2] & 0xf0)).cmp(&(b.octets()[2] & 0xf0))\n+    });\n+    if ips.len() != 6 { unreachable!(); }\n+    let version = (ips[0].octets()[2] & 0x0f) | (ips[0].octets()[3] & 0xf0);\n+    if version != 0 { return header; }\n+\n+    let mut offs = 0; // in bytes * 2\n+    for (idx, ip) in ips.iter().enumerate() {\n+        for i in if idx == 0 { 3..14*2 } else { 1..14*2 } {\n+            if i % 2 == 1 {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0x0f) >> 0;\n+            } else {\n+                header[offs/2] |= (ip.octets()[i/2 + 2] & 0xf0) >> 4;\n+            }\n+            if offs % 2 == 0 {\n+                header[offs/2] <<= 4;\n+            }\n+            offs += 1;\n+        }\n+    }\n+    header\n+}\n+\n+#[cfg(test)]\n+#[test]\n+fn test_map_addrs() {\n+    use std::str::FromStr;\n+\n+    let mut ips = Vec::new();\n+    // The genesis header:\n+    ips.push(Ipv6Addr::from_str(\"2001:0000:1000:0000:0000:0000:0000:0000\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:1000:0000:0000:0000:0000:0000:0000\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:2000:0000:0000:0000:0000:03ba:3edf\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:3d7a:7b12:b27a:c72c:3e67:768f:617f\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:4c81:bc38:88a5:1323:a9fb:8aa4:b1e5\").unwrap());\n+    ips.push(Ipv6Addr::from_str(\"2001:5e4a:29ab:5f49:ffff:001d:1dac:2b7c\").unwrap());\n+\n+    assert_eq!(&map_addrs_to_header(&mut ips)[..],\n+        &[0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3b, 0xa3, 0xed, 0xfd, 0x7a, 0x7b, 0x12, 0xb2, 0x7a, 0xc7, 0x2c, 0x3e, 0x67, 0x76, 0x8f, 0x61, 0x7f, 0xc8, 0x1b, 0xc3, 0x88, 0x8a, 0x51, 0x32, 0x3a, 0x9f, 0xb8, 0xaa, 0x4b, 0x1e, 0x5e, 0x4a, 0x29, 0xab, 0x5f, 0x49, 0xff, 0xff, 0x0, 0x1d, 0x1d, 0xac, 0x2b, 0x7c][..]);\n+}\n+\n+static THREAD_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+#[no_mangle]\n+pub extern \"C\" fn init_fetch_dns_headers(domain: *const c_char) -> bool {\n+    if let Err(_) = catch_unwind(move || {\n+        let domain_str: String = match unsafe { CStr::from_ptr(domain) }.to_str() {\n+            Ok(r) => r.to_string(),\n+            Err(_) => return false,\n+        };\n+        std::thread::spawn(move || {\n+            // Always catch panics so that even if we have some bug in our parser we don't take the\n+            // rest of Bitcoin Core down with us:\n+            THREAD_COUNT.fetch_add(1, Ordering::AcqRel);\n+            let _ = catch_unwind(move || {\n+                await_ibd_complete_or_stalled();\n+                let mut height = BlockIndex::tip().height();\n+                'dns_lookup: while unsafe { !rusty_ShutdownRequested() } {\n+                    let mut ips: Vec<_> = match (format!(\"{}.{}.{}\", height, height / 10000, domain_str).as_str(), 0u16).to_socket_addrs() {\n+                        Ok(ips) => ips,\n+                        Err(_) => {\n+                            std::thread::sleep(Duration::from_secs(5));\n+                            continue 'dns_lookup;\n+                        },\n+                    }.filter_map(|a| match a.ip() {\n+                        IpAddr::V6(a) => Some(a),\n+                        _ => None,\n+                    }).collect();\n+                    if ips.len() != 6 {\n+                        std::thread::sleep(Duration::from_secs(5));\n+                        continue 'dns_lookup;\n+                    }\n+\n+                    if unsafe { !rusty_ShutdownRequested() } {\n+                        match connect_headers_flat_bytes(&map_addrs_to_header(&mut ips)) {\n+                            Some(_) => {\n+                                height += 1;\n+                            },\n+                            None => {\n+                                // We couldn't connect the header, step back and try again\n+                                if height > 0 {\n+                                    height -= 1;\n+                                } else {\n+                                    std::thread::sleep(Duration::from_secs(5));\n+                                }\n+                            },\n+                        }\n+                    }\n+                }\n+            });\n+            THREAD_COUNT.fetch_sub(1, Ordering::AcqRel);\n+        });\n+        true\n+    }) {\n+        false\n+    } else {\n+        true\n+    }\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn stop_fetch_dns_headers() {\n+    while THREAD_COUNT.load(Ordering::Acquire) != 0 {\n+        std::thread::sleep(Duration::from_millis(10));\n+    }\n+}"
      },
      {
        "sha": "535fecfa479b4e3c190ae3e3ed273fd95e0138af",
        "filename": "src/rusty/src/lib.rs",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/lib.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/lib.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/lib.rs?ref=f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "patch": "@@ -3,6 +3,8 @@\n #[cfg(test)] pub use test_bridge as bridge;\n use bridge::*;\n \n+mod dns_headers;\n+\n use std::time::{Duration, Instant};\n \n /// Waits for IBD to complete, to get stuck, or shutdown to be initiated. This should be called"
      },
      {
        "sha": "f4548ae59083e61f6294640e7f66e78c2ff2886d",
        "filename": "src/rusty/src/rust_bridge.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/rust_bridge.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f/src/rusty/src/rust_bridge.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/rust_bridge.h?ref=f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "patch": "@@ -15,6 +15,8 @@ namespace rust_block_fetch {\n \n extern \"C\" {\n \n+bool init_fetch_dns_headers(const char *domain);\n+bool stop_fetch_dns_headers();\n \n } // extern \"C\"\n "
      }
    ]
  },
  {
    "sha": "eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjIxYjY5ODEwYzZjNzBjZTdkMTZjNWMwZmMxOWJmMTI5MjdkYzZl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-06T16:16:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "Limit total memory allocated by all Rust code to 128MB",
      "tree": {
        "sha": "ef285217f45acd5e6c7732e34ed53f5f8f2ea4d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef285217f45acd5e6c7732e34ed53f5f8f2ea4d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0763b28ea1aa2cbd8055e7ebc454e82ebd1798f"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 39,
      "deletions": 0
    },
    "files": [
      {
        "sha": "097a39c0b54f5a25a20069fa083b80baad03fbad",
        "filename": "src/rusty/src/lib.rs",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e/src/rusty/src/lib.rs",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e/src/rusty/src/lib.rs",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rusty/src/lib.rs?ref=eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
        "patch": "@@ -5,8 +5,47 @@ use bridge::*;\n \n mod dns_headers;\n \n+use std::alloc::{GlobalAlloc, Layout, System};\n+use std::ptr;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::time::{Duration, Instant};\n \n+// We keep track of all memory allocated by Rust code, refusing new allocations if it exceeds\n+// 128MB.\n+//\n+// Note that while Rust's std, in general, should panic in response to a null allocation, it\n+// is totally conceivable that some code will instead dereference this null pointer, which\n+// would violate our guarantees that Rust modules should never crash the entire application.\n+//\n+// In the future, as upstream Rust explores a safer allocation API (eg the Alloc API which\n+// returns Results instead of raw pointers, or redefining the GlobalAlloc API to allow\n+// panic!()s inside of alloc calls), we should switch to those, however these APIs are\n+// currently unstable.\n+const TOTAL_MEM_LIMIT_BYTES: usize = 128 * 1024 * 1024;\n+static TOTAL_MEM_ALLOCD: AtomicUsize = AtomicUsize::new(0);\n+struct MemoryLimitingAllocator;\n+unsafe impl GlobalAlloc for MemoryLimitingAllocator {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        let len = layout.size();\n+        if len > TOTAL_MEM_LIMIT_BYTES {\n+            return ptr::null_mut();\n+        }\n+        if TOTAL_MEM_ALLOCD.fetch_add(len, Ordering::AcqRel) + len > TOTAL_MEM_LIMIT_BYTES {\n+            TOTAL_MEM_ALLOCD.fetch_sub(len, Ordering::AcqRel);\n+            return ptr::null_mut();\n+        }\n+        System.alloc(layout)\n+    }\n+\n+    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+        System.dealloc(ptr, layout);\n+        TOTAL_MEM_ALLOCD.fetch_sub(layout.size(), Ordering::AcqRel);\n+    }\n+}\n+\n+#[global_allocator]\n+static ALLOC: MemoryLimitingAllocator = MemoryLimitingAllocator;\n+\n /// Waits for IBD to complete, to get stuck, or shutdown to be initiated. This should be called\n /// prior to any background block fetchers initiating connections.\n pub fn await_ibd_complete_or_stalled() {"
      }
    ]
  },
  {
    "sha": "94051addd99c933338d40a488cf8e810d9cfdd34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA1MWFkZGQ5OWM5MzMzMzhkNDBhNDg4Y2Y4ZTgxMGQ5Y2ZkZDM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-10-10T22:28:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2019-12-05T15:22:14Z"
      },
      "message": "Enable rustc building + testing on xenial Tsan Travis job",
      "tree": {
        "sha": "1fb764403fdeb8e4d18f1fa141741562ae495674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fb764403fdeb8e4d18f1fa141741562ae495674"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94051addd99c933338d40a488cf8e810d9cfdd34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94051addd99c933338d40a488cf8e810d9cfdd34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94051addd99c933338d40a488cf8e810d9cfdd34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94051addd99c933338d40a488cf8e810d9cfdd34/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb21b69810c6c70ce7d16c5c0fc19bf12927dc6e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f0db29fda9bb92a1a9e06414ae5740f6f31f5971",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94051addd99c933338d40a488cf8e810d9cfdd34/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94051addd99c933338d40a488cf8e810d9cfdd34/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=94051addd99c933338d40a488cf8e810d9cfdd34",
        "patch": "@@ -115,7 +115,7 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_native_trusty.sh\"\n \n     - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n+      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, rust, sanitizers: thread (TSan), no wallet]'\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_tsan.sh\"\n         TEST_RUNNER_EXTRA=\"--exclude feature_block\"  # Not enough memory on travis machines"
      },
      {
        "sha": "2d3c91f13030720a6665d1a6af82bf645636a52f",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94051addd99c933338d40a488cf8e810d9cfdd34/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94051addd99c933338d40a488cf8e810d9cfdd34/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=94051addd99c933338d40a488cf8e810d9cfdd34",
        "patch": "@@ -7,10 +7,10 @@\n export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=ubuntu:16.04\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev rustc\"\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm --enable-rust CC=clang CXX=clang++\"\n \n # xenial comes with old clang versions that can not parse the sanitizer suppressions files\n # Remove unparseable lines as a hacky workaround"
      }
    ]
  }
]