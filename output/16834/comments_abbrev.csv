DrahtBot,2019-09-08 21:10:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17783](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17783.html) (util: Fix -norpcwhitelist, -norpcallowip, a",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529242026,529242026,
practicalswift,2019-09-08 21:28:07,"Concept ACK: really like these ideas/proof-of-concepts on how to improve block/block header transport diversity. Thanks for working on this @TheBlueMatt!\n\nThis ""headers over DNS"" idea could be combined with DNS over HTTPS (DoH) using widely used DoH servers.\n\nDNS lookups are trivial to block/filter for a MITM adversary but if the user is instead doing lookups using DoH with a widely used D",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529243342,529243342,
laanwj,2019-09-09 14:14:19,"Interesting idea!\nI think this needs to be disabled when `-proxy` is in use, as the DNS lookups would bypass the proxy.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529495285,529495285,
laanwj,2019-09-09 17:06:10,"Tried to test this, but doesn't look like `bitcoinheaders.net` provides headers after 60000, is this still in progress?\n````sh\n$ host 59999.5.bitcoinheaders.net\n59999.5.bitcoinheaders.net has IPv6 address 2001:53ef:f60e:4c5c:670f:1c16:2d0a:300\n...\n$ host 60000.6.bitcoinheaders.net\nHost 60000.6.bitcoinheaders.net not found: 2(SERVFAIL)\n````\nCan bind (or DNS, for that matter) handle ",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529575269,529575269,
TheBlueMatt,2019-09-09 17:30:34,"Right, I'm currently updating the zones. Bind can't handle huge zones so well hence why it got split up into chunks of 10k, and I'm currently slowly churning through dnssec signing for the larger zones. They should be up in a few hours.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529585032,529585032,
TheBlueMatt,2019-09-09 22:04:12,"Should be good now. Turns out bind's inline dnssec signing has some hangs on big zones, worked fine once I manually signed them.\n\n> On Sep 9, 2019, at 13:30, Matt Corallo <notifications@github.com> wrote:\n> \n> Right, I'm currently updating the zones. Bind can't handle huge zones so well hence why it got split up into chunks of 10k, and I'm currently slowly churning through dnssec signing for t",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-529685351,529685351,
TheBlueMatt,2019-09-30 23:48:24,"No longer based on #16762 (since this is simpler, so a better first-land), plus the build issue was resolved (thanks to @theuni!). Should be ready for review/merge now!",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-536797693,536797693,
fanquake,2019-10-05 11:06:07,"Concept ACK. Discussing with @theuni, there might be the possibility to simplify this even further by dropping the use of `Cargo`.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-538640176,538640176,
elichai,2019-10-08 14:42:04,"Personally I really like https://doc.rust-lang.org/std/ptr/struct.NonNull.html as it gives a little bit more compile time assurance (requires you to check for nullness and after you checked you easily know you don't need to check anymore)\n\nEdit: I'm actually not sure anymore. Because with NonNull it's hard to identify const VS mut pointers.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-539546642,539546642,
MarcoFalke,2019-10-10 19:59:46,"None of the travis jobs built this, nor gitian",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540760657,540760657,
TheBlueMatt,2019-10-10 22:43:22,"Should be run in travis now, but waiting to see it run.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540828817,540828817,
TheBlueMatt,2019-10-10 23:03:42,"Cool, looks like the travis changes successfully ran the in-rust tests:\n\n```\nrunning 1 test\n\ntest dns_headers::test_map_addrs ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-540833632,540833632,
elichai,2019-10-15 10:33:21,Concept ACK. I hope to actually test the usability of this in the following days,https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-542148832,542148832,
TheBlueMatt,2019-10-17 01:12:59,Fixed the outstanding issue where rust code changes (outside of lib.rs) doesn't result in rebuild of the rust lib (caused by the migration away from cargo to rustc).,https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-542953905,542953905,
theuni,2019-10-25 18:11:04,"Concept ACK.\n\nI'd really like to do a cleanup of the buildsystem changes here, as it's a bit of a Frankenstein after a bunch of back+forth on the rust side.\n\nBut I haven't had the chance yet, and I've held this up long enough already, so I can do that post-merge (assuming it's merged) if necessary.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-546456366,546456366,
ariard,2019-11-02 02:17:07,"@dongcarl Compile with `--enable-rust-`, rust library is finely compiled in generated `src/rusty` dir but not linked in binary.\n",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-549001353,549001353,
dongcarl,2019-11-04 18:37:31,"The latest push seems to be working.\n\nA few tips for other reviewers:\n\n1. Empty out your `~/.bitcoin`\n2. Comment out\nhttps://github.com/bitcoin/bitcoin/blob/b060ca707b6eaa7cff26587b3b5822c1ba8c4b7f/src/rusty/src/dns_headers.rs#L79\n3. `./src/bitcoind --headersfetchdns=bitcoinheaders.net --connect=0`\n4. Marvel at blockheaders sync progress in stdout, or watch `sudo tcpdump udp port 5",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-549489371,549489371,
TheBlueMatt,2019-11-07 19:59:53,"Rejiggered the defaults again: today's meeting discussion was ""wait, why are we building by default, dont do that"", so we're back to off-by-default, which does neatly solve the issues @theuni had above. Should be ready to go (tm) now.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-551239718,551239718,
icota,2019-11-19 09:02:42,"tACK 0a3c6d2e8ed1b62c60e62df3f75f4ac30618597e\nIt does what it says on the tin. It's great to have redundancy. IMO Rust is a very welcome addition and this PR (being optional at compile and runtime) is the least controvesial way to introduce it.",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-555402916,555402916,
DrahtBot,2020-01-07 23:43:07,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-571825345,571825345,
TheBlueMatt,2020-03-05 19:48:09,Closing due to lack of interest.,https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-595413916,595413916,
gdassori,2020-11-09 10:42:02,"Aw, sadly I've missed this at the time. As I told to Matt elsewhere this reminded me of [chaindnsd](https://github.com/chaindns/chaindnsd), a POC I did some years ago... and I would loved that feature into the reference impl :-)\n\n",https://github.com/bitcoin/bitcoin/pull/16834#issuecomment-723929733,723929733,
elichai,2019-10-08 12:39:09,"You use the pointer without checking for nullness, I know that you already asserted that on the C++ side, but I think we should be consistent on which side of the FFI checks for null. (and if the rust side then using `NonNull` everywhere forces you to check)",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332487022,332487022,src/rusty/src/bridge.rs
elichai,2019-10-08 12:54:35,Could you add a comment on what this sort is doing/for?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332493772,332493772,src/rusty/src/dns_headers.rs
elichai,2019-10-08 13:01:08,Check for nullness?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332497060,332497060,src/rusty/src/dns_headers.rs
elichai,2019-10-08 13:04:59,Could this also panic somehow? (it calls `atomic_xadd_acqrel` and I can't find the source code for it),https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332498919,332498919,src/rusty/src/dns_headers.rs
elichai,2019-10-08 13:21:03,nit: *should,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r332506754,332506754,src/rusty/src/bridge.rs
TheBlueMatt,2019-10-10 21:44:44,"I added an if is_null() { unreachable!(); } which I think is the right approach - it clearly isn't allowed to be null, but its safe and will panic inside rust.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333748767,333748767,src/rusty/src/bridge.rs
TheBlueMatt,2019-10-10 21:49:17,"I dont think so? Certainly in practice it can't panic since it just compiles down to a few instructions, but the docs even say it wraps, which seems like the only type of panic I could imagine.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750198,333750198,src/rusty/src/dns_headers.rs
TheBlueMatt,2019-10-10 21:50:02,"Meh? I mean its called during init from C++, it would be kinda hard to get a bug here.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333750445,333750445,src/rusty/src/dns_headers.rs
stevenroose,2019-10-11 09:06:54,I feel like Core is an end product and thus should commit this (as opposed to libraries). This ensures this project can't be targeted by managers of dependent crates.,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333896217,333896217,.gitignore
fanquake,2019-10-11 12:13:25,"We've dropped using Cargo entirely now, so this line can probably go away.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333960506,333960506,.gitignore
fanquake,2019-10-11 12:58:55,"Could you add some comments here on the options your passing to `rustc`, like `panic=unwind` or `--edition`. Similar to some of the discussion in #17090.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333977711,333977711,src/Makefile.am
fanquake,2019-10-11 13:15:41,Will need to add `src/rusty_test` and `src/rusty_test.dSYM/` somewhere in here.,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333984769,333984769,src/Makefile.am
fanquake,2019-10-11 13:21:13,I think I'd prefer we didn't have an example domain name in here.,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333987224,333987224,src/init.cpp
fanquake,2019-10-11 13:36:52,There's a lot of `#[allow(dead_code)]` usage here. I assume some of it is because there's code that was/is part of #16762? I'd prefer we didn't introduce anything we aren't actually using here and instead bring it in in subsequent PRs.,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r333994467,333994467,src/rusty/src/bridge.rs
fanquake,2019-10-11 14:56:28,"> refusing new allocations if it exceeds 128MB.\n\nSo when Rust tries to allocate more than 128mb bitcoind will crash? I dropped the limit to something tiny and `bitcoind` would crash on startup.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334033432,334033432,src/rusty/src/lib.rs
elichai,2019-10-11 15:28:24,"The reason it crashed all of bitcoind when this is tiny is because this allocation is outside out `catch_unwind` https://github.com/bitcoin/bitcoin/pull/16834/files#diff-57a33003fdd95417a0d7d83201893c62R69\n\n\nHow long does https://github.com/bitcoin/bitcoin/pull/16834/files#diff-c865a8939105e6350a50af02766291b7R1841 lives?",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334049085,334049085,src/rusty/src/lib.rs
TheBlueMatt,2019-10-12 04:55:59,"Admittedly I was being lazy, fixed now.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334220951,334220951,src/rusty/src/bridge.rs
TheBlueMatt,2019-10-12 05:04:33,"Indeed, I think its fine, but just to make your testing easier, I went ahead and wrapped the whole function in a unwind. I *think* we'd be ok with holding the pointer longer, but trying to think about how long a pointer lives is exactly the reason we're writing rust code to begin with, so, please no :)",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334221103,334221103,src/rusty/src/lib.rs
TheBlueMatt,2019-10-12 05:07:18,"I actually kinda prefer not, just cause you need something that works. At some point after a few of these things land I want to write up a AntiCensorship.md doc, which I suppose can contain targets for this that include a bit more text (eg ""run by X, wont log, but you may get logged by Y""), at which point we can use example.com, but...whatever.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334221161,334221161,src/init.cpp
elichai,2019-10-12 14:34:54,feature gate this? `#[cfg(test)]`,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334240371,334240371,src/rusty/src/dns_headers.rs
TheBlueMatt,2019-10-12 19:25:37,"Done. Double checked that you can slip non-compiling code into the function and it won't fail to build until you run make check, and that make check still fails if you change the header.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r334250324,334250324,src/rusty/src/dns_headers.rs
dongcarl,2019-10-29 19:25:06,"I think with the check below... We neeed:\n```suggestion\n  AC_PATH_PROG(RUSTC, rustc, none)\n```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340280361,340280361,configure.ac
dongcarl,2019-10-29 20:16:41,"Let's perform these checks with `*mingw*`, `*linux*`, and `*darwin*` like we do in other places, or at the very least do the right thing for triples like `aarch64-linux-gnu` (notice that there's no `-pc`)",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340302330,340302330,configure.ac
dongcarl,2019-10-29 20:19:23,"```suggestion\n  AC_DEFINE(ENABLE_RUSTY, [true], [Enable experimental Rust support.])\n```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340303658,340303658,configure.ac
dongcarl,2019-10-29 20:22:04,Do we need `libuserenv` for anything other than Rust?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340304847,340304847,configure.ac
dongcarl,2019-10-29 20:24:54,Do we need this for anything other than Rust?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340306159,340306159,configure.ac
dongcarl,2019-10-29 20:41:03,"I probably don't know Makefile syntax minutiae enough, but why not just:\n```\nlibbitcoin_rustybridge_a_SOURCES = rusty/src/cpp_bridge.cpp\n```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340313612,340313612,src/Makefile.am
dongcarl,2019-10-29 20:54:16,"```suggestion\n```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340319819,340319819,src/Makefile.am
TheBlueMatt,2019-10-30 17:20:20,I don't know what this means.... @theuni or should I just take it?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340753243,340753243,configure.ac
TheBlueMatt,2019-10-30 17:28:27,"I think its just historical, fixed.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r340757709,340757709,src/Makefile.am
TheBlueMatt,2019-11-01 19:51:14,"Oh, I upated the if to check for empty string, so I think its fine now?",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341727174,341727174,configure.ac
theuni,2019-11-01 21:03:18,"Thinking about this in terms of actually merging it, it's probably a bad idea for rust support to be opportunistically compiled in if it's auto-detected.\n\nIt's a significant change, and IMO builders shouldn't have to check build logs to see if they're using rust features or not.\n\nSo... how about making this explicitly opt-in or opt-out?",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341750494,341750494,configure.ac
theuni,2019-11-01 21:09:04,"Agree with moving this into the other sections. Want to create a patch for that?\n\nNote that these are already expanded triples, though:\n```\n $ ./config.sub aarch64-linux-gnu\naarch64-unknown-linux-gnu\n```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341752413,341752413,configure.ac
theuni,2019-11-01 21:10:54,"Good point, this should be gated.\nIt may not even be necessary now that we've slimmed down.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341752948,341752948,configure.ac
theuni,2019-11-01 21:12:05,"No, and I'm not actually sure why we need it for rust. It would be nice if we could disable the functionality. Again, maybe this isn't necessary now that we've slimmed down and aren't using cargo.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341753280,341753280,configure.ac
theuni,2019-11-01 21:12:31,"Fwiw, I've done this as a convention so that future diffs are 100% straightforward when adding/removing files and keeping them in alphabetical order. I don't really care much either way though.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341753410,341753410,src/Makefile.am
theuni,2019-11-01 22:11:06,"This also seems to be unnecessary now, at least for linux/win/osx. After removing it (as well as manually removing -ldl from the link line, which some library has rudely added), builds still succeed.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341768230,341768230,configure.ac
theuni,2019-11-01 22:19:40,"Whoops, we dropped the --target arg here when switching from cargo. My bad :(\n\n```--target=$(RUST_TARGET)```",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341769971,341769971,src/Makefile.am
theuni,2019-11-01 22:27:14,"mingw+rust builds fine without this now, so I guess we can just remove it.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341771482,341771482,configure.ac
TheBlueMatt,2019-11-03 03:25:04,"Hmm, lets kick this one back to a meeting. I figure some folks will squawk if suddenly Bitcoin Core fails to build cause its missing rustc.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341833650,341833650,configure.ac
TheBlueMatt,2019-11-03 19:27:05,"Oops, looks like we do - I unset this then got a build failure on Debian Stable. I did move the block into the if use_rust block.",https://github.com/bitcoin/bitcoin/pull/16834#discussion_r341867757,341867757,configure.ac
icota,2019-11-16 03:15:31,Debugging with `gdb` doesn't seem to work with `-O`. Perhaps drop it when `--enable-debug`?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r347073549,347073549,src/Makefile.am
icota,2019-11-18 07:03:05,`RUST_FLAGS` instead of `RUST_TARGET` here?,https://github.com/bitcoin/bitcoin/pull/16834#discussion_r347223805,347223805,src/Makefile.am
