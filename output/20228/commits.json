[
  {
    "sha": "1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzI1YWRmNmQyNzhlYjFhMWYwMTg5ODZhMTI2ZDBlYjgxMzdlMGVl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T08:34:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-20T10:24:36Z"
      },
      "message": "[net] Construct addrman outside connman\n\nnode.context owns the CAddrMan. CConnman holds a reference to\nthe CAddrMan.",
      "tree": {
        "sha": "d281bae2edbf480286d1eaa417953b2a4c7b13a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d281bae2edbf480286d1eaa417953b2a4c7b13a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3530d5d2d851d025b013b2ea79ed39a57cbbafcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3530d5d2d851d025b013b2ea79ed39a57cbbafcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3530d5d2d851d025b013b2ea79ed39a57cbbafcd"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6ec46dbeb6a8dd7a9fec4e06be18f1b2bd478781",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -228,6 +228,7 @@ void Shutdown(NodeContext& node)\n     node.peerman.reset();\n     node.connman.reset();\n     node.banman.reset();\n+    node.addrman.reset();\n \n     if (node.mempool && node.mempool->IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(*node.mempool);\n@@ -1402,10 +1403,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     fDiscover = args.GetBoolArg(\"-discover\", true);\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n+    assert(!node.addrman);\n+    node.addrman = std::make_unique<CAddrMan>();\n     assert(!node.banman);\n     node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n-    node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), args.GetBoolArg(\"-networkactive\", true));\n+    node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n     assert(!node.fee_estimator);\n     // Don't initialize fee estimation with old data if we don't relay transactions,"
      },
      {
        "sha": "68b20421558a42676cd1f182db2f779d2e479c39",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -2351,8 +2351,8 @@ void CConnman::SetNetworkActive(bool active)\n     uiInterface.NotifyNetworkActiveChanged(fNetworkActive);\n }\n \n-CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In, bool network_active)\n-    : nSeed0(nSeed0In), nSeed1(nSeed1In)\n+CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In, CAddrMan& addrman_in, bool network_active)\n+    : addrman(addrman_in), nSeed0(nSeed0In), nSeed1(nSeed1In)\n {\n     SetTryNewOutboundPeer(false);\n "
      },
      {
        "sha": "633e27ba8096517c7f0247f0c6464536679e71e7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -856,7 +856,7 @@ class CConnman\n         m_onion_binds = connOptions.onion_binds;\n     }\n \n-    CConnman(uint64_t seed0, uint64_t seed1, bool network_active = true);\n+    CConnman(uint64_t seed0, uint64_t seed1, CAddrMan& addrman, bool network_active = true);\n     ~CConnman();\n     bool Start(CScheduler& scheduler, const Options& options);\n \n@@ -1130,7 +1130,7 @@ class CConnman\n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive{true};\n     bool fAddressesInitialized{false};\n-    CAddrMan addrman;\n+    CAddrMan& addrman;\n     std::deque<std::string> m_addr_fetches GUARDED_BY(m_addr_fetches_mutex);\n     RecursiveMutex m_addr_fetches_mutex;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);"
      },
      {
        "sha": "6d22a6b110cf8dfb9213561981a49f3f260a47c2",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <node/context.h>\n \n+#include <addrman.h>\n #include <banman.h>\n #include <interfaces/chain.h>\n #include <net.h>"
      },
      {
        "sha": "2be9a584e663113c4094bbb3d5b41f9cc25d4c5d",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -12,6 +12,7 @@\n \n class ArgsManager;\n class BanMan;\n+class CAddrMan;\n class CBlockPolicyEstimator;\n class CConnman;\n class CScheduler;\n@@ -35,6 +36,7 @@ class WalletClient;\n //! any member functions. It should just be a collection of references that can\n //! be used without pulling in unwanted dependencies or functionality.\n struct NodeContext {\n+    std::unique_ptr<CAddrMan> addrman;\n     std::unique_ptr<CConnman> connman;\n     std::unique_ptr<CTxMemPool> mempool;\n     std::unique_ptr<CBlockPolicyEstimator> fee_estimator;"
      },
      {
        "sha": "f592bd60c13322f85f9d7dfa1be1da39f3258bb8",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -67,7 +67,7 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     const CChainParams& chainparams = Params();\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -137,7 +137,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &pee\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     const CChainParams& chainparams = Params();\n-    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n \n@@ -258,7 +258,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    auto connman = std::make_unique<CConnman>(0x1337, 0x1337);\n+    auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n                                        *m_node.chainman, *m_node.mempool, false);\n "
      },
      {
        "sha": "7bb5ed96575adbcdb033c36752282a481ccded29",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -25,7 +25,8 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeBool()};\n+    CAddrMan addrman;\n+    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CAddress random_address;\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);"
      },
      {
        "sha": "a4f5aa8b08db18654adbe4c8749123b61f0c518f",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c25adf6d278eb1a1f018986a126d0eb8137e0ee/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <test/util/setup_common.h>\n \n+#include <addrman.h>\n #include <banman.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n@@ -155,6 +156,7 @@ ChainTestingSetup::~ChainTestingSetup()\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     m_node.connman.reset();\n     m_node.banman.reset();\n+    m_node.addrman.reset();\n     m_node.args = nullptr;\n     UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\n     m_node.mempool.reset();\n@@ -187,8 +189,9 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n+    m_node.addrman = std::make_unique<CAddrMan>();\n     m_node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, m_node.banman.get(),\n                                        *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n                                        false);"
      }
    ]
  },
  {
    "sha": "392a95d393a9af01b53e5e68197e81968efb84fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTJhOTVkMzkzYTlhZjAxYjUzZTVlNjgxOTdlODE5NjhlZmI4NGZj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T09:17:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-20T10:24:40Z"
      },
      "message": "[net_processing] Keep addrman reference in PeerManager",
      "tree": {
        "sha": "9d66e72b186b75a3fb17604ceac26d3de43c6fba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d66e72b186b75a3fb17604ceac26d3de43c6fba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/392a95d393a9af01b53e5e68197e81968efb84fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392a95d393a9af01b53e5e68197e81968efb84fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/392a95d393a9af01b53e5e68197e81968efb84fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392a95d393a9af01b53e5e68197e81968efb84fc/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c25adf6d278eb1a1f018986a126d0eb8137e0ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c25adf6d278eb1a1f018986a126d0eb8137e0ee"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 28,
      "deletions": 25
    },
    "files": [
      {
        "sha": "54e30d31e55f798292e99f8fa627891179034556",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392a95d393a9af01b53e5e68197e81968efb84fc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392a95d393a9af01b53e5e68197e81968efb84fc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=392a95d393a9af01b53e5e68197e81968efb84fc",
        "patch": "@@ -1424,7 +1424,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n     assert(!node.peerman);\n-    node.peerman = PeerManager::make(chainparams, *node.connman, node.banman.get(),\n+    node.peerman = PeerManager::make(chainparams, *node.connman, *node.addrman, node.banman.get(),\n                                      *node.scheduler, chainman, *node.mempool, ignores_incoming_txs);\n     RegisterValidationInterface(node.peerman.get());\n "
      },
      {
        "sha": "fa24f061ef63c1b5d5064a2086ed34cf56fe0d77",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392a95d393a9af01b53e5e68197e81968efb84fc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392a95d393a9af01b53e5e68197e81968efb84fc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=392a95d393a9af01b53e5e68197e81968efb84fc",
        "patch": "@@ -225,9 +225,9 @@ using PeerRef = std::shared_ptr<Peer>;\n class PeerManagerImpl final : public PeerManager\n {\n public:\n-    PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                    CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                    bool ignore_incoming_txs);\n+    PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n+                    BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                    CTxMemPool& pool, bool ignore_incoming_txs);\n \n     /** Overridden from CValidationInterface. */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n@@ -322,6 +322,7 @@ class PeerManagerImpl final : public PeerManager\n \n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n+    CAddrMan& m_addrman;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n     BanMan* const m_banman;\n     ChainstateManager& m_chainman;\n@@ -1201,18 +1202,19 @@ bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n            (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, m_chainparams.GetConsensus()) < STALE_RELAY_AGE_LIMIT);\n }\n \n-std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                                               CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                                               bool ignore_incoming_txs)\n+std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n+                                               BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                               CTxMemPool& pool, bool ignore_incoming_txs)\n {\n-    return std::make_unique<PeerManagerImpl>(chainparams, connman, banman, scheduler, chainman, pool, ignore_incoming_txs);\n+    return std::make_unique<PeerManagerImpl>(chainparams, connman, addrman, banman, scheduler, chainman, pool, ignore_incoming_txs);\n }\n \n-PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                                 CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                                 bool ignore_incoming_txs)\n+PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n+                                 BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                 CTxMemPool& pool, bool ignore_incoming_txs)\n     : m_chainparams(chainparams),\n       m_connman(connman),\n+      m_addrman(addrman),\n       m_banman(banman),\n       m_chainman(chainman),\n       m_mempool(pool),"
      },
      {
        "sha": "4556d32377139e767a59b2e524bcf46ad94541fb",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392a95d393a9af01b53e5e68197e81968efb84fc/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392a95d393a9af01b53e5e68197e81968efb84fc/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=392a95d393a9af01b53e5e68197e81968efb84fc",
        "patch": "@@ -10,6 +10,7 @@\n #include <sync.h>\n #include <validationinterface.h>\n \n+class CAddrMan;\n class CChainParams;\n class CTxMemPool;\n class ChainstateManager;\n@@ -36,9 +37,9 @@ struct CNodeStateStats {\n class PeerManager : public CValidationInterface, public NetEventsInterface\n {\n public:\n-    static std::unique_ptr<PeerManager> make(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                                             CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                                             bool ignore_incoming_txs);\n+    static std::unique_ptr<PeerManager> make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n+                                             BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n+                                             CTxMemPool& pool, bool ignore_incoming_txs);\n     virtual ~PeerManager() { }\n \n     /** Get statistics from node state */"
      },
      {
        "sha": "a4ad7ed7cf58ff275f8b1f0c5ec227ba26b4ccc1",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392a95d393a9af01b53e5e68197e81968efb84fc/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392a95d393a9af01b53e5e68197e81968efb84fc/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=392a95d393a9af01b53e5e68197e81968efb84fc",
        "patch": "@@ -68,8 +68,8 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n-    auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n-                                       *m_node.chainman, *m_node.mempool, false);\n+    auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -138,8 +138,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n-    auto peerLogic = PeerManager::make(chainparams, *connman, nullptr, *m_node.scheduler,\n-                                       *m_node.chainman, *m_node.mempool, false);\n+    auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n     CConnman::Options options;\n@@ -212,8 +212,8 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n-    auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n-                                       *m_node.chainman, *m_node.mempool, false);\n+    auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -259,8 +259,8 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     const CChainParams& chainparams = Params();\n     auto banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n-    auto peerLogic = PeerManager::make(chainparams, *connman, banman.get(), *m_node.scheduler,\n-                                       *m_node.chainman, *m_node.mempool, false);\n+    auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "bfb3466dcf7d85c91d312615a536408380a8f7cc",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/392a95d393a9af01b53e5e68197e81968efb84fc/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/392a95d393a9af01b53e5e68197e81968efb84fc/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=392a95d393a9af01b53e5e68197e81968efb84fc",
        "patch": "@@ -192,9 +192,9 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.addrman = std::make_unique<CAddrMan>();\n     m_node.banman = std::make_unique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n-    m_node.peerman = PeerManager::make(chainparams, *m_node.connman, m_node.banman.get(),\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n-                                       false);\n+    m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n+                                       m_node.banman.get(), *m_node.scheduler, *m_node.chainman,\n+                                       *m_node.mempool, false);\n     {\n         CConnman::Options options;\n         options.m_msgproc = m_node.peerman.get();"
      }
    ]
  },
  {
    "sha": "8073673dbcb2744fcc9c011edf2d61388ca929cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDczNjczZGJjYjI3NDRmY2M5YzAxMWVkZjJkNjEzODhjYTkyOWNk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T09:19:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-20T10:24:40Z"
      },
      "message": "[net] remove CConnman::SetServices\n\nIt just forwards calls to CAddrMan::SetServices.",
      "tree": {
        "sha": "723a9968b6c664281c0c9e39c37c38bb1fcf0c8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/723a9968b6c664281c0c9e39c37c38bb1fcf0c8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8073673dbcb2744fcc9c011edf2d61388ca929cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8073673dbcb2744fcc9c011edf2d61388ca929cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8073673dbcb2744fcc9c011edf2d61388ca929cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8073673dbcb2744fcc9c011edf2d61388ca929cd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "392a95d393a9af01b53e5e68197e81968efb84fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392a95d393a9af01b53e5e68197e81968efb84fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/392a95d393a9af01b53e5e68197e81968efb84fc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "27c64a737e45a77f7354b484679d287504be2711",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "patch": "@@ -2635,11 +2635,6 @@ CConnman::~CConnman()\n     Stop();\n }\n \n-void CConnman::SetServices(const CService &addr, ServiceFlags nServices)\n-{\n-    addrman.SetServices(addr, nServices);\n-}\n-\n void CConnman::MarkAddressGood(const CAddress& addr)\n {\n     addrman.Good(addr);"
      },
      {
        "sha": "0e4790a226afd9eb6dd7d6384abde4c663cbf46e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "patch": "@@ -921,7 +921,6 @@ class CConnman\n     };\n \n     // Addrman functions\n-    void SetServices(const CService &addr, ServiceFlags nServices);\n     void MarkAddressGood(const CAddress& addr);\n     bool AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses(size_t max_addresses, size_t max_pct);"
      },
      {
        "sha": "6942f02a18ca264fcf547751d27d52aad555f556",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "patch": "@@ -2332,7 +2332,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom.IsInboundConn())\n         {\n-            m_connman.SetServices(pfrom.addr, nServices);\n+            m_addrman.SetServices(pfrom.addr, nServices);\n         }\n         if (pfrom.ExpectServicesFromConn() && !HasAllDesirableServiceFlags(nServices))\n         {"
      },
      {
        "sha": "4c4da242625e3f094f297da3abb51a43d63e80ac",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8073673dbcb2744fcc9c011edf2d61388ca929cd/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "patch": "@@ -30,7 +30,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n     CAddress random_address;\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);\n-    CService random_service;\n     CSubNet random_subnet;\n     std::string random_string;\n     while (fuzzed_data_provider.ConsumeBool()) {\n@@ -42,9 +41,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 random_netaddr = ConsumeNetAddr(fuzzed_data_provider);\n             },\n-            [&] {\n-                random_service = ConsumeService(fuzzed_data_provider);\n-            },\n             [&] {\n                 random_subnet = ConsumeSubNet(fuzzed_data_provider);\n             },\n@@ -128,9 +124,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 connman.SetNetworkActive(fuzzed_data_provider.ConsumeBool());\n             },\n-            [&] {\n-                connman.SetServices(random_service, ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS));\n-            },\n             [&] {\n                 connman.SetTryNewOutboundPeer(fuzzed_data_provider.ConsumeBool());\n             });"
      }
    ]
  },
  {
    "sha": "bcd7f30b7944892db7ae37069175804567bb0cdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2Q3ZjMwYjc5NDQ4OTJkYjdhZTM3MDY5MTc1ODA0NTY3YmIwY2Rm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T09:20:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-20T10:24:40Z"
      },
      "message": "[net] remove CConnman::MarkAddressGood\n\nIt just forwards calls to CAddrMan::Good.",
      "tree": {
        "sha": "78d3a15c0ebd5523701ab2edd4022217f41df6fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78d3a15c0ebd5523701ab2edd4022217f41df6fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcd7f30b7944892db7ae37069175804567bb0cdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd7f30b7944892db7ae37069175804567bb0cdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcd7f30b7944892db7ae37069175804567bb0cdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd7f30b7944892db7ae37069175804567bb0cdf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8073673dbcb2744fcc9c011edf2d61388ca929cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8073673dbcb2744fcc9c011edf2d61388ca929cd"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0e5909612eda5e17b239f16d8ddcbb9160a3bcda",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bcd7f30b7944892db7ae37069175804567bb0cdf",
        "patch": "@@ -2635,11 +2635,6 @@ CConnman::~CConnman()\n     Stop();\n }\n \n-void CConnman::MarkAddressGood(const CAddress& addr)\n-{\n-    addrman.Good(addr);\n-}\n-\n bool CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)\n {\n     return addrman.Add(vAddr, addrFrom, nTimePenalty);"
      },
      {
        "sha": "f2add667d2b87a652cf7f081494e6b424a02c64a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bcd7f30b7944892db7ae37069175804567bb0cdf",
        "patch": "@@ -921,7 +921,6 @@ class CConnman\n     };\n \n     // Addrman functions\n-    void MarkAddressGood(const CAddress& addr);\n     bool AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses(size_t max_addresses, size_t max_pct);\n     /**"
      },
      {
        "sha": "ff1e46eb6780072f26e1f202a541d13489197939",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd7f30b7944892db7ae37069175804567bb0cdf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bcd7f30b7944892db7ae37069175804567bb0cdf",
        "patch": "@@ -2476,7 +2476,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             //\n             // This moves an address from New to Tried table in Addrman,\n             // resolves tried-table collisions, etc.\n-            m_connman.MarkAddressGood(pfrom.addr);\n+            m_addrman.Good(pfrom.addr);\n         }\n \n         std::string remoteAddr;"
      },
      {
        "sha": "dec580ea22758a90fb31faeeab53bed71cba98b4",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcd7f30b7944892db7ae37069175804567bb0cdf/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcd7f30b7944892db7ae37069175804567bb0cdf/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=bcd7f30b7944892db7ae37069175804567bb0cdf",
        "patch": "@@ -27,17 +27,13 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n     CAddrMan addrman;\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n-    CAddress random_address;\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);\n     CSubNet random_subnet;\n     std::string random_string;\n     while (fuzzed_data_provider.ConsumeBool()) {\n         CallOneOf(\n             fuzzed_data_provider,\n-            [&] {\n-                random_address = ConsumeAddress(fuzzed_data_provider);\n-            },\n             [&] {\n                 random_netaddr = ConsumeNetAddr(fuzzed_data_provider);\n             },\n@@ -94,9 +90,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 (void)connman.GetNodeCount(fuzzed_data_provider.PickValueInArray({ConnectionDirection::None, ConnectionDirection::In, ConnectionDirection::Out, ConnectionDirection::Both}));\n             },\n-            [&] {\n-                connman.MarkAddressGood(random_address);\n-            },\n             [&] {\n                 (void)connman.OutboundTargetReached(fuzzed_data_provider.ConsumeBool());\n             },"
      }
    ]
  },
  {
    "sha": "7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzRjYzY3YzBjM2M1MGRmMDA0ZWU1M2NhYzViMjg4NGI3ZmJhYjI5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T09:24:16Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-20T10:24:40Z"
      },
      "message": "[net] remove CConnman::AddNewAddresses\n\nIt just forwards calls to CAddrMan::Add.",
      "tree": {
        "sha": "46a6057a19abb8d7c21d5c613fedec49c143041c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46a6057a19abb8d7c21d5c613fedec49c143041c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcd7f30b7944892db7ae37069175804567bb0cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcd7f30b7944892db7ae37069175804567bb0cdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcd7f30b7944892db7ae37069175804567bb0cdf"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 4,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9553bbddfa58162d989f1603ec95d43824096d5c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "patch": "@@ -2635,11 +2635,6 @@ CConnman::~CConnman()\n     Stop();\n }\n \n-bool CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)\n-{\n-    return addrman.Add(vAddr, addrFrom, nTimePenalty);\n-}\n-\n std::vector<CAddress> CConnman::GetAddresses(size_t max_addresses, size_t max_pct)\n {\n     std::vector<CAddress> addresses = addrman.GetAddr(max_addresses, max_pct);"
      },
      {
        "sha": "820b680c6c74d9b33267b7f461702814b215d346",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "patch": "@@ -921,7 +921,6 @@ class CConnman\n     };\n \n     // Addrman functions\n-    bool AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n     std::vector<CAddress> GetAddresses(size_t max_addresses, size_t max_pct);\n     /**\n      * Cache is used to minimize topology leaks, so it should"
      },
      {
        "sha": "4b91d86cfa7111116cc1c2980701a04a9bb3a7c3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "patch": "@@ -2681,7 +2681,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             if (fReachable)\n                 vAddrOk.push_back(addr);\n         }\n-        m_connman.AddNewAddresses(vAddrOk, pfrom.addr, 2 * 60 * 60);\n+        m_addrman.Add(vAddrOk, pfrom.addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom.fGetAddr = false;\n         if (pfrom.IsAddrFetchConn()) {"
      },
      {
        "sha": "96533a50c8429abf2b67b08931b3770198d2b624",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "patch": "@@ -907,8 +907,8 @@ static RPCHelpMan addpeeraddress()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     NodeContext& node = EnsureNodeContext(request.context);\n-    if (!node.connman) {\n-        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    if (!node.addrman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Address manager functionality missing or disabled\");\n     }\n \n     UniValue obj(UniValue::VOBJ);\n@@ -925,7 +925,7 @@ static RPCHelpMan addpeeraddress()\n     address.nTime = GetAdjustedTime();\n     // The source address is set equal to the address. This is equivalent to the peer\n     // announcing itself.\n-    if (!node.connman->AddNewAddresses({address}, address)) {\n+    if (!node.addrman->Add(address, address)) {\n         obj.pushKV(\"success\", false);\n         return obj;\n     }"
      },
      {
        "sha": "e07f25dedfa35aa339dd644d7aa301c11404a0cc",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "patch": "@@ -43,14 +43,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 random_string = fuzzed_data_provider.ConsumeRandomLengthString(64);\n             },\n-            [&] {\n-                std::vector<CAddress> addresses;\n-                while (fuzzed_data_provider.ConsumeBool()) {\n-                    addresses.push_back(ConsumeAddress(fuzzed_data_provider));\n-                }\n-                // Limit nTimePenalty to int32_t to avoid signed integer overflow\n-                (void)connman.AddNewAddresses(addresses, ConsumeAddress(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int32_t>());\n-            },\n             [&] {\n                 connman.AddNode(random_string);\n             },"
      }
    ]
  },
  {
    "sha": "3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmMwNmQzZDdiNDNkYzExNDNmZTA4NTBkYjIzYzRlN2ZmYmZlNjgy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-23T09:28:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-22T10:25:39Z"
      },
      "message": "[net] remove fUpdateConnectionTime from FinalizeNode\n\nPeerManager can just call directly into CAddrMan::Connected() now.",
      "tree": {
        "sha": "8fb6ee74b7dafe3c7a333c8804bfa4f9d7a03937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fb6ee74b7dafe3c7a333c8804bfa4f9d7a03937"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4cc67c0c3c50df004ee53cac5b2884b7fbab29"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 19,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f9ae67b75c5cbc72a5c3acf84d3900cee1a4a20b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
        "patch": "@@ -2621,11 +2621,7 @@ void CConnman::StopNodes()\n void CConnman::DeleteNode(CNode* pnode)\n {\n     assert(pnode);\n-    bool fUpdateConnectionTime = false;\n-    m_msgproc->FinalizeNode(*pnode, fUpdateConnectionTime);\n-    if (fUpdateConnectionTime) {\n-        addrman.Connected(pnode->addr);\n-    }\n+    m_msgproc->FinalizeNode(*pnode);\n     delete pnode;\n }\n "
      },
      {
        "sha": "176fb3c74dfa1258c0c500711427fdf348a643ea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
        "patch": "@@ -770,7 +770,7 @@ class NetEventsInterface\n     virtual void InitializeNode(CNode* pnode) = 0;\n \n     /** Handle removal of a peer (clear state) */\n-    virtual void FinalizeNode(const CNode& node, bool& update_connection_time) = 0;\n+    virtual void FinalizeNode(const CNode& node) = 0;\n \n     /**\n     * Process protocol messages received from a given node"
      },
      {
        "sha": "68be99c3ff60c545717a093c39b4e0c6f1714b93",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
        "patch": "@@ -238,7 +238,7 @@ class PeerManagerImpl final : public PeerManager\n \n     /** Implement NetEventsInterface */\n     void InitializeNode(CNode* pnode) override;\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n+    void FinalizeNode(const CNode& node) override;\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n@@ -969,12 +969,12 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }\n \n-void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime)\n+void PeerManagerImpl::FinalizeNode(const CNode& node)\n {\n     NodeId nodeid = node.GetId();\n-    fUpdateConnectionTime = false;\n-    LOCK(cs_main);\n     int misbehavior{0};\n+    {\n+    LOCK(cs_main);\n     {\n         // We remove the PeerRef from g_peer_map here, but we don't always\n         // destruct the Peer. Sometimes another thread is still holding a\n@@ -991,12 +991,6 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n-    if (node.fSuccessfullyConnected && misbehavior == 0 &&\n-        !node.IsBlockOnlyConn() && !node.IsInboundConn()) {\n-        // Only change visible addrman state for outbound, full-relay peers\n-        fUpdateConnectionTime = true;\n-    }\n-\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n@@ -1021,6 +1015,14 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n         assert(m_wtxid_relay_peers == 0);\n         assert(m_txrequest.Size() == 0);\n     }\n+    } // cs_main\n+    if (node.fSuccessfullyConnected && misbehavior == 0 &&\n+        !node.IsBlockOnlyConn() && !node.IsInboundConn()) {\n+        // Only change visible addrman state for full outbound peers.  We don't\n+        // call Connected() for feeler connections since they don't have\n+        // fSuccessfullyConnected set.\n+        m_addrman.Connected(node.addr);\n+    }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n "
      },
      {
        "sha": "7557d4618a5b150cc54f7954ae258c20b70d580b",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682",
        "patch": "@@ -117,8 +117,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n     SetMockTime(0);\n \n-    bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1, dummy);\n+    peerLogic->FinalizeNode(dummyNode1);\n }\n \n static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerManager &peerLogic, CConnmanTest* connman)\n@@ -199,9 +198,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     BOOST_CHECK(vNodes[max_outbound_full_relay-1]->fDisconnect == true);\n     BOOST_CHECK(vNodes.back()->fDisconnect == false);\n \n-    bool dummy;\n     for (const CNode *node : vNodes) {\n-        peerLogic->FinalizeNode(*node, dummy);\n+        peerLogic->FinalizeNode(*node);\n     }\n \n     connman->ClearNodes();\n@@ -249,9 +247,8 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(banman->IsDiscouraged(addr1));  // Expect both 1 and 2\n     BOOST_CHECK(banman->IsDiscouraged(addr2));  // to be discouraged now\n \n-    bool dummy;\n-    peerLogic->FinalizeNode(dummyNode1, dummy);\n-    peerLogic->FinalizeNode(dummyNode2, dummy);\n+    peerLogic->FinalizeNode(dummyNode1);\n+    peerLogic->FinalizeNode(dummyNode2);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -279,8 +276,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     }\n     BOOST_CHECK(banman->IsDiscouraged(addr));\n \n-    bool dummy;\n-    peerLogic->FinalizeNode(dummyNode, dummy);\n+    peerLogic->FinalizeNode(dummyNode);\n }\n \n class TxOrphanageTest : public TxOrphanage"
      }
    ]
  }
]