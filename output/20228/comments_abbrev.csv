MarcoFalke,2020-10-23 10:38:47,"does it conceptually make sense to have an addrman without connman or connman without addrman? I'd say no.\n\n> This allows us to eliminate some functions in connman that are simply forwarding\n\nAn alternative to achieve that would be to let PeerMan steal a reference to addrman from connman (and assign it to m_addrman)",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715260032,715260032,
Saibato,2020-10-23 10:57:36,"> This allows us to eliminate some functions in connman that are simply forwarding\n\nIn general to have things double or more if ( ,,,)  or detrimental decision processes in the same code is a good design in industry where u can kill ppl easy, if there is no double check and just one bit ( that could be just by chance or external forces have flipped ) decides over mayhem.\n\nIn financials we ",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715269145,715269145,
jnewbery,2020-10-23 11:47:00,"> does it conceptually make sense to have an addrman without connman or connman without addrman? I'd say no.\n\nWhy not? If `-connect` is set, then we don't use addrman for choosing outbound connections (see `m_use_addrman_outgoing` inside connman). In general, I think being able to run with different components disabled enforces strict separation between components and means there can't be unin",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715292877,715292877,
jnewbery,2020-10-23 17:52:58,Fixed whitespace linter issue,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715488401,715488401,
DrahtBot,2020-10-23 21:25:08,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21527 (NOMERGE: net_processing: orphan handling changes by ajtowns)\n* #21244 (Move GetDataDir to ArgsManager by kiminuo)",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715597188,715597188,
MarcoFalke,2020-10-24 06:58:23,"This doesn't compile on gcc4.8, but we'll drop support for that soon anyway, so the failure can be ignored/rebased out when 22.0 is branched off.",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715821653,715821653,
jnewbery,2020-10-24 08:26:38,"> This doesn't compile on gcc4.8\n\nHopefully fixed",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-715880510,715880510,
jnewbery,2020-11-03 09:02:07,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-720989229,720989229,
amitiuttarwar,2020-11-12 18:31:17,concept ACK,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-726259278,726259278,
jnewbery,2020-11-19 11:28:29,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-730311462,730311462,
jnewbery,2020-11-19 17:51:23,Rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-730537448,730537448,
jnewbery,2020-12-04 12:59:32,Rebased and fixed fuzz build errors.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-738770960,738770960,
jnewbery,2020-12-07 12:15:38,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-739881825,739881825,
jnewbery,2020-12-09 11:51:32,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-741722688,741722688,
jnewbery,2020-12-10 10:11:32,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-742422041,742422041,
jnewbery,2020-12-15 14:43:59,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-745338349,745338349,
jnewbery,2020-12-18 19:25:43,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-748277708,748277708,
jnewbery,2021-01-02 14:19:57,Rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-753479041,753479041,
ajtowns,2021-01-06 03:08:25,"I don't think having addrman referenced from both peerman and connman makes much sense -- peerman already has a reference to connman, so avoiding the layering can be done just by letting peerman access connman's addrman directly  -- `m_connman.AddrMan().do_something()`, and that also avoids the potential for peerman and connman somehow getting their addrmans out of sync.\n\nAs far as better test",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-755047268,755047268,
jnewbery,2021-01-06 09:40:39,"I've left a comment on the linked PR here: https://github.com/bitcoin/bitcoin/pull/20233#issuecomment-755188580. I'll copy the parts that are relevant here:\n\n> > I don't think there's any need for this to be based on #20228 -- passing a ""check_addrman"" from init to CConnman seems to work fine, see ajtowns/bitcoin@202101-addrman-check (commits) eg.\n\n> Sure, we could continue to pass functio",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-755193873,755193873,
jnewbery,2021-01-07 17:36:04,rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-756266181,756266181,
jnewbery,2021-01-14 12:45:22,Rebased now that the fuzz conflicts should no longer be a problem (#20828),https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-760173601,760173601,
jnewbery,2021-01-14 12:55:13,Thanks for the review @vasild - I've addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-760179139,760179139,
jnewbery,2021-03-19 09:33:11,Rebased,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-802688201,802688201,
sipa,2021-03-20 03:07:19,utACK cfbf35efb6acf182a31b57220b9001a1459c937c,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803234232,803234232,
jnewbery,2021-03-20 10:26:13,Thanks for the review @MarcoFalke. I've addressed all of your comments.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803286645,803286645,
jnewbery,2021-03-20 12:24:45,@MarcoFalke - I've taken your suggested diff.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803301538,803301538,
MarcoFalke,2021-03-22 09:59:30,"re-ACK 06653e4aaccc84dc7773d3888f687cf44e20abcd üï∏\n\nOnly changes:\n* Add missing m_node.addrman.reset() in tests\n* Remove unused symbols random_service and random_address in tests\n* Add commit 06653e4aac\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 06653e4aaccc84dc7773d3888f687cf44e20a",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803933291,803933291,
MarcoFalke,2021-03-22 10:01:27,Could squash the last two commits and mention that `--color-moved=dimmed-zebra` can be used on them for review?,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803934716,803934716,
jnewbery,2021-03-22 10:26:28,"> Could squash the last two commits\n\nDone\n\n> and mention that --color-moved=dimmed-zebra can be used on them for review?\n\nI tried this and it wasn't very useful - there are only a couple of lines that are moved without changing.",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803952297,803952297,
MarcoFalke,2021-03-22 10:33:59,"re-ACK 3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682 only change is squash üèÄ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 3fc06d3d7b43dc1143fe0850db23c4e7ffbfe682 only change is squash üèÄ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhYRgv+",https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803956888,803956888,
jnewbery,2021-03-22 11:02:57,@vasild @sipa: Do you mind reACKing? There have only been minor changes since your last reviews.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-803974966,803974966,
jnewbery,2021-03-30 09:53:16,@sipa do you mind rereviewing this? It has two ACKs on the current branch.,https://github.com/bitcoin/bitcoin/pull/20228#issuecomment-810084790,810084790,
adamjonas,2020-12-01 22:09:31,"Look like the fuzzer is complaining about this and needs to be updated to take this additional arg type:\n\n```\ntest/fuzz/connman.cpp:26:14: error: no matching constructor for initialization of 'CConnman'\n    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeBool()};\n             ^      ~~~~~~~~~",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r533754270,533754270,src/net.h
jnewbery,2020-12-04 12:59:07,Thanks! Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r536081937,536081937,src/net.h
vasild,2021-01-12 11:18:59,"nit: to follow the alphabetical order:\n```suggestion\nclass CAddrMan;\nclass CBlockPolicyEstimator;\n```",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r555697136,555697136,src/node/context.h
vasild,2021-01-12 11:34:28,"A member variable of type reference is actually a bare pointer. By assigning it to an object that lives outside of the class we loose the benefits of smart pointers and have to manage lifetime ourselves.\n\nWhat about defining `addrman` as `std::shared_ptr` in `NodeContext`, `CConnman` and `PeerManager`?",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r555705214,555705214,src/net.h
vasild,2021-01-12 11:37:47,nit: `m_addrman`?,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r555707059,555707059,src/net.h
vasild,2021-01-12 11:47:56,"Here we pass 5 members of `node`:\n\n```cpp\n*node.connman, *node.addrman, node.banman.get(), *node.scheduler, *node.mempool\n```\n\nWhat about just passing a pointer to `node` itself, i.e. store a pointer to the ""parent"" node class in `PeerManager`? And have `node->ConnMan()`, `node->AddrMan()`, etc getters.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r555712422,555712422,src/init.cpp
vasild,2021-01-12 14:11:07,"Just an observation: before this patch `AddrMan::Connected()` would not have been called here and it will be called after this patch. Also `PeerManager::FinalizeNode()` would try to dereference `PeerManager::m_addrman`. It is fine, as far as I can see.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r555796596,555796596,src/test/denialofservice_tests.cpp
jnewbery,2021-01-14 12:46:41,Oops. Fixed.,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557369469,557369469,src/node/context.h
jnewbery,2021-01-14 12:48:48,"shared_ptr implies shared ownership of a resource. In this case, CConnman and PeerManager don't own the addrman, they just hold a reference to it.\n\nWe already use this same model for holding references to mempool, chainman, conman, etc, where the resource is owned by NodeContext.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557370743,557370743,src/net.h
jnewbery,2021-01-14 12:50:43,"I'd prefer not to rename this. `addrman` is used in >50 places in net.cpp/net.h, so updating the name would add a lot of noise to the diff for this PR.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557371855,557371855,src/net.h
jnewbery,2021-01-14 12:52:35,"Because net_processing doesn't depend on node/context (and adding that would be a circular dependency between net_processing and node/context). In fact, a NodeContext object isn't even needed to construct a PeerManager object - see denialofservice_tests.cpp.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557372902,557372902,src/init.cpp
jnewbery,2021-01-14 12:54:30,"Yes, this is a slightly different ordering, but I agree that it's fine. Everything between here and the end of Finalize is just internal net_processing book-keeping.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557373966,557373966,src/test/denialofservice_tests.cpp
vasild,2021-01-14 13:20:13,ok,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557388770,557388770,src/net.h
vasild,2021-01-14 13:28:09,ok,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557393701,557393701,src/init.cpp
vasild,2021-01-14 13:40:22,"> shared_ptr implies shared ownership of a resource. In this case, CConnman and PeerManager don't own the addrman, they just hold a reference to it.\n\n`shared_ptr` would just destroy the object when its last instance is destroyed. The fact that we know that this is going to be the instance in `NodeContext` does not make it less useful.\n\nThe problem with the bare pointer (or bare reference) ",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557401515,557401515,src/net.h
jnewbery,2021-01-14 14:51:40,"Another good reason to leave this as a reference is that it explicitly communicates that there *must* be a reference to an addrman, and that we can 'dereference' addrman throughout peerman without checking for nullness first.\n\nIn any case, I agree that this discussion can be deferred to another issue/PR.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r557451429,557451429,src/net.h
MarcoFalke,2021-03-20 08:16:39,"8f3d35a83affc7061e6bf9b9e6be6e9861c84632:\n\nAny reason to implicitly deconstruct this last, as opposed to in the same order that `init` deconstructs it? This will leave a ""dangling"" addrman in memory after the datadir (and addrman.dat) is cleared.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598081121,598081121,src/test/util/setup_common.cpp
MarcoFalke,2021-03-20 08:24:07,"48f96385c809a3e1d957538db8864ac068aca7eb\n\nWhen removing this here, it would be nice to update the addrman fuzz target to use `ConsumeWeakEnum`",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598081787,598081787,src/test/fuzz/connman.cpp
MarcoFalke,2021-03-20 08:26:11,"61aecae0dafcc4c050343ef9c3e0242a11614cd9\n\nwhat is the point of keeping the unused variable?",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598081986,598081986,src/test/fuzz/connman.cpp
MarcoFalke,2021-03-20 08:36:58,"cfbf35efb6acf182a31b57220b9001a1459c937c\n\nI am not a fan of moving this into the cs_main scope. The goal should be to limit cs_main to validation, not to accidentally extend it to cover addrman and other components.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598083016,598083016,src/net_processing.cpp
jnewbery,2021-03-20 09:42:56,"Just to be clear, are you suggesting a `~TestingSetup()` dtor that destructs the components in reverse order, like in `Shutdown()`? That seems reasonable to me.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598089481,598089481,src/test/util/setup_common.cpp
MarcoFalke,2021-03-20 09:51:42,"No, just add `m_node.addrman.reset()` to where the other node members are reset.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598090345,598090345,src/test/util/setup_common.cpp
jnewbery,2021-03-20 10:20:09,Improving the addrman fuzzer seems out of scope of this PR (since it doesn't change the addrman interface).,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598093006,598093006,src/test/fuzz/connman.cpp
jnewbery,2021-03-20 10:20:29,Done (also removed the unused random_service variable),https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598093021,598093021,src/test/fuzz/connman.cpp
jnewbery,2021-03-20 10:21:19,"In general I agree with reducing cs_main scope, but I think doing that in Finalize can happen in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598093096,598093096,src/net_processing.cpp
jnewbery,2021-03-20 10:25:49,"Done. Seems odd to me that the components are constructed in the `TestingSetup()` ctor, but destructed in the `ChainTestingSetup()` destructor, but I've followed the existing pattern.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598093498,598093498,src/test/util/setup_common.cpp
MarcoFalke,2021-03-20 10:56:35,"Agree, but does it need to be made worse?\n\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 0fa201a047..619693536b 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -972,6 +972,7 @@ void PeerManagerImpl::ReattemptInitialBroadcast(CScheduler& scheduler)\n void PeerManagerImpl::FinalizeNode(const CNode& node)\n {\n     NodeId nodeid = n",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598096481,598096481,src/net_processing.cpp
jnewbery,2021-03-20 12:24:28,"I'm really not convinced that it matters, but I've taken your diff.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598105282,598105282,src/net_processing.cpp
MarcoFalke,2021-03-20 15:09:06,"Sorry, I didn't type `make` after writing the diff. Looks like ci doesn't like me.",https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598122502,598122502,src/net_processing.cpp
jnewbery,2021-03-20 16:40:12,ah indeed. Fails compilation because `misbehavior` isn't in the outer scope. I've now fixed.,https://github.com/bitcoin/bitcoin/pull/20228#discussion_r598132437,598132437,src/net_processing.cpp
