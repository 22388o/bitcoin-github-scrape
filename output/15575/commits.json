[
  {
    "sha": "f455979eb1b65c9822b414aa9e6b04b5c43322a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDU1OTc5ZWIxYjY1Yzk4MjJiNDE0YWE5ZTZiMDRiNWM0MzMyMmEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T20:28:42Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T13:19:05Z"
      },
      "message": "Add function to close all Db's and reload the databae environment\n\nAdds a ReloadDbEnv function to BerkeleyEnvironment in order to close all Db\ninstances, closes the environment, resets it, and then reopens\nthe BerkeleyEnvironment.\n\nAlso adds a ReloadDbEnv function to BerkeleyDatabase that calls\nBerkeleyEnvironment's ReloadDbEnv.\n\nGithub-Pull: #12493\nRebased-From: 5d296ac",
      "tree": {
        "sha": "6a86da92823a5e51b1eb3fcc6fb166101cc6d12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a86da92823a5e51b1eb3fcc6fb166101cc6d12e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f455979eb1b65c9822b414aa9e6b04b5c43322a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f455979eb1b65c9822b414aa9e6b04b5c43322a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f455979eb1b65c9822b414aa9e6b04b5c43322a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f455979eb1b65c9822b414aa9e6b04b5c43322a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "392d1382c1b1459aaea86250cecaa54b84508f2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/392d1382c1b1459aaea86250cecaa54b84508f2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/392d1382c1b1459aaea86250cecaa54b84508f2d"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "679cb200b7ce07b7ba958964ed333c06443a3e5a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f455979eb1b65c9822b414aa9e6b04b5c43322a0/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f455979eb1b65c9822b414aa9e6b04b5c43322a0/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f455979eb1b65c9822b414aa9e6b04b5c43322a0",
        "patch": "@@ -556,6 +556,7 @@ void BerkeleyBatch::Close()\n         LOCK(cs_db);\n         --env->mapFileUseCount[strFile];\n     }\n+    env->m_db_in_use.notify_all();\n }\n \n void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n@@ -572,6 +573,32 @@ void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n     }\n }\n \n+void BerkeleyEnvironment::ReloadDbEnv()\n+{\n+    // Make sure that no Db's are in use\n+    AssertLockNotHeld(cs_db);\n+    std::unique_lock<CCriticalSection> lock(cs_db);\n+    m_db_in_use.wait(lock, [this](){\n+        for (auto& count : mapFileUseCount) {\n+            if (count.second > 0) return false;\n+        }\n+        return true;\n+    });\n+\n+    std::vector<std::string> filenames;\n+    for (auto it : mapDb) {\n+        filenames.push_back(it.first);\n+    }\n+    // Close the individual Db's\n+    for (const std::string& filename : filenames) {\n+        CloseDb(filename);\n+    }\n+    // Reset the environment\n+    Flush(true); // This will flush and close the environment\n+    Reset();\n+    Open(true);\n+}\n+\n bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n {\n     if (database.IsDummy()) {\n@@ -799,3 +826,10 @@ void BerkeleyDatabase::Flush(bool shutdown)\n         if (shutdown) env = nullptr;\n     }\n }\n+\n+void BerkeleyDatabase::ReloadDbEnv()\n+{\n+    if (!IsDummy()) {\n+        env->ReloadDbEnv();\n+    }\n+}"
      },
      {
        "sha": "467ed13b450e8570f44d54fb2c6d9d0190003ac2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f455979eb1b65c9822b414aa9e6b04b5c43322a0/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f455979eb1b65c9822b414aa9e6b04b5c43322a0/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f455979eb1b65c9822b414aa9e6b04b5c43322a0",
        "patch": "@@ -38,6 +38,7 @@ class BerkeleyEnvironment\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n+    std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);\n     ~BerkeleyEnvironment();\n@@ -75,6 +76,7 @@ class BerkeleyEnvironment\n     void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n+    void ReloadDbEnv();\n \n     DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n@@ -145,6 +147,8 @@ class BerkeleyDatabase\n \n     void IncrementUpdateCounter();\n \n+    void ReloadDbEnv();\n+\n     std::atomic<unsigned int> nUpdateCounter;\n     unsigned int nLastSeen;\n     unsigned int nLastFlushed;"
      }
    ]
  },
  {
    "sha": "048fda2a66df405cd98706612c87b59c2912c441",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDhmZGEyYTY2ZGY0MDVjZDk4NzA2NjEyYzg3YjU5YzI5MTJjNDQx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T21:08:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T13:19:56Z"
      },
      "message": "After encrypting the wallet, reload the database environment\n\nCalls ReloadDbEnv after encrypting the wallet so that the database\nenvironment is flushed, closed, and reopened to prevent unencrypted\nkeys from being saved on disk.\n\nGithub-Pull: #12493\nRebased-From: d7637c5",
      "tree": {
        "sha": "e6bc70bb683179c20d13f397a93a87f232f46260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6bc70bb683179c20d13f397a93a87f232f46260"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/048fda2a66df405cd98706612c87b59c2912c441",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048fda2a66df405cd98706612c87b59c2912c441",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/048fda2a66df405cd98706612c87b59c2912c441",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048fda2a66df405cd98706612c87b59c2912c441/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f455979eb1b65c9822b414aa9e6b04b5c43322a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f455979eb1b65c9822b414aa9e6b04b5c43322a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f455979eb1b65c9822b414aa9e6b04b5c43322a0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4bf2ec1e4e715133b645b91dd86fd64ea2d52ea8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/048fda2a66df405cd98706612c87b59c2912c441/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/048fda2a66df405cd98706612c87b59c2912c441/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=048fda2a66df405cd98706612c87b59c2912c441",
        "patch": "@@ -760,6 +760,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         // bits of the unencrypted private key in slack space in the database file.\n         database->Rewrite();\n \n+        // BDB seems to have a bad habit of writing old data into\n+        // slack space in .dat files; that is bad if the old data is\n+        // unencrypted private keys. So:\n+        database->ReloadDbEnv();\n+\n     }\n     NotifyStatusChanged(this);\n "
      }
    ]
  },
  {
    "sha": "435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzVkZjY4YzYyNTYyZTMwYTZkMTFiMGJmYzJjZjU2NDM0ZGJjNGEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-14T02:15:30Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T13:20:22Z"
      },
      "message": "Move BerkeleyEnvironment deletion from internal method to callsite\n\nInstead of having the object destroy itself, having the caller\ndestroy it.\n\nGithub-Pull: #12493\nRebased-From: a769461",
      "tree": {
        "sha": "96b9d1179fc35a8b46884157868ae5d62ae87fac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96b9d1179fc35a8b46884157868ae5d62ae87fac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/435df68c62562e30a6d11b0bfc2cf56434dbc4a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "048fda2a66df405cd98706612c87b59c2912c441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/048fda2a66df405cd98706612c87b59c2912c441",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/048fda2a66df405cd98706612c87b59c2912c441"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2d57c92ccc90344c5326d07ff44c62242bf16d40",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/435df68c62562e30a6d11b0bfc2cf56434dbc4a0/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/435df68c62562e30a6d11b0bfc2cf56434dbc4a0/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
        "patch": "@@ -724,7 +724,6 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 if (!fMockDb) {\n                     fs::remove_all(fs::path(strPath) / \"database\");\n                 }\n-                g_dbenvs.erase(strPath);\n             }\n         }\n     }\n@@ -823,7 +822,11 @@ void BerkeleyDatabase::Flush(bool shutdown)\n {\n     if (!IsDummy()) {\n         env->Flush(shutdown);\n-        if (shutdown) env = nullptr;\n+        if (shutdown) {\n+            LOCK(cs_db);\n+            g_dbenvs.erase(env->Directory().string());\n+            env = nullptr;\n+        }\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "1c98a758d0f43f12d600731373758303cefe7cd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzk4YTc1OGQwZjQzZjEyZDYwMDczMTM3Mzc1ODMwM2NlZmU3Y2Q3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-20T21:09:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T13:20:41Z"
      },
      "message": "No longer shutdown after encrypting the wallet\n\nSince the database environment is flushed, closed, and reopened during\nEncryptWallet, there is no need to shut down the software anymore.\n\nGithub-Pull: #12493\nRebased-From: c1dde3a",
      "tree": {
        "sha": "36a58b7fafc81553f76501a48030c87f6cbde97f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a58b7fafc81553f76501a48030c87f6cbde97f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c98a758d0f43f12d600731373758303cefe7cd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c98a758d0f43f12d600731373758303cefe7cd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c98a758d0f43f12d600731373758303cefe7cd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c98a758d0f43f12d600731373758303cefe7cd7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/435df68c62562e30a6d11b0bfc2cf56434dbc4a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/435df68c62562e30a6d11b0bfc2cf56434dbc4a0"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 9,
      "deletions": 30
    },
    "files": [
      {
        "sha": "612331523e0e0afa76e7b5bc282f906250cdcb71",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -123,16 +123,15 @@ void AskPassphraseDialog::accept()\n                 {\n                     QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"%1 will close now to finish the encryption process. \"\n+                                         tr(\"Your wallet is now encrypted. \"\n                                          \"Remember that encrypting your wallet cannot fully protect \"\n-                                         \"your bitcoins from being stolen by malware infecting your computer.\").arg(tr(PACKAGE_NAME)) +\n+                                         \"your bitcoins from being stolen by malware infecting your computer.\") +\n                                          \"<br><br><b>\" +\n                                          tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n                                          \"should be replaced with the newly generated, encrypted wallet file. \"\n                                          \"For security reasons, previous backups of the unencrypted wallet file \"\n                                          \"will become useless as soon as you start using the new, encrypted wallet.\") +\n                                          \"</b></qt>\");\n-                    QApplication::quit();\n                 }\n                 else\n                 {"
      },
      {
        "sha": "8f92f537ac0e24d846be2958f64c896728c6ae93",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -2740,7 +2740,6 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n             \"will require the passphrase to be set prior the making these calls.\\n\"\n             \"Use the walletpassphrase call for this, and then walletlock call.\\n\"\n             \"If the wallet is already encrypted, use the walletpassphrasechange call.\\n\"\n-            \"Note that this will shutdown the server.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n             \"\\nExamples:\\n\"\n@@ -2778,11 +2777,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n     }\n \n-    // BDB seems to have a bad habit of writing old data into\n-    // slack space in .dat files; that is bad if the old data is\n-    // unencrypted private keys. So:\n-    StartShutdown();\n-    return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n+    return \"wallet encrypted; The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n static UniValue lockunspent(const JSONRPCRequest& request)"
      },
      {
        "sha": "0c61e9ab62f7032979e976ea769cd2c960bdd4ef",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -478,10 +478,8 @@ def run_test(self):\n \n         ############################################################\n         # locked wallet test\n-        self.stop_node(0)\n-        self.nodes[1].node_encrypt_wallet(\"test\")\n-        self.stop_node(2)\n-        self.stop_node(3)\n+        self.nodes[1].encryptwallet(\"test\")\n+        self.stop_nodes()\n \n         self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "b6e3ab56d52d7775974826a644faa78bc4d1006f",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -305,14 +305,6 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, mat\n                     assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n                 self._raise_assertion_error(assert_msg)\n \n-    def node_encrypt_wallet(self, passphrase):\n-        \"\"\"\"Encrypts the wallet.\n-\n-        This causes bitcoind to shutdown, so this method takes\n-        care of cleaning up resources.\"\"\"\n-        self.encryptwallet(passphrase)\n-        self.wait_until_stopped()\n-\n     def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         \"\"\"Add a p2p connection to the node.\n "
      },
      {
        "sha": "e478347cd798d351a68f712f9bb1db23c0bc8aff",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -41,8 +41,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n-        self.start_node(1)\n+        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "a9ff0f6f4804a3be5603e55078b3ace1241fb380",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -128,8 +128,7 @@ def run_test(self):\n         assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].node_encrypt_wallet('test')\n-        self.start_node(0)\n+        self.nodes[0].encryptwallet('test')\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "ab9ebed8d4e8aa7f0a2c8a854a505a21f03fa49f",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -33,8 +33,7 @@ def run_test(self):\n         assert_equal(len(privkey), 52)\n \n         # Encrypt the wallet\n-        self.nodes[0].node_encrypt_wallet(passphrase)\n-        self.start_node(0)\n+        self.nodes[0].encryptwallet(passphrase)\n \n         # Test that the wallet is encrypted\n         assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "51afa0cb1a58f33ba5147af912a3f3d17ed2f071",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c98a758d0f43f12d600731373758303cefe7cd7/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=1c98a758d0f43f12d600731373758303cefe7cd7",
        "patch": "@@ -25,9 +25,7 @@ def run_test(self):\n         assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n \n         # Encrypt wallet and wait to terminate\n-        nodes[0].node_encrypt_wallet('test')\n-        # Restart node 0\n-        self.start_node(0)\n+        nodes[0].encryptwallet('test')\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)"
      }
    ]
  },
  {
    "sha": "21693ff0b743f094e73111a81c1c86e2622d937c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTY5M2ZmMGI3NDNmMDk0ZTczMTExYTgxYzFjODZlMjYyMmQ5Mzdj",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-28T11:50:04Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "wallet: Add WalletLocation utility class\n\nGithub-Pull: #14350\nRebased-From: 01a4c09",
      "tree": {
        "sha": "9b85620bce2b92692d56426aaf57db3ae2e10fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b85620bce2b92692d56426aaf57db3ae2e10fa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21693ff0b743f094e73111a81c1c86e2622d937c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21693ff0b743f094e73111a81c1c86e2622d937c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21693ff0b743f094e73111a81c1c86e2622d937c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21693ff0b743f094e73111a81c1c86e2622d937c/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c98a758d0f43f12d600731373758303cefe7cd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c98a758d0f43f12d600731373758303cefe7cd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c98a758d0f43f12d600731373758303cefe7cd7"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "064885ed49762c5abf5768919f5b70f75be7cd5f",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21693ff0b743f094e73111a81c1c86e2622d937c/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21693ff0b743f094e73111a81c1c86e2622d937c/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=21693ff0b743f094e73111a81c1c86e2622d937c",
        "patch": "@@ -25,3 +25,14 @@ fs::path GetWalletDir()\n \n     return path;\n }\n+\n+WalletLocation::WalletLocation(const std::string& name)\n+    : m_name(name)\n+    , m_path(fs::absolute(name, GetWalletDir()))\n+{\n+}\n+\n+bool WalletLocation::Exists() const\n+{\n+    return fs::symlink_status(m_path).type() != fs::file_not_found;\n+}"
      },
      {
        "sha": "a8cd7b6180338e3477cd17295008c6f266879161",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21693ff0b743f094e73111a81c1c86e2622d937c/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21693ff0b743f094e73111a81c1c86e2622d937c/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=21693ff0b743f094e73111a81c1c86e2622d937c",
        "patch": "@@ -11,4 +11,24 @@\n //! Get the path of the wallet directory.\n fs::path GetWalletDir();\n \n+//! The WalletLocation class provides wallet information.\n+class WalletLocation final\n+{\n+    std::string m_name;\n+    fs::path m_path;\n+\n+public:\n+    explicit WalletLocation() {}\n+    explicit WalletLocation(const std::string& name);\n+\n+    //! Get wallet name.\n+    const std::string& GetName() const { return m_name; }\n+\n+    //! Get wallet absolute path.\n+    const fs::path& GetPath() const { return m_path; }\n+\n+    //! Return whether the wallet exists.\n+    bool Exists() const;\n+};\n+\n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  },
  {
    "sha": "16e57594556ac481a32f5d5ed1a988b2772ba804",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmU1NzU5NDU1NmFjNDgxYTMyZjVkNWVkMWE5ODhiMjc3MmJhODA0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-28T15:50:18Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "wallet: Refactor to use WalletLocation\n\nGithub-Pull: #14350\nRebased-From: 65f3672",
      "tree": {
        "sha": "03db7347c7526c750f32adc0cc1621e632ab8d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03db7347c7526c750f32adc0cc1621e632ab8d69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16e57594556ac481a32f5d5ed1a988b2772ba804",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e57594556ac481a32f5d5ed1a988b2772ba804",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16e57594556ac481a32f5d5ed1a988b2772ba804",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e57594556ac481a32f5d5ed1a988b2772ba804/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21693ff0b743f094e73111a81c1c86e2622d937c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21693ff0b743f094e73111a81c1c86e2622d937c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21693ff0b743f094e73111a81c1c86e2622d937c"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 54,
      "deletions": 58
    },
    "files": [
      {
        "sha": "badc426b323ab6370f64336580f4f7373ae28426",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -33,7 +33,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<Ou\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+    const CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n@@ -57,7 +57,7 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static const CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+static const CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "5aa296eb3c6873632dc14f3ab6bf9d29e5fa388c",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -57,7 +57,7 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook()\n {\n     TestChain100Setup test;\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "fdbcb46f53bfc48dd4d53c7c9907838dfac7950a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -133,7 +133,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "d226bbc2fa356aa5f7de756afcd48376985bd9cd",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -203,15 +203,15 @@ bool WalletInit::Verify() const\n     std::set<fs::path> wallet_paths;\n \n     for (const auto& wallet_file : wallet_files) {\n-        fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+        WalletLocation location(wallet_file);\n \n-        if (!wallet_paths.insert(wallet_path).second) {\n+        if (!wallet_paths.insert(location.GetPath()).second) {\n             return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n         }\n \n         std::string error_string;\n         std::string warning_string;\n-        bool verify_success = CWallet::Verify(wallet_file, salvage_wallet, error_string, warning_string);\n+        bool verify_success = CWallet::Verify(location, salvage_wallet, error_string, warning_string);\n         if (!error_string.empty()) InitError(error_string);\n         if (!warning_string.empty()) InitWarning(warning_string);\n         if (!verify_success) return false;\n@@ -228,7 +228,7 @@ bool WalletInit::Open() const\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(WalletLocation(walletFile));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "957e5c6c3babc3fb633b77dd8dc0c8805cbbf295",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -3112,26 +3112,26 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             + HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n             + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n         );\n-    std::string wallet_file = request.params[0].get_str();\n+\n+    WalletLocation location(request.params[0].get_str());\n     std::string error;\n \n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n-    if (fs::symlink_status(wallet_path).type() == fs::file_not_found) {\n-        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + wallet_file + \" not found.\");\n-    } else if (fs::is_directory(wallet_path)) {\n+    if (!location.Exists()) {\n+        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + location.GetName() + \" not found.\");\n+    } else if (fs::is_directory(location.GetPath())) {\n         // The given filename is a directory. Check that there's a wallet.dat file.\n-        fs::path wallet_dat_file = wallet_path / \"wallet.dat\";\n+        fs::path wallet_dat_file = location.GetPath() / \"wallet.dat\";\n         if (fs::symlink_status(wallet_dat_file).type() == fs::file_not_found) {\n-            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + wallet_file + \" does not contain a wallet.dat file.\");\n+            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + location.GetName() + \" does not contain a wallet.dat file.\");\n         }\n     }\n \n     std::string warning;\n-    if (!CWallet::Verify(wallet_file, false, error, warning)) {\n+    if (!CWallet::Verify(location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n     }\n@@ -3165,7 +3165,6 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n         );\n     }\n-    std::string wallet_name = request.params[0].get_str();\n     std::string error;\n     std::string warning;\n \n@@ -3174,17 +3173,17 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         disable_privatekeys = request.params[1].get_bool();\n     }\n \n-    fs::path wallet_path = fs::absolute(wallet_name, GetWalletDir());\n-    if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + wallet_name + \" already exists.\");\n+    WalletLocation location(request.params[0].get_str());\n+    if (location.Exists()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplication name.\n-    if (!CWallet::Verify(wallet_name, false, error, warning)) {\n+    if (!CWallet::Verify(location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }"
      },
      {
        "sha": "aed5677bd29dfaf8325605720ba9e3a297d9b3db",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -28,7 +28,7 @@ std::vector<std::unique_ptr<CWalletTx>> wtxn;\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n-static CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+static CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);"
      },
      {
        "sha": "d42209ab1514a8c54d0e608cf010216d7500feb1",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -6,9 +6,10 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n+#include <wallet/rpcwallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName), m_wallet(\"mock\", WalletDatabase::CreateMock())\n+    TestingSetup(chainName), m_wallet(WalletLocation(), WalletDatabase::CreateMock())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "88eaaf339868164052cd7f674b19bc4194a816d8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -47,7 +47,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -62,7 +62,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -74,7 +74,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -135,7 +135,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n         LOCK(wallet->cs_wallet);\n         wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -151,7 +151,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -181,7 +181,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+    CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -274,7 +274,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+        wallet = MakeUnique<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -368,7 +368,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "fefa1ae02b983c3334e05edf904e9b384c5325f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -27,7 +27,6 @@\n #include <txmempool.h>\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n-#include <wallet/walletutil.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -4010,7 +4009,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n+bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -4019,23 +4018,23 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     LOCK(cs_wallets);\n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    const fs::path& wallet_path = location.GetPath();\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(wallet_file).filename() == wallet_file))) {\n+          (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n         error_string = strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n-              wallet_file, GetWalletDir());\n+              location.GetName(), GetWalletDir());\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     for (auto wallet : GetWallets()) {\n-        if (fs::absolute(wallet->GetName(), GetWalletDir()) == wallet_path) {\n-            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", wallet_file);\n+        if (wallet->GetLocation().GetPath() == wallet_path) {\n+            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n             return false;\n         }\n     }\n@@ -4045,13 +4044,13 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n             return false;\n         }\n     } catch (const fs::filesystem_error& e) {\n-        error_string = strprintf(\"Error loading wallet %s. %s\", wallet_file, e.what());\n+        error_string = strprintf(\"Error loading wallet %s. %s\", location.GetName(), e.what());\n         return false;\n     }\n \n     if (salvage_wallet) {\n         // Recover readable keypairs:\n-        CWallet dummyWallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet dummyWallet(WalletLocation(), WalletDatabase::CreateDummy());\n         std::string backup_filename;\n         if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n             return false;\n@@ -4061,17 +4060,17 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags)\n {\n-    const std::string& walletFile = name;\n+    const std::string& walletFile = location.GetName();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -4085,7 +4084,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(name, WalletDatabase::Create(path)), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {"
      },
      {
        "sha": "5b7f88350a81b5a71aa4c5a3c676200baf6184aa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -20,7 +20,7 @@\n #include <wallet/crypter.h>\n #include <wallet/coinselection.h>\n #include <wallet/walletdb.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/walletutil.h>\n \n #include <algorithm>\n #include <atomic>\n@@ -755,12 +755,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    /**\n-     * Wallet filename from wallet=<path> command line or config option.\n-     * Used in debug logs and to send RPCs to the right wallet instance when\n-     * more than one wallet is loaded.\n-     */\n-    std::string m_name;\n+    /** Wallet location which includes wallet name (see WalletLocation). */\n+    WalletLocation m_location;\n \n     /** Internal database handle. */\n     std::unique_ptr<WalletDatabase> database;\n@@ -800,9 +796,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n                     const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n+    const WalletLocation& GetLocation() const { return m_location; }\n+\n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    const std::string& GetName() const { return m_name; }\n+    const std::string& GetName() const { return m_location.GetName(); }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void MarkPreSplitKeys();\n@@ -818,7 +816,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(std::string name, std::unique_ptr<WalletDatabase> database) : m_name(std::move(name)), database(std::move(database))\n+    CWallet(const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_location(location), database(std::move(database))\n     {\n     }\n \n@@ -1147,10 +1145,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n+    static bool Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "d9a4a131d62589f95b3c657d327bc5e1f073d5ac",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e57594556ac481a32f5d5ed1a988b2772ba804/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e57594556ac481a32f5d5ed1a988b2772ba804/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=16e57594556ac481a32f5d5ed1a988b2772ba804",
        "patch": "@@ -30,7 +30,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"validation -> validationinterface -> validation\"\n     \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n-    \"wallet/rpcwallet -> wallet/wallet -> wallet/rpcwallet\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> policy/policy -> validation -> policy/fees\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\""
      }
    ]
  },
  {
    "sha": "8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTY1YjZhYjQ3NTNmMzIyM2Q5MGQ5YzFhYjAzYjE5MGYwMzIwZGQ4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-25T13:56:16Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "wallet: Fix duplicate fileid\n\nGithub-Pull: #14320\nRebased-From: 2d796fa",
      "tree": {
        "sha": "356adc2701b26b85ed80ac66f1a5e83ebb2b4a52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/356adc2701b26b85ed80ac66f1a5e83ebb2b4a52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8965b6ab4753f3223d90d9c1ab03b190f0320dd8/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16e57594556ac481a32f5d5ed1a988b2772ba804",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e57594556ac481a32f5d5ed1a988b2772ba804",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16e57594556ac481a32f5d5ed1a988b2772ba804"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 26,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b36a6de2a3b98c49e70a4f7474afae8ca4c0f40e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8965b6ab4753f3223d90d9c1ab03b190f0320dd8/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8965b6ab4753f3223d90d9c1ab03b190f0320dd8/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
        "patch": "@@ -20,6 +20,7 @@\n #include <boost/thread.hpp>\n \n namespace {\n+\n //! Make sure database has a unique fileid within the environment. If it\n //! doesn't, throw an error. BDB caches do not work properly when more than one\n //! open database has the same fileid (values written to one database may show\n@@ -29,25 +30,19 @@ namespace {\n //! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n //! so bitcoin should never create different databases with the same fileid, but\n //! this error can be triggered if users manually copy database files.\n-void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db)\n+void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db, WalletDatabaseFileId& fileid)\n {\n     if (env.IsMock()) return;\n \n-    u_int8_t fileid[DB_FILE_ID_LEN];\n-    int ret = db.get_mpf()->get_fileid(fileid);\n+    int ret = db.get_mpf()->get_fileid(fileid.value);\n     if (ret != 0) {\n         throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n     }\n \n-    for (const auto& item : env.mapDb) {\n-        u_int8_t item_fileid[DB_FILE_ID_LEN];\n-        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n-            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n-            const char* item_filename = nullptr;\n-            item.second->get_dbname(&item_filename, nullptr);\n+    for (const auto& item : env.m_fileids) {\n+        if (fileid == item.second && &fileid != &item.second) {\n             throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (duplicates fileid %s from %s)\", filename,\n-                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n-                item_filename ? item_filename : \"(unknown database)\"));\n+                HexStr(std::begin(item.second.value), std::end(item.second.value)), item.first));\n         }\n     }\n }\n@@ -56,6 +51,11 @@ CCriticalSection cs_db;\n std::map<std::string, BerkeleyEnvironment> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to open db environment.\n } // namespace\n \n+bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n+{\n+    return memcmp(value, &rhs.value, sizeof(value)) == 0;\n+}\n+\n BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n@@ -504,7 +504,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (auto& env : g_dbenvs) {\n-                CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n+                CheckUniqueFileid(env.second, strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n             }\n \n             pdb = pdb_temp.release();\n@@ -826,6 +826,13 @@ void BerkeleyDatabase::Flush(bool shutdown)\n             LOCK(cs_db);\n             g_dbenvs.erase(env->Directory().string());\n             env = nullptr;\n+        } else {\n+            // TODO: To avoid g_dbenvs.erase erasing the environment prematurely after the\n+            // first database shutdown when multiple databases are open in the same\n+            // environment, should replace raw database `env` pointers with shared or weak\n+            // pointers, or else separate the database and environment shutdowns so\n+            // environments can be shut down after databases.\n+            env->m_fileids.erase(strFile);\n         }\n     }\n }"
      },
      {
        "sha": "68a59607ae3e906eb947dfe0c1fc975957db2d64",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8965b6ab4753f3223d90d9c1ab03b190f0320dd8/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8965b6ab4753f3223d90d9c1ab03b190f0320dd8/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
        "patch": "@@ -18,13 +18,19 @@\n #include <map>\n #include <memory>\n #include <string>\n+#include <unordered_map>\n #include <vector>\n \n #include <db_cxx.h>\n \n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n+struct WalletDatabaseFileId {\n+    u_int8_t value[DB_FILE_ID_LEN];\n+    bool operator==(const WalletDatabaseFileId& rhs) const;\n+};\n+\n class BerkeleyEnvironment\n {\n private:\n@@ -38,6 +44,7 @@ class BerkeleyEnvironment\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n+    std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);"
      }
    ]
  },
  {
    "sha": "34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGRhMmI3Yzc2YTAyMzQ1OWU0NmUzYTJjYTRkYzNlY2MyYjlhNDM4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-24T04:33:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "tests: add test case for loading copied wallet twice\n\nGithub-Pull: #14320\nRebased-From: 4ea7732",
      "tree": {
        "sha": "2ef89bfe7d967a879864e648a93dd86ed9fbbf12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ef89bfe7d967a879864e648a93dd86ed9fbbf12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8965b6ab4753f3223d90d9c1ab03b190f0320dd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8965b6ab4753f3223d90d9c1ab03b190f0320dd8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6e0c109e60f02586a9da0a545364ae356369dcdf",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
        "patch": "@@ -220,6 +220,10 @@ def wallet_file(name):\n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n+        # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n+        assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+\n+\n         # Fail to load if wallet file is a symlink\n         assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n "
      }
    ]
  },
  {
    "sha": "caf1146b1345d70fbe4cc5f662d8393a79ac6068",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWYxMTQ2YjEzNDVkNzBmYmU0Y2M1ZjY2MmQ4MzkzYTc5YWM2MDY4",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-23T05:26:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "wallet: Add trailing wallet.dat when detecting duplicate wallet if it's a directory.\n\nGithub-Pull: #14552\nRebased-From: 15c93f0",
      "tree": {
        "sha": "64e418a24f3c6354c6cbbbec591fc508b61f88db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64e418a24f3c6354c6cbbbec591fc508b61f88db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf1146b1345d70fbe4cc5f662d8393a79ac6068",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf1146b1345d70fbe4cc5f662d8393a79ac6068",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caf1146b1345d70fbe4cc5f662d8393a79ac6068",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf1146b1345d70fbe4cc5f662d8393a79ac6068/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34da2b7c76a023459e46e3a2ca4dc3ecc2b9a438"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 28,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a0f0abd4a6a8ad030122371f3512cc86e0eb59dd",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "patch": "@@ -56,9 +56,8 @@ bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n     return memcmp(value, &rhs.value, sizeof(value)) == 0;\n }\n \n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+static void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename)\n {\n-    fs::path env_directory;\n     if (fs::is_regular_file(wallet_path)) {\n         // Special case for backwards compatibility: if wallet path points to an\n         // existing file, treat it as the path to a BDB data file in a parent\n@@ -71,6 +70,24 @@ BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& data\n         env_directory = wallet_path;\n         database_filename = \"wallet.dat\";\n     }\n+}\n+\n+bool IsWalletLoaded(const fs::path& wallet_path)\n+{\n+    fs::path env_directory;\n+    std::string database_filename;\n+    SplitWalletPath(wallet_path, env_directory, database_filename);\n+    LOCK(cs_db);\n+    auto env = g_dbenvs.find(env_directory.string());\n+    if (env == g_dbenvs.end()) return false;\n+    auto db = env->second.m_databases.find(database_filename);\n+    return db != env->second.m_databases.end();\n+}\n+\n+BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+{\n+    fs::path env_directory;\n+    SplitWalletPath(wallet_path, env_directory, database_filename);\n     LOCK(cs_db);\n     // Note: An ununsed temporary BerkeleyEnvironment object may be created inside the\n     // emplace function if the key already exists. This is a little inefficient,"
      },
      {
        "sha": "5ced4c59cfec6caabaf7ae13fd9ebeccf11db027",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "patch": "@@ -95,6 +95,9 @@ class BerkeleyEnvironment\n     }\n };\n \n+/** Return whether a wallet database is currently loaded. */\n+bool IsWalletLoaded(const fs::path& wallet_path);\n+\n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n "
      },
      {
        "sha": "e9fff5443bfcdf38257a7cdcf58bb73422261786",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf1146b1345d70fbe4cc5f662d8393a79ac6068/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "patch": "@@ -4032,11 +4032,9 @@ bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::s\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n-    for (auto wallet : GetWallets()) {\n-        if (wallet->GetLocation().GetPath() == wallet_path) {\n-            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n-            return false;\n-        }\n+    if (IsWalletLoaded(wallet_path)) {\n+        error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n+        return false;\n     }\n \n     try {"
      },
      {
        "sha": "bf33d3c6287997024548fb658f4c18077cf11869",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf1146b1345d70fbe4cc5f662d8393a79ac6068/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf1146b1345d70fbe4cc5f662d8393a79ac6068/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "patch": "@@ -217,6 +217,9 @@ def wallet_file(name):\n         # Fail to load duplicate wallets\n         assert_raises_rpc_error(-4, 'Wallet file verification failed: Error loading wallet w1. Duplicate -wallet filename specified.', self.nodes[0].loadwallet, wallet_names[0])\n \n+        # Fail to load duplicate wallets by different ways (directory and filepath)\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed: Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n+\n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n "
      }
    ]
  },
  {
    "sha": "7751ea37b65cae2cff766d09b2c95770aa7d71d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzUxZWEzN2I2NWNhZTJjZmY3NjZkMDliMmM5NTc3MGFhN2Q3MWQ4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-24T20:08:54Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "Refactor: Move m_db pointers into BerkeleyDatabase\n\nThis is a refactoring change that doesn't affect behavior. The motivation\nbehind the change is give BerkeleyEnvironment objects access to\nBerkeleyDatabase objects so it will be possible to simplify the duplicate\nwallet check and more reliably avoid opening the same databases twice.\n\nGithub-Pull: #14552\nRebased-From: c456fbd",
      "tree": {
        "sha": "345f6879b2b588faa922a846082028dda97b7dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/345f6879b2b588faa922a846082028dda97b7dfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7751ea37b65cae2cff766d09b2c95770aa7d71d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7751ea37b65cae2cff766d09b2c95770aa7d71d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7751ea37b65cae2cff766d09b2c95770aa7d71d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7751ea37b65cae2cff766d09b2c95770aa7d71d8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf1146b1345d70fbe4cc5f662d8393a79ac6068",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caf1146b1345d70fbe4cc5f662d8393a79ac6068"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 29,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f7ffd0d6bfc1c311a5cc1d6c85b7f4bbefc24d8a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7751ea37b65cae2cff766d09b2c95770aa7d71d8/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7751ea37b65cae2cff766d09b2c95770aa7d71d8/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=7751ea37b65cae2cff766d09b2c95770aa7d71d8",
        "patch": "@@ -107,13 +107,13 @@ void BerkeleyEnvironment::Close()\n \n     fDbEnvInit = false;\n \n-    for (auto& db : mapDb) {\n+    for (auto& db : m_databases) {\n         auto count = mapFileUseCount.find(db.first);\n         assert(count == mapFileUseCount.end() || count->second == 0);\n-        if (db.second) {\n-            db.second->close(0);\n-            delete db.second;\n-            db.second = nullptr;\n+        BerkeleyDatabase& database = db.second.get();\n+        if (database.m_db) {\n+            database.m_db->close(0);\n+            database.m_db.reset();\n         }\n     }\n \n@@ -480,7 +480,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n         if (!env->Open(false /* retry */))\n             throw std::runtime_error(\"BerkeleyBatch: Failed to open database environment.\");\n \n-        pdb = env->mapDb[strFilename];\n+        pdb = database.m_db.get();\n         if (pdb == nullptr) {\n             int ret;\n             std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n@@ -525,7 +525,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             }\n \n             pdb = pdb_temp.release();\n-            env->mapDb[strFilename] = pdb;\n+            database.m_db.reset(pdb);\n \n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n@@ -580,12 +580,13 @@ void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n {\n     {\n         LOCK(cs_db);\n-        if (mapDb[strFile] != nullptr) {\n+        auto it = m_databases.find(strFile);\n+        assert(it != m_databases.end());\n+        BerkeleyDatabase& database = it->second.get();\n+        if (database.m_db) {\n             // Close the database handle\n-            Db* pdb = mapDb[strFile];\n-            pdb->close(0);\n-            delete pdb;\n-            mapDb[strFile] = nullptr;\n+            database.m_db->close(0);\n+            database.m_db.reset();\n         }\n     }\n }\n@@ -603,7 +604,7 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     });\n \n     std::vector<std::string> filenames;\n-    for (auto it : mapDb) {\n+    for (auto it : m_databases) {\n         filenames.push_back(it.first);\n     }\n     // Close the individual Db's"
      },
      {
        "sha": "dd549bc46316f2aa6b599fb1a6d5419d43b9ccca",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7751ea37b65cae2cff766d09b2c95770aa7d71d8/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7751ea37b65cae2cff766d09b2c95770aa7d71d8/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=7751ea37b65cae2cff766d09b2c95770aa7d71d8",
        "patch": "@@ -31,6 +31,8 @@ struct WalletDatabaseFileId {\n     bool operator==(const WalletDatabaseFileId& rhs) const;\n };\n \n+class BerkeleyDatabase;\n+\n class BerkeleyEnvironment\n {\n private:\n@@ -43,7 +45,7 @@ class BerkeleyEnvironment\n public:\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n-    std::map<std::string, Db*> mapDb;\n+    std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n@@ -118,13 +120,22 @@ class BerkeleyDatabase\n         nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n     {\n         env = GetWalletEnv(wallet_path, strFile);\n+        auto inserted = env->m_databases.emplace(strFile, std::ref(*this));\n+        assert(inserted.second);\n         if (mock) {\n             env->Close();\n             env->Reset();\n             env->MakeMock();\n         }\n     }\n \n+    ~BerkeleyDatabase() {\n+        if (env) {\n+            size_t erased = env->m_databases.erase(strFile);\n+            assert(erased == 1);\n+        }\n+    }\n+\n     /** Return object for accessing database at specified path. */\n     static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n     {\n@@ -164,6 +175,9 @@ class BerkeleyDatabase\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n+    /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n+    std::unique_ptr<Db> m_db;\n+\n private:\n     /** BerkeleyDB specific */\n     BerkeleyEnvironment *env;"
      }
    ]
  },
  {
    "sha": "0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTlhZjJkNGNiMDkzZDI1NGEzNmQwOTRiOGQ4ZWQ3NjAzZmM5NDA0",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-08T03:41:56Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-11T21:54:44Z"
      },
      "message": "wallet: Create IsDatabaseLoaded function\n\nGithub-Pull: #14552\nRebased-From: 5912031",
      "tree": {
        "sha": "b03cb19c110d025b88f863dcf1b59480d788990b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b03cb19c110d025b88f863dcf1b59480d788990b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9af2d4cb093d254a36d094b8d8ed7603fc9404/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7751ea37b65cae2cff766d09b2c95770aa7d71d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7751ea37b65cae2cff766d09b2c95770aa7d71d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7751ea37b65cae2cff766d09b2c95770aa7d71d8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2d841ff8fd61bab163700bbd01a62dc1cf1057f0",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a9af2d4cb093d254a36d094b8d8ed7603fc9404/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a9af2d4cb093d254a36d094b8d8ed7603fc9404/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
        "patch": "@@ -80,8 +80,7 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n     LOCK(cs_db);\n     auto env = g_dbenvs.find(env_directory.string());\n     if (env == g_dbenvs.end()) return false;\n-    auto db = env->second.m_databases.find(database_filename);\n-    return db != env->second.m_databases.end();\n+    return env->second.IsDatabaseLoaded(database_filename);\n }\n \n BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)"
      },
      {
        "sha": "6af37c12cdbc595257aa70a4c9a53af1f7bf345a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a9af2d4cb093d254a36d094b8d8ed7603fc9404/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a9af2d4cb093d254a36d094b8d8ed7603fc9404/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
        "patch": "@@ -56,6 +56,7 @@ class BerkeleyEnvironment\n     void MakeMock();\n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n+    bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n     /**"
      }
    ]
  },
  {
    "sha": "f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjJkMDJmNTM3MWVmY2FhNDhhOGQ1ZDFiOGNkMzFjNjVkODIzNWYz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-05-18T20:28:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:24:11Z"
      },
      "message": "Free BerkeleyEnvironment instances when not in use\n\nInstead of adding BerkeleyEnvironment objects permanently to the g_dbenvs map,\nuse reference counted shared pointers and remove map entries when the last\nBerkeleyEnvironment reference goes out of scope.\n\nThis change was requested by Matt Corallo <git@bluematt.me> and makes code that\nsets up mock databases cleaner. The mock database environment will now go out\nof scope and be reset on destruction so there is no need to call\nBerkeleyEnvironment::Reset() during wallet construction to clear out prior\nstate.\n\nThis change does affect bitcoin behavior slightly. On startup, instead of same\nwallet environments staying open throughout VerifyWallets() and OpenWallets()\ncalls, VerifyWallets() will open and close an environment once for each wallet,\nand OpenWallets() will create its own environment(s) later.\n\nGithub-Pull: #11911\nRebased-From: f1f4bb7",
      "tree": {
        "sha": "428c6fdaffb12f96bb9e028682c9e7f00cc80a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/428c6fdaffb12f96bb9e028682c9e7f00cc80a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a9af2d4cb093d254a36d094b8d8ed7603fc9404",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a9af2d4cb093d254a36d094b8d8ed7603fc9404"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 43,
      "deletions": 33
    },
    "files": [
      {
        "sha": "624b4c609b4d0d74f6f881a8cc73860255c6b716",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
        "patch": "@@ -48,7 +48,7 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n }\n \n CCriticalSection cs_db;\n-std::map<std::string, BerkeleyEnvironment> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to open db environment.\n+std::map<std::string, std::weak_ptr<BerkeleyEnvironment>> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to db environment.\n } // namespace\n \n bool WalletDatabaseFileId::operator==(const WalletDatabaseFileId& rhs) const\n@@ -80,19 +80,22 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n     LOCK(cs_db);\n     auto env = g_dbenvs.find(env_directory.string());\n     if (env == g_dbenvs.end()) return false;\n-    return env->second.IsDatabaseLoaded(database_filename);\n+    auto database = env->second.lock();\n+    return database && database->IsDatabaseLoaded(database_filename);\n }\n \n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n     SplitWalletPath(wallet_path, env_directory, database_filename);\n     LOCK(cs_db);\n-    // Note: An ununsed temporary BerkeleyEnvironment object may be created inside the\n-    // emplace function if the key already exists. This is a little inefficient,\n-    // but not a big concern since the map will be changed in the future to hold\n-    // pointers instead of objects, anyway.\n-    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+    auto inserted = g_dbenvs.emplace(env_directory.string(), std::weak_ptr<BerkeleyEnvironment>());\n+    if (inserted.second) {\n+        auto env = std::make_shared<BerkeleyEnvironment>(env_directory.string());\n+        inserted.first->second = env;\n+        return env;\n+    }\n+    return inserted.first->second.lock();\n }\n \n //\n@@ -137,6 +140,7 @@ BerkeleyEnvironment::BerkeleyEnvironment(const fs::path& dir_path) : strPath(dir\n \n BerkeleyEnvironment::~BerkeleyEnvironment()\n {\n+    g_dbenvs.erase(strPath);\n     Close();\n }\n \n@@ -214,10 +218,9 @@ bool BerkeleyEnvironment::Open(bool retry)\n     return true;\n }\n \n-void BerkeleyEnvironment::MakeMock()\n+BerkeleyEnvironment::BerkeleyEnvironment()\n {\n-    if (fDbEnvInit)\n-        throw std::runtime_error(\"BerkeleyEnvironment::MakeMock: Already initialized\");\n+    Reset();\n \n     boost::this_thread::interruption_point();\n \n@@ -266,7 +269,7 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n \n     // Recovery procedure:\n     // move wallet file to walletfilename.timestamp.bak\n@@ -335,7 +338,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n {\n     std::string walletFile;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n@@ -359,7 +362,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n-    BerkeleyEnvironment* env = GetWalletEnv(file_path, walletFile);\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n@@ -463,7 +466,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n-    env = database.env;\n+    env = database.env.get();\n     if (database.IsDummy()) {\n         return;\n     }\n@@ -520,7 +523,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (auto& env : g_dbenvs) {\n-                CheckUniqueFileid(env.second, strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n+                CheckUniqueFileid(*env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n             }\n \n             pdb = pdb_temp.release();\n@@ -621,7 +624,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n     if (database.IsDummy()) {\n         return true;\n     }\n-    BerkeleyEnvironment *env = database.env;\n+    BerkeleyEnvironment *env = database.env.get();\n     const std::string& strFile = database.strFile;\n     while (true) {\n         {\n@@ -752,7 +755,7 @@ bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)\n         return true;\n     }\n     bool ret = false;\n-    BerkeleyEnvironment *env = database.env;\n+    BerkeleyEnvironment *env = database.env.get();\n     const std::string& strFile = database.strFile;\n     TRY_LOCK(cs_db, lockDb);\n     if (lockDb)"
      },
      {
        "sha": "ac70dc55e16badfcc781ae8fc874e7de92945e23",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
        "patch": "@@ -50,10 +50,10 @@ class BerkeleyEnvironment\n     std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);\n+    BerkeleyEnvironment();\n     ~BerkeleyEnvironment();\n     void Reset();\n \n-    void MakeMock();\n     bool IsMock() const { return fMockDb; }\n     bool IsInitialized() const { return fDbEnvInit; }\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n@@ -102,7 +102,7 @@ class BerkeleyEnvironment\n bool IsWalletLoaded(const fs::path& wallet_path);\n \n /** Get BerkeleyEnvironment and database filename given a wallet path. */\n-BerkeleyEnvironment* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n+std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -117,17 +117,11 @@ class BerkeleyDatabase\n     }\n \n     /** Create DB handle to real database */\n-    BerkeleyDatabase(const fs::path& wallet_path, bool mock = false) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n+    BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(std::move(env)), strFile(std::move(filename))\n     {\n-        env = GetWalletEnv(wallet_path, strFile);\n-        auto inserted = env->m_databases.emplace(strFile, std::ref(*this));\n+        auto inserted = this->env->m_databases.emplace(strFile, std::ref(*this));\n         assert(inserted.second);\n-        if (mock) {\n-            env->Close();\n-            env->Reset();\n-            env->MakeMock();\n-        }\n     }\n \n     ~BerkeleyDatabase() {\n@@ -140,7 +134,8 @@ class BerkeleyDatabase\n     /** Return object for accessing database at specified path. */\n     static std::unique_ptr<BerkeleyDatabase> Create(const fs::path& path)\n     {\n-        return MakeUnique<BerkeleyDatabase>(path);\n+        std::string filename;\n+        return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n     }\n \n     /** Return object for accessing dummy database with no read/write capabilities. */\n@@ -152,7 +147,7 @@ class BerkeleyDatabase\n     /** Return object for accessing temporary in-memory database. */\n     static std::unique_ptr<BerkeleyDatabase> CreateMock()\n     {\n-        return MakeUnique<BerkeleyDatabase>(\"\", true /* mock */);\n+        return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n@@ -176,12 +171,21 @@ class BerkeleyDatabase\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n+    /**\n+     * Pointer to shared database environment.\n+     *\n+     * Normally there is only one BerkeleyDatabase object per\n+     * BerkeleyEnvivonment, but in the special, backwards compatible case where\n+     * multiple wallet BDB data files are loaded from the same directory, this\n+     * will point to a shared instance that gets freed when the last data file\n+     * is closed.\n+     */\n+    std::shared_ptr<BerkeleyEnvironment> env;\n+\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n private:\n-    /** BerkeleyDB specific */\n-    BerkeleyEnvironment *env;\n     std::string strFile;\n \n     /** Return whether this database handle is a dummy for testing."
      },
      {
        "sha": "8d52f7eeca221e9c5118194e61af34b3e03c3979",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
        "patch": "@@ -4037,6 +4037,9 @@ bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::s\n         return false;\n     }\n \n+    // Keep same database environment instance across Verify/Recover calls below.\n+    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(wallet_path);\n+\n     try {\n         if (!WalletBatch::VerifyEnvironment(wallet_path, error_string)) {\n             return false;"
      }
    ]
  },
  {
    "sha": "2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTllOTA0YTVkNThlMGQyODhlOWFiYzFjYmM2MDJhODY3NGJjMWEy",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-31T00:05:18Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:24:11Z"
      },
      "message": "wallet: Close wallet env lock file\n\nClose .walletlock file when a BerkeleyEnvironment is deleted.\n\nGithub-Pull: #15297\nRebased-From: 2f8b8f4",
      "tree": {
        "sha": "54c8e417a1a9c1ae964534a4b4811dce9d33b6a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54c8e417a1a9c1ae964534a4b4811dce9d33b6a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22cdb6cf590d61668c85c1c08dcc15b4e95921c6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b41e61ddf5fa97f40d38849816a8a3de164ea630",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
        "patch": "@@ -174,6 +174,12 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     return true;\n }\n \n+void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name)\n+{\n+    std::lock_guard<std::mutex> lock(cs_dir_locks);\n+    dir_locks.erase((directory / lockfile_name).string());\n+}\n+\n void ReleaseDirectoryLocks()\n {\n     std::lock_guard<std::mutex> ulock(cs_dir_locks);"
      },
      {
        "sha": "957654124963d559428d1f8553116a5acdec21b9",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
        "patch": "@@ -77,6 +77,7 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n \n /** Release all directory locks. This is used for unit testing only, at runtime"
      },
      {
        "sha": "89b68495adad2d97dca014d028c1529aa2de8c29",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
        "patch": "@@ -136,6 +136,8 @@ void BerkeleyEnvironment::Close()\n         DbEnv((u_int32_t)0).remove(strPath.c_str(), 0);\n \n     if (error_file) fclose(error_file);\n+\n+    UnlockDirectory(strPath, \".walletlock\");\n }\n \n void BerkeleyEnvironment::Reset()"
      }
    ]
  },
  {
    "sha": "fe95f84542f81862e9759503416d9da9f67d191b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTk1Zjg0NTQyZjgxODYyZTk3NTk1MDM0MTZkOWRhOWY2N2QxOTFi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-02-04T18:50:21Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:24:11Z"
      },
      "message": "qa: Test .walletlock file is closed\n\nGithub-Pull: #15297\nRebased-From: d3bf3b9",
      "tree": {
        "sha": "b9868e1ecd82923729726239b3b1b2a9c7af6e2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9868e1ecd82923729726239b3b1b2a9c7af6e2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe95f84542f81862e9759503416d9da9f67d191b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe95f84542f81862e9759503416d9da9f67d191b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe95f84542f81862e9759503416d9da9f67d191b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe95f84542f81862e9759503416d9da9f67d191b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9e904a5d58e0d288e9abc1cbc602a8674bc1a2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "712a10b73182f8b79e885ae20de88e716cd4b55a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe95f84542f81862e9759503416d9da9f67d191b/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe95f84542f81862e9759503416d9da9f67d191b/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fe95f84542f81862e9759503416d9da9f67d191b",
        "patch": "@@ -311,6 +311,14 @@ def wallet_file(name):\n             self.nodes[0].loadwallet(wallet_name)\n             assert_equal(rpc.getaddressinfo(addr)['ismine'], True)\n \n+        # Test .walletlock file is closed\n+        self.start_node(1)\n+        wallet = os.path.join(self.options.tmpdir, 'my_wallet')\n+        self.nodes[0].createwallet(wallet)\n+        assert_raises_rpc_error(-4, \"Error initializing wallet database environment\", self.nodes[1].loadwallet, wallet)\n+        self.nodes[0].unloadwallet(wallet)\n+        self.nodes[1].loadwallet(wallet)\n+\n \n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  },
  {
    "sha": "85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWM2MjYzZGRiZGU3MTg5YmJiNTIzMTdkZDNhZDkyMDJiNWViZjQw",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-09-14T18:13:16Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:25:36Z"
      },
      "message": "Trivial: add doxygen-compatible comments relating to BerkeleyEnvironment\n\nGithub-Pull: #11911\nRebased-From: 14bc2a1",
      "tree": {
        "sha": "7ec1990bfbeb86706ceb4183838a2921c925c140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec1990bfbeb86706ceb4183838a2921c925c140"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c6263ddbde7189bbb52317dd3ad9202b5ebf40/comments",
    "author": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f22d02f5371efcaa48a8d5d1b8cd31c65d8235f3"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "408713c0c6796a6b09842114a11439af63db995b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c6263ddbde7189bbb52317dd3ad9202b5ebf40/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c6263ddbde7189bbb52317dd3ad9202b5ebf40/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
        "patch": "@@ -84,6 +84,13 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n     return database && database->IsDatabaseLoaded(database_filename);\n }\n \n+/**\n+ * @param[in] wallet_path Path to wallet directory. Or (for backwards compatibility only) a path to a berkeley btree data file inside a wallet directory.\n+ * @param[out] database_filename Filename of berkeley btree data file inside the wallet directory.\n+ * @return A shared pointer to the BerkeleyEnvironment object for the wallet directory, never empty because ~BerkeleyEnvironment\n+ * erases the weak pointer from the g_dbenvs map.\n+ * @post A new BerkeleyEnvironment weak pointer is inserted into g_dbenvs if the directory path key was not already in the map.\n+ */\n std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n     fs::path env_directory;\n@@ -218,6 +225,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     return true;\n }\n \n+//! Construct an in-memory mock Berkeley environment for testing and as a place-holder for g_dbenvs emplace\n BerkeleyEnvironment::BerkeleyEnvironment()\n {\n     Reset();"
      }
    ]
  },
  {
    "sha": "f20513bd71d0530ad9285b9558e3a02733250a63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjA1MTNiZDcxZDA1MzBhZDkyODViOTU1OGUzYTAyNzMzMjUwYTYz",
    "commit": {
      "author": {
        "name": "Pierre Rochard",
        "email": "pierre@rochard.org",
        "date": "2018-09-15T01:10:20Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:25:49Z"
      },
      "message": "Tests: add unit tests for GetWalletEnv\n\nGithub-Pull: #11911\nRebased-From: 88b1d95",
      "tree": {
        "sha": "6296496ce57495f43d45344782ce9cb01be8267a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6296496ce57495f43d45344782ce9cb01be8267a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f20513bd71d0530ad9285b9558e3a02733250a63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f20513bd71d0530ad9285b9558e3a02733250a63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f20513bd71d0530ad9285b9558e3a02733250a63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f20513bd71d0530ad9285b9558e3a02733250a63/comments",
    "author": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c6263ddbde7189bbb52317dd3ad9202b5ebf40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85c6263ddbde7189bbb52317dd3ad9202b5ebf40"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1b6827d45a17a38a23629914a9d2367385ef458a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f20513bd71d0530ad9285b9558e3a02733250a63/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f20513bd71d0530ad9285b9558e3a02733250a63/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f20513bd71d0530ad9285b9558e3a02733250a63",
        "patch": "@@ -95,6 +95,7 @@ BITCOIN_TESTS =\\\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/accounting_tests.cpp \\\n+  wallet/test/db_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\"
      },
      {
        "sha": "2a6474937933b9b873fed8a8abfe3554b0426f2e",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "added",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f20513bd71d0530ad9285b9558e3a02733250a63/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f20513bd71d0530ad9285b9558e3a02733250a63/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=f20513bd71d0530ad9285b9558e3a02733250a63",
        "patch": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <memory>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <fs.h>\n+#include <test/test_bitcoin.h>\n+#include <wallet/db.h>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_file)\n+{\n+    std::string test_name = \"test_name.dat\";\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path file_path = datadir / test_name;\n+    std::ofstream f(file_path.BOOST_FILESYSTEM_C_STR);\n+    f.close();\n+\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+    BOOST_CHECK(filename == test_name);\n+    BOOST_CHECK(env->Directory() == datadir);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_directory)\n+{\n+    std::string expected_name = \"wallet.dat\";\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(datadir, filename);\n+    BOOST_CHECK(filename == expected_name);\n+    BOOST_CHECK(env->Directory() == datadir);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_multiple)\n+{\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path datadir_2 = SetDataDir(\"tempdir_2\");\n+    std::string filename;\n+\n+    std::shared_ptr<BerkeleyEnvironment> env_1 = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_2 = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_3 = GetWalletEnv(datadir_2, filename);\n+\n+    BOOST_CHECK(env_1 == env_2);\n+    BOOST_CHECK(env_2 != env_3);\n+}\n+\n+BOOST_AUTO_TEST_CASE(getwalletenv_g_dbenvs_free_instance)\n+{\n+    fs::path datadir = SetDataDir(\"tempdir\");\n+    fs::path datadir_2 = SetDataDir(\"tempdir_2\");\n+    std::string filename;\n+\n+    std::shared_ptr <BerkeleyEnvironment> env_1_a = GetWalletEnv(datadir, filename);\n+    std::shared_ptr <BerkeleyEnvironment> env_2_a = GetWalletEnv(datadir_2, filename);\n+    env_1_a.reset();\n+\n+    std::shared_ptr<BerkeleyEnvironment> env_1_b = GetWalletEnv(datadir, filename);\n+    std::shared_ptr<BerkeleyEnvironment> env_2_b = GetWalletEnv(datadir_2, filename);\n+\n+    BOOST_CHECK(env_1_a != env_1_b);\n+    BOOST_CHECK(env_2_a == env_2_b);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmNkYjZjZjU5MGQ2MTY2OGM4NWMxYzA4ZGNjMTViNGU5NTkyMWM2",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-31T00:04:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-12T23:24:11Z"
      },
      "message": "wallet: Close dbenv error file db.log\n\nThe error file db.log is opened by BerkeleyEnvironment instance and\nshould be closed after dbenv is closed.\n\nGithub-Pull: #15297\nRebased-From: 8602a1e",
      "tree": {
        "sha": "bb43673e695f8d62fae7e33935b881ebb7cd305f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb43673e695f8d62fae7e33935b881ebb7cd305f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22cdb6cf590d61668c85c1c08dcc15b4e95921c6/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f20513bd71d0530ad9285b9558e3a02733250a63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f20513bd71d0530ad9285b9558e3a02733250a63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f20513bd71d0530ad9285b9558e3a02733250a63"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e7fd24a8cf2614a9eed4d4166e27ad02dbfd7b4",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22cdb6cf590d61668c85c1c08dcc15b4e95921c6/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22cdb6cf590d61668c85c1c08dcc15b4e95921c6/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=22cdb6cf590d61668c85c1c08dcc15b4e95921c6",
        "patch": "@@ -126,11 +126,16 @@ void BerkeleyEnvironment::Close()\n         }\n     }\n \n+    FILE* error_file = nullptr;\n+    dbenv->get_errfile(&error_file);\n+\n     int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"BerkeleyEnvironment::Close: Error %d closing database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv((u_int32_t)0).remove(strPath.c_str(), 0);\n+\n+    if (error_file) fclose(error_file);\n }\n \n void BerkeleyEnvironment::Reset()"
      }
    ]
  }
]