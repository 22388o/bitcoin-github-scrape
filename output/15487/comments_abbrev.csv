DrahtBot,2019-02-26T21:36:48Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15463](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15463.html) (rpc: Speedup getaddressesbylabel by promag)",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-467623894,467623894,
sipa,2019-02-28T20:14:48Z,@practicalswift There is absolutely no point in giving coding nits on a PR that is just at a proof of concept stage like this.,https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468421203,468421203,
practicalswift,2019-02-28T21:10:30Z,"@sipa Oh, personally I'm very happy as a PR author when reviewers take time to point out areas of improvement (large or small) or small mistakes in my code also in the WIP stage.  In the event that I find a particular nit irrelevant or premature I would simply hit ""Resolve conversation"" and be done with it.\n\nWhat do you think @Sjors?",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468439619,468439619,
practicalswift,2019-02-28T21:50:15Z,"Perhaps [""Draft pull requests""](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests) could be used to opt out of any code feedback:\n\n> When you create a pull request, you can choose to create a pull request that is ready for review or a draft pull request. [â€¦] When you're ready to get feedback on your draft pull request, you can mark your pull request as ready for revie",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468452395,468452395,
Sjors,2019-03-01T12:05:55Z,"I don't mind and usually just fix it in the next update, but whether it's useful depends on the type of nit.\n\nSemi columns, whitespace, consts and return value stuff feedback is not useful imo, because those things are likely to be moved around. I suggest holding on off on those until I remove the WIP label. My own standard for WIP is anything that compiles and works in the happy-case scenario",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468644160,468644160,
ryanofsky,2019-03-01T15:43:44Z,"I took a look at this, and it seems well structured. I'm curious what the first use-case will be. Or I guess what's the minimum thing that needs that needs to be implemented here for this to be useful for hardware wallets and #14912? Current state as of df794753284cc1bd991a5cdf0bd747fffb1db3b9 seems to be that a descriptor wallet is a blank wallet that you're allowed to import public key descripto",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468708304,468708304,
Sjors,2019-03-01T16:11:40Z,"The reason for the flag is to prevent ""legacy"" keys from getting mixed with descriptors. Maybe later on I discover that such mixing is fine, then I can drop the flag.\n\nAlso note that the blank flag goes away when you add a key. Which reminds me that it should also go away when you add a descriptor; that's missing in this version.",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-468717867,468717867,
Sjors,2019-03-16T21:52:28Z,"It now distinguishes ""address source"" descriptors (similar to keypool) from ""archive"" descriptors. There can only be one base58 and one bech32 receive / change address source descriptor.\n\nI implemented `getnewaddress` and `dumpwallet` includes address labels.\n\nI could use feedback on the details of what we're serializing, as well as on how I implemented the serialization / wallet loading c",https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-473595683,473595683,
DrahtBot,2019-04-17T19:24:06Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-484227298,484227298,
Sjors,2019-06-06T09:30:08Z,Closing in favor of @achow101's #15764 which has better momentum.,https://github.com/bitcoin/bitcoin/pull/15487#issuecomment-499421275,499421275,
practicalswift,2019-02-28T20:10:27Z,Nit: `;;` at end of line :-),https://github.com/bitcoin/bitcoin/pull/15487#discussion_r261363963,261363963,src/wallet/wallet.h
practicalswift,2019-02-28T20:12:36Z,Could be `const`?,https://github.com/bitcoin/bitcoin/pull/15487#discussion_r261364647,261364647,src/wallet/wallet.cpp
practicalswift,2019-02-28T20:13:18Z,"Nit: Just `return LoadDescriptor(nID, std::move(desc));`?",https://github.com/bitcoin/bitcoin/pull/15487#discussion_r261364886,261364886,src/wallet/wallet.cpp
Sjors,2019-03-01T12:07:30Z,@practicalswift e.g. this is the kind of thing I find feedback more useful on in the WIP stage,https://github.com/bitcoin/bitcoin/pull/15487#discussion_r261579660,261579660,src/wallet/walletdb.cpp
practicalswift,2019-03-20T10:23:12Z,"Should be ""initializes"" :-)",https://github.com/bitcoin/bitcoin/pull/15487#discussion_r267269671,267269671,src/wallet/walletdb.h
