[
  {
    "sha": "5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzY2ZDQxYjdmZmU4NTU3Y2U1MDM2NjEzYzk4NTRkMmYxZGMzYzM3",
    "commit": {
      "author": {
        "name": "Lauda",
        "email": "lauda.m@protonmail.ch",
        "date": "2017-01-13T15:05:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-22T12:18:51Z"
      },
      "message": "[Trivial] Grammar and typo correction\n\nMinor corrections in src\\test\\* .",
      "tree": {
        "sha": "665a4171ec4582a2d4ba91989a26ab5dd2dc34bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/665a4171ec4582a2d4ba91989a26ab5dd2dc34bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "00446aa11e1352a55f75db17ed1ab91cf3cc822c",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -15,7 +15,7 @@\n  *  with deterministic seeds)\n  *  2) Some test methods are templated to allow for easier testing\n  *  against new versions / comparing\n- *  3) Results should be treated as a regression test, ie, did the behavior\n+ *  3) Results should be treated as a regression test, i.e., did the behavior\n  *  change significantly from what was expected. This can be OK, depending on\n  *  the nature of the change, but requires updating the tests to reflect the new\n  *  expected behavior. For example improving the hit rate may cause some tests"
      },
      {
        "sha": "d5d158027b1ea3211f8966c6e5797b2f773a5db8",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -76,7 +76,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n         BOOST_CHECK(dbw.Read(key2, res));\n         BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n \n-        // key3 never should've been written\n+        // key3 should've never been written\n         BOOST_CHECK(dbw.Read(key3, res) == false);\n     }\n }"
      },
      {
        "sha": "b071ab117b9ccec7d96df18ed6050cb4e2d84c38",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n     // make sure that the size is updated\n     BOOST_CHECK(map.size() == 1);\n \n-    // make sure that the new items is in the map\n+    // make sure that the new item is in the map\n     BOOST_CHECK(map.count(-1) == 1);\n \n     // insert 10 new items"
      },
      {
        "sha": "e4ddf9d618a8810770aa38478a2c839df08e2192",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -47,8 +47,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     //\n     // So... ten shared counters, which if all the tasks execute\n     // properly will sum to the number of tasks done.\n-    // Each task adds or subtracts from one of the counters a\n-    // random amount, and then schedules another task 0-1000\n+    // Each task adds or subtracts a random amount from one of the\n+    // counters, and then schedules another task 0-1000\n     // microseconds in the future to subtract or add from\n     // the counter -random_amount+1, so in the end the shared\n     // counters should sum to the number of initial tasks performed."
      },
      {
        "sha": "32184165f7e5aea90ad64f67bfec072947b3e70a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -465,7 +465,7 @@ class TestBuilder\n std::string JSONPrettyPrint(const UniValue& univalue)\n {\n     std::string ret = univalue.write(4);\n-    // Workaround for libunivalue pretty printer, which puts a space between comma's and newlines\n+    // Workaround for libunivalue pretty printer, which puts a space between commas and newlines\n     size_t pos = 0;\n     while ((pos = ret.find(\" \\n\", pos)) != std::string::npos) {\n         ret.replace(pos, 2, \"\\n\");"
      },
      {
        "sha": "4785415e3cc5dd61c48671e576b6c2ed4c0cebd5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c66d41b7ffe8557ce5036613c9854d2f1dc3c37/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5c66d41b7ffe8557ce5036613c9854d2f1dc3c37",
        "patch": "@@ -147,7 +147,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx, CT\n }\n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPool *pool) {\n-    // Hack to assume either its completely dependent on other mempool txs or not at all\n+    // Hack to assume either it's completely dependent on other mempool txs or not at all\n     CAmount inChainValue = pool && pool->HasNoInputsOf(txn) ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, dPriority, nHeight,"
      }
    ]
  }
]