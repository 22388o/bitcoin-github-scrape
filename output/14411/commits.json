[
  {
    "sha": "65b740f92be73de0612e892d61c2feb6e4a81ad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWI3NDBmOTJiZTczZGUwNjEyZTg5MmQ2MWMyZmViNmU0YTgxYWQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-06T04:48:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-13T21:49:23Z"
      },
      "message": "[wallet] Restore ability to list incoming transactions by label\n\nThis change partially reverts #13075 and #14023.\n\nFixes #14382",
      "tree": {
        "sha": "68157319bccb71796dd81ced022fc504a61291ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68157319bccb71796dd81ced022fc504a61291ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65b740f92be73de0612e892d61c2feb6e4a81ad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b740f92be73de0612e892d61c2feb6e4a81ad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65b740f92be73de0612e892d61c2feb6e4a81ad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b740f92be73de0612e892d61c2feb6e4a81ad1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c59bb85f9798429fb1372b8e83378d292888286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c59bb85f9798429fb1372b8e83378d292888286",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c59bb85f9798429fb1372b8e83378d292888286"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 44,
      "deletions": 18
    },
    "files": [
      {
        "sha": "e25d013b372bd086ef830aa93477257d6ef20380",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b740f92be73de0612e892d61c2feb6e4a81ad1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b740f92be73de0612e892d61c2feb6e4a81ad1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=65b740f92be73de0612e892d61c2feb6e4a81ad1",
        "patch": "@@ -1267,8 +1267,9 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  fLong      Whether to include the JSON version of the transaction.\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n+ * @param  filter_label Optional label string to filter incoming transactions.\n  */\n-static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter, const std::string* filter_label)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;\n@@ -1279,7 +1280,7 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n     bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n \n     // Sent\n-    if ((!listSent.empty() || nFee != 0))\n+    if (!filter_label)\n     {\n         for (const COutputEntry& s : listSent)\n         {\n@@ -1311,6 +1312,9 @@ static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* con\n             if (pwallet->mapAddressBook.count(r.destination)) {\n                 label = pwallet->mapAddressBook[r.destination].name;\n             }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n@@ -1352,10 +1356,12 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listtransactions ( \\\"dummy\\\" count skip include_watchonly)\\n\"\n+            \"listtransactions ( \\\"label\\\" count skip include_watchonly )\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n@@ -1400,8 +1406,12 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n+    const std::string* filter_label = nullptr;\n     if (!request.params[0].isNull() && request.params[0].get_str() != \"*\") {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n+        filter_label = &request.params[0].get_str();\n+        if (filter_label->empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n+        }\n     }\n     int nCount = 10;\n     if (!request.params[1].isNull())\n@@ -1431,7 +1441,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n         {\n             CWalletTx *const pwtx = (*it).second;\n-            ListTransactions(*locked_chain, pwallet, *pwtx, 0, true, ret, filter);\n+            ListTransactions(*locked_chain, pwallet, *pwtx, 0, true, ret, filter, filter_label);\n             if ((int)ret.size() >= (nCount+nFrom)) break;\n         }\n     }\n@@ -1568,7 +1578,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain(*locked_chain) < depth) {\n-            ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter);\n+            ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n         }\n     }\n \n@@ -1585,7 +1595,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             if (it != pwallet->mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(*locked_chain, pwallet, it->second, -100000000, true, removed, filter);\n+                ListTransactions(*locked_chain, pwallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n             }\n         }\n         paltindex = paltindex->pprev;\n@@ -1688,7 +1698,7 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(pwallet->chain(), *locked_chain, wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(*locked_chain, pwallet, wtx, 0, false, details, filter);\n+    ListTransactions(*locked_chain, pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n     entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n@@ -4143,7 +4153,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"label|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwalletdir\",                    &listwalletdir,                 {} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },"
      },
      {
        "sha": "46462a16f371282a3fa1ae4346ebb243c7154563",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b740f92be73de0612e892d61c2feb6e4a81ad1/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b740f92be73de0612e892d61c2feb6e4a81ad1/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=65b740f92be73de0612e892d61c2feb6e4a81ad1",
        "patch": "@@ -46,11 +46,11 @@ def do_import(self, timestamp):\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], label=self.label, rescan=rescan)\n             elif self.data == Data.pub:\n-                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], label=self.label, rescan=rescan)\n             elif self.data == Data.priv:\n-                response = self.try_rpc(self.node.importprivkey, privkey=self.key, rescan=rescan)\n+                response = self.try_rpc(self.node.importprivkey, privkey=self.key, label=self.label, rescan=rescan)\n             assert_equal(response, None)\n \n         elif self.call in (Call.multiaddress, Call.multiscript):\n@@ -61,18 +61,32 @@ def do_import(self, timestamp):\n                 \"timestamp\": timestamp + TIMESTAMP_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n             }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n     def check(self, txid=None, amount=None, confirmations=None):\n-        \"\"\"Verify that listreceivedbyaddress returns expected values.\"\"\"\n+        \"\"\"Verify that listtransactions/listreceivedbyaddress return expected values.\"\"\"\n+\n+        txs = self.node.listtransactions(label=self.label, count=10000, include_watchonly=True)\n+        assert_equal(len(txs), self.expected_txs)\n \n         addresses = self.node.listreceivedbyaddress(minconf=0, include_watchonly=True, address_filter=self.address['address'])\n         if self.expected_txs:\n             assert_equal(len(addresses[0][\"txids\"]), self.expected_txs)\n \n         if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(\"trusted\" not in tx, True)\n+\n             address, = [ad for ad in addresses if txid in ad[\"txids\"]]\n             assert_equal(address[\"address\"], self.address[\"address\"])\n             assert_equal(address[\"amount\"], self.expected_balance)\n@@ -134,7 +148,8 @@ def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 1 - (i + 1) / 64\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "8ca0387268037157725b7920b047a345444270a7",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65b740f92be73de0612e892d61c2feb6e4a81ad1/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65b740f92be73de0612e892d61c2feb6e4a81ad1/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=65b740f92be73de0612e892d61c2feb6e4a81ad1",
        "patch": "@@ -97,9 +97,10 @@ def run_test(self):\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        assert not [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=False) if \"label\" in tx and tx[\"label\"] == \"watchonly\"]\n-        txs = [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=True) if \"label\" in tx and tx['label'] == 'watchonly']\n-        assert_array_result(txs, {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")}, {\"txid\": txid})\n+        assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=False)) == 0\n+        assert_array_result(self.nodes[0].listtransactions(label=\"watchonly\", count=100, include_watchonly=True),\n+                            {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")},\n+                            {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n "
      }
    ]
  },
  {
    "sha": "da427dbd48ae8d12a2a79a7514a813e78064fe52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTQyN2RiZDQ4YWU4ZDEyYTJhNzlhNzUxNGE4MTNlNzgwNjRmZTUy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-12T15:49:39Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-11-13T21:49:23Z"
      },
      "message": "Rename ListTransactions filter variable\n\nSuggested by MeshCollider <dobsonsa68@gmail.com> in\nhttps://github.com/bitcoin/bitcoin/pull/14411#discussion_r232134086",
      "tree": {
        "sha": "3976dad260facbb4a692fe70207f420d2eafd708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3976dad260facbb4a692fe70207f420d2eafd708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da427dbd48ae8d12a2a79a7514a813e78064fe52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da427dbd48ae8d12a2a79a7514a813e78064fe52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da427dbd48ae8d12a2a79a7514a813e78064fe52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da427dbd48ae8d12a2a79a7514a813e78064fe52/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65b740f92be73de0612e892d61c2feb6e4a81ad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65b740f92be73de0612e892d61c2feb6e4a81ad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65b740f92be73de0612e892d61c2feb6e4a81ad1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0e2f8864b194d990243676cd4751d89c5c7e1044",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da427dbd48ae8d12a2a79a7514a813e78064fe52/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da427dbd48ae8d12a2a79a7514a813e78064fe52/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=da427dbd48ae8d12a2a79a7514a813e78064fe52",
        "patch": "@@ -1261,21 +1261,21 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n /**\n  * List transactions based on the given criteria.\n  *\n- * @param  pwallet    The wallet.\n- * @param  wtx        The wallet transaction.\n- * @param  nMinDepth  The minimum confirmation depth.\n- * @param  fLong      Whether to include the JSON version of the transaction.\n- * @param  ret        The UniValue into which the result is stored.\n- * @param  filter     The \"is mine\" filter bool.\n- * @param  filter_label Optional label string to filter incoming transactions.\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n  */\n-static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter, const std::string* filter_label)\n+static void ListTransactions(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label)\n {\n     CAmount nFee;\n     std::list<COutputEntry> listReceived;\n     std::list<COutputEntry> listSent;\n \n-    wtx.GetAmounts(listReceived, listSent, nFee, filter);\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n \n     bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n "
      }
    ]
  }
]