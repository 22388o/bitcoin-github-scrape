[
  {
    "sha": "36f03801dc66193bdbdee25a92b871202dbd36c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmYwMzgwMWRjNjYxOTNiZGJkZWUyNWE5MmI4NzEyMDJkYmQzNmM2",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-07-13T17:06:54Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-07-13T17:06:54Z"
      },
      "message": "Using a shared lock for wallet registration functions since only functions that modify the setpwalletRegistered container structure itself (and not the contents) need exclusive access.",
      "tree": {
        "sha": "96fc7852f812124b92134192626e7e496a4781fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96fc7852f812124b92134192626e7e496a4781fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36f03801dc66193bdbdee25a92b871202dbd36c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f03801dc66193bdbdee25a92b871202dbd36c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36f03801dc66193bdbdee25a92b871202dbd36c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f03801dc66193bdbdee25a92b871202dbd36c6/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d598872726ce9e2cbabdf705a616495c44851c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d598872726ce9e2cbabdf705a616495c44851c2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d598872726ce9e2cbabdf705a616495c44851c2c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 15,
      "deletions": 19
    },
    "files": [
      {
        "sha": "169c55816a23055d53f70f62ea6321c5b59b80e9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36f03801dc66193bdbdee25a92b871202dbd36c6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36f03801dc66193bdbdee25a92b871202dbd36c6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=36f03801dc66193bdbdee25a92b871202dbd36c6",
        "patch": "@@ -23,7 +23,7 @@ using namespace boost;\n // Global state\n //\n \n-CCriticalSection cs_setpwalletRegistered;\n+boost::shared_mutex cs_setpwalletRegistered;\n set<CWallet*> setpwalletRegistered;\n \n CCriticalSection cs_main;\n@@ -85,30 +85,26 @@ int64 nTransactionFee = 0;\n \n void RegisterWallet(CWallet* pwalletIn)\n {\n-    {\n-        LOCK(cs_setpwalletRegistered);\n-        setpwalletRegistered.insert(pwalletIn);\n-    }\n+    boost::unique_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n+    setpwalletRegistered.insert(pwalletIn);\n }\n \n void UnregisterWallet(CWallet* pwalletIn)\n {\n-    {\n-        LOCK(cs_setpwalletRegistered);\n-        setpwalletRegistered.erase(pwalletIn);\n-    }\n+    boost::unique_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n+    setpwalletRegistered.erase(pwalletIn);\n }\n \n void UnregisterAllWallets()\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::unique_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     setpwalletRegistered.clear();\n }\n \n // get the wallet transaction with the given hash (if it exists)\n bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         if (pwallet->GetTransaction(hashTx,wtx))\n             return true;\n@@ -118,55 +114,55 @@ bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n // erases transaction with the given hash from all wallets\n void static EraseFromWallets(uint256 hash)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->EraseFromWallet(hash);\n }\n \n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n }\n \n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->SetBestChain(loc);\n }\n \n // notify wallets about an updated transaction\n void static UpdatedTransaction(const uint256& hashTx)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->UpdatedTransaction(hashTx);\n }\n \n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->PrintWallet(block);\n }\n \n // notify wallets about an incoming inventory (for request counts)\n void static Inventory(const uint256& hash)\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->Inventory(hash);\n }\n \n // ask wallets to resend their transactions\n void static ResendWalletTransactions()\n {\n-    LOCK(cs_setpwalletRegistered);\n+    boost::shared_lock<boost::shared_mutex> lock(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->ResendWalletTransactions();\n }"
      },
      {
        "sha": "65ae863f918d753e701b54c618bf91696b33ec30",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36f03801dc66193bdbdee25a92b871202dbd36c6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36f03801dc66193bdbdee25a92b871202dbd36c6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=36f03801dc66193bdbdee25a92b871202dbd36c6",
        "patch": "@@ -85,7 +85,7 @@ extern const std::string strMessageMagic;\n extern double dHashesPerSec;\n extern int64 nHPSTimerStart;\n extern int64 nTimeBestReceived;\n-extern CCriticalSection cs_setpwalletRegistered;\n+extern boost::shared_mutex cs_setpwalletRegistered;\n extern std::set<CWallet*> setpwalletRegistered;\n extern bool fImporting;\n extern bool fReindex;"
      }
    ]
  }
]