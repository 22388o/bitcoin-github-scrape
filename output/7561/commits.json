[
  {
    "sha": "957d59043b1eb3a2525eae6cae6a2a15b2eab401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTdkNTkwNDNiMWViM2EyNTI1ZWFlNmNhZTZhMmExNWIyZWFiNDAx",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T19:52:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T20:34:19Z"
      },
      "message": "Policy: allow transaction version 2 relay policy.\n\nThis commit introduces a way to gracefully bump the default\ntransaction version in a two step process.",
      "tree": {
        "sha": "9954780daffba415782217f5ca39aebb07b792d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9954780daffba415782217f5ca39aebb07b792d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/957d59043b1eb3a2525eae6cae6a2a15b2eab401",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957d59043b1eb3a2525eae6cae6a2a15b2eab401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/957d59043b1eb3a2525eae6cae6a2a15b2eab401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957d59043b1eb3a2525eae6cae6a2a15b2eab401/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b70a64d62c6e64288762d062414cc979f880c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b70a64d62c6e64288762d062414cc979f880c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b70a64d62c6e64288762d062414cc979f880c54"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e3ed7be0008ee8dd3ef19a01a84bc3507b271ca0",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/957d59043b1eb3a2525eae6cae6a2a15b2eab401/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/957d59043b1eb3a2525eae6cae6a2a15b2eab401/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=957d59043b1eb3a2525eae6cae6a2a15b2eab401",
        "patch": "@@ -55,7 +55,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }"
      },
      {
        "sha": "9f7d6f394390b5cac3533c8b101c20ba03028c8a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/957d59043b1eb3a2525eae6cae6a2a15b2eab401/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/957d59043b1eb3a2525eae6cae6a2a15b2eab401/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=957d59043b1eb3a2525eae6cae6a2a15b2eab401",
        "patch": "@@ -206,8 +206,15 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n+    // Default transaction version.\n     static const int32_t CURRENT_VERSION=1;\n \n+    // Changing the default transaction version requires a two step process: first\n+    // adapting relay policy by bumping MAX_STANDARD_VERSION, and then later date\n+    // bumping the default CURRENT_VERSION at which point both CURRENT_VERSION and\n+    // MAX_STANDARD_VERSION will be equal.\n+    static const int32_t MAX_STANDARD_VERSION=2;\n+\n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not\n     // actually immutable; deserialization and assignment are implemented,"
      }
    ]
  },
  {
    "sha": "7b1b9626b0c7ea3ee123a255835364d5b40342de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjFiOTYyNmIwYzdlYTNlZTEyM2EyNTU4MzUzNjRkNWI0MDM0MmRl",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T15:50:46Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T20:57:57Z"
      },
      "message": "Soft fork logic for BIP112",
      "tree": {
        "sha": "1469e1788b3e55373b40a769ddc40d8f5ecc8d0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1469e1788b3e55373b40a769ddc40d8f5ecc8d0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1b9626b0c7ea3ee123a255835364d5b40342de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1b9626b0c7ea3ee123a255835364d5b40342de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1b9626b0c7ea3ee123a255835364d5b40342de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1b9626b0c7ea3ee123a255835364d5b40342de/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "957d59043b1eb3a2525eae6cae6a2a15b2eab401",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/957d59043b1eb3a2525eae6cae6a2a15b2eab401",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/957d59043b1eb3a2525eae6cae6a2a15b2eab401"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7a608772e2cf4b1957afbdda975011745f798b82",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "patch": "@@ -2176,6 +2176,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    // Start enforcing CHECKSEQUENCEVERIFY (BIP112) for block.nVersion=5\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 5 && IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+     }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n \n@@ -3154,7 +3160,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n-    for (int32_t version = 2; version < 5; ++version) // check for version 2, 3 and 4 upgrades\n+    for (int32_t version = 2; version < 6; ++version) // check for version 2, 3, 4 and 5 upgrades\n         if (block.nVersion < version && IsSuperMajority(version, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n             return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(v%d)\", version - 1),\n                                  strprintf(\"rejected nVersion=%d block\", version - 1));"
      },
      {
        "sha": "f102cdb3af14fafa4a177ea79d87ddf31eb292a0",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "patch": "@@ -21,7 +21,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=4;\n+    static const int32_t CURRENT_VERSION=5;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "ae0c143e9687caf1f36d5b71c6d851e6f4748da8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "patch": "@@ -660,6 +660,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip112\", 5, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      },
      {
        "sha": "8b28ed9ea189b28091901ecb972079216262efe0",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1b9626b0c7ea3ee123a255835364d5b40342de/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "patch": "@@ -48,6 +48,7 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      }
    ]
  },
  {
    "sha": "81d808a6bd1f89cc58b87f64218fe638102d301e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWQ4MDhhNmJkMWY4OWNjNThiODdmNjQyMThmZTYzODEwMmQzMDFl",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:33:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T23:34:29Z"
      },
      "message": "Soft fork logic for BIP113",
      "tree": {
        "sha": "6f6900864b602a49bc013d28459c60c530c54b51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f6900864b602a49bc013d28459c60c530c54b51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81d808a6bd1f89cc58b87f64218fe638102d301e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d808a6bd1f89cc58b87f64218fe638102d301e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81d808a6bd1f89cc58b87f64218fe638102d301e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d808a6bd1f89cc58b87f64218fe638102d301e/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1b9626b0c7ea3ee123a255835364d5b40342de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1b9626b0c7ea3ee123a255835364d5b40342de"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0e998d08b99f4c8214a118aaa6e0498e0f1a4779",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d808a6bd1f89cc58b87f64218fe638102d301e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d808a6bd1f89cc58b87f64218fe638102d301e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=81d808a6bd1f89cc58b87f64218fe638102d301e",
        "patch": "@@ -3173,12 +3173,19 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    // Start enforcing BIP113 (Median Time Past) for block.nVersion=5\n+    // blocks, when 75% of the network has upgraded:\n+    int nLockTimeFlags = 0;\n+    if (block.nVersion >= 5 && IsSuperMajority(5, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams)) {\n+        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+    }\n+\n+    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                              ? pindexPrev->GetMedianTimePast()\n+                              : block.GetBlockTime();\n+\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, false, REJECT_INVALID, \"bad-txns-nonfinal\", false, \"non-final transaction\");\n         }"
      },
      {
        "sha": "3108b145896214ecff4bfeeffe6eaff57ff20bb2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81d808a6bd1f89cc58b87f64218fe638102d301e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81d808a6bd1f89cc58b87f64218fe638102d301e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=81d808a6bd1f89cc58b87f64218fe638102d301e",
        "patch": "@@ -660,7 +660,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip112\", 5, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip112,113\", 5, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      }
    ]
  },
  {
    "sha": "f4663dd2599c84016a646b8f06eb5cc61b3f7988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDY2M2RkMjU5OWM4NDAxNmE2NDZiOGYwNmViNWNjNjFiM2Y3OTg4",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-02-19T10:41:47Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T23:35:06Z"
      },
      "message": "RPC tests for BIP113 soft fork",
      "tree": {
        "sha": "658cbc79eb810aabe021d6038b5e0012be672335",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/658cbc79eb810aabe021d6038b5e0012be672335"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4663dd2599c84016a646b8f06eb5cc61b3f7988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4663dd2599c84016a646b8f06eb5cc61b3f7988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4663dd2599c84016a646b8f06eb5cc61b3f7988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4663dd2599c84016a646b8f06eb5cc61b3f7988/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81d808a6bd1f89cc58b87f64218fe638102d301e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81d808a6bd1f89cc58b87f64218fe638102d301e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81d808a6bd1f89cc58b87f64218fe638102d301e"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 190,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f218e09b5ccd72fbe48907147c9eca2a9e203057",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4663dd2599c84016a646b8f06eb5cc61b3f7988/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4663dd2599c84016a646b8f06eb5cc61b3f7988/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=f4663dd2599c84016a646b8f06eb5cc61b3f7988",
        "patch": "@@ -106,6 +106,7 @@\n     'invalidblockrequest.py',\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n+    'bip113-mtp-p2p.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "e751fc9528b433e1f4c782a86eb8290db687bf49",
        "filename": "qa/rpc-tests/bip113-mtp-p2p.py",
        "status": "added",
        "additions": 189,
        "deletions": 0,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4663dd2599c84016a646b8f06eb5cc61b3f7988/qa/rpc-tests/bip113-mtp-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4663dd2599c84016a646b8f06eb5cc61b3f7988/qa/rpc-tests/bip113-mtp-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip113-mtp-p2p.py?ref=f4663dd2599c84016a646b8f06eb5cc61b3f7988",
        "patch": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def mtp_invalidate(tx, blockTime):\n+    '''Modify the nLockTime to make it fails once MTP rule is activated\n+    '''\n+    # Disable Sequence lock, Activate nLockTime\n+    tx.vin[0].nSequence = 0x90FFFFFF\n+    tx.nLockTime = blockTime - 1\n+\n+'''\n+This test is meant to exercise BIP113 (Median Time Past for nLockTime)\n+Connect to a single node.\n+Mine 2 (version 4) blocks (save the coinbases for later).\n+Generate 98 more version 4 blocks, verify the node accepts.\n+Mine 749 version 5 blocks, verify the node accepts.\n+Check that the new MTP rules are not enforced on the 750th version 5 block.\n+Check that the new MTP rules are enforced on the 751st version 5 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP113Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new MTP rules are not enforced in the 750th\n+        version 4 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        mtp_invalidate(spendtx, self.last_block_time + 1)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new MTP rules are enforced in the 751st version 5\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        mtp_invalidate(spendtx, self.last_block_time + 1)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP113Test().main()"
      }
    ]
  },
  {
    "sha": "fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmMwZWJhMzYxN2JhNzVmMWM1ODU3OGE0YjgzMDkyMjZmOTVhYWY1",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:37:43Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T23:35:09Z"
      },
      "message": "Soft fork logic for BIP68",
      "tree": {
        "sha": "66f1c54ea6262e53fe874923f4e0514b3442da31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66f1c54ea6262e53fe874923f4e0514b3442da31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc0eba3617ba75f1c58578a4b8309226f95aaf5/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4663dd2599c84016a646b8f06eb5cc61b3f7988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4663dd2599c84016a646b8f06eb5cc61b3f7988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4663dd2599c84016a646b8f06eb5cc61b3f7988"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "153795154a4fc4a6f2d6c71c275113c4a20b97e7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc0eba3617ba75f1c58578a4b8309226f95aaf5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc0eba3617ba75f1c58578a4b8309226f95aaf5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
        "patch": "@@ -2176,10 +2176,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing CHECKSEQUENCEVERIFY (BIP112) for block.nVersion=5\n+    // Start enforcing BIP68 (sequence locks) and CHECKSEQUENCEVERIFY (BIP112) for block.nVersion=5\n     // blocks, when 75% of the network has upgraded:\n+    int nLockTimeFlags = 0;\n     if (block.nVersion >= 5 && IsSuperMajority(5, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n      }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n@@ -2190,7 +2192,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     std::vector<int> prevheights;\n-    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;"
      },
      {
        "sha": "4ff1d2fc337873a5611f957b907104587154b249",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbc0eba3617ba75f1c58578a4b8309226f95aaf5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbc0eba3617ba75f1c58578a4b8309226f95aaf5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
        "patch": "@@ -660,7 +660,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n-    softforks.push_back(SoftForkDesc(\"bip112,113\", 5, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip68,112,113\", 5, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      }
    ]
  },
  {
    "sha": "57a9ae2190143d8f381f370eaf39d0e1c36a2167",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2E5YWUyMTkwMTQzZDhmMzgxZjM3MGVhZjM5ZDBlMWMzNmEyMTY3",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-02-19T10:58:57Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T23:35:33Z"
      },
      "message": "RPC tests for BIP68 soft fork",
      "tree": {
        "sha": "712eb04a00c779cd80e55f47283e496f7a75793e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/712eb04a00c779cd80e55f47283e496f7a75793e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57a9ae2190143d8f381f370eaf39d0e1c36a2167",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a9ae2190143d8f381f370eaf39d0e1c36a2167",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57a9ae2190143d8f381f370eaf39d0e1c36a2167",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a9ae2190143d8f381f370eaf39d0e1c36a2167/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbc0eba3617ba75f1c58578a4b8309226f95aaf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbc0eba3617ba75f1c58578a4b8309226f95aaf5"
      }
    ],
    "stats": {
      "total": 192,
      "additions": 191,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24ebe00a5b30eefdd7c238efc7eee670c972b3d8",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57a9ae2190143d8f381f370eaf39d0e1c36a2167/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57a9ae2190143d8f381f370eaf39d0e1c36a2167/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=57a9ae2190143d8f381f370eaf39d0e1c36a2167",
        "patch": "@@ -106,12 +106,13 @@\n     'invalidblockrequest.py',\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n+    'bip68-sequence.py',\n+    'bip68-sequence-p2p.py',\n     'bip113-mtp-p2p.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n-    'bip68-sequence.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',"
      },
      {
        "sha": "98c8358b2ac7ebc640356481a335eb3470025853",
        "filename": "qa/rpc-tests/bip68-sequence-p2p.py",
        "status": "added",
        "additions": 189,
        "deletions": 0,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57a9ae2190143d8f381f370eaf39d0e1c36a2167/qa/rpc-tests/bip68-sequence-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57a9ae2190143d8f381f370eaf39d0e1c36a2167/qa/rpc-tests/bip68-sequence-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence-p2p.py?ref=57a9ae2190143d8f381f370eaf39d0e1c36a2167",
        "patch": "@@ -0,0 +1,189 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def sequence_lock_invalidate(tx):\n+    '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n+    '''\n+    tx.vin[0].nSequence = 0x00FFFFFF\n+    tx.nLockTime = 0\n+\n+'''\n+This test is meant to exercise BIP68 (Sequence lock)\n+Connect to a single node.\n+Mine 2 (version 4) blocks (save the coinbases for later).\n+Generate 98 more version 4 blocks, verify the node accepts.\n+Mine 749 version 5 blocks, verify the node accepts.\n+Check that the new sequence lock rules are not enforced on the 750th version 5 block.\n+Check that the new sequence lock rules are enforced on the 751st version 5 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP68Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        tx.nVersion = 2\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new sequence lock rules are not enforced in the 750th\n+        version 4 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        sequence_lock_invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new sequence lock rules are enforced in the 751st version 5\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        sequence_lock_invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP68Test().main()\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "83e452243005e40953387b1aa1be7796bebb31c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2U0NTIyNDMwMDVlNDA5NTMzODdiMWFhMWJlNzc5NmJlYmIzMWM3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T19:59:06Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T23:35:35Z"
      },
      "message": "RPC test for IsSuperMajority() upgrade blockversion >= 5",
      "tree": {
        "sha": "d6cd0dc3a8b333dc43c6235b5c611331a75bf3d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6cd0dc3a8b333dc43c6235b5c611331a75bf3d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83e452243005e40953387b1aa1be7796bebb31c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83e452243005e40953387b1aa1be7796bebb31c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83e452243005e40953387b1aa1be7796bebb31c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83e452243005e40953387b1aa1be7796bebb31c7/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57a9ae2190143d8f381f370eaf39d0e1c36a2167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a9ae2190143d8f381f370eaf39d0e1c36a2167",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57a9ae2190143d8f381f370eaf39d0e1c36a2167"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 88,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b9512ca352d9ad6e80202b397673d36fdd93960",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83e452243005e40953387b1aa1be7796bebb31c7/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83e452243005e40953387b1aa1be7796bebb31c7/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=83e452243005e40953387b1aa1be7796bebb31c7",
        "patch": "@@ -109,6 +109,7 @@\n     'bip68-sequence.py',\n     'bip68-sequence-p2p.py',\n     'bip113-mtp-p2p.py',\n+    'blockversion5-ism.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "14b0ec6ce64fbd9630586f9dbda2531f7db1ee66",
        "filename": "qa/rpc-tests/blockversion5-ism.py",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83e452243005e40953387b1aa1be7796bebb31c7/qa/rpc-tests/blockversion5-ism.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83e452243005e40953387b1aa1be7796bebb31c7/qa/rpc-tests/blockversion5-ism.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockversion5-ism.py?ref=83e452243005e40953387b1aa1be7796bebb31c7",
        "patch": "@@ -0,0 +1,87 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the IsSuperMajority >=5 soft-fork logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ISM5Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=4\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=5\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].generate(100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=4 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].generate(50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=5 blocks\")\n+\n+        # TODO: check that new rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionError(\"Failed to mine a version=5 blocks\")\n+\n+        # TODO: check that new rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].generate(99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=5 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=4 block after 949 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=5 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].generate(1)\n+            raise AssertionError(\"Succeeded to mine a version=4 block after 950 version=5 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=4 block after 950 version=5 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=5 block\")\n+\n+if __name__ == '__main__':\n+    ISM5Test().main()"
      }
    ]
  },
  {
    "sha": "3bd5c4439e177054fe3a5fa116429e9097451ea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmQ1YzQ0MzllMTc3MDU0ZmUzYTVmYTExNjQyOWU5MDk3NDUxZWEw",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-20T16:40:08Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-20T17:43:00Z"
      },
      "message": "RPC tests for BIP112 soft fork",
      "tree": {
        "sha": "7f72f803efdef3453221d03140f84691bcb8d626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f72f803efdef3453221d03140f84691bcb8d626"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bd5c4439e177054fe3a5fa116429e9097451ea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bd5c4439e177054fe3a5fa116429e9097451ea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bd5c4439e177054fe3a5fa116429e9097451ea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bd5c4439e177054fe3a5fa116429e9097451ea0/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83e452243005e40953387b1aa1be7796bebb31c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83e452243005e40953387b1aa1be7796bebb31c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83e452243005e40953387b1aa1be7796bebb31c7"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 183,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b081aa1583e03e880748d39994b36bb7b3d312fc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bd5c4439e177054fe3a5fa116429e9097451ea0/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bd5c4439e177054fe3a5fa116429e9097451ea0/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3bd5c4439e177054fe3a5fa116429e9097451ea0",
        "patch": "@@ -108,6 +108,7 @@\n     'abandonconflict.py',\n     'bip68-sequence.py',\n     'bip68-sequence-p2p.py',\n+    'bip112-csv-p2p.py',\n     'bip113-mtp-p2p.py',\n     'blockversion5-ism.py',\n ]"
      },
      {
        "sha": "a7762eb7b0ad9f235c87a912dce334e535858820",
        "filename": "qa/rpc-tests/bip112-csv-p2p.py",
        "status": "added",
        "additions": 182,
        "deletions": 0,
        "changes": 182,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bd5c4439e177054fe3a5fa116429e9097451ea0/qa/rpc-tests/bip112-csv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bd5c4439e177054fe3a5fa116429e9097451ea0/qa/rpc-tests/bip112-csv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip112-csv-p2p.py?ref=3bd5c4439e177054fe3a5fa116429e9097451ea0",
        "patch": "@@ -0,0 +1,182 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+def csv_invalidate(tx):\n+    '''Modify the signature in vin 0 of the tx to fail CSV\n+\n+    Prepends -1 CSV DROP in the scriptSig itself.\n+    '''\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n+                                  list(CScript(tx.vin[0].scriptSig)))\n+\n+'''\n+This test is meant to exercise BIP112 (CHECKSEQUENCEVERIFY)\n+Connect to a single node.\n+Mine 2 (version 4) blocks (save the coinbases for later).\n+Generate 98 more version 4 blocks, verify the node accepts.\n+Mine 749 version 5 blocks, verify the node accepts.\n+Check that the new CSV rules are not enforced on the 750th version 5 block.\n+Check that the new CSV rules are enforced on the 751st version 5 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP112Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new CSV rules are not enforced in the 750th\n+        version 4 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        csv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new CSV rules are enforced in the 751st version 5\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        csv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+            block.nVersion = 5\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            height += 1\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        height += 1\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP112Test().main()\n\\ No newline at end of file"
      }
    ]
  }
]