[
  {
    "sha": "c9e6e7ed79886b702614e627a966fc9a4850f8f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWU2ZTdlZDc5ODg2YjcwMjYxNGU2MjdhOTY2ZmM5YTQ4NTBmOGYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-10T02:40:35Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-04-22T23:18:58Z"
      },
      "message": "wallet: add cachable amounts for caching credit/debit values",
      "tree": {
        "sha": "0985cb2805e1e66399cdb936120f92e313c3d101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0985cb2805e1e66399cdb936120f92e313c3d101"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9e6e7ed79886b702614e627a966fc9a4850f8f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAly+S+MACgkQV692LbM1\nMyIswA/+LBDShwGIW39AygsAEyRaiYc5mRqQmcg8UGoqt0XomJ5nIDWCS4TtXXjE\nhVK+YnviJU8JmyGeeVqrHbB+sX3KvgVjlJr8nbKQoZHBRS51IaKKw+E6tBhDga4l\ngpPh4NtZya+TqU5haFR1B33ZN5T48c5kpcpTzvwueJGh7xSSgxKYrpX2WU4jko5B\n0+yoIhSA9yct3/lIFcU/e6cjQaQ/kOGz1SR48hBo57FtKNp6gM+YyldBi2IXaV9c\n6ObXE9tEUq48kM8+kMXvDv4SlQNunj6nILbtaQijSreicgK+UrLG7tLRcwdiZY+E\nfC5mIfmqOBep/UCKeOFJ7NOdp986LKP0VScI/qZFFFEg4q/7RDrhF5txst+5KH+b\nQ6r+zr06Ma1cPwyU8lI3emkM7Uw9GPhFg/eW6dTPO9WVwdtHOziq+a3Hipl3Iq+j\nRYQxkKGvmvwxbxiMq44Dm2+WY2E7y1f35sSECpcvIrwtVmyRsh6TdDqkPuHx14yR\nSqTvskxcabWL+EbRDPIj/bF5PbbklQZkx9ZpMGf2szO9sh6F+HzH8RKikQsO20jI\nBa+nNySc7LGoJiVmZ4qI0m3cZqvt+TaiPOJZeyWCNcrIFEsa4lGJvz5E8R0EBi6d\nOTupkB3h0gbulaHhhTN4UfVDGutH7nPTQM8Ezlzc8VEDjCbK0rg=\n=DDOb\n-----END PGP SIGNATURE-----",
        "payload": "tree 0985cb2805e1e66399cdb936120f92e313c3d101\nparent dae72998e8576439254ee497e82e2b9ce4917977\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1554864035 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1555975138 +0900\n\nwallet: add cachable amounts for caching credit/debit values\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e6e7ed79886b702614e627a966fc9a4850f8f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9e6e7ed79886b702614e627a966fc9a4850f8f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9e6e7ed79886b702614e627a966fc9a4850f8f0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dae72998e8576439254ee497e82e2b9ce4917977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dae72998e8576439254ee497e82e2b9ce4917977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dae72998e8576439254ee497e82e2b9ce4917977"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 61,
      "deletions": 114
    },
    "files": [
      {
        "sha": "55e28e225a2f32547d53b97fdc62e267858d5d05",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=c9e6e7ed79886b702614e627a966fc9a4850f8f0",
        "patch": "@@ -9,22 +9,43 @@\n #include <script/standard.h>\n \n #include <stdint.h>\n+#include <bitset>\n \n class CKeyStore;\n class CScript;\n \n /** IsMine() return codes */\n enum isminetype\n {\n-    ISMINE_NO = 0,\n-    ISMINE_WATCH_ONLY = 1,\n-    ISMINE_SPENDABLE = 2,\n-    ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n+    ISMINE_NO         = 0,\n+    ISMINE_WATCH_ONLY = 1 << 0,\n+    ISMINE_SPENDABLE  = 1 << 1,\n+    ISMINE_ALL        = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE,\n+    ISMINE_ENUM_ELEMENTS,\n };\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n \n+/**\n+ * Cachable amount subdivided into watchonly and spendable parts.\n+ */\n+struct CachableAmount\n+{\n+    // NO and ALL are never (supposed to be) cached\n+    std::bitset<ISMINE_ENUM_ELEMENTS> m_cached;\n+    CAmount m_value[ISMINE_ENUM_ELEMENTS];\n+    inline void Reset()\n+    {\n+        m_cached.reset();\n+    }\n+    void Set(isminefilter filter, CAmount value)\n+    {\n+        m_cached.set(filter);\n+        m_value[filter] = value;\n+    }\n+};\n+\n #endif // BITCOIN_SCRIPT_ISMINE_H"
      },
      {
        "sha": "34b9770e8b2a20cddf9b033215a3cee6c3a17afc",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=c9e6e7ed79886b702614e627a966fc9a4850f8f0",
        "patch": "@@ -69,8 +69,7 @@ static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = fa\n     std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n     if (fIsFromMe)\n     {\n-        wtx->fDebitCached = true;\n-        wtx->nDebitCached = 1;\n+        wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);\n@@ -115,7 +114,7 @@ inline std::vector<OutputGroup>& GroupCoins(const std::vector<COutput>& coins)\n {\n     static std::vector<OutputGroup> static_groups;\n     static_groups.clear();\n-    for (auto& coin : coins) static_groups.emplace_back(coin.GetInputCoin(), coin.nDepth, coin.tx->fDebitCached && coin.tx->nDebitCached == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0);\n+    for (auto& coin : coins) static_groups.emplace_back(coin.GetInputCoin(), coin.nDepth, coin.tx->m_amounts[CWalletTx::DEBIT].m_cached[ISMINE_SPENDABLE] && coin.tx->m_amounts[CWalletTx::DEBIT].m_value[ISMINE_SPENDABLE] == 1 /* HACK: we can't figure out the is_me flag so we use the conditions defined above; perhaps set safe to false for !fIsFromMe in add_coin() */, 0, 0);\n     return static_groups;\n }\n "
      },
      {
        "sha": "c577ebeda032ed5f09de7f796020016b6328f4da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 67,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c9e6e7ed79886b702614e627a966fc9a4850f8f0",
        "patch": "@@ -1932,33 +1932,26 @@ std::set<uint256> CWalletTx::GetConflicts() const\n     return result;\n }\n \n+CAmount CWalletTx::GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate) const\n+{\n+    auto& amount = m_amounts[type];\n+    if (recalculate || !amount.m_cached[filter]) {\n+        amount.Set(filter, type == DEBIT ? pwallet->GetDebit(*tx, filter) : pwallet->GetCredit(*tx, filter));\n+    }\n+    return amount.m_value[filter];\n+}\n+\n CAmount CWalletTx::GetDebit(const isminefilter& filter) const\n {\n     if (tx->vin.empty())\n         return 0;\n \n     CAmount debit = 0;\n-    if(filter & ISMINE_SPENDABLE)\n-    {\n-        if (fDebitCached)\n-            debit += nDebitCached;\n-        else\n-        {\n-            nDebitCached = pwallet->GetDebit(*tx, ISMINE_SPENDABLE);\n-            fDebitCached = true;\n-            debit += nDebitCached;\n-        }\n+    if (filter & ISMINE_SPENDABLE) {\n+        debit += GetCachableAmount(DEBIT, ISMINE_SPENDABLE);\n     }\n-    if(filter & ISMINE_WATCH_ONLY)\n-    {\n-        if(fWatchDebitCached)\n-            debit += nWatchDebitCached;\n-        else\n-        {\n-            nWatchDebitCached = pwallet->GetDebit(*tx, ISMINE_WATCH_ONLY);\n-            fWatchDebitCached = true;\n-            debit += nWatchDebitCached;\n-        }\n+    if (filter & ISMINE_WATCH_ONLY) {\n+        debit += GetCachableAmount(DEBIT, ISMINE_WATCH_ONLY);\n     }\n     return debit;\n }\n@@ -1970,40 +1963,20 @@ CAmount CWalletTx::GetCredit(interfaces::Chain::Lock& locked_chain, const ismine\n         return 0;\n \n     CAmount credit = 0;\n-    if (filter & ISMINE_SPENDABLE)\n-    {\n+    if (filter & ISMINE_SPENDABLE) {\n         // GetBalance can assume transactions in mapWallet won't change\n-        if (fCreditCached)\n-            credit += nCreditCached;\n-        else\n-        {\n-            nCreditCached = pwallet->GetCredit(*tx, ISMINE_SPENDABLE);\n-            fCreditCached = true;\n-            credit += nCreditCached;\n-        }\n+        credit += GetCachableAmount(CREDIT, ISMINE_SPENDABLE);\n     }\n-    if (filter & ISMINE_WATCH_ONLY)\n-    {\n-        if (fWatchCreditCached)\n-            credit += nWatchCreditCached;\n-        else\n-        {\n-            nWatchCreditCached = pwallet->GetCredit(*tx, ISMINE_WATCH_ONLY);\n-            fWatchCreditCached = true;\n-            credit += nWatchCreditCached;\n-        }\n+    if (filter & ISMINE_WATCH_ONLY) {\n+        credit += GetCachableAmount(CREDIT, ISMINE_WATCH_ONLY);\n     }\n     return credit;\n }\n \n CAmount CWalletTx::GetImmatureCredit(interfaces::Chain::Lock& locked_chain, bool fUseCache) const\n {\n     if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n-        if (fUseCache && fImmatureCreditCached)\n-            return nImmatureCreditCached;\n-        nImmatureCreditCached = pwallet->GetCredit(*tx, ISMINE_SPENDABLE);\n-        fImmatureCreditCached = true;\n-        return nImmatureCreditCached;\n+        return GetCachableAmount(IMMATURE_CREDIT, ISMINE_SPENDABLE, !fUseCache);\n     }\n \n     return 0;\n@@ -2014,23 +1987,15 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n     if (pwallet == nullptr)\n         return 0;\n \n+    // Avoid caching ismine for NO or ALL cases (could remove this check and simplify in the future).\n+    bool allow_cache = filter == ISMINE_SPENDABLE || filter == ISMINE_WATCH_ONLY;\n+\n     // Must wait until coinbase is safely deep enough in the chain before valuing it\n     if (IsImmatureCoinBase(locked_chain))\n         return 0;\n \n-    CAmount* cache = nullptr;\n-    bool* cache_used = nullptr;\n-\n-    if (filter == ISMINE_SPENDABLE) {\n-        cache = &nAvailableCreditCached;\n-        cache_used = &fAvailableCreditCached;\n-    } else if (filter == ISMINE_WATCH_ONLY) {\n-        cache = &nAvailableWatchCreditCached;\n-        cache_used = &fAvailableWatchCreditCached;\n-    }\n-\n-    if (fUseCache && cache_used && *cache_used) {\n-        return *cache;\n+    if (fUseCache && allow_cache && m_amounts[AVAILABLE_CREDIT].m_cached[filter]) {\n+        return m_amounts[AVAILABLE_CREDIT].m_value[filter];\n     }\n \n     CAmount nCredit = 0;\n@@ -2046,22 +2011,17 @@ CAmount CWalletTx::GetAvailableCredit(interfaces::Chain::Lock& locked_chain, boo\n         }\n     }\n \n-    if (cache) {\n-        *cache = nCredit;\n-        assert(cache_used);\n-        *cache_used = true;\n+    if (allow_cache) {\n+        m_amounts[AVAILABLE_CREDIT].Set(filter, nCredit);\n     }\n+\n     return nCredit;\n }\n \n CAmount CWalletTx::GetImmatureWatchOnlyCredit(interfaces::Chain::Lock& locked_chain, const bool fUseCache) const\n {\n     if (IsImmatureCoinBase(locked_chain) && IsInMainChain(locked_chain)) {\n-        if (fUseCache && fImmatureWatchCreditCached)\n-            return nImmatureWatchCreditCached;\n-        nImmatureWatchCreditCached = pwallet->GetCredit(*tx, ISMINE_WATCH_ONLY);\n-        fImmatureWatchCreditCached = true;\n-        return nImmatureWatchCreditCached;\n+        return GetCachableAmount(IMMATURE_CREDIT, ISMINE_WATCH_ONLY, !fUseCache);\n     }\n \n     return 0;"
      },
      {
        "sha": "80a4e37bc7b08faa27504e448a96406378ec8ba8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 40,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9e6e7ed79886b702614e627a966fc9a4850f8f0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c9e6e7ed79886b702614e627a966fc9a4850f8f0",
        "patch": "@@ -369,24 +369,11 @@ class CWalletTx : public CMerkleTx\n     std::multimap<int64_t, CWalletTx*>::const_iterator m_it_wtxOrdered;\n \n     // memory only\n-    mutable bool fDebitCached;\n-    mutable bool fCreditCached;\n-    mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n-    mutable bool fWatchDebitCached;\n-    mutable bool fWatchCreditCached;\n-    mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n+    enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };\n+    CAmount GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate = false) const;\n+    mutable CachableAmount m_amounts[AMOUNTTYPE_ENUM_ELEMENTS];\n     mutable bool fChangeCached;\n     mutable bool fInMempool;\n-    mutable CAmount nDebitCached;\n-    mutable CAmount nCreditCached;\n-    mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n-    mutable CAmount nWatchDebitCached;\n-    mutable CAmount nWatchCreditCached;\n-    mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n     mutable CAmount nChangeCached;\n \n     CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n@@ -403,24 +390,8 @@ class CWalletTx : public CMerkleTx\n         nTimeReceived = 0;\n         nTimeSmart = 0;\n         fFromMe = false;\n-        fDebitCached = false;\n-        fCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n         fInMempool = false;\n-        nDebitCached = 0;\n-        nCreditCached = 0;\n-        nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n-        nWatchDebitCached = 0;\n-        nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n-        nImmatureWatchCreditCached = 0;\n         nChangeCached = 0;\n         nOrderPos = -1;\n     }\n@@ -464,14 +435,10 @@ class CWalletTx : public CMerkleTx\n     //! make sure balances are recalculated\n     void MarkDirty()\n     {\n-        fCreditCached = false;\n-        fAvailableCreditCached = false;\n-        fImmatureCreditCached = false;\n-        fWatchDebitCached = false;\n-        fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n-        fImmatureWatchCreditCached = false;\n-        fDebitCached = false;\n+        m_amounts[DEBIT].Reset();\n+        m_amounts[CREDIT].Reset();\n+        m_amounts[IMMATURE_CREDIT].Reset();\n+        m_amounts[AVAILABLE_CREDIT].Reset();\n         fChangeCached = false;\n     }\n "
      }
    ]
  }
]