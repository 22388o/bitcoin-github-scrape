kallewoof,2019-04-10T07:12:31Z,"@gwillen Thank you for reviewing! I have addressed your comments, I believe.",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481564153,481564153,
DrahtBot,2019-04-10T07:21:43Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13756](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13756.html) (wallet: ""avoid_reuse"" wallet flag for impro",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481567105,481567105,
laanwj,2019-04-10T08:50:44Z,"Concept ACK! this groups similar functionality together making it, overall, easier to understand.\nI was afraid for a bit with the word ""accounts"" though (having just finally deprecated that).",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481601221,481601221,
kallewoof,2019-04-10T09:36:40Z,Thanks for review @promag. I believe I addressed all your comments.,https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481617750,481617750,
kallewoof,2019-04-10T09:37:58Z,"@laanwj Maybe I should have picked a different name! I think ""account"" works in this case, though... :)",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481618178,481618178,
laanwj,2019-04-10T12:11:41Z,"> @laanwj Maybe I should have picked a different name! I think ""account"" works in this case, though... :)\n\nYes to be clear it was not a suggestion to change it  :slightly_smiling_face:  Would only have been a potential concern if it would end up in the RPC API.",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481664474,481664474,
gwillen,2019-04-10T21:13:12Z,utACK 3b9a9a4,https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-481867502,481867502,
kallewoof,2019-04-11T14:34:12Z,@promag @MarcoFalke Thank you for the review! I believe I addressed all your feedback.,https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-482140060,482140060,
promag,2019-04-15T07:16:41Z,"utACK 18f23ae0c5599f2246e58e5293f7426471b73e9c, only change is to use `GetCachable` in `GetImmatureCredit` and \n GetImmatureWatchOnlyCredit`.",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-483135455,483135455,
kallewoof,2019-04-16T03:20:11Z,"@ryanofsky Thanks for the review! I tried using an array rather than 4 ivars, and it looks OK to me so sticking with that.",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-483495954,483495954,
jonasschnelli,2019-04-16T07:40:54Z,"Finally someone did this.\nutACK f801212c7170fc56acdc0c61a0f33b5b103753a2\nLooks like almost ready to merge.\nWould be great if @ryanofsky and @promag could accept/comment (on) the newest changes.",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-483547995,483547995,
MarcoFalke,2019-04-17T15:46:39Z,"Would be nice if the benchmark could make it in first, so that we are not accidentally regressing on performance.\n\n*  test: Add wallet_balance benchmark #15779 ",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-484147045,484147045,
promag,2019-04-18T19:01:13Z,utACK 46a7d7b.,https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-484643364,484643364,
promag,2019-04-23T09:53:05Z,utACK c9e6e7e.,https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-485735147,485735147,
MarcoFalke,2019-04-23T11:38:35Z,"re-utACK c9e6e7ed79886b702614e627a966fc9a4850f8f0 (Only change is comments)\n\n<details><summary>Show signature</summary>\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-utACK c9e6e7ed79886b702614e627a966fc9a4850f8f0 (Only change is comments)\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgtWwv+OiZ5fOCqUEVQRgsFHUXeXu",https://github.com/bitcoin/bitcoin/pull/15780#issuecomment-485766731,485766731,
gwillen,2019-04-10T04:46:11Z,"`4 * sizeof(bool)` -- sizeof(bool) is not required by the standard to be 1. (And even though that would be stupid, the standard is pretty explicit about it.)\n\nOr perhaps instead, more typesafe / c++ style: `std::fill(std::begin(m_cached), std::end(m_cached), false);`, which I have not tested. This version would also fix the need for the constant ""4"" here.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273788021,273788021,src/script/ismine.h
gwillen,2019-04-10T05:02:10Z,"I know that various people have different feelings about this practice, but invocations would be more readable and less error-prone if `bool credit` were an `enum class` of `CREDIT` or `DEBIT`.\n\n(I feel less strongly about `recalculate` because it's unambiguous which direction is ""off"" vs ""on"", and it defaults to ""off"".)\n\nIn fact, better still -- since any given `CachableAccount` is either",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273790209,273790209,src/wallet/wallet.cpp
gwillen,2019-04-10T05:04:37Z,"I know it seems obvious now, but it would probably help future readers a bit to comment the fact that these correspond to the four values of `isminetype`. (Or you could add `ISMINE_ENUM_ELEMENTS` or the like and use that instead of the constant 4.)\n\nIn fact, actually, after studying the code -- we aren't really using a bitfield of IsMine types here. Only ISMINE_SPENDABLE and ISMINE_WATCHONLY a",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273790539,273790539,src/script/ismine.h
gwillen,2019-04-10T05:11:31Z,"The old code appears to always store into the cache, as long as `filter` is `ISMINE_SPENDABLE` or `ISMINE_WATCHONLY`, regardless of the value of `fUseCache`.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273791560,273791560,src/wallet/wallet.cpp
gwillen,2019-04-10T05:16:15Z,"I don't know this code well enough to speak to the existing semantics of it. But it seems like, in the old code, `GetCredit` and `GetAvailableCredit` had separate caches, whereas now they share one.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273792224,273792224,src/wallet/wallet.cpp
kallewoof,2019-04-10T06:51:35Z,"Yes, there is a tiny bit of waste due to ISMINE_NO and _ALL, and yep I am preparing to use this more extensively for the avoid_reuse feature in #13756. I could make a ""bridge"" that makes use of these more efficiently, but I kind of enjoy the simplicity of the direct mapping.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273811159,273811159,src/script/ismine.h
kallewoof,2019-04-10T06:53:09Z,"Oh, you're right. Good catch.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273811589,273811589,src/wallet/wallet.cpp
kallewoof,2019-04-10T06:55:35Z,"Yep, you're correct! Fixing.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273812282,273812282,src/wallet/wallet.cpp
kallewoof,2019-04-10T07:11:31Z,"Great idea, done.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273817178,273817178,src/wallet/wallet.cpp
kallewoof,2019-04-10T07:12:03Z,Should add that I adopted the `ISMINE_ENUM_ELEMENTS` idea.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273817321,273817321,src/script/ismine.h
promag,2019-04-10T07:45:38Z,"I may be wrong but I think you can drop ` = ISMINE_ALL + 1`.\n\nnit, either align all `=` or none?",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273827890,273827890,src/script/ismine.h
promag,2019-04-10T07:49:00Z,"nit, `m_cached` could be an `int`, or better `std::bitset`.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r273829008,273829008,src/script/ismine.h
promag,2019-04-11T09:29:32Z,Add `explicit`. I'd remove ` = CREDIT`.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274336507,274336507,src/script/ismine.h
promag,2019-04-11T09:29:53Z,"Remove, it is initialized in the constructor. Also, should be const.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274336626,274336626,src/script/ismine.h
promag,2019-04-11T09:31:07Z,"`std::bitset` is already initialized with zeros.\n",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274337089,274337089,src/script/ismine.h
promag,2019-04-11T09:31:53Z,I don't see a reason to pass enum values by const reference? (despite the fact there's some occurrences in the code).,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274337396,274337396,src/script/ismine.h
promag,2019-04-11T09:34:00Z,I don't see the return value being used so I'd drop it.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274338285,274338285,src/script/ismine.h
MarcoFalke,2019-04-11T13:38:27Z,Could be an `enum class`?,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274426928,274426928,src/script/ismine.h
kallewoof,2019-04-11T14:44:41Z,"Made `enum class` but not `const`. It doesn't look like 'const enum class' ever occurs anywhere else, so assuming it's not a thing you do..",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274460474,274460474,src/script/ismine.h
promag,2019-04-11T14:53:27Z,"I mean `... const m_type`, meaning it can't change after initialization.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274465350,274465350,src/script/ismine.h
kallewoof,2019-04-11T15:10:11Z,"Ah, I see.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r274474278,274474278,src/script/ismine.h
promag,2019-04-14T10:09:26Z,"nit, use http://www.cplusplus.com/reference/bitset/bitset/set/:\n```cpp\nm_cached.set(filter)\n```\n",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275149367,275149367,src/script/ismine.h
promag,2019-04-14T10:11:37Z,"Since `CachableAccount` members are public you could ditch `Reset` and call `m_cached.reset()` directly. Otherwise you could make members private and add `IsCached()`,  `Get()` and `Type()` accessors.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275149451,275149451,src/script/ismine.h
kallewoof,2019-04-15T00:36:36Z,"I think leaving it public is ok, but I can be convinced to make it private. For now, I made `Reset` inline, which basically has the same effect as what you are suggesting without exposing too many innards.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275182736,275182736,src/script/ismine.h
meshcollider,2019-04-15T06:51:55Z,"Why not simplify to just `return GetCachable(m_credit_immature, ISMINE_SPENDABLE, !fUseCache);`? (same in `GetImmatureWatchOnlyCredit`)",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275224904,275224904,src/wallet/wallet.cpp
kallewoof,2019-04-15T07:08:58Z,Good point! Fixed.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275228819,275228819,src/wallet/wallet.cpp
ryanofsky,2019-04-15T17:54:45Z,"It doesn't make sense for `CachableAccount` to contain a `Type` enum, or an `m_type` runtime member. The type of cache variable isn't a runtime value that needs to be stored. This is kind of like declaring a fixed width variable to store an int, and then declaring another variable to store the fixed width.\n\nThe only place `m_type` is used is inside the `GetCachable()` function, so `type` could",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275476568,275476568,src/script/ismine.h
ryanofsky,2019-04-15T18:11:28Z,"Is purpose of the got_cache variable just to avoid changing behavior in this PR? If so, would suggest renaming and commenting:\n\n```c++\n// Avoid caching ismine or NONE or ALL cases (could remove this check and simplify in the future).\nconst bool allow_cache = filter == ISMINE_SPENDABLE || filter == ISMINE_WATCH_ONLY;\n```",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275482649,275482649,src/wallet/wallet.cpp
ryanofsky,2019-04-15T18:20:06Z,It seems pointless to overwrite the fUseCache argument. It would seem clearer just to write `fUseCache && allow_cache` in the one place the argument is used below to avoid having its value change in the middle of the function.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275485831,275485831,src/wallet/wallet.cpp
gwillen,2019-04-15T18:59:51Z,"The code is this way because I specifically objected to passing the CacheType to GetCacheable, which is how it was written before, because the CacheType _is_ in fact a property of the CachableAccount object: any given such object is always either a credit account or a debit account, and it is _always_ an error to call GetCachable with any CacheType other than the correct one for the particular Cac",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275500873,275500873,src/script/ismine.h
ryanofsky,2019-04-15T19:24:11Z,"@gwillen it sounds like you are worried about an error that could have occurred in a previous or hypothetical version of the code where GetCacheable function took both CachableAmount and Type arguments. I agree that this would be more error prone than the current code, but it's not what I'm suggesting. \n\nThe current code avoids one problem (type being inconsistent with CachableAmount variable)",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275509342,275509342,src/script/ismine.h
gwillen,2019-04-15T20:30:59Z,"It was not hypothetical, it was indeed the previous version of the code, which I think you can see in the history of the PR (but maybe a rebase wiped it out.) I responded too quickly because I was frustrated that you appeared to be suggesting to go back to a previous version, without addressing my comments discussing why I was opposed to the previous version. In fact I did misunderstand your sugge",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275532571,275532571,src/script/ismine.h
kallewoof,2019-04-16T00:13:06Z,"@ryanofsky That sounds reasonable, but how were you envisioning accessing the corresponding cache type from inside `GetCachable`? I started rewriting the code and ended up with\n```diff\n-    mutable CachableAccount m_debit{CachableAccount::Type::DEBIT};\n-    mutable CachableAccount m_credit{CachableAccount::Type::CREDIT};\n-    mutable CachableAccount m_credit_immature{CachableAccount::Type:",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275588760,275588760,src/script/ismine.h
kallewoof,2019-04-16T00:17:11Z,"Makes sense, changed.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275589477,275589477,src/wallet/wallet.cpp
kallewoof,2019-04-16T00:17:29Z,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275589518,275589518,src/wallet/wallet.cpp
ryanofsky,2019-04-16T01:01:23Z,"re: https://github.com/bitcoin/bitcoin/pull/15780/files#r275588760 from kallewoof\n\n> I started rewriting the code and ended up with\n\nYes, I would probably implement this with an array. But a smaller change would be to use a conditional:\n\n```c++\nauto& cache = type == CREDIT ? m_credit : type == DEBIT ? m_debit : ...;\n```\n\n> which seems like it will degrade readability.\n\nWher",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275596393,275596393,src/script/ismine.h
ryanofsky,2019-04-16T01:11:30Z,"I just noticed the struct is called `CachableAccount` and not `CachableAmount`. This seems like an unusual choice, because while it is clear this struct is a wrapper around an amount (subdivided into spendable and watchonly parts), it's at all not clear why we'd ever think of instances of these structs as ""accounts."" Not even to mention in the past history of accounts in the wallet...\n\nI'd sug",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275597994,275597994,src/script/ismine.h
kallewoof,2019-04-16T03:15:06Z,"It is not always cached (hence the bitset), so I think ""cachable"" sounds better in this case. I agree on the amount vs account deal though. ""An amount subdivided into spendable and watchonly parts"" is exactly what this is.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275616156,275616156,src/script/ismine.h
promag,2019-04-16T14:05:26Z,This should be `AmountType/Kind/Category/...`?,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275815045,275815045,src/wallet/wallet.h
kallewoof,2019-04-16T14:44:10Z,"Yeah, I agree. Changing to AmountType.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275835628,275835628,src/wallet/wallet.h
ryanofsky,2019-04-17T15:55:51Z,"Note: Could add doxygen comment suggested previously https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275597994\n\n```c++\n//! Cached amount subdivided into watchonly and spendable parts.\n```",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276314975,276314975,src/script/ismine.h
ryanofsky,2019-04-17T16:01:51Z,Note: Could call this `GetAmount` instead of `GetCachable` as suggested previously https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275597994 because this returns an amount and now handles caching internally instead of taking a cache reference.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276317824,276317824,src/wallet/wallet.cpp
ryanofsky,2019-04-17T16:16:11Z,"re: https://github.com/bitcoin/bitcoin/pull/15780#discussion_r275616156 from kallewoof\n\n> It is not always cached (hence the bitset), so I think ""cachable"" sounds better in this case.\n\nOk, but this is kind of funny logic. I wonder if you also prefer to call pointers ""pointables"" because sometimes they don't point to valid objects.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276323977,276323977,src/script/ismine.h
kallewoof,2019-04-18T01:11:04Z,"If they would automatically deduce and/or instantiate the appropriate value/object when they didn't point to valid objects, they would definitely no longer just be ""pointers"".",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276487594,276487594,src/script/ismine.h
kallewoof,2019-04-18T01:15:53Z,"Oops, I missed that part. Thanks, done. (I used `/**...*/`)",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276488276,276488276,src/script/ismine.h
kallewoof,2019-04-18T01:16:46Z,"The `recalculate` bool is for the cache, though. Maybe `GetCachableAmount` is better. Using that.",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276488379,276488379,src/wallet/wallet.cpp
ryanofsky,2019-04-18T16:18:06Z,"I don't want to suggest a change for this PR, since it's good that this just rearranges variables and doesn't change any computation.\n\nBut in the future, it seems like IMMATURE_CREDIT could be replaced with CREDIT here without affecting anything, and IMMATURE_CREDIT and AVAILABLE_CREDIT could go away. Unless I'm missing something, it seems like a lot of the previous variables like nImmatureCre",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276735742,276735742,src/wallet/wallet.cpp
kallewoof,2019-04-18T22:57:15Z,Nice! That would definitely improve things. I agree that's beyond this PR but will gladly dig into it if nobody else does after merge.,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r276860660,276860660,src/wallet/wallet.cpp
MarcoFalke,2019-04-22T19:18:45Z,Could add a comment to say that `NO` and `ALL` are never (supposed to be) cached?,https://github.com/bitcoin/bitcoin/pull/15780#discussion_r277402318,277402318,src/script/ismine.h
kallewoof,2019-04-22T23:19:31Z,"Thanks, done. I also fixed typo in wallet.cpp#1990 (said ""Avoid caching ismine or NONE or all cases"" before).",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r277470498,277470498,src/script/ismine.h
ryanofsky,2019-04-23T14:38:56Z,"The two comments contradict each other:\n\n```c++\n// NO and ALL are never (supposed to be) cached\n```\n\n```c++\n// Avoid caching ismine for NO or ALL cases (could remove this check and simplify in the future).\n```\n\nIf it's harmful to cache these values, we should drop the second comment and explain the harm. If it's not harmful, we should drop the first comment because it's mislead",https://github.com/bitcoin/bitcoin/pull/15780#discussion_r277713261,277713261,src/script/ismine.h
