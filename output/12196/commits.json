[
  {
    "sha": "90485755115424ed9ea70206f54da2b13777fa6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDQ4NTc1NTExNTQyNGVkOWVhNzAyMDZmNTRkYTJiMTM3NzdmYTZj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-15T21:23:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-12T19:10:05Z"
      },
      "message": "Add FindScriptPubKey() to search the UTXO set",
      "tree": {
        "sha": "893301bad87a9b2dbd5ff91efc116e611af7672c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/893301bad87a9b2dbd5ff91efc116e611af7672c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90485755115424ed9ea70206f54da2b13777fa6c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltHp44ACgkQHrd2uwPH\nki0Z8hAAqXyMuCiyLnBZkZUa5mirNPHYOFiT3pHWpBNuLsi+IxcORrm3YY/OOzG2\nTsDsR6TR7996LRT9gvLJdQgyUB3RFeZ/XTavujtyqaB/JhXyGlVwsr22OsRs2nS1\nUgcOPulnbUbJHanZLcR5tsIqxwWdbpUHi3LcgGIsgofC82eXpNdiNGZJUEoBrTrY\nafEtRk7U1rjVPuIbCe9omU6oVQFPkBqzmaZH/WLDk9oejK4nuifbkrX1f+/8cvgg\nO0T7mg/hr/yumKH1qM2J1fcJG55PjObX56+T7L/YTuETX4JOWBY/znS1bOw7Jukr\nybRaBb7LJ0gLhmHEiowvuzOW1upspBpjjltxcywANynQ5HfslStTSYvRB0IStZCX\nXaxNG8SAa7NI88h3l49Kq3U8a/1AhYY+e0OfFz+wjsc0hkyZUXDy0DdwwIwMXVz6\nc6b52J5lv78TOC8QBdXaFgdMlwh1VaQuTBkzY65d77IfWpk0/ej/oHgfZvSZlSNH\npaAm20mkDNSIWPll/kzWtOifbjgq05X6aL8zNcTGYNUMbuV6TaMTwGH657EP1vhk\nnerv/axHUN7tayEtR2DLnJ51L/MoA8g2C1OK9+vuBwSw1miTFgJHEj5n74E3u11g\nkqJqSz4lEnyccPQ46QQyTxSUKCLNEsLRXPX7Vcf9inoVSoGahhE=\n=X7B1\n-----END PGP SIGNATURE-----",
        "payload": "tree 893301bad87a9b2dbd5ff91efc116e611af7672c\nparent 56f69360dc98bd68704f19646a84d045788d199e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1516051424 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531422605 +0100\n\nAdd FindScriptPubKey() to search the UTXO set\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90485755115424ed9ea70206f54da2b13777fa6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90485755115424ed9ea70206f54da2b13777fa6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90485755115424ed9ea70206f54da2b13777fa6c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f69360dc98bd68704f19646a84d045788d199e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f69360dc98bd68704f19646a84d045788d199e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f69360dc98bd68704f19646a84d045788d199e"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "715f011da6c1d9de8f4cdba5aadc2b276f61770c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90485755115424ed9ea70206f54da2b13777fa6c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90485755115424ed9ea70206f54da2b13777fa6c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=90485755115424ed9ea70206f54da2b13777fa6c",
        "patch": "@@ -1916,6 +1916,35 @@ static UniValue savemempool(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+//! Search for a given set of pubkey scripts\n+bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results) {\n+    scan_progress = 0;\n+    count = 0;\n+    while (cursor->Valid()) {\n+        COutPoint key;\n+        Coin coin;\n+        if (!cursor->GetKey(key) || !cursor->GetValue(coin)) return false;\n+        if (++count % 8192 == 0) {\n+            boost::this_thread::interruption_point();\n+            if (should_abort) {\n+                // allow to abort the scan via the abort reference\n+                return false;\n+            }\n+        }\n+        if (count % 256 == 0) {\n+            // update progress reference every 256 item\n+            uint32_t high = 0x100 * *key.hash.begin() + *(key.hash.begin() + 1);\n+            scan_progress = (int)(high * 100.0 / 65536.0 + 0.5);\n+        }\n+        if (needles.count(coin.out.scriptPubKey)) {\n+            out_results.emplace(key, coin);\n+        }\n+        cursor->Next();\n+    }\n+    scan_progress = 100;\n+    return true;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------"
      }
    ]
  },
  {
    "sha": "78304941f771b8bd918deddd37d01bc8f21873e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODMwNDk0MWY3NzFiOGJkOTE4ZGVkZGQzN2QwMWJjOGYyMTg3M2Ux",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-16T06:33:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-15T20:17:23Z"
      },
      "message": "Blockchain/RPC: Add scantxoutset method to scan UTXO set",
      "tree": {
        "sha": "73707f752c18c66e3c98f0479a9a6a1efdaf8e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73707f752c18c66e3c98f0479a9a6a1efdaf8e48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78304941f771b8bd918deddd37d01bc8f21873e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltLq9QACgkQHrd2uwPH\nki0eMg//VuPHhQ2cgF9ULKDl7n+JHEWqFfxbVxTaBspoWWEtbe9oBs24vedzlAPz\nRALNHpZwKX1I9esbM0fmn2aXE45XIIexPQFUlTCc1LQiGtL2y8hmm1af7YdfHgai\ndUUaxjbf8puZpuJ4HxvUuUgknRIcoQt33m9NeS3hPYrw/Y4mjO/Do1YiWzmDzLS1\n2FgxRUm2lBnJ//g3ZVpq3+duvYicYfffboVp4Y38GLQpnCMMoSk8zqVrgg89tIWW\nPI4hUAibfhbSJ/+1kA0FlQe6pzcoBLFfxMrhKDN2j6XkWJunvluGa5Yz7UHNEuYi\nNdXPqdRlFBD9YzwJ5CHAyxKnlEg+I23d5E6N6tdNi3590IP9WMSkmPbyc9245bcn\nRnby1CKoQALAJ3sTCj3OjnPXashKqrB3M8+FA9rOnbekab2ZaMt2zRRU+6Jfbcz3\nscZ3vsaD4h76Ng3RR6fr7F/YLNk3CzQ8YDbNlFvqrQJgay3WjkNJqdZWYob2nGep\nRgL+vGzP54tCq2PnWFrviYOmfk6+LkhjJZJ3Qp5yLwzgtyyW98+gaJzRTtDKz1EV\nshAouzrLbwY9J/0V0XAQJ4uhVJ9M6v5J3qTMQb4bNmJmVkNTnAKfcjtRtzWmbyQJ\nomttEZzR5eve3xsvF9XIxBsUrSuVITfVIULpjVB5zF9NULvaYwg=\n=OAN3\n-----END PGP SIGNATURE-----",
        "payload": "tree 73707f752c18c66e3c98f0479a9a6a1efdaf8e48\nparent 90485755115424ed9ea70206f54da2b13777fa6c\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1516084439 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531685843 +0100\n\nBlockchain/RPC: Add scantxoutset method to scan UTXO set\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78304941f771b8bd918deddd37d01bc8f21873e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78304941f771b8bd918deddd37d01bc8f21873e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78304941f771b8bd918deddd37d01bc8f21873e1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90485755115424ed9ea70206f54da2b13777fa6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90485755115424ed9ea70206f54da2b13777fa6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90485755115424ed9ea70206f54da2b13777fa6c"
      }
    ],
    "stats": {
      "total": 246,
      "additions": 246,
      "deletions": 0
    },
    "files": [
      {
        "sha": "183ef0b3a46fbaca98bd77402728cd1c315e53e5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 245,
        "deletions": 0,
        "changes": 245,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78304941f771b8bd918deddd37d01bc8f21873e1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78304941f771b8bd918deddd37d01bc8f21873e1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=78304941f771b8bd918deddd37d01bc8f21873e1",
        "patch": "@@ -6,13 +6,16 @@\n #include <rpc/blockchain.h>\n \n #include <amount.h>\n+#include <base58.h>\n+#include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>\n #include <coins.h>\n #include <consensus/validation.h>\n #include <validation.h>\n #include <core_io.h>\n #include <index/txindex.h>\n+#include <key_io.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n@@ -27,6 +30,7 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n+#include <assert.h>\n #include <stdint.h>\n \n #include <univalue.h>\n@@ -1945,6 +1949,246 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n     return true;\n }\n \n+/** RAII object to prevent concurrency issue when scanning the txout set */\n+static std::mutex g_utxosetscan;\n+static std::atomic<int> g_scan_progress;\n+static std::atomic<bool> g_scan_in_progress;\n+static std::atomic<bool> g_should_abort_scan;\n+class CoinsViewScanReserver\n+{\n+private:\n+    bool m_could_reserve;\n+public:\n+    explicit CoinsViewScanReserver() : m_could_reserve(false) {}\n+\n+    bool reserve() {\n+        assert (!m_could_reserve);\n+        std::lock_guard<std::mutex> lock(g_utxosetscan);\n+        if (g_scan_in_progress) {\n+            return false;\n+        }\n+        g_scan_in_progress = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~CoinsViewScanReserver() {\n+        if (m_could_reserve) {\n+            std::lock_guard<std::mutex> lock(g_utxosetscan);\n+            g_scan_in_progress = false;\n+        }\n+    }\n+};\n+\n+static const char *g_default_scantxoutset_script_types[] = { \"P2PKH\", \"P2SH_P2WPKH\", \"P2WPKH\" };\n+\n+enum class OutputScriptType {\n+    UNKNOWN,\n+    P2PK,\n+    P2PKH,\n+    P2SH_P2WPKH,\n+    P2WPKH\n+};\n+\n+static inline OutputScriptType GetOutputScriptTypeFromString(const std::string& outputtype)\n+{\n+    if (outputtype == \"P2PK\") return OutputScriptType::P2PK;\n+    else if (outputtype == \"P2PKH\") return OutputScriptType::P2PKH;\n+    else if (outputtype == \"P2SH_P2WPKH\") return OutputScriptType::P2SH_P2WPKH;\n+    else if (outputtype == \"P2WPKH\") return OutputScriptType::P2WPKH;\n+    else return OutputScriptType::UNKNOWN;\n+}\n+\n+CTxDestination GetDestinationForKey(const CPubKey& key, OutputScriptType type)\n+{\n+    switch (type) {\n+    case OutputScriptType::P2PKH: return key.GetID();\n+    case OutputScriptType::P2SH_P2WPKH:\n+    case OutputScriptType::P2WPKH: {\n+        if (!key.IsCompressed()) return key.GetID();\n+        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n+        if (type == OutputScriptType::P2SH_P2WPKH) {\n+            CScript witprog = GetScriptForDestination(witdest);\n+            return CScriptID(witprog);\n+        } else {\n+            return witdest;\n+        }\n+    }\n+    default: assert(false);\n+    }\n+}\n+\n+UniValue scantxoutset(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"scantxoutset <action> ( <scanobjects> )\\n\"\n+            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n+            \"                                      \\\"start\\\" for starting a scan\\n\"\n+            \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n+            \"                                      \\\"status\\\" for progress report (in %) of the current scan\\n\"\n+            \"2. \\\"scanobjects\\\"                  (array, optional) Array of scan objects (only one object type per scan object allowed)\\n\"\n+            \"      [\\n\"\n+            \"        { \\\"address\\\" : \\\"<address>\\\" },       (string, optional) Bitcoin address\\n\"\n+            \"        { \\\"pubkey\\\"  :                      (object, optional) Public key\\n\"\n+            \"          {\\n\"\n+            \"            \\\"pubkey\\\" : \\\"<pubkey\\\">,         (string, required) HEX encoded public key\\n\"\n+            \"            \\\"script_types\\\" : [ ... ],      (array, optional) Array of script-types to derive from the pubkey (possible values: \\\"P2PKH\\\", \\\"P2SH-P2WPKH\\\", \\\"P2WPKH\\\")\\n\"\n+            \"          }\\n\"\n+            \"        },\\n\"\n+            \"      ]\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"unspents\\\": [\\n\"\n+            \"    {\\n\"\n+            \"    \\\"txid\\\" : \\\"transactionid\\\",     (string) The transaction id\\n\"\n+            \"    \\\"vout\\\": n,                    (numeric) the vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",    (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n+            \"    \\\"height\\\" : n,                 (numeric) Height of the unspent transaction output\\n\"\n+            \"   }\\n\"\n+            \"   ,...], \\n\"\n+            \" \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"]\\n\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});\n+\n+    UniValue result(UniValue::VOBJ);\n+    if (request.params[0].get_str() == \"status\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // no scan in progress\n+            return NullUniValue;\n+        }\n+        result.pushKV(\"progress\", g_scan_progress);\n+        return result;\n+    } else if (request.params[0].get_str() == \"abort\") {\n+        CoinsViewScanReserver reserver;\n+        if (reserver.reserve()) {\n+            // reserve was possible which means no scan was running\n+            return false;\n+        }\n+        // set the abort flag\n+        g_should_abort_scan = true;\n+        return true;\n+    } else if (request.params[0].get_str() == \"start\") {\n+        CoinsViewScanReserver reserver;\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan already in progress, use action \\\"abort\\\" or \\\"status\\\"\");\n+        }\n+        std::set<CScript> needles;\n+        CAmount total_in = 0;\n+\n+        // loop through the scan objects\n+        for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n+            if (!scanobject.isObject()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scan object\");\n+            }\n+            UniValue address_uni = find_value(scanobject, \"address\");\n+            UniValue pubkey_uni  = find_value(scanobject, \"pubkey\");\n+\n+            // make sure only one object type is present\n+            if (1 != !address_uni.isNull() + !pubkey_uni.isNull()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Only one object type is allowed per scan object\");\n+            } else if (!address_uni.isNull() && !address_uni.isStr()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"address\\\" must contain a single string as value\");\n+            } else if (!pubkey_uni.isNull() && !pubkey_uni.isObject()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"pubkey\\\" must contain an object as value\");\n+            } else if (address_uni.isStr()) {\n+                // type: address\n+                // decode destination and derive the scriptPubKey\n+                // add the script to the scan containers\n+                CTxDestination dest = DecodeDestination(address_uni.get_str());\n+                if (!IsValidDestination(dest)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+                }\n+                CScript script = GetScriptForDestination(dest);\n+                assert(!script.empty());\n+                needles.insert(script);\n+            } else if (pubkey_uni.isObject()) {\n+                // type: pubkey\n+                // derive script(s) according to the script_type parameter\n+                UniValue script_types_uni = find_value(pubkey_uni, \"script_types\");\n+                UniValue pubkeydata_uni = find_value(pubkey_uni, \"pubkey\");\n+\n+                // check the script types and use the default if not provided\n+                if (!script_types_uni.isNull() && !script_types_uni.isArray()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"script_types must be an array\");\n+                }\n+                else if (script_types_uni.isNull()) {\n+                    // use the default script types\n+                    script_types_uni = UniValue(UniValue::VARR);\n+                    for (const char *t : g_default_scantxoutset_script_types) {\n+                        script_types_uni.push_back(t);\n+                    }\n+                }\n+\n+                // check the acctual pubkey\n+                if (!pubkeydata_uni.isStr() || !IsHex(pubkeydata_uni.get_str())) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Public key must be hex encoded\");\n+                }\n+                CPubKey pubkey(ParseHexV(pubkeydata_uni, \"pubkey\"));\n+                if (!pubkey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid public key\");\n+                }\n+\n+                // loop through the script types and derive the script\n+                for (const UniValue& script_type_uni : script_types_uni.get_array().getValues()) {\n+                    OutputScriptType script_type = GetOutputScriptTypeFromString(script_type_uni.get_str());\n+                    if (script_type == OutputScriptType::UNKNOWN) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid script type\");\n+\n+                    CScript script = GetScriptForDestination(GetDestinationForKey(pubkey, script_type));\n+                    assert(!script.empty());\n+                    needles.insert(script);\n+                }\n+            }\n+        }\n+\n+        // Scan the unspent transaction output set for inputs\n+        UniValue unspents(UniValue::VARR);\n+        std::vector<CTxOut> input_txos;\n+        std::map<COutPoint, Coin> coins;\n+        g_should_abort_scan = false;\n+        g_scan_progress = 0;\n+        int64_t count = 0;\n+        std::unique_ptr<CCoinsViewCursor> pcursor;\n+        {\n+            LOCK(cs_main);\n+            FlushStateToDisk();\n+            pcursor = std::unique_ptr<CCoinsViewCursor>(pcoinsdbview->Cursor());\n+            assert(pcursor);\n+        }\n+        bool res = FindScriptPubKey(g_scan_progress, g_should_abort_scan, count, pcursor.get(), needles, coins);\n+        result.pushKV(\"success\", res);\n+        result.pushKV(\"searched_items\", count);\n+\n+        for (const auto& it : coins) {\n+            const COutPoint& outpoint = it.first;\n+            const Coin& coin = it.second;\n+            const CTxOut& txo = coin.out;\n+            input_txos.push_back(txo);\n+            total_in += txo.nValue;\n+\n+            UniValue unspent(UniValue::VOBJ);\n+            unspent.pushKV(\"txid\", outpoint.hash.GetHex());\n+            unspent.pushKV(\"vout\", (int32_t)outpoint.n);\n+            unspent.pushKV(\"scriptPubKey\", HexStr(txo.scriptPubKey.begin(), txo.scriptPubKey.end()));\n+            unspent.pushKV(\"amount\", ValueFromAmount(txo.nValue));\n+            unspent.pushKV(\"height\", (int32_t)coin.nHeight);\n+\n+            unspents.push_back(unspent);\n+        }\n+        result.pushKV(\"unspents\", unspents);\n+        result.pushKV(\"total_amount\", ValueFromAmount(total_in));\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n+    }\n+    return result;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n@@ -1970,6 +2214,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"verifychain\",            &verifychain,            {\"checklevel\",\"nblocks\"} },\n \n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          {\"blockhash\"} },\n+    { \"blockchain\",         \"scantxoutset\",           &scantxoutset,           {\"action\", \"scanobjects\"} },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        {\"blockhash\"} },"
      },
      {
        "sha": "055ab6ed3e0a99aaad51b1dccd4408e4d4b61e91",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78304941f771b8bd918deddd37d01bc8f21873e1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78304941f771b8bd918deddd37d01bc8f21873e1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=78304941f771b8bd918deddd37d01bc8f21873e1",
        "patch": "@@ -79,6 +79,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n+    { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },\n     { \"createmultisig\", 0, \"nrequired\" },"
      }
    ]
  },
  {
    "sha": "892de1dfea283a5d6ac18b8c74b57f61a920c762",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTJkZTFkZmVhMjgzYTVkNmFjMThiOGM3NGI1N2Y2MWE5MjBjNzYy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-05-31T13:12:16Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-15T20:18:06Z"
      },
      "message": "scantxoutset: add support for scripts",
      "tree": {
        "sha": "81e11e7c1d054eead6df3a1fd102b47c931ee4d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81e11e7c1d054eead6df3a1fd102b47c931ee4d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/892de1dfea283a5d6ac18b8c74b57f61a920c762",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltLrAAACgkQHrd2uwPH\nki0ckQ//a5vNr6fJw0HFtfN9yPlGGlm9nN0W+SOQn5lLmywo/e4/h9kwoP5C2v03\nGMVfOsdzGriLDmWEtXqPdteKs1bBAXnLi9FbJhIYidEIonG9H6nBAPydmT4yudko\nhqiFJIvqaW/GV3ieBx0BsfKhZpedSpnKWTPOlLlpCgqzgzWQdOWGLMq86A3XUVko\nrURufxZ0DTGEYP2vLB6BauntIvFTuduLORmP3BrVHoMFmCIDpnC4/JVRwCRQPijG\nqopXhA+rtmkPZVlecDyz1vHA4hPQrh4X2x7RDeQZjXUCsNbkvlDoNGSzA4bMC3Fa\n3aFrdOKtcuObSGbKZx7O96rc3Q15J1qca7o3qU5q1lBWetzBk06gQl9LRL1Ro7Wk\n4wQxTk5Gsaz18oj3P73IzrvcGjU+ahMUjP5fw79FzePf7P/ktS5FlpMMitoN8YHx\niGukKrSxhrplFWGzuPN5U2p1gOiOJ1uTeBDYKnoEfOuHA11g9w78omYPHTkmQW4P\nXbl1k4i+nYftDKDlyeOsP4uDl3rXFHnaG03w2uqGAde9e8dxAjKUx7oSEjlbTctq\nOjulneroIKr8mb6Hzye+8VtVyz/fVYDS3OzlPFnGfIT5Y+mmdvbovwNqHUB1SW8O\nKB0x0VCKY9lUxukfnApB6ttbUoreJ6IJs86WkhoX5u6aajZb+6M=\n=7tRV\n-----END PGP SIGNATURE-----",
        "payload": "tree 81e11e7c1d054eead6df3a1fd102b47c931ee4d3\nparent 78304941f771b8bd918deddd37d01bc8f21873e1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1527772336 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531685886 +0100\n\nscantxoutset: add support for scripts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892de1dfea283a5d6ac18b8c74b57f61a920c762",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/892de1dfea283a5d6ac18b8c74b57f61a920c762",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892de1dfea283a5d6ac18b8c74b57f61a920c762/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78304941f771b8bd918deddd37d01bc8f21873e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78304941f771b8bd918deddd37d01bc8f21873e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78304941f771b8bd918deddd37d01bc8f21873e1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8fec32f05eea90b18668c4ad9a0ac1771d2269dd",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/892de1dfea283a5d6ac18b8c74b57f61a920c762/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/892de1dfea283a5d6ac18b8c74b57f61a920c762/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=892de1dfea283a5d6ac18b8c74b57f61a920c762",
        "patch": "@@ -2032,6 +2032,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"2. \\\"scanobjects\\\"                  (array, optional) Array of scan objects (only one object type per scan object allowed)\\n\"\n             \"      [\\n\"\n             \"        { \\\"address\\\" : \\\"<address>\\\" },       (string, optional) Bitcoin address\\n\"\n+            \"        { \\\"script\\\"  : \\\"<scriptPubKey>\\\" },  (string, optional) HEX encoded script (scriptPubKey)\\n\"\n             \"        { \\\"pubkey\\\"  :                      (object, optional) Public key\\n\"\n             \"          {\\n\"\n             \"            \\\"pubkey\\\" : \\\"<pubkey\\\">,         (string, required) HEX encoded public key\\n\"\n@@ -2089,14 +2090,17 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             }\n             UniValue address_uni = find_value(scanobject, \"address\");\n             UniValue pubkey_uni  = find_value(scanobject, \"pubkey\");\n+            UniValue script_uni  = find_value(scanobject, \"script\");\n \n             // make sure only one object type is present\n-            if (1 != !address_uni.isNull() + !pubkey_uni.isNull()) {\n+            if (1 != !address_uni.isNull() + !pubkey_uni.isNull() + !script_uni.isNull()) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Only one object type is allowed per scan object\");\n             } else if (!address_uni.isNull() && !address_uni.isStr()) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"address\\\" must contain a single string as value\");\n             } else if (!pubkey_uni.isNull() && !pubkey_uni.isObject()) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"pubkey\\\" must contain an object as value\");\n+            } else if (!script_uni.isNull() && !script_uni.isStr()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"script\\\" must contain a single string as value\");\n             } else if (address_uni.isStr()) {\n                 // type: address\n                 // decode destination and derive the scriptPubKey\n@@ -2117,8 +2121,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 // check the script types and use the default if not provided\n                 if (!script_types_uni.isNull() && !script_types_uni.isArray()) {\n                     throw JSONRPCError(RPC_INVALID_PARAMETER, \"script_types must be an array\");\n-                }\n-                else if (script_types_uni.isNull()) {\n+                } else if (script_types_uni.isNull()) {\n                     // use the default script types\n                     script_types_uni = UniValue(UniValue::VARR);\n                     for (const char *t : g_default_scantxoutset_script_types) {\n@@ -2144,6 +2147,12 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                     assert(!script.empty());\n                     needles.insert(script);\n                 }\n+            } else if (script_uni.isStr()) {\n+                // type: script\n+                // check and add the script to the scan containers (needles array)\n+                CScript script(ParseHexV(script_uni, \"script\"));\n+                // TODO: check script: max length, has OP, is unspenable etc.\n+                needles.insert(script);\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "94d73d32abe927e74271a7b3eac7ba56658a535e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGQ3M2QzMmFiZTkyN2U3NDI3MWE3YjNlYWM3YmE1NjY1OGE1MzVl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-06-13T14:00:30Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-15T20:18:10Z"
      },
      "message": "scantxoutset: support legacy P2PK script type",
      "tree": {
        "sha": "efbaeb8b88c6b20e42e6fa8a4f6eabdd086e5773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efbaeb8b88c6b20e42e6fa8a4f6eabdd086e5773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d73d32abe927e74271a7b3eac7ba56658a535e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltLrAIACgkQHrd2uwPH\nki00jg/+L1TqkFoXjIOl8a1V/kWLZu+dozFh2i2GG0ophYk+71/bpAvRVE80RD+w\n7P8XgDGd8VO/vunbYpey3JXToqkRB9pnM/ZIIObzKlXNPLcSfp3yq0uXpid+nMr8\nxMmGGPtGKqvpsSaLZZQkXzY2N3EZigkybFwAue948JcKloSeXmr6DKg28uJIzCai\nG32mkBRNmqZefE9yTWRXVlmx4VcmEPn2grBA8ocvzwfpM0TmK5v3ePlAxRxxiTjU\nxvx59qmzJtRlRWf4boU6xKoGa1BTalO/8rZRMFz25ovoneP/9Da7lY+5F4jxaA+f\nnNmZTqL2ZBY36rB+WPd6RArvje9T+/3ZsbjLUPX0IxFc6myauK5gR7mXrQg9AYgU\n/gsZ/ct6J0NUF0aQ9ssllJSafQI1CYi7Rz4NYYxgwst4d1cvRgN8acu2QU/n7Kce\nh/ZRXJEEvtH+wRgoT4n+5kfgg6Ski5n5l9TFF84QOupY041TPGRA2sfMICUGkcX/\nzbR/JOEbHqEQETuhXzQfCJaceqf/D5J3QMtV2MFZCcuEEbY9neTG2tERYdurur1x\nk1pvWiELBACP13vnl+C8pSY5Fd3BCMs5eiEg2XG8b+XfXPw4OY0asZw05bTBDFSC\n0WFEY8EeJbrLc5v8To4XX1FDBVlKR1wnIURIe2+orkkPBskG0Es=\n=P3fs\n-----END PGP SIGNATURE-----",
        "payload": "tree efbaeb8b88c6b20e42e6fa8a4f6eabdd086e5773\nparent 892de1dfea283a5d6ac18b8c74b57f61a920c762\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1528898430 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531685890 +0100\n\nscantxoutset: support legacy P2PK script type\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d73d32abe927e74271a7b3eac7ba56658a535e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94d73d32abe927e74271a7b3eac7ba56658a535e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d73d32abe927e74271a7b3eac7ba56658a535e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "892de1dfea283a5d6ac18b8c74b57f61a920c762",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/892de1dfea283a5d6ac18b8c74b57f61a920c762",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/892de1dfea283a5d6ac18b8c74b57f61a920c762"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a339bd10f0c6777b9a6a502b38e8108c9bace1a8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d73d32abe927e74271a7b3eac7ba56658a535e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d73d32abe927e74271a7b3eac7ba56658a535e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=94d73d32abe927e74271a7b3eac7ba56658a535e",
        "patch": "@@ -2036,7 +2036,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"        { \\\"pubkey\\\"  :                      (object, optional) Public key\\n\"\n             \"          {\\n\"\n             \"            \\\"pubkey\\\" : \\\"<pubkey\\\">,         (string, required) HEX encoded public key\\n\"\n-            \"            \\\"script_types\\\" : [ ... ],      (array, optional) Array of script-types to derive from the pubkey (possible values: \\\"P2PKH\\\", \\\"P2SH-P2WPKH\\\", \\\"P2WPKH\\\")\\n\"\n+            \"            \\\"script_types\\\" : [ ... ],      (array, optional) Array of script-types to derive from the pubkey (possible values: \\\"P2PK\\\", \\\"P2PKH\\\", \\\"P2SH-P2WPKH\\\", \\\"P2WPKH\\\")\\n\"\n             \"          }\\n\"\n             \"        },\\n\"\n             \"      ]\\n\"\n@@ -2142,8 +2142,13 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 for (const UniValue& script_type_uni : script_types_uni.get_array().getValues()) {\n                     OutputScriptType script_type = GetOutputScriptTypeFromString(script_type_uni.get_str());\n                     if (script_type == OutputScriptType::UNKNOWN) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid script type\");\n-\n-                    CScript script = GetScriptForDestination(GetDestinationForKey(pubkey, script_type));\n+                    CScript script;\n+                    if (script_type == OutputScriptType::P2PK) {\n+                        // support legacy P2PK scripts\n+                        script << ToByteVector(pubkey) << OP_CHECKSIG;\n+                    } else {\n+                        script = GetScriptForDestination(GetDestinationForKey(pubkey, script_type));\n+                    }\n                     assert(!script.empty());\n                     needles.insert(script);\n                 }"
      }
    ]
  },
  {
    "sha": "eec7cf7b33cafac6a969bce38905cbacda56b1a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWM3Y2Y3YjMzY2FmYWM2YTk2OWJjZTM4OTA1Y2JhY2RhNTZiMWE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-06-13T20:38:40Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-15T20:18:11Z"
      },
      "message": "scantxoutset: mention that scanning by address will miss P2PK txouts",
      "tree": {
        "sha": "7c1a2f510a3a2a54e1ba8fd4eab7e45a556cd3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c1a2f510a3a2a54e1ba8fd4eab7e45a556cd3e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eec7cf7b33cafac6a969bce38905cbacda56b1a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltLrAMACgkQHrd2uwPH\nki3Aiw//bfL2/O2i4N68zi6yQ5f3Gz47MU/vMtdGrhNDYYJ01uBrie87TM4hcdhF\njw7cglw7NpONnXKyZKApeHaQ4pfz3P85X53u6QGWxzj5iqfMqaMWR0ZqKREvbDdC\nKEiNycZPootoWwKXIC5EjazY+TfrLP/RI2ItcLMkRWT7iU4J4DmQqfdcZs6MdlPi\nEY97M7q1Px9Xdbd9LBqwRiE4G7QtKrpQ2KUk5Xcr2m9MOoXXaoenbidmxZaVdkFf\nwe7EZ02AS7HbcW8VI9LJl6FqPkh82pvA3C670iIOqxLxU0ZbLniT5EsGEYNHurPM\nzAzg8sTMkd2QXq3coQZbjZ1tmOlG4fTNRQh4ajzHw1vEmcFhaX8r5a7KwSrYltDu\nbO0OqRMXjLfk0L58OUMBEPOnjLAOF0ElARyvQHRdK1VaGpZ3N83k3Bdw/i+OTny+\nT2lXFZH54lhdUw6s4lKlaOLQPCTnFrWdS4VgItipJYj/QaE9yB4lrkZD3LEVq13R\nGiB62a2wN3A7Qls0B20up2C/Qjh4fCUyWtATN3Jy5Xnu/ETx9DuqewDmoL4oYf6u\npmdGYVjFmu7adK9dfuFuujpb93o+QzEYCUnWxkNVzKm/dLv2SEGtysC7h7SCskGG\n+6th1uwR7H7buMLIpPUXnJBGuVObNMd+9+FKXhbHa1jI1YmkFss=\n=b/jE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c1a2f510a3a2a54e1ba8fd4eab7e45a556cd3e1\nparent 94d73d32abe927e74271a7b3eac7ba56658a535e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1528922320 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531685891 +0100\n\nscantxoutset: mention that scanning by address will miss P2PK txouts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec7cf7b33cafac6a969bce38905cbacda56b1a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eec7cf7b33cafac6a969bce38905cbacda56b1a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec7cf7b33cafac6a969bce38905cbacda56b1a5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94d73d32abe927e74271a7b3eac7ba56658a535e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d73d32abe927e74271a7b3eac7ba56658a535e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94d73d32abe927e74271a7b3eac7ba56658a535e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "852abe55defa412cebd87c1bd7378914af73f09a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec7cf7b33cafac6a969bce38905cbacda56b1a5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec7cf7b33cafac6a969bce38905cbacda56b1a5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eec7cf7b33cafac6a969bce38905cbacda56b1a5",
        "patch": "@@ -2024,6 +2024,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"scantxoutset <action> ( <scanobjects> )\\n\"\n             \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n+            \"Using addresses as scanobjects will _not_ detect unspent P2PK txouts\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\""
      }
    ]
  },
  {
    "sha": "be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTk4YjJkOWE4ZmNiNWYwZTI5ZWE4OGYwMjZkNjA0NDQyZmU5ODRj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-16T06:34:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-15T20:18:11Z"
      },
      "message": "[QA] Add scantxoutset test",
      "tree": {
        "sha": "68558c25134f3d127e704de8ef9b3958a90416ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68558c25134f3d127e704de8ef9b3958a90416ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAltLrAMACgkQHrd2uwPH\nki2MRw//bdbkmrCKx7xUcagRLyjlH/SBsafHLcxon0En8JxIMPA7Ggp91y1jsks/\ncSr6zkTR2epiwDrbLXUxxKwwsbN5o0Edr9n+jjoIWbjCAzl2kmB4dCgr/IXErfHr\nyuXRGeKevFEo7DuqeQc4GrliCq36GkTNueDStm0Hv5+mD8ycV921dETAfU0vZ3JD\nBo42GHauoMaHjO2oZ1T5560iLEpUa0nIeAAN8heemty8HPjFmL0+NDsU09N+CMTo\n1DyrbG+BNXUav2lzC1fRheEV4zhS2THYswHVKmruFkNqruf36saSexyJnS+66FYN\npnFficZvW0i29A7X6bz6mU34xp5D7b49tiyMEBjfJ8qv58woukIITLy2P+nQR+yH\nOVxWFtGooL8kiNADb4nmb/bc8+VdaczigAnKXhvjZzOLhbjNALDiJR6v1gy0VtPP\nFZaPKfG0f0PL/cNCwN90PbFa3lKASru3gjm3Q5aeYPJHzGoaESCF9N5SJI3gCtAc\nLtFgzrLM7d+NQMwFLF1UgVVa6WjThTV3iPMm1cK1EFmOCD+Z8tYUpI2uc0df4GWL\nCgaCCoMvV2Bxa5gJjAvx9yF1n9ROI73jPf8+Pum3LNUJSi/0Ce3FaqheyIwBmZlx\nwuszms6zhN9IlYP1Kef92SNUc8ZSgTd14ONZiQoel3OovU2BW68=\n=298K\n-----END PGP SIGNATURE-----",
        "payload": "tree 68558c25134f3d127e704de8ef9b3958a90416ac\nparent eec7cf7b33cafac6a969bce38905cbacda56b1a5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1516084447 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1531685891 +0100\n\n[QA] Add scantxoutset test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be98b2d9a8fcb5f0e29ea88f026d604442fe984c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eec7cf7b33cafac6a969bce38905cbacda56b1a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec7cf7b33cafac6a969bce38905cbacda56b1a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eec7cf7b33cafac6a969bce38905cbacda56b1a5"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ce5d4da9e7149ff5ba0e8cca1bf4fadf22f75af7",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be98b2d9a8fcb5f0e29ea88f026d604442fe984c/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be98b2d9a8fcb5f0e29ea88f026d604442fe984c/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
        "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the scantxoutset rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+import shutil\n+import os\n+\n+class ScantxoutsetTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+    def run_test(self):\n+        self.log.info(\"Mining blocks...\")\n+        self.nodes[0].generate(110)\n+\n+        addr_P2SH_SEGWIT = self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\")\n+        pubk1 = self.nodes[0].getaddressinfo(addr_P2SH_SEGWIT)['pubkey']\n+        addr_LEGACY = self.nodes[0].getnewaddress(\"\", \"legacy\")\n+        pubk2 = self.nodes[0].getaddressinfo(addr_LEGACY)['pubkey']\n+        addr_BECH32 = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        pubk3 = self.nodes[0].getaddressinfo(addr_BECH32)['pubkey']\n+        self.nodes[0].sendtoaddress(addr_P2SH_SEGWIT, 1)\n+        self.nodes[0].sendtoaddress(addr_LEGACY, 2)\n+        self.nodes[0].sendtoaddress(addr_BECH32, 3)\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Stop node, remove wallet, mine again some blocks...\")\n+        self.stop_node(0)\n+        shutil.rmtree(os.path.join(self.nodes[0].datadir, \"regtest\", 'wallets'))\n+        self.start_node(0)\n+        self.nodes[0].generate(110)\n+\n+        self.restart_node(0, ['-nowallet'])\n+        self.log.info(\"Test if we have found the non HD unspent outputs.\")\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"pubkey\": {\"pubkey\": pubk1}}, {\"pubkey\": {\"pubkey\": pubk2}}, {\"pubkey\": {\"pubkey\": pubk3}}])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"address\": addr_P2SH_SEGWIT}, {\"address\": addr_LEGACY}, {\"address\": addr_BECH32}])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"address\": addr_P2SH_SEGWIT}, {\"address\": addr_LEGACY}, {\"pubkey\": {\"pubkey\": pubk3}} ])['total_amount'], 6)\n+\n+        self.log.info(\"Test invalid parameters.\")\n+        assert_raises_rpc_error(-8, 'Scanobject \"pubkey\" must contain an object as value', self.nodes[0].scantxoutset, \"start\", [ {\"pubkey\": pubk1}]) #missing pubkey object\n+        assert_raises_rpc_error(-8, 'Scanobject \"address\" must contain a single string as value', self.nodes[0].scantxoutset, \"start\", [ {\"address\": {\"address\": addr_P2SH_SEGWIT}}]) #invalid object for address object\n+\n+if __name__ == '__main__':\n+    ScantxoutsetTest().main()"
      },
      {
        "sha": "dcf04c39e10788367cbfcc478c621efb174d46b5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be98b2d9a8fcb5f0e29ea88f026d604442fe984c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be98b2d9a8fcb5f0e29ea88f026d604442fe984c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=be98b2d9a8fcb5f0e29ea88f026d604442fe984c",
        "patch": "@@ -140,6 +140,7 @@\n     'feature_uacomment.py',\n     'p2p_unrequested_blocks.py',\n     'feature_includeconf.py',\n+    'rpc_scantxoutset.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',"
      }
    ]
  }
]