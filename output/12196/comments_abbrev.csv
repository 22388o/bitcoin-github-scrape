gmaxwell,2018-01-16T07:14:50Z,Why is it pubkeys and not addresses for the pubkey part?  (obviously xpubs are xpubs and need to be),https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357872742,357872742,
jonasschnelli,2018-01-16T07:33:37Z,After a short discussion on IRC (https://botbot.me/freenode/bitcoin-core-dev/2018-01-16/?msg=95804115&page=2) support for addresses and pubkeys makes most sense. Will add support for an array of addresses.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357876083,357876083,
laanwj,2018-01-16T12:41:12Z,"Concept ACK, nice! I've wished for UTXO scanning functionality many times, much faster than importing into a watchonly wallet if you only care about spendable UTXOs.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-357947957,357947957,
jonasschnelli,2018-01-20T00:16:20Z,"* Added support for addresses (can scan unspent outputs after given addresses)\n* Added support for an optional raw sweep transaction including optional feerate or optional confirmation target",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359125255,359125255,
jonasschnelli,2018-01-20T00:26:49Z,~~The raw sweep fee calculation is currently WIP (misses the dummy signer part)... will fix soon.~~,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359126554,359126554,
jonasschnelli,2018-01-21T06:36:12Z,Overhauled the fee calculation logic (see the dummy sign keystore).,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-359227556,359227556,
luke-jr,2018-01-24T19:23:42Z,NACK supporting addresses. Addresses have no relation to the UTXOs.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360244898,360244898,
jonasschnelli,2018-01-24T19:27:44Z,"@luke-jr: Why? Addresses are encoded output scripts (scriptPubKey). The rational behind supporting addresses is that a) it may be more efficient then forming every possible known common script from a pubkey and b) that pubkeys are somewhat more difficult to export then the pure ""used addresses"".",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360246041,360246041,
luke-jr,2018-01-24T19:41:53Z,Addresses are *opaque* identifiers for a given invoice. That they are currently implemented by encoding a scriptPubKey is irrelevant.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360250183,360250183,
greenaddress,2018-02-26T18:44:50Z,"Does it support mempool/unconfirmed utxos? I had a quick look and didn't seem to, I think it would be useful to have mempool too.\n\nWould it make sense to avoid the background job? maybe by keeping the utxo set sorted by scriptPubKey and binary search on it or perhaps some utxo set limited indexing?",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368605251,368605251,
jonasschnelli,2018-02-27T01:47:15Z,"> Does it support mempool/unconfirmed utxos? I had a quick look and didn't seem to, I think it would be useful to have mempool too.\n\nIt currently does not scan the mempool (hence the command name `scantxoutset`), but I agree, that would be useful. But, since scans take a while, timing may be a problem for scanning the mempool.\nMaybe an additional RPC call would make sense (`scanmempool`)?\n",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368717494,368717494,
jonasschnelli,2018-02-27T01:52:40Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-368718491,368718491,
luke-jr,2018-02-28T02:15:27Z,"The commit separation here is ugly: CCoinsView::FindScriptPubKey initially checks ShutdownRequested directly, and then this is removed with the RPC changes.\n\n",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-369097379,369097379,
jonasschnelli,2018-02-28T14:22:14Z,Fixed the ugly commit separation in `coins.cpp`,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-369254165,369254165,
jonasschnelli,2018-05-18T08:43:19Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-390138671,390138671,
jonasschnelli,2018-05-19T09:24:23Z,"> Overall, I'm unsure about this. This is functionality that is more easily provided by software that maintains a UTXO index by script, [...]\n\nI think the scantxoutset approach is a low hanging fruit (relatively simple to implement) and may be replaced later with an (optional) UXTO index approach.\n\nIt will immediately allow pruned peers to sweep seeds/wallets with a process that takes less",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-390392268,390392268,
MarcoFalke,2018-05-29T15:43:32Z,Just noting that GitHub decides to hide half of my review comments by default and they were not addressed (mostly feedback on the tests).,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-392826053,392826053,
jonasschnelli,2018-05-30T07:25:14Z,"> tx = scantxoutset(""start"", { ""sweep_to"": address })[""sweep_tx""]\n> fundrawtransaction(tx, { ""subtractFeeFromOutputs"": [0] })\n\n@promag: would that also work without the wallet? My idea was to make `scantxoutset` work without a wallet.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393057791,393057791,
jonasschnelli,2018-05-30T07:25:43Z,"> Just noting that GitHub decides to hide half of my review comments by default and they were not addressed (mostly feedback on the tests).\n\n@MarcoFalke: Have not forgotten. Still working on it.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393057931,393057931,
Sjors,2018-05-30T14:47:19Z,"Concept ACK\n\nI tested against a blockchain.info testnet wallet and was able to get the correct balance for an account including change (there's an xpub export feature buried in settings).\n\nI also tested against a Ledger wallet with p2sh segwit addresses.\n\nAlso tested `status` and `abort`.\n\nBackground question: what index could be added to make this much faster? I'm guessing `script",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393190971,393190971,
jonasschnelli,2018-05-31T14:04:58Z,"Followed @sipa advice and changed the API.\nThe script type derivation is now controllable via the API.\n\nThe command takes now <n> scan objects that are either an `address`, `script`, `pubkey` or `xpub`.\nXpub and pubkey have the option to pass in the script type (P2PKH, P2SH-P2WPKH, P2WPKH).\n\nThe commit history is also more clean now.\n\nThanks for reviewing again.\n\n@MarcoFalke: y",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393541211,393541211,
jonasschnelli,2018-05-31T14:08:10Z,"@Sjors \n> total_amount doesn't include unconfirmed funds, maybe add a flag to show those?\n\nThis should be done in a separate command (`scanmempool` which would be a great follow up).\n\n> a minimum block height / date for faster scans (if only to make RPC dev lives happier)\n\nNot possible AFAIK. We scan the UXTO set, not blocks.\n\n> it would be really cool to sweep using an xpriv (wi",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393542212,393542212,
promag,2018-05-31T23:02:41Z,"> `rawsweep` should have an option to make 1 transaction per output\n\n@Sjors why?\n",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393709394,393709394,
Sjors,2018-06-01T07:12:36Z,"@jonasschnelli the `Min relay fee not met` error was on testnet, not regtest. Maybe that doesn't happen on mainnet much. Maybe it should detect the lack of fee estimation and throw a specific error (if no fee is specified by the user)?\n\n> We scan the UXTO set, not blocks\n\nI wish there an easy way to ""translate"" Bitcoin Core's internal data structures to SQL table descriptions, so it's easi",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393786069,393786069,
ajtowns,2018-06-02T11:24:40Z,"@Sjors you have an extra close curly-brace after the close square bracket in `src/bitcoin-cli scantxoutset start '{""xpubs"": [ {""xpub"": ""tpub..."" }  ]}, ""rawsweep"": {}}'` ",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-394079921,394079921,
laanwj,2018-06-04T13:33:39Z,"I have an unspent txout (on testnet) like this:\n```json\n  {\n    ""txid"": ""473abbc4eb4768d1fdad21f05d3485bcd96cb33f883dce3dd8bccebced3f4efc"",\n    ""vout"": 0,\n    ""address"": ""n2PaqLena7QZtpKowZok8FMPqCY21Xrp4x"",\n    ""label"": ""null"",\n    ""scriptPubKey"": ""21029b861186b49793708a4e00ecf3cec62c027dccfc12509b7e6ac2538b4b19b3abac"",\n    ""amount"": 25.00317000,\n    ""confirmations"": 980258,\n ",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-394356035,394356035,
MarcoFalke,2018-06-11T14:38:00Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-396266591,396266591,
jonasschnelli,2018-06-12T08:40:28Z,"@laanwj:\nIf I execute `getaddressinfo n2PaqLena7QZtpKowZok8FMPqCY21Xrp4x` I get \n```json\n{\n  ""address"": ""n2PaqLena7QZtpKowZok8FMPqCY21Xrp4x"",\n  ""scriptPubKey"": ""76a914e4f5d0b9353f7715e1bfed11358a5b84fd7c4e3488ac"",\n  ""ismine"": false,\n  ""iswatchonly"": false,\n  ""isscript"": false,\n  ""iswitness"": false,\n  ""labels"": [\n  ]\n}\n```\n\nAFAIK your script (P2PK) `21029b861186b497937",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-396512496,396512496,
jonasschnelli,2018-06-12T08:41:59Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-396512960,396512960,
jonasschnelli,2018-06-13T14:09:21Z,"Added two commits:\n\nhttps://github.com/bitcoin/bitcoin/pull/12196/commits/fdd09d34a14ca4f416b9101b37187098f9145301 \nadds support for P2PK in `script_types`\n\nhttps://github.com/bitcoin/bitcoin/pull/12196/commits/3c546fd38e2bdb6957fa134f8847e2a7c5c7e23\n\nP2PK and P2PKH share the same address (two scripts result in the same address). Deriving a P2PK script requires the pubkey which is no",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-396950856,396950856,
jonasschnelli,2018-06-13T20:42:26Z,"After discussion with @sipa on IRC, I removed the auto-derivation for P2PK scripts when scanning with addresses. Instead, I have added a short info to the RPC help that should make users aware for that particular edge case.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-397079427,397079427,
jonasschnelli,2018-06-14T09:23:13Z,Fixed @promag's points,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-397230499,397230499,
luke-jr,2018-06-16T16:27:31Z,"Again, addresses are opaque and do not get tied to UTXOs. It makes no sense to find UTXOs ""by address"".",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-397823655,397823655,
jonasschnelli,2018-06-18T12:50:28Z,"@luke-jr \n> Again, addresses are opaque and do not get tied to UTXOs. It makes no sense to find UTXOs ""by address"".\n\nYou have already made that argument [here](https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-360244898).\nIt seems like that the scans based on addresses are useful. Other developers opinions would be welcome.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-398043176,398043176,
laanwj,2018-06-18T15:52:16Z,"> It seems like that the scans based on addresses are useful. Other developers opinions would be welcome.\n\nYes, that is useful, and for better or worse, likely how most people will be using this in practice.\n\nutACK 4782d23938a8a5297319f024aed3fc6e2c1651ac",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-398102545,398102545,
ajtowns,2018-06-19T05:29:06Z,"> Addresses are opaque identifiers for a given invoice. That they are currently implemented by encoding a scriptPubKey is irrelevant.\n\nThis makes no sense to me: per the wiki ""A Bitcoin address [...] is an identifier [...] that represents a possible destination for a bitcoin payment"", but if you want to send a bitcoin payment somewhere you have to be able to deduce the scriptPubKey from the ad",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-398278708,398278708,
sipa,2018-07-02T18:40:02Z,"As discussed in the meeting (http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-06-28-19.00.log.html), my suggestion is to (for now) drop the xpub support from this PR. That way we have some more time for a generic notation for chains of scripts to develop (something I'm currently working on) and be compatible with other places such a notation may be adopted.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-401896375,401896375,
laanwj,2018-07-04T09:20:07Z,"Agree with @sipa - that way, we can move this forward without full agreement on xpub representation.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402419407,402419407,
jonasschnelli,2018-07-04T10:11:31Z,Removed the xpub support. Thanks for reviewing again.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402433457,402433457,
laanwj,2018-07-04T12:34:33Z,re-utACK 3bf8dbe48a1f45b7aa0584bfb0cf19a7ddf492c9,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402465993,402465993,
promag,2018-07-04T20:46:55Z,"While testing I hit an edge case:\n```\n./src/bitcoin-cli -regtest  scantxoutset start '[]' & ;  ./src/bitcoin-cli -regtest  scantxoutset abort\n[1] 90388\ntrue\n{\n  ""success"": ""yes"",\n  ""searched_items"": 6,\n  ""unspents"": [\n  ],\n  ""total_amount"": 0.00000000\n}\n[1]  + 90388 done       ./src/bitcoin-cli -regtest scantxoutset start '[]'\n```\nSo `abort` returned `true` but the scan",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402556978,402556978,
laanwj,2018-07-05T11:44:25Z,"I'm not sure that's a harmful edge case. If you abort after the last opportunity to abort, I'd say it makes sense that it will finish successfully.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402695749,402695749,
promag,2018-07-05T11:51:24Z,That's why I ask if it makes sense to return a bool in abort.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-402697305,402697305,
jonasschnelli,2018-07-12T10:17:25Z,"* Moved the `FindScriptPubKey()` method to `rpc/blockchain.cpp` (changes are no longer spread in multiple commits).\n* Removed the sweep transaction creation code (see https://github.com/bitcoin/bitcoin/pull/12196#pullrequestreview-134880350)\n\nI kept the pubkey search option since I think this is very helpful. I agree that we should move to the descriptors specified by @sipa. IMO we define th",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-404464275,404464275,
jonasschnelli,2018-07-12T19:45:51Z,"Fixed issues:\n* holds now `cs_main` during coins view cursor creation and `FlushToDisk()`\n* Removed `temp_keystore` (relict from raw-sweep-tx).\n* Fixed ""yes""/""no"" instead of true/false JSON returns\n* Fixed nits",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-404628911,404628911,
jamesob,2018-07-12T21:15:38Z,"Concept ACK\n\nHappy to do a more in-depth review. PR description looks in need of an update.",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-404653215,404653215,
jonasschnelli,2018-07-13T08:58:53Z,Fixed points reported by @jamesob.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-404772258,404772258,
jonasschnelli,2018-07-15T20:20:12Z,Fixed relevant points from @Empact ,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-405115531,405115531,
promag,2018-07-17T14:39:53Z,utACK be98b2d.,https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-405606018,405606018,
surindergiri,2020-10-01T11:44:24Z,"Thanks for your great efforts implementing this feature, On Oct 01, 2020, When I run this RPC command on Bitcoin Node version 0.20.0, then its response is too slow, I am getting rpc response after 1-2 minutes. \n\nIs there any way to speed up this ""scantxoutset"" RPC command or any alternative available?\n\nI asked the same question over bitcoin stackexchange forum, but nobody responded. I know",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-702078285,702078285,
promag,2020-10-01T14:53:26Z,"> I asked the same question over bitcoin stackexchange forum, but nobody responded\n\n@surindergiri that was like 3 hours before you posted here..",https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-702191016,702191016,
promag,2018-01-16T10:42:29Z,"IMO there is no need to throw, a `bool` in the response is enough? Otherwise, missing test.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719264,161719264,src/rpc/blockchain.cpp
promag,2018-01-16T10:43:33Z,Remove `other options`? There are none.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719526,161719526,src/rpc/blockchain.cpp
promag,2018-01-16T10:44:02Z,`request.params.size() != 2`?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719731,161719731,src/rpc/blockchain.cpp
promag,2018-01-16T10:44:58Z,"Nit, newline after `{`.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161719989,161719989,src/rpc/blockchain.cpp
promag,2018-01-16T10:45:50Z,Missing test for error.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720229,161720229,src/rpc/blockchain.cpp
promag,2018-01-16T10:46:20Z,"Nit, `else {` here.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720355,161720355,src/rpc/blockchain.cpp
promag,2018-01-16T10:46:42Z,"Nit, `else if () {` here.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720471,161720471,src/rpc/blockchain.cpp
promag,2018-01-16T10:47:17Z,"Typo, abort.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161720621,161720621,src/rpc/blockchain.cpp
promag,2018-01-16T10:55:14Z,"Lock only when changing `g_scan_in_progress`?\n```cpp\nif (m_could_reserve) {\n    std::lock_guard<std::mutex> lock(g_utxosetscan);\n    g_scan_in_progress = false;\n}\n```",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161722614,161722614,src/rpc/blockchain.cpp
promag,2018-01-16T10:59:50Z,"Remove ""status""? Otherwise add ` or ` between actions.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723685,161723685,src/rpc/blockchain.cpp
promag,2018-01-16T11:00:53Z,const auto&,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161723933,161723933,src/rpc/blockchain.cpp
promag,2018-01-16T11:01:18Z,"Assert not reserved?\n```cpp\nassert(!m_could_reserve);\nstd::lock_guard<std::mutex> lock(g_utxosetscan);\nif (g_scan_in_progress) return false;\ng_scan_in_progress = true;\nm_could_reserve = true;\nreturn true;\n```",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r161724018,161724018,src/rpc/blockchain.cpp
jonasschnelli,2018-01-19T07:03:12Z,Nah. You can also call `scantxoutset status`,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549141,162549141,src/rpc/blockchain.cpp
jonasschnelli,2018-01-19T07:07:03Z,"You mean missing a functional test for that case. Yes. I though about it, but would require a mockup-slowdown argument (`-testslowdown` or similar). Otherwise I guess it's hard to properly test this.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162549573,162549573,src/rpc/blockchain.cpp
gmaxwell,2018-01-22T02:07:31Z,What prevents the state from being mutated out from under this scan?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r162837161,162837161,src/rpc/blockchain.cpp
jonasschnelli,2018-01-22T19:04:56Z,"I think due to the time required to perform a scan, it's something that may be tolerated (although it should be mentioned in the docs). Not sure, but I guess it's the same with `gettxoutsetinfo`.\n\nNot sure if you can scan a `CCoinsView` of a snapshot state... I guess no.\nLocking cs_main would be ""meh"".",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r163036137,163036137,src/rpc/blockchain.cpp
jonasschnelli,2018-01-22T19:05:57Z,"Also, the rawtx (sweep) is in the same way ""outdated"" the moment you have received it... maybe you could argue that this is the same for `fundrawtx`",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r163036409,163036409,src/rpc/blockchain.cpp
jonasschnelli,2018-05-18T07:54:56Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189189080,189189080,src/rpc/blockchain.cpp
sipa,2018-05-18T20:58:21Z,Can this be made a function instead of a method? It doesn't seem like it needs access to any of the class's internals.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189391605,189391605,src/coins.cpp
sipa,2018-05-18T20:58:58Z,Nit: style for variable names.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189391737,189391737,src/coins.h
sipa,2018-05-18T21:05:45Z,"@gmaxwell @jonasschnelli The cursor iterates over the state of the CCoinsView at the time it was created; modifying it during iteration is fine. This only works because `GetCursor` is not implemented for `CCoinsViewCache`, and is invoked directly on the `CCoinsViewDB` LevelDB wrapper.\n\nThe downside is that this requires a full flush of the database, hurting performance for all of the process (",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189393229,189393229,src/rpc/blockchain.cpp
sipa,2018-05-18T21:22:30Z,"It's unfortunate that this introduces yet another ""default set of addresses derived from a given key"". Maintaining this will lead to incompatibilities between implementations as new types of scripts get added.\n\nIt would be better to have an explicit way to describe a set of scripts to watch for that could be reused in multiple places. I'm working towards that (see https://gist.github.com/sipa/",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189396442,189396442,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:27:53Z,"Since this return value is subject to several races [1], I believe you could just `return NullUniValue;`\n\n[1]:\n* e.g. the scan finishes between the last call and this one\n* e.g. this call returns true, but the last start call was not (yet) actually aborted",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189674015,189674015,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:29:48Z,Could add `return result` (early return) to clarify that nothing else happens in the hundred lines below for this case.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189674525,189674525,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:32:34Z,"Why would this be an exception, considering that the scan could normally finish between the last call and this one? Generally I think we should avoid exceptions for control flow in our code (and especially in third party code that uses the rpc interface)",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189675354,189675354,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:39:20Z,"Agree that just checking for exact matches (scriptPubKey from address) is probably sufficient. If scripts really need to be translated between address types, it can be done in the client (wallet) software or a third party tool by the caller. Thus the implementation is simplified here by removing this whole code block.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189677197,189677197,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:48:25Z,I am pretty sure this never happens when the destination is valid (which you checked two lines above.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189679876,189679876,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T18:58:51Z,typo-nit: ScantxoutsetTest,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189682610,189682610,test/functional/rpc_scantxoutset.py
MarcoFalke,2018-05-21T19:00:22Z,"nit: specify `p2sh-segwit`, so the tests don't break when the defaults change.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189682988,189682988,test/functional/rpc_scantxoutset.py
MarcoFalke,2018-05-21T19:01:49Z,"nit: `os.path.join(self.nodes[0].datadir, ""regtest"", 'wallets')`",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189683374,189683374,test/functional/rpc_scantxoutset.py
MarcoFalke,2018-05-21T19:03:21Z,"nit: `os.path.join(self.nodes[1].datadir, ""regtest"", 'wallet.dat'`",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189683735,189683735,test/functional/rpc_scantxoutset.py
MarcoFalke,2018-05-21T19:07:08Z,"Nit: ""Estimated fee"" implies that the fee is unknown, which is not true given that the exact fee can be calculated.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189684608,189684608,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T19:09:55Z,can be marked override,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189685191,189685191,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T19:10:00Z,can be marked override,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189685205,189685205,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T19:19:34Z,I think the vsizes of the signatures are only estimated?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189687339,189687339,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T19:20:20Z,"I believe this doesn't use the wallet, but the `conf_target` instead?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189687505,189687505,src/rpc/blockchain.cpp
MarcoFalke,2018-05-21T19:20:34Z,I believe the default for conf_target is 6?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189687580,189687580,src/rpc/blockchain.cpp
promag,2018-05-22T17:54:39Z,"Maybe change this to\n```\n    ""scantxoutset \""action\"" ( option )\n""\n```",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189995755,189995755,src/rpc/blockchain.cpp
promag,2018-05-22T17:56:06Z,Remove `\n`.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996239,189996239,src/rpc/blockchain.cpp
promag,2018-05-22T17:56:57Z,Needs 2 spaces between argument name and description.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996553,189996553,src/rpc/blockchain.cpp
promag,2018-05-22T17:57:50Z,Replace `]` with `}`.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996836,189996836,src/rpc/blockchain.cpp
promag,2018-05-22T17:58:06Z,Needs 2 spaces before description.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996929,189996929,src/rpc/blockchain.cpp
promag,2018-05-22T17:58:14Z,Needs 1 space before description.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996965,189996965,src/rpc/blockchain.cpp
promag,2018-05-22T17:58:19Z,Needs 1 space before description.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189996991,189996991,src/rpc/blockchain.cpp
promag,2018-05-22T18:01:42Z,"Yes, agree that `status` should not raise an error when no scan is in progress.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189998059,189998059,src/rpc/blockchain.cpp
promag,2018-05-22T18:03:26Z,How about `assert(!script.empty())`?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r189998593,189998593,src/rpc/blockchain.cpp
promag,2018-05-22T18:23:04Z,"Put these in an object `""rawsweep"": { }`?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r190004892,190004892,src/rpc/blockchain.cpp
jonasschnelli,2018-05-25T08:09:27Z,"Since we access the instance cursor (`CCoinsView()::Cursor()`), wouldn't it then require to access `pcoinsdbview` from within `coins.cpp` which seems not ideal?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r190819366,190819366,src/coins.cpp
jonasschnelli,2018-05-25T08:21:13Z,Another way would be to wait at this point (with a conditional variable) until the scan has aborted. Objections?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r190822306,190822306,src/rpc/blockchain.cpp
achow101,2018-05-27T02:57:50Z,I think we should avoid doing this step for uncompressed pubkeys as such outputs would be unspendable.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r191063217,191063217,src/rpc/blockchain.cpp
achow101,2018-05-27T03:01:25Z,nit: `searchItems` should be `search_items` to match the `.h` file.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r191063259,191063259,src/coins.cpp
achow101,2018-05-27T03:01:59Z,"nit: should have `,...` after this.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r191063262,191063262,src/rpc/blockchain.cpp
achow101,2018-05-27T03:02:59Z,nit: the spacing of this block looks a bit funny. I think the text should be indented more and the braces for the object should be aligned.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r191063268,191063268,src/rpc/blockchain.cpp
promag,2018-05-31T23:02:24Z,"As @Sjors points out, this should be required if `rawsweep` is set?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r192261221,192261221,src/rpc/blockchain.cpp
MarcoFalke,2018-06-13T17:30:23Z,"`std::function` is defined in header `<functional>`, which needs to be included.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195171435,195171435,src/coins.h
promag,2018-06-13T22:29:39Z,Also initialize `count = 0;`?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195255759,195255759,src/coins.cpp
promag,2018-06-13T22:30:52Z,"Nit,\n```cpp\nif (!cursor.GetKey(key) || !cursor.GetValue(coin) return false;\n```\nand reindent below.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195255983,195255983,src/coins.cpp
promag,2018-06-13T22:36:43Z,Should be `const std::atomic<bool>& should_abort`.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195257011,195257011,src/coins.cpp
promag,2018-06-13T22:55:42Z,`|| ShutdownRequested()`?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195260599,195260599,src/coins.cpp
promag,2018-06-13T23:01:55Z,"nit, spaces inside `(` `)`",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195261696,195261696,src/rpc/blockchain.cpp
promag,2018-06-13T23:36:07Z,"```py\nself.restart_node(0, ['-nowallet'])\n```\nand remove next 2 lines.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195267082,195267082,test/functional/rpc_scantxoutset.py
promag,2018-06-13T23:51:06Z,"Could improve coverage:\n```py\n        result = self.nodes[1].scantxoutset(""start"", [ {""pubkey"": {""pubkey"": pubk1}}, {""pubkey"": {""pubkey"": pubk2}}, {""pubkey"": {""pubkey"": pubk3}}], {""rawsweep"" : {""address"": addr_BECH32, ""feerate"": 0.00025000}})\n        decodedsweeptx = self.nodes[1].decoderawtransaction(result['rawsweep_tx'])\n        assert_equal(len(decodedsweeptx['vout']), 1)\n        ass",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195269100,195269100,test/functional/rpc_scantxoutset.py
promag,2018-06-14T00:18:22Z,You could test sign and send the sweep transaction,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195272842,195272842,test/functional/rpc_scantxoutset.py
promag,2018-06-14T00:20:16Z,`RPC_INVALID_PARAMETER` instead?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195273137,195273137,src/rpc/blockchain.cpp
promag,2018-06-14T00:20:44Z,"nit, space after `if`.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195273186,195273186,src/rpc/blockchain.cpp
jonasschnelli,2018-06-14T07:21:39Z,"This would couple it to init.h,.. ideally we would finally extract the shutdown detection into its own space.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195323375,195323375,src/coins.cpp
jonasschnelli,2018-06-14T09:22:48Z,Lets extend the tests later....,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195354911,195354911,test/functional/rpc_scantxoutset.py
laanwj,2018-06-14T15:47:13Z,"Ok, fair enough.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195474501,195474501,src/rpc/blockchain.cpp
luke-jr,2018-06-16T17:41:23Z,s/received by the address/of the UTXO/,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r195908302,195908302,src/rpc/blockchain.cpp
jonasschnelli,2018-06-18T12:48:13Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r196063804,196063804,src/rpc/blockchain.cpp
promag,2018-06-24T19:00:25Z,"nit, could specify symbols instead.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r197649532,197649532,test/functional/rpc_scantxoutset.py
promag,2018-06-24T19:29:19Z,"nit, `} else if (...) {`\n\nThere are a couple of more cases throughout. ",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r197650303,197650303,src/rpc/blockchain.cpp
promag,2018-06-24T19:39:33Z,"Should use `pushKV` instead, `push_back(Pair(...))` occurrences were replaced recently.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r197650602,197650602,src/rpc/blockchain.cpp
promag,2018-06-24T19:41:52Z,Could drop `nIn` and use `tx.vin.back()` instead (like above).,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r197650676,197650676,src/rpc/blockchain.cpp
Empact,2018-07-02T17:04:05Z,nit: `++count`,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199562326,199562326,src/coins.cpp
Empact,2018-07-02T17:06:56Z,"`include <assert.h>`\nnit: whitespace could benefit from clang-format",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199562977,199562977,src/rpc/blockchain.cpp
Empact,2018-07-02T17:08:21Z,~~nit: this is basically an ideal case for a `case` statement. :P~~,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199563287,199563287,src/rpc/blockchain.cpp
Empact,2018-07-02T17:13:25Z,You could consider using `RPCTypeCheckObj` for some of this here and elsewhere. E.g. https://github.com/bitcoin/bitcoin/blob/686e97a0c7358291d628213447cf33e99cde7ce8/src/rpc/rawtransaction.cpp#L786-L791,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199564547,199564547,src/rpc/blockchain.cpp
jimpo,2018-07-02T18:32:04Z,You can't switch on strings in C/C++,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199584524,199584524,src/rpc/blockchain.cpp
Empact,2018-07-02T19:20:14Z,"Ah, thanks.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r199596214,199596214,src/rpc/blockchain.cpp
laanwj,2018-07-04T12:36:09Z,"nit: `} else {`\n(some other instances too)",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200112895,200112895,src/rpc/blockchain.cpp
jonasschnelli,2018-07-04T13:38:29Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200129500,200129500,src/coins.cpp
jonasschnelli,2018-07-04T13:38:37Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200129540,200129540,src/coins.cpp
jonasschnelli,2018-07-04T13:38:54Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200129614,200129614,src/coins.cpp
jonasschnelli,2018-07-04T13:52:43Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200133746,200133746,src/rpc/blockchain.cpp
jonasschnelli,2018-07-04T13:53:11Z,More readable like this IMO,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200133905,200133905,src/rpc/blockchain.cpp
jonasschnelli,2018-07-04T13:54:14Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200134294,200134294,src/rpc/blockchain.cpp
jonasschnelli,2018-07-04T13:55:25Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200134648,200134648,src/rpc/blockchain.cpp
jonasschnelli,2018-07-04T13:55:28Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200134661,200134661,src/coins.cpp
sipa,2018-07-06T03:48:58Z,"In commit ""Add CCoinsView::FindScriptPubKey to search the UTXO set"".\n\nThere is no need for this function to burden the CCoinsView interface I think, as it only uses publicly available data from that class. The implementation can just move to where scantxoutset is defined.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200543393,200543393,src/coins.cpp
sipa,2018-07-06T03:51:11Z,"In commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set"".\n\nThe implementation of ""CCoinsView::FindScriptPubKey"" is being changed significantly in this commit. Can you move the changes to the previous commit that introduces the function?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200543631,200543631,src/coins.cpp
sipa,2018-07-06T03:54:25Z,"I would leave this out as well, as it'll be handled equally by the descriptor based approach. It's a lot of complexity to maintain which will be handled more generically later.\n\nAlso, I don't think it's very useful and add - if you know the pubkey and derivation type you generally also know the address already.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200543957,200543957,src/rpc/blockchain.cpp
sipa,2018-07-06T04:01:23Z,"In commit ""scantxoutset: Add optional raw sweep transaction"".\n\nIs this the best place to implement this? As a separate wallet RPC it could work much more correctly (as it would know the actual scripts involved and be able to give a vsize estimate that's more than a dumb guess), and be more useful too by being combinable with whatever way to find inputs.\n\nI feel this makes the RPC look like",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200544556,200544556,src/rpc/blockchain.cpp
Empact,2018-07-06T04:49:07Z,"Another option is to have a local for the current input, given it's referenced on 2193 above.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200548588,200548588,src/rpc/blockchain.cpp
jonasschnelli,2018-07-08T19:31:34Z,Agree. Will remove it and PR it later as a separate method,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r200850998,200850998,src/rpc/blockchain.cpp
promag,2018-07-11T00:20:29Z,"From https://github.com/bitcoin/bitcoin/pull/12196#issuecomment-393057791\n\n> > tx = scantxoutset(""start"", { ""sweep_to"": address })[""sweep_tx""]\n> > fundrawtransaction(tx, { ""subtractFeeFromOutputs"": [0] })\n>\n>  @promag: would that also work without the wallet? My idea was to make `scantxoutset` work without a wallet.\n\n@sipa not sure if you are suggesting something similar to:\n```\n",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r201534239,201534239,src/rpc/blockchain.cpp
laanwj,2018-07-11T10:00:41Z,"Agree—if we can avoid introducing new methods to the CCoinsView interface, that's preferable, it is good to have it as a minimal interface class.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r201632807,201632807,src/coins.cpp
sipa,2018-07-11T16:05:43Z,"@promag, I just mean scantxoutset + createrawtransaction. Then a separate wallet RPC like ""walletestimatesignedrawtransactionsize"" (shorter names welcome...) can be used to guess the size of the tx ahead of time. ""fundrawtransaction"" already does this estimation internally.\n\n> Would that also work without the wallet?\n\nNo, that's the point. You cannot implement that without knowledge of the scr",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r201751123,201751123,src/rpc/blockchain.cpp
promag,2018-07-12T14:05:16Z,"Commit ""Add FindScriptPubKey() to search the UTXO set""\n\nnit, unrelated change.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202047203,202047203,src/coins.cpp
promag,2018-07-12T14:06:31Z,"Commit ""Add FindScriptPubKey() to search the UTXO set""\n\nnit, `CCoinsViewCursor* cursor`.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202047655,202047655,src/rpc/blockchain.cpp
luke-jr,2018-07-12T14:24:56Z,"This should probably be true|false, not a string.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202054286,202054286,src/rpc/blockchain.cpp
promag,2018-07-12T15:04:47Z,"Commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set""\n\nMissing fix :trollface: ",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202069464,202069464,src/rpc/blockchain.cpp
promag,2018-07-12T15:08:00Z,"Commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set""\n\nThis could be in the block below:\n```cpp\nCTxDestination witdest = WitnessV0KeyHash(key.GetID());\nif (type == OutputScriptType::P2SH_P2WPKH) {\n    CScript witprog = GetScriptForDestination(witdest);\n    return CScriptID(witprog);\n} else {\n    ...\n```",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202070688,202070688,src/rpc/blockchain.cpp
promag,2018-07-12T15:09:46Z,"Commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set""\n\n> Nah. You can also call scantxoutset status\n\nRight.\n\nHowever should be `request.params.size() > 3` (instead of 2)?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202071424,202071424,src/rpc/blockchain.cpp
promag,2018-07-12T15:11:28Z,"Commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set""\n\nnit, add `( )` to `<scanobjects>` because `status` action has no more arguments.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202072038,202072038,src/rpc/blockchain.cpp
promag,2018-07-12T15:13:42Z,"Commit ""Commit ""Blockchain/RPC: Add scantxoutset method to scan UTXO set""\n\nThe response is an object, not an array.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202072868,202072868,src/rpc/blockchain.cpp
sipa,2018-07-12T17:45:21Z,"You should hold cs_main while calling FlushStateToDisk and creating the cursor, or there is no guarantee that the on-disk state is consistent.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202121734,202121734,src/rpc/blockchain.cpp
sipa,2018-07-12T17:45:41Z,This looks unused.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202121869,202121869,src/rpc/blockchain.cpp
promag,2018-07-12T19:50:02Z,Looks like some annotations or lock assertions could be added?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202157824,202157824,src/rpc/blockchain.cpp
jonasschnelli,2018-07-12T20:04:23Z,"Agree with @promag, but unrelated to this PR.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202161517,202161517,src/rpc/blockchain.cpp
promag,2018-07-12T20:15:51Z,"Oh, I wasn't implying that. I'll follow up.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202164658,202164658,src/rpc/blockchain.cpp
promag,2018-07-12T20:19:05Z,"Ops, actually @sipa point is about locking during `FlushStateToDisk()` and `Cursor()`, so the lock must be added here, preferably in this PR IMO.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202165603,202165603,src/rpc/blockchain.cpp
jamesob,2018-07-12T20:47:56Z,"Nit: code for this seems like it's cropping up in a few different places, might be nice to have an abstraction for it.\n```\n $ git grep -C 1 ""/ 65536"" | cat\n\nsrc/index/txindex.cpp-                (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\nsrc/index/txindex.cpp:            int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\nsrc/index/txindex.cpp-\n--\nsrc/txdb.cpp",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202173967,202173967,src/rpc/blockchain.cpp
jamesob,2018-07-12T20:56:52Z,"If scanobjects is required (per doc below), should it be in parens here?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202176470,202176470,src/rpc/blockchain.cpp
jamesob,2018-07-12T20:57:35Z,Also options doesn't seem to exist.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202176661,202176661,src/rpc/blockchain.cpp
jamesob,2018-07-12T21:13:12Z,Can we release `cs_main` after initializing `pcursor`? My impression is that CCoinsViewCursor can be used for read-only ops without holding it.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202181178,202181178,src/rpc/blockchain.cpp
jonasschnelli,2018-07-13T08:57:55Z,Oh. Right. Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202286777,202286777,src/rpc/blockchain.cpp
jonasschnelli,2018-07-13T08:58:19Z,IMO this should be done outside of this PR,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202286897,202286897,src/rpc/blockchain.cpp
luke-jr,2018-07-13T13:48:11Z,`res` is already a boolean...,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202354776,202354776,src/rpc/blockchain.cpp
jonasschnelli,2018-07-13T19:32:42Z,Ouch! Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202451797,202451797,src/rpc/blockchain.cpp
sipa,2018-07-14T02:10:56Z,Nit: use `GetScriptForRawPubKey`.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202503014,202503014,src/rpc/blockchain.cpp
Empact,2018-07-15T13:15:03Z,nit: Would be nice to store this repeated arg to a local,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202542855,202542855,src/rpc/blockchain.cpp
Empact,2018-07-15T13:36:49Z,"You could remove most of the above with:\n```\nRPCTypeCheckObj(scanobject,\n    {\n        {""address"", UniValueType(UniValue::VSTR)},\n        {""pubkey"", UniValueType(UniValue::VOBJ)},\n        {""script"", UniValueType(UniValue::VSTR)},\n    }, true /* fAllowNull */);\n```",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202543477,202543477,src/rpc/blockchain.cpp
Empact,2018-07-15T13:36:51Z,nit: explicit precedence?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202543480,202543480,src/rpc/blockchain.cpp
Empact,2018-07-15T14:09:36Z,"Could you document the ""status"" and ""abort"" results above?\n\nnit: I'd somewhat prefer each of these having their own rpc",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202544306,202544306,src/rpc/blockchain.cpp
Empact,2018-07-15T14:50:19Z,Could throw above and do away with `UNKNOWN`,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545250,202545250,src/rpc/blockchain.cpp
Empact,2018-07-15T14:50:39Z,"nit: maybe make this a unival to avoid translation below?\nnit: why not static?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545259,202545259,src/rpc/blockchain.cpp
Empact,2018-07-15T14:53:15Z,"You can construct `CPubKey` directly from the `ParseHexV` result.\nhttps://github.com/bitcoin/bitcoin/blob/8803c9132a78d8182bd828a29f7051fc7688f934/src/pubkey.h#L103",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545343,202545343,src/rpc/blockchain.cpp
Empact,2018-07-15T14:54:22Z,https://github.com/bitcoin/bitcoin/blob/8803c9132a78d8182bd828a29f7051fc7688f934/src/pubkey.h#L103,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545375,202545375,src/rpc/blockchain.cpp
Empact,2018-07-15T14:59:23Z,"Tests for ""abort"" and ""status""?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545504,202545504,test/functional/rpc_scantxoutset.py
Empact,2018-07-15T15:03:04Z,nit: `for` would localize the `cursor` access,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202545565,202545565,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T19:29:11Z,"I guess your proposed check does not ensure that one of the (either address, pubkey or script must be present, right?",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202551704,202551704,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T19:30:21Z,I think it helps for the readability? Or can you elaborate what you mean exactly?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202551738,202551738,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T19:38:14Z,I don't understand your comment... can you rephrase or elaborate in detail?,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202551937,202551937,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T19:56:27Z,Both would probably require additional code for adding time delays or temporary creation of a large utxo set.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202552486,202552486,test/functional/rpc_scantxoutset.py
jonasschnelli,2018-07-15T20:18:59Z,Agree. Made static.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202553294,202553294,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T20:19:43Z,Indeed. Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202553321,202553321,src/rpc/blockchain.cpp
jonasschnelli,2018-07-15T20:19:48Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202553323,202553323,src/rpc/blockchain.cpp
Empact,2018-07-15T21:07:20Z,"If you `throw` on `UNKNOWN` within `GetOutputScriptTypeFromString`, then there is no other use of `UNKNOWN` as an `OutputScriptType`.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202554584,202554584,src/rpc/blockchain.cpp
Empact,2018-07-15T21:08:40Z,Suggesting to group the sum in parens so that it's more clear that there is only the one top-level condition.,https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202554618,202554618,src/rpc/blockchain.cpp
Empact,2018-07-15T21:09:21Z,"Right, it just handles the type testing.",https://github.com/bitcoin/bitcoin/pull/12196#discussion_r202554641,202554641,src/rpc/blockchain.cpp
