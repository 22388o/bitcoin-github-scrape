[
  {
    "sha": "a28b907f8a1e398eb458088a415d002ddbeee491",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjhiOTA3ZjhhMWUzOThlYjQ1ODA4OGE0MTVkMDAyZGRiZWVlNDkx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T18:42:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T18:43:33Z"
      },
      "message": "[wallet] [rpc] Remove duplicate entries in rpcwallet.cpp's CRPCCommand table\n\nRemove duplicate listreceivedby{account,label} methods.",
      "tree": {
        "sha": "6dfd450fed5992060211dc86e1b4c1c0b26f721d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6dfd450fed5992060211dc86e1b4c1c0b26f721d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a28b907f8a1e398eb458088a415d002ddbeee491",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28b907f8a1e398eb458088a415d002ddbeee491",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a28b907f8a1e398eb458088a415d002ddbeee491",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28b907f8a1e398eb458088a415d002ddbeee491/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1fdfc1a8c072f798305f21d5e69207c9e1bed89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fdfc1a8c072f798305f21d5e69207c9e1bed89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1fdfc1a8c072f798305f21d5e69207c9e1bed89"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b81e6c12130e8d0fbdef553609b028e10cde3e16",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a28b907f8a1e398eb458088a415d002ddbeee491/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a28b907f8a1e398eb458088a415d002ddbeee491/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a28b907f8a1e398eb458088a415d002ddbeee491",
        "patch": "@@ -3996,8 +3996,6 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n-    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },"
      }
    ]
  },
  {
    "sha": "4e671f0353beaa3759f2069569f05239c0be89cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTY3MWYwMzUzYmVhYTM3NTlmMjA2OTU2OWYwNTIzOWMwYmU4OWNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-11T18:24:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T18:43:33Z"
      },
      "message": "[tests] Rename rpc_listtransactions.py to wallet_listtransactions.py\n\nlisttransactions is a wallet RPC. The test name should indicate that\nthis is a wallet test.",
      "tree": {
        "sha": "3cdd5dd2de6eb482a876d6a82130c8add3928791",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cdd5dd2de6eb482a876d6a82130c8add3928791"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e671f0353beaa3759f2069569f05239c0be89cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e671f0353beaa3759f2069569f05239c0be89cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e671f0353beaa3759f2069569f05239c0be89cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e671f0353beaa3759f2069569f05239c0be89cf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a28b907f8a1e398eb458088a415d002ddbeee491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28b907f8a1e398eb458088a415d002ddbeee491",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a28b907f8a1e398eb458088a415d002ddbeee491"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c93f7592e9295963e3145b5f53a22fd3e039d74f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e671f0353beaa3759f2069569f05239c0be89cf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e671f0353beaa3759f2069569f05239c0be89cf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=4e671f0353beaa3759f2069569f05239c0be89cf",
        "patch": "@@ -70,7 +70,7 @@\n     'wallet_labels.py',\n     'p2p_segwit.py',\n     'wallet_dump.py',\n-    'rpc_listtransactions.py',\n+    'wallet_listtransactions.py',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_zapwallettxes.py',"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e671f0353beaa3759f2069569f05239c0be89cf/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e671f0353beaa3759f2069569f05239c0be89cf/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=4e671f0353beaa3759f2069569f05239c0be89cf",
        "previous_filename": "test/functional/rpc_listtransactions.py"
      }
    ]
  },
  {
    "sha": "3db1ba01c783c1e35782405750c308be2b6171e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGIxYmEwMWM3ODNjMWUzNTc4MjQwNTc1MGMzMDhiZTJiNjE3MWUz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T17:53:35Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T18:43:34Z"
      },
      "message": "[tests] Set -deprecatedrpc=accounts in tests\n\nFuture commits will deprecate the accounts RPC methods, arguments and\nreturn objects. Set the -deprecatedrpc=accounts switch now so tests\ndon't break in intermediate commits.",
      "tree": {
        "sha": "c997b62d8eabad3e51a523ddbbbe7425915487df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c997b62d8eabad3e51a523ddbbbe7425915487df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3db1ba01c783c1e35782405750c308be2b6171e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db1ba01c783c1e35782405750c308be2b6171e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3db1ba01c783c1e35782405750c308be2b6171e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db1ba01c783c1e35782405750c308be2b6171e3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e671f0353beaa3759f2069569f05239c0be89cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e671f0353beaa3759f2069569f05239c0be89cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e671f0353beaa3759f2069569f05239c0be89cf"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "bfe90957a7243d1b9f72014050a23603e9609de7",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -10,9 +10,10 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 4\n \n     def setup_network(self):\n-        self.add_nodes(4)\n+        self.add_nodes(4, self.extra_args)\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)\n@@ -376,9 +377,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n-            self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n-            self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(0, [m, \"-deprecatedrpc=accounts\", \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(1, [m, \"-deprecatedrpc=accounts\", \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(2, [m, \"-deprecatedrpc=accounts\", \"-limitancestorcount=\"+str(chainlimit)])\n             if m == '-reindex':\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 wait_until(lambda: [block_count] * 3 == [self.nodes[i].getblockcount() for i in range(3)])\n@@ -426,7 +427,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-deprecatedrpc=accounts\", \"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "6775d8b46da395ebad91118d1cfae768137f662d",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -119,7 +119,7 @@ def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n-        extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n+        extra_args = [[\"-addresstype=legacy\", '-deprecatedrpc=accounts'] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]"
      },
      {
        "sha": "283acc8035af90384887554b263d4c583cdf4fa9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -10,6 +10,7 @@ class ImportPrunedFundsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 2\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")"
      },
      {
        "sha": "ab1493dd04f1f6b5ed85b43eb427df9f0a964750",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -25,7 +25,7 @@ class KeypoolRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [[], ['-keypool=100', '-keypoolmin=20']]\n+        self.extra_args = [['-deprecatedrpc=accounts'], ['-deprecatedrpc=accounts', '-keypool=100', '-keypoolmin=20']]\n \n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")"
      },
      {
        "sha": "0def2f16437149f4ace7623870b09c6fa3206fa7",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -21,7 +21,7 @@ class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[]]\n+        self.extra_args = [['-deprecatedrpc=accounts']]\n \n     def run_test(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "aba5d642bc60f540c3216eed3eb956c6352176ff",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -14,6 +14,7 @@\n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 2\n \n     def run_test(self):\n         # Generate block to get out of IBD"
      },
      {
        "sha": "930bfcd7b0f609503d4a88cec668bdbcaef920dc",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -11,6 +11,7 @@ class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 4\n \n     def run_test(self):\n         self.nodes[2].generate(101)"
      },
      {
        "sha": "5466bbf18b2c8b5eb280cf58d6e5462ff0ae81f0",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -18,6 +18,7 @@ def txFromHex(hexstring):\n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "3057d20d64d598a3e14754c920013aff8e640c1f",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -10,6 +10,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 4\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "53ba929b5d2fe914bad70bca63f865d213b7ae27",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3db1ba01c783c1e35782405750c308be2b6171e3/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=3db1ba01c783c1e35782405750c308be2b6171e3",
        "patch": "@@ -10,6 +10,7 @@\n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.extra_args = [['-deprecatedrpc=accounts']] * 4\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      }
    ]
  },
  {
    "sha": "3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTc2YWIxMjYxMjFmOWJmYjRkNGQ2MTk1Y2JiZTdiYTMwNjE5Zjc3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T17:57:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T16:42:33Z"
      },
      "message": "[wallet] [rpc] Deprecate account RPC methods\n\nAll account RPC methods are now deprecated and can only be called if\nbitcoind has been started with the -deprecatedrpc=accounts switch.\n\nAffected RPC methods are:\n\n- getaccount\n- getaccountaddress\n- getaddressesbyaccount\n- getreceivedbyaccount\n- listaccouts\n- listreceivedbyaccount\n- move\n- setaccount",
      "tree": {
        "sha": "61c623ae859caba4b9cd21452d93d773da9af88c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c623ae859caba4b9cd21452d93d773da9af88c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3576ab126121f9bfb4d4d6195cbbe7ba30619f77/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3db1ba01c783c1e35782405750c308be2b6171e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3db1ba01c783c1e35782405750c308be2b6171e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3db1ba01c783c1e35782405750c308be2b6171e3"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 140,
      "deletions": 2
    },
    "files": [
      {
        "sha": "37086f9b6016e49f5bbbe14f2acc0040a30628ea",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3576ab126121f9bfb4d4d6195cbbe7ba30619f77/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3576ab126121f9bfb4d4d6195cbbe7ba30619f77/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
        "patch": "@@ -206,6 +206,13 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"getaccountaddress\") {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"getaccountaddress (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaccountaddress is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n@@ -306,6 +313,13 @@ UniValue setlabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"setaccount\") {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"setaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"setaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() != 2)\n         throw std::runtime_error(\n             \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n@@ -353,6 +367,13 @@ UniValue getaccount(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"getaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getaccount \\\"address\\\"\\n\"\n@@ -389,6 +410,13 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"getaddressbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getaddressesbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n@@ -744,6 +772,13 @@ UniValue getreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"getreceivedbyaccount\") {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"getreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"getreceivedbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getreceivedbylabel \\\"label\\\" ( minconf )\\n\"\n@@ -913,6 +948,13 @@ UniValue movecmd(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"move (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"move is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw std::runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n@@ -1609,6 +1651,13 @@ UniValue listreceivedbylabel(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\") && request.strMethod == \"listreceivedbyaccount\") {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"listreceivedbyaccount (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"listreceivedbyaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n             \"listreceivedbylabel ( minconf include_empty include_watchonly)\\n\"\n@@ -1908,6 +1957,13 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        if (request.fHelp) {\n+            throw std::runtime_error(\"listaccounts (Deprecated, will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts)\");\n+        }\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"listaccounts is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts.\");\n+    }\n+\n     if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"listaccounts ( minconf include_watchonly)\\n\""
      },
      {
        "sha": "7b7c5965064c2bc6f29c84e782955fde24a2282b",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 84,
        "deletions": 2,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3576ab126121f9bfb4d4d6195cbbe7ba30619f77/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3576ab126121f9bfb4d4d6195cbbe7ba30619f77/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
        "patch": "@@ -4,12 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -20,11 +21,92 @@ def run_test(self):\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n \n         self.log.info(\"Test validateaddress deprecation\")\n-        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\" # This is just some random address to pass as a parameter to validateaddress\n+        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\"  # This is just some random address to pass as a parameter to validateaddress\n         dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n         assert \"ismine\" not in dep_validate_address\n         not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n         assert \"ismine\" in not_dep_val\n \n+        self.log.info(\"Test accounts deprecation\")\n+        # The following account RPC methods are deprecated:\n+        # - getaccount\n+        # - getaccountaddress\n+        # - getaddressesbyaccount\n+        # - getreceivedbyaccount\n+        # - listaccouts\n+        # - listreceivedbyaccount\n+        # - move\n+        # - setaccount\n+        #\n+        # The following 'label' RPC methods are usable both with and without the\n+        # -deprecatedrpc=accounts switch enabled.\n+        # - getlabeladdress\n+        # - getaddressesbylabel\n+        # - getreceivedbylabel\n+        # - listlabels\n+        # - listreceivedbylabel\n+        # - setlabel\n+        #\n+        address0 = self.nodes[0].getnewaddress()\n+        self.nodes[0].generatetoaddress(101, address0)\n+        address1 = self.nodes[1].getnewaddress()\n+        self.nodes[1].generatetoaddress(101, address1)\n+\n+        self.log.info(\"- getaccount\")\n+        assert_raises_rpc_error(-32, \"getaccount is deprecated\", self.nodes[0].getaccount, address0)\n+        self.nodes[1].getaccount(address1)\n+\n+        self.log.info(\"- setaccount\")\n+        assert_raises_rpc_error(-32, \"setaccount is deprecated\", self.nodes[0].setaccount, address0, \"label0\")\n+        self.nodes[1].setaccount(address1, \"label1\")\n+\n+        self.log.info(\"- setlabel\")\n+        self.nodes[0].setlabel(address0, \"label0\")\n+        self.nodes[1].setlabel(address1, \"label1\")\n+\n+        self.log.info(\"- getaccountaddress\")\n+        assert_raises_rpc_error(-32, \"getaccountaddress is deprecated\", self.nodes[0].getaccountaddress, \"label0\")\n+        self.nodes[1].getaccountaddress(\"label1\")\n+\n+        self.log.info(\"- getlabeladdress\")\n+        self.nodes[0].getlabeladdress(\"label0\")\n+        self.nodes[1].getlabeladdress(\"label1\")\n+\n+        self.log.info(\"- getaddressesbyaccount\")\n+        assert_raises_rpc_error(-32, \"getaddressesbyaccount is deprecated\", self.nodes[0].getaddressesbyaccount, \"label0\")\n+        self.nodes[1].getaddressesbyaccount(\"label1\")\n+\n+        self.log.info(\"- getaddressesbylabel\")\n+        self.nodes[0].getaddressesbylabel(\"label0\")\n+        self.nodes[1].getaddressesbylabel(\"label1\")\n+\n+        self.log.info(\"- getreceivedbyaccount\")\n+        assert_raises_rpc_error(-32, \"getreceivedbyaccount is deprecated\", self.nodes[0].getreceivedbyaccount, \"label0\")\n+        self.nodes[1].getreceivedbyaccount(\"label1\")\n+\n+        self.log.info(\"- getreceivedbylabel\")\n+        self.nodes[0].getreceivedbylabel(\"label0\")\n+        self.nodes[1].getreceivedbylabel(\"label1\")\n+\n+        self.log.info(\"- listaccounts\")\n+        assert_raises_rpc_error(-32, \"listaccounts is deprecated\", self.nodes[0].listaccounts)\n+        self.nodes[1].listaccounts()\n+\n+        self.log.info(\"- listlabels\")\n+        self.nodes[0].listlabels()\n+        self.nodes[1].listlabels()\n+\n+        self.log.info(\"- listreceivedbyaccount\")\n+        assert_raises_rpc_error(-32, \"listreceivedbyaccount is deprecated\", self.nodes[0].listreceivedbyaccount)\n+        self.nodes[1].listreceivedbyaccount()\n+\n+        self.log.info(\"- listreceivedbylabel\")\n+        self.nodes[0].listreceivedbylabel()\n+        self.nodes[1].listreceivedbylabel()\n+\n+        self.log.info(\"- move\")\n+        assert_raises_rpc_error(-32, \"move is deprecated\", self.nodes[0].move, \"label0\", \"label0b\", 10)\n+        self.nodes[1].move(\"label1\", \"label1b\", 10)\n+\n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDllMDVkY2QxNjNiOGRkYjdmNGIzNTUwZGI2YjlhYjgzM2IyYzA0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-16T18:01:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T16:43:26Z"
      },
      "message": "[wallet] [rpc] Deprecate wallet 'account' API\n\nThis commit finalizes the deprecation of the wallet 'accounts' API by\nremoving all account arguments and return values.\n\nRPC behaviour is slightly different if the 'accounts' or 'labels' API is\nbeing used. Those behaviour changes are fully documented in the RPC help\ntext.",
      "tree": {
        "sha": "4186715d83493bffa20a7aba9433205e899df5dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4186715d83493bffa20a7aba9433205e899df5dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3576ab126121f9bfb4d4d6195cbbe7ba30619f77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3576ab126121f9bfb4d4d6195cbbe7ba30619f77"
      }
    ],
    "stats": {
      "total": 220,
      "additions": 164,
      "deletions": 56
    },
    "files": [
      {
        "sha": "c6b1034e4542e8e67bb2d9e9de48c66b44d5ee97",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 164,
        "deletions": 56,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
        "patch": "@@ -234,7 +234,7 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n-    bool force = request.strMethod == \"getaccountaddress\" ? true : false;\n+    bool force = request.strMethod == \"getaccountaddress\";\n     if (!request.params[1].isNull()) {\n         force = request.params[1].get_bool();\n     }\n@@ -844,7 +844,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || (request.params.size() > 3 && IsDeprecatedRPCEnabled(\"accounts\")) || (request.params.size() != 0 && !IsDeprecatedRPCEnabled(\"accounts\")))\n         throw std::runtime_error(\n             \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n@@ -854,7 +854,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n             \"The server total may be different to the balance in the default \\\"\\\" account.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"         (string, optional) DEPRECATED. The account string may be given as a\\n\"\n+            \"1. \\\"account\\\"         (string, optional) DEPRECATED. This argument will be removed in V0.18. \\n\"\n+            \"                     To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. The account string may be given as a\\n\"\n             \"                     specific account name to find the balance associated with wallet keys in\\n\"\n             \"                     a named account, or as the empty string (\\\"\\\") to find the balance\\n\"\n             \"                     associated with wallet keys not in any named account, or as \\\"*\\\" to find\\n\"\n@@ -866,8 +867,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"                     balances. In general, account balance calculation is not considered\\n\"\n             \"                     reliable and has resulted in confusing outcomes, so it is recommended to\\n\"\n             \"                     avoid passing this argument.\\n\"\n-            \"2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n-            \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n+            \"2. minconf           (numeric, optional, default=1) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Only include transactions confirmed at least this many times.\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) DEPRECATED. Only valid when an account is specified. This argument will be removed in V0.18. To use this deprecated argument, start bitcoind with -deprecatedrpc=accounts. Also include balance in watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -887,34 +888,38 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    const UniValue& account_value = request.params[0];\n-    const UniValue& minconf = request.params[1];\n-    const UniValue& include_watchonly = request.params[2];\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        const UniValue& account_value = request.params[0];\n+        const UniValue& minconf = request.params[1];\n+        const UniValue& include_watchonly = request.params[2];\n \n-    if (account_value.isNull()) {\n-        if (!minconf.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                \"getbalance minconf option is only currently supported if an account is specified\");\n-        }\n-        if (!include_watchonly.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER,\n-                \"getbalance include_watchonly option is only currently supported if an account is specified\");\n+        if (account_value.isNull()) {\n+            if (!minconf.isNull()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                    \"getbalance minconf option is only currently supported if an account is specified\");\n+            }\n+            if (!include_watchonly.isNull()) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                    \"getbalance include_watchonly option is only currently supported if an account is specified\");\n+            }\n+            return ValueFromAmount(pwallet->GetBalance());\n         }\n-        return ValueFromAmount(pwallet->GetBalance());\n-    }\n \n-    const std::string& account_param = account_value.get_str();\n-    const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n+        const std::string& account_param = account_value.get_str();\n+        const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n \n-    int nMinDepth = 1;\n-    if (!minconf.isNull())\n-        nMinDepth = minconf.get_int();\n-    isminefilter filter = ISMINE_SPENDABLE;\n-    if(!include_watchonly.isNull())\n-        if(include_watchonly.get_bool())\n-            filter = filter | ISMINE_WATCH_ONLY;\n+        int nMinDepth = 1;\n+        if (!minconf.isNull())\n+            nMinDepth = minconf.get_int();\n+        isminefilter filter = ISMINE_SPENDABLE;\n+        if(!include_watchonly.isNull())\n+            if(include_watchonly.get_bool())\n+                filter = filter | ISMINE_WATCH_ONLY;\n+\n+        return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n+    }\n \n-    return ValueFromAmount(pwallet->GetLegacyBalance(filter, nMinDepth, account));\n+    return ValueFromAmount(pwallet->GetBalance());\n }\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -1081,9 +1086,50 @@ UniValue sendmany(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n-        throw std::runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+    std::string help_text;\n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        help_text = \"sendmany \\\"\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+            \"\\nSend multiple times. Amounts are double-precision floating point numbers.\\n\"\n+            \"Note that the \\\"fromaccount\\\" argument has been removed in V0.17. To use this RPC with a \\\"fromaccount\\\" argument, restart\\n\"\n+            \"bitcoind with -deprecatedrpc=accounts\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"dummy\\\"               (string, required) Must be set to \\\"\\\" for backwards compatibility.\\n\"\n+            \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n+            \"    {\\n\"\n+            \"      \\\"address\\\":amount   (numeric or string) The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\\n\"\n+            \"      ,...\\n\"\n+            \"    }\\n\"\n+            \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n+            \"4. \\\"comment\\\"             (string, optional) A comment\\n\"\n+            \"5. subtractfeefrom         (array, optional) A json array with addresses.\\n\"\n+            \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n+            \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+            \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n+            \"    [\\n\"\n+            \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"6. replaceable            (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees via BIP 125\\n\"\n+            \"7. conf_target            (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"8. \\\"estimate_mode\\\"      (string, optional, default=UNSET) The fee estimate mode, must be one of:\\n\"\n+            \"       \\\"UNSET\\\"\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n+             \"\\nResult:\\n\"\n+            \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+            \"                                    the number of addresses.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nSend two amounts to two different addresses:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n+    } else {\n+        help_text = \"sendmany \\\"\\\" \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] replaceable conf_target \\\"estimate_mode\\\")\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -1120,8 +1166,10 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n             + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\")\n-        );\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}, 6, \\\"testing\\\"\");\n+    }\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8) throw std::runtime_error(help_text);\n \n     ObserveSafeMode();\n \n@@ -1135,6 +1183,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n+    if (!IsDeprecatedRPCEnabled(\"accounts\") && !request.params[0].get_str().empty()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n+    }\n     std::string strAccount = LabelFromValue(request.params[0]);\n     UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n@@ -1735,7 +1786,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.pushKV(\"account\", strSentAccount);\n+            if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n             entry.pushKV(\"category\", \"send\");\n             entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n@@ -1766,7 +1817,7 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n                     entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.pushKV(\"account\", account);\n+                if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n@@ -1805,7 +1856,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n         entry.pushKV(\"category\", \"move\");\n         entry.pushKV(\"time\", acentry.nTime);\n         entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n-        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        if (IsDeprecatedRPCEnabled(\"accounts\")) entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n         entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n@@ -1818,19 +1869,64 @@ UniValue listtransactions(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n+    std::string help_text {};\n+    if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n+        help_text = \"listtransactions (dummy count skip include_watchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n+            \"Note that the \\\"account\\\" argument and \\\"otheraccount\\\" return value have been removed in V0.17. To use this RPC with an \\\"account\\\" argument, restart\\n\"\n+            \"bitcoind with -deprecatedrpc=accounts\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n+            \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. \\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+            \"                                        for the 'receive' category,\\n\"\n+            \"    \\\"label\\\": \\\"label\\\",       (string) A comment for the address/transaction, if any\\n\"\n+            \"    \\\"vout\\\": n,                (numeric) the vout value\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+            \"                                         'send' category of transactions.\\n\"\n+            \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Negative confirmations indicate the\\n\"\n+            \"                                         transaction conflicts with the block chain\\n\"\n+            \"    \\\"trusted\\\": xxx,           (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\\n\"\n+            \"    \\\"blockhash\\\": \\\"hashvalue\\\", (string) The block hash containing the transaction.\\n\"\n+            \"    \\\"blockindex\\\": n,          (numeric) The index of the transaction in the block that includes it.\\n\"\n+            \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n+            \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id.\\n\"\n+            \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+            \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+            \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n+            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\"\n+            \"    \\\"abandoned\\\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+            \"                                         'send' category of transactions.\\n\"\n+            \"  }\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            \"\\nList the most recent 10 transactions in the systems\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\") +\n+            \"\\nList transactions 100 to 120\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\");\n+    } else {\n+        help_text = \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n+            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"account\\\"    (string, optional) DEPRECATED. This argument will be removed in V0.18. The account name. Should be \\\"*\\\".\\n\"\n+            \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n+            \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in V0.18. The account name associated with the transaction. \\n\"\n             \"                                                It will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for \\n\"\n             \"                                                move transactions (category = move).\\n\"\n@@ -1859,7 +1955,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n-            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) DEPRECATED. For the 'move' category of transactions, the account the funds came \\n\"\n+            \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) DEPRECATED. This field will be removed in V0.18. For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n             \"                                          negative amounts).\\n\"\n             \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n@@ -1875,8 +1971,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             \"\\nList transactions 100 to 120\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n-        );\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\");\n+    }\n+    if (request.fHelp || request.params.size() > 4) throw std::runtime_error(help_text);\n \n     ObserveSafeMode();\n \n@@ -1885,8 +1982,12 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     pwallet->BlockUntilSyncedToCurrentChain();\n \n     std::string strAccount = \"*\";\n-    if (!request.params[0].isNull())\n+    if (!request.params[0].isNull()) {\n         strAccount = request.params[0].get_str();\n+        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount != \"*\") {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n+        }\n+    }\n     int nCount = 10;\n     if (!request.params[1].isNull())\n         nCount = request.params[1].get_int();\n@@ -1916,9 +2017,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             CWalletTx *const pwtx = (*it).second.first;\n             if (pwtx != nullptr)\n                 ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n-            CAccountingEntry *const pacentry = (*it).second.second;\n-            if (pacentry != nullptr)\n-                AcentryToJSON(*pacentry, strAccount, ret);\n+            if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+                CAccountingEntry *const pacentry = (*it).second.second;\n+                if (pacentry != nullptr) AcentryToJSON(*pacentry, strAccount, ret);\n+            }\n \n             if ((int)ret.size() >= (nCount+nFrom)) break;\n         }\n@@ -2067,7 +2169,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n-            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n+            \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n             \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n@@ -2216,7 +2318,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n-            \"      \\\"account\\\" : \\\"accountname\\\",      (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n+            \"      \\\"account\\\" : \\\"accountname\\\",      (string) DEPRECATED. This field will be removed in a V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"address\\\",          (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n             \"      \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -3004,7 +3106,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"label\\\" : \\\"label\\\",        (string) The associated label, or \\\"\\\" for the default label\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. Backwards compatible alias for label.\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n             \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n@@ -3109,7 +3211,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n             if (pwallet->mapAddressBook.count(address)) {\n                 entry.pushKV(\"label\", pwallet->mapAddressBook[address].name);\n-                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n+                if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+                    entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n+                }\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n@@ -3837,7 +3941,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n             \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"         (string) The label associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. This field will be removed in V0.18. To see this deprecated field, start bitcoind with -deprecatedrpc=accounts. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n@@ -3877,7 +3982,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n     if (pwallet->mapAddressBook.count(dest)) {\n-        ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+        ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n+        if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+        }\n     }\n     const CKeyMetadata* meta = nullptr;\n     CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n@@ -4054,12 +4162,12 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },"
      }
    ]
  },
  {
    "sha": "72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmM5NTc1ZjdiNzkzZTNjNzdiZDJkNjMxZWY3MzQ1YTRjMzFjYjBk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T18:13:00Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T18:13:00Z"
      },
      "message": "[wallet] [tests] Add tests for accounts/labels APIs",
      "tree": {
        "sha": "5cb4b3595d67b5cc7c5aac36402726ada58c272c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cb4b3595d67b5cc7c5aac36402726ada58c272c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/109e05dcd163b8ddb7f4b3550db6b9ab833b2c04"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 40,
      "deletions": 17
    },
    "files": [
      {
        "sha": "705dd8985ecf03f1d2d84633f33b0c1f7241ae21",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 40,
        "deletions": 17,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
        "patch": "@@ -6,25 +6,38 @@\n \n RPCs tested are:\n     - getlabeladdress\n-    - getaddressesbyaccount\n+    - getaddressesbyaccount/getaddressesbylabel\n     - listaddressgroupings\n     - setlabel\n     - sendfrom (with account arguments)\n     - move (with account arguments)\n+\n+Run the test twice - once using the accounts API and once using the labels API.\n+The accounts API test can be removed in V0.18.\n \"\"\"\n from collections import defaultdict\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [['-deprecatedrpc=accounts']]\n+        self.num_nodes = 2\n+        self.extra_args = [['-deprecatedrpc=accounts'], []]\n+\n+    def setup_network(self):\n+        \"\"\"Don't connect nodes.\"\"\"\n+        self.setup_nodes()\n \n     def run_test(self):\n-        node = self.nodes[0]\n+        \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n+        self.log.info(\"Test accounts API\")\n+        self._run_subtest(True, self.nodes[0])\n+        self.log.info(\"Test labels API\")\n+        self._run_subtest(False, self.nodes[1])\n+\n+    def _run_subtest(self, accounts_api, node):\n         # Check that there's no UTXO on any of the nodes\n         assert_equal(len(node.listunspent()), 0)\n \n@@ -77,7 +90,7 @@ def run_test(self):\n \n         # Create labels and make sure subsequent label API calls\n         # recognize the label/address associations.\n-        labels = [Label(name) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n+        labels = [Label(name, accounts_api) for name in (\"a\", \"b\", \"c\", \"d\", \"e\")]\n         for label in labels:\n             label.add_receive_address(node.getlabeladdress(label=label.name, force=True))\n             label.verify(node)\n@@ -101,29 +114,34 @@ def run_test(self):\n \n         # Check that sendfrom label reduces listaccounts balances.\n         for i, label in enumerate(labels):\n-            to_label = labels[(i+1) % len(labels)]\n+            to_label = labels[(i + 1) % len(labels)]\n             node.sendfrom(label.name, to_label.receive_address, amount_to_send)\n         node.generate(1)\n         for label in labels:\n             label.add_receive_address(node.getlabeladdress(label.name))\n             label.verify(node)\n             assert_equal(node.getreceivedbylabel(label.name), 2)\n-            node.move(label.name, \"\", node.getbalance(label.name))\n+            if accounts_api:\n+                node.move(label.name, \"\", node.getbalance(label.name))\n             label.verify(node)\n         node.generate(101)\n         expected_account_balances = {\"\": 5200}\n         for label in labels:\n             expected_account_balances[label.name] = 0\n-        assert_equal(node.listaccounts(), expected_account_balances)\n-        assert_equal(node.getbalance(\"\"), 5200)\n+        if accounts_api:\n+            assert_equal(node.listaccounts(), expected_account_balances)\n+            assert_equal(node.getbalance(\"\"), 5200)\n \n         # Check that setlabel can assign a label to a new unused address.\n         for label in labels:\n             address = node.getlabeladdress(label=\"\", force=True)\n             node.setlabel(address, label.name)\n             label.add_address(address)\n             label.verify(node)\n-            assert(address not in node.getaddressesbyaccount(\"\"))\n+            if accounts_api:\n+                assert(address not in node.getaddressesbyaccount(\"\"))\n+            else:\n+                assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n \n         # Check that addmultisigaddress can assign labels.\n         for label in labels:\n@@ -136,8 +154,9 @@ def run_test(self):\n             label.verify(node)\n             node.sendfrom(\"\", multisig_address, 50)\n         node.generate(101)\n-        for label in labels:\n-            assert_equal(node.getbalance(label.name), 50)\n+        if accounts_api:\n+            for label in labels:\n+                assert_equal(node.getbalance(label.name), 50)\n \n         # Check that setlabel can change the label of an address from a\n         # different label.\n@@ -156,9 +175,10 @@ def run_test(self):\n         change_label(node, labels[2].receive_address, labels[2], labels[2])\n \n class Label:\n-    def __init__(self, name):\n+    def __init__(self, name, accounts_api):\n         # Label name\n         self.name = name\n+        self.accounts_api = accounts_api\n         # Current receiving address associated with this label.\n         self.receive_address = None\n         # List of all addresses assigned with this label\n@@ -184,13 +204,16 @@ def verify(self, node):\n                 node.getaddressinfo(address)['labels'][0],\n                 {\"name\": self.name,\n                  \"purpose\": self.purpose[address]})\n-            assert_equal(node.getaccount(address), self.name)\n+            if self.accounts_api:\n+                assert_equal(node.getaccount(address), self.name)\n+            else:\n+                assert_equal(node.getaddressinfo(address)['label'], self.name)\n \n         assert_equal(\n             node.getaddressesbylabel(self.name),\n             {address: {\"purpose\": self.purpose[address]} for address in self.addresses})\n-        assert_equal(\n-            set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n+        if self.accounts_api:\n+            assert_equal(set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n \n \n def change_label(node, address, old_label, new_label):"
      }
    ]
  },
  {
    "sha": "cead28bbecf032b49c01ca3ae4f47aa2536cbc55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWFkMjhiYmVjZjAzMmI0OWMwMWNhM2FlNGY0N2FhMjUzNmNiYzU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T18:20:28Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-04-17T18:20:28Z"
      },
      "message": "[docs] Add release notes for deprecated 'account' API",
      "tree": {
        "sha": "5452c6e64eee86f5c2e11f3852458d5ce91939bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5452c6e64eee86f5c2e11f3852458d5ce91939bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cead28bbecf032b49c01ca3ae4f47aa2536cbc55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cead28bbecf032b49c01ca3ae4f47aa2536cbc55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cead28bbecf032b49c01ca3ae4f47aa2536cbc55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cead28bbecf032b49c01ca3ae4f47aa2536cbc55/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72c9575f7b793e3c77bd2d631ef7345a4c31cb0d"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8105eca5c0894a7a73ad2ce7e6c20b8d7f5a0c63",
        "filename": "doc/release-notes-pr12892.md",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cead28bbecf032b49c01ca3ae4f47aa2536cbc55/doc/release-notes-pr12892.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cead28bbecf032b49c01ca3ae4f47aa2536cbc55/doc/release-notes-pr12892.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12892.md?ref=cead28bbecf032b49c01ca3ae4f47aa2536cbc55",
        "patch": "@@ -1,8 +1,10 @@\n-'label' API for wallet\n-----------------------\n+'label' and 'account' APIs for wallet\n+-------------------------------------\n \n A new 'label' API has been introduced for the wallet. This is intended as a\n-replacement for the deprecated 'account' API.\n+replacement for the deprecated 'account' API. The 'account' can continue to\n+be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n+argument, and will be fully removed in V0.18.\n \n The label RPC methods mirror the account functionality, with the following functional differences:\n \n@@ -27,6 +29,9 @@ Here are the changes to RPC methods:\n \n | Changed Method         | Notes   |\n | :--------------------- | :------ |\n-| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. |\n-| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. |\n-| `listunspent`          | Returns new `label` fields, along with `account` fields for backward compatibility. |\n+| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n+| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n+| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n+| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n+| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n+| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |"
      }
    ]
  }
]