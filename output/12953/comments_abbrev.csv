jnewbery,2018-04-11T19:08:58Z,"This is @achow101's #11497 rebased and reworked. Notable differences:\n\n- I've moved the RPC method deprecation up into the `CRPCTable::execute()` function. That's perhaps a little bit messy (rpc/server.cpp ideally wouldn't have knowledge of individual Bitcoin RPCs), but it saves a lot of code duplication and will be removed in V0.18, so I decided it was acceptable to have it there.\n- Some me",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380563113,380563113,
promag,2018-04-11T20:20:56Z,"Concept ACK, will review.",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380583089,380583089,
kallewoof,2018-04-12T01:01:44Z,"Review hint: recommend append [?w=1](https://github.com/bitcoin/bitcoin/pull/12953/files?w=1) to end, to avoid having to review whitespace changes. Edit: I noticed you can't actually put review comments when you do, so limited use. :/",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380641537,380641537,
laanwj,2018-04-12T03:44:18Z,(Obvious) concept ACK,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380668867,380668867,
jnewbery,2018-04-12T13:53:44Z,"> Since we're splitting the function anyway, why have the dummy at all?\n\nI mentioned this briefly in the PR text:\n\n> I've avoided the argument repositioning that achow101 used, since that breaks the way rpc server fills in positional arguments from named arguments.\n\n(@achow101's argument repositioning code is here: https://github.com/bitcoin/bitcoin/pull/11497/files#diff-df7d84ff2f53fc",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380813038,380813038,
jnewbery,2018-04-12T14:10:05Z,"Thanks for the review @kallewoof and @promag! Your comments are addressed in the latest push.\n\nThis requires an update to the release notes. I'll do that once the new code/functionality is stable.",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380818723,380818723,
promag,2018-04-12T14:28:38Z,"Thanks @jnewbery for the details.\n\nIIUC:\n - accounts are deprecated but API wise the arguments are still there;\n - in 0.18 accounts will be gone even dummy arguments.\n\nIf that's the case then I'm sorry to NACK - it's not possible to refactor existing software to face 0.18. In 0.17 we should provide both scenarios API wise!\n\nI haven't thought about the positional and named arguments",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380825247,380825247,
jnewbery,2018-04-12T14:39:08Z,"> in 0.18 accounts will be gone even dummy arguments.\n\nNo - there's no firm plan to remove the dummy arguments. At some point, we *could* remove them, but that would be a breaking API change.\n\nThe API change in this PR should be minimally invasive. For users calling `sendmany` and `listtransactions` without accounts, there's no change in the way they need to call the RPC. Changing the argu",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380828971,380828971,
promag,2018-04-12T14:47:36Z,"> No - there's no firm plan to remove the dummy arguments\n\nIf we do then:\n - it will be breaking change - and there is nothing wrong with that IMO\n - we must provide a new deprecation flag in 0.18 and only remove in 0.19.\n\n> Does that address your concern? \n\nYes, all clear.\n\nRestarted travis job. Will review again.",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380832080,380832080,
jnewbery,2018-04-12T14:55:24Z,"> we must provide a new deprecation flag in 0.18 and only remove in 0.19.\n\nYes - any breaking API change should be protected by a deprecation switch (or API versions if we ever implement something like that)",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380834795,380834795,
jnewbery,2018-04-16T18:46:27Z,"Moved the RPC method deprecation into rpcwallet.cpp as requested by @laanwj . Also added tests for those deprecated methods.\n\nStill to do:\n\n- ~deprecation tests for the changes in _Deprecate wallet 'account' API_~\n- ~release notes~",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-381708785,381708785,
laanwj,2018-04-17T09:19:53Z,"Looks like `test/functional/test_runner.py  --coverage` fails:\n```\ntest_framework.authproxy.JSONRPCException: getaccount is deprecated and will be removed in V0.18. To use this command, start bitcoind with -deprecatedrpc=accounts. (-32)\n2018-04-17T09:18:09.208000Z TestFramework (INFO): Stopping nodes\n```\nI think this is due to the `help` command failing, while getting help for the accoun",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-381916371,381916371,
jnewbery,2018-04-17T18:25:14Z,"Yes, `--coverage` caught a genuine bug. Hat tip to @jamesob .\n\nNow fixed, and regression tests and release notes added.",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-382094010,382094010,
laanwj,2018-04-24T13:09:31Z,utACK cead28bbecf032b49c01ca3ae4f47aa2536cbc55,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-383924065,383924065,
red0bear,2019-05-06T13:06:06Z,i need know then .... in 0.18 there is no more -deprecatedrpc=accounts ?,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-489613175,489613175,
red0bear,2019-06-18T01:42:41Z,"well, i was looking to. just to clato clarify; as I could send from one label to another from 0.18 being that the sendfrom is no longer among the commands to accomplish this function. From 0.18 / 0.19 will bitcoin treat your wallet as only one person?",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-502912034,502912034,
sipa,2019-06-18T03:47:08Z,"@red0bear It *always* treated your wallet as one person. The only difference between `sendtoaddress` and `sendfrom` is that the latter also subtracted the amount being sent from the specified accounts' balance (but that was just virtual bean counter, it never had any relation to what UTXOs existed on-chain).",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-502934365,502934365,
red0bear,2019-06-18T03:57:38Z,"So in these versions i can't anymore sendfrom ""fromaccount"" ""toaddress"" amount will not be replaced by another command then. And only sendtoaddress limit label to only description wallet then. ",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-502936130,502936130,
kallewoof,2019-06-18T04:25:58Z,@red0bear Accounts were broken. Horribly. You are risking your funds every time you use them. Do not. This is why they were removed.,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-502941335,502941335,
luke-jr,2019-06-18T07:01:13Z,"Eh, they were never broken AFAIK. We just decided to stop supporting them.",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-502974717,502974717,
red0bear,2019-06-18T08:22:08Z,"@kallewoof , any external connection is a risk today. ",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-503000717,503000717,
markblundeberg,2019-12-11T08:55:27Z,"( note, introduces race fixed in #13130 )",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-564442572,564442572,
laanwj,2019-12-11T11:34:25Z,"a race *in the python tests*, not in the binary, to be clear",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-564501143,564501143,
inzider,2020-05-07T00:37:31Z,"Im trying to start version 0.19.1 with  -deprecated=accounts so I can use sendfrom method.\nStill, bitcoind-cli return method not found.\n\nThose are useful options for many reason - making a ""blind"" remove is odd. \n\nMaybe I miss something but I don't feel this https://github.com/bitcoin/bitcoin/issues/3816#issue-28982757 is enough of a good reason to remove those - some kind of confusion o",https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-624962968,624962968,
luke-jr,2020-05-07T00:51:32Z,@inzider Please open a question on StackExchange explaining what you want to do. Accounts are no longer supported.,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-624966563,624966563,
jnewbery,2020-05-07T02:19:13Z,@inzider - you need to use the `-deprecatedrpc=accounts` command-line or config option.,https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-624989921,624989921,
kallewoof,2018-04-12T01:05:19Z,Why ` {}`?,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r180940313,180940313,src/wallet/rpcwallet.cpp
kallewoof,2018-04-12T01:05:56Z,Remove the added `.` at end?,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r180940393,180940393,src/wallet/rpcwallet.cpp
kallewoof,2018-04-12T01:08:33Z,"Since we're splitting the function anyway, why have the dummy at all?\n\nI also wonder if we should have some form of upgrade plan for when we do this. I know e.g. @luke-jr prefers option objects.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r180940693,180940693,src/wallet/rpcwallet.cpp
kallewoof,2018-04-12T01:12:00Z,"If `params[0]` is unset, this will throw an error at `get_str()` won't it?\nLooks like you want\n```C++\nif (!request.params[0].isNull()) {\n  strAccount = request.params[0].get_str();\n  if (!IsDeprecatedRPCEnabled(""accounts"") && strAccount != ""*"") {\n    throw ...\n  }\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r180941014,180941014,src/wallet/rpcwallet.cpp
promag,2018-04-12T13:27:51Z,"Missing dummy `""""`?",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181080203,181080203,src/wallet/rpcwallet.cpp
promag,2018-04-12T13:27:56Z,"Alternative:\n```cpp\nstatic const std::set<std::string> accounts_methods { ""getaccountaddress"", ""getaccount"", ... };\n...\n\nif (!IsDeprecatedRPCEnabled(""accounts"") && account_methods.count(request.strMethod)) {\n```",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181080242,181080242,src/rpc/server.cpp
promag,2018-04-12T13:32:17Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181081914,181081914,src/wallet/rpcwallet.cpp
promag,2018-04-12T13:34:06Z,"Remove `LabelFromValue` because it raises `JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, ""Invalid label name"")`. I suggest to just `... && !request.params[0].get_str().empty()`.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181082499,181082499,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T13:36:43Z,not required. I've now removed.,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181083343,181083343,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T13:37:31Z,removed,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181083633,181083633,src/wallet/rpcwallet.cpp
promag,2018-04-12T13:38:18Z,"I agree, I don't see a reason to support the case ""I want the new behavior without accounts but keep the RPC argument"". People that wants to avoid breaking change launch with `-deprecatedrpc=accounts`.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181083906,181083906,src/wallet/rpcwallet.cpp
promag,2018-04-12T13:40:31Z,"Correct, `accounts` is optional.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181084583,181084583,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T13:54:42Z,"Yes, much better. Thanks",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181089586,181089586,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T13:57:28Z,thanks. Fixed,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181090602,181090602,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T14:03:57Z,"yes, that's nicer. Thanks",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181093010,181093010,src/rpc/server.cpp
jnewbery,2018-04-12T14:04:13Z,fixed,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181093099,181093099,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T14:04:58Z,agree. Thanks,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181093332,181093332,src/wallet/rpcwallet.cpp
jnewbery,2018-04-12T14:05:50Z,@promag - please see https://github.com/bitcoin/bitcoin/pull/12953#issuecomment-380813038 for rationale.,https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181093605,181093605,src/wallet/rpcwallet.cpp
laanwj,2018-04-16T14:45:52Z,"This is a smaller change, however because `rpc/server.cpp` is supposed to not be specific to bitcoin, I'd prefer to put the deprecation check in the individual methods.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181759541,181759541,src/rpc/server.cpp
jnewbery,2018-04-16T14:54:00Z,"I agree that it's more correct to have these in the individual methods, but see my rationale above:\n\n> That's perhaps a little bit messy (rpc/server.cpp ideally wouldn't have knowledge of individual Bitcoin RPCs), but it saves a lot of code duplication and will be removed in V0.18, so I decided it was acceptable to have it there.\n\nAre you strongly opposed to have this code in rpc/server.cp",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181765483,181765483,src/rpc/server.cpp
promag,2018-04-16T15:01:14Z,"> but it saves a lot of code duplication\n\nWell it's just 8 deprecated methods. I'm fine either way.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181773237,181773237,src/rpc/server.cpp
laanwj,2018-04-16T17:14:18Z,"To be honest I prefer the duplication (then you can remove the entire methods, duplications and al after the deprecation phase). If it's the about the amount of work just say so and I'll provide a patch.",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181819191,181819191,src/rpc/server.cpp
jnewbery,2018-04-16T17:29:41Z,">  If it's the about the amount of work\n\nno, mostly amount of review. I'm happy to write the code if you're happy to review it :)",https://github.com/bitcoin/bitcoin/pull/12953#discussion_r181823972,181823972,src/rpc/server.cpp
