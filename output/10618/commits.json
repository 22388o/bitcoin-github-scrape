[
  {
    "sha": "3babbcb48786372d4b22171674c4cc5a6220c294",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmFiYmNiNDg3ODYzNzJkNGIyMjE3MTY3NGM0Y2M1YTYyMjBjMjk0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-06-17T00:18:42Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-07-14T19:24:17Z"
      },
      "message": "Remove confusing MAX_BLOCK_BASE_SIZE.\n\nSome people keep thinking that MAX_BLOCK_BASE_SIZE is a separate\n size limit from the weight limit when it fact it is superfluous,\n and used in early tests before the witness data has been\n validated or just to compute worst case sizes.  The size checks\n that use it would not behave any differently consensus wise\n if they were eliminated completely.\n\nIts correct value is not independently settable but is a function\n of the weight limit and weight formula.\n\nThis patch just eliminates it and uses the scale factor as\n required to compute the worse case constants.\n\nIt also moves the weight factor out of primitives into consensus,\n which is a more logical place for it.",
      "tree": {
        "sha": "099fab1403b69a6da62d222fbf8b2d45f0c12fa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099fab1403b69a6da62d222fbf8b2d45f0c12fa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3babbcb48786372d4b22171674c4cc5a6220c294",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3babbcb48786372d4b22171674c4cc5a6220c294",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3babbcb48786372d4b22171674c4cc5a6220c294",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3babbcb48786372d4b22171674c4cc5a6220c294/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4fcbf797ed3b472d352ac3794ec82f581209c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4fcbf797ed3b472d352ac3794ec82f581209c50"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 43,
      "deletions": 45
    },
    "files": [
      {
        "sha": "9acb3fd30e9668e18f6cbbf2921646e7f2799d6f",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -239,7 +239,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n     uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n-    static const unsigned int maxVout = MAX_BLOCK_BASE_SIZE / minTxOutSz;\n+    static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n \n     // extract and validate vout\n     std::string strVout = vStrInputParts[1];"
      },
      {
        "sha": "7adab586e8f586baf87ec4a5d2f7e0f77ad47c99",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -15,8 +15,6 @@\n \n #include <unordered_map>\n \n-#define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n-\n CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n@@ -50,7 +48,7 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n     if (cmpctblock.header.IsNull() || (cmpctblock.shorttxids.empty() && cmpctblock.prefilledtxn.empty()))\n         return READ_STATUS_INVALID;\n-    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_BASE_SIZE / MIN_TRANSACTION_BASE_SIZE)\n+    if (cmpctblock.shorttxids.size() + cmpctblock.prefilledtxn.size() > MAX_BLOCK_WEIGHT / MIN_SERIALIZEABLE_TRANSACTION_WEIGHT)\n         return READ_STATUS_INVALID;\n \n     assert(header.IsNull() && txn_available.empty());"
      },
      {
        "sha": "e30bda930ae6c9e24ea2d121b36ac3157e341745",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -245,7 +245,8 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE /  ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION); // TODO: merge with similar definition in undo.h.\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)\n {"
      },
      {
        "sha": "a1bb99a802c0999ab1584b80313da57522eba9b4",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -6,25 +6,23 @@\n #ifndef BITCOIN_CONSENSUS_CONSENSUS_H\n #define BITCOIN_CONSENSUS_CONSENSUS_H\n \n+#include <stdlib.h>\n #include <stdint.h>\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n /** The maximum allowed weight for a block, see BIP 141 (network rule) */\n static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n-/**\n- * The maximum allowed size for a block excluding witness data, in bytes (network rule).\n- * This parameter is largely superfluous because it is directly implied by the above block\n- *  weight limit, even when BIP 141 is not active.  It continues to exist for use in\n- *  various early tests that run before the witness data has been checked.\n- * All tests related to it could be removed without breaking consensus compatibility.\n- */\n-static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */\n static const int64_t MAX_BLOCK_SIGOPS_COST = 80000;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+static const int WITNESS_SCALE_FACTOR = 4;\n+\n+static const size_t MIN_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 60; // 60 is the lower bound for the size of a valid serialized CTransaction\n+static const size_t MIN_SERIALIZEABLE_TRANSACTION_WEIGHT = WITNESS_SCALE_FACTOR * 10; // 10 is the lower bound for the size of a serialized CTransaction\n+\n /** Flags for nSequence and nLockTime locks */\n enum {\n     /* Interpret sequence numbers as relative lock-time constraints. */"
      },
      {
        "sha": "0a71915d1df129362300fdefe6e5b9b1b51e7ca9",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -164,7 +164,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values"
      },
      {
        "sha": "5494ce40eac4204e06026d589958ff42e8f1fc0a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -7,6 +7,10 @@\n #define BITCOIN_CONSENSUS_VALIDATION_H\n \n #include <string>\n+#include \"version.h\"\n+#include \"consensus/consensus.h\"\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n \n /** \"reject\" message codes */\n static const unsigned char REJECT_MALFORMED = 0x01;\n@@ -85,4 +89,18 @@ class CValidationState {\n     std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n+static inline int64_t GetTransactionWeight(const CTransaction& tx)\n+{\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+static inline int64_t GetBlockWeight(const CBlock& block)\n+{\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n+    // using only serialization with and without witness data. As witness_size\n+    // is equal to total_size - stripped_size, this formula is identical to:\n+    // weight = (stripped_size * 3) + total_size.\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "a366ef933c344b9e0fca4cf55b2a54ca67a00021",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -5,7 +5,8 @@\n #include \"core_io.h\"\n \n #include \"base58.h\"\n-#include \"primitives/transaction.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"serialize.h\"\n@@ -15,7 +16,6 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n-\n std::string FormatScript(const CScript& script)\n {\n     std::string ret;"
      },
      {
        "sha": "ba5f7b400cc343a45613384da0741e9caaae95eb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -153,7 +153,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch, std::ve\n     if (nTransactions == 0)\n         return uint256();\n     // check for excessively high numbers of transactions\n-    if (nTransactions > MAX_BLOCK_BASE_SIZE / 60) // 60 is the lower bound for the size of a serialized CTransaction\n+    if (nTransactions > MAX_BLOCK_WEIGHT / MIN_TRANSACTION_WEIGHT)\n         return uint256();\n     // there can never be more hashes provided than one for every txid\n     if (vHash.size() > nTransactions)"
      },
      {
        "sha": "9f2d623e769ec4f553d88f6f97372d24abccd026",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"policy/policy.h\"\n \n+#include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"coins.h\"\n #include \"tinyformat.h\""
      },
      {
        "sha": "24be67c84fbb2dfc17d986b21b4f70202042242f",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -31,12 +31,3 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n-\n-int64_t GetBlockWeight(const CBlock& block)\n-{\n-    // This implements the weight = (stripped_size * 4) + witness_size formula,\n-    // using only serialization with and without witness data. As witness_size\n-    // is equal to total_size - stripped_size, this formula is identical to:\n-    // weight = (stripped_size * 3) + total_size.\n-    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "c90a1dfa6448631db06e522d3d0876c79a2e4977",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -152,7 +152,4 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block weight (see BIP 141). */\n-int64_t GetBlockWeight(const CBlock& tx);\n-\n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "f87934d586881b2e3d64dd88232b6a76aa1fd9cd",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -114,8 +114,3 @@ std::string CTransaction::ToString() const\n         str += \"    \" + vout[i].ToString() + \"\\n\";\n     return str;\n }\n-\n-int64_t GetTransactionWeight(const CTransaction& tx)\n-{\n-    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-}"
      },
      {
        "sha": "f1dd51b9fd81843385a066f0daf26b9718f5df24",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -6,15 +6,14 @@\n #ifndef BITCOIN_PRIMITIVES_TRANSACTION_H\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n+#include <stdint.h>\n #include \"amount.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n \n-static const int WITNESS_SCALE_FACTOR = 4;\n-\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -411,7 +410,4 @@ typedef std::shared_ptr<const CTransaction> CTransactionRef;\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n \n-/** Compute the weight of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionWeight(const CTransaction &tx);\n-\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "10bb341e54acd138a901f80e198e1a335289b579",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -645,15 +645,16 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"mutable\", aMutable));\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n+    int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n         assert(nSigOpLimit % WITNESS_SCALE_FACTOR == 0);\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n+        assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n+        nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    if (fPreSegWit) {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_BASE_SIZE));\n-    } else {\n-        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    if (!fPreSegWit) {\n         result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));"
      },
      {
        "sha": "d3b8b072288b6d1686daa72833654b205e964e78",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"consensus/tx_verify.h\"\n+#include \"consensus/validation.h\"\n #include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "0f9d041bbdc47aadb3745a75a0f2c0cf43f74350",
        "filename": "src/undo.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/undo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/undo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/undo.h?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -60,7 +60,8 @@ class TxInUndoDeserializer\n     TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_BASE_SIZE / ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), SER_NETWORK, PROTOCOL_VERSION);\n+static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n \n /** Undo information for a CTransaction */\n class CTxUndo"
      },
      {
        "sha": "c101497600c5ff5f223c7d6e0056c6a44908b78d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3babbcb48786372d4b22171674c4cc5a6220c294/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3babbcb48786372d4b22171674c4cc5a6220c294/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3babbcb48786372d4b22171674c4cc5a6220c294",
        "patch": "@@ -2803,7 +2803,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     // checks that use witness data may be performed here.\n \n     // Size limits\n-    if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_BASE_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+    if (block.vtx.empty() || block.vtx.size() * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-blk-length\", false, \"size limits failed\");\n \n     // First transaction must be coinbase, the rest must not be"
      }
    ]
  }
]