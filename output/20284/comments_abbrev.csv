vasild,2020-11-02 11:04:12,@jnewbery spotted the potential problem here: https://github.com/bitcoin/bitcoin/pull/19954#discussion_r515607619,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-720402264,720402264,
jnewbery,2020-11-02 13:29:55,"Concept ACK.\n\nI think this requires a bit more discussion. I'm going to raise it as a meeting topic for the next p2p meeting (Nov 3).\n\nMarking this as a 0.21 milestone, since we'll need to make a decision before that release.",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-720472622,720472622,
DrahtBot,2020-11-02 14:58:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18722 (addrman: improve performance by using more suitable containers by vasild)\n\nIf you consider this pull request imp",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-720523138,720523138,
laanwj,2020-11-02 15:10:06,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-720530252,720530252,
sdaftuar,2020-11-03 14:40:11,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-721156298,721156298,
vasild,2020-11-10 15:21:17,"> The commit log should s/backwards compatible/forwards compatible/.\n\nI think the confusion with forward vs backward compatible <sup>[1](http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-03.html#l-269), [2](http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-03.html#l-379), [3](http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-03.html#l-383)</sup> is because forward/backward is re",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724771283,724771283,
vasild,2020-11-10 15:24:23,"Addressed suggestions - reworded comments, a log message and renamed two variables.",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724773339,724773339,
jnewbery,2020-11-10 16:17:13,"> I think the confusion with forward vs backward compatible...\n\nThe fact that there's confusion is exactly the reason we should precise with our language. We have exact terminology for these concepts, so we should use it consistently to avoid future confusion:\n\n- software is backward-compatible if it can read old input formats\n- software is forward-compatible if it can gracefully read ne",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724807161,724807161,
vasild,2020-11-10 16:38:19,Addressed suggestions - reworded a comment and moved a local variable as a member of the class.,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724820489,724820489,
jnewbery,2020-11-10 16:45:03,"utACK eaa04bec653428091a9434fa08253a9b89e01fd6\n\nFunctionally this is fine and can be merged for 0.21. However, I think that the comments are still very confused/confusing and could be tidied up with precise terminology and clearer explanations.",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724824596,724824596,
MarcoFalke,2020-11-10 17:13:28,"looks like this doesn't compile:\n\n```\n/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./addrman.h:438: undefined reference to `CAddrMan::FILE_FORMAT'",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724841956,724841956,
vasild,2020-11-10 17:14:51,"> looks like this doesn't compile:\n> \n> ```\n> /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./addrman.h:438: undefined reference to `CAddrMan::FILE_FORMAT'\n> ```\n\nPushed a blind attempt to fix it (it does compile locally).",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724842803,724842803,
sipa,2020-11-10 17:23:07,"> * software is backward-compatible if it can read old input formats\n> * software is forward-compatible if it can gracefully read new input formats (ignoring the new parts it can't understand) => a change to an input format breaks forward-compatibility if the new file format can't be read by old software.\n\nOk, so backward and forward compatibility is a property of the software, not of the fo",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724847778,724847778,
jnewbery,2020-11-10 18:32:40,"> So I think your definition above says this is forward compatibility: old software reading the new format gracefully.\n\n> The same is true about the XORing of the bucket count with 2**30. It's there to trigger a re-bucketing if read by old software, which means it deals with the new format, albeit with reduced functionality (the bucket assignments aren't retained).\n\nAh! Those both make sen",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-724886142,724886142,
jnewbery,2020-11-11 10:28:09,"> Pushed a blind attempt to fix it\n\nI think it'd be better to fix this by just casting the enum to an int in the unserialize exception:\n\n```diff\ndiff --git a/src/addrman.cpp b/src/addrman.cpp\nindex 0067a32994..7636c6bad2 100644\n--- a/src/addrman.cpp\n+++ b/src/addrman.cpp\n@@ -71,8 +71,6 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-constexpr",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-725341208,725341208,
jnewbery,2020-11-11 11:59:05,utACK 2ed531dfcd9142cd1d16526dbea0aa45d991786b,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-725383155,725383155,
vasild,2020-11-11 13:41:38,"> I think it'd be better to fix this by just casting the enum to an int in the unserialize exception:\n\nThat [did not compile](https://cirrus-ci.com/task/6471173661786112?command=ci#L3847). Went back to the previous version and addressed [Saturn V](https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521313470).\n\nThis should be the final version of it.",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-725429466,725429466,
vasild,2020-11-11 15:24:06,Nothing is final!,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-725485153,725485153,
jnewbery,2020-11-11 15:37:45,"ACK 38ada892ed0ed9aaa46b1791db12a371a3c0c419\n\nThanks @vasild!",https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-725493230,725493230,
MarcoFalke,2020-11-12 12:31:51,(the timed-out test run can be ignored),https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-726049493,726049493,
laanwj,2020-11-12 16:05:41,Code review ACK 38ada892ed0ed9aaa46b1791db12a371a3c0c419,https://github.com/bitcoin/bitcoin/pull/20284#issuecomment-726172937,726172937,
laanwj,2020-11-02 15:07:11,"Thanks for adding an actual versioning mechanism, at least next time we won't have to resort to a hack like this!",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r516035544,516035544,src/addrman.h
MarcoFalke,2020-11-10 06:44:40,unrelated style nit: Any reason why this can't use `CustomUintFormatter` (and its run-time sanity checks)?,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520327284,520327284,src/addrman.h
MarcoFalke,2020-11-10 06:51:55,"stye-nit: I think the ""continue"" (and logging) is responsibility (and is already done) by the calling code that also catches the exception. No need to assume this exception is always caught.\n\n",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520329901,520329901,src/addrman.h
jnewbery,2020-11-10 09:27:18,We usually use ALL_CAPS for constant names.,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520412455,520412455,src/addrman.h
jnewbery,2020-11-10 09:30:13,"This is a very badly named constant! The whole point of this PR is that we want the code to be forward compatible if possible, and only in exceptional circumstances make format changes that aren't. If the format is bumped, but lowest_compatible is not, then older software will still be able to read it.\n\nI'd suggest moving this to a class-level static constant called FILE_FORMAT or similar, and",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520414528,520414528,src/addrman.h
jnewbery,2020-11-10 09:34:58,"I think this requires better documentation. At the very least, the `* Serialized format.` comment above needs updating. You might also add `asmap_version` while you're doing that, since the documentation wasn't updated correctly last time either.\n\nI'd suggest something like:\n\n""The lowest version of software that can read this peers.dat file. Update this to be the same as `FILE_FORMAT` when",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520417770,520417770,src/addrman.h
jnewbery,2020-11-10 09:46:45,"""we don't want to bump into 32"" isn't the reason we start at 32. The reason is that v0.20 and earlier wrote 32 into this field, so if we didn't use this offset, then minimum_version would be greater than the current version and v0.21 software wouldn't be able to read old peers.dat files. I'd just leave the explanation out.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520425775,520425775,src/addrman.h
MarcoFalke,2020-11-10 10:19:17,"nit: Any value equal to or greater than 32 should be fine here. As this is a breaking change (old versions can't read the peers.dat created by this version of Bitcoin Core), might as well bump to 33 right away to avoid confusion with the ""magic value"" 32.\n",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520447920,520447920,src/addrman.h
jnewbery,2020-11-10 10:34:29,Or perhaps use `0x80` as a very obvious offset. We're unlikely to have 128 file versions so we're not going to run out of bits.,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520457896,520457896,src/addrman.h
vasild,2020-11-10 14:10:43,"It is possible to use `CustomUintFormatter` here. This line is not otherwise modified by the patch, so it would be sneaking an unnecessary change, so I left it as is to ease reviewers and future history observers.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520590073,520590073,src/addrman.h
vasild,2020-11-10 14:12:09,"I agree. Removed the last sentence. Alas, the code that catches this exception is too generic and we can't print ""Continuing operation without using the saved list of peers"" from it.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520591235,520591235,src/addrman.h
vasild,2020-11-10 14:39:18,Changed to `INCOMPATIBILITY_BASE`.,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520612084,520612084,src/addrman.h
vasild,2020-11-10 14:57:45,"Renamed to `maximum_known_format`.\n\nThere is no use for such a constant in `Serialize()`. It is only necessary in `Unserialize()`, thus I think it is better to have it as local variable in `Unserialize()` in order to minimize its span.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520627113,520627113,src/addrman.h
vasild,2020-11-10 14:58:22,I updated the `* Serialized format` comment.,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520627563,520627563,src/addrman.h
vasild,2020-11-10 14:59:27,"> I'd just leave the explanation out.\n\nRemoved the last part of the comment.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520628458,520628458,src/addrman.h
vasild,2020-11-10 15:18:09,"I think it should be one of `29`, `30`, `31` or `32`:\n\n```cpp\n// Unserialize in 0.21\nlowest_compatible = byte_read_from_disk - INCOMPATIBILITY_BASE;\n```\n\n0.20 write `32` to disk\n\nSo\n\n* If `INCOMPATIBILITY_BASE` is `28` or less then a file written by 0.20 will be rendered unreadable by 0.21 as having too high `lowest_compatible`: `4` or higher.\n* If `INCOMPATIBILITY_BASE` is",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520643076,520643076,src/addrman.h
jnewbery,2020-11-10 15:45:39,"My point is that the ""maximum known format"" should always the same as the value that is serialized into the format version byte. It's the format that this software uses.\n\nDefining a constant here means that it needs to be updated at the same time as line 351 where the version is serialized into the file.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520665020,520665020,src/addrman.h
jnewbery,2020-11-10 15:47:35,"I'd suggest not using actual version numbers in this comment. At some point we'll have versions 0.23 and 0.25, and they might not use file versions 4 and 5, and this comment will be confusing.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520666464,520666464,src/addrman.h
vasild,2020-11-10 16:32:05,_Now_ I changed this line for other reasons and switched to `CustomUintFormatter` :-),https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520700683,520700683,src/addrman.h
vasild,2020-11-10 16:32:57,"I see you point now. Moved as a member variable of the class, renamed to `FILE_FORMAT` and used in `Serialize()` too.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520701293,520701293,src/addrman.h
vasild,2020-11-10 16:34:26,"Changed to `V`, `V+1` and `V+2`.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520702384,520702384,src/addrman.h
jnewbery,2020-11-11 09:42:15,"re https://github.com/bitcoin/bitcoin/pull/20284#discussion_r520327284. I don't understand why we want this change. The comment for `CustomUintFormatter` says ""This is only intended to implement serializers that are compatible with existing formats, and its use is not recommended for new data structures.""\n",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521234708,521234708,src/addrman.h
MarcoFalke,2020-11-11 09:50:28,"The comment only applies to endianness, see https://github.com/bitcoin/bitcoin/pull/18317#discussion_r427621184.\nGenerally, I think serialize/deserialze should use the same helpers, so either `CustomUintFormatter` should be used for both paths or for none.\n",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521239550,521239550,src/addrman.h
jonatack,2020-11-11 11:55:56,"I could be mistaken, but ISTM it's too late to make changes here; the release notes have been migrated to https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft where you can make this change manually.",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521307102,521307102,doc/release-notes.md
jonatack,2020-11-11 12:08:42,"Bitcoin Core V? These look like Roman numerals (anyone remember the [Saturn V](https://en.wikipedia.org/wiki/Saturn_V) rocket?)\n\nPerhaps:\n```diff\n-     *   whether to parse the file. For example:\n-     *   * Bitcoin Core V knows how to parse up to format=3. If a new format=4 is introduced\n-     *     in Bitcoin Core V+1 which is compatible with format=3 and it is known that V will\n- ",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521313470,521313470,src/addrman.h
vasild,2020-11-11 12:22:54,Will tweak if I retouch :),https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521320881,521320881,src/addrman.h
vasild,2020-11-11 12:23:27,"ok, if this gets merged then I will also update that wiki",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521321140,521321140,doc/release-notes.md
vasild,2020-11-11 13:36:23,Reworded.,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521362080,521362080,src/addrman.h
MarcoFalke,2020-11-11 15:43:51,"```suggestion\noperation as if the file was missing, creating a new empty one. (#19954, #20284)\n```\n\nfor the release notes  wiki (not this pull) \n\nEdit: done here: https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft/_compare/ef1291e4985154b703bc5c87decdf68dbe0fcc20...c98b735a5bbf337f9f7bb065b56f490804cf9ae7",https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521448806,521448806,doc/release-notes.md
MarcoFalke,2020-11-11 15:46:51,Done here: https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft/_compare/ef1291e4985154b703bc5c87decdf68dbe0fcc20...c98b735a5bbf337f9f7bb065b56f490804cf9ae7,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r521450932,521450932,doc/release-notes.md
laanwj,2020-11-12 13:21:01,I am somewhat partial to the idea of a roman numerals based version scheme :slightly_smiling_face: *upcoming release will be Bitcoin Core XXI* lol,https://github.com/bitcoin/bitcoin/pull/20284#discussion_r522099886,522099886,src/addrman.h
