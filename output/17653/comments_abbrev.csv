instagibbs,2019-12-02 19:52:04,"concept ACK, we want to test censorship type scenarios for Liquid, but don't have a good way of doing that in our own test harness aside from manually constructing blocks ourselves. Previously we relied on premature witness data being non-standard to ""censor"" the transactions themselves but that is no longer a non-standard case due to buried deployment.\n\nThoughts:\n1) Probably a bunch of code",https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560553766,560553766,
DrahtBot,2019-12-02 21:02:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rp",https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560579299,560579299,
andrewtoth,2019-12-03 00:19:14,">Probably a bunch of code can be de-duplicated with some refactoring\n\n@instagibbs Most of the duplicated code to create the block is in `BlockAssembler`, and it's very tightly coupled with getting all txs from the mempool. I'm not sure it would be worth messing around with that code for this.\n\n>This should probably only be available for test networks, and hidden?\n\nI don't believe this ",https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560940438,560940438,
instagibbs,2019-12-03 15:43:56,"I did a bit of refactoring that makes this re-use the existing mining code: https://github.com/instagibbs/bitcoin/tree/generatecustomblock\n\nFewer added lines, and less redundancy imo.\n\nFeel free to take this approach instead.",https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-561225955,561225955,
andrewtoth,2019-12-07 17:35:20,Closed by mistake. Reopened new PR #17693 ,https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-562870873,562870873,
instagibbs,2019-12-03 15:31:31,`assert_equal` makes the error more clear when it doesn't match,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248441,353248441,test/functional/rpc_generatecustomblock.py
instagibbs,2019-12-03 15:31:36,`assert_equal` makes the error more clear when it doesn't match,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248497,353248497,test/functional/rpc_generatecustomblock.py
instagibbs,2019-12-03 15:31:45,`assert_equal` makes the error more clear when it doesn't match,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248588,353248588,test/functional/rpc_generatecustomblock.py
instagibbs,2019-12-03 15:31:49,`assert_equal` makes the error more clear when it doesn't match,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248634,353248634,test/functional/rpc_generatecustomblock.py
instagibbs,2019-12-03 15:45:08,I think there should also be a test making sure that invalid-ordering-of-txn block doesn't cause something unexpected like a crash.,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353256893,353256893,test/functional/rpc_generatecustomblock.py
promag,2019-12-03 15:49:10,Just `generateblock`?,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353259428,353259428,src/rpc/client.cpp
promag,2019-12-03 15:52:38,I guess it's fine supporting both here.,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353261649,353261649,src/rpc/mining.cpp
promag,2019-12-03 15:54:42,You can replace this code with `CTxMemPool::get`.,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353262967,353262967,src/rpc/mining.cpp
andrewtoth,2019-12-07 16:05:15,Updated,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355129356,355129356,src/rpc/client.cpp
andrewtoth,2019-12-07 17:35:00,Done,https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355133850,355133850,src/rpc/mining.cpp
