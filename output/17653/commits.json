[
  {
    "sha": "b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDc0NWY4ZGM1MTc1MDFmNjEyYjU2YTBjZWU3MjZlNWJjNGM0Yzhj",
    "commit": {
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-12-03T00:33:40Z"
      },
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-12-03T00:33:40Z"
      },
      "message": "Add generatecustomblock rpc",
      "tree": {
        "sha": "b56dfc9492bf38ad2288ea0ae83eb987a75d815a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b56dfc9492bf38ad2288ea0ae83eb987a75d815a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0745f8dc517501f612b56a0cee726e5bc4c4c8c/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eda631ed3bd23d4a41761a85a96f925d4a6337",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eda631ed3bd23d4a41761a85a96f925d4a6337"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9e48b553a2fd4fad80fdfa727e63fcb59f58e789",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0745f8dc517501f612b56a0cee726e5bc4c4c8c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0745f8dc517501f612b56a0cee726e5bc4c4c8c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
        "patch": "@@ -32,6 +32,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"generatetodescriptor\", 0, \"num_blocks\" },\n     { \"generatetodescriptor\", 2, \"maxtries\" },\n+    { \"generatecustomblock\", 1, \"transactions\" },\n     { \"getnetworkhashps\", 0, \"nblocks\" },\n     { \"getnetworkhashps\", 1, \"height\" },\n     { \"sendtoaddress\", 1, \"amount\" },"
      },
      {
        "sha": "ce885c6c6a700072fbc72d0fc414ac865e873ea1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0745f8dc517501f612b56a0cee726e5bc4c4c8c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0745f8dc517501f612b56a0cee726e5bc4c4c8c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
        "patch": "@@ -220,6 +220,155 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, nGenerate, nMaxTries);\n }\n \n+static std::string GenerateCustomBlock(const CScript& coinbase_script, const std::vector<CTransactionRef>& txs)\n+{\n+    CBlock block;\n+    CChainParams chainparams(Params());\n+\n+    CBlockIndex* previous_index;\n+    {\n+        LOCK(cs_main);\n+        previous_index = ::ChainActive().Tip();\n+    }\n+    CHECK_NONFATAL(previous_index != nullptr);\n+\n+    const int height = previous_index->nHeight + 1;\n+\n+    // Create coinbase transaction.\n+    CMutableTransaction coinbase_tx;\n+    coinbase_tx.vin.resize(1);\n+    coinbase_tx.vin[0].prevout.SetNull();\n+    coinbase_tx.vout.resize(1);\n+    coinbase_tx.vout[0].scriptPubKey = coinbase_script;\n+    coinbase_tx.vout[0].nValue = GetBlockSubsidy(height, chainparams.GetConsensus());\n+    coinbase_tx.vin[0].scriptSig = CScript() << height << OP_0;\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbase_tx)));\n+\n+    // Add transactions\n+    block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n+\n+    block.nVersion = ComputeBlockVersion(previous_index, chainparams.GetConsensus());\n+    if (chainparams.MineBlocksOnDemand())\n+        block.nVersion = gArgs.GetArg(\"-blockversion\", block.nVersion);\n+\n+    // Fill in header\n+    block.hashPrevBlock = previous_index->GetBlockHash();\n+    block.nTime = GetAdjustedTime();\n+    UpdateTime(&block, chainparams.GetConsensus(), previous_index);\n+    block.nBits = GetNextWorkRequired(previous_index, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+\n+    GenerateCoinbaseCommitment(block, previous_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce = 0;\n+        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+\n+        BlockValidationState state;\n+        if (!TestBlockValidity(state, chainparams, block, previous_index, false, false)) {\n+            throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", FormatStateMessage(state)));\n+        }\n+    }\n+\n+    int max_tries{1000000};\n+\n+    while (max_tries > 0 && !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && !ShutdownRequested()) {\n+        ++block.nNonce;\n+        --max_tries;\n+    }\n+\n+    if (max_tries == 0) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Exceeded max tries\");\n+    }\n+\n+    std::shared_ptr<const CBlock> shared_block = std::make_shared<const CBlock>(block);\n+    if (!ProcessNewBlock(chainparams, shared_block, true, nullptr))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+\n+    return block.GetHash().GetHex();\n+}\n+\n+static UniValue generatecustomblock(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"generatecustomblock\",\n+        \"\\nMine a custom block with a set of transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n+        {\n+            {\"address/descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n+            {\"transactions\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings which are either txids or raw transactions.\\n\"\n+                \"Txids must reference transactions currently in the mempool.\",\n+                {\n+                    {\"rawtx/txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            }\n+        },\n+        RPCResult{\n+            \"blockhash     (hex) hash of generated block\\n\"\n+        },\n+        RPCExamples{\n+            \"\\nGenerate a block to myaddress, with txs rawtx and mempool_txid\\n\"\n+            + HelpExampleCli(\"generatecustomblock\", R\"(\"myaddress\" '[\"rawtx\", \"mempool_txid\"]')\")\n+        },\n+    }.Check(request);\n+\n+    const auto address_or_descriptor = request.params[0].get_str();\n+    CScript coinbase_script;\n+\n+    FlatSigningProvider key_provider;\n+    std::string error;\n+    const auto desc = Parse(address_or_descriptor, key_provider, error, /* require_checksum = */ false);\n+    if (desc) {\n+        if (desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptor not accepted. Maybe pass through deriveaddresses first?\");\n+        }\n+\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(0, key_provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        CHECK_NONFATAL(scripts.size() == 1);\n+        coinbase_script = scripts.at(0);\n+\n+    } else {\n+        const auto destination = DecodeDestination(address_or_descriptor);\n+        if (!IsValidDestination(destination)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address or descriptor\");\n+        }\n+\n+        coinbase_script = GetScriptForDestination(destination);\n+    }\n+\n+    std::vector<CTransactionRef> txs;\n+    const auto raw_txs_or_txids = request.params[1].get_array();\n+    for (size_t i = 0; i < raw_txs_or_txids.size(); i++) {\n+        const auto str(raw_txs_or_txids[i].get_str());\n+\n+        uint256 hash;\n+        CMutableTransaction mtx;\n+        if (ParseHashStr(str, hash)) {\n+\n+            LOCK(mempool.cs);\n+\n+            const auto it = mempool.mapTx.find(hash);\n+            if (it == mempool.mapTx.end()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Transaction %s not in mempool.\", str));\n+            }\n+\n+            txs.emplace_back(it->GetSharedTx());\n+\n+        } else if (DecodeHexTx(mtx, str)) {\n+            txs.push_back(MakeTransactionRef(std::move(mtx)));\n+\n+        } else {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"Transaction decode failed for %s\", str));\n+        }\n+    }\n+\n+    return GenerateCustomBlock(coinbase_script, txs);\n+}\n+\n static UniValue getmininginfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"getmininginfo\",\n@@ -1003,6 +1152,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n     { \"generating\",         \"generatetodescriptor\",   &generatetodescriptor,   {\"num_blocks\",\"descriptor\",\"maxtries\"} },\n+    { \"generating\",         \"generatecustomblock\",    &generatecustomblock,    {\"address\",\"transactions\"} },\n \n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n "
      }
    ]
  },
  {
    "sha": "de2a77fbc210365bf154633ddb0af3ecc1477e12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTJhNzdmYmMyMTAzNjViZjE1NDYzM2RkYjBhZjNlY2MxNDc3ZTEy",
    "commit": {
      "author": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-12-03T00:33:55Z"
      },
      "committer": {
        "name": "Andrew Toth",
        "email": "andrewstoth@gmail.com",
        "date": "2019-12-03T00:33:55Z"
      },
      "message": "Add tests for generatecustomblock",
      "tree": {
        "sha": "39fc79fd3544faae478fcfe206411aa51b0bddec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39fc79fd3544faae478fcfe206411aa51b0bddec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de2a77fbc210365bf154633ddb0af3ecc1477e12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de2a77fbc210365bf154633ddb0af3ecc1477e12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de2a77fbc210365bf154633ddb0af3ecc1477e12/comments",
    "author": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "andrewtoth",
      "id": 237213,
      "node_id": "MDQ6VXNlcjIzNzIxMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewtoth",
      "html_url": "https://github.com/andrewtoth",
      "followers_url": "https://api.github.com/users/andrewtoth/followers",
      "following_url": "https://api.github.com/users/andrewtoth/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewtoth/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
      "repos_url": "https://api.github.com/users/andrewtoth/repos",
      "events_url": "https://api.github.com/users/andrewtoth/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0745f8dc517501f612b56a0cee726e5bc4c4c8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0745f8dc517501f612b56a0cee726e5bc4c4c8c"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b88788c55d557aa3c80391895fc3da08d776c57a",
        "filename": "test/functional/rpc_generatecustomblock.py",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de2a77fbc210365bf154633ddb0af3ecc1477e12/test/functional/rpc_generatecustomblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de2a77fbc210365bf154633ddb0af3ecc1477e12/test/functional/rpc_generatecustomblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generatecustomblock.py?ref=de2a77fbc210365bf154633ddb0af3ecc1477e12",
        "patch": "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        txid = block['tx'][1]\n+        assert node.gettransaction(txid)['hex'] == signed_raw\n+\n+        # Generate custom block with txid\n+        txid = node.sendtoaddress(address, 1)\n+        hash = node.generatecustomblock(address, [txid])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        assert block['tx'][1] == txid\n+\n+if __name__ == '__main__':\n+    GenerateCustomBlockTest().main()"
      },
      {
        "sha": "2348c389301beaa195d0054159b0d8daf5012a6b",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de2a77fbc210365bf154633ddb0af3ecc1477e12/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de2a77fbc210365bf154633ddb0af3ecc1477e12/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=de2a77fbc210365bf154633ddb0af3ecc1477e12",
        "patch": "@@ -170,6 +170,7 @@\n     'wallet_importprunedfunds.py',\n     'p2p_leak_tx.py',\n     'rpc_signmessage.py',\n+    'rpc_generatecustomblock.py',\n     'wallet_balance.py',\n     'feature_nulldummy.py',\n     'mempool_accept.py',"
      }
    ]
  }
]