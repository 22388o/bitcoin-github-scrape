[
  {
    "sha": "28f8b6657764c7746645a6e75dfb09ffc0597322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGY4YjY2NTc3NjRjNzc0NjY0NWE2ZTc1ZGZiMDlmZmMwNTk3MzIy",
    "commit": {
      "author": {
        "name": "Eelis",
        "email": "eelis@bitonic.nl",
        "date": "2017-08-18T12:21:40Z"
      },
      "committer": {
        "name": "Eelis",
        "email": "eelis@bitonic.nl",
        "date": "2017-10-12T13:56:32Z"
      },
      "message": "Diagnose unsuitable outputs in lockunspent().\n\nFixes #2667.",
      "tree": {
        "sha": "edf91ca51db6dd557793e399f67f1706b1596502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edf91ca51db6dd557793e399f67f1706b1596502"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28f8b6657764c7746645a6e75dfb09ffc0597322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f8b6657764c7746645a6e75dfb09ffc0597322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28f8b6657764c7746645a6e75dfb09ffc0597322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28f8b6657764c7746645a6e75dfb09ffc0597322/comments",
    "author": {
      "login": "BitonicEelis",
      "id": 31100282,
      "node_id": "MDQ6VXNlcjMxMTAwMjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/31100282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitonicEelis",
      "html_url": "https://github.com/BitonicEelis",
      "followers_url": "https://api.github.com/users/BitonicEelis/followers",
      "following_url": "https://api.github.com/users/BitonicEelis/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitonicEelis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitonicEelis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitonicEelis/subscriptions",
      "organizations_url": "https://api.github.com/users/BitonicEelis/orgs",
      "repos_url": "https://api.github.com/users/BitonicEelis/repos",
      "events_url": "https://api.github.com/users/BitonicEelis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitonicEelis/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BitonicEelis",
      "id": 31100282,
      "node_id": "MDQ6VXNlcjMxMTAwMjgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/31100282?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitonicEelis",
      "html_url": "https://github.com/BitonicEelis",
      "followers_url": "https://api.github.com/users/BitonicEelis/followers",
      "following_url": "https://api.github.com/users/BitonicEelis/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitonicEelis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitonicEelis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitonicEelis/subscriptions",
      "organizations_url": "https://api.github.com/users/BitonicEelis/orgs",
      "repos_url": "https://api.github.com/users/BitonicEelis/repos",
      "events_url": "https://api.github.com/users/BitonicEelis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitonicEelis/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f74459dba6de4d4462860318f6ee5bda8522e07b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74459dba6de4d4462860318f6ee5bda8522e07b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f74459dba6de4d4462860318f6ee5bda8522e07b"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 60,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4c7264ba3818ac9e0c9a2f2a6d93f6c4e3ec5495",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 15,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28f8b6657764c7746645a6e75dfb09ffc0597322/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28f8b6657764c7746645a6e75dfb09ffc0597322/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=28f8b6657764c7746645a6e75dfb09ffc0597322",
        "patch": "@@ -2447,33 +2447,66 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n     RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n \n-    UniValue outputs = request.params[1].get_array();\n-    for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n-        const UniValue& output = outputs[idx];\n-        if (!output.isObject())\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n-        const UniValue& o = output.get_obj();\n+    const UniValue& output_params = request.params[1];\n+\n+    // Create and validate the COutPoints first.\n+\n+    std::vector<COutPoint> outputs;\n+    outputs.reserve(output_params.size());\n+\n+    for (unsigned int idx = 0; idx < output_params.size(); idx++) {\n+        const UniValue& o = output_params[idx].get_obj();\n \n         RPCTypeCheckObj(o,\n             {\n                 {\"txid\", UniValueType(UniValue::VSTR)},\n                 {\"vout\", UniValueType(UniValue::VNUM)},\n             });\n \n-        std::string txid = find_value(o, \"txid\").get_str();\n-        if (!IsHex(txid))\n+        const std::string& txid = find_value(o, \"txid\").get_str();\n+        if (!IsHex(txid)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected hex txid\");\n+        }\n \n-        int nOutput = find_value(o, \"vout\").get_int();\n-        if (nOutput < 0)\n+        const int nOutput = find_value(o, \"vout\").get_int();\n+        if (nOutput < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n+        }\n \n-        COutPoint outpt(uint256S(txid), nOutput);\n+        const COutPoint outpt(uint256S(txid), nOutput);\n \n-        if (fUnlock)\n-            pwallet->UnlockCoin(outpt);\n-        else\n-            pwallet->LockCoin(outpt);\n+        const auto it = pwallet->mapWallet.find(outpt.hash);\n+        if (it == pwallet->mapWallet.end()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n+        }\n+\n+        const CWalletTx& trans = it->second;\n+\n+        if (outpt.n >= trans.tx->vout.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n+        }\n+\n+        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n+        }\n+\n+        const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);\n+\n+        if (fUnlock && !is_locked) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n+        }\n+\n+        if (!fUnlock && is_locked) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n+        }\n+\n+        outputs.push_back(outpt);\n+    }\n+\n+    // Atomically set (un)locked status for the outputs.\n+    for (const COutPoint& outpt : outputs) {\n+        if (fUnlock) pwallet->UnlockCoin(outpt);\n+        else pwallet->LockCoin(outpt);\n     }\n \n     return true;"
      },
      {
        "sha": "db60df18ede0089fd36ccc851c288550bf0c6bfa",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28f8b6657764c7746645a6e75dfb09ffc0597322/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28f8b6657764c7746645a6e75dfb09ffc0597322/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=28f8b6657764c7746645a6e75dfb09ffc0597322",
        "patch": "@@ -100,11 +100,19 @@ def run_test(self):\n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n+        assert_raises_rpc_error(-8, \"Invalid parameter, expected locked output\", self.nodes[2].lockunspent, True, [unspent_0])\n         self.nodes[2].lockunspent(False, [unspent_0])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, output already locked\", self.nodes[2].lockunspent, False, [unspent_0])\n         assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+        assert_raises_rpc_error(-8, \"Invalid parameter, unknown transaction\",\n+                              self.nodes[2].lockunspent, False,\n+                              [{\"txid\": \"0000000000000000000000000000000000\", \"vout\": 0}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, vout index out of bounds\",\n+                              self.nodes[2].lockunspent, False,\n+                              [{\"txid\": unspent_0[\"txid\"], \"vout\": 999}])\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n@@ -143,6 +151,10 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), 94)\n         assert_equal(self.nodes[2].getbalance(\"from1\"), 94-21)\n \n+        # Verify that a spent output cannot be locked anymore\n+        spent_0 = {\"txid\": node0utxos[0][\"txid\"], \"vout\": node0utxos[0][\"vout\"]}\n+        assert_raises_rpc_error(-8, \"Invalid parameter, expected unspent output\", self.nodes[0].lockunspent, False, [spent_0])\n+\n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n         fee_per_byte = Decimal('0.001') / 1000"
      }
    ]
  }
]