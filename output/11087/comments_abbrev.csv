BitonicEelis,2017-08-18T14:59:10Z,"Amended to:\n- comply with variable naming policy\n- reject attempts to lock already locked outputs\n- remove MINE check",https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-323377048,323377048,
BitonicEelis,2017-08-18T15:15:06Z,Amended to use curly brackets in accordance with developer notes.,https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-323381252,323381252,
meshcollider,2017-08-19T01:30:59Z,utACK https://github.com/bitcoin/bitcoin/pull/11087/commits/918b6db42b12d86a01bdb70a4fc50244aa2ce623,https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-323491618,323491618,
laanwj,2017-08-22T15:57:15Z,utACK https://github.com/bitcoin/bitcoin/pull/11087/commits/918b6db42b12d86a01bdb70a4fc50244aa2ce623,https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-324071559,324071559,
BitonicEelis,2017-08-29T08:45:55Z,"Amended to:\n- store COutPoints in vector instead of recomputing them\n- include ""invalid parameter:"" error prefix in expectations in test\n- make unlock errors more precise\n\n@ryanofsky Unfortunately, range-for cannot be used to iterate over a UniValue because it does not provide begin()/end().\n\nThanks for the feedback!\n",https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-325597154,325597154,
BitonicEelis,2017-09-01T09:36:47Z,"Amended to:\n\n- remove isObject check\n- indent continued function call lines to match opening parenthesis\n- call lockunspent on correct node in test",https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-326536740,326536740,
jnewbery,2017-09-01T13:27:11Z,Tested ACK fe2c95bda22c21252709cc1088d7e61a8c8b1df8. Looks great. Thanks for being receptive to all my feedback!,https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-326579724,326579724,
BitonicEelis,2017-10-12T14:04:40Z,"Amended/rebased to:\n- use `assert_raises_rpc_error`;\n- use references to avoid copying a UniValue and std::string, as suggested by ryanofsky.",https://github.com/bitcoin/bitcoin/pull/11087#issuecomment-336147475,336147475,
promag,2017-08-18T13:53:51Z,"```cpp\nbool is_locked = ...;\n```",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133964122,133964122,src/wallet/rpcwallet.cpp
promag,2017-08-18T13:59:11Z,"No need to chain:\n```cpp\nif (fUnlock && !is_locked) {\n    throw ...;\n}\n\nif (!fUnlock && is_locked) {\n    throw ...;\n}\n\n...\n```",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133965567,133965567,src/wallet/rpcwallet.cpp
promag,2017-08-18T14:03:47Z,I think is must be either `ISMINE_SPENDABLE` or `ISMINE_WATCH_SOLVABLE`?,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133966620,133966620,src/wallet/rpcwallet.cpp
promag,2017-08-18T14:33:18Z,"Do we really have to test `IsMine` and all? In the wallet it's just a `std::set<COutPoint>`, so IMO is enough to check:\n- if the input is valid output\n- if the lock state is compatible with the argument.\n\nBut if there is interest in doing these tests, then perform the cheapest first.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133973376,133973376,src/wallet/rpcwallet.cpp
BitonicEelis,2017-08-18T14:43:06Z,Thanks for the review! Are you absolutely sure that attempting to lock an already locked output should be an error?,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133975714,133975714,src/wallet/rpcwallet.cpp
promag,2017-08-18T14:46:30Z,"IMO yes, it indicates it was locked by other client and as such it is not yours to use?",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133976609,133976609,src/wallet/rpcwallet.cpp
BitonicEelis,2017-08-18T14:58:01Z,"Ok, makes sense!",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133979449,133979449,src/wallet/rpcwallet.cpp
BitonicEelis,2017-08-18T14:58:17Z,I'll remove the check for now. It can always be added later.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133979518,133979518,src/wallet/rpcwallet.cpp
promag,2017-08-18T15:07:54Z,Missing `{}` and `{` is one the same line. Same below. See [developer notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md).,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133981979,133981979,src/wallet/rpcwallet.cpp
BitonicEelis,2017-08-18T15:14:22Z,Will do! Thanks for caring about consistent style. :),https://github.com/bitcoin/bitcoin/pull/11087#discussion_r133983628,133983628,src/wallet/rpcwallet.cpp
promag,2017-08-22T23:51:22Z,Assert complete error message? cc @jnewbery,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r134628652,134628652,test/functional/wallet.py
promag,2017-08-22T23:51:36Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r134628688,134628688,test/functional/wallet.py
promag,2017-08-22T23:52:27Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r134628801,134628801,test/functional/wallet.py
promag,2017-08-22T23:52:34Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r134628812,134628812,test/functional/wallet.py
promag,2017-08-22T23:52:46Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r134628843,134628843,test/functional/wallet.py
jnewbery,2017-08-24T16:26:08Z,"Personally, I don't think the complete error message needs to be asserted, as long as the string is long enough to disambiguate. But also fine to change this to the complete string.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135064450,135064450,test/functional/wallet.py
jnewbery,2017-08-25T16:18:00Z,"Why are these three checks (""expected unspent"", ""unknown transaction"" and ""vout index out of bounds"") only done when trying to lock? Isn't it equally invalid to try to unlock bad txouts? Can you place these three checks above the `const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);` line?",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135297929,135297929,src/wallet/rpcwallet.cpp
jnewbery,2017-08-25T16:19:36Z,You could save reparsing the json by saving a vector of `COutPoint`s in the first pass.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135298270,135298270,src/wallet/rpcwallet.cpp
Eelis,2017-08-25T21:41:23Z,"These loops don't do any json parsing, because the data is already in a UniValue. The `find_value` calls find the desired value in UniValue's internal std::vector of values.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135358985,135358985,src/wallet/rpcwallet.cpp
Eelis,2017-08-26T09:57:53Z,"The idea was that in all three of those cases (already spent output, unknown transaction, and vout index out of bounds), `IsLockedCoin` should already have returned false, so checking `!is_locked` should be enough.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135386051,135386051,src/wallet/rpcwallet.cpp
jnewbery,2017-08-28T15:04:06Z,"You're right. There's no reparsing the JSON, just rereading the string and reconstructing the COutPoint.\n\nI think either way is fine. Whichever you prefer.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135548030,135548030,src/wallet/rpcwallet.cpp
jnewbery,2017-08-28T15:07:35Z,"I agree that the function will correctly return an error, but I think that it's better to return the more precise error if possible. `expected unspent output`, `unknown transaction` and `vout index out of bounds` are better to return than `expected locked output` (the last could infer that the outpoint exists but is unlocked).",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135548849,135548849,src/wallet/rpcwallet.cpp
Eelis,2017-08-28T22:27:04Z,"Makes sense, I'll make the errors more precise.",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r135651295,135651295,src/wallet/rpcwallet.cpp
jnewbery,2017-08-31T18:36:59Z,"You can remove this check entirely. Type checking is done by the `UniValue.get_xxx()` functions, and returns almost an identical error to that given by this explicit check.\n\nWith the explicit check:\n\n```\n→ bitcoin-cli -rpcwallet=w1 lockunspent true [\""string\""]\nerror code: -8\nerror message:\nInvalid parameter, expected\n```\n\nwithout:\n\n```\n→ bitcoin-cli -rpcwallet=w1 locku",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136415208,136415208,src/wallet/rpcwallet.cpp
jnewbery,2017-08-31T18:37:46Z,"In contrast to my comment above, it makes sense to keep these. `RPCTypeCheckObj` provides slightly more information (both the type expected and type received)",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136415436,136415436,src/wallet/rpcwallet.cpp
jnewbery,2017-08-31T18:38:37Z,"This is the bug. `lockunspent()` should be called on `self.nodes[0]`, not `self.nodes[2]`",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136415671,136415671,test/functional/wallet.py
jnewbery,2017-08-31T18:49:32Z,"I personally don't like this indentation style. It looks like something between a new line and a new code block.\n\nWould you mind aligning this continuation line with the opening parens:\n\n```python\n    assert_raises_jsonrpc(-8, ""Invalid parameter, unknown transaction"",\n                          self.nodes[2].lockunspent, False, [{""txid"": ""0000000000000000000000000000000000"", ""vout"": 0}]",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136418450,136418450,test/functional/wallet.py
BitonicEelis,2017-09-01T09:11:10Z,"Thanks! This one stumped me because for some reason when I ran the wallet tests locally, they didn't fail..",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136531131,136531131,test/functional/wallet.py
jnewbery,2017-09-01T12:33:11Z,Yes! I saw the same thing. Very odd. h/t @sdaftuar for spotting the bug.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r136564156,136564156,test/functional/wallet.py
MarcoFalke,2017-10-09T19:10:26Z,"Needs rebase and replace with ""assert_raises_rpc_error""",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r143553206,143553206,test/functional/wallet.py
ryanofsky,2017-10-10T20:58:29Z,Could declare as `const UniValue&` to avoid copying params.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r143850484,143850484,src/wallet/rpcwallet.cpp
ryanofsky,2017-10-10T21:02:29Z,Could declare as `const std::string&` to avoid copying string.,https://github.com/bitcoin/bitcoin/pull/11087#discussion_r143851454,143851454,src/wallet/rpcwallet.cpp
sipa,2017-10-12T23:45:13Z,"Coding style nit; if with else always needs braces/indentation (I know the original code you're rewriting wasn't following this convention, but in new code we try to).",https://github.com/bitcoin/bitcoin/pull/11087#discussion_r144437376,144437376,src/wallet/rpcwallet.cpp
