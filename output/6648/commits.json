[
  {
    "sha": "9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2RjMzM1M2M1Y2IzMGI2YWVkZjA0ZWE4YmRmZjkxMzU3NTFkNzJk",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-09-07T18:38:03Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-09-07T18:38:03Z"
      },
      "message": "Simplify logic of REST request suffix parsing.\n\nThis patch changes the way the suffix (giving the requested data format) is\nparsed for REST requests.  Before, the string was split at '.'\ncharacters and it was assumed that the second part was the suffix.\n\nNow, we look for the last dot and use that to determine the suffix.\nThis allows for strings that contain dots (not used now, though), and\nseems, in general, to be clearer and more intuitive.",
      "tree": {
        "sha": "b6d272cdf9638a9c61241f1902cdfc25bc6a966f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6d272cdf9638a9c61241f1902cdfc25bc6a966f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 32,
      "deletions": 25
    },
    "files": [
      {
        "sha": "226e237fc649d75bfa4811fc902791768f6c45d9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 25,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
        "patch": "@@ -71,15 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message\n     return false;\n }\n \n-static enum RetFormat ParseDataFormat(vector<string>& params, const string& strReq)\n+static enum RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n-    boost::split(params, strReq, boost::is_any_of(\".\"));\n-    if (params.size() > 1) {\n-        for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n-            if (params[1] == rf_names[i].name)\n-                return rf_names[i].rf;\n+    const std::string::size_type pos = strReq.rfind('.');\n+    if (pos == std::string::npos)\n+    {\n+        param = strReq;\n+        return rf_names[0].rf;\n     }\n \n+    param = strReq.substr(0, pos);\n+    const std::string suff(strReq, pos + 1);\n+\n+    for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n+        if (suff == rf_names[i].name)\n+            return rf_names[i].rf;\n+\n+    /* If no suffix is found, return original string.  */\n+    param = strReq;\n     return rf_names[0].rf;\n }\n \n@@ -121,10 +130,10 @@ static bool rest_headers(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n     vector<string> path;\n-    boost::split(path, params[0], boost::is_any_of(\"/\"));\n+    boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n@@ -196,10 +205,9 @@ static bool rest_block(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -268,8 +276,8 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -293,8 +301,8 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -318,8 +326,8 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -343,10 +351,9 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -396,13 +403,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     vector<string> uriParts;\n-    if (params.size() > 0 && params[0].length() > 1)\n+    if (param.length() > 1)\n     {\n-        std::string strUriParams = params[0].substr(1);\n+        std::string strUriParams = param.substr(1);\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n "
      }
    ]
  }
]