[
  {
    "sha": "b06bc2937bb9f625f675914bc6a59d9ba58de749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDZiYzI5MzdiYjlmNjI1ZjY3NTkxNGJjNmE1OWQ5YmE1OGRlNzQ5",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T14:48:26Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Improve QT_VERSION tests.\n\nUse '<QtCore/qconfig.h> and '<QtCore/qglobal.h>' for testing QT_VERSION.\nThis makes the tests work with both Qt4 and Qt5, even if '-fPIC' or '-fPIE'\nis not used (the compiler might choke otherwise if QT_REDUCE_RELOCATIONS is\nactive).",
      "tree": {
        "sha": "913c0c3d50b1f466f6b669e889d1b58c55e908f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/913c0c3d50b1f466f6b669e889d1b58c55e908f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b06bc2937bb9f625f675914bc6a59d9ba58de749",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b06bc2937bb9f625f675914bc6a59d9ba58de749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b06bc2937bb9f625f675914bc6a59d9ba58de749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b06bc2937bb9f625f675914bc6a59d9ba58de749/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce665863b137ac4a7470cf006a92aa7694faca71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce665863b137ac4a7470cf006a92aa7694faca71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce665863b137ac4a7470cf006a92aa7694faca71"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 55,
      "deletions": 29
    },
    "files": [
      {
        "sha": "52d46a385baf7c0dc2113d35daa03ced69c5b4c9",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 55,
        "deletions": 29,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b06bc2937bb9f625f675914bc6a59d9ba58de749/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b06bc2937bb9f625f675914bc6a59d9ba58de749/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=b06bc2937bb9f625f675914bc6a59d9ba58de749",
        "patch": "@@ -118,11 +118,17 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     if test x$bitcoin_cv_static_qt = xyes; then\n       _BITCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-          [[#include <QtCore>]],[[\n-          #if QT_VERSION >= 0x050400\n-          choke;\n-          #endif\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n+        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+            #include <QtCore/qconfig.h>\n+            #ifndef QT_VERSION\n+            #  include <QtCore/qglobal.h>\n+            #endif\n+          ]],\n+          [[\n+            #if QT_VERSION >= 0x050400\n+            choke\n+            #endif\n           ]])],\n         [bitcoin_cv_need_acc_widget=yes],\n         [bitcoin_cv_need_acc_widget=no])\n@@ -173,11 +179,16 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     TEMP_CXXFLAGS=$CXXFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     CXXFLAGS=\"$PIE_FLAGS $CXXFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n       [[\n-          #if defined(QT_REDUCE_RELOCATIONS)\n-              choke;\n-          #endif\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n       ]])],\n       [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n       [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n@@ -190,11 +201,16 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n     TEMP_CPPFLAGS=$CPPFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <QtCore/qconfig.h>]],\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <QtCore/qconfig.h>\n+        #ifndef QT_VERSION\n+        #  include <QtCore/qglobal.h>\n+        #endif\n+      ]],\n       [[\n-          #if defined(QT_REDUCE_RELOCATIONS)\n-              choke;\n-          #endif\n+        #if defined(QT_REDUCE_RELOCATIONS)\n+        choke\n+        #endif\n       ]])],\n       [ AC_MSG_RESULT(no)],\n       [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n@@ -269,13 +285,15 @@ dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n   AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-    [[#include <QtCore>]],\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n     [[\n       #if QT_VERSION < 0x050000\n-      choke me\n-      #else\n-      return 0;\n+      choke\n       #endif\n     ]])],\n     [bitcoin_cv_qt5=yes],\n@@ -289,13 +307,15 @@ dnl Output: bitcoin_cv_static_qt=yes|no\n dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n   AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-    [[#include <QtCore>]],\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n     [[\n-      #if defined(QT_STATIC)\n-      return 0;\n-      #else\n-      choke me\n+      #if !defined(QT_STATIC)\n+      choke\n       #endif\n     ]])],\n     [bitcoin_cv_static_qt=yes],\n@@ -352,11 +372,17 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n      ])\n      else\n        if test x$TARGET_OS = xwindows; then\n-         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n-             [[#include <QtCore>]],[[\n-             #if QT_VERSION < 0x050600\n-             choke;\n-             #endif\n+         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[\n+           AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+               #include <QtCore/qconfig.h>\n+               #ifndef QT_VERSION\n+               #  include <QtCore/qglobal.h>\n+               #endif\n+             ]],\n+             [[\n+               #if QT_VERSION < 0x050600\n+               choke\n+               #endif\n              ]])],\n            [bitcoin_cv_need_platformsupport=yes],\n            [bitcoin_cv_need_platformsupport=no])"
      }
    ]
  },
  {
    "sha": "28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODY0MWUyYmZlMGFmOWFmNWQ4YjkxYjhiZDRkNThkMTljNGE4ZmM2",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T17:34:18Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Use correct M4 quoting characters.",
      "tree": {
        "sha": "c5e24ac18d9844948a0541fb8d516d769d4b65e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e24ac18d9844948a0541fb8d516d769d4b65e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b06bc2937bb9f625f675914bc6a59d9ba58de749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b06bc2937bb9f625f675914bc6a59d9ba58de749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b06bc2937bb9f625f675914bc6a59d9ba58de749"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6737a52b77f431fb342fc07dec02cc6230416ec4",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
        "patch": "@@ -254,10 +254,10 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       bitcoin_enable_qt_dbus=yes\n     fi\n     if test x$use_dbus = xyes && test x$have_qt_dbus = xno; then\n-      AC_MSG_ERROR(\"libQtDBus not found. Install libQtDBus or remove --with-qtdbus.\")\n+      AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n     if test x$LUPDATE = x; then\n-      AC_MSG_WARN(\"lupdate is required to update qt translations\")\n+      AC_MSG_WARN([lupdate is required to update qt translations])\n     fi\n   ],[\n     bitcoin_enable_qt=no"
      }
    ]
  },
  {
    "sha": "0d9837ed39a50211e8cafaffa7758a0f960f756c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDk4MzdlZDM5YTUwMjExZThjYWZhZmZhNzc1OGEwZjk2MGY3NTZj",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T17:42:07Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Add missing braces around variables in autoconf messages.",
      "tree": {
        "sha": "cc59dfc98ae674c7792e55c9f11c75aadbbc9925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc59dfc98ae674c7792e55c9f11c75aadbbc9925"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d9837ed39a50211e8cafaffa7758a0f960f756c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d9837ed39a50211e8cafaffa7758a0f960f756c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d9837ed39a50211e8cafaffa7758a0f960f756c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d9837ed39a50211e8cafaffa7758a0f960f756c/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28641e2bfe0af9af5d8b91b8bd4d58d19c4a8fc6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4adbb6640cc5f01b5c5e3e4a00b918069ce9ca12",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d9837ed39a50211e8cafaffa7758a0f960f756c/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d9837ed39a50211e8cafaffa7758a0f960f756c/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=0d9837ed39a50211e8cafaffa7758a0f960f756c",
        "patch": "@@ -388,7 +388,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n            [bitcoin_cv_need_platformsupport=no])\n          ])\n          if test x$bitcoin_cv_need_platformsupport = xyes; then\n-           BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXPlatformSupport not found)))\n+           BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}PlatformSupport not found)))\n          fi\n        fi\n      fi\n@@ -505,11 +505,11 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n   if test x$bitcoin_qt_got_major_vers = x5; then\n-    BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXWidgets not found)))\n+    BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n   fi\n   QT_LIBS=\"$LIBS\"\n   LIBS=\"$TEMP_LIBS\""
      }
    ]
  },
  {
    "sha": "c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjA4N2M5YjIxYzE2OWUzZDE4NzVmM2IxMzhhNzNjYzc3NzFmNmNl",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T17:46:31Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Add missing dollar sign for variable.",
      "tree": {
        "sha": "654040b832dd66338cf79d75d091fb58ad67bea4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/654040b832dd66338cf79d75d091fb58ad67bea4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6087c9b21c169e3d1875f3b138a73cc7771f6ce/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d9837ed39a50211e8cafaffa7758a0f960f756c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d9837ed39a50211e8cafaffa7758a0f960f756c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d9837ed39a50211e8cafaffa7758a0f960f756c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8f442430e756493c4559c88cb21e6b75316640a4",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6087c9b21c169e3d1875f3b138a73cc7771f6ce/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6087c9b21c169e3d1875f3b138a73cc7771f6ce/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
        "patch": "@@ -321,7 +321,7 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n     [bitcoin_cv_static_qt=yes],\n     [bitcoin_cv_static_qt=no])\n   ])\n-  if test xbitcoin_cv_static_qt = xyes; then\n+  if test x$bitcoin_cv_static_qt = xyes; then\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n   fi\n ])"
      }
    ]
  },
  {
    "sha": "e90d91c6f31e4b8fe74029fecfacf56190c217aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTBkOTFjNmYzMWU0YjhmZTc0MDI5ZmVjZmFjZjU2MTkwYzIxN2Fh",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T18:38:50Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Orthogonalize string quoting.\n\nAdd double qoutes to string tests where arguments could (theoretically)\ncontain spaces.\n\nRemove double quotes where not necessary.",
      "tree": {
        "sha": "836cfdae04e34428601c2a1d5dd1f7fd329a435d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/836cfdae04e34428601c2a1d5dd1f7fd329a435d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e90d91c6f31e4b8fe74029fecfacf56190c217aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e90d91c6f31e4b8fe74029fecfacf56190c217aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e90d91c6f31e4b8fe74029fecfacf56190c217aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e90d91c6f31e4b8fe74029fecfacf56190c217aa/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6087c9b21c169e3d1875f3b138a73cc7771f6ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6087c9b21c169e3d1875f3b138a73cc7771f6ce"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 48,
      "deletions": 48
    },
    "files": [
      {
        "sha": "f41508336ca07163a5768747120f0005855e12d6",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 48,
        "deletions": 48,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e90d91c6f31e4b8fe74029fecfacf56190c217aa/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e90d91c6f31e4b8fe74029fecfacf56190c217aa/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=e90d91c6f31e4b8fe74029fecfacf56190c217aa",
        "patch": "@@ -5,8 +5,8 @@ dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n dnl Helper for cases where a qt dependency is not met.\n dnl Output: If qt version is auto, set bitcoin_enable_qt to false. Else, exit.\n AC_DEFUN([BITCOIN_QT_FAIL],[\n-  if test \"x$bitcoin_qt_want_version\" = \"xauto\" && test x$bitcoin_qt_force != xyes; then\n-    if test x$bitcoin_enable_qt != xno; then\n+  if test \"x$bitcoin_qt_want_version\" = xauto && test \"x$bitcoin_qt_force\" != xyes; then\n+    if test \"x$bitcoin_enable_qt\" != xno; then\n       AC_MSG_WARN([$1; bitcoin-qt frontend will not be built])\n     fi\n     bitcoin_enable_qt=no\n@@ -17,7 +17,7 @@ AC_DEFUN([BITCOIN_QT_FAIL],[\n ])\n \n AC_DEFUN([BITCOIN_QT_CHECK],[\n-  if test \"x$bitcoin_enable_qt\" != \"xno\" && test x$bitcoin_qt_want_version != xno; then\n+  if test \"x$bitcoin_enable_qt\" != xno && test \"x$bitcoin_qt_want_version\" != xno; then\n     true\n     $1\n   else\n@@ -35,12 +35,12 @@ dnl Inputs: $4: If \"yes\", don't fail if $2 is not found.\n dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n   BITCOIN_QT_CHECK([\n-    if test \"x$3\" != \"x\"; then\n+    if test \"x$3\" != x; then\n       AC_PATH_PROGS($1,$2,,$3)\n     else\n       AC_PATH_PROGS($1,$2)\n     fi\n-    if test \"x$$1\" = \"x\" && test \"x$4\" != \"xyes\"; then\n+    if test \"x$$1\" = x && test \"x$4\" != xyes; then\n       BITCOIN_QT_FAIL([$1 not found])\n     fi\n   ])\n@@ -57,7 +57,7 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n     [build bitcoin-qt GUI (default=auto, qt5 tried first)])],\n     [\n      bitcoin_qt_want_version=$withval\n-     if test x$bitcoin_qt_want_version = xyes; then\n+     if test \"x$bitcoin_qt_want_version\" = xyes; then\n        bitcoin_qt_force=yes\n        bitcoin_qt_want_version=auto\n      fi\n@@ -89,11 +89,11 @@ dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   use_pkgconfig=$1\n \n-  if test x$use_pkgconfig = x; then\n+  if test \"x$use_pkgconfig\" = x; then\n     use_pkgconfig=yes\n   fi\n \n-  if test x$use_pkgconfig = xyes; then\n+  if test \"x$use_pkgconfig\" = xyes; then\n     BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG([$2])])\n   else\n     BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG])\n@@ -113,9 +113,9 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   TEMP_CXXFLAGS=$CXXFLAGS\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n-  if test x$bitcoin_qt_got_major_vers = x5; then\n+  if test \"x$bitcoin_qt_got_major_vers\" = x5; then\n     _BITCOIN_QT_IS_STATIC\n-    if test x$bitcoin_cv_static_qt = xyes; then\n+    if test \"x$bitcoin_cv_static_qt\" = xyes; then\n       _BITCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n@@ -133,25 +133,25 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         [bitcoin_cv_need_acc_widget=yes],\n         [bitcoin_cv_need_acc_widget=no])\n       ])\n-      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+      if test \"x$bitcoin_cv_need_acc_widget\" = xyes; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n       AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n-      if test x$TARGET_OS = xwindows; then\n+      if test \"x$TARGET_OS\" = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n-      elif test x$TARGET_OS = xlinux; then\n+      elif test \"x$TARGET_OS\" = xlinux; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n-      elif test x$TARGET_OS = xdarwin; then\n+      elif test \"x$TARGET_OS\" = xdarwin; then\n         AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n         AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n       fi\n     fi\n   else\n-    if test x$TARGET_OS = xwindows; then\n+    if test \"x$TARGET_OS\" = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n@@ -166,13 +166,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n-  if test x$use_pkgconfig$qt_bin_path = xyes; then\n-    if test x$bitcoin_qt_got_major_vers = x5; then\n+  if test \"x$use_pkgconfig$qt_bin_path\" = xyes; then\n+    if test \"x$bitcoin_qt_got_major_vers\" = x5; then\n       qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n     fi\n   fi\n \n-  if test x$use_hardening != xno; then\n+  if test \"x$use_hardening\" != xno; then\n     BITCOIN_QT_CHECK([\n     AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n     TEMP_CPPFLAGS=$CPPFLAGS\n@@ -246,17 +246,17 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n-    if test x$have_qt_test = xno; then\n+    if test \"x$have_qt_test\" = xno; then\n       bitcoin_enable_qt_test=no\n     fi\n     bitcoin_enable_qt_dbus=no\n-    if test x$use_dbus != xno && test x$have_qt_dbus = xyes; then\n+    if test \"x$use_dbus\" != xno && test \"x$have_qt_dbus\" = xyes; then\n       bitcoin_enable_qt_dbus=yes\n     fi\n-    if test x$use_dbus = xyes && test x$have_qt_dbus = xno; then\n+    if test \"x$use_dbus\" = xyes && test \"x$have_qt_dbus\" = xno; then\n       AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n-    if test x$LUPDATE = x; then\n+    if test \"x$LUPDATE\" = x; then\n       AC_MSG_WARN([lupdate is required to update qt translations])\n     fi\n   ],[\n@@ -321,7 +321,7 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n     [bitcoin_cv_static_qt=yes],\n     [bitcoin_cv_static_qt=no])\n   ])\n-  if test x$bitcoin_cv_static_qt = xyes; then\n+  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n   fi\n ])\n@@ -350,28 +350,28 @@ dnl Inputs: bitcoin_qt_got_major_vers. 4 or 5.\n dnl Inputs: qt_plugin_path. optional.\n dnl Outputs: QT_LIBS is appended\n AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n-  if test x$bitcoin_qt_got_major_vers = x5; then\n-      if test x$qt_plugin_path != x; then\n+  if test \"x$bitcoin_qt_got_major_vers\" = x5; then\n+      if test \"x$qt_plugin_path\" != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n         if test -d \"$qt_plugin_path/accessible\"; then\n           QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         fi\n       fi\n-     if test x$use_pkgconfig = xyes; then\n+     if test \"x$use_pkgconfig\" = xyes; then\n      : dnl\n      m4_ifdef([PKG_CHECK_MODULES],[\n        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n-       if test x$TARGET_OS = xlinux; then\n+       if test \"x$TARGET_OS\" = xlinux; then\n          PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n          if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n            PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n          fi\n-       elif test x$TARGET_OS = xdarwin; then\n+       elif test \"x$TARGET_OS\" = xdarwin; then\n          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n        fi\n      ])\n      else\n-       if test x$TARGET_OS = xwindows; then\n+       if test \"x$TARGET_OS\" = xwindows; then\n          AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[\n            AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                #include <QtCore/qconfig.h>\n@@ -387,13 +387,13 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n            [bitcoin_cv_need_platformsupport=yes],\n            [bitcoin_cv_need_platformsupport=no])\n          ])\n-         if test x$bitcoin_cv_need_platformsupport = xyes; then\n+         if test \"x$bitcoin_cv_need_platformsupport\" = xyes; then\n            BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}PlatformSupport not found)))\n          fi\n        fi\n      fi\n   else\n-    if test x$qt_plugin_path != x; then\n+    if test \"x$qt_plugin_path\" != x; then\n       QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n       QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n     fi\n@@ -411,10 +411,10 @@ dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n   m4_ifdef([PKG_CHECK_MODULES],[\n   auto_priority_version=$1\n-  if test x$auto_priority_version = x; then\n+  if test \"x$auto_priority_version\" = x; then\n     auto_priority_version=qt5\n   fi\n-    if test x$bitcoin_qt_want_version = xqt5 ||  ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n+    if test \"x$bitcoin_qt_want_version\" = xqt5 ||  ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -424,28 +424,28 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     qt4_modules=\"QtCore QtGui QtNetwork\"\n     BITCOIN_QT_CHECK([\n-      if test x$bitcoin_qt_want_version = xqt5 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n+      if test \"x$bitcoin_qt_want_version\" = xqt5 || ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n         PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n-      elif test x$bitcoin_qt_want_version = xqt4 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt4 ); then\n+      elif test \"x$bitcoin_qt_want_version\" = xqt4 || ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt4 ); then\n         PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes], [have_qt=no])\n       fi\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n-      if test x$have_qt = xno && test x$bitcoin_qt_want_version = xauto; then\n-        if test x$auto_priority_version = xqt5; then\n+      if test \"x$have_qt\" = xno && test \"x$bitcoin_qt_want_version\" = xauto; then\n+        if test \"x$auto_priority_version\" = xqt5; then\n           PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4], [have_qt=no])\n         else\n           PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt5; bitcoin_qt_got_major_vers=5], [have_qt=no])\n         fi\n       fi\n-      if test x$have_qt != xyes; then\n+      if test \"x$have_qt\" != xyes; then\n         have_qt=no\n         BITCOIN_QT_FAIL([Qt dependencies not found])\n       fi\n     ])\n     BITCOIN_QT_CHECK([\n       PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n-      if test x$use_dbus != xno; then\n+      if test \"x$use_dbus\" != xno; then\n         PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n       fi\n     ])\n@@ -466,7 +466,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n-    if test x$qt_include_path != x; then\n+    if test \"x$qt_include_path\" != x; then\n       QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n       CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     fi\n@@ -477,10 +477,10 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],, BITCOIN_QT_FAIL(QtNetwork headers missing))])\n \n   BITCOIN_QT_CHECK([\n-    if test x$bitcoin_qt_want_version = xauto; then\n+    if test \"x$bitcoin_qt_want_version\" = xauto; then\n       _BITCOIN_QT_CHECK_QT5\n     fi\n-    if test x$bitcoin_cv_qt5 = xyes || test x$bitcoin_qt_want_version = xqt5; then\n+    if test \"x$bitcoin_cv_qt5\" = xyes || test \"x$bitcoin_qt_want_version\" = xqt5; then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -491,11 +491,11 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n \n   BITCOIN_QT_CHECK([\n     LIBS=\n-    if test x$qt_lib_path != x; then\n+    if test \"x$qt_lib_path\" != x; then\n       LIBS=\"$LIBS -L$qt_lib_path\"\n     fi\n \n-    if test x$TARGET_OS = xwindows; then\n+    if test \"x$TARGET_OS\" = xwindows; then\n       AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n     fi\n   ])\n@@ -508,23 +508,23 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n-  if test x$bitcoin_qt_got_major_vers = x5; then\n+  if test \"x$bitcoin_qt_got_major_vers\" = x5; then\n     BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n   fi\n   QT_LIBS=\"$LIBS\"\n   LIBS=\"$TEMP_LIBS\"\n \n   BITCOIN_QT_CHECK([\n     LIBS=\n-    if test x$qt_lib_path != x; then\n+    if test \"x$qt_lib_path\" != x; then\n       LIBS=\"-L$qt_lib_path\"\n     fi\n     AC_CHECK_LIB([${QT_LIB_PREFIX}Test],      [main],, have_qt_test=no)\n     AC_CHECK_HEADER([QTest],, have_qt_test=no)\n     QT_TEST_LIBS=\"$LIBS\"\n-    if test x$use_dbus != xno; then\n+    if test \"x$use_dbus\" != xno; then\n       LIBS=\n-      if test x$qt_lib_path != x; then\n+      if test \"x$qt_lib_path\" != x; then\n         LIBS=\"-L$qt_lib_path\"\n       fi\n       AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],      [main],, have_qt_dbus=no)"
      }
    ]
  },
  {
    "sha": "40c8a65c5653d6cfd7859700fe4e7d6468ce2231",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGM4YTY1YzU2NTNkNmNmZDc4NTk3MDBmZTRlN2Q2NDY4Y2UyMjMx",
    "commit": {
      "author": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-08-22T18:44:18Z"
      },
      "committer": {
        "name": "Werner Lemberg",
        "email": "wl@gnu.org",
        "date": "2017-09-03T06:45:13Z"
      },
      "message": "bitcoin_qt.m4: Orthogonalize M4 quoting.\n\nConsequently quote all arguments of M4 functions.\n\nMark empty M4 arguments with '[]'.",
      "tree": {
        "sha": "53a36fff4b9e1d744a32c2d7d02bb7578ed63f31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a36fff4b9e1d744a32c2d7d02bb7578ed63f31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40c8a65c5653d6cfd7859700fe4e7d6468ce2231",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c8a65c5653d6cfd7859700fe4e7d6468ce2231",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40c8a65c5653d6cfd7859700fe4e7d6468ce2231",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40c8a65c5653d6cfd7859700fe4e7d6468ce2231/comments",
    "author": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lemzwerg",
      "id": 1630245,
      "node_id": "MDQ6VXNlcjE2MzAyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1630245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lemzwerg",
      "html_url": "https://github.com/lemzwerg",
      "followers_url": "https://api.github.com/users/lemzwerg/followers",
      "following_url": "https://api.github.com/users/lemzwerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/lemzwerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lemzwerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lemzwerg/subscriptions",
      "organizations_url": "https://api.github.com/users/lemzwerg/orgs",
      "repos_url": "https://api.github.com/users/lemzwerg/repos",
      "events_url": "https://api.github.com/users/lemzwerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lemzwerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e90d91c6f31e4b8fe74029fecfacf56190c217aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e90d91c6f31e4b8fe74029fecfacf56190c217aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e90d91c6f31e4b8fe74029fecfacf56190c217aa"
      }
    ],
    "stats": {
      "total": 160,
      "additions": 80,
      "deletions": 80
    },
    "files": [
      {
        "sha": "290dc91ca2751c5332cf6f70fa387babd15fe72a",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 80,
        "deletions": 80,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40c8a65c5653d6cfd7859700fe4e7d6468ce2231/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40c8a65c5653d6cfd7859700fe4e7d6468ce2231/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=40c8a65c5653d6cfd7859700fe4e7d6468ce2231",
        "patch": "@@ -26,7 +26,7 @@ AC_DEFUN([BITCOIN_QT_CHECK],[\n   fi\n ])\n \n-dnl BITCOIN_QT_PATH_PROGS([FOO], [foo foo2], [/path/to/search/first], [continue if missing])\n+dnl BITCOIN_QT_PATH_PROGS(VAR, PROGRAMS, [/path/to/search/first], [continue if missing])\n dnl Helper for finding the path of programs needed for Qt.\n dnl Inputs: $1: Variable to be set\n dnl Inputs: $2: List of programs to search for\n@@ -36,9 +36,9 @@ dnl Output: $1 is set to the path of $2 if found. $2 are searched in order.\n AC_DEFUN([BITCOIN_QT_PATH_PROGS],[\n   BITCOIN_QT_CHECK([\n     if test \"x$3\" != x; then\n-      AC_PATH_PROGS($1,$2,,$3)\n+      AC_PATH_PROGS([$1],[$2],[],[$3])\n     else\n-      AC_PATH_PROGS($1,$2)\n+      AC_PATH_PROGS([$1],[$2])\n     fi\n     if test \"x$$1\" = x && test \"x$4\" != xyes; then\n       BITCOIN_QT_FAIL([$1 not found])\n@@ -64,19 +64,19 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n     ],\n     [bitcoin_qt_want_version=auto])\n \n-  AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n-  AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n-  AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n-  AC_ARG_WITH([qt-translationdir],[AS_HELP_STRING([--with-qt-translationdir=PLUGIN_DIR],[specify qt translation path (overridden by pkgconfig)])], [qt_translation_path=$withval], [])\n-  AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path])], [qt_bin_path=$withval], [])\n+  AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])],[qt_include_path=$withval],[])\n+  AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])],[qt_lib_path=$withval],[])\n+  AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])],[qt_plugin_path=$withval],[])\n+  AC_ARG_WITH([qt-translationdir],[AS_HELP_STRING([--with-qt-translationdir=PLUGIN_DIR],[specify qt translation path (overridden by pkgconfig)])],[qt_translation_path=$withval],[])\n+  AC_ARG_WITH([qt-bindir],[AS_HELP_STRING([--with-qt-bindir=BIN_DIR],[specify qt bin path])],[qt_bin_path=$withval],[])\n \n   AC_ARG_WITH([qtdbus],\n     [AS_HELP_STRING([--with-qtdbus],\n     [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n     [use_dbus=$withval],\n     [use_dbus=auto])\n \n-  AC_SUBST(QT_TRANSLATION_DIR,$qt_translation_path)\n+  AC_SUBST([QT_TRANSLATION_DIR],[$qt_translation_path])\n ])\n \n dnl Find the appropriate version of Qt libraries and includes.\n@@ -117,8 +117,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     _BITCOIN_QT_IS_STATIC\n     if test \"x$bitcoin_cv_static_qt\" = xyes; then\n       _BITCOIN_QT_FIND_STATIC_PLUGINS\n-      AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[\n+      AC_DEFINE([QT_STATICPLUGIN],[1],[Define this symbol if qt plugins are static])\n+      AC_CACHE_CHECK([for Qt < 5.4],[bitcoin_cv_need_acc_widget],[\n         AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n             #include <QtCore/qconfig.h>\n             #ifndef QT_VERSION\n@@ -134,25 +134,25 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         [bitcoin_cv_need_acc_widget=no])\n       ])\n       if test \"x$bitcoin_cv_need_acc_widget\" = xyes; then\n-        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)],[-lqtaccessiblewidgets])\n       fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n-      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+      AC_DEFINE([QT_QPA_PLATFORM_MINIMAL],[1],[Define this symbol if the minimal qt platform exists])\n       if test \"x$TARGET_OS\" = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n-        AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n+        AC_DEFINE([QT_QPA_PLATFORM_WINDOWS],[1],[Define this symbol if the qt platform is windows])\n       elif test \"x$TARGET_OS\" = xlinux; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n-        AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n+        AC_DEFINE([QT_QPA_PLATFORM_XCB],[1],[Define this symbol if the qt platform is xcb])\n       elif test \"x$TARGET_OS\" = xdarwin; then\n-        AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n+        AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR([could not iokit framework])])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n-        AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n+        AC_DEFINE([QT_QPA_PLATFORM_COCOA],[1],[Define this symbol if the qt platform is cocoa])\n       fi\n     fi\n   else\n     if test \"x$TARGET_OS\" = xwindows; then\n-      AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n+      AC_DEFINE([QT_STATICPLUGIN],[1],[Define this symbol if qt plugins are static])\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n          Q_IMPORT_PLUGIN(qjpcodecs)\n@@ -174,7 +174,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n   if test \"x$use_hardening\" != xno; then\n     BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIE can be used with this Qt config)\n+    AC_MSG_CHECKING([whether -fPIE can be used with this Qt config])\n     TEMP_CPPFLAGS=$CPPFLAGS\n     TEMP_CXXFLAGS=$CXXFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n@@ -190,15 +190,15 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         choke\n         #endif\n       ]])],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIE_FLAGS ],\n-      [ AC_MSG_RESULT(no); QT_PIE_FLAGS=$PIC_FLAGS]\n+      [ AC_MSG_RESULT([yes]); QT_PIE_FLAGS=$PIE_FLAGS ],\n+      [ AC_MSG_RESULT([no]); QT_PIE_FLAGS=$PIC_FLAGS]\n     )\n     CPPFLAGS=$TEMP_CPPFLAGS\n     CXXFLAGS=$TEMP_CXXFLAGS\n     ])\n   else\n     BITCOIN_QT_CHECK([\n-    AC_MSG_CHECKING(whether -fPIC is needed with this Qt config)\n+    AC_MSG_CHECKING([whether -fPIC is needed with this Qt config])\n     TEMP_CPPFLAGS=$CPPFLAGS\n     CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n@@ -212,37 +212,37 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         choke\n         #endif\n       ]])],\n-      [ AC_MSG_RESULT(no)],\n-      [ AC_MSG_RESULT(yes); QT_PIE_FLAGS=$PIC_FLAGS]\n+      [ AC_MSG_RESULT([no])],\n+      [ AC_MSG_RESULT([yes]); QT_PIE_FLAGS=$PIC_FLAGS]\n     )\n     CPPFLAGS=$TEMP_CPPFLAGS\n     ])\n   fi\n \n-  BITCOIN_QT_PATH_PROGS([MOC], [moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([UIC], [uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([LRELEASE], [lrelease-qt${bitcoin_qt_got_major_vers} lrelease${bitcoin_qt_got_major_vers} lrelease], $qt_bin_path)\n-  BITCOIN_QT_PATH_PROGS([LUPDATE], [lupdate-qt${bitcoin_qt_got_major_vers} lupdate${bitcoin_qt_got_major_vers} lupdate],$qt_bin_path, yes)\n+  BITCOIN_QT_PATH_PROGS([MOC],[moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc],[$qt_bin_path])\n+  BITCOIN_QT_PATH_PROGS([UIC],[uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic],[$qt_bin_path])\n+  BITCOIN_QT_PATH_PROGS([RCC],[rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc],[$qt_bin_path])\n+  BITCOIN_QT_PATH_PROGS([LRELEASE],[lrelease-qt${bitcoin_qt_got_major_vers} lrelease${bitcoin_qt_got_major_vers} lrelease],[$qt_bin_path])\n+  BITCOIN_QT_PATH_PROGS([LUPDATE],[lupdate-qt${bitcoin_qt_got_major_vers} lupdate${bitcoin_qt_got_major_vers} lupdate],[$qt_bin_path],[yes])\n \n   MOC_DEFS='-DHAVE_CONFIG_H -I$(srcdir)'\n   case $host in\n     *darwin*)\n      BITCOIN_QT_CHECK([\n        MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n        base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n-       AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n+       AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR([could not find base frameworks])])\n      ])\n     ;;\n     *mingw*)\n        BITCOIN_QT_CHECK([\n-         AX_CHECK_LINK_FLAG([[-mwindows]],[QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"],[AC_MSG_WARN(-mwindows linker support not detected)])\n+         AX_CHECK_LINK_FLAG([[-mwindows]],[QT_LDFLAGS=\"$QT_LDFLAGS -mwindows\"],[AC_MSG_WARN([-mwindows linker support not detected])])\n        ])\n   esac\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n+  AC_MSG_CHECKING([whether to build ]AC_PACKAGE_NAME[ GUI])\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n@@ -264,16 +264,16 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   ])\n   AC_MSG_RESULT([$bitcoin_enable_qt (Qt${bitcoin_qt_got_major_vers})])\n \n-  AC_SUBST(QT_PIE_FLAGS)\n-  AC_SUBST(QT_INCLUDES)\n-  AC_SUBST(QT_LIBS)\n-  AC_SUBST(QT_LDFLAGS)\n-  AC_SUBST(QT_DBUS_INCLUDES)\n-  AC_SUBST(QT_DBUS_LIBS)\n-  AC_SUBST(QT_TEST_INCLUDES)\n-  AC_SUBST(QT_TEST_LIBS)\n-  AC_SUBST(QT_SELECT, qt${bitcoin_qt_got_major_vers})\n-  AC_SUBST(MOC_DEFS)\n+  AC_SUBST([QT_PIE_FLAGS])\n+  AC_SUBST([QT_INCLUDES])\n+  AC_SUBST([QT_LIBS])\n+  AC_SUBST([QT_LDFLAGS])\n+  AC_SUBST([QT_DBUS_INCLUDES])\n+  AC_SUBST([QT_DBUS_LIBS])\n+  AC_SUBST([QT_TEST_INCLUDES])\n+  AC_SUBST([QT_TEST_LIBS])\n+  AC_SUBST([QT_SELECT],[qt${bitcoin_qt_got_major_vers}])\n+  AC_SUBST([MOC_DEFS])\n ])\n \n dnl All macros below are internal and should _not_ be used from the main\n@@ -284,7 +284,7 @@ dnl Internal. Check if the included version of Qt is Qt5.\n dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n-  AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n+  AC_CACHE_CHECK([for Qt 5],[bitcoin_cv_qt5],[\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <QtCore/qconfig.h>\n       #ifndef QT_VERSION\n@@ -306,7 +306,7 @@ dnl Requires: INCLUDES and LIBS must be populated as necessary.\n dnl Output: bitcoin_cv_static_qt=yes|no\n dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n-  AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n+  AC_CACHE_CHECK([for static Qt],[bitcoin_cv_static_qt],[\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <QtCore/qconfig.h>\n       #ifndef QT_VERSION\n@@ -322,7 +322,7 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n     [bitcoin_cv_static_qt=no])\n   ])\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n-    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n+    AC_DEFINE([QT_STATICPLUGIN],[1],[Define this symbol for static Qt plugins])\n   fi\n ])\n \n@@ -332,16 +332,16 @@ dnl Inputs: $1: A series of Q_IMPORT_PLUGIN().\n dnl Inputs: $2: The libraries that resolve $1.\n dnl Output: QT_LIBS is prepended or configure exits.\n AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n-  AC_MSG_CHECKING(for static Qt plugins: $2)\n+  AC_MSG_CHECKING([for static Qt plugins: $2])\n   CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n   LIBS=\"$2 $QT_LIBS $LIBS\"\n   AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n     #define QT_STATICPLUGIN\n     #include <QtPlugin>\n     $1]],\n     [[return 0;]])],\n-    [AC_MSG_RESULT(yes); QT_LIBS=\"$2 $QT_LIBS\"],\n-    [AC_MSG_RESULT(no); BITCOIN_QT_FAIL(Could not resolve: $2)])\n+    [AC_MSG_RESULT([yes]); QT_LIBS=\"$2 $QT_LIBS\"],\n+    [AC_MSG_RESULT([no]); BITCOIN_QT_FAIL([Could not resolve: $2])])\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n@@ -360,19 +360,19 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n      if test \"x$use_pkgconfig\" = xyes; then\n      : dnl\n      m4_ifdef([PKG_CHECK_MODULES],[\n-       PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+       PKG_CHECK_MODULES([QTPLATFORM],[Qt5PlatformSupport],[QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n        if test \"x$TARGET_OS\" = xlinux; then\n-         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+         PKG_CHECK_MODULES([X11XCB],[x11-xcb],[QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n          if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+           PKG_CHECK_MODULES([QTXCBQPA],[Qt5XcbQpa],[QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n          fi\n        elif test \"x$TARGET_OS\" = xdarwin; then\n-         PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTPRINT],[Qt5PrintSupport],[QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n        fi\n      ])\n      else\n        if test \"x$TARGET_OS\" = xwindows; then\n-         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[\n+         AC_CACHE_CHECK([for Qt >= 5.6],[bitcoin_cv_need_platformsupport],[\n            AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n                #include <QtCore/qconfig.h>\n                #ifndef QT_VERSION\n@@ -388,7 +388,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n            [bitcoin_cv_need_platformsupport=no])\n          ])\n          if test \"x$bitcoin_cv_need_platformsupport\" = xyes; then\n-           BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}PlatformSupport not found)))\n+           BITCOIN_QT_CHECK([AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],[],[BITCOIN_QT_FAIL([lib${QT_LIB_PREFIX}PlatformSupport not found])])])\n          fi\n        fi\n      fi\n@@ -414,7 +414,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n   if test \"x$auto_priority_version\" = x; then\n     auto_priority_version=qt5\n   fi\n-    if test \"x$bitcoin_qt_want_version\" = xqt5 ||  ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n+    if test \"x$bitcoin_qt_want_version\" = xqt5 ||  (test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5); then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -424,18 +424,18 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     qt4_modules=\"QtCore QtGui QtNetwork\"\n     BITCOIN_QT_CHECK([\n-      if test \"x$bitcoin_qt_want_version\" = xqt5 || ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5 ); then\n-        PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n-      elif test \"x$bitcoin_qt_want_version\" = xqt4 || ( test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt4 ); then\n-        PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes], [have_qt=no])\n+      if test \"x$bitcoin_qt_want_version\" = xqt5 || (test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt5); then\n+        PKG_CHECK_MODULES([QT5],[$qt5_modules],[QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n+      elif test \"x$bitcoin_qt_want_version\" = xqt4 || (test \"x$bitcoin_qt_want_version\" = xauto && test \"x$auto_priority_version\" = xqt4); then\n+        PKG_CHECK_MODULES([QT4],[$qt4_modules],[QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes],[have_qt=no])\n       fi\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n       if test \"x$have_qt\" = xno && test \"x$bitcoin_qt_want_version\" = xauto; then\n         if test \"x$auto_priority_version\" = xqt5; then\n-          PKG_CHECK_MODULES([QT4], [$qt4_modules], [QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4], [have_qt=no])\n+          PKG_CHECK_MODULES([QT4],[$qt4_modules],[QT_INCLUDES=\"$QT4_CFLAGS\"; QT_LIBS=\"$QT4_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4],[have_qt=no])\n         else\n-          PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt5; bitcoin_qt_got_major_vers=5], [have_qt=no])\n+          PKG_CHECK_MODULES([QT5],[$qt5_modules],[QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" ; have_qt=yes; QT_LIB_PREFIX=Qt5; bitcoin_qt_got_major_vers=5],[have_qt=no])\n         fi\n       fi\n       if test \"x$have_qt\" != xyes; then\n@@ -444,9 +444,9 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n       fi\n     ])\n     BITCOIN_QT_CHECK([\n-      PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+      PKG_CHECK_MODULES([QT_TEST],[${QT_LIB_PREFIX}Test],[QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes],[have_qt_test=no])\n       if test \"x$use_dbus\" != xno; then\n-        PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+        PKG_CHECK_MODULES([QT_DBUS],[${QT_LIB_PREFIX}DBus],[QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes],[have_qt_dbus=no])\n       fi\n     ])\n   ])\n@@ -472,9 +472,9 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     fi\n   ])\n \n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QtPlugin],,BITCOIN_QT_FAIL(QtCore headers missing))])\n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QApplication],, BITCOIN_QT_FAIL(QtGui headers missing))])\n-  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],, BITCOIN_QT_FAIL(QtNetwork headers missing))])\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QtPlugin],[],[BITCOIN_QT_FAIL([QtCore headers missing])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QApplication],[],[BITCOIN_QT_FAIL([QtGui headers missing])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],[],[BITCOIN_QT_FAIL([QtNetwork headers missing])])])\n \n   BITCOIN_QT_CHECK([\n     if test \"x$bitcoin_qt_want_version\" = xauto; then\n@@ -496,20 +496,20 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     fi\n \n     if test \"x$TARGET_OS\" = xwindows; then\n-      AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n+      AC_CHECK_LIB([imm32],[main],[],[BITCOIN_QT_FAIL([libimm32 not found])])\n     fi\n   ])\n \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([z],[main],[],[AC_MSG_WARN([zlib not found. Assuming qt has it built-in])])])\n+  BITCOIN_QT_CHECK([AC_SEARCH_LIBS([png_error],[qtpng png],[],[AC_MSG_WARN([libpng not found. Assuming qt has it built-in])])])\n+  BITCOIN_QT_CHECK([AC_SEARCH_LIBS([jpeg_create_decompress],[qtjpeg jpeg],[],[AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])])])\n+  BITCOIN_QT_CHECK([AC_SEARCH_LIBS([pcre16_exec],[qtpcre pcre16],[],[AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])])])\n+  BITCOIN_QT_CHECK([AC_SEARCH_LIBS([hb_ot_tags_from_script],[qtharfbuzzng harfbuzz],[],[AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([${QT_LIB_PREFIX}Core],[main],[],[BITCOIN_QT_FAIL([lib${QT_LIB_PREFIX}Core not found])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([${QT_LIB_PREFIX}Gui],[main],[],[BITCOIN_QT_FAIL([lib${QT_LIB_PREFIX}Gui not found])])])\n+  BITCOIN_QT_CHECK([AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],[],[BITCOIN_QT_FAIL([lib${QT_LIB_PREFIX}Network not found])])])\n   if test \"x$bitcoin_qt_got_major_vers\" = x5; then\n-    BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n+    BITCOIN_QT_CHECK([AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],[],[BITCOIN_QT_FAIL([lib${QT_LIB_PREFIX}Widgets not found])])])\n   fi\n   QT_LIBS=\"$LIBS\"\n   LIBS=\"$TEMP_LIBS\"\n@@ -519,16 +519,16 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     if test \"x$qt_lib_path\" != x; then\n       LIBS=\"-L$qt_lib_path\"\n     fi\n-    AC_CHECK_LIB([${QT_LIB_PREFIX}Test],      [main],, have_qt_test=no)\n-    AC_CHECK_HEADER([QTest],, have_qt_test=no)\n+    AC_CHECK_LIB([${QT_LIB_PREFIX}Test],[main],[],[have_qt_test=no])\n+    AC_CHECK_HEADER([QTest],[],[have_qt_test=no])\n     QT_TEST_LIBS=\"$LIBS\"\n     if test \"x$use_dbus\" != xno; then\n       LIBS=\n       if test \"x$qt_lib_path\" != x; then\n         LIBS=\"-L$qt_lib_path\"\n       fi\n-      AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],      [main],, have_qt_dbus=no)\n-      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n+      AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],[main],[],[have_qt_dbus=no])\n+      AC_CHECK_HEADER([QtDBus],[],[have_qt_dbus=no])\n       QT_DBUS_LIBS=\"$LIBS\"\n     fi\n   ])"
      }
    ]
  }
]