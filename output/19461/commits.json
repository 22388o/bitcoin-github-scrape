[
  {
    "sha": "ad085f9ba15c131fc5cc77086a620f2e366aac7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDA4NWY5YmExNWMxMzFmYzVjYzc3MDg2YTYyMGYyZTM2NmFhYzdj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-31T01:04:06Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-16T18:17:01Z"
      },
      "message": "multiprocess: Delay wallet client construction\n\nDelay wallet client construction until after logging, thread and other\ninit for two reasons:\n\n- More responsive multiprocess GUI startup. When bitcoin-gui is started\n  this moves the call from bitcoin-gui to bitcoin-node that spawns\n  bitcoin-wallet off of the GUI event thread and onto the background GUI\n  init executor thread.\n\n- Avoids feature_logging.py test failures with bitcoin-node by making\n  bitcoin-wallet logging start after bitcoin-node logging starts,\n  because the tests are not written to handle the bitcoin-wallet logging\n  init code running first.\n\nThis partially reverts commit b266b3e0bf29d0f3d5deaeec62d57c5025b35525,\nmoving wallet client creation back to the place it was located before.",
      "tree": {
        "sha": "15ae7e775054d670ba7def6754e04e934d974383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ae7e775054d670ba7def6754e04e934d974383"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad085f9ba15c131fc5cc77086a620f2e366aac7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad085f9ba15c131fc5cc77086a620f2e366aac7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad085f9ba15c131fc5cc77086a620f2e366aac7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad085f9ba15c131fc5cc77086a620f2e366aac7c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef84e0503994c53f77093e7ea5951a7b0edea7a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 23,
      "deletions": 6
    },
    "files": [
      {
        "sha": "017c598ad5683e57164edf49ebb1e5b6c7064f4f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -1065,11 +1065,6 @@ bool AppInitLockDataDirectory()\n bool AppInitInterfaces(NodeContext& node)\n {\n     node.chain = node.init->makeChain();\n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(node);\n     return true;\n }\n \n@@ -1133,6 +1128,13 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(node);\n+    uiInterface.InitWallet();\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "ee941b46025b8986c592d718d620c4706c7cbb9b",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -197,6 +197,10 @@ class Node\n     using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n \n+    //! Register handler for wallet client constructed messages.\n+    using InitWalletFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) = 0;\n+\n     //! Register handler for number of connections changed messages.\n     using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n     virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;"
      },
      {
        "sha": "b1d39cd00a7b2db628e83318f874dedc209bb153",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -281,6 +281,10 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n+    std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.InitWallet_connect(fn));\n+    }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));"
      },
      {
        "sha": "29fa16d8be26dd55817c4ddadd9849a1b07b8a13",
        "filename": "src/node/ui_interface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.cpp?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -15,6 +15,7 @@ struct UISignals {\n     boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::optional_last_value<bool>> ThreadSafeMessageBox;\n     boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::optional_last_value<bool>> ThreadSafeQuestion;\n     boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n+    boost::signals2::signal<CClientUIInterface::InitWalletSig> InitWallet;\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n@@ -34,6 +35,7 @@ static UISignals g_ui_signals;\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n+ADD_SIGNALS_IMPL_WRAPPER(InitWallet);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n@@ -45,6 +47,7 @@ ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n bool CClientUIInterface::ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style).value_or(false);}\n bool CClientUIInterface::ThreadSafeQuestion(const bilingual_str& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style).value_or(false);}\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n+void CClientUIInterface::InitWallet() { return g_ui_signals.InitWallet(); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }"
      },
      {
        "sha": "f969bcde2179c24022015f242ec3c539af923851",
        "filename": "src/node/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/node/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.h?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -82,6 +82,9 @@ class CClientUIInterface\n     /** Progress message during initialization. */\n     ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);\n \n+    /** Wallet client created. */\n+    ADD_SIGNALS_DECL_WRAPPER(InitWallet, void, );\n+\n     /** Number of network connections changed. */\n     ADD_SIGNALS_DECL_WRAPPER(NotifyNumConnectionsChanged, void, int newNumConnections);\n "
      },
      {
        "sha": "e30892aeb76fd1e4a76b1d9d5dbaa854c762d197",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -271,7 +271,6 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n-    connect(this, &BitcoinApplication::requestedInitialize, m_splash, &SplashScreen::handleLoadWallet);\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }"
      },
      {
        "sha": "736af27acc03c2e2c08dae7eb06ec2b7ca7a85c5",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -194,6 +194,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n     m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_init_wallet = m_node->handleInitWallet([this]() { handleLoadWallet(); });\n }\n \n void SplashScreen::handleLoadWallet()"
      },
      {
        "sha": "8a5875d2a6e2b10eab47a65bf909d1eef5a2fc6b",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad085f9ba15c131fc5cc77086a620f2e366aac7c/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "patch": "@@ -66,6 +66,7 @@ public Q_SLOTS:\n     bool m_shutdown = false;\n     std::unique_ptr<interfaces::Handler> m_handler_init_message;\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\n+    std::unique_ptr<interfaces::Handler> m_handler_init_wallet;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n     std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;\n     std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;"
      }
    ]
  },
  {
    "sha": "a032fa30d282fa69c304e0afd1f95f67c55d22e3",
    "node_id": "C_kwDOABII59oAKGEwMzJmYTMwZDI4MmZhNjljMzA0ZTBhZmQxZjk1ZjY3YzU1ZDIyZTM",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-16T18:49:09Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-05T15:10:47Z"
      },
      "message": "multiprocess: add interfaces::ExternalSigner class\n\nAdd interfaces::ExternalSigner to let signer objects be passed between\nprocesses and signer code to run in the original process, without\nmultiple processes linking and running signer code.",
      "tree": {
        "sha": "c4aea56786decc54ff8474a67c604530097d8b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4aea56786decc54ff8474a67c604530097d8b96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a032fa30d282fa69c304e0afd1f95f67c55d22e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032fa30d282fa69c304e0afd1f95f67c55d22e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a032fa30d282fa69c304e0afd1f95f67c55d22e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032fa30d282fa69c304e0afd1f95f67c55d22e3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113b863f0773999497f952daa6539a03a66a9de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113b863f0773999497f952daa6539a03a66a9de3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113b863f0773999497f952daa6539a03a66a9de3"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 41,
      "deletions": 12
    },
    "files": [
      {
        "sha": "48d4fd3ee25963ea915341e4e6bec7b29db1438e",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <consensus/amount.h>\n-#include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n@@ -50,6 +49,16 @@ struct BlockAndHeaderTipInfo\n     double verification_progress;\n };\n \n+//! External signer interface used by the GUI.\n+class ExternalSigner\n+{\n+public:\n+    virtual ~ExternalSigner() {};\n+\n+    //! Get signer display name\n+    virtual std::string getName() = 0;\n+};\n+\n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n {\n@@ -111,8 +120,8 @@ class Node\n     //! Disconnect node by id.\n     virtual bool disconnectById(NodeId id) = 0;\n \n-    //! List external signers\n-    virtual std::vector<ExternalSigner> externalSigners() = 0;\n+    //! Return list of external signers (attached devices which can sign transactions).\n+    virtual std::vector<std::unique_ptr<ExternalSigner>> listExternalSigners() = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;"
      },
      {
        "sha": "24959f385e26260e9a80d2535f18678671767e50",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "patch": "@@ -67,6 +67,17 @@ using interfaces::WalletClient;\n \n namespace node {\n namespace {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+class ExternalSignerImpl : public interfaces::ExternalSigner\n+{\n+public:\n+    ExternalSignerImpl(::ExternalSigner signer) : m_signer(std::move(signer)) {}\n+    std::string getName() override { return m_signer.m_name; }\n+private:\n+    ::ExternalSigner m_signer;\n+};\n+#endif\n+\n class NodeImpl : public Node\n {\n private:\n@@ -172,14 +183,18 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    std::vector<ExternalSigner> externalSigners() override\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> listExternalSigners() override\n     {\n #ifdef ENABLE_EXTERNAL_SIGNER\n         std::vector<ExternalSigner> signers = {};\n         const std::string command = gArgs.GetArg(\"-signer\", \"\");\n-        if (command == \"\") return signers;\n+        if (command == \"\") return {};\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n-        return signers;\n+        std::vector<std::unique_ptr<interfaces::ExternalSigner>> result;\n+        for (auto& signer : signers) {\n+            result.emplace_back(std::make_unique<ExternalSignerImpl>(std::move(signer)));\n+        }\n+        return result;\n #else\n         // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet"
      },
      {
        "sha": "eba70331f815910444c2866967143ccf05a01c65",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "patch": "@@ -6,7 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <external_signer.h>\n+#include <interfaces/node.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n \n@@ -113,7 +113,7 @@ CreateWalletDialog::~CreateWalletDialog()\n     delete ui;\n }\n \n-void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n+void CreateWalletDialog::setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers)\n {\n     m_has_signers = !signers.empty();\n     if (m_has_signers) {\n@@ -126,7 +126,7 @@ void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n         ui->blank_wallet_checkbox->setChecked(false);\n         ui->disable_privkeys_checkbox->setEnabled(false);\n         ui->disable_privkeys_checkbox->setChecked(true);\n-        const std::string label = signers[0].m_name;\n+        const std::string label = signers[0]->getName();\n         ui->wallet_name_line_edit->setText(QString::fromStdString(label));\n         ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n     } else {"
      },
      {
        "sha": "63a5e012d8ce6eda1a543909c51f17206cb13e94",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "patch": "@@ -7,7 +7,12 @@\n \n #include <QDialog>\n \n+#include <memory>\n+\n+namespace interfaces {\n class ExternalSigner;\n+} // namespace interfaces\n+\n class WalletModel;\n \n namespace Ui {\n@@ -24,7 +29,7 @@ class CreateWalletDialog : public QDialog\n     explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n-    void setSigners(const std::vector<ExternalSigner>& signers);\n+    void setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers);\n \n     QString walletName() const;\n     bool isEncryptWalletChecked() const;"
      },
      {
        "sha": "9c6349284e1abbe3c149e8fb353833dbe5020d66",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a032fa30d282fa69c304e0afd1f95f67c55d22e3/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "patch": "@@ -274,9 +274,9 @@ void CreateWalletActivity::create()\n {\n     m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n \n-    std::vector<ExternalSigner> signers;\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> signers;\n     try {\n-        signers = node().externalSigners();\n+        signers = node().listExternalSigners();\n     } catch (const std::runtime_error& e) {\n         QMessageBox::critical(nullptr, tr(\"Can't list signers\"), e.what());\n     }"
      }
    ]
  },
  {
    "sha": "282442f57bbcfb1620cbad9f52e60f9a66521ece",
    "node_id": "C_kwDOABII59oAKDI4MjQ0MmY1N2JiY2ZiMTYyMGNiYWQ5ZjUyZTYwZjlhNjY1MjFlY2U",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/23004/head'",
      "tree": {
        "sha": "0e6f1e80e51649fbc588c23e7d59d029a82eb06d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e6f1e80e51649fbc588c23e7d59d029a82eb06d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/282442f57bbcfb1620cbad9f52e60f9a66521ece",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282442f57bbcfb1620cbad9f52e60f9a66521ece",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/282442f57bbcfb1620cbad9f52e60f9a66521ece",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282442f57bbcfb1620cbad9f52e60f9a66521ece/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5574881ce329f91cc5bbc2b9585860a45fde7c3c"
      },
      {
        "sha": "a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a032fa30d282fa69c304e0afd1f95f67c55d22e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a032fa30d282fa69c304e0afd1f95f67c55d22e3"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 41,
      "deletions": 12
    },
    "files": [
      {
        "sha": "48d4fd3ee25963ea915341e4e6bec7b29db1438e",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <consensus/amount.h>\n-#include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n@@ -50,6 +49,16 @@ struct BlockAndHeaderTipInfo\n     double verification_progress;\n };\n \n+//! External signer interface used by the GUI.\n+class ExternalSigner\n+{\n+public:\n+    virtual ~ExternalSigner() {};\n+\n+    //! Get signer display name\n+    virtual std::string getName() = 0;\n+};\n+\n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n {\n@@ -111,8 +120,8 @@ class Node\n     //! Disconnect node by id.\n     virtual bool disconnectById(NodeId id) = 0;\n \n-    //! List external signers\n-    virtual std::vector<ExternalSigner> externalSigners() = 0;\n+    //! Return list of external signers (attached devices which can sign transactions).\n+    virtual std::vector<std::unique_ptr<ExternalSigner>> listExternalSigners() = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;"
      },
      {
        "sha": "9b4ba8eb97866ed9dfd31e90459e0785d75d5093",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "patch": "@@ -67,6 +67,17 @@ using interfaces::WalletClient;\n \n namespace node {\n namespace {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+class ExternalSignerImpl : public interfaces::ExternalSigner\n+{\n+public:\n+    ExternalSignerImpl(::ExternalSigner signer) : m_signer(std::move(signer)) {}\n+    std::string getName() override { return m_signer.m_name; }\n+private:\n+    ::ExternalSigner m_signer;\n+};\n+#endif\n+\n class NodeImpl : public Node\n {\n private:\n@@ -172,14 +183,18 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    std::vector<ExternalSigner> externalSigners() override\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> listExternalSigners() override\n     {\n #ifdef ENABLE_EXTERNAL_SIGNER\n         std::vector<ExternalSigner> signers = {};\n         const std::string command = gArgs.GetArg(\"-signer\", \"\");\n-        if (command == \"\") return signers;\n+        if (command == \"\") return {};\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n-        return signers;\n+        std::vector<std::unique_ptr<interfaces::ExternalSigner>> result;\n+        for (auto& signer : signers) {\n+            result.emplace_back(std::make_unique<ExternalSignerImpl>(std::move(signer)));\n+        }\n+        return result;\n #else\n         // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet"
      },
      {
        "sha": "eba70331f815910444c2866967143ccf05a01c65",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "patch": "@@ -6,7 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <external_signer.h>\n+#include <interfaces/node.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n \n@@ -113,7 +113,7 @@ CreateWalletDialog::~CreateWalletDialog()\n     delete ui;\n }\n \n-void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n+void CreateWalletDialog::setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers)\n {\n     m_has_signers = !signers.empty();\n     if (m_has_signers) {\n@@ -126,7 +126,7 @@ void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n         ui->blank_wallet_checkbox->setChecked(false);\n         ui->disable_privkeys_checkbox->setEnabled(false);\n         ui->disable_privkeys_checkbox->setChecked(true);\n-        const std::string label = signers[0].m_name;\n+        const std::string label = signers[0]->getName();\n         ui->wallet_name_line_edit->setText(QString::fromStdString(label));\n         ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n     } else {"
      },
      {
        "sha": "63a5e012d8ce6eda1a543909c51f17206cb13e94",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "patch": "@@ -7,7 +7,12 @@\n \n #include <QDialog>\n \n+#include <memory>\n+\n+namespace interfaces {\n class ExternalSigner;\n+} // namespace interfaces\n+\n class WalletModel;\n \n namespace Ui {\n@@ -24,7 +29,7 @@ class CreateWalletDialog : public QDialog\n     explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n-    void setSigners(const std::vector<ExternalSigner>& signers);\n+    void setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers);\n \n     QString walletName() const;\n     bool isEncryptWalletChecked() const;"
      },
      {
        "sha": "b9a9fcf3d18572fd70893343d4368b91c7aa3e9d",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282442f57bbcfb1620cbad9f52e60f9a66521ece/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "patch": "@@ -280,9 +280,9 @@ void CreateWalletActivity::create()\n {\n     m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n \n-    std::vector<ExternalSigner> signers;\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> signers;\n     try {\n-        signers = node().externalSigners();\n+        signers = node().listExternalSigners();\n     } catch (const std::runtime_error& e) {\n         QMessageBox::critical(nullptr, tr(\"Can't list signers\"), e.what());\n     }"
      }
    ]
  },
  {
    "sha": "2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
    "node_id": "C_kwDOABII59oAKDJkN2EwM2VlNjM1YzkzNDRhYzhmM2Q3OTgxMmNmY2ZiYmI1ZmZiMzA",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/23005/head'",
      "tree": {
        "sha": "8ba6cf6251ed8b2a0f2340deab7c753df25d996e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ba6cf6251ed8b2a0f2340deab7c753df25d996e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282442f57bbcfb1620cbad9f52e60f9a66521ece",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/282442f57bbcfb1620cbad9f52e60f9a66521ece"
      },
      {
        "sha": "ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad085f9ba15c131fc5cc77086a620f2e366aac7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad085f9ba15c131fc5cc77086a620f2e366aac7c"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 23,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6db050350dfd51ddba0aab5a9c39e57e66ec9e4b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -1101,11 +1101,6 @@ bool AppInitLockDataDirectory()\n bool AppInitInterfaces(NodeContext& node)\n {\n     node.chain = node.init->makeChain();\n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(node);\n     return true;\n }\n \n@@ -1169,6 +1164,13 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(node);\n+    uiInterface.InitWallet();\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "ea1cb5ed723b73d07ae5ae54a504f7552aa7e51b",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -206,6 +206,10 @@ class Node\n     using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n \n+    //! Register handler for wallet client constructed messages.\n+    using InitWalletFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) = 0;\n+\n     //! Register handler for number of connections changed messages.\n     using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n     virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;"
      },
      {
        "sha": "9f457570fa1032ffc775874a509354789095e6e3",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -296,6 +296,10 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n+    std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.InitWallet_connect(fn));\n+    }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));"
      },
      {
        "sha": "29fa16d8be26dd55817c4ddadd9849a1b07b8a13",
        "filename": "src/node/ui_interface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.cpp?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -15,6 +15,7 @@ struct UISignals {\n     boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::optional_last_value<bool>> ThreadSafeMessageBox;\n     boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::optional_last_value<bool>> ThreadSafeQuestion;\n     boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n+    boost::signals2::signal<CClientUIInterface::InitWalletSig> InitWallet;\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n@@ -34,6 +35,7 @@ static UISignals g_ui_signals;\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n+ADD_SIGNALS_IMPL_WRAPPER(InitWallet);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n@@ -45,6 +47,7 @@ ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n bool CClientUIInterface::ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style).value_or(false);}\n bool CClientUIInterface::ThreadSafeQuestion(const bilingual_str& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style).value_or(false);}\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n+void CClientUIInterface::InitWallet() { return g_ui_signals.InitWallet(); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }"
      },
      {
        "sha": "f969bcde2179c24022015f242ec3c539af923851",
        "filename": "src/node/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/node/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.h?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -82,6 +82,9 @@ class CClientUIInterface\n     /** Progress message during initialization. */\n     ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);\n \n+    /** Wallet client created. */\n+    ADD_SIGNALS_DECL_WRAPPER(InitWallet, void, );\n+\n     /** Number of network connections changed. */\n     ADD_SIGNALS_DECL_WRAPPER(NotifyNumConnectionsChanged, void, int newNumConnections);\n "
      },
      {
        "sha": "922aac531ff7483b57032e267ccc7370404f974d",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -273,7 +273,6 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n-    connect(this, &BitcoinApplication::requestedInitialize, m_splash, &SplashScreen::handleLoadWallet);\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }"
      },
      {
        "sha": "85703b3350e7ed12a50e2aa2b5d49980b73b6be9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -194,6 +194,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n     m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_init_wallet = m_node->handleInitWallet([this]() { handleLoadWallet(); });\n }\n \n void SplashScreen::handleLoadWallet()"
      },
      {
        "sha": "8a5875d2a6e2b10eab47a65bf909d1eef5a2fc6b",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "patch": "@@ -66,6 +66,7 @@ public Q_SLOTS:\n     bool m_shutdown = false;\n     std::unique_ptr<interfaces::Handler> m_handler_init_message;\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\n+    std::unique_ptr<interfaces::Handler> m_handler_init_wallet;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n     std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;\n     std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;"
      }
    ]
  },
  {
    "sha": "489c5a6f4f6209501d497a9a5056e2e59848be83",
    "node_id": "C_kwDOABII59oAKDQ4OWM1YTZmNGY2MjA5NTAxZDQ5N2E5YTUwNTZlMmU1OTg0OGJlODM",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Increase feature_block.py and feature_taproot.py timeouts\n\nNeeded because BlockConnected notifications are a lot slower with the wallet\nrunning in separate process.",
      "tree": {
        "sha": "f0edf31817db38f52d039e4e8cf99484ae21304b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0edf31817db38f52d039e4e8cf99484ae21304b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/489c5a6f4f6209501d497a9a5056e2e59848be83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/489c5a6f4f6209501d497a9a5056e2e59848be83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/489c5a6f4f6209501d497a9a5056e2e59848be83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/489c5a6f4f6209501d497a9a5056e2e59848be83/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d7a03ee635c9344ac8f3d79812cfcfbbb5ffb30"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7e900def751f0d004d697e59df22d9876c84fe2",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489c5a6f4f6209501d497a9a5056e2e59848be83/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489c5a6f4f6209501d497a9a5056e2e59848be83/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=489c5a6f4f6209501d497a9a5056e2e59848be83",
        "patch": "@@ -86,6 +86,7 @@ def set_test_params(self):\n             '-acceptnonstdtxn=1',  # This is a consensus block test, we don't care about tx policy\n             '-testactivationheight=bip34@2',\n         ]]\n+        self.rpc_timeout = 1920\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n@@ -1293,7 +1294,7 @@ def run_test(self):\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i)))\n-        self.send_blocks(blocks2, False, force_send=True)\n+        self.send_blocks(blocks2, False, force_send=True, timeout=1920)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1))\n@@ -1302,7 +1303,7 @@ def run_test(self):\n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1)\n-        self.send_blocks([block], False, force_send=True)\n+        self.send_blocks([block], False, force_send=True, timeout=1920)\n         block = self.next_block(chain1_tip + 2)\n         self.send_blocks([block], True, timeout=2440)\n \n@@ -1318,6 +1319,13 @@ def run_test(self):\n         b_cb34.solve()\n         self.send_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n \n+        # Flush the notification queue before shutting down, so the\n+        # FlushBackgroundCallbacks call made during shutdown won't exceed the\n+        # test framework's 60 second shutdown timeout on slow systems, due to\n+        # all the BlockConnected notifications generated during the test.\n+        self.log.info(\"Wait for BlockConnected notifications to be processed before shutdown\")\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n+\n     # Helper methods\n     ################\n "
      },
      {
        "sha": "4e8d1a499e4f829b662170e9e9757ba3b4734be2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/489c5a6f4f6209501d497a9a5056e2e59848be83/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/489c5a6f4f6209501d497a9a5056e2e59848be83/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=489c5a6f4f6209501d497a9a5056e2e59848be83",
        "patch": "@@ -1212,6 +1212,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n         self.extra_args = [[\"-par=1\"], [\"-par=1\"]]\n+        self.rpc_timeout = 120\n         if self.options.previous_release:\n             self.wallet_names = [None, self.default_wallet_name]\n         else:"
      }
    ]
  },
  {
    "sha": "2947fce44c516dddba0dc7807b7c8f1e1d345512",
    "node_id": "C_kwDOABII59oAKDI5NDdmY2U0NGM1MTZkZGRiYTBkYzc4MDdiN2M4ZjFlMWQzNDU1MTI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Add capnp serialization code for bitcoin types",
      "tree": {
        "sha": "88bb5e057ed2d3ba3a8da9246b6b36f16d2aeed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88bb5e057ed2d3ba3a8da9246b6b36f16d2aeed3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2947fce44c516dddba0dc7807b7c8f1e1d345512",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2947fce44c516dddba0dc7807b7c8f1e1d345512",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2947fce44c516dddba0dc7807b7c8f1e1d345512",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2947fce44c516dddba0dc7807b7c8f1e1d345512/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "489c5a6f4f6209501d497a9a5056e2e59848be83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/489c5a6f4f6209501d497a9a5056e2e59848be83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/489c5a6f4f6209501d497a9a5056e2e59848be83"
      }
    ],
    "stats": {
      "total": 459,
      "additions": 458,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9cee2ab6820387eeb05355e4957a5770a83e9df1",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -16,7 +16,7 @@\n # define functions and variables declared in corresponding .h files is\n # incorrect.\n HEADER_MODULE_PATHS = [\n-    'interfaces/'\n+    'ipc/'\n ]\n \n def module_name(path):"
      },
      {
        "sha": "ee01dbed9266d850d214694f5265e2525a8ffd44",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -808,6 +808,7 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/init.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n@@ -816,6 +817,9 @@ EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/common-types.h \\\n+  ipc/capnp/common.cpp \\\n+  ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n   ipc/capnp/protocol.cpp \\"
      },
      {
        "sha": "cde0a3ed2f93c481040dc646b681f395402ab6e1",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "added",
        "additions": 281,
        "deletions": 0,
        "changes": 281,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <ipc/capnp/common.capnp.proxy.h>\n+#include <mp/proxy-types.h>\n+#include <net_processing.h>\n+#include <netbase.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <wallet/coincontrol.h>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Convert kj::StringPtr to std::string.\n+inline std::string ToString(const kj::StringPtr& str) { return {str.cStr(), str.size()}; }\n+\n+//! Convert kj::ArrayPtr to std::string.\n+inline std::string ToString(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    return {reinterpret_cast<const char*>(data.begin()), data.size()};\n+}\n+\n+//! Convert array object to kj::ArrayPtr.\n+template <typename Array>\n+inline kj::ArrayPtr<const kj::byte> ToArray(const Array& array)\n+{\n+    return {reinterpret_cast<const kj::byte*>(array.data()), array.size()};\n+}\n+\n+//! Convert base_blob to kj::ArrayPtr.\n+template <typename Blob>\n+inline kj::ArrayPtr<const kj::byte> FromBlob(const Blob& blob)\n+{\n+    return {blob.begin(), blob.size()};\n+}\n+\n+//! Convert kj::ArrayPtr to base_blob\n+template <typename Blob>\n+inline Blob ToBlob(kj::ArrayPtr<const kj::byte> data)\n+{\n+    // TODO: Avoid temp vector.\n+    return Blob(std::vector<unsigned char>(data.begin(), data.begin() + data.size()));\n+}\n+\n+//! Serialize bitcoin value.\n+template <typename T>\n+CDataStream Serialize(const T& value)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    return stream;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(T& value, const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    // Could optimize, it unnecessarily copies the data into a temporary vector.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    value.Unserialize(stream);\n+    return value;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    T value;\n+    Unserialize(value, data);\n+    return value;\n+}\n+\n+template <typename T>\n+using Deserializable = std::is_constructible<T, ::deserialize_type, ::CDataStream&>;\n+\n+template <typename T>\n+struct Unserializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+template <typename T>\n+struct Serializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+//!@{\n+//! Functions to serialize / deserialize bitcoin objects that don't\n+//! already provide their own serialization.\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue);\n+//!@}\n+\n+template <typename LocalType, typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Reader&& reader,\n+    ReadDest&& read_dest,\n+    decltype(CustomReadMessage(invoke_context, reader.get(), std::declval<LocalType&>()))* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) { CustomReadMessage(invoke_context, reader.get(), value); });\n+}\n+\n+template <typename Accessor, typename LocalType, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<LocalType>, ServerContext& server_context, Fn&& fn, Args&&... args)\n+    -> decltype(CustomPassMessage(server_context,\n+                                  Accessor::get(server_context.call_context.getParams()),\n+                                  Accessor::init(server_context.call_context.getResults()),\n+                                  nullptr))\n+{\n+    CustomPassMessage(server_context, Accessor::get(server_context.call_context.getParams()),\n+                      Accessor::init(server_context.call_context.getResults()),\n+                      [&](LocalType param) { fn.invoke(server_context, std::forward<Args>(args)..., param); });\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    typename std::enable_if<ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    assert(input.has());\n+    auto data = input.get();\n+    // Note: stream copy here is unnecessary, and can be avoided in the future\n+    // when `VectorReader` from #12254 is added.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    return read_dest.construct(deserialize, stream);\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    // FIXME instead of always preferring Deserialize implementation over Unserialize should prefer Deserializing when\n+    // emplacing, unserialize when updating\n+    typename std::enable_if<ipc::capnp::Unserializable<LocalType>::value &&\n+                            !ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) {\n+        if (!input.has()) return;\n+        auto data = input.get();\n+        // Note: stream copy here is unnecessary, and can be avoided in the future\n+        // when `VectorReader` from #12254 is added.\n+        CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+        value.Unserialize(stream);\n+    });\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(input.get());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output)\n+{\n+    output.set(value.count());\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    auto data = input.get();\n+    // Copy input into SecureString. Caller needs to be responsible for calling\n+    // memory_cleanse on the input.\n+    return read_dest.construct(CharCast(data.begin()), data.size());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Value&& str, Output&& output)\n+{\n+    auto result = output.init(str.size());\n+    // Copy SecureString into output. Caller needs to be responsible for calling\n+    // memory_cleanse later on the output after it is sent.\n+    memcpy(result.begin(), str.data(), str.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init(value.size())), ::capnp::Data::Builder>::value>::type*\n+        enable_output = nullptr,\n+    decltype(memcpy(output.init(value.size()).begin(), value.data(), value.size()))* enable_value = nullptr)\n+{\n+    auto result = output.init(value.size());\n+    memcpy(result.begin(), value.data(), value.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(TypeList<LocalType>,\n+                      Priority<2>,\n+                      InvokeContext& invoke_context,\n+                      Value&& value,\n+                      Output&& output,\n+                      decltype(CustomBuildMessage(invoke_context, value, output.init()))* enable = nullptr)\n+{\n+    CustomBuildMessage(invoke_context, value, output.init());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<ipc::capnp::Serializable<\n+        typename std::remove_cv<typename std::remove_reference<Value>::type>::type>::value>::type* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    auto result = output.init(stream.size());\n+    memcpy(result.begin(), stream.data(), stream.size());\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<>, ServerContext& server_context, const Fn& fn, Args&&... args) ->\n+    typename std::enable_if<std::is_same<decltype(Accessor::get(server_context.call_context.getParams())),\n+                                         ipc::capnp::messages::GlobalArgs::Reader>::value>::type\n+{\n+    ipc::capnp::ReadGlobalArgs(server_context, Accessor::get(server_context.call_context.getParams()));\n+    return fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Output>\n+void CustomBuildField(\n+    TypeList<>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init()),\n+                                         ipc::capnp::messages::GlobalArgs::Builder>::value>::type* enable = nullptr)\n+{\n+    ipc::capnp::BuildGlobalArgs(invoke_context, output.init());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_TYPES_H"
      },
      {
        "sha": "3dfe39f87db666a95053a9c6180945d4eb212212",
        "filename": "src/ipc/capnp/common.capnp",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.capnp?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -0,0 +1,51 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xcd2c6232cb484a28;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/common.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+struct UniValue {\n+    # The current version of UniValue included in bitcoin doesn't support\n+    # round-trip serialization of raw values. After it gets updated, and\n+    # https://github.com/jgarzik/univalue/pull/31 is merged, this struct\n+    # can go away and UniValues can just be serialized as text using\n+    # UniValue::read() and UniValue::write() methods.\n+\n+    type @0 :Int32;\n+    value @1 :Text;\n+}\n+\n+struct Settings $Proxy.wrap(\"util::Settings\") {\n+   forcedSettings @0 :List(Pair(Text, UniValue)) $Proxy.name(\"forced_settings\");\n+   commandLineOptions @1 :List(Pair(Text, List(UniValue))) $Proxy.name(\"command_line_options\");\n+   rwSettings @2 :List(Pair(Text, UniValue)) $Proxy.name(\"rw_settings\");\n+   roConfig @3 :List(Pair(Text, List(Pair(Text, List(UniValue))))) $Proxy.name(\"ro_config\");\n+}\n+\n+struct GlobalArgs $Proxy.wrap(\"ipc::capnp::GlobalArgs\") $Proxy.count(0) {\n+   settings @0 :Settings $Proxy.name(\"m_settings\");\n+   network @1 :Text $Proxy.name(\"m_network\");\n+   networkOnlyArgs @2 :List(Text) $Proxy.name(\"m_network_only_args\");\n+}\n+\n+struct BilingualStr $Proxy.wrap(\"bilingual_str\") {\n+    original @0 :Text;\n+    translated @1 :Text;\n+}\n+\n+struct Pair(Key, Value) {\n+    key @0 :Key;\n+    value @1 :Value;\n+}\n+\n+struct PairStr64 {\n+    key @0 :Text;\n+    value @1 :UInt64;\n+}"
      },
      {
        "sha": "bb2560ac719b110cf3d6443b33e48bf8be5a9064",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/common.h>\n+#include <capnp/list.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/common.capnp.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/common.h>\n+#include <ipc/capnp/context.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <sync.h>\n+#include <univalue.h>\n+#include <util/system.h>\n+\n+#include <functional>\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder)\n+{\n+    builder.setType(univalue.getType());\n+    if (univalue.getType() == UniValue::VARR || univalue.getType() == UniValue::VOBJ) {\n+        builder.setValue(univalue.write());\n+    } else {\n+        builder.setValue(univalue.getValStr());\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue)\n+{\n+    if (reader.getType() == UniValue::VARR || reader.getType() == UniValue::VOBJ) {\n+        if (!univalue.read(ipc::capnp::ToString(reader.getValue()))) {\n+            throw std::runtime_error(\"Could not parse UniValue\");\n+        }\n+    } else {\n+        univalue = UniValue(UniValue::VType(reader.getType()), ipc::capnp::ToString(reader.getValue()));\n+    }\n+}\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder)\n+{\n+    const auto& args = static_cast<const GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    mp::BuildField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(builder), args);\n+}\n+\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader)\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    {\n+        LOCK(args.cs_args);\n+        mp::ReadField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(reader),\n+                      mp::ReadDestValue(args));\n+    }\n+}\n+\n+std::string GlobalArgsNetwork()\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    return args.m_network;\n+}\n+} // namespace capnp\n+} // namespace ipc"
      },
      {
        "sha": "7e92364769ae2b37d6ef6b2f7e8a38e71ed46a59",
        "filename": "src/ipc/capnp/common.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2947fce44c516dddba0dc7807b7c8f1e1d345512/src/ipc/capnp/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.h?ref=2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_H\n+#define BITCOIN_IPC_CAPNP_COMMON_H\n+\n+#include <ipc/capnp/common.capnp.h>\n+#include <util/system.h>\n+\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+//! Wrapper around GlobalArgs struct to expose public members.\n+struct GlobalArgs : public ArgsManager\n+{\n+    using ArgsManager::cs_args;\n+    using ArgsManager::m_network;\n+    using ArgsManager::m_network_only_args;\n+    using ArgsManager::m_settings;\n+};\n+\n+//! GlobalArgs client-side argument handling. Builds message from ::gArgs variable.\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder);\n+\n+//! GlobalArgs server-side argument handling. Reads message into ::gArgs variable.\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader);\n+\n+//! GlobalArgs network string accessor.\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_H"
      }
    ]
  },
  {
    "sha": "6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
    "node_id": "C_kwDOABII59oAKDZkMjc5NmM4OTg0OGMyMGY0MjBmOTFjZjRiMjlkYjdjZGQ2Yzk2YzI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Add capnp wrapper for Handler interface",
      "tree": {
        "sha": "d998a4aa1bab0e1c60333dbbc6d0daeca40a30a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d998a4aa1bab0e1c60333dbbc6d0daeca40a30a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2796c89848c20f420f91cf4b29db7cdd6c96c2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2947fce44c516dddba0dc7807b7c8f1e1d345512",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2947fce44c516dddba0dc7807b7c8f1e1d345512"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "24d4e37c0411685516a67dbaccee7340b7a7f880",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2796c89848c20f420f91cf4b29db7cdd6c96c2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2796c89848c20f420f91cf4b29db7cdd6c96c2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
        "patch": "@@ -810,6 +810,7 @@ endif\n libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n+  ipc/capnp/handler.capnp \\\n   ipc/capnp/init.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:"
      },
      {
        "sha": "3c1fadbac894e88513c1d9347526c9ca4806b98e",
        "filename": "src/ipc/capnp/handler.capnp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2796c89848c20f420f91cf4b29db7cdd6c96c2/src/ipc/capnp/handler.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2796c89848c20f420f91cf4b29db7cdd6c96c2/src/ipc/capnp/handler.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/handler.capnp?ref=6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
        "patch": "@@ -0,0 +1,16 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xebd8f46e2f369076;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/handler.h\");\n+\n+interface Handler $Proxy.wrap(\"interfaces::Handler\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    disconnect @1 (context :Proxy.Context) -> ();\n+}"
      }
    ]
  },
  {
    "sha": "d010f8341260e2ae50930d78c8693182df6b9f8d",
    "node_id": "C_kwDOABII59oAKGQwMTBmODM0MTI2MGUyYWU1MDkzMGQ3OGM4NjkzMTgyZGY2YjlmOGQ",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Add capnp wrapper for Chain interface",
      "tree": {
        "sha": "ad6dcb775daa6aa66111f49522b95ff4299ee9c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad6dcb775daa6aa66111f49522b95ff4299ee9c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d010f8341260e2ae50930d78c8693182df6b9f8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d010f8341260e2ae50930d78c8693182df6b9f8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d010f8341260e2ae50930d78c8693182df6b9f8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d010f8341260e2ae50930d78c8693182df6b9f8d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2796c89848c20f420f91cf4b29db7cdd6c96c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2796c89848c20f420f91cf4b29db7cdd6c96c2"
      }
    ],
    "stats": {
      "total": 387,
      "additions": 386,
      "deletions": 1
    },
    "files": [
      {
        "sha": "490f4af3a84960f290091dcc44aaa23b8a8af4a9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d010f8341260e2ae50930d78c8693182df6b9f8d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d010f8341260e2ae50930d78c8693182df6b9f8d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d010f8341260e2ae50930d78c8693182df6b9f8d",
        "patch": "@@ -306,6 +306,7 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n+ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n \n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n@@ -808,6 +809,7 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/chain.capnp \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n@@ -818,6 +820,8 @@ EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/chain-types.h \\\n+  ipc/capnp/chain.cpp \\\n   ipc/capnp/common-types.h \\\n   ipc/capnp/common.cpp \\\n   ipc/capnp/common.h \\"
      },
      {
        "sha": "5fdfb0a63c8c9af096735f4aa170fa027c405436",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d010f8341260e2ae50930d78c8693182df6b9f8d/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d010f8341260e2ae50930d78c8693182df6b9f8d/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=d010f8341260e2ae50930d78c8693182df6b9f8d",
        "patch": "@@ -308,7 +308,8 @@ class ChainClient\n     //! Load saved state.\n     virtual bool load() = 0;\n \n-    //! Start client execution and provide a scheduler.\n+    //! Start client execution and provide a scheduler. (Scheduler is\n+    //! ignored if client is out-of-process).\n     virtual void start(CScheduler& scheduler) = 0;\n \n     //! Save state to disk."
      },
      {
        "sha": "ce71c6798d7ddf7f0879aae3d31a1b24d4573255",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "added",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=d010f8341260e2ae50930d78c8693182df6b9f8d",
        "patch": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+#define BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <rpc/server.h>\n+\n+#include <any>\n+\n+//! Specialization of handleRpc needed because it takes a CRPCCommand& reference\n+//! argument, so a manual cleanup callback is needed to free the passed\n+//! CRPCCommand struct and proxy ActorCallback object.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Chain,\n+                                  ipc::capnp::messages::Chain::HandleRpcParams,\n+                                  ipc::capnp::messages::Chain::HandleRpcResults>;\n+    static ::capnp::Void invoke(Context& context);\n+};\n+\n+//! Specialization of start method needed to provide CScheduler& reference\n+//! argument.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>\n+{\n+    using ChainContext = ServerContext<ipc::capnp::messages::ChainClient,\n+                                       ipc::capnp::messages::ChainClient::StartParams,\n+                                       ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(ChainContext& context);\n+};\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder);\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest);\n+\n+\n+//! CScheduler& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<CScheduler&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! CRPCCommand& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<const CRPCCommand&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! Override to avoid assert failures that would happen trying to serialize\n+//! spent coins. Probably it would be best for Coin serialization code not\n+//! to assert, but avoiding serialization in this case is harmless.\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin);\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_CHAIN_TYPES_H"
      },
      {
        "sha": "7c57ad99b38b4d32fe95d52495f2e656b0f630cf",
        "filename": "src/ipc/capnp/chain.capnp",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.capnp?ref=d010f8341260e2ae50930d78c8693182df6b9f8d",
        "patch": "@@ -0,0 +1,163 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x94f21a4864bd2c65;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n+$Proxy.include(\"rpc/server.h\");\n+$Proxy.includeTypes(\"ipc/capnp/chain-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Chain $Proxy.wrap(\"interfaces::Chain\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getHeight @1 (context :Proxy.Context) -> (result :Int32, hasResult :Bool);\n+    getBlockHash @2 (context :Proxy.Context, height :Int32) -> (result :Data);\n+    haveBlockOnDisk @3 (context :Proxy.Context, height :Int32) -> (result :Bool);\n+    getTipLocator @4 (context :Proxy.Context) -> (result :Data);\n+    findLocatorFork @5 (context :Proxy.Context, locator :Data) -> (result :Int32, hasResult :Bool);\n+    checkFinalTx @6 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    findBlock @7 (context :Proxy.Context, hash :Data, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findFirstBlockWithTimeAndHeight @8 (context :Proxy.Context, minTime :Int64, minHeight :Int32, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findAncestorByHeight @9 (context :Proxy.Context, blockHash :Data, ancestorHeight :Int32, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findAncestorByHash @10 (context :Proxy.Context, blockHash :Data, ancestorHash :Data, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findCommonAncestor @11 (context :Proxy.Context, blockHash1 :Data, blockHash2 :Data, ancestor :FoundBlockParam, block1 :FoundBlockParam, block2 :FoundBlockParam) -> (ancestor :FoundBlockResult, block1 :FoundBlockResult, block2 :FoundBlockResult, result :Bool);\n+    findCoins @12 (context :Proxy.Context, coins :List(Common.Pair(Data, Data))) -> (coins :List(Common.Pair(Data, Data)));\n+    guessVerificationProgress @13 (context :Proxy.Context, blockHash :Data) -> (result :Float64);\n+    hasBlocks @14 (context :Proxy.Context, blockHash :Data, minHeight :Int32, maxHeight: Int32, hasMaxHeight :Bool) -> (result :Bool);\n+    isRBFOptIn @15 (context :Proxy.Context, tx :Data) -> (result :Int32);\n+    isInMempool @16 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    hasDescendantsInMempool @17 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    broadcastTransaction @18 (context :Proxy.Context, tx: Data, maxTxFee :Int64, relay :Bool) -> (error: Text, result :Bool);\n+    getTransactionAncestry @19 (context :Proxy.Context, txid :Data) -> (ancestors :UInt64, descendants :UInt64, ancestorsize :UInt64, ancestorfees :Int64);\n+    getPackageLimits @20 (context :Proxy.Context) -> (ancestors :UInt64, descendants :UInt64);\n+    checkChainLimits @21 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    estimateSmartFee @22 (context :Proxy.Context, numBlocks :Int32, conservative :Bool, wantCalc :Bool) -> (calc :FeeCalculation, result :Data);\n+    estimateMaxBlocks @23 (context :Proxy.Context) -> (result :UInt32);\n+    mempoolMinFee @24 (context :Proxy.Context) -> (result :Data);\n+    relayMinFee @25 (context :Proxy.Context) -> (result :Data);\n+    relayIncrementalFee @26 (context :Proxy.Context) -> (result :Data);\n+    relayDustFee @27 (context :Proxy.Context) -> (result :Data);\n+    havePruned @28 (context :Proxy.Context) -> (result :Bool);\n+    isReadyToBroadcast @29 (context :Proxy.Context) -> (result :Bool);\n+    isInitialBlockDownload @30 (context :Proxy.Context) -> (result :Bool);\n+    shutdownRequested @31 (context :Proxy.Context) -> (result :Bool);\n+    getAdjustedTime @32 (context :Proxy.Context) -> (result :Int64);\n+    initMessage @33 (context :Proxy.Context, message :Text) -> ();\n+    initWarning @34 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    initError @35 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    showProgress @36 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+    handleNotifications @37 (context :Proxy.Context, notifications :ChainNotifications) -> (result :Handler.Handler);\n+    waitForNotificationsIfTipChanged @38 (context :Proxy.Context, oldTip :Data) -> ();\n+    handleRpc @39 (context :Proxy.Context, command :RPCCommand) -> (result :Handler.Handler);\n+    rpcEnableDeprecated @40 (context :Proxy.Context, method :Text) -> (result :Bool);\n+    rpcRunLater @41 (context :Proxy.Context, name :Text, fn: RunLaterCallback, seconds: Int64) -> ();\n+    rpcSerializationFlags @42 (context :Proxy.Context) -> (result :Int32);\n+    getSetting @43 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    getSettingsList @44 (context :Proxy.Context, name :Text) -> (result :List(Common.UniValue));\n+    getRwSetting @45 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    updateRwSetting @46 (context :Proxy.Context, name :Text, value :Common.UniValue, write :Bool) -> (result :Bool);\n+    requestMempoolTransactions @47 (context :Proxy.Context, notifications :ChainNotifications) -> ();\n+    isTaprootActive @48 (context :Proxy.Context) -> (result :Bool);\n+}\n+\n+interface ChainNotifications $Proxy.wrap(\"interfaces::Chain::Notifications\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    transactionAddedToMempool @1 (context :Proxy.Context, tx :Data, mempoolSequence :UInt64) -> ();\n+    transactionRemovedFromMempool @2 (context :Proxy.Context, tx :Data, reason :Int32, mempoolSequence :UInt64) -> ();\n+    blockConnected @3 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    blockDisconnected @4 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    updatedBlockTip @5 (context :Proxy.Context) -> ();\n+    chainStateFlushed @6 (context :Proxy.Context, locator :Data) -> ();\n+}\n+\n+interface ChainClient $Proxy.wrap(\"interfaces::ChainClient\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    registerRpcs @1 (context :Proxy.Context) -> ();\n+    verify @2 (context :Proxy.Context) -> (result :Bool);\n+    load @3 (context :Proxy.Context) -> (result :Bool);\n+    start @4 (context :Proxy.Context, scheduler :Void) -> ();\n+    flush @5 (context :Proxy.Context) -> ();\n+    stop @6 (context :Proxy.Context) -> ();\n+    setMockTime @7 (context :Proxy.Context, time :Int64) -> ();\n+}\n+\n+struct FeeCalculation $Proxy.wrap(\"FeeCalculation\") {\n+    est @0 :EstimationResult;\n+    reason @1 :Int32;\n+    desiredTarget @2 :Int32;\n+    returnedTarget @3 :Int32;\n+}\n+\n+struct EstimationResult $Proxy.wrap(\"EstimationResult\")\n+{\n+    pass @0 :EstimatorBucket;\n+    fail @1 :EstimatorBucket;\n+    decay @2 :Float64;\n+    scale @3 :UInt32;\n+}\n+\n+struct EstimatorBucket $Proxy.wrap(\"EstimatorBucket\")\n+{\n+    start @0 :Float64;\n+    end @1 :Float64;\n+    withinTarget @2 :Float64;\n+    totalConfirmed @3 :Float64;\n+    inMempool @4 :Float64;\n+    leftMempool @5 :Float64;\n+}\n+\n+struct RPCCommand $Proxy.wrap(\"CRPCCommand\") {\n+   category @0 :Text;\n+   name @1 :Text;\n+   actor @2 :ActorCallback;\n+   argNames @3 :List(Text);\n+   uniqueId @4 :Int64 $Proxy.name(\"unique_id\");\n+}\n+\n+interface ActorCallback $Proxy.wrap(\"ProxyCallback<CRPCCommand::Actor>\") {\n+    call @0 (context :Proxy.Context, request :JSONRPCRequest, response :Common.UniValue, lastCallback :Bool) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), response :Common.UniValue, result: Bool);\n+}\n+\n+struct JSONRPCRequest $Proxy.wrap(\"JSONRPCRequest\") {\n+    id @0 :Common.UniValue;\n+    method @1 :Text $Proxy.name(\"strMethod\");\n+    params @2 :Common.UniValue;\n+    mode @3 :Int32;\n+    uri @4 :Text $Proxy.name(\"URI\");\n+    authUser @5 :Text;\n+}\n+\n+interface RunLaterCallback $Proxy.wrap(\"ProxyCallback<std::function<void()>>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+struct FoundBlockParam {\n+    wantHash @0 :Bool;\n+    wantHeight @1 :Bool;\n+    wantTime @2 :Bool;\n+    wantMaxTime @3 :Bool;\n+    wantMtpTime @4 :Bool;\n+    wantInActiveChain @5 :Bool;\n+    nextBlock @6: FoundBlockParam;\n+    wantData @7 :Bool;\n+}\n+\n+struct FoundBlockResult {\n+    hash @0 :Data;\n+    height @1 :Int32;\n+    time @2 :Int64;\n+    maxTime @3 :Int64;\n+    mtpTime @4 :Int64;\n+    inActiveChain @5 :Int64;\n+    nextBlock @6: FoundBlockResult;\n+    data @7 :Data;\n+    found @8 :Bool;\n+}"
      },
      {
        "sha": "a5d36d597708e09fc2c2b6b6ffb13fde4a8946e0",
        "filename": "src/ipc/capnp/chain.cpp",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d010f8341260e2ae50930d78c8693182df6b9f8d/src/ipc/capnp/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.cpp?ref=d010f8341260e2ae50930d78c8693182df6b9f8d",
        "patch": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/capability.h>\n+#include <capnp/list.h>\n+#include <coins.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/handler.h>\n+#include <interfaces/ipc.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/handler.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <primitives/block.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder)\n+{\n+    if (dest.m_hash) builder.setWantHash(true);\n+    if (dest.m_height) builder.setWantHeight(true);\n+    if (dest.m_time) builder.setWantTime(true);\n+    if (dest.m_max_time) builder.setWantMaxTime(true);\n+    if (dest.m_mtp_time) builder.setWantMtpTime(true);\n+    if (dest.m_in_active_chain) builder.setWantInActiveChain(true);\n+    if (dest.m_next_block) CustomBuildMessage(invoke_context, *dest.m_next_block, builder.initNextBlock());\n+    if (dest.m_data) builder.setWantData(true);\n+}\n+\n+void FindBlock(const std::function<void()>& find,\n+               const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+               ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+               interfaces::FoundBlock& found_block)\n+{\n+    uint256 hash;\n+    int height = -1;\n+    int64_t time = -1;\n+    int64_t max_time = -1;\n+    int64_t mtp_time = -1;\n+    bool in_active_chain = -1;\n+    CBlock data;\n+    if (reader.getWantHash()) found_block.hash(hash);\n+    if (reader.getWantHeight()) found_block.height(height);\n+    if (reader.getWantTime()) found_block.time(time);\n+    if (reader.getWantMaxTime()) found_block.maxTime(max_time);\n+    if (reader.getWantMtpTime()) found_block.mtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) found_block.inActiveChain(in_active_chain);\n+    if (reader.getWantData()) found_block.data(data);\n+    if (reader.hasNextBlock()) {\n+        interfaces::FoundBlock next_block;\n+        found_block.nextBlock(next_block);\n+        FindBlock(find, reader.getNextBlock(), builder.initNextBlock(), next_block);\n+    } else {\n+        find();\n+    }\n+    if (!found_block.found) return;\n+    if (reader.getWantHash()) builder.setHash(ipc::capnp::ToArray(ipc::capnp::Serialize(hash)));\n+    if (reader.getWantHeight()) builder.setHeight(height);\n+    if (reader.getWantTime()) builder.setTime(time);\n+    if (reader.getWantMaxTime()) builder.setMaxTime(max_time);\n+    if (reader.getWantMtpTime()) builder.setMtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) builder.setInActiveChain(in_active_chain);\n+    if (reader.getWantData()) builder.setData(ipc::capnp::ToArray(ipc::capnp::Serialize(data)));\n+    builder.setFound(true);\n+}\n+\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn)\n+{\n+    interfaces::FoundBlock found_block;\n+    FindBlock([&] { fn(found_block); }, reader, std::move(builder), found_block);\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest)\n+{\n+    if (!reader.getFound()) return;\n+    if (dest.m_hash) *dest.m_hash = ipc::capnp::Unserialize<uint256>(reader.getHash());\n+    if (dest.m_height) *dest.m_height = reader.getHeight();\n+    if (dest.m_time) *dest.m_time = reader.getTime();\n+    if (dest.m_max_time) *dest.m_max_time = reader.getMaxTime();\n+    if (dest.m_mtp_time) *dest.m_mtp_time = reader.getMtpTime();\n+    if (dest.m_in_active_chain) *dest.m_in_active_chain = reader.getInActiveChain();\n+    if (dest.m_next_block) CustomReadMessage(invoke_context, reader.getNextBlock(), *dest.m_next_block);\n+    if (dest.m_data) *dest.m_data = ipc::capnp::Unserialize<CBlock>(reader.getData());\n+}\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>::invoke(\n+    Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto command = params.getCommand();\n+\n+    CRPCCommand::Actor actor;\n+    ReadField(TypeList<decltype(actor)>(), context, Make<ValueField>(command.getActor()), ReadDestValue(actor));\n+    std::vector<std::string> args;\n+    ReadField(TypeList<decltype(args)>(), context, Make<ValueField>(command.getArgNames()), ReadDestValue(args));\n+\n+    auto rpc_command = std::make_unique<CRPCCommand>(command.getCategory(), command.getName(), std::move(actor),\n+                                               std::move(args), command.getUniqueId());\n+    auto handler = context.proxy_server.m_impl->handleRpc(*rpc_command);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::Handler>>(std::shared_ptr<interfaces::Handler>(handler.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([rpc_command = rpc_command.release()] { delete rpc_command; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(ChainContext& context)\n+{\n+    // This method is never called because ChainClient::Start is overridden by\n+    // WalletClient::Start. The custom implementation is needed just because\n+    // the CScheduler& argument this is supposed to pass is not serializable.\n+    assert(0);\n+}\n+\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin)\n+{\n+    // Spent coins cannot be serialized due to an assert in Coin::Serialize.\n+    return !coin.IsSpent();\n+}\n+} // namespace mp"
      }
    ]
  },
  {
    "sha": "fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
    "node_id": "C_kwDOABII59oAKGZhMjgxN2Q3YTdjYTAyYmE0Nzc1YzA1ZWI2ZDJhZGJkMDA3YjE5YmM",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Add capnp wrapper for Wallet interface",
      "tree": {
        "sha": "da9e42ab42701366494a8c15583b376c6c79fd77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da9e42ab42701366494a8c15583b376c6c79fd77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d010f8341260e2ae50930d78c8693182df6b9f8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d010f8341260e2ae50930d78c8693182df6b9f8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d010f8341260e2ae50930d78c8693182df6b9f8d"
      }
    ],
    "stats": {
      "total": 505,
      "additions": 504,
      "deletions": 1
    },
    "files": [
      {
        "sha": "46fb48050a1a8a6252e38bf0697e01eda959ae90",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -813,7 +813,8 @@ libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n-  ipc/capnp/init.capnp\n+  ipc/capnp/init.capnp \\\n+  ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n \n@@ -829,6 +830,9 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/init-types.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n+  ipc/capnp/wallet-types.h \\\n+  ipc/capnp/wallet.cpp \\\n+  ipc/capnp/wallet.h \\\n   ipc/context.h \\\n   ipc/exception.h \\\n   ipc/interfaces.cpp \\"
      },
      {
        "sha": "4414763e3f1e8a96a8f7316e6ce7cff1d69ec4ee",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -345,6 +345,8 @@ struct WalletAddress\n     std::string name;\n     std::string purpose;\n \n+    WalletAddress() = default;\n+\n     WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n         : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n     {"
      },
      {
        "sha": "75a467230b7c02efe18392a450fef2b89ae0240f",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -8,6 +8,7 @@\n #include <ipc/capnp/chain.capnp.proxy.h>\n #include <ipc/capnp/common.capnp.proxy-types.h>\n #include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n #include <rpc/server.h>\n \n #include <any>\n@@ -33,6 +34,10 @@ struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParam\n                                        ipc::capnp::messages::ChainClient::StartParams,\n                                        ipc::capnp::messages::ChainClient::StartResults>;\n     static void invoke(ChainContext& context);\n+    using WalletContext = ServerContext<ipc::capnp::messages::WalletClient,\n+                                        ipc::capnp::messages::ChainClient::StartParams,\n+                                        ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(WalletContext& context);\n };\n \n namespace mp {"
      },
      {
        "sha": "25026e0d66bc4c1ae7daa13dd989aeeaee3de9ec",
        "filename": "src/ipc/capnp/wallet-types.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet-types.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+#define BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <scheduler.h>\n+#include <wallet/wallet.h>\n+\n+class CCoinControl;\n+class CKey;\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest);\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control);\n+\n+template <typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<PKHash>, Priority<1>, InvokeContext& invoke_context, Reader&& reader, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(ipc::capnp::ToBlob<uint160>(reader.get()));\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_TYPES_H"
      },
      {
        "sha": "9f3312fb0a9ba149c3668c8680b5a1d90078a4c0",
        "filename": "src/ipc/capnp/wallet.capnp",
        "status": "added",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.capnp?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -0,0 +1,231 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xe234cce74feea00c;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/wallet.h\");\n+$Proxy.includeTypes(\"ipc/capnp/wallet-types.h\");\n+\n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Wallet $Proxy.wrap(\"interfaces::Wallet\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    encryptWallet @1 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isCrypted @2 (context :Proxy.Context) -> (result :Bool);\n+    lock @3 (context :Proxy.Context) -> (result :Bool);\n+    unlock @4 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isLocked @5 (context :Proxy.Context) -> (result :Bool);\n+    changeWalletPassphrase @6 (context :Proxy.Context, oldWalletPassphrase :Data, newWalletPassphrase :Data) -> (result :Bool);\n+    abortRescan @7 (context :Proxy.Context) -> ();\n+    backupWallet @8 (context :Proxy.Context, filename :Text) -> (result :Bool);\n+    getWalletName @9 (context :Proxy.Context) -> (result :Text);\n+    getNewDestination @10 (context :Proxy.Context, outputType :Int32, label :Text) -> (dest :TxDestination, result :Bool);\n+    getPubKey @11 (context :Proxy.Context, script :Data, address :Data) -> (pubKey :Data, result :Bool);\n+    signMessage @12 (context :Proxy.Context, message :Text, pkhash :Data) -> (signature :Text, result :Int32);\n+    isSpendable @13 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    haveWatchOnly @14 (context :Proxy.Context) -> (result :Bool);\n+    setAddressBook @15 (context :Proxy.Context, dest :TxDestination, name :Text, purpose :Text) -> (result :Bool);\n+    delAddressBook @16 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    getAddress @17 (context :Proxy.Context, dest :TxDestination, wantName :Bool, wantIsMine :Bool, wantPurpose :Bool) -> (name :Text, isMine :Int32, purpose :Text, result :Bool);\n+    getAddresses @18 (context :Proxy.Context) -> (result :List(WalletAddress));\n+    getAddressReceiveRequests @19 (context :Proxy.Context) -> (result :List(Data));\n+    setAddressReceiveRequest @20 (context :Proxy.Context, dest :TxDestination, id :Data, value :Data) -> (result :Bool);\n+    displayAddress @21 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    lockCoin @22 (context :Proxy.Context, output :Data, writeToDb :Bool) -> (result :Bool);\n+    unlockCoin @23 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    isLockedCoin @24 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    listLockedCoins @25 (context :Proxy.Context) -> (outputs :List(Data));\n+    createTransaction @26 (context :Proxy.Context, recipients :List(Recipient), coinControl :CoinControl, sign :Bool, changePos :Int32) -> (changePos :Int32, fee :Int64, failReason :Common.BilingualStr, result :Data);\n+    commitTransaction @27 (context :Proxy.Context, tx :Data, valueMap :List(Common.Pair(Text, Text)), orderForm :List(Common.Pair(Text, Text))) -> ();\n+    transactionCanBeAbandoned @28 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    abandonTransaction @29 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    transactionCanBeBumped @30 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    createBumpTransaction @31 (context :Proxy.Context, txid :Data, coinControl :CoinControl) -> (errors :List(Common.BilingualStr), oldFee :Int64, newFee :Int64, mtx :Data, result :Bool);\n+    signBumpTransaction @32 (context :Proxy.Context, mtx :Data) -> (mtx :Data, result :Bool);\n+    commitBumpTransaction @33 (context :Proxy.Context, txid :Data, mtx :Data) -> (errors :List(Common.BilingualStr), bumpedTxid :Data, result :Bool);\n+    getTx @34 (context :Proxy.Context, txid :Data) -> (result :Data);\n+    getWalletTx @35 (context :Proxy.Context, txid :Data) -> (result :WalletTx);\n+    getWalletTxs @36 (context :Proxy.Context) -> (result :List(WalletTx));\n+    tryGetTxStatus @37 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, numBlocks :Int32, blockTime :Int64, result :Bool);\n+    getWalletTxDetails @38 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, orderForm :List(Common.Pair(Text, Text)), inMempool :Bool, numBlocks :Int32, result :WalletTx);\n+    getBalances @39 (context :Proxy.Context) -> (result :WalletBalances);\n+    fillPSBT @40 (context :Proxy.Context, sighashType :Int32, sign :Bool, bip32derivs :Bool, wantNSigned :Bool) -> (nSigned: UInt64, psbt :Data, complete :Bool, result :Int32);\n+    tryGetBalances @41 (context :Proxy.Context) -> (balances :WalletBalances, blockHash :Data, result :Bool);\n+    getBalance @42 (context :Proxy.Context) -> (result :Int64);\n+    getAvailableBalance @43 (context :Proxy.Context, coinControl :CoinControl) -> (result :Int64);\n+    txinIsMine @44 (context :Proxy.Context, txin :Data) -> (result :Int32);\n+    txoutIsMine @45 (context :Proxy.Context, txout :Data) -> (result :Int32);\n+    getDebit @46 (context :Proxy.Context, txin :Data, filter :Int32) -> (result :Int64);\n+    getCredit @47 (context :Proxy.Context, txout :Data, filter :Int32) -> (result :Int64);\n+    listCoins @48 (context :Proxy.Context) -> (result :List(Common.Pair(TxDestination, List(Common.Pair(Data, WalletTxOut)))));\n+    getCoins @49 (context :Proxy.Context, outputs :List(Data)) -> (result :List(WalletTxOut));\n+    getRequiredFee @50 (context :Proxy.Context, txBytes :UInt32) -> (result :Int64);\n+    getMinimumFee @51 (context :Proxy.Context, txBytes :UInt32, coinControl :CoinControl, wantReturnedTarget :Bool, wantReason :Bool) -> (returnedTarget :Int32, reason :Int32, result :Int64);\n+    getConfirmTarget @52 (context :Proxy.Context) -> (result :UInt32);\n+    hdEnabled @53 (context :Proxy.Context) -> (result :Bool);\n+    canGetAddresses @54 (context :Proxy.Context) -> (result :Bool);\n+    privateKeysDisabled @55 (context :Proxy.Context) -> (result :Bool);\n+    hasExternalSigner @56 (context :Proxy.Context) -> (result :Bool);\n+    getDefaultAddressType @57 (context :Proxy.Context) -> (result :Int32);\n+    getDefaultMaxTxFee @58 (context :Proxy.Context) -> (result :Int64);\n+    remove @59 (context :Proxy.Context) -> ();\n+    isLegacy @60 (context :Proxy.Context) -> (result :Bool);\n+    handleUnload @61 (context :Proxy.Context, callback :UnloadWalletCallback) -> (result :Handler.Handler);\n+    handleShowProgress @62 (context :Proxy.Context, callback :ShowWalletProgressCallback) -> (result :Handler.Handler);\n+    handleStatusChanged @63 (context :Proxy.Context, callback :StatusChangedCallback) -> (result :Handler.Handler);\n+    handleAddressBookChanged @64 (context :Proxy.Context, callback :AddressBookChangedCallback) -> (result :Handler.Handler);\n+    handleTransactionChanged @65 (context :Proxy.Context, callback :TransactionChangedCallback) -> (result :Handler.Handler);\n+    handleWatchOnlyChanged @66 (context :Proxy.Context, callback :WatchOnlyChangedCallback) -> (result :Handler.Handler);\n+    handleCanGetAddressesChanged @67 (context :Proxy.Context, callback :CanGetAddressesChangedCallback) -> (result :Handler.Handler);\n+}\n+\n+interface UnloadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::UnloadFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface ShowWalletProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32) -> ();\n+}\n+\n+interface StatusChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::StatusChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface AddressBookChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::AddressBookChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, address :TxDestination, label :Text, isMine :Bool, purpose :Text, status :Int32) -> ();\n+}\n+\n+interface TransactionChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::TransactionChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, txid :Data, status :Int32) -> ();\n+}\n+\n+interface WatchOnlyChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::WatchOnlyChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, haveWatchOnly :Bool) -> ();\n+}\n+\n+interface CanGetAddressesChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::CanGetAddressesChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface WalletClient extends(Chain.ChainClient) $Proxy.wrap(\"interfaces::WalletClient\") {\n+    createWallet @0 (context :Proxy.Context, name :Text, passphrase :Text, flags :UInt64) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    loadWallet @1 (context :Proxy.Context, name :Text) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    getWalletDir @2 (context :Proxy.Context) -> (result :Text);\n+    listWalletDir @3 (context :Proxy.Context) -> (result :List(Text));\n+    getWallets @4 (context :Proxy.Context) -> (result :List(Wallet));\n+    handleLoadWallet @5 (context :Proxy.Context, callback :LoadWalletCallback) -> (result :Handler.Handler);\n+}\n+\n+interface LoadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::WalletClient::LoadWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, wallet :Wallet) -> ();\n+}\n+\n+struct Key {\n+    secret @0 :Data;\n+    isCompressed @1 :Bool;\n+}\n+\n+struct TxDestination {\n+    pkHash @0 :Data;\n+    scriptHash @1 :Data;\n+    witnessV0ScriptHash @2 :Data;\n+    witnessV0KeyHash @3 :Data;\n+    witnessUnknown @4 :WitnessUnknown;\n+}\n+\n+struct WitnessUnknown $Proxy.wrap(\"WitnessUnknown\")\n+{\n+    version @0 :UInt32;\n+    length @1 :UInt32;\n+    program @2 :Data;\n+}\n+\n+struct WalletAddress $Proxy.wrap(\"interfaces::WalletAddress\") {\n+    dest @0 :TxDestination;\n+    isMine @1 :Int32 $Proxy.name(\"is_mine\");\n+    name @2 :Text;\n+    purpose @3 :Text;\n+}\n+\n+struct Recipient $Proxy.wrap(\"CRecipient\") {\n+    scriptPubKey @0 :Data;\n+    amount @1 :Int64 $Proxy.name(\"nAmount\");\n+    subtractFeeFromAmount @2 :Bool $Proxy.name(\"fSubtractFeeFromAmount\");\n+}\n+\n+struct CoinControl {\n+    destChange @0 :TxDestination;\n+    hasChangeType @1 :Bool;\n+    changeType @2 :Int32;\n+    allowOtherInputs @3 :Bool;\n+    allowWatchOnly @4 :Bool;\n+    overrideFeeRate @5 :Bool;\n+    hasFeeRate @6 :Bool;\n+    feeRate @7 :Data;\n+    hasConfirmTarget @8 :Bool;\n+    confirmTarget @9 :Int32;\n+    hasSignalRbf @10 :Bool;\n+    signalRbf @11 :Bool;\n+    feeMode @12 :Int32;\n+    minDepth @13 :Int32;\n+    setSelected @14 :List(Data);\n+}\n+\n+struct WalletTx $Proxy.wrap(\"interfaces::WalletTx\") {\n+    tx @0 :Data;\n+    txinIsMine @1 :List(Int32) $Proxy.name(\"txin_is_mine\");\n+    txoutIsMine @2 :List(Int32) $Proxy.name(\"txout_is_mine\");\n+    txoutAddress @3 :List(TxDestination) $Proxy.name(\"txout_address\");\n+    txoutAddressIsMine @4 :List(Int32) $Proxy.name(\"txout_address_is_mine\");\n+    credit @5 :Int64;\n+    debit @6 :Int64;\n+    change @7 :Int64;\n+    time @8 :Int64;\n+    valueMap @9 :List(Common.Pair(Text, Text)) $Proxy.name(\"value_map\");\n+    isCoinbase @10 :Bool $Proxy.name(\"is_coinbase\");\n+}\n+\n+struct WalletTxOut $Proxy.wrap(\"interfaces::WalletTxOut\") {\n+    txout @0 :Data;\n+    time @1 :Int64;\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    isSpent @3 :Bool $Proxy.name(\"is_spent\");\n+}\n+\n+struct WalletTxStatus $Proxy.wrap(\"interfaces::WalletTxStatus\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blocksToMaturity @1 :Int32 $Proxy.name(\"blocks_to_maturity\");\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    timeReceived @3 :UInt32 $Proxy.name(\"time_received\");\n+    lockTime @4 :UInt32 $Proxy.name(\"lock_time\");\n+    isFinal @5 :Bool $Proxy.name(\"is_final\");\n+    isTrusted @6 :Bool $Proxy.name(\"is_trusted\");\n+    isAbandoned @7 :Bool $Proxy.name(\"is_abandoned\");\n+    isCoinbase @8 :Bool $Proxy.name(\"is_coinbase\");\n+    isInMainChain @9 :Bool $Proxy.name(\"is_in_main_chain\");\n+}\n+\n+struct WalletBalances $Proxy.wrap(\"interfaces::WalletBalances\") {\n+    balance @0 :Int64;\n+    unconfirmedBalance @1 :Int64 $Proxy.name(\"unconfirmed_balance\");\n+    immatureBalance @2 :Int64 $Proxy.name(\"immature_balance\");\n+    haveWatchOnly @3 :Bool $Proxy.name(\"have_watch_only\");\n+    watchOnlyBalance @4 :Int64 $Proxy.name(\"watch_only_balance\");\n+    unconfirmedWatchOnlyBalance @5 :Int64 $Proxy.name(\"unconfirmed_watch_only_balance\");\n+    immatureWatchOnlyBalance @6 :Int64 $Proxy.name(\"immature_watch_only_balance\");\n+}"
      },
      {
        "sha": "941cc4c06267a16f4c5450757e13313367215c48",
        "filename": "src/ipc/capnp/wallet.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.cpp?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/list.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/wallet-types.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <ipc/capnp/wallet.h>\n+#include <key.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/proxy.h>\n+#include <mp/util.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <scheduler.h>\n+#include <script/standard.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util/threadnames.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n+\n+#include <cstdint>\n+#include <future>\n+#include <memory>\n+#include <optional>\n+#include <string.h>\n+#include <system_error>\n+#include <variant>\n+#include <vector>\n+\n+namespace mp {\n+void ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>::invokeDestroy()\n+{\n+    if (m_scheduler) {\n+        m_scheduler->stop();\n+        m_result.get();\n+        m_scheduler.reset();\n+    }\n+    ProxyServerBase::invokeDestroy();\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(WalletContext& context)\n+{\n+    if (!context.proxy_server.m_scheduler) {\n+        context.proxy_server.m_scheduler = std::make_unique<CScheduler>();\n+        CScheduler* scheduler = context.proxy_server.m_scheduler.get();\n+        context.proxy_server.m_result = std::async([scheduler]() {\n+            util::ThreadRename(\"schedqueue\");\n+            scheduler->serviceQueue();\n+        });\n+    }\n+    context.proxy_server.m_impl->start(*context.proxy_server.m_scheduler);\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder)\n+{\n+    if (const PKHash* pkHash = std::get_if<PKHash>(&dest)) {\n+        builder.setPkHash(ipc::capnp::ToArray(*pkHash));\n+    } else if (const ScriptHash* scriptHash = std::get_if<ScriptHash>(&dest)) {\n+        builder.setScriptHash(ipc::capnp::ToArray(*scriptHash));\n+    } else if (const WitnessV0ScriptHash* witnessV0ScriptHash = std::get_if<WitnessV0ScriptHash>(&dest)) {\n+        builder.setWitnessV0ScriptHash(ipc::capnp::ToArray(*witnessV0ScriptHash));\n+    } else if (const WitnessV0KeyHash* witnessV0KeyHash = std::get_if<WitnessV0KeyHash>(&dest)) {\n+        builder.setWitnessV0KeyHash(ipc::capnp::ToArray(*witnessV0KeyHash));\n+    } else if (const WitnessUnknown* witnessUnknown = std::get_if<WitnessUnknown>(&dest)) {\n+        BuildField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(builder.initWitnessUnknown()),\n+                   *witnessUnknown);\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest)\n+{\n+    if (reader.hasPkHash()) {\n+        dest = PKHash(ipc::capnp::ToBlob<uint160>(reader.getPkHash()));\n+    } else if (reader.hasScriptHash()) {\n+        dest = ScriptHash(ipc::capnp::ToBlob<uint160>(reader.getScriptHash()));\n+    } else if (reader.hasWitnessV0ScriptHash()) {\n+        dest = WitnessV0ScriptHash(ipc::capnp::ToBlob<uint256>(reader.getWitnessV0ScriptHash()));\n+    } else if (reader.hasWitnessV0KeyHash()) {\n+        dest = WitnessV0KeyHash(ipc::capnp::ToBlob<uint160>(reader.getWitnessV0KeyHash()));\n+    } else if (reader.hasWitnessUnknown()) {\n+        ReadField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(reader.getWitnessUnknown()),\n+                  ReadDestValue(std::get<WitnessUnknown>(dest)));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder)\n+{\n+    builder.setSecret(ipc::capnp::FromBlob(key));\n+    builder.setIsCompressed(key.IsCompressed());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key)\n+{\n+    auto secret = reader.getSecret();\n+    key.Set(secret.begin(), secret.end(), reader.getIsCompressed());\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder)\n+{\n+    CustomBuildMessage(invoke_context, coin_control.destChange, builder.initDestChange());\n+    if (coin_control.m_change_type) {\n+        builder.setHasChangeType(true);\n+        builder.setChangeType(static_cast<int>(*coin_control.m_change_type));\n+    }\n+    builder.setAllowOtherInputs(coin_control.fAllowOtherInputs);\n+    builder.setAllowWatchOnly(coin_control.fAllowWatchOnly);\n+    builder.setOverrideFeeRate(coin_control.fOverrideFeeRate);\n+    if (coin_control.m_feerate) {\n+        builder.setFeeRate(ipc::capnp::ToArray(ipc::capnp::Serialize(*coin_control.m_feerate)));\n+    }\n+    if (coin_control.m_confirm_target) {\n+        builder.setHasConfirmTarget(true);\n+        builder.setConfirmTarget(*coin_control.m_confirm_target);\n+    }\n+    if (coin_control.m_signal_bip125_rbf) {\n+        builder.setHasSignalRbf(true);\n+        builder.setSignalRbf(*coin_control.m_signal_bip125_rbf);\n+    }\n+    builder.setFeeMode(int32_t(coin_control.m_fee_mode));\n+    builder.setMinDepth(coin_control.m_min_depth);\n+    std::vector<COutPoint> selected;\n+    coin_control.ListSelected(selected);\n+    auto builder_selected = builder.initSetSelected(selected.size());\n+    size_t i = 0;\n+    for (const COutPoint& output : selected) {\n+        builder_selected.set(i, ipc::capnp::ToArray(ipc::capnp::Serialize(output)));\n+        ++i;\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control)\n+{\n+    CustomReadMessage(invoke_context, reader.getDestChange(), coin_control.destChange);\n+    if (reader.getHasChangeType()) {\n+        coin_control.m_change_type = OutputType(reader.getChangeType());\n+    }\n+    coin_control.fAllowOtherInputs = reader.getAllowOtherInputs();\n+    coin_control.fAllowWatchOnly = reader.getAllowWatchOnly();\n+    coin_control.fOverrideFeeRate = reader.getOverrideFeeRate();\n+    if (reader.hasFeeRate()) {\n+        coin_control.m_feerate = ipc::capnp::Unserialize<CFeeRate>(reader.getFeeRate());\n+    }\n+    if (reader.getHasConfirmTarget()) {\n+        coin_control.m_confirm_target = reader.getConfirmTarget();\n+    }\n+    if (reader.getHasSignalRbf()) {\n+        coin_control.m_signal_bip125_rbf = reader.getSignalRbf();\n+    }\n+    coin_control.m_fee_mode = FeeEstimateMode(reader.getFeeMode());\n+    coin_control.m_min_depth = reader.getMinDepth();\n+    for (const auto output : reader.getSetSelected()) {\n+        coin_control.Select(ipc::capnp::Unserialize<COutPoint>(output));\n+    }\n+}\n+} // namespace mp"
      },
      {
        "sha": "6c161933cd480746e3f30d1b4e1a9a6098a48f4f",
        "filename": "src/ipc/capnp/wallet.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/ipc/capnp/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_H\n+#define BITCOIN_IPC_CAPNP_WALLET_H\n+\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <mp/proxy.h>\n+\n+#include <future>\n+#include <memory>\n+\n+class CScheduler;\n+namespace interfaces {\n+class WalletClient;\n+} // namespace interfaces\n+namespace ipc {\n+namespace capnp {\n+namespace messages {\n+struct WalletClient;\n+} // namespace messages\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Specialization of WalletClient proxy server needed hold a CSCheduler instance.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    void invokeDestroy();\n+\n+    std::unique_ptr<CScheduler> m_scheduler;\n+    std::future<void> m_result;\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_H"
      },
      {
        "sha": "450bb968f165f91980725768fa794f31ca11e9ae",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -60,6 +60,9 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet-types.cpp and\n+    // ipc/capnp/wallet.capnp).\n \n     CCoinControl();\n "
      },
      {
        "sha": "edf71276c938d39a77ebba33133fbd15a9805f71",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "patch": "@@ -219,6 +219,8 @@ struct CRecipient\n     CScript scriptPubKey;\n     CAmount nAmount;\n     bool fSubtractFeeFromAmount;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet.capnp).\n };\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime"
      }
    ]
  },
  {
    "sha": "de51b8be8061ade13d4853fff9037783eb1e1c3a",
    "node_id": "C_kwDOABII59oAKGRlNTFiOGJlODA2MWFkZTEzZDQ4NTNmZmY5MDM3NzgzZWIxZTFjM2E",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Add capnp wrapper for Node interface",
      "tree": {
        "sha": "e45fcc2d6ac5240ba512661f2ff620325eb718e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e45fcc2d6ac5240ba512661f2ff620325eb718e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de51b8be8061ade13d4853fff9037783eb1e1c3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de51b8be8061ade13d4853fff9037783eb1e1c3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de51b8be8061ade13d4853fff9037783eb1e1c3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de51b8be8061ade13d4853fff9037783eb1e1c3a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2817d7a7ca02ba4775c05eb6d2adbd007b19bc"
      }
    ],
    "stats": {
      "total": 526,
      "additions": 526,
      "deletions": 0
    },
    "files": [
      {
        "sha": "68ae470f0d88f1407f78692fc8c91957166d4622",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -814,6 +814,7 @@ libbitcoin_ipc_mpgen_input = \\\n   ipc/capnp/echo.capnp \\\n   ipc/capnp/handler.capnp \\\n   ipc/capnp/init.capnp \\\n+  ipc/capnp/node.capnp \\\n   ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n@@ -828,6 +829,9 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/node-types.h \\\n+  ipc/capnp/node.cpp \\\n+  ipc/capnp/node.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n   ipc/capnp/wallet-types.h \\"
      },
      {
        "sha": "f181ffd09e311133b3260a4987cc0449cd424e6a",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -8,8 +8,10 @@\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <ipc/capnp/common.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.h>\n #include <mp/proxy-types.h>\n #include <net_processing.h>\n+#include <net_types.h>\n #include <netbase.h>\n #include <util/translation.h>\n #include <validation.h>\n@@ -117,6 +119,15 @@ void CustomBuildMessage(InvokeContext& invoke_context,\n void CustomReadMessage(InvokeContext& invoke_context,\n                        const ipc::capnp::messages::UniValue::Reader& reader,\n                        UniValue& univalue);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap);\n //!@}\n \n template <typename LocalType, typename Reader, typename ReadDest>"
      },
      {
        "sha": "ec65719c27bf29898b59252a6ef0dcbb9a1bdcea",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+#define BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+//! Specialization of rpcSetTimerInterfaceIfUnset needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetResults>;\n+    static void invoke(Context& context);\n+};\n+\n+//! Specialization of rpcUnsetTimerInterface needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceResults>;\n+    static void invoke(Context& context);\n+};\n+\n+namespace mp {\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    const auto& params = server_context.call_context.getParams();\n+    const auto& value = Accessor::get(params);\n+    std::vector<const char*> argv(value.size());\n+    size_t i = 0;\n+    for (const auto arg : value) {\n+        argv[i] = arg.cStr();\n+        ++i;\n+    }\n+    return fn.invoke(server_context, std::forward<Args>(args)..., argv.size(), argv.data());\n+}\n+\n+template <typename Output>\n+void CustomBuildField(TypeList<int, const char* const*>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      int argc,\n+                      const char* const* argv,\n+                      Output&& output)\n+{\n+    auto args = output.init(argc);\n+    for (int i = 0; i < argc; ++i) {\n+        args.set(i, argv[i]);\n+    }\n+}\n+\n+template <typename InvokeContext>\n+static inline ::capnp::Void BuildPrimitive(InvokeContext& invoke_context, RPCTimerInterface*, TypeList<::capnp::Void>)\n+{\n+    return {};\n+}\n+\n+//! RPCTimerInterface* server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<RPCTimerInterface*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::tuple<CNodeStats, bool, CNodeStateStats>>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      Value&& stats,\n+                      Output&& output)\n+{\n+    // FIXME should pass message_builder instead of builder below to avoid\n+    // calling output.set twice Need ValueBuilder class analogous to\n+    // ValueReader for this\n+    BuildField(TypeList<CNodeStats>(), invoke_context, output, std::get<0>(stats));\n+    if (std::get<1>(stats)) {\n+        auto message_builder = output.init();\n+        using Accessor = ProxyStruct<ipc::capnp::messages::NodeStats>::StateStatsAccessor;\n+        StructField<Accessor, ipc::capnp::messages::NodeStats::Builder> field_output{message_builder};\n+        BuildField(TypeList<CNodeStateStats>(), invoke_context, field_output, std::get<2>(stats));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats);\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<CSubNet>, Priority<1>, InvokeContext& invoke_context, Value&& subnet, Output&& output)\n+{\n+    std::string subnet_str = subnet.ToString();\n+    auto result = output.init(subnet_str.size());\n+    memcpy(result.begin(), subnet_str.data(), subnet_str.size());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_TYPES_H"
      },
      {
        "sha": "0b347c143eeba7520d086ce4baa6527a81b7a839",
        "filename": "src/ipc/capnp/node.capnp",
        "status": "added",
        "additions": 199,
        "deletions": 0,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.capnp?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -0,0 +1,199 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x92546c47dc734b2e;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/node.h\");\n+$Proxy.includeTypes(\"ipc/capnp/node-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+using Wallet = import \"wallet.capnp\";\n+\n+interface Node $Proxy.wrap(\"interfaces::Node\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    initLogging @1 (context :Proxy.Context) -> ();\n+    initParameterInteraction @2 (context :Proxy.Context) -> ();\n+    getWarnings @3 (context :Proxy.Context) -> (result :Common.BilingualStr);\n+    getLogCategories @4 (context :Proxy.Context) -> (result :UInt32);\n+    baseInitialize @5 (context :Proxy.Context, globalArgs :Common.GlobalArgs) -> (error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appInitMain @6 (context :Proxy.Context) -> (tipInfo :BlockAndHeaderTipInfo, error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appShutdown @7 (context :Proxy.Context) -> ();\n+    startShutdown @8 (context :Proxy.Context) -> ();\n+    shutdownRequested @9 (context :Proxy.Context) -> (result :Bool);\n+    mapPort @10 (context :Proxy.Context, useUPnP :Bool, useNatPnP :Bool) -> ();\n+    getProxy @11 (context :Proxy.Context, net :Int32) -> (proxyInfo :ProxyType, result :Bool);\n+    getNodeCount @12 (context :Proxy.Context, flags :Int32) -> (result :UInt64);\n+    getNodesStats @13 (context :Proxy.Context) -> (stats :List(NodeStats), result :Bool);\n+    getBanned @14 (context :Proxy.Context) -> (banmap :Banmap, result :Bool);\n+    ban @15 (context :Proxy.Context, netAddr :Data, banTimeOffset :Int64) -> (result :Bool);\n+    unban @16 (context :Proxy.Context, ip :Data) -> (result :Bool);\n+    disconnectByAddress @17 (context :Proxy.Context, address :Data) -> (result :Bool);\n+    disconnectById @18 (context :Proxy.Context, id :Int64) -> (result :Bool);\n+    listExternalSigners @19 (context :Proxy.Context) -> (result :List(ExternalSigner));\n+    getTotalBytesRecv @20 (context :Proxy.Context) -> (result :Int64);\n+    getTotalBytesSent @21 (context :Proxy.Context) -> (result :Int64);\n+    getMempoolSize @22 (context :Proxy.Context) -> (result :UInt64);\n+    getMempoolDynamicUsage @23 (context :Proxy.Context) -> (result :UInt64);\n+    getHeaderTip @24 (context :Proxy.Context) -> (height :Int32, blockTime :Int64, result :Bool);\n+    getNumBlocks @25 (context :Proxy.Context) -> (result :Int32);\n+    getBestBlockHash @26 (context :Proxy.Context) -> (result :Data);\n+    getLastBlockTime @27 (context :Proxy.Context) -> (result :Int64);\n+    getVerificationProgress @28 (context :Proxy.Context) -> (result :Float64);\n+    isInitialBlockDownload @29 (context :Proxy.Context) -> (result :Bool);\n+    getReindex @30 (context :Proxy.Context) -> (result :Bool);\n+    getImporting @31 (context :Proxy.Context) -> (result :Bool);\n+    setNetworkActive @32 (context :Proxy.Context, active :Bool) -> ();\n+    getNetworkActive @33 (context :Proxy.Context) -> (result :Bool);\n+    getDustRelayFee @34 (context :Proxy.Context) -> (result :Data);\n+    executeRpc @35 (context :Proxy.Context, command :Text, params :Common.UniValue, uri :Text) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), result :Common.UniValue);\n+    listRpcCommands @36 (context :Proxy.Context) -> (result :List(Text));\n+    rpcSetTimerInterfaceIfUnset @37 (context :Proxy.Context, iface :Void) -> ();\n+    rpcUnsetTimerInterface @38 (context :Proxy.Context, iface :Void) -> ();\n+    getUnspentOutput @39 (context :Proxy.Context, output :Data) -> (coin :Data, result :Bool);\n+    customWalletClient @40 (context :Proxy.Context) -> (result :Wallet.WalletClient) $Proxy.name(\"walletClient\");\n+    handleInitMessage @41 (context :Proxy.Context, callback :InitMessageCallback) -> (result :Handler.Handler);\n+    handleMessageBox @42 (context :Proxy.Context, callback :MessageBoxCallback) -> (result :Handler.Handler);\n+    handleQuestion @43 (context :Proxy.Context, callback :QuestionCallback) -> (result :Handler.Handler);\n+    handleShowProgress @44 (context :Proxy.Context, callback :ShowNodeProgressCallback) -> (result :Handler.Handler);\n+    handleInitWallet @45 (context :Proxy.Context, callback :InitWalletCallback) -> (result :Handler.Handler);\n+    handleNotifyNumConnectionsChanged @46 (context :Proxy.Context, callback :NotifyNumConnectionsChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyNetworkActiveChanged @47 (context :Proxy.Context, callback :NotifyNetworkActiveChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyAlertChanged @48 (context :Proxy.Context, callback :NotifyAlertChangedCallback) -> (result :Handler.Handler);\n+    handleBannedListChanged @49 (context :Proxy.Context, callback :BannedListChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyBlockTip @50 (context :Proxy.Context, callback :NotifyBlockTipCallback) -> (result :Handler.Handler);\n+    handleNotifyHeaderTip @51 (context :Proxy.Context, callback :NotifyHeaderTipCallback) -> (result :Handler.Handler);\n+}\n+\n+interface ExternalSigner $Proxy.wrap(\"interfaces::ExternalSigner\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getName @1 (context :Proxy.Context) -> (result :Text);\n+}\n+\n+interface InitMessageCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitMessageFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Text) -> ();\n+}\n+\n+interface MessageBoxCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::MessageBoxFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface QuestionCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::QuestionFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, nonInteractiveMessage :Text, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface ShowNodeProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+}\n+\n+interface InitWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyNumConnectionsChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNumConnectionsChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, newNumConnections :Int32) -> ();\n+}\n+\n+interface NotifyNetworkActiveChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNetworkActiveChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, networkActive :Bool) -> ();\n+}\n+\n+interface NotifyAlertChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyAlertChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface BannedListChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::BannedListChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyBlockTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyBlockTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+interface NotifyHeaderTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyHeaderTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+struct ProxyType $Proxy.wrap(\"proxyType\") {\n+    proxy @0 :Data;\n+    randomizeCredentials @1 :Bool $Proxy.name(\"randomize_credentials\");\n+}\n+\n+struct NodeStats $Proxy.wrap(\"CNodeStats\") {\n+    nodeid @0 :Int64 $Proxy.name(\"nodeid\");\n+    services @1 :UInt64 $Proxy.name(\"nServices\");\n+    relayTxes @2 :Bool $Proxy.name(\"fRelayTxes\");\n+    lastSend @3 :Int64 $Proxy.name(\"nLastSend\");\n+    lastRecv @4 :Int64 $Proxy.name(\"nLastRecv\");\n+    lastTXTime @5 :Int64 $Proxy.name(\"nLastTXTime\");\n+    lastBlockTime @6 :Int64 $Proxy.name(\"nLastBlockTime\");\n+    timeConnected @7 :Int64 $Proxy.name(\"nTimeConnected\");\n+    timeOffset @8 :Int64 $Proxy.name(\"nTimeOffset\");\n+    addrName @9 :Text $Proxy.name(\"m_addr_name\");\n+    version @10 :Int32 $Proxy.name(\"nVersion\");\n+    cleanSubVer @11 :Text $Proxy.name(\"cleanSubVer\");\n+    inbound @12 :Bool $Proxy.name(\"fInbound\");\n+    bip152HighbandwidthTo @13 :Bool $Proxy.name(\"m_bip152_highbandwidth_to\");\n+    bip152HighbandwidthFrom @14 :Bool $Proxy.name(\"m_bip152_highbandwidth_from\");\n+    startingHeight @15 :Int32 $Proxy.name(\"m_starting_height\");\n+    sendBytes @16 :UInt64 $Proxy.name(\"nSendBytes\");\n+    sendBytesPerMsgCmd @17 :List(Common.PairStr64) $Proxy.name(\"mapSendBytesPerMsgCmd\");\n+    recvBytes @18 :UInt64 $Proxy.name(\"nRecvBytes\");\n+    recvBytesPerMsgCmd @19 :List(Common.PairStr64) $Proxy.name(\"mapRecvBytesPerMsgCmd\");\n+    permissionFlags @20 :Int32 $Proxy.name(\"m_permissionFlags\");\n+    pingTime @21 :Int64 $Proxy.name(\"m_last_ping_time\");\n+    minPingTime @22 :Int64 $Proxy.name(\"m_min_ping_time\");\n+    minFeeFilter @23 :Int64 $Proxy.name(\"minFeeFilter\");\n+    addrLocal @24 :Text $Proxy.name(\"addrLocal\");\n+    addr @25 :Data $Proxy.name(\"addr\");\n+    addrBind @26 :Data $Proxy.name(\"addrBind\");\n+    network @27 :Int32 $Proxy.name(\"m_network\");\n+    mappedAs @28 :UInt32 $Proxy.name(\"m_mapped_as\");\n+    connType @29 :Int32 $Proxy.name(\"m_conn_type\");\n+    stateStats @30 :NodeStateStats $Proxy.skip;\n+}\n+\n+struct NodeStateStats $Proxy.wrap(\"CNodeStateStats\") {\n+    syncHeight @0 :Int32 $Proxy.name(\"nSyncHeight\");\n+    commonHeight @1 :Int32 $Proxy.name(\"nCommonHeight\");\n+    startingHeight @2 :Int32 $Proxy.name(\"m_starting_height\");\n+    pingWait @3 :Int64 $Proxy.name(\"m_ping_wait\");\n+    heightInFlight @4 :List(Int32) $Proxy.name(\"vHeightInFlight\");\n+    addressesProcessed @5 :UInt64 $Proxy.name(\"m_addr_processed\");\n+    addressesRateLimited @6 :UInt64 $Proxy.name(\"m_addr_rate_limited\");\n+    addressRelayEnabled @7 :Bool $Proxy.name(\"m_addr_relay_enabled\");\n+}\n+\n+struct Banmap {\n+    json @0 :Text;\n+}\n+\n+struct BlockTip $Proxy.wrap(\"interfaces::BlockTip\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    blockHash @2 :Data $Proxy.name(\"block_hash\");\n+}\n+\n+struct BlockAndHeaderTipInfo $Proxy.wrap(\"interfaces::BlockAndHeaderTipInfo\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    headerHeight @2 :Int32 $Proxy.name(\"header_height\");\n+    headerTime @3 :Int64 $Proxy.name(\"header_time\");\n+    verificationProgress @4 :Float64 $Proxy.name(\"verification_progress\");\n+}"
      },
      {
        "sha": "d18fc226a2dd2493d47fc53f4abf2692370c0aa5",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "added",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/list.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node-types.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/node.h>\n+#include <kj/async-io.h>\n+#include <kj/async-prelude.h>\n+#include <kj/async.h>\n+#include <kj/memory.h>\n+#include <kj/time.h>\n+#include <kj/timer.h>\n+#include <kj/units.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <rpc/server.h>\n+#include <sys/types.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <tuple>\n+#include <utility>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+namespace ipc {\n+namespace capnp {\n+class RpcTimer : public ::RPCTimerBase\n+{\n+public:\n+    RpcTimer(mp::EventLoop& loop, std::function<void(void)>& fn, int64_t millis)\n+        : m_fn(fn), m_promise(loop.m_io_context.provider->getTimer()\n+                                  .afterDelay(millis * kj::MILLISECONDS)\n+                                  .then([this]() { m_fn(); })\n+                                  .eagerlyEvaluate(nullptr))\n+    {\n+    }\n+    ~RpcTimer() noexcept override {}\n+\n+    std::function<void(void)> m_fn;\n+    kj::Promise<void> m_promise;\n+};\n+\n+class RpcTimerInterface : public ::RPCTimerInterface\n+{\n+public:\n+    RpcTimerInterface(mp::EventLoop& loop) : m_loop(loop) {}\n+    const char* Name() override { return \"Cap'n Proto\"; }\n+    RPCTimerBase* NewTimer(std::function<void(void)>& fn, int64_t millis) override\n+    {\n+        RPCTimerBase* result;\n+        m_loop.sync([&] { result = new RpcTimer(m_loop, fn, millis); });\n+        return result;\n+    }\n+    mp::EventLoop& m_loop;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>::invoke(Context& context)\n+{\n+    if (!context.proxy_server.m_timer_interface) {\n+        auto timer = std::make_unique<ipc::capnp::RpcTimerInterface>(context.proxy_server.m_context.connection->m_loop);\n+        context.proxy_server.m_timer_interface = std::move(timer);\n+    }\n+    context.proxy_server.m_impl->rpcSetTimerInterfaceIfUnset(context.proxy_server.m_timer_interface.get());\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>::invoke(Context& context)\n+{\n+    context.proxy_server.m_impl->rpcUnsetTimerInterface(context.proxy_server.m_timer_interface.get());\n+    context.proxy_server.m_timer_interface.reset();\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats)\n+{\n+    CNodeStats& node = std::get<0>(node_stats);\n+    ReadField(TypeList<CNodeStats>(), invoke_context, Make<ValueField>(reader), ReadDestValue(node));\n+    if ((std::get<1>(node_stats) = reader.hasStateStats())) {\n+        CNodeStateStats& state = std::get<2>(node_stats);\n+        ReadField(TypeList<CNodeStateStats>(), invoke_context, Make<ValueField>(reader.getStateStats()),\n+                  ReadDestValue(state));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet)\n+{\n+    std::string subnet_str = ipc::capnp::ToString(reader);\n+    if (!LookupSubNet(subnet_str, subnet)) {\n+        throw std::runtime_error(\n+            strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder)\n+{\n+    builder.setJson(BanMapToJson(banmap).write());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap)\n+{\n+    UniValue banmap_json;\n+    if (!banmap_json.read(ipc::capnp::ToString(reader.getJson()))) {\n+        throw std::runtime_error(\"Could not parse banmap json\");\n+    }\n+    BanMapFromJson(banmap_json, banmap);\n+}\n+\n+interfaces::WalletClient& ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>::walletClient()\n+{\n+    if (!m_wallet_client) {\n+        m_wallet_client = self().customWalletClient();\n+    }\n+    return *m_wallet_client;\n+}\n+} // namespace mp"
      },
      {
        "sha": "65c87113018e7dbe13b7a4d8ca42f370555e5764",
        "filename": "src/ipc/capnp/node.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/ipc/capnp/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_H\n+#define BITCOIN_IPC_CAPNP_NODE_H\n+\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+\n+#include <memory>\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+//! Specialization of Node proxy server needed to add m_timer_interface\n+//! member used by rpcSetTimerInterfaceIfUnset and rpcUnsetTimerInterface\n+//! methods.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    std::unique_ptr<RPCTimerInterface> m_timer_interface;\n+};\n+\n+//! Specialization of Node client to manage memory of WalletClient& reference\n+//! returned by walletClient().\n+template <>\n+class mp::ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyClientBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyClientBase::ProxyClientBase;\n+    interfaces::WalletClient& walletClient() override;\n+\n+private:\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n+};\n+\n+//! Specialization of Node::walletClient client code to manage memory of\n+//! WalletClient& reference returned by walletClient().\n+template <>\n+struct mp::ProxyClientMethodTraits<ipc::capnp::messages::Node::CustomWalletClientParams>\n+    : public FunctionTraits<std::unique_ptr<interfaces::WalletClient> (interfaces::Node::*const)()>\n+{\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_H"
      },
      {
        "sha": "563198f13e49a113de6746ebb8d2dc63258fa49c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -272,6 +272,9 @@ class CNodeStats\n     Network m_network;\n     uint32_t m_mapped_as;\n     ConnectionType m_conn_type;\n+    // Note: If you add fields to this class, you should also consider updating\n+    // the CNode::copyStats() method, the getpeerinfo RPC (in rpc/net.cpp), and\n+    // the IPC serialization (in ipc/capnp/node.capnp).\n };\n \n "
      },
      {
        "sha": "62742aa691cc91158b2b9fffef46064047431419",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -32,6 +32,9 @@ struct CNodeStateStats {\n     uint64_t m_addr_processed = 0;\n     uint64_t m_addr_rate_limited = 0;\n     bool m_addr_relay_enabled{false};\n+    // Note: If you add fields to this struct, you should also consider updating\n+    // the getpeerinfo RPC (in rpc/net.cpp), and the IPC serialization code (in\n+    // ipc/capnp/node.cpp and ipc/capnp/node.capnp).\n };\n \n class PeerManager : public CValidationInterface, public NetEventsInterface"
      },
      {
        "sha": "f13edd96967c6bfd4498714573a05e507e0caa47",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de51b8be8061ade13d4853fff9037783eb1e1c3a/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "patch": "@@ -55,6 +55,8 @@ class proxyType\n \n     CService proxy;\n     bool randomize_credentials;\n+    // Note: If you add fields to this class, you should also update the IPC\n+    // serialization code (in ipc/capnp/node.capnp).\n };\n \n /** Credentials for proxy authentication */"
      }
    ]
  },
  {
    "sha": "a6e9b8276db6cde126c587969001c8e606e6b841",
    "node_id": "C_kwDOABII59oAKGE2ZTliODI3NmRiNmNkZTEyNmM1ODc5NjkwMDFjOGU2MDZlNmI4NDE",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Make bitcoin-gui spawn a bitcoin-node process\n\nSpawn node subprocess instead of running node code internally",
      "tree": {
        "sha": "68eb5b580dca0da666840c8cd0bab54b3a0ce25e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68eb5b580dca0da666840c8cd0bab54b3a0ce25e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6e9b8276db6cde126c587969001c8e606e6b841",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e9b8276db6cde126c587969001c8e606e6b841",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e9b8276db6cde126c587969001c8e606e6b841",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e9b8276db6cde126c587969001c8e606e6b841/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de51b8be8061ade13d4853fff9037783eb1e1c3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de51b8be8061ade13d4853fff9037783eb1e1c3a"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 105,
      "deletions": 19
    },
    "files": [
      {
        "sha": "df7f625e767cfc506b875d88477eaf6e6ae886f9",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <interfaces/chain.h>\n-#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n-#include <interfaces/node.h>\n-#include <interfaces/wallet.h>\n-#include <node/context.h>\n-#include <util/system.h>\n \n #include <memory>\n \n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context);\n+} // namespace capnp\n+} // namespace ipc\n+\n namespace init {\n namespace {\n const char* EXE_NAME = \"bitcoin-gui\";\n@@ -22,18 +22,9 @@ class BitcoinGuiInit : public interfaces::Init\n public:\n     BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n     {\n-        m_node.args = &gArgs;\n-        m_node.init = this;\n-    }\n-    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n-    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n+        ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n-    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "fa457b6b7fc659b8e66ef8fba132f9fb5885ea43",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -2,16 +2,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n+#include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n+#include <ipc/context.h>\n #include <node/context.h>\n #include <util/system.h>\n \n+#include <functional>\n #include <memory>\n+#include <string>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeServer(ipc::Context& context);\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n \n namespace init {\n namespace {\n@@ -26,6 +39,15 @@ class BitcoinNodeInit : public interfaces::Init\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n+        // Extra initialization code that runs when a bitcoin-node process is\n+        // spawned by a bitcoin-gui process, after the ArgsManager configuration\n+        // is transferred from the parent process to the child process.\n+        m_ipc->context().init_process = [this] {\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            InitLogging(*Assert(m_node.args));\n+            InitParameterInteraction(*Assert(m_node.args));\n+        };\n+        ipc::capnp::SetupNodeServer(m_ipc->context());\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n@@ -45,9 +67,9 @@ namespace interfaces {\n std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n {\n     auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n-    // Check if bitcoin-node is being invoked as an IPC server. If so, then\n-    // bypass normal execution and just respond to requests over the IPC\n-    // channel and return null.\n+    // Check if bitcoin-node is being invoked as an IPC server by the gui. If\n+    // so, then bypass normal execution and just respond to requests over the\n+    // IPC channel and return null.\n     if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n         return nullptr;\n     }"
      },
      {
        "sha": "7a0252858172e5cc4a1f4eb288231d8b5c449f78",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -68,6 +68,8 @@ void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArg\n         mp::ReadField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(reader),\n                       mp::ReadDestValue(args));\n     }\n+    Context& ipc_context = *static_cast<Context*>(invoke_context.connection.m_loop.m_context);\n+    ipc_context.init_process();\n }\n \n std::string GlobalArgsNetwork()"
      },
      {
        "sha": "2676b1eef7e3e994f3d847584b9bddbc05803ced",
        "filename": "src/ipc/capnp/context.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/context.h?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -5,8 +5,16 @@\n #ifndef BITCOIN_IPC_CAPNP_CONTEXT_H\n #define BITCOIN_IPC_CAPNP_CONTEXT_H\n \n+#include <ipc/capnp/node.capnp.h>\n #include <ipc/context.h>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n namespace ipc {\n namespace capnp {\n //! Cap'n Proto context struct. Generally the parent ipc::Context struct should\n@@ -16,6 +24,12 @@ namespace capnp {\n //! function and object types to capnp hooks.\n struct Context : ipc::Context\n {\n+    using MakeNodeClient = std::unique_ptr<interfaces::Node>(mp::InvokeContext& context,\n+                                                             messages::Node::Client&& client);\n+    using MakeNodeServer = kj::Own<messages::Node::Server>(mp::InvokeContext& context,\n+                                                           std::shared_ptr<interfaces::Node> impl);\n+    MakeNodeClient* make_node_client = nullptr;\n+    MakeNodeServer* make_node_server = nullptr;\n };\n } // namespace capnp\n } // namespace ipc"
      },
      {
        "sha": "f757a42df8263cc5bf9273dce81fda786a444e4a",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -6,5 +6,6 @@\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n \n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "3a6ae7711a0ae25b04bd8fcb51e1b1b645f078af",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -10,11 +10,14 @@ $Cxx.namespace(\"ipc::capnp::messages\");\n using Proxy = import \"/mp/proxy.capnp\";\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n+$Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n using Echo = import \"echo.capnp\";\n+using Node = import \"node.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n+    makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n }"
      },
      {
        "sha": "151820b51187e883fb5592ecd3e42a869c728c68",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -38,6 +38,30 @@ struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInte\n };\n \n namespace mp {\n+//! Specialization of MakeProxyClient for Node to that constructs a client\n+//! object through a function pointer so client object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline std::unique_ptr<interfaces::Node> CustomMakeProxyClient<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, ipc::capnp::messages::Node::Client&& client)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_client(context, kj::mv(client));\n+}\n+\n+//! Specialization of MakeProxyServer for Node to that constructs a server\n+//! object through a function pointer so server object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline kj::Own<ipc::capnp::messages::Node::Server> CustomMakeProxyServer<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, std::shared_ptr<interfaces::Node>&& impl)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_server(context, std::move(impl));\n+}\n+\n template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n {"
      },
      {
        "sha": "a32125009c90fff11e9cea32c2f1f6f870af95ce",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -35,6 +35,16 @@ struct CNodeStateStats;\n \n namespace ipc {\n namespace capnp {\n+void SetupNodeClient(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_client = mp::MakeProxyClient<messages::Node, interfaces::Node>;\n+}\n+\n+void SetupNodeServer(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_server = mp::MakeProxyServer<messages::Node, interfaces::Node>;\n+}\n+\n class RpcTimer : public ::RPCTimerBase\n {\n public:"
      },
      {
        "sha": "b382c25e737784fcc23cc636b7b4993cd0f423d1",
        "filename": "src/ipc/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/ipc/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/context.h?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_CONTEXT_H\n #define BITCOIN_IPC_CONTEXT_H\n \n+#include <functional>\n+\n namespace ipc {\n //! Context struct used to give IPC protocol implementations or implementation\n //! hooks access to application state, in case they need to run extra code that\n@@ -13,6 +15,9 @@ namespace ipc {\n //! with shared objects that are created or destroyed remotely.\n struct Context\n {\n+    //! Callback to initialize spawned process after receiving ArgsManager\n+    //! configuration from parent.\n+    std::function<void()> init_process;\n };\n } // namespace ipc\n "
      },
      {
        "sha": "a1dec003bc0b362b0004d053084d39328345c23f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e9b8276db6cde126c587969001c8e606e6b841/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e9b8276db6cde126c587969001c8e606e6b841/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a6e9b8276db6cde126c587969001c8e606e6b841",
        "patch": "@@ -10,8 +10,10 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <init/common.h>\n #include <interfaces/handler.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -281,6 +283,18 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n     m_node = init.makeNode();\n+    if (!m_node) {\n+        // If node is not part of current process, need to initialize logging.\n+        if (!init::StartLogging(gArgs)) {\n+            throw std::runtime_error(\"StartLogging failed\");\n+        }\n+\n+        // If node is not part of current process, spawn new bitcoin-node\n+        // process.\n+        auto node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        m_node = node_init->makeNode();\n+        init.ipc()->addCleanup(*m_node, [node_init = node_init.release()] { delete node_init; });\n+    }\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }"
      }
    ]
  },
  {
    "sha": "795caafdec0da7e141b5056327a1bdcb3b8c560a",
    "node_id": "C_kwDOABII59oAKDc5NWNhYWZkZWMwZGE3ZTE0MWI1MDU2MzI3YTFiZGNiM2I4YzU2MGE",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Make bitcoin-node spawn a bitcoin-wallet process\n\nSpawn wallet subprocess instead of running wallet code internally",
      "tree": {
        "sha": "b9b4c5f26375d54f03c7b50360734d6231f6d367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b4c5f26375d54f03c7b50360734d6231f6d367"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/795caafdec0da7e141b5056327a1bdcb3b8c560a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795caafdec0da7e141b5056327a1bdcb3b8c560a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/795caafdec0da7e141b5056327a1bdcb3b8c560a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795caafdec0da7e141b5056327a1bdcb3b8c560a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6e9b8276db6cde126c587969001c8e606e6b841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e9b8276db6cde126c587969001c8e606e6b841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e9b8276db6cde126c587969001c8e606e6b841"
      }
    ],
    "stats": {
      "total": 177,
      "additions": 169,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6326f192a0b7b86ff8c887f3891a6fdd8ccd50db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -344,7 +344,6 @@ libbitcoin_server_a_SOURCES = \\\n   node/interfaces.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n-  node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n   policy/packages.cpp \\\n@@ -546,6 +545,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\\n+  node/ui_interface.cpp \\\n   outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n@@ -660,7 +660,7 @@ bitcoin_node_SOURCES = $(bitcoin_daemon_sources) init/bitcoin-node.cpp\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS) $(LIBBITCOIN_WALLET)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -704,11 +704,15 @@ bitcoin_tx_LDADD += $(BOOST_LIBS)\n \n # bitcoin-wallet binary #\n bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+if BUILD_MULTIPROCESS\n+bitcoin_wallet_SOURCES += init/bitcoin-wallet-ipc.cpp\n+else\n bitcoin_wallet_SOURCES += init/bitcoin-wallet.cpp\n+endif\n bitcoin_wallet_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_wallet_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_wallet_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd)\n+bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) $(LIBMULTIPROCESS_LIBS)\n \n if TARGET_WINDOWS\n bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n@@ -829,6 +833,7 @@ libbitcoin_ipc_a_SOURCES = \\\n   ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/init.cpp \\\n   ipc/capnp/node-types.h \\\n   ipc/capnp/node.cpp \\\n   ipc/capnp/node.h \\"
      },
      {
        "sha": "b110893341768a9dbd4266088fa46833b7f3d1ab",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -18,7 +18,7 @@\n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-UrlDecodeFn* const URL_DECODE = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static void SetupWalletToolArgs(ArgsManager& argsman)\n {"
      },
      {
        "sha": "d3116473b201cb28aeea1b5ad2afcb68d8d8d2c3",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -51,10 +51,6 @@ class BitcoinNodeInit : public interfaces::Init\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n-    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;"
      },
      {
        "sha": "db9cc2bb8214bcfa01b1430b93e98639c1b351e9",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "added",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <fs.h>\n+#include <init/common.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/context.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+namespace ipc {\n+namespace capnp {\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace init {\n+namespace {\n+const char* EXE_NAME = \"bitcoin-wallet\";\n+\n+class BitcoinWalletInit : public interfaces::Init\n+{\n+public:\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    {\n+        // Extra initialization code that runs when a bitcoin-wallet process is\n+        // spawned by a bitcoin-node process, after the ArgsManager\n+        // configuration is transferred from the parent process to the child\n+        // process.\n+        m_ipc->context().init_process = [] {\n+            init::SetGlobals();\n+            if (!init::SanityChecks()) {\n+                throw std::runtime_error(\"Initial sanity checks failure\");\n+            }\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            init::SetLoggingOptions(gArgs);\n+            init::SetLoggingCategories(gArgs);\n+            if (!init::StartLogging(gArgs)) {\n+                throw std::runtime_error(\"Logging start failure\");\n+            }\n+        };\n+    }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, gArgs);\n+    }\n+    interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    std::unique_ptr<interfaces::Ipc> m_ipc;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status)\n+{\n+    auto init = std::make_unique<init::BitcoinWalletInit>(argc > 0 ? argv[0] : \"\");\n+    // Check if bitcoin-wallet is being invoked as an IPC server. If so, then\n+    // bypass normal execution and just respond to requests over the IPC\n+    // channel and finally return null.\n+    if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n+        return nullptr;\n+    }\n+    return init;\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "8c444add4b35d8af7b604c245a8c9920bb150c59",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -5,7 +5,31 @@\n #ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n #include <ipc/capnp/node.capnp.proxy-types.h>\n \n+namespace mp {\n+//! Specialization of makeWalletClient needed because it takes a Chain& reference\n+//! argument, not a unique_ptr<Chain> argument, so a manual cleanup\n+//! callback is needed to clean up the ProxyServer<messages::Chain> proxy object.\n+template <>\n+struct ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Init,\n+                                  ipc::capnp::messages::Init::MakeWalletClientParams,\n+                                  ipc::capnp::messages::Init::MakeWalletClientResults>;\n+    static capnp::Void invoke(Context& context);\n+};\n+\n+//! Chain& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<interfaces::Chain&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+} // namespace mp\n+\n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "e2fa768db654cbc7fa870a173cc2c11a07e2324c",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -8,16 +8,22 @@ using Cxx = import \"/capnp/c++.capnp\";\n $Cxx.namespace(\"ipc::capnp::messages\");\n \n using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n $Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n using Echo = import \"echo.capnp\";\n using Node = import \"node.capnp\";\n+using Wallet = import \"wallet.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n     makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n+    makeChain @3 (context :Proxy.Context) -> (result :Chain.Chain);\n+    makeWalletClient @4 (context :Proxy.Context, globalArgs :Common.GlobalArgs, chain :Chain.Chain) -> (result :Wallet.WalletClient);\n }"
      },
      {
        "sha": "47f2bcc9f1050741a80878cd81a9a62932e269f6",
        "filename": "src/ipc/capnp/init.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/ipc/capnp/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.cpp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/capability.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/init-types.h>\n+#include <ipc/capnp/init.capnp.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+\n+#include <memory>\n+#include <utility>\n+\n+namespace mp {\n+template <typename Interface> struct ProxyClient;\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>::invoke(Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto chain = std::make_unique<ProxyClient<ipc::capnp::messages::Chain>>(\n+        params.getChain(), context.proxy_server.m_context.connection, /* destroy_connection= */ false);\n+    auto wallet_client = context.proxy_server.m_impl->makeWalletClient(*chain);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::WalletClient>>(std::shared_ptr<interfaces::WalletClient>(wallet_client.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([chain = chain.release()] { delete chain; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+} // namespace mp"
      },
      {
        "sha": "741b4ebebf9d4f5966c2973b948d66299fd50cd8",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -6,6 +6,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -131,6 +132,13 @@ void WalletInit::Construct(NodeContext& node) const\n         return;\n     }\n     auto wallet_client = node.init->makeWalletClient(*node.chain);\n+    if (!wallet_client) {\n+        // If the current process doesn't have wallet support linked in, spawn\n+        // a new wallet process.\n+        auto init = node.init->ipc()->spawnProcess(\"bitcoin-wallet\");\n+        wallet_client = init->makeWalletClient(*node.chain);\n+        node.init->ipc()->addCleanup(*wallet_client, [init = init.release()] { delete init; });\n+    }\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "e4c5ddc53ebcaa0afa63ae80f1d7a07f65418312",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/795caafdec0da7e141b5056327a1bdcb3b8c560a/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/795caafdec0da7e141b5056327a1bdcb3b8c560a/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "patch": "@@ -115,6 +115,7 @@ def test_args_log(self):\n                     'secret-torpassword',\n                 ]):\n             self.start_node(0, extra_args=[\n+                '-debugexclude=ipc',\n                 '-addnode=some.node',\n                 '-rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n                 '-rpcbind=127.1.1.1',"
      }
    ]
  },
  {
    "sha": "262a0107e686cc249bd9ca34781c3153e3f493f9",
    "node_id": "C_kwDOABII59oAKDI2MmEwMTA3ZTY4NmNjMjQ5YmQ5Y2EzNDc4MWMzMTUzZTNmNDkzZjk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-30T23:35:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "multiprocess: Add debug.log .wallet/.gui suffixes\n\nAdd .wallet/.gui suffixes to log files created by bitcoin-gui and\nbitcoin-wallet processes so they don't clash with bitcoin-node log file.",
      "tree": {
        "sha": "90f7e182ad66c22356fe57ef4120405c08301053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90f7e182ad66c22356fe57ef4120405c08301053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/262a0107e686cc249bd9ca34781c3153e3f493f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/262a0107e686cc249bd9ca34781c3153e3f493f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/262a0107e686cc249bd9ca34781c3153e3f493f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/262a0107e686cc249bd9ca34781c3153e3f493f9/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/795caafdec0da7e141b5056327a1bdcb3b8c560a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/795caafdec0da7e141b5056327a1bdcb3b8c560a"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 58,
      "deletions": 34
    },
    "files": [
      {
        "sha": "04b5b778be3d476b35d1b08c832722eb20654cbf",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -13,6 +13,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -174,7 +175,8 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         args.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n-        InitLogging(args);\n+        interfaces::Ipc* ipc = node.init->ipc();\n+        InitLogging(args, ipc ? ipc->logSuffix() : nullptr);\n         InitParameterInteraction(args);\n         if (!AppInitBasicSetup(args)) {\n             // InitError will have been called with detailed error, which ends up on console"
      },
      {
        "sha": "ca209b9cac4704d6001017cff7431352892640a3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -711,9 +711,9 @@ void InitParameterInteraction(ArgsManager& args)\n  * Note that this is called very early in the process lifetime, so you should be\n  * careful about what global state you rely on here.\n  */\n-void InitLogging(const ArgsManager& args)\n+void InitLogging(const ArgsManager& args, const char* log_suffix)\n {\n-    init::SetLoggingOptions(args);\n+    init::SetLoggingOptions(args, log_suffix);\n     init::LogPackageVersion();\n }\n "
      },
      {
        "sha": "14fbe857c3b49a61e0efc0374fd0a34603adcb97",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -25,7 +25,7 @@ struct BlockAndHeaderTipInfo;\n void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n-void InitLogging(const ArgsManager& args);\n+void InitLogging(const ArgsManager& args, const char* log_suffix);\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction(ArgsManager& args);\n "
      },
      {
        "sha": "705d0ce108c001b912f1196d23250085a4c1886d",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -20,7 +20,7 @@ const char* EXE_NAME = \"bitcoin-gui\";\n class BitcoinGuiInit : public interfaces::Init\n {\n public:\n-    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".gui\", arg0, *this))\n     {\n         ipc::capnp::SetupNodeClient(m_ipc->context());\n     }"
      },
      {
        "sha": "894d153dd343a9bf457dde0a2510da44a4d721c2",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -34,8 +34,7 @@ class BitcoinNodeInit : public interfaces::Init\n {\n public:\n     BitcoinNodeInit(NodeContext& node, const char* arg0)\n-        : m_node(node),\n-          m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+        : m_node(node), m_ipc(interfaces::MakeIpc(EXE_NAME, \"\", arg0, *this))\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n@@ -44,7 +43,7 @@ class BitcoinNodeInit : public interfaces::Init\n         // is transferred from the parent process to the child process.\n         m_ipc->context().init_process = [this] {\n             SelectParams(ipc::capnp::GlobalArgsNetwork());\n-            InitLogging(*Assert(m_node.args));\n+            InitLogging(*Assert(m_node.args), m_ipc->logSuffix());\n             InitParameterInteraction(*Assert(m_node.args));\n         };\n         ipc::capnp::SetupNodeServer(m_ipc->context());"
      },
      {
        "sha": "a7fa7310c7616e83c9b8e2dedfe44cf70411850b",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -41,19 +41,19 @@ const char* EXE_NAME = \"bitcoin-wallet\";\n class BitcoinWalletInit : public interfaces::Init\n {\n public:\n-    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".wallet\", arg0, *this))\n     {\n         // Extra initialization code that runs when a bitcoin-wallet process is\n         // spawned by a bitcoin-node process, after the ArgsManager\n         // configuration is transferred from the parent process to the child\n         // process.\n-        m_ipc->context().init_process = [] {\n+        m_ipc->context().init_process = [this] {\n             init::SetGlobals();\n             if (!init::SanityChecks()) {\n                 throw std::runtime_error(\"Initial sanity checks failure\");\n             }\n             SelectParams(ipc::capnp::GlobalArgsNetwork());\n-            init::SetLoggingOptions(gArgs);\n+            init::SetLoggingOptions(gArgs, m_ipc->logSuffix());\n             init::SetLoggingCategories(gArgs);\n             if (!init::StartLogging(gArgs)) {\n                 throw std::runtime_error(\"Logging start failure\");"
      },
      {
        "sha": "04547e90672cb624f6cf2036d74ae928ab946a72",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -78,10 +78,11 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n }\n \n-void SetLoggingOptions(const ArgsManager& args)\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix)\n {\n     LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n     LogInstance().m_file_path = AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n+    if (log_suffix && LogInstance().m_file_path != \"/dev/null\") LogInstance().m_file_path += log_suffix;\n     LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);"
      },
      {
        "sha": "a10b8330afa08b4be7d82a88863282c5a6dee55e",
        "filename": "src/init/common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/init/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.h?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -19,7 +19,7 @@ void UnsetGlobals();\n  */\n bool SanityChecks();\n void AddLoggingArgs(ArgsManager& args);\n-void SetLoggingOptions(const ArgsManager& args);\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix);\n void SetLoggingCategories(const ArgsManager& args);\n bool StartLogging(const ArgsManager& args);\n void LogPackageVersion();"
      },
      {
        "sha": "f8638f5cb667eeed6284137a228a3e90f38074c6",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -65,14 +65,17 @@ class Ipc\n     //! IPC context struct accessor (see struct definition for more description).\n     virtual ipc::Context& context() = 0;\n \n+    //! Suffix for debug.log to avoid output clashes from different processes.\n+    virtual const char* logSuffix() = 0;\n+\n protected:\n     //! Internal implementation of public addCleanup method (above) as a\n     //! type-erased virtual function, since template functions can't be virtual.\n     virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n };\n \n //! Return implementation of Ipc interface.\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init);\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init);\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_IPC_H"
      },
      {
        "sha": "16135b21ad671b8e688c1fffb5baa187125f17d4",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -28,8 +28,8 @@ namespace {\n class IpcImpl : public interfaces::Ipc\n {\n public:\n-    IpcImpl(const char* exe_name, const char* process_argv0, interfaces::Init& init)\n-        : m_exe_name(exe_name), m_process_argv0(process_argv0), m_init(init),\n+    IpcImpl(const char* exe_name, const char* log_suffix, const char* process_argv0, interfaces::Init& init)\n+        : m_exe_name(exe_name), m_log_suffix(log_suffix), m_process_argv0(process_argv0), m_init(init),\n           m_protocol(ipc::capnp::MakeCapnpProtocol()), m_process(ipc::MakeProcess())\n     {\n     }\n@@ -61,7 +61,9 @@ class IpcImpl : public interfaces::Ipc\n         m_protocol->addCleanup(type, iface, std::move(cleanup));\n     }\n     Context& context() override { return m_protocol->context(); }\n+    const char* logSuffix() override { return m_log_suffix; }\n     const char* m_exe_name;\n+    const char* m_log_suffix;\n     const char* m_process_argv0;\n     interfaces::Init& m_init;\n     std::unique_ptr<Protocol> m_protocol;\n@@ -71,8 +73,8 @@ class IpcImpl : public interfaces::Ipc\n } // namespace ipc\n \n namespace interfaces {\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init)\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init)\n {\n-    return std::make_unique<ipc::IpcImpl>(exe_name, process_argv0, init);\n+    return std::make_unique<ipc::IpcImpl>(exe_name, log_suffix, process_argv0, init);\n }\n } // namespace interfaces"
      },
      {
        "sha": "e161b006c5f0a297d48c6a279a10218f532a1664",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -11,6 +11,8 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n #include <mapport.h>\n@@ -84,7 +86,11 @@ class NodeImpl : public Node\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n     explicit NodeImpl(NodeContext& context) { setContext(&context); }\n-    void initLogging() override { InitLogging(*Assert(m_context->args)); }\n+    void initLogging() override\n+    {\n+        interfaces::Ipc* ipc = m_context->init->ipc();\n+        InitLogging(*Assert(m_context->args), ipc ? ipc->logSuffix() : nullptr);\n+    }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }"
      },
      {
        "sha": "f865f00aa7c8eeea6dbb2810ed9e024a357c4dea",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -317,13 +317,14 @@ void BitcoinApplication::startThread()\n     connect(this, &BitcoinApplication::requestedShutdown, &m_executor.value(), &InitExecutor::shutdown);\n }\n \n-void BitcoinApplication::parameterSetup()\n+void BitcoinApplication::parameterSetup(interfaces::Init& init)\n {\n     // Default printtoconsole to false for the GUI. GUI programs should not\n     // print to the console unnecessarily.\n     gArgs.SoftSetBoolArg(\"-printtoconsole\", false);\n \n-    InitLogging(gArgs);\n+    interfaces::Ipc* ipc = init.ipc();\n+    InitLogging(gArgs, ipc ? ipc->logSuffix() : nullptr);\n     InitParameterInteraction(gArgs);\n }\n \n@@ -624,7 +625,7 @@ int GuiMain(int argc, char* argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n     // Allow parameter interaction before we create the options model\n-    app.parameterSetup();\n+    app.parameterSetup(*init);\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));"
      },
      {
        "sha": "bcc61817a4e393077910d5e7274c5b65f8729158",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -45,7 +45,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// parameter interaction/setup based on rules\n-    void parameterSetup();\n+    void parameterSetup(interfaces::Init& init);\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Initialize prune setting"
      },
      {
        "sha": "81f6711b831591c5231517d08572d5cba9ca31b9",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -56,7 +56,7 @@ void TestRpcCommand(RPCConsole* console)\n } // namespace\n \n //! Entry point for BitcoinApplication tests.\n-void AppTests::appTests()\n+void AppTests::appTests(interfaces::Init& init)\n {\n #ifdef Q_OS_MAC\n     if (QApplication::platformName() == \"minimal\") {\n@@ -76,7 +76,7 @@ void AppTests::appTests()\n     }());\n \n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n-    m_app.parameterSetup();\n+    m_app.parameterSetup(init);\n     m_app.createOptionsModel(true /* reset settings */);\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();"
      },
      {
        "sha": "deab018ccbd9e6beb2d012fa135ff4fdd58838ee",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -14,14 +14,18 @@ class BitcoinApplication;\n class BitcoinGUI;\n class RPCConsole;\n \n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n+\n class AppTests : public QObject\n {\n     Q_OBJECT\n public:\n     explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n \n private Q_SLOTS:\n-    void appTests();\n+    void appTests(interfaces::Init& init);\n     void guiTests(BitcoinGUI* window);\n     void consoleTests(RPCConsole* console);\n "
      },
      {
        "sha": "8d7b7f992cdc2aa9bb8f30ea270b906bf5564d44",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -104,7 +104,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SelectParams(chainName);\n     SeedInsecureRand();\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n-    InitLogging(*m_node.args);\n+    InitLogging(*m_node.args, /* log_suffix= */ nullptr);\n     AppInitParameterInteraction(*m_node.args);\n     LogInstance().StartLogging();\n     SHA256AutoDetect();"
      },
      {
        "sha": "c2dc38b0265c03e0fcfd89f0b3f90898c6e56e01",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -95,6 +95,10 @@ def read_logs(tmp_dir):\n             break\n         files.append((\"node%d\" % i, logfile))\n \n+        wallet_logfile = \"{}/node{}/regtest/debug.log.wallet\".format(tmp_dir, i)\n+        if os.path.isfile(wallet_logfile):\n+            files.append((\"wall%d\" % i, wallet_logfile))\n+\n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n "
      },
      {
        "sha": "b58b23e142525f33d6a79151114aa689ca2a853b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -381,11 +381,13 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\n \n     @contextlib.contextmanager\n-    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2, wallet=False):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n         time_end = time.time() + timeout * self.timeout_factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n+        if wallet and os.path.exists(debug_log + \".wallet\"):\n+            debug_log += \".wallet\"\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()"
      },
      {
        "sha": "181cf0aa254276541f57203aa7b0fe17a895536e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         assert result['ismine']\n \n         self.log.info('Check that wallet is flushed')\n-        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n+        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20, wallet=True):\n             self.nodes[0].getnewaddress()\n \n         # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded"
      },
      {
        "sha": "a03830c4c5288a9fb1fb4e2923c89f5d1e2f9a7b",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped'], wallet=True):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n         # tx4 should have 2 inputs and 2 outputs although one output would\n@@ -127,7 +127,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped'], wallet=True):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n         # tx5 should have 3 inputs (1.0, 1.0, 1.0) and 2 outputs\n@@ -141,7 +141,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n+        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped'], wallet=True):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n         # tx6 should have 5 inputs and 2 outputs"
      },
      {
        "sha": "ac42c32cee5e21da6f501464f02e14dd84414359",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -130,7 +130,7 @@ def wallet_file(name):\n         os.mkdir(wallet_dir('no_access'))\n         os.chmod(wallet_dir('no_access'), 0)\n         try:\n-            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning']):\n+            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning'], wallet=True):\n                 walletlist = self.nodes[0].listwalletdir()['wallets']\n         finally:\n             # Need to ensure access is restored for cleanup"
      },
      {
        "sha": "134609cc669a66d489babfa60754529ecb55b7be",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/262a0107e686cc249bd9ca34781c3153e3f493f9/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=262a0107e686cc249bd9ca34781c3153e3f493f9",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n         self.log.info(\"Bump time & check that transaction is rebroadcast\")\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n-        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions']):\n+        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions'], wallet=True):\n             node.setmocktime(now + 36 * 60 * 60)\n             # Tell scheduler to call MaybeResendWalletTxn now.\n             node.mockscheduler(1)"
      }
    ]
  },
  {
    "sha": "83ec18be7f195369292b6cda559f33b73b75a209",
    "node_id": "C_kwDOABII59oAKDgzZWMxOGJlN2YxOTUzNjkyOTJiNmNkYTU1OWYzM2I3M2I3NWEyMDk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "doc: Multiprocess misc doc and comment updates",
      "tree": {
        "sha": "ffe25c34a9eb1520089b1812812cc8090e99b927",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffe25c34a9eb1520089b1812812cc8090e99b927"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83ec18be7f195369292b6cda559f33b73b75a209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ec18be7f195369292b6cda559f33b73b75a209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83ec18be7f195369292b6cda559f33b73b75a209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ec18be7f195369292b6cda559f33b73b75a209/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "262a0107e686cc249bd9ca34781c3153e3f493f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/262a0107e686cc249bd9ca34781c3153e3f493f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/262a0107e686cc249bd9ca34781c3153e3f493f9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e03c0a6f6790c6e6e6918115a298c57b3699a893",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ec18be7f195369292b6cda559f33b73b75a209/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ec18be7f195369292b6cda559f33b73b75a209/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=83ec18be7f195369292b6cda559f33b73b75a209",
        "patch": "@@ -82,7 +82,7 @@ These dependencies represent the packages required to get a barebones installati\n To install, run the following from your terminal:\n \n ``` bash\n-brew install automake libtool boost pkg-config libevent\n+brew install automake libtool boost pkg-config libevent capnp\n ```\n \n ### 4. Clone Bitcoin repository"
      },
      {
        "sha": "7c8817e8bfb070565b4aef244729c0c6aa1cbf9d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ec18be7f195369292b6cda559f33b73b75a209/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ec18be7f195369292b6cda559f33b73b75a209/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=83ec18be7f195369292b6cda559f33b73b75a209",
        "patch": "@@ -120,7 +120,7 @@ To build without GUI pass `--without-gui`.\n \n To build with Qt 5 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libcapnp-dev capnproto\n \n Additionally, to support Wayland protocol for modern desktop environments:\n "
      },
      {
        "sha": "8ea7422ad6cdf5b858628dfd60749a725dbfe2f8",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ec18be7f195369292b6cda559f33b73b75a209/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ec18be7f195369292b6cda559f33b73b75a209/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=83ec18be7f195369292b6cda559f33b73b75a209",
        "patch": "@@ -7,6 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n+| Cap'n Proto | [0.6.1](https://capnproto.org/install.html) | 0.5.3 | Yes |  |  |\n | Clang<sup>[ \\* ](#note1)</sup> |  | [7.0](https://releases.llvm.org/download.html) (C++17 & std::filesystem support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      },
      {
        "sha": "6338d2ca5ce88b8619af825f7655758934ccfd6b",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ec18be7f195369292b6cda559f33b73b75a209/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ec18be7f195369292b6cda559f33b73b75a209/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=83ec18be7f195369292b6cda559f33b73b75a209",
        "patch": "@@ -2,12 +2,10 @@\n \n On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This lets node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n \n ## Next steps\n \n-Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n-\n - [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n - [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n - [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n@@ -34,6 +32,12 @@ The configure script will pick up settings and library locations from the depend\n \n Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general.\n \n+## Known issues\n+\n+- Unexpected socket disconnects aren't handled cleanly many places. Interface calls that used to never throw can now throw exceptions if a socket is disconnected (typically because a process on the other side of the connection has crashed or been killed), leading to errors.\n+\n+- Internally spawned bitcoin-node and bitcoin-wallet processes don't currently install signal handlers and so won't shut down cleanly if terminated with [CTRL-C](https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238). Shutting down with `bitcoin-cli stop` should still shut down cleanly, and is a suggested alternative.\n+\n ## IPC implementation details\n \n Cross process Node, Wallet, and Chain interfaces are defined in"
      },
      {
        "sha": "c6754d833fc37d71f17a0a4a9f96db4f7b553782",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ec18be7f195369292b6cda559f33b73b75a209/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ec18be7f195369292b6cda559f33b73b75a209/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=83ec18be7f195369292b6cda559f33b73b75a209",
        "patch": "@@ -305,6 +305,8 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+# Explicitly list dependencies on generated headers as described\n+# https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n "
      }
    ]
  },
  {
    "sha": "eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
    "node_id": "C_kwDOABII59oAKGViMDFjZWM1YzVlNzFmMmRmYTRiNDEzZWUzNzU5YmI3OGVjZjg1NjY",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "combine_logs: Handle multiprocess wallet log files",
      "tree": {
        "sha": "bbb3e39d2c75ff2fcbcd5c5ce4eaed7d6a59ea63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbb3e39d2c75ff2fcbcd5c5ce4eaed7d6a59ea63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83ec18be7f195369292b6cda559f33b73b75a209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ec18be7f195369292b6cda559f33b73b75a209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83ec18be7f195369292b6cda559f33b73b75a209"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2af54970406a93a3b8484e9fa487fb2586a6d53f",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
        "patch": "@@ -62,6 +62,10 @@ def main():\n         colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n         colors[\"node2\"] = \"\\033[0;31m\"  # RED\n         colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+        colors[\"wall0\"] = \"\\033[0;34;1m\"  # BLUE\n+        colors[\"wall1\"] = \"\\033[0;32;1m\"  # GREEN\n+        colors[\"wall2\"] = \"\\033[0;31;1m\"  # RED\n+        colors[\"wall3\"] = \"\\033[0;33;1m\"  # YELLOW\n         colors[\"reset\"] = \"\\033[0m\"  # Reset font color\n \n     log_events = read_logs(testdir)"
      }
    ]
  },
  {
    "sha": "f5a24ee305a1089454d237412e7432eac1152fed",
    "node_id": "C_kwDOABII59oAKGY1YTI0ZWUzMDVhMTA4OTQ1NGQyMzc0MTJlNzQzMmVhYzExNTJmZWQ",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/10102/head'",
      "tree": {
        "sha": "bbb3e39d2c75ff2fcbcd5c5ce4eaed7d6a59ea63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbb3e39d2c75ff2fcbcd5c5ce4eaed7d6a59ea63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5a24ee305a1089454d237412e7432eac1152fed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a24ee305a1089454d237412e7432eac1152fed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a24ee305a1089454d237412e7432eac1152fed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a24ee305a1089454d237412e7432eac1152fed/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5574881ce329f91cc5bbc2b9585860a45fde7c3c"
      },
      {
        "sha": "eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb01cec5c5e71f2dfa4b413ee3759bb78ecf8566"
      }
    ],
    "stats": {
      "total": 2395,
      "additions": 2310,
      "deletions": 85
    },
    "files": [
      {
        "sha": "9cee2ab6820387eeb05355e4957a5770a83e9df1",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -16,7 +16,7 @@\n # define functions and variables declared in corresponding .h files is\n # incorrect.\n HEADER_MODULE_PATHS = [\n-    'interfaces/'\n+    'ipc/'\n ]\n \n def module_name(path):"
      },
      {
        "sha": "e03c0a6f6790c6e6e6918115a298c57b3699a893",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -82,7 +82,7 @@ These dependencies represent the packages required to get a barebones installati\n To install, run the following from your terminal:\n \n ``` bash\n-brew install automake libtool boost pkg-config libevent\n+brew install automake libtool boost pkg-config libevent capnp\n ```\n \n ### 4. Clone Bitcoin repository"
      },
      {
        "sha": "7c8817e8bfb070565b4aef244729c0c6aa1cbf9d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -120,7 +120,7 @@ To build without GUI pass `--without-gui`.\n \n To build with Qt 5 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libcapnp-dev capnproto\n \n Additionally, to support Wayland protocol for modern desktop environments:\n "
      },
      {
        "sha": "8ea7422ad6cdf5b858628dfd60749a725dbfe2f8",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -7,6 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n+| Cap'n Proto | [0.6.1](https://capnproto.org/install.html) | 0.5.3 | Yes |  |  |\n | Clang<sup>[ \\* ](#note1)</sup> |  | [7.0](https://releases.llvm.org/download.html) (C++17 & std::filesystem support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      },
      {
        "sha": "6338d2ca5ce88b8619af825f7655758934ccfd6b",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -2,12 +2,10 @@\n \n On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This lets node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n \n ## Next steps\n \n-Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n-\n - [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n - [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n - [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n@@ -34,6 +32,12 @@ The configure script will pick up settings and library locations from the depend\n \n Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general.\n \n+## Known issues\n+\n+- Unexpected socket disconnects aren't handled cleanly many places. Interface calls that used to never throw can now throw exceptions if a socket is disconnected (typically because a process on the other side of the connection has crashed or been killed), leading to errors.\n+\n+- Internally spawned bitcoin-node and bitcoin-wallet processes don't currently install signal handlers and so won't shut down cleanly if terminated with [CTRL-C](https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238). Shutting down with `bitcoin-cli stop` should still shut down cleanly, and is a suggested alternative.\n+\n ## IPC implementation details\n \n Cross process Node, Wallet, and Chain interfaces are defined in"
      },
      {
        "sha": "c6754d833fc37d71f17a0a4a9f96db4f7b553782",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -305,7 +305,10 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+# Explicitly list dependencies on generated headers as described\n+# https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n+ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n \n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n@@ -343,7 +346,6 @@ libbitcoin_server_a_SOURCES = \\\n   node/interfaces.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n-  node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n   policy/packages.cpp \\\n@@ -545,6 +547,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\\n+  node/ui_interface.cpp \\\n   outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n@@ -659,7 +662,7 @@ bitcoin_node_SOURCES = $(bitcoin_daemon_sources) init/bitcoin-node.cpp\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS) $(LIBBITCOIN_WALLET)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -703,11 +706,15 @@ bitcoin_tx_LDADD += $(BOOST_LIBS)\n \n # bitcoin-wallet binary #\n bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+if BUILD_MULTIPROCESS\n+bitcoin_wallet_SOURCES += init/bitcoin-wallet-ipc.cpp\n+else\n bitcoin_wallet_SOURCES += init/bitcoin-wallet.cpp\n+endif\n bitcoin_wallet_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_wallet_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_wallet_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd)\n+bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) $(LIBMULTIPROCESS_LIBS)\n \n if TARGET_WINDOWS\n bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n@@ -808,18 +815,35 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/chain.capnp \\\n+  ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n-  ipc/capnp/init.capnp\n+  ipc/capnp/handler.capnp \\\n+  ipc/capnp/init.capnp \\\n+  ipc/capnp/node.capnp \\\n+  ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n \n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/chain-types.h \\\n+  ipc/capnp/chain.cpp \\\n+  ipc/capnp/common-types.h \\\n+  ipc/capnp/common.cpp \\\n+  ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/init.cpp \\\n+  ipc/capnp/node-types.h \\\n+  ipc/capnp/node.cpp \\\n+  ipc/capnp/node.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n+  ipc/capnp/wallet-types.h \\\n+  ipc/capnp/wallet.cpp \\\n+  ipc/capnp/wallet.h \\\n   ipc/context.h \\\n   ipc/exception.h \\\n   ipc/interfaces.cpp \\"
      },
      {
        "sha": "b110893341768a9dbd4266088fa46833b7f3d1ab",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -18,7 +18,7 @@\n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-UrlDecodeFn* const URL_DECODE = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n static void SetupWalletToolArgs(ArgsManager& argsman)\n {"
      },
      {
        "sha": "04b5b778be3d476b35d1b08c832722eb20654cbf",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -13,6 +13,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -174,7 +175,8 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         args.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n-        InitLogging(args);\n+        interfaces::Ipc* ipc = node.init->ipc();\n+        InitLogging(args, ipc ? ipc->logSuffix() : nullptr);\n         InitParameterInteraction(args);\n         if (!AppInitBasicSetup(args)) {\n             // InitError will have been called with detailed error, which ends up on console"
      },
      {
        "sha": "ca209b9cac4704d6001017cff7431352892640a3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -711,9 +711,9 @@ void InitParameterInteraction(ArgsManager& args)\n  * Note that this is called very early in the process lifetime, so you should be\n  * careful about what global state you rely on here.\n  */\n-void InitLogging(const ArgsManager& args)\n+void InitLogging(const ArgsManager& args, const char* log_suffix)\n {\n-    init::SetLoggingOptions(args);\n+    init::SetLoggingOptions(args, log_suffix);\n     init::LogPackageVersion();\n }\n \n@@ -1101,11 +1101,6 @@ bool AppInitLockDataDirectory()\n bool AppInitInterfaces(NodeContext& node)\n {\n     node.chain = node.init->makeChain();\n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(node);\n     return true;\n }\n \n@@ -1169,6 +1164,13 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(node);\n+    uiInterface.InitWallet();\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "14fbe857c3b49a61e0efc0374fd0a34603adcb97",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -25,7 +25,7 @@ struct BlockAndHeaderTipInfo;\n void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n-void InitLogging(const ArgsManager& args);\n+void InitLogging(const ArgsManager& args, const char* log_suffix);\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction(ArgsManager& args);\n "
      },
      {
        "sha": "705d0ce108c001b912f1196d23250085a4c1886d",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 17,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -2,38 +2,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <interfaces/chain.h>\n-#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n-#include <interfaces/node.h>\n-#include <interfaces/wallet.h>\n-#include <node/context.h>\n-#include <util/system.h>\n \n #include <memory>\n \n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context);\n+} // namespace capnp\n+} // namespace ipc\n+\n namespace init {\n namespace {\n const char* EXE_NAME = \"bitcoin-gui\";\n \n class BitcoinGuiInit : public interfaces::Init\n {\n public:\n-    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n-    {\n-        m_node.args = &gArgs;\n-        m_node.init = this;\n-    }\n-    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n-    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".gui\", arg0, *this))\n     {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n+        ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n-    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "894d153dd343a9bf457dde0a2510da44a4d721c2",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 9,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -2,16 +2,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n+#include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n+#include <ipc/context.h>\n #include <node/context.h>\n #include <util/system.h>\n \n+#include <functional>\n #include <memory>\n+#include <string>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeServer(ipc::Context& context);\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n \n namespace init {\n namespace {\n@@ -21,18 +34,22 @@ class BitcoinNodeInit : public interfaces::Init\n {\n public:\n     BitcoinNodeInit(NodeContext& node, const char* arg0)\n-        : m_node(node),\n-          m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+        : m_node(node), m_ipc(interfaces::MakeIpc(EXE_NAME, \"\", arg0, *this))\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n+        // Extra initialization code that runs when a bitcoin-node process is\n+        // spawned by a bitcoin-gui process, after the ArgsManager configuration\n+        // is transferred from the parent process to the child process.\n+        m_ipc->context().init_process = [this] {\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            InitLogging(*Assert(m_node.args), m_ipc->logSuffix());\n+            InitParameterInteraction(*Assert(m_node.args));\n+        };\n+        ipc::capnp::SetupNodeServer(m_ipc->context());\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n-    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;\n@@ -45,9 +62,9 @@ namespace interfaces {\n std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n {\n     auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n-    // Check if bitcoin-node is being invoked as an IPC server. If so, then\n-    // bypass normal execution and just respond to requests over the IPC\n-    // channel and return null.\n+    // Check if bitcoin-node is being invoked as an IPC server by the gui. If\n+    // so, then bypass normal execution and just respond to requests over the\n+    // IPC channel and return null.\n     if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n         return nullptr;\n     }"
      },
      {
        "sha": "a7fa7310c7616e83c9b8e2dedfe44cf70411850b",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "added",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <fs.h>\n+#include <init/common.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/context.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+namespace ipc {\n+namespace capnp {\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace init {\n+namespace {\n+const char* EXE_NAME = \"bitcoin-wallet\";\n+\n+class BitcoinWalletInit : public interfaces::Init\n+{\n+public:\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".wallet\", arg0, *this))\n+    {\n+        // Extra initialization code that runs when a bitcoin-wallet process is\n+        // spawned by a bitcoin-node process, after the ArgsManager\n+        // configuration is transferred from the parent process to the child\n+        // process.\n+        m_ipc->context().init_process = [this] {\n+            init::SetGlobals();\n+            if (!init::SanityChecks()) {\n+                throw std::runtime_error(\"Initial sanity checks failure\");\n+            }\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            init::SetLoggingOptions(gArgs, m_ipc->logSuffix());\n+            init::SetLoggingCategories(gArgs);\n+            if (!init::StartLogging(gArgs)) {\n+                throw std::runtime_error(\"Logging start failure\");\n+            }\n+        };\n+    }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, gArgs);\n+    }\n+    interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    std::unique_ptr<interfaces::Ipc> m_ipc;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status)\n+{\n+    auto init = std::make_unique<init::BitcoinWalletInit>(argc > 0 ? argv[0] : \"\");\n+    // Check if bitcoin-wallet is being invoked as an IPC server. If so, then\n+    // bypass normal execution and just respond to requests over the IPC\n+    // channel and finally return null.\n+    if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n+        return nullptr;\n+    }\n+    return init;\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "04547e90672cb624f6cf2036d74ae928ab946a72",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -78,10 +78,11 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n }\n \n-void SetLoggingOptions(const ArgsManager& args)\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix)\n {\n     LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n     LogInstance().m_file_path = AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n+    if (log_suffix && LogInstance().m_file_path != \"/dev/null\") LogInstance().m_file_path += log_suffix;\n     LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);"
      },
      {
        "sha": "a10b8330afa08b4be7d82a88863282c5a6dee55e",
        "filename": "src/init/common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/init/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/init/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -19,7 +19,7 @@ void UnsetGlobals();\n  */\n bool SanityChecks();\n void AddLoggingArgs(ArgsManager& args);\n-void SetLoggingOptions(const ArgsManager& args);\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix);\n void SetLoggingCategories(const ArgsManager& args);\n bool StartLogging(const ArgsManager& args);\n void LogPackageVersion();"
      },
      {
        "sha": "5fdfb0a63c8c9af096735f4aa170fa027c405436",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -308,7 +308,8 @@ class ChainClient\n     //! Load saved state.\n     virtual bool load() = 0;\n \n-    //! Start client execution and provide a scheduler.\n+    //! Start client execution and provide a scheduler. (Scheduler is\n+    //! ignored if client is out-of-process).\n     virtual void start(CScheduler& scheduler) = 0;\n \n     //! Save state to disk."
      },
      {
        "sha": "f8638f5cb667eeed6284137a228a3e90f38074c6",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -65,14 +65,17 @@ class Ipc\n     //! IPC context struct accessor (see struct definition for more description).\n     virtual ipc::Context& context() = 0;\n \n+    //! Suffix for debug.log to avoid output clashes from different processes.\n+    virtual const char* logSuffix() = 0;\n+\n protected:\n     //! Internal implementation of public addCleanup method (above) as a\n     //! type-erased virtual function, since template functions can't be virtual.\n     virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n };\n \n //! Return implementation of Ipc interface.\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init);\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init);\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_IPC_H"
      },
      {
        "sha": "ea1cb5ed723b73d07ae5ae54a504f7552aa7e51b",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <consensus/amount.h>\n-#include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n@@ -50,6 +49,16 @@ struct BlockAndHeaderTipInfo\n     double verification_progress;\n };\n \n+//! External signer interface used by the GUI.\n+class ExternalSigner\n+{\n+public:\n+    virtual ~ExternalSigner() {};\n+\n+    //! Get signer display name\n+    virtual std::string getName() = 0;\n+};\n+\n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n {\n@@ -111,8 +120,8 @@ class Node\n     //! Disconnect node by id.\n     virtual bool disconnectById(NodeId id) = 0;\n \n-    //! List external signers\n-    virtual std::vector<ExternalSigner> externalSigners() = 0;\n+    //! Return list of external signers (attached devices which can sign transactions).\n+    virtual std::vector<std::unique_ptr<ExternalSigner>> listExternalSigners() = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n@@ -197,6 +206,10 @@ class Node\n     using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n \n+    //! Register handler for wallet client constructed messages.\n+    using InitWalletFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) = 0;\n+\n     //! Register handler for number of connections changed messages.\n     using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n     virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;"
      },
      {
        "sha": "4414763e3f1e8a96a8f7316e6ce7cff1d69ec4ee",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -345,6 +345,8 @@ struct WalletAddress\n     std::string name;\n     std::string purpose;\n \n+    WalletAddress() = default;\n+\n     WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n         : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n     {"
      },
      {
        "sha": "75a467230b7c02efe18392a450fef2b89ae0240f",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+#define BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <rpc/server.h>\n+\n+#include <any>\n+\n+//! Specialization of handleRpc needed because it takes a CRPCCommand& reference\n+//! argument, so a manual cleanup callback is needed to free the passed\n+//! CRPCCommand struct and proxy ActorCallback object.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Chain,\n+                                  ipc::capnp::messages::Chain::HandleRpcParams,\n+                                  ipc::capnp::messages::Chain::HandleRpcResults>;\n+    static ::capnp::Void invoke(Context& context);\n+};\n+\n+//! Specialization of start method needed to provide CScheduler& reference\n+//! argument.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>\n+{\n+    using ChainContext = ServerContext<ipc::capnp::messages::ChainClient,\n+                                       ipc::capnp::messages::ChainClient::StartParams,\n+                                       ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(ChainContext& context);\n+    using WalletContext = ServerContext<ipc::capnp::messages::WalletClient,\n+                                        ipc::capnp::messages::ChainClient::StartParams,\n+                                        ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(WalletContext& context);\n+};\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder);\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest);\n+\n+\n+//! CScheduler& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<CScheduler&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! CRPCCommand& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<const CRPCCommand&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! Override to avoid assert failures that would happen trying to serialize\n+//! spent coins. Probably it would be best for Coin serialization code not\n+//! to assert, but avoiding serialization in this case is harmless.\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin);\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_CHAIN_TYPES_H"
      },
      {
        "sha": "7c57ad99b38b4d32fe95d52495f2e656b0f630cf",
        "filename": "src/ipc/capnp/chain.capnp",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,163 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x94f21a4864bd2c65;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n+$Proxy.include(\"rpc/server.h\");\n+$Proxy.includeTypes(\"ipc/capnp/chain-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Chain $Proxy.wrap(\"interfaces::Chain\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getHeight @1 (context :Proxy.Context) -> (result :Int32, hasResult :Bool);\n+    getBlockHash @2 (context :Proxy.Context, height :Int32) -> (result :Data);\n+    haveBlockOnDisk @3 (context :Proxy.Context, height :Int32) -> (result :Bool);\n+    getTipLocator @4 (context :Proxy.Context) -> (result :Data);\n+    findLocatorFork @5 (context :Proxy.Context, locator :Data) -> (result :Int32, hasResult :Bool);\n+    checkFinalTx @6 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    findBlock @7 (context :Proxy.Context, hash :Data, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findFirstBlockWithTimeAndHeight @8 (context :Proxy.Context, minTime :Int64, minHeight :Int32, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findAncestorByHeight @9 (context :Proxy.Context, blockHash :Data, ancestorHeight :Int32, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findAncestorByHash @10 (context :Proxy.Context, blockHash :Data, ancestorHash :Data, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findCommonAncestor @11 (context :Proxy.Context, blockHash1 :Data, blockHash2 :Data, ancestor :FoundBlockParam, block1 :FoundBlockParam, block2 :FoundBlockParam) -> (ancestor :FoundBlockResult, block1 :FoundBlockResult, block2 :FoundBlockResult, result :Bool);\n+    findCoins @12 (context :Proxy.Context, coins :List(Common.Pair(Data, Data))) -> (coins :List(Common.Pair(Data, Data)));\n+    guessVerificationProgress @13 (context :Proxy.Context, blockHash :Data) -> (result :Float64);\n+    hasBlocks @14 (context :Proxy.Context, blockHash :Data, minHeight :Int32, maxHeight: Int32, hasMaxHeight :Bool) -> (result :Bool);\n+    isRBFOptIn @15 (context :Proxy.Context, tx :Data) -> (result :Int32);\n+    isInMempool @16 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    hasDescendantsInMempool @17 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    broadcastTransaction @18 (context :Proxy.Context, tx: Data, maxTxFee :Int64, relay :Bool) -> (error: Text, result :Bool);\n+    getTransactionAncestry @19 (context :Proxy.Context, txid :Data) -> (ancestors :UInt64, descendants :UInt64, ancestorsize :UInt64, ancestorfees :Int64);\n+    getPackageLimits @20 (context :Proxy.Context) -> (ancestors :UInt64, descendants :UInt64);\n+    checkChainLimits @21 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    estimateSmartFee @22 (context :Proxy.Context, numBlocks :Int32, conservative :Bool, wantCalc :Bool) -> (calc :FeeCalculation, result :Data);\n+    estimateMaxBlocks @23 (context :Proxy.Context) -> (result :UInt32);\n+    mempoolMinFee @24 (context :Proxy.Context) -> (result :Data);\n+    relayMinFee @25 (context :Proxy.Context) -> (result :Data);\n+    relayIncrementalFee @26 (context :Proxy.Context) -> (result :Data);\n+    relayDustFee @27 (context :Proxy.Context) -> (result :Data);\n+    havePruned @28 (context :Proxy.Context) -> (result :Bool);\n+    isReadyToBroadcast @29 (context :Proxy.Context) -> (result :Bool);\n+    isInitialBlockDownload @30 (context :Proxy.Context) -> (result :Bool);\n+    shutdownRequested @31 (context :Proxy.Context) -> (result :Bool);\n+    getAdjustedTime @32 (context :Proxy.Context) -> (result :Int64);\n+    initMessage @33 (context :Proxy.Context, message :Text) -> ();\n+    initWarning @34 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    initError @35 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    showProgress @36 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+    handleNotifications @37 (context :Proxy.Context, notifications :ChainNotifications) -> (result :Handler.Handler);\n+    waitForNotificationsIfTipChanged @38 (context :Proxy.Context, oldTip :Data) -> ();\n+    handleRpc @39 (context :Proxy.Context, command :RPCCommand) -> (result :Handler.Handler);\n+    rpcEnableDeprecated @40 (context :Proxy.Context, method :Text) -> (result :Bool);\n+    rpcRunLater @41 (context :Proxy.Context, name :Text, fn: RunLaterCallback, seconds: Int64) -> ();\n+    rpcSerializationFlags @42 (context :Proxy.Context) -> (result :Int32);\n+    getSetting @43 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    getSettingsList @44 (context :Proxy.Context, name :Text) -> (result :List(Common.UniValue));\n+    getRwSetting @45 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    updateRwSetting @46 (context :Proxy.Context, name :Text, value :Common.UniValue, write :Bool) -> (result :Bool);\n+    requestMempoolTransactions @47 (context :Proxy.Context, notifications :ChainNotifications) -> ();\n+    isTaprootActive @48 (context :Proxy.Context) -> (result :Bool);\n+}\n+\n+interface ChainNotifications $Proxy.wrap(\"interfaces::Chain::Notifications\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    transactionAddedToMempool @1 (context :Proxy.Context, tx :Data, mempoolSequence :UInt64) -> ();\n+    transactionRemovedFromMempool @2 (context :Proxy.Context, tx :Data, reason :Int32, mempoolSequence :UInt64) -> ();\n+    blockConnected @3 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    blockDisconnected @4 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    updatedBlockTip @5 (context :Proxy.Context) -> ();\n+    chainStateFlushed @6 (context :Proxy.Context, locator :Data) -> ();\n+}\n+\n+interface ChainClient $Proxy.wrap(\"interfaces::ChainClient\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    registerRpcs @1 (context :Proxy.Context) -> ();\n+    verify @2 (context :Proxy.Context) -> (result :Bool);\n+    load @3 (context :Proxy.Context) -> (result :Bool);\n+    start @4 (context :Proxy.Context, scheduler :Void) -> ();\n+    flush @5 (context :Proxy.Context) -> ();\n+    stop @6 (context :Proxy.Context) -> ();\n+    setMockTime @7 (context :Proxy.Context, time :Int64) -> ();\n+}\n+\n+struct FeeCalculation $Proxy.wrap(\"FeeCalculation\") {\n+    est @0 :EstimationResult;\n+    reason @1 :Int32;\n+    desiredTarget @2 :Int32;\n+    returnedTarget @3 :Int32;\n+}\n+\n+struct EstimationResult $Proxy.wrap(\"EstimationResult\")\n+{\n+    pass @0 :EstimatorBucket;\n+    fail @1 :EstimatorBucket;\n+    decay @2 :Float64;\n+    scale @3 :UInt32;\n+}\n+\n+struct EstimatorBucket $Proxy.wrap(\"EstimatorBucket\")\n+{\n+    start @0 :Float64;\n+    end @1 :Float64;\n+    withinTarget @2 :Float64;\n+    totalConfirmed @3 :Float64;\n+    inMempool @4 :Float64;\n+    leftMempool @5 :Float64;\n+}\n+\n+struct RPCCommand $Proxy.wrap(\"CRPCCommand\") {\n+   category @0 :Text;\n+   name @1 :Text;\n+   actor @2 :ActorCallback;\n+   argNames @3 :List(Text);\n+   uniqueId @4 :Int64 $Proxy.name(\"unique_id\");\n+}\n+\n+interface ActorCallback $Proxy.wrap(\"ProxyCallback<CRPCCommand::Actor>\") {\n+    call @0 (context :Proxy.Context, request :JSONRPCRequest, response :Common.UniValue, lastCallback :Bool) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), response :Common.UniValue, result: Bool);\n+}\n+\n+struct JSONRPCRequest $Proxy.wrap(\"JSONRPCRequest\") {\n+    id @0 :Common.UniValue;\n+    method @1 :Text $Proxy.name(\"strMethod\");\n+    params @2 :Common.UniValue;\n+    mode @3 :Int32;\n+    uri @4 :Text $Proxy.name(\"URI\");\n+    authUser @5 :Text;\n+}\n+\n+interface RunLaterCallback $Proxy.wrap(\"ProxyCallback<std::function<void()>>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+struct FoundBlockParam {\n+    wantHash @0 :Bool;\n+    wantHeight @1 :Bool;\n+    wantTime @2 :Bool;\n+    wantMaxTime @3 :Bool;\n+    wantMtpTime @4 :Bool;\n+    wantInActiveChain @5 :Bool;\n+    nextBlock @6: FoundBlockParam;\n+    wantData @7 :Bool;\n+}\n+\n+struct FoundBlockResult {\n+    hash @0 :Data;\n+    height @1 :Int32;\n+    time @2 :Int64;\n+    maxTime @3 :Int64;\n+    mtpTime @4 :Int64;\n+    inActiveChain @5 :Int64;\n+    nextBlock @6: FoundBlockResult;\n+    data @7 :Data;\n+    found @8 :Bool;\n+}"
      },
      {
        "sha": "a5d36d597708e09fc2c2b6b6ffb13fde4a8946e0",
        "filename": "src/ipc/capnp/chain.cpp",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/capability.h>\n+#include <capnp/list.h>\n+#include <coins.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/handler.h>\n+#include <interfaces/ipc.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/handler.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <primitives/block.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder)\n+{\n+    if (dest.m_hash) builder.setWantHash(true);\n+    if (dest.m_height) builder.setWantHeight(true);\n+    if (dest.m_time) builder.setWantTime(true);\n+    if (dest.m_max_time) builder.setWantMaxTime(true);\n+    if (dest.m_mtp_time) builder.setWantMtpTime(true);\n+    if (dest.m_in_active_chain) builder.setWantInActiveChain(true);\n+    if (dest.m_next_block) CustomBuildMessage(invoke_context, *dest.m_next_block, builder.initNextBlock());\n+    if (dest.m_data) builder.setWantData(true);\n+}\n+\n+void FindBlock(const std::function<void()>& find,\n+               const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+               ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+               interfaces::FoundBlock& found_block)\n+{\n+    uint256 hash;\n+    int height = -1;\n+    int64_t time = -1;\n+    int64_t max_time = -1;\n+    int64_t mtp_time = -1;\n+    bool in_active_chain = -1;\n+    CBlock data;\n+    if (reader.getWantHash()) found_block.hash(hash);\n+    if (reader.getWantHeight()) found_block.height(height);\n+    if (reader.getWantTime()) found_block.time(time);\n+    if (reader.getWantMaxTime()) found_block.maxTime(max_time);\n+    if (reader.getWantMtpTime()) found_block.mtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) found_block.inActiveChain(in_active_chain);\n+    if (reader.getWantData()) found_block.data(data);\n+    if (reader.hasNextBlock()) {\n+        interfaces::FoundBlock next_block;\n+        found_block.nextBlock(next_block);\n+        FindBlock(find, reader.getNextBlock(), builder.initNextBlock(), next_block);\n+    } else {\n+        find();\n+    }\n+    if (!found_block.found) return;\n+    if (reader.getWantHash()) builder.setHash(ipc::capnp::ToArray(ipc::capnp::Serialize(hash)));\n+    if (reader.getWantHeight()) builder.setHeight(height);\n+    if (reader.getWantTime()) builder.setTime(time);\n+    if (reader.getWantMaxTime()) builder.setMaxTime(max_time);\n+    if (reader.getWantMtpTime()) builder.setMtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) builder.setInActiveChain(in_active_chain);\n+    if (reader.getWantData()) builder.setData(ipc::capnp::ToArray(ipc::capnp::Serialize(data)));\n+    builder.setFound(true);\n+}\n+\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn)\n+{\n+    interfaces::FoundBlock found_block;\n+    FindBlock([&] { fn(found_block); }, reader, std::move(builder), found_block);\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest)\n+{\n+    if (!reader.getFound()) return;\n+    if (dest.m_hash) *dest.m_hash = ipc::capnp::Unserialize<uint256>(reader.getHash());\n+    if (dest.m_height) *dest.m_height = reader.getHeight();\n+    if (dest.m_time) *dest.m_time = reader.getTime();\n+    if (dest.m_max_time) *dest.m_max_time = reader.getMaxTime();\n+    if (dest.m_mtp_time) *dest.m_mtp_time = reader.getMtpTime();\n+    if (dest.m_in_active_chain) *dest.m_in_active_chain = reader.getInActiveChain();\n+    if (dest.m_next_block) CustomReadMessage(invoke_context, reader.getNextBlock(), *dest.m_next_block);\n+    if (dest.m_data) *dest.m_data = ipc::capnp::Unserialize<CBlock>(reader.getData());\n+}\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>::invoke(\n+    Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto command = params.getCommand();\n+\n+    CRPCCommand::Actor actor;\n+    ReadField(TypeList<decltype(actor)>(), context, Make<ValueField>(command.getActor()), ReadDestValue(actor));\n+    std::vector<std::string> args;\n+    ReadField(TypeList<decltype(args)>(), context, Make<ValueField>(command.getArgNames()), ReadDestValue(args));\n+\n+    auto rpc_command = std::make_unique<CRPCCommand>(command.getCategory(), command.getName(), std::move(actor),\n+                                               std::move(args), command.getUniqueId());\n+    auto handler = context.proxy_server.m_impl->handleRpc(*rpc_command);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::Handler>>(std::shared_ptr<interfaces::Handler>(handler.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([rpc_command = rpc_command.release()] { delete rpc_command; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(ChainContext& context)\n+{\n+    // This method is never called because ChainClient::Start is overridden by\n+    // WalletClient::Start. The custom implementation is needed just because\n+    // the CScheduler& argument this is supposed to pass is not serializable.\n+    assert(0);\n+}\n+\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin)\n+{\n+    // Spent coins cannot be serialized due to an assert in Coin::Serialize.\n+    return !coin.IsSpent();\n+}\n+} // namespace mp"
      },
      {
        "sha": "f181ffd09e311133b3260a4987cc0449cd424e6a",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "added",
        "additions": 292,
        "deletions": 0,
        "changes": 292,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <ipc/capnp/common.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy-types.h>\n+#include <net_processing.h>\n+#include <net_types.h>\n+#include <netbase.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <wallet/coincontrol.h>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Convert kj::StringPtr to std::string.\n+inline std::string ToString(const kj::StringPtr& str) { return {str.cStr(), str.size()}; }\n+\n+//! Convert kj::ArrayPtr to std::string.\n+inline std::string ToString(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    return {reinterpret_cast<const char*>(data.begin()), data.size()};\n+}\n+\n+//! Convert array object to kj::ArrayPtr.\n+template <typename Array>\n+inline kj::ArrayPtr<const kj::byte> ToArray(const Array& array)\n+{\n+    return {reinterpret_cast<const kj::byte*>(array.data()), array.size()};\n+}\n+\n+//! Convert base_blob to kj::ArrayPtr.\n+template <typename Blob>\n+inline kj::ArrayPtr<const kj::byte> FromBlob(const Blob& blob)\n+{\n+    return {blob.begin(), blob.size()};\n+}\n+\n+//! Convert kj::ArrayPtr to base_blob\n+template <typename Blob>\n+inline Blob ToBlob(kj::ArrayPtr<const kj::byte> data)\n+{\n+    // TODO: Avoid temp vector.\n+    return Blob(std::vector<unsigned char>(data.begin(), data.begin() + data.size()));\n+}\n+\n+//! Serialize bitcoin value.\n+template <typename T>\n+CDataStream Serialize(const T& value)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    return stream;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(T& value, const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    // Could optimize, it unnecessarily copies the data into a temporary vector.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    value.Unserialize(stream);\n+    return value;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    T value;\n+    Unserialize(value, data);\n+    return value;\n+}\n+\n+template <typename T>\n+using Deserializable = std::is_constructible<T, ::deserialize_type, ::CDataStream&>;\n+\n+template <typename T>\n+struct Unserializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+template <typename T>\n+struct Serializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+//!@{\n+//! Functions to serialize / deserialize bitcoin objects that don't\n+//! already provide their own serialization.\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap);\n+//!@}\n+\n+template <typename LocalType, typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Reader&& reader,\n+    ReadDest&& read_dest,\n+    decltype(CustomReadMessage(invoke_context, reader.get(), std::declval<LocalType&>()))* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) { CustomReadMessage(invoke_context, reader.get(), value); });\n+}\n+\n+template <typename Accessor, typename LocalType, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<LocalType>, ServerContext& server_context, Fn&& fn, Args&&... args)\n+    -> decltype(CustomPassMessage(server_context,\n+                                  Accessor::get(server_context.call_context.getParams()),\n+                                  Accessor::init(server_context.call_context.getResults()),\n+                                  nullptr))\n+{\n+    CustomPassMessage(server_context, Accessor::get(server_context.call_context.getParams()),\n+                      Accessor::init(server_context.call_context.getResults()),\n+                      [&](LocalType param) { fn.invoke(server_context, std::forward<Args>(args)..., param); });\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    typename std::enable_if<ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    assert(input.has());\n+    auto data = input.get();\n+    // Note: stream copy here is unnecessary, and can be avoided in the future\n+    // when `VectorReader` from #12254 is added.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    return read_dest.construct(deserialize, stream);\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    // FIXME instead of always preferring Deserialize implementation over Unserialize should prefer Deserializing when\n+    // emplacing, unserialize when updating\n+    typename std::enable_if<ipc::capnp::Unserializable<LocalType>::value &&\n+                            !ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) {\n+        if (!input.has()) return;\n+        auto data = input.get();\n+        // Note: stream copy here is unnecessary, and can be avoided in the future\n+        // when `VectorReader` from #12254 is added.\n+        CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+        value.Unserialize(stream);\n+    });\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(input.get());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output)\n+{\n+    output.set(value.count());\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    auto data = input.get();\n+    // Copy input into SecureString. Caller needs to be responsible for calling\n+    // memory_cleanse on the input.\n+    return read_dest.construct(CharCast(data.begin()), data.size());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Value&& str, Output&& output)\n+{\n+    auto result = output.init(str.size());\n+    // Copy SecureString into output. Caller needs to be responsible for calling\n+    // memory_cleanse later on the output after it is sent.\n+    memcpy(result.begin(), str.data(), str.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init(value.size())), ::capnp::Data::Builder>::value>::type*\n+        enable_output = nullptr,\n+    decltype(memcpy(output.init(value.size()).begin(), value.data(), value.size()))* enable_value = nullptr)\n+{\n+    auto result = output.init(value.size());\n+    memcpy(result.begin(), value.data(), value.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(TypeList<LocalType>,\n+                      Priority<2>,\n+                      InvokeContext& invoke_context,\n+                      Value&& value,\n+                      Output&& output,\n+                      decltype(CustomBuildMessage(invoke_context, value, output.init()))* enable = nullptr)\n+{\n+    CustomBuildMessage(invoke_context, value, output.init());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<ipc::capnp::Serializable<\n+        typename std::remove_cv<typename std::remove_reference<Value>::type>::type>::value>::type* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    auto result = output.init(stream.size());\n+    memcpy(result.begin(), stream.data(), stream.size());\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<>, ServerContext& server_context, const Fn& fn, Args&&... args) ->\n+    typename std::enable_if<std::is_same<decltype(Accessor::get(server_context.call_context.getParams())),\n+                                         ipc::capnp::messages::GlobalArgs::Reader>::value>::type\n+{\n+    ipc::capnp::ReadGlobalArgs(server_context, Accessor::get(server_context.call_context.getParams()));\n+    return fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Output>\n+void CustomBuildField(\n+    TypeList<>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init()),\n+                                         ipc::capnp::messages::GlobalArgs::Builder>::value>::type* enable = nullptr)\n+{\n+    ipc::capnp::BuildGlobalArgs(invoke_context, output.init());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_TYPES_H"
      },
      {
        "sha": "3dfe39f87db666a95053a9c6180945d4eb212212",
        "filename": "src/ipc/capnp/common.capnp",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,51 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xcd2c6232cb484a28;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/common.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+struct UniValue {\n+    # The current version of UniValue included in bitcoin doesn't support\n+    # round-trip serialization of raw values. After it gets updated, and\n+    # https://github.com/jgarzik/univalue/pull/31 is merged, this struct\n+    # can go away and UniValues can just be serialized as text using\n+    # UniValue::read() and UniValue::write() methods.\n+\n+    type @0 :Int32;\n+    value @1 :Text;\n+}\n+\n+struct Settings $Proxy.wrap(\"util::Settings\") {\n+   forcedSettings @0 :List(Pair(Text, UniValue)) $Proxy.name(\"forced_settings\");\n+   commandLineOptions @1 :List(Pair(Text, List(UniValue))) $Proxy.name(\"command_line_options\");\n+   rwSettings @2 :List(Pair(Text, UniValue)) $Proxy.name(\"rw_settings\");\n+   roConfig @3 :List(Pair(Text, List(Pair(Text, List(UniValue))))) $Proxy.name(\"ro_config\");\n+}\n+\n+struct GlobalArgs $Proxy.wrap(\"ipc::capnp::GlobalArgs\") $Proxy.count(0) {\n+   settings @0 :Settings $Proxy.name(\"m_settings\");\n+   network @1 :Text $Proxy.name(\"m_network\");\n+   networkOnlyArgs @2 :List(Text) $Proxy.name(\"m_network_only_args\");\n+}\n+\n+struct BilingualStr $Proxy.wrap(\"bilingual_str\") {\n+    original @0 :Text;\n+    translated @1 :Text;\n+}\n+\n+struct Pair(Key, Value) {\n+    key @0 :Key;\n+    value @1 :Value;\n+}\n+\n+struct PairStr64 {\n+    key @0 :Text;\n+    value @1 :UInt64;\n+}"
      },
      {
        "sha": "7a0252858172e5cc4a1f4eb288231d8b5c449f78",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/common.h>\n+#include <capnp/list.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/common.capnp.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/common.h>\n+#include <ipc/capnp/context.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <sync.h>\n+#include <univalue.h>\n+#include <util/system.h>\n+\n+#include <functional>\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder)\n+{\n+    builder.setType(univalue.getType());\n+    if (univalue.getType() == UniValue::VARR || univalue.getType() == UniValue::VOBJ) {\n+        builder.setValue(univalue.write());\n+    } else {\n+        builder.setValue(univalue.getValStr());\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue)\n+{\n+    if (reader.getType() == UniValue::VARR || reader.getType() == UniValue::VOBJ) {\n+        if (!univalue.read(ipc::capnp::ToString(reader.getValue()))) {\n+            throw std::runtime_error(\"Could not parse UniValue\");\n+        }\n+    } else {\n+        univalue = UniValue(UniValue::VType(reader.getType()), ipc::capnp::ToString(reader.getValue()));\n+    }\n+}\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder)\n+{\n+    const auto& args = static_cast<const GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    mp::BuildField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(builder), args);\n+}\n+\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader)\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    {\n+        LOCK(args.cs_args);\n+        mp::ReadField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(reader),\n+                      mp::ReadDestValue(args));\n+    }\n+    Context& ipc_context = *static_cast<Context*>(invoke_context.connection.m_loop.m_context);\n+    ipc_context.init_process();\n+}\n+\n+std::string GlobalArgsNetwork()\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    return args.m_network;\n+}\n+} // namespace capnp\n+} // namespace ipc"
      },
      {
        "sha": "7e92364769ae2b37d6ef6b2f7e8a38e71ed46a59",
        "filename": "src/ipc/capnp/common.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_H\n+#define BITCOIN_IPC_CAPNP_COMMON_H\n+\n+#include <ipc/capnp/common.capnp.h>\n+#include <util/system.h>\n+\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+//! Wrapper around GlobalArgs struct to expose public members.\n+struct GlobalArgs : public ArgsManager\n+{\n+    using ArgsManager::cs_args;\n+    using ArgsManager::m_network;\n+    using ArgsManager::m_network_only_args;\n+    using ArgsManager::m_settings;\n+};\n+\n+//! GlobalArgs client-side argument handling. Builds message from ::gArgs variable.\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder);\n+\n+//! GlobalArgs server-side argument handling. Reads message into ::gArgs variable.\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader);\n+\n+//! GlobalArgs network string accessor.\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_H"
      },
      {
        "sha": "2676b1eef7e3e994f3d847584b9bddbc05803ced",
        "filename": "src/ipc/capnp/context.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/context.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -5,8 +5,16 @@\n #ifndef BITCOIN_IPC_CAPNP_CONTEXT_H\n #define BITCOIN_IPC_CAPNP_CONTEXT_H\n \n+#include <ipc/capnp/node.capnp.h>\n #include <ipc/context.h>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n namespace ipc {\n namespace capnp {\n //! Cap'n Proto context struct. Generally the parent ipc::Context struct should\n@@ -16,6 +24,12 @@ namespace capnp {\n //! function and object types to capnp hooks.\n struct Context : ipc::Context\n {\n+    using MakeNodeClient = std::unique_ptr<interfaces::Node>(mp::InvokeContext& context,\n+                                                             messages::Node::Client&& client);\n+    using MakeNodeServer = kj::Own<messages::Node::Server>(mp::InvokeContext& context,\n+                                                           std::shared_ptr<interfaces::Node> impl);\n+    MakeNodeClient* make_node_client = nullptr;\n+    MakeNodeServer* make_node_server = nullptr;\n };\n } // namespace capnp\n } // namespace ipc"
      },
      {
        "sha": "3c1fadbac894e88513c1d9347526c9ca4806b98e",
        "filename": "src/ipc/capnp/handler.capnp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/handler.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/handler.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/handler.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,16 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xebd8f46e2f369076;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/handler.h\");\n+\n+interface Handler $Proxy.wrap(\"interfaces::Handler\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    disconnect @1 (context :Proxy.Context) -> ();\n+}"
      },
      {
        "sha": "8c444add4b35d8af7b604c245a8c9920bb150c59",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -5,6 +5,31 @@\n #ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+\n+namespace mp {\n+//! Specialization of makeWalletClient needed because it takes a Chain& reference\n+//! argument, not a unique_ptr<Chain> argument, so a manual cleanup\n+//! callback is needed to clean up the ProxyServer<messages::Chain> proxy object.\n+template <>\n+struct ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Init,\n+                                  ipc::capnp::messages::Init::MakeWalletClientParams,\n+                                  ipc::capnp::messages::Init::MakeWalletClientResults>;\n+    static capnp::Void invoke(Context& context);\n+};\n+\n+//! Chain& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<interfaces::Chain&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+} // namespace mp\n \n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "e2fa768db654cbc7fa870a173cc2c11a07e2324c",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -8,13 +8,22 @@ using Cxx = import \"/capnp/c++.capnp\";\n $Cxx.namespace(\"ipc::capnp::messages\");\n \n using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n+$Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n using Echo = import \"echo.capnp\";\n+using Node = import \"node.capnp\";\n+using Wallet = import \"wallet.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n+    makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n+    makeChain @3 (context :Proxy.Context) -> (result :Chain.Chain);\n+    makeWalletClient @4 (context :Proxy.Context, globalArgs :Common.GlobalArgs, chain :Chain.Chain) -> (result :Wallet.WalletClient);\n }"
      },
      {
        "sha": "47f2bcc9f1050741a80878cd81a9a62932e269f6",
        "filename": "src/ipc/capnp/init.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/capability.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/init-types.h>\n+#include <ipc/capnp/init.capnp.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+\n+#include <memory>\n+#include <utility>\n+\n+namespace mp {\n+template <typename Interface> struct ProxyClient;\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>::invoke(Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto chain = std::make_unique<ProxyClient<ipc::capnp::messages::Chain>>(\n+        params.getChain(), context.proxy_server.m_context.connection, /* destroy_connection= */ false);\n+    auto wallet_client = context.proxy_server.m_impl->makeWalletClient(*chain);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::WalletClient>>(std::shared_ptr<interfaces::WalletClient>(wallet_client.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([chain = chain.release()] { delete chain; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+} // namespace mp"
      },
      {
        "sha": "151820b51187e883fb5592ecd3e42a869c728c68",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "added",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+#define BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+//! Specialization of rpcSetTimerInterfaceIfUnset needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetResults>;\n+    static void invoke(Context& context);\n+};\n+\n+//! Specialization of rpcUnsetTimerInterface needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceResults>;\n+    static void invoke(Context& context);\n+};\n+\n+namespace mp {\n+//! Specialization of MakeProxyClient for Node to that constructs a client\n+//! object through a function pointer so client object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline std::unique_ptr<interfaces::Node> CustomMakeProxyClient<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, ipc::capnp::messages::Node::Client&& client)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_client(context, kj::mv(client));\n+}\n+\n+//! Specialization of MakeProxyServer for Node to that constructs a server\n+//! object through a function pointer so server object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline kj::Own<ipc::capnp::messages::Node::Server> CustomMakeProxyServer<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, std::shared_ptr<interfaces::Node>&& impl)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_server(context, std::move(impl));\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    const auto& params = server_context.call_context.getParams();\n+    const auto& value = Accessor::get(params);\n+    std::vector<const char*> argv(value.size());\n+    size_t i = 0;\n+    for (const auto arg : value) {\n+        argv[i] = arg.cStr();\n+        ++i;\n+    }\n+    return fn.invoke(server_context, std::forward<Args>(args)..., argv.size(), argv.data());\n+}\n+\n+template <typename Output>\n+void CustomBuildField(TypeList<int, const char* const*>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      int argc,\n+                      const char* const* argv,\n+                      Output&& output)\n+{\n+    auto args = output.init(argc);\n+    for (int i = 0; i < argc; ++i) {\n+        args.set(i, argv[i]);\n+    }\n+}\n+\n+template <typename InvokeContext>\n+static inline ::capnp::Void BuildPrimitive(InvokeContext& invoke_context, RPCTimerInterface*, TypeList<::capnp::Void>)\n+{\n+    return {};\n+}\n+\n+//! RPCTimerInterface* server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<RPCTimerInterface*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::tuple<CNodeStats, bool, CNodeStateStats>>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      Value&& stats,\n+                      Output&& output)\n+{\n+    // FIXME should pass message_builder instead of builder below to avoid\n+    // calling output.set twice Need ValueBuilder class analogous to\n+    // ValueReader for this\n+    BuildField(TypeList<CNodeStats>(), invoke_context, output, std::get<0>(stats));\n+    if (std::get<1>(stats)) {\n+        auto message_builder = output.init();\n+        using Accessor = ProxyStruct<ipc::capnp::messages::NodeStats>::StateStatsAccessor;\n+        StructField<Accessor, ipc::capnp::messages::NodeStats::Builder> field_output{message_builder};\n+        BuildField(TypeList<CNodeStateStats>(), invoke_context, field_output, std::get<2>(stats));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats);\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<CSubNet>, Priority<1>, InvokeContext& invoke_context, Value&& subnet, Output&& output)\n+{\n+    std::string subnet_str = subnet.ToString();\n+    auto result = output.init(subnet_str.size());\n+    memcpy(result.begin(), subnet_str.data(), subnet_str.size());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_TYPES_H"
      },
      {
        "sha": "0b347c143eeba7520d086ce4baa6527a81b7a839",
        "filename": "src/ipc/capnp/node.capnp",
        "status": "added",
        "additions": 199,
        "deletions": 0,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,199 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x92546c47dc734b2e;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/node.h\");\n+$Proxy.includeTypes(\"ipc/capnp/node-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+using Wallet = import \"wallet.capnp\";\n+\n+interface Node $Proxy.wrap(\"interfaces::Node\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    initLogging @1 (context :Proxy.Context) -> ();\n+    initParameterInteraction @2 (context :Proxy.Context) -> ();\n+    getWarnings @3 (context :Proxy.Context) -> (result :Common.BilingualStr);\n+    getLogCategories @4 (context :Proxy.Context) -> (result :UInt32);\n+    baseInitialize @5 (context :Proxy.Context, globalArgs :Common.GlobalArgs) -> (error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appInitMain @6 (context :Proxy.Context) -> (tipInfo :BlockAndHeaderTipInfo, error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appShutdown @7 (context :Proxy.Context) -> ();\n+    startShutdown @8 (context :Proxy.Context) -> ();\n+    shutdownRequested @9 (context :Proxy.Context) -> (result :Bool);\n+    mapPort @10 (context :Proxy.Context, useUPnP :Bool, useNatPnP :Bool) -> ();\n+    getProxy @11 (context :Proxy.Context, net :Int32) -> (proxyInfo :ProxyType, result :Bool);\n+    getNodeCount @12 (context :Proxy.Context, flags :Int32) -> (result :UInt64);\n+    getNodesStats @13 (context :Proxy.Context) -> (stats :List(NodeStats), result :Bool);\n+    getBanned @14 (context :Proxy.Context) -> (banmap :Banmap, result :Bool);\n+    ban @15 (context :Proxy.Context, netAddr :Data, banTimeOffset :Int64) -> (result :Bool);\n+    unban @16 (context :Proxy.Context, ip :Data) -> (result :Bool);\n+    disconnectByAddress @17 (context :Proxy.Context, address :Data) -> (result :Bool);\n+    disconnectById @18 (context :Proxy.Context, id :Int64) -> (result :Bool);\n+    listExternalSigners @19 (context :Proxy.Context) -> (result :List(ExternalSigner));\n+    getTotalBytesRecv @20 (context :Proxy.Context) -> (result :Int64);\n+    getTotalBytesSent @21 (context :Proxy.Context) -> (result :Int64);\n+    getMempoolSize @22 (context :Proxy.Context) -> (result :UInt64);\n+    getMempoolDynamicUsage @23 (context :Proxy.Context) -> (result :UInt64);\n+    getHeaderTip @24 (context :Proxy.Context) -> (height :Int32, blockTime :Int64, result :Bool);\n+    getNumBlocks @25 (context :Proxy.Context) -> (result :Int32);\n+    getBestBlockHash @26 (context :Proxy.Context) -> (result :Data);\n+    getLastBlockTime @27 (context :Proxy.Context) -> (result :Int64);\n+    getVerificationProgress @28 (context :Proxy.Context) -> (result :Float64);\n+    isInitialBlockDownload @29 (context :Proxy.Context) -> (result :Bool);\n+    getReindex @30 (context :Proxy.Context) -> (result :Bool);\n+    getImporting @31 (context :Proxy.Context) -> (result :Bool);\n+    setNetworkActive @32 (context :Proxy.Context, active :Bool) -> ();\n+    getNetworkActive @33 (context :Proxy.Context) -> (result :Bool);\n+    getDustRelayFee @34 (context :Proxy.Context) -> (result :Data);\n+    executeRpc @35 (context :Proxy.Context, command :Text, params :Common.UniValue, uri :Text) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), result :Common.UniValue);\n+    listRpcCommands @36 (context :Proxy.Context) -> (result :List(Text));\n+    rpcSetTimerInterfaceIfUnset @37 (context :Proxy.Context, iface :Void) -> ();\n+    rpcUnsetTimerInterface @38 (context :Proxy.Context, iface :Void) -> ();\n+    getUnspentOutput @39 (context :Proxy.Context, output :Data) -> (coin :Data, result :Bool);\n+    customWalletClient @40 (context :Proxy.Context) -> (result :Wallet.WalletClient) $Proxy.name(\"walletClient\");\n+    handleInitMessage @41 (context :Proxy.Context, callback :InitMessageCallback) -> (result :Handler.Handler);\n+    handleMessageBox @42 (context :Proxy.Context, callback :MessageBoxCallback) -> (result :Handler.Handler);\n+    handleQuestion @43 (context :Proxy.Context, callback :QuestionCallback) -> (result :Handler.Handler);\n+    handleShowProgress @44 (context :Proxy.Context, callback :ShowNodeProgressCallback) -> (result :Handler.Handler);\n+    handleInitWallet @45 (context :Proxy.Context, callback :InitWalletCallback) -> (result :Handler.Handler);\n+    handleNotifyNumConnectionsChanged @46 (context :Proxy.Context, callback :NotifyNumConnectionsChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyNetworkActiveChanged @47 (context :Proxy.Context, callback :NotifyNetworkActiveChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyAlertChanged @48 (context :Proxy.Context, callback :NotifyAlertChangedCallback) -> (result :Handler.Handler);\n+    handleBannedListChanged @49 (context :Proxy.Context, callback :BannedListChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyBlockTip @50 (context :Proxy.Context, callback :NotifyBlockTipCallback) -> (result :Handler.Handler);\n+    handleNotifyHeaderTip @51 (context :Proxy.Context, callback :NotifyHeaderTipCallback) -> (result :Handler.Handler);\n+}\n+\n+interface ExternalSigner $Proxy.wrap(\"interfaces::ExternalSigner\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getName @1 (context :Proxy.Context) -> (result :Text);\n+}\n+\n+interface InitMessageCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitMessageFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Text) -> ();\n+}\n+\n+interface MessageBoxCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::MessageBoxFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface QuestionCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::QuestionFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, nonInteractiveMessage :Text, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface ShowNodeProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+}\n+\n+interface InitWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyNumConnectionsChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNumConnectionsChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, newNumConnections :Int32) -> ();\n+}\n+\n+interface NotifyNetworkActiveChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNetworkActiveChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, networkActive :Bool) -> ();\n+}\n+\n+interface NotifyAlertChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyAlertChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface BannedListChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::BannedListChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyBlockTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyBlockTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+interface NotifyHeaderTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyHeaderTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+struct ProxyType $Proxy.wrap(\"proxyType\") {\n+    proxy @0 :Data;\n+    randomizeCredentials @1 :Bool $Proxy.name(\"randomize_credentials\");\n+}\n+\n+struct NodeStats $Proxy.wrap(\"CNodeStats\") {\n+    nodeid @0 :Int64 $Proxy.name(\"nodeid\");\n+    services @1 :UInt64 $Proxy.name(\"nServices\");\n+    relayTxes @2 :Bool $Proxy.name(\"fRelayTxes\");\n+    lastSend @3 :Int64 $Proxy.name(\"nLastSend\");\n+    lastRecv @4 :Int64 $Proxy.name(\"nLastRecv\");\n+    lastTXTime @5 :Int64 $Proxy.name(\"nLastTXTime\");\n+    lastBlockTime @6 :Int64 $Proxy.name(\"nLastBlockTime\");\n+    timeConnected @7 :Int64 $Proxy.name(\"nTimeConnected\");\n+    timeOffset @8 :Int64 $Proxy.name(\"nTimeOffset\");\n+    addrName @9 :Text $Proxy.name(\"m_addr_name\");\n+    version @10 :Int32 $Proxy.name(\"nVersion\");\n+    cleanSubVer @11 :Text $Proxy.name(\"cleanSubVer\");\n+    inbound @12 :Bool $Proxy.name(\"fInbound\");\n+    bip152HighbandwidthTo @13 :Bool $Proxy.name(\"m_bip152_highbandwidth_to\");\n+    bip152HighbandwidthFrom @14 :Bool $Proxy.name(\"m_bip152_highbandwidth_from\");\n+    startingHeight @15 :Int32 $Proxy.name(\"m_starting_height\");\n+    sendBytes @16 :UInt64 $Proxy.name(\"nSendBytes\");\n+    sendBytesPerMsgCmd @17 :List(Common.PairStr64) $Proxy.name(\"mapSendBytesPerMsgCmd\");\n+    recvBytes @18 :UInt64 $Proxy.name(\"nRecvBytes\");\n+    recvBytesPerMsgCmd @19 :List(Common.PairStr64) $Proxy.name(\"mapRecvBytesPerMsgCmd\");\n+    permissionFlags @20 :Int32 $Proxy.name(\"m_permissionFlags\");\n+    pingTime @21 :Int64 $Proxy.name(\"m_last_ping_time\");\n+    minPingTime @22 :Int64 $Proxy.name(\"m_min_ping_time\");\n+    minFeeFilter @23 :Int64 $Proxy.name(\"minFeeFilter\");\n+    addrLocal @24 :Text $Proxy.name(\"addrLocal\");\n+    addr @25 :Data $Proxy.name(\"addr\");\n+    addrBind @26 :Data $Proxy.name(\"addrBind\");\n+    network @27 :Int32 $Proxy.name(\"m_network\");\n+    mappedAs @28 :UInt32 $Proxy.name(\"m_mapped_as\");\n+    connType @29 :Int32 $Proxy.name(\"m_conn_type\");\n+    stateStats @30 :NodeStateStats $Proxy.skip;\n+}\n+\n+struct NodeStateStats $Proxy.wrap(\"CNodeStateStats\") {\n+    syncHeight @0 :Int32 $Proxy.name(\"nSyncHeight\");\n+    commonHeight @1 :Int32 $Proxy.name(\"nCommonHeight\");\n+    startingHeight @2 :Int32 $Proxy.name(\"m_starting_height\");\n+    pingWait @3 :Int64 $Proxy.name(\"m_ping_wait\");\n+    heightInFlight @4 :List(Int32) $Proxy.name(\"vHeightInFlight\");\n+    addressesProcessed @5 :UInt64 $Proxy.name(\"m_addr_processed\");\n+    addressesRateLimited @6 :UInt64 $Proxy.name(\"m_addr_rate_limited\");\n+    addressRelayEnabled @7 :Bool $Proxy.name(\"m_addr_relay_enabled\");\n+}\n+\n+struct Banmap {\n+    json @0 :Text;\n+}\n+\n+struct BlockTip $Proxy.wrap(\"interfaces::BlockTip\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    blockHash @2 :Data $Proxy.name(\"block_hash\");\n+}\n+\n+struct BlockAndHeaderTipInfo $Proxy.wrap(\"interfaces::BlockAndHeaderTipInfo\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    headerHeight @2 :Int32 $Proxy.name(\"header_height\");\n+    headerTime @3 :Int64 $Proxy.name(\"header_time\");\n+    verificationProgress @4 :Float64 $Proxy.name(\"verification_progress\");\n+}"
      },
      {
        "sha": "a32125009c90fff11e9cea32c2f1f6f870af95ce",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/list.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node-types.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/node.h>\n+#include <kj/async-io.h>\n+#include <kj/async-prelude.h>\n+#include <kj/async.h>\n+#include <kj/memory.h>\n+#include <kj/time.h>\n+#include <kj/timer.h>\n+#include <kj/units.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <rpc/server.h>\n+#include <sys/types.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <tuple>\n+#include <utility>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_client = mp::MakeProxyClient<messages::Node, interfaces::Node>;\n+}\n+\n+void SetupNodeServer(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_server = mp::MakeProxyServer<messages::Node, interfaces::Node>;\n+}\n+\n+class RpcTimer : public ::RPCTimerBase\n+{\n+public:\n+    RpcTimer(mp::EventLoop& loop, std::function<void(void)>& fn, int64_t millis)\n+        : m_fn(fn), m_promise(loop.m_io_context.provider->getTimer()\n+                                  .afterDelay(millis * kj::MILLISECONDS)\n+                                  .then([this]() { m_fn(); })\n+                                  .eagerlyEvaluate(nullptr))\n+    {\n+    }\n+    ~RpcTimer() noexcept override {}\n+\n+    std::function<void(void)> m_fn;\n+    kj::Promise<void> m_promise;\n+};\n+\n+class RpcTimerInterface : public ::RPCTimerInterface\n+{\n+public:\n+    RpcTimerInterface(mp::EventLoop& loop) : m_loop(loop) {}\n+    const char* Name() override { return \"Cap'n Proto\"; }\n+    RPCTimerBase* NewTimer(std::function<void(void)>& fn, int64_t millis) override\n+    {\n+        RPCTimerBase* result;\n+        m_loop.sync([&] { result = new RpcTimer(m_loop, fn, millis); });\n+        return result;\n+    }\n+    mp::EventLoop& m_loop;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>::invoke(Context& context)\n+{\n+    if (!context.proxy_server.m_timer_interface) {\n+        auto timer = std::make_unique<ipc::capnp::RpcTimerInterface>(context.proxy_server.m_context.connection->m_loop);\n+        context.proxy_server.m_timer_interface = std::move(timer);\n+    }\n+    context.proxy_server.m_impl->rpcSetTimerInterfaceIfUnset(context.proxy_server.m_timer_interface.get());\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>::invoke(Context& context)\n+{\n+    context.proxy_server.m_impl->rpcUnsetTimerInterface(context.proxy_server.m_timer_interface.get());\n+    context.proxy_server.m_timer_interface.reset();\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats)\n+{\n+    CNodeStats& node = std::get<0>(node_stats);\n+    ReadField(TypeList<CNodeStats>(), invoke_context, Make<ValueField>(reader), ReadDestValue(node));\n+    if ((std::get<1>(node_stats) = reader.hasStateStats())) {\n+        CNodeStateStats& state = std::get<2>(node_stats);\n+        ReadField(TypeList<CNodeStateStats>(), invoke_context, Make<ValueField>(reader.getStateStats()),\n+                  ReadDestValue(state));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet)\n+{\n+    std::string subnet_str = ipc::capnp::ToString(reader);\n+    if (!LookupSubNet(subnet_str, subnet)) {\n+        throw std::runtime_error(\n+            strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder)\n+{\n+    builder.setJson(BanMapToJson(banmap).write());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap)\n+{\n+    UniValue banmap_json;\n+    if (!banmap_json.read(ipc::capnp::ToString(reader.getJson()))) {\n+        throw std::runtime_error(\"Could not parse banmap json\");\n+    }\n+    BanMapFromJson(banmap_json, banmap);\n+}\n+\n+interfaces::WalletClient& ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>::walletClient()\n+{\n+    if (!m_wallet_client) {\n+        m_wallet_client = self().customWalletClient();\n+    }\n+    return *m_wallet_client;\n+}\n+} // namespace mp"
      },
      {
        "sha": "65c87113018e7dbe13b7a4d8ca42f370555e5764",
        "filename": "src/ipc/capnp/node.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_H\n+#define BITCOIN_IPC_CAPNP_NODE_H\n+\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+\n+#include <memory>\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+//! Specialization of Node proxy server needed to add m_timer_interface\n+//! member used by rpcSetTimerInterfaceIfUnset and rpcUnsetTimerInterface\n+//! methods.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    std::unique_ptr<RPCTimerInterface> m_timer_interface;\n+};\n+\n+//! Specialization of Node client to manage memory of WalletClient& reference\n+//! returned by walletClient().\n+template <>\n+class mp::ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyClientBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyClientBase::ProxyClientBase;\n+    interfaces::WalletClient& walletClient() override;\n+\n+private:\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n+};\n+\n+//! Specialization of Node::walletClient client code to manage memory of\n+//! WalletClient& reference returned by walletClient().\n+template <>\n+struct mp::ProxyClientMethodTraits<ipc::capnp::messages::Node::CustomWalletClientParams>\n+    : public FunctionTraits<std::unique_ptr<interfaces::WalletClient> (interfaces::Node::*const)()>\n+{\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_H"
      },
      {
        "sha": "25026e0d66bc4c1ae7daa13dd989aeeaee3de9ec",
        "filename": "src/ipc/capnp/wallet-types.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet-types.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+#define BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <scheduler.h>\n+#include <wallet/wallet.h>\n+\n+class CCoinControl;\n+class CKey;\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest);\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control);\n+\n+template <typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<PKHash>, Priority<1>, InvokeContext& invoke_context, Reader&& reader, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(ipc::capnp::ToBlob<uint160>(reader.get()));\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_TYPES_H"
      },
      {
        "sha": "9f3312fb0a9ba149c3668c8680b5a1d90078a4c0",
        "filename": "src/ipc/capnp/wallet.capnp",
        "status": "added",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.capnp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,231 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xe234cce74feea00c;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/wallet.h\");\n+$Proxy.includeTypes(\"ipc/capnp/wallet-types.h\");\n+\n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Wallet $Proxy.wrap(\"interfaces::Wallet\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    encryptWallet @1 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isCrypted @2 (context :Proxy.Context) -> (result :Bool);\n+    lock @3 (context :Proxy.Context) -> (result :Bool);\n+    unlock @4 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isLocked @5 (context :Proxy.Context) -> (result :Bool);\n+    changeWalletPassphrase @6 (context :Proxy.Context, oldWalletPassphrase :Data, newWalletPassphrase :Data) -> (result :Bool);\n+    abortRescan @7 (context :Proxy.Context) -> ();\n+    backupWallet @8 (context :Proxy.Context, filename :Text) -> (result :Bool);\n+    getWalletName @9 (context :Proxy.Context) -> (result :Text);\n+    getNewDestination @10 (context :Proxy.Context, outputType :Int32, label :Text) -> (dest :TxDestination, result :Bool);\n+    getPubKey @11 (context :Proxy.Context, script :Data, address :Data) -> (pubKey :Data, result :Bool);\n+    signMessage @12 (context :Proxy.Context, message :Text, pkhash :Data) -> (signature :Text, result :Int32);\n+    isSpendable @13 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    haveWatchOnly @14 (context :Proxy.Context) -> (result :Bool);\n+    setAddressBook @15 (context :Proxy.Context, dest :TxDestination, name :Text, purpose :Text) -> (result :Bool);\n+    delAddressBook @16 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    getAddress @17 (context :Proxy.Context, dest :TxDestination, wantName :Bool, wantIsMine :Bool, wantPurpose :Bool) -> (name :Text, isMine :Int32, purpose :Text, result :Bool);\n+    getAddresses @18 (context :Proxy.Context) -> (result :List(WalletAddress));\n+    getAddressReceiveRequests @19 (context :Proxy.Context) -> (result :List(Data));\n+    setAddressReceiveRequest @20 (context :Proxy.Context, dest :TxDestination, id :Data, value :Data) -> (result :Bool);\n+    displayAddress @21 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    lockCoin @22 (context :Proxy.Context, output :Data, writeToDb :Bool) -> (result :Bool);\n+    unlockCoin @23 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    isLockedCoin @24 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    listLockedCoins @25 (context :Proxy.Context) -> (outputs :List(Data));\n+    createTransaction @26 (context :Proxy.Context, recipients :List(Recipient), coinControl :CoinControl, sign :Bool, changePos :Int32) -> (changePos :Int32, fee :Int64, failReason :Common.BilingualStr, result :Data);\n+    commitTransaction @27 (context :Proxy.Context, tx :Data, valueMap :List(Common.Pair(Text, Text)), orderForm :List(Common.Pair(Text, Text))) -> ();\n+    transactionCanBeAbandoned @28 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    abandonTransaction @29 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    transactionCanBeBumped @30 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    createBumpTransaction @31 (context :Proxy.Context, txid :Data, coinControl :CoinControl) -> (errors :List(Common.BilingualStr), oldFee :Int64, newFee :Int64, mtx :Data, result :Bool);\n+    signBumpTransaction @32 (context :Proxy.Context, mtx :Data) -> (mtx :Data, result :Bool);\n+    commitBumpTransaction @33 (context :Proxy.Context, txid :Data, mtx :Data) -> (errors :List(Common.BilingualStr), bumpedTxid :Data, result :Bool);\n+    getTx @34 (context :Proxy.Context, txid :Data) -> (result :Data);\n+    getWalletTx @35 (context :Proxy.Context, txid :Data) -> (result :WalletTx);\n+    getWalletTxs @36 (context :Proxy.Context) -> (result :List(WalletTx));\n+    tryGetTxStatus @37 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, numBlocks :Int32, blockTime :Int64, result :Bool);\n+    getWalletTxDetails @38 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, orderForm :List(Common.Pair(Text, Text)), inMempool :Bool, numBlocks :Int32, result :WalletTx);\n+    getBalances @39 (context :Proxy.Context) -> (result :WalletBalances);\n+    fillPSBT @40 (context :Proxy.Context, sighashType :Int32, sign :Bool, bip32derivs :Bool, wantNSigned :Bool) -> (nSigned: UInt64, psbt :Data, complete :Bool, result :Int32);\n+    tryGetBalances @41 (context :Proxy.Context) -> (balances :WalletBalances, blockHash :Data, result :Bool);\n+    getBalance @42 (context :Proxy.Context) -> (result :Int64);\n+    getAvailableBalance @43 (context :Proxy.Context, coinControl :CoinControl) -> (result :Int64);\n+    txinIsMine @44 (context :Proxy.Context, txin :Data) -> (result :Int32);\n+    txoutIsMine @45 (context :Proxy.Context, txout :Data) -> (result :Int32);\n+    getDebit @46 (context :Proxy.Context, txin :Data, filter :Int32) -> (result :Int64);\n+    getCredit @47 (context :Proxy.Context, txout :Data, filter :Int32) -> (result :Int64);\n+    listCoins @48 (context :Proxy.Context) -> (result :List(Common.Pair(TxDestination, List(Common.Pair(Data, WalletTxOut)))));\n+    getCoins @49 (context :Proxy.Context, outputs :List(Data)) -> (result :List(WalletTxOut));\n+    getRequiredFee @50 (context :Proxy.Context, txBytes :UInt32) -> (result :Int64);\n+    getMinimumFee @51 (context :Proxy.Context, txBytes :UInt32, coinControl :CoinControl, wantReturnedTarget :Bool, wantReason :Bool) -> (returnedTarget :Int32, reason :Int32, result :Int64);\n+    getConfirmTarget @52 (context :Proxy.Context) -> (result :UInt32);\n+    hdEnabled @53 (context :Proxy.Context) -> (result :Bool);\n+    canGetAddresses @54 (context :Proxy.Context) -> (result :Bool);\n+    privateKeysDisabled @55 (context :Proxy.Context) -> (result :Bool);\n+    hasExternalSigner @56 (context :Proxy.Context) -> (result :Bool);\n+    getDefaultAddressType @57 (context :Proxy.Context) -> (result :Int32);\n+    getDefaultMaxTxFee @58 (context :Proxy.Context) -> (result :Int64);\n+    remove @59 (context :Proxy.Context) -> ();\n+    isLegacy @60 (context :Proxy.Context) -> (result :Bool);\n+    handleUnload @61 (context :Proxy.Context, callback :UnloadWalletCallback) -> (result :Handler.Handler);\n+    handleShowProgress @62 (context :Proxy.Context, callback :ShowWalletProgressCallback) -> (result :Handler.Handler);\n+    handleStatusChanged @63 (context :Proxy.Context, callback :StatusChangedCallback) -> (result :Handler.Handler);\n+    handleAddressBookChanged @64 (context :Proxy.Context, callback :AddressBookChangedCallback) -> (result :Handler.Handler);\n+    handleTransactionChanged @65 (context :Proxy.Context, callback :TransactionChangedCallback) -> (result :Handler.Handler);\n+    handleWatchOnlyChanged @66 (context :Proxy.Context, callback :WatchOnlyChangedCallback) -> (result :Handler.Handler);\n+    handleCanGetAddressesChanged @67 (context :Proxy.Context, callback :CanGetAddressesChangedCallback) -> (result :Handler.Handler);\n+}\n+\n+interface UnloadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::UnloadFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface ShowWalletProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32) -> ();\n+}\n+\n+interface StatusChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::StatusChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface AddressBookChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::AddressBookChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, address :TxDestination, label :Text, isMine :Bool, purpose :Text, status :Int32) -> ();\n+}\n+\n+interface TransactionChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::TransactionChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, txid :Data, status :Int32) -> ();\n+}\n+\n+interface WatchOnlyChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::WatchOnlyChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, haveWatchOnly :Bool) -> ();\n+}\n+\n+interface CanGetAddressesChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::CanGetAddressesChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface WalletClient extends(Chain.ChainClient) $Proxy.wrap(\"interfaces::WalletClient\") {\n+    createWallet @0 (context :Proxy.Context, name :Text, passphrase :Text, flags :UInt64) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    loadWallet @1 (context :Proxy.Context, name :Text) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    getWalletDir @2 (context :Proxy.Context) -> (result :Text);\n+    listWalletDir @3 (context :Proxy.Context) -> (result :List(Text));\n+    getWallets @4 (context :Proxy.Context) -> (result :List(Wallet));\n+    handleLoadWallet @5 (context :Proxy.Context, callback :LoadWalletCallback) -> (result :Handler.Handler);\n+}\n+\n+interface LoadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::WalletClient::LoadWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, wallet :Wallet) -> ();\n+}\n+\n+struct Key {\n+    secret @0 :Data;\n+    isCompressed @1 :Bool;\n+}\n+\n+struct TxDestination {\n+    pkHash @0 :Data;\n+    scriptHash @1 :Data;\n+    witnessV0ScriptHash @2 :Data;\n+    witnessV0KeyHash @3 :Data;\n+    witnessUnknown @4 :WitnessUnknown;\n+}\n+\n+struct WitnessUnknown $Proxy.wrap(\"WitnessUnknown\")\n+{\n+    version @0 :UInt32;\n+    length @1 :UInt32;\n+    program @2 :Data;\n+}\n+\n+struct WalletAddress $Proxy.wrap(\"interfaces::WalletAddress\") {\n+    dest @0 :TxDestination;\n+    isMine @1 :Int32 $Proxy.name(\"is_mine\");\n+    name @2 :Text;\n+    purpose @3 :Text;\n+}\n+\n+struct Recipient $Proxy.wrap(\"CRecipient\") {\n+    scriptPubKey @0 :Data;\n+    amount @1 :Int64 $Proxy.name(\"nAmount\");\n+    subtractFeeFromAmount @2 :Bool $Proxy.name(\"fSubtractFeeFromAmount\");\n+}\n+\n+struct CoinControl {\n+    destChange @0 :TxDestination;\n+    hasChangeType @1 :Bool;\n+    changeType @2 :Int32;\n+    allowOtherInputs @3 :Bool;\n+    allowWatchOnly @4 :Bool;\n+    overrideFeeRate @5 :Bool;\n+    hasFeeRate @6 :Bool;\n+    feeRate @7 :Data;\n+    hasConfirmTarget @8 :Bool;\n+    confirmTarget @9 :Int32;\n+    hasSignalRbf @10 :Bool;\n+    signalRbf @11 :Bool;\n+    feeMode @12 :Int32;\n+    minDepth @13 :Int32;\n+    setSelected @14 :List(Data);\n+}\n+\n+struct WalletTx $Proxy.wrap(\"interfaces::WalletTx\") {\n+    tx @0 :Data;\n+    txinIsMine @1 :List(Int32) $Proxy.name(\"txin_is_mine\");\n+    txoutIsMine @2 :List(Int32) $Proxy.name(\"txout_is_mine\");\n+    txoutAddress @3 :List(TxDestination) $Proxy.name(\"txout_address\");\n+    txoutAddressIsMine @4 :List(Int32) $Proxy.name(\"txout_address_is_mine\");\n+    credit @5 :Int64;\n+    debit @6 :Int64;\n+    change @7 :Int64;\n+    time @8 :Int64;\n+    valueMap @9 :List(Common.Pair(Text, Text)) $Proxy.name(\"value_map\");\n+    isCoinbase @10 :Bool $Proxy.name(\"is_coinbase\");\n+}\n+\n+struct WalletTxOut $Proxy.wrap(\"interfaces::WalletTxOut\") {\n+    txout @0 :Data;\n+    time @1 :Int64;\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    isSpent @3 :Bool $Proxy.name(\"is_spent\");\n+}\n+\n+struct WalletTxStatus $Proxy.wrap(\"interfaces::WalletTxStatus\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blocksToMaturity @1 :Int32 $Proxy.name(\"blocks_to_maturity\");\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    timeReceived @3 :UInt32 $Proxy.name(\"time_received\");\n+    lockTime @4 :UInt32 $Proxy.name(\"lock_time\");\n+    isFinal @5 :Bool $Proxy.name(\"is_final\");\n+    isTrusted @6 :Bool $Proxy.name(\"is_trusted\");\n+    isAbandoned @7 :Bool $Proxy.name(\"is_abandoned\");\n+    isCoinbase @8 :Bool $Proxy.name(\"is_coinbase\");\n+    isInMainChain @9 :Bool $Proxy.name(\"is_in_main_chain\");\n+}\n+\n+struct WalletBalances $Proxy.wrap(\"interfaces::WalletBalances\") {\n+    balance @0 :Int64;\n+    unconfirmedBalance @1 :Int64 $Proxy.name(\"unconfirmed_balance\");\n+    immatureBalance @2 :Int64 $Proxy.name(\"immature_balance\");\n+    haveWatchOnly @3 :Bool $Proxy.name(\"have_watch_only\");\n+    watchOnlyBalance @4 :Int64 $Proxy.name(\"watch_only_balance\");\n+    unconfirmedWatchOnlyBalance @5 :Int64 $Proxy.name(\"unconfirmed_watch_only_balance\");\n+    immatureWatchOnlyBalance @6 :Int64 $Proxy.name(\"immature_watch_only_balance\");\n+}"
      },
      {
        "sha": "941cc4c06267a16f4c5450757e13313367215c48",
        "filename": "src/ipc/capnp/wallet.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/list.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/wallet-types.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <ipc/capnp/wallet.h>\n+#include <key.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/proxy.h>\n+#include <mp/util.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <scheduler.h>\n+#include <script/standard.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util/threadnames.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n+\n+#include <cstdint>\n+#include <future>\n+#include <memory>\n+#include <optional>\n+#include <string.h>\n+#include <system_error>\n+#include <variant>\n+#include <vector>\n+\n+namespace mp {\n+void ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>::invokeDestroy()\n+{\n+    if (m_scheduler) {\n+        m_scheduler->stop();\n+        m_result.get();\n+        m_scheduler.reset();\n+    }\n+    ProxyServerBase::invokeDestroy();\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(WalletContext& context)\n+{\n+    if (!context.proxy_server.m_scheduler) {\n+        context.proxy_server.m_scheduler = std::make_unique<CScheduler>();\n+        CScheduler* scheduler = context.proxy_server.m_scheduler.get();\n+        context.proxy_server.m_result = std::async([scheduler]() {\n+            util::ThreadRename(\"schedqueue\");\n+            scheduler->serviceQueue();\n+        });\n+    }\n+    context.proxy_server.m_impl->start(*context.proxy_server.m_scheduler);\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder)\n+{\n+    if (const PKHash* pkHash = std::get_if<PKHash>(&dest)) {\n+        builder.setPkHash(ipc::capnp::ToArray(*pkHash));\n+    } else if (const ScriptHash* scriptHash = std::get_if<ScriptHash>(&dest)) {\n+        builder.setScriptHash(ipc::capnp::ToArray(*scriptHash));\n+    } else if (const WitnessV0ScriptHash* witnessV0ScriptHash = std::get_if<WitnessV0ScriptHash>(&dest)) {\n+        builder.setWitnessV0ScriptHash(ipc::capnp::ToArray(*witnessV0ScriptHash));\n+    } else if (const WitnessV0KeyHash* witnessV0KeyHash = std::get_if<WitnessV0KeyHash>(&dest)) {\n+        builder.setWitnessV0KeyHash(ipc::capnp::ToArray(*witnessV0KeyHash));\n+    } else if (const WitnessUnknown* witnessUnknown = std::get_if<WitnessUnknown>(&dest)) {\n+        BuildField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(builder.initWitnessUnknown()),\n+                   *witnessUnknown);\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest)\n+{\n+    if (reader.hasPkHash()) {\n+        dest = PKHash(ipc::capnp::ToBlob<uint160>(reader.getPkHash()));\n+    } else if (reader.hasScriptHash()) {\n+        dest = ScriptHash(ipc::capnp::ToBlob<uint160>(reader.getScriptHash()));\n+    } else if (reader.hasWitnessV0ScriptHash()) {\n+        dest = WitnessV0ScriptHash(ipc::capnp::ToBlob<uint256>(reader.getWitnessV0ScriptHash()));\n+    } else if (reader.hasWitnessV0KeyHash()) {\n+        dest = WitnessV0KeyHash(ipc::capnp::ToBlob<uint160>(reader.getWitnessV0KeyHash()));\n+    } else if (reader.hasWitnessUnknown()) {\n+        ReadField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(reader.getWitnessUnknown()),\n+                  ReadDestValue(std::get<WitnessUnknown>(dest)));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder)\n+{\n+    builder.setSecret(ipc::capnp::FromBlob(key));\n+    builder.setIsCompressed(key.IsCompressed());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key)\n+{\n+    auto secret = reader.getSecret();\n+    key.Set(secret.begin(), secret.end(), reader.getIsCompressed());\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder)\n+{\n+    CustomBuildMessage(invoke_context, coin_control.destChange, builder.initDestChange());\n+    if (coin_control.m_change_type) {\n+        builder.setHasChangeType(true);\n+        builder.setChangeType(static_cast<int>(*coin_control.m_change_type));\n+    }\n+    builder.setAllowOtherInputs(coin_control.fAllowOtherInputs);\n+    builder.setAllowWatchOnly(coin_control.fAllowWatchOnly);\n+    builder.setOverrideFeeRate(coin_control.fOverrideFeeRate);\n+    if (coin_control.m_feerate) {\n+        builder.setFeeRate(ipc::capnp::ToArray(ipc::capnp::Serialize(*coin_control.m_feerate)));\n+    }\n+    if (coin_control.m_confirm_target) {\n+        builder.setHasConfirmTarget(true);\n+        builder.setConfirmTarget(*coin_control.m_confirm_target);\n+    }\n+    if (coin_control.m_signal_bip125_rbf) {\n+        builder.setHasSignalRbf(true);\n+        builder.setSignalRbf(*coin_control.m_signal_bip125_rbf);\n+    }\n+    builder.setFeeMode(int32_t(coin_control.m_fee_mode));\n+    builder.setMinDepth(coin_control.m_min_depth);\n+    std::vector<COutPoint> selected;\n+    coin_control.ListSelected(selected);\n+    auto builder_selected = builder.initSetSelected(selected.size());\n+    size_t i = 0;\n+    for (const COutPoint& output : selected) {\n+        builder_selected.set(i, ipc::capnp::ToArray(ipc::capnp::Serialize(output)));\n+        ++i;\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control)\n+{\n+    CustomReadMessage(invoke_context, reader.getDestChange(), coin_control.destChange);\n+    if (reader.getHasChangeType()) {\n+        coin_control.m_change_type = OutputType(reader.getChangeType());\n+    }\n+    coin_control.fAllowOtherInputs = reader.getAllowOtherInputs();\n+    coin_control.fAllowWatchOnly = reader.getAllowWatchOnly();\n+    coin_control.fOverrideFeeRate = reader.getOverrideFeeRate();\n+    if (reader.hasFeeRate()) {\n+        coin_control.m_feerate = ipc::capnp::Unserialize<CFeeRate>(reader.getFeeRate());\n+    }\n+    if (reader.getHasConfirmTarget()) {\n+        coin_control.m_confirm_target = reader.getConfirmTarget();\n+    }\n+    if (reader.getHasSignalRbf()) {\n+        coin_control.m_signal_bip125_rbf = reader.getSignalRbf();\n+    }\n+    coin_control.m_fee_mode = FeeEstimateMode(reader.getFeeMode());\n+    coin_control.m_min_depth = reader.getMinDepth();\n+    for (const auto output : reader.getSetSelected()) {\n+        coin_control.Select(ipc::capnp::Unserialize<COutPoint>(output));\n+    }\n+}\n+} // namespace mp"
      },
      {
        "sha": "6c161933cd480746e3f30d1b4e1a9a6098a48f4f",
        "filename": "src/ipc/capnp/wallet.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/capnp/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_H\n+#define BITCOIN_IPC_CAPNP_WALLET_H\n+\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <mp/proxy.h>\n+\n+#include <future>\n+#include <memory>\n+\n+class CScheduler;\n+namespace interfaces {\n+class WalletClient;\n+} // namespace interfaces\n+namespace ipc {\n+namespace capnp {\n+namespace messages {\n+struct WalletClient;\n+} // namespace messages\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Specialization of WalletClient proxy server needed hold a CSCheduler instance.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    void invokeDestroy();\n+\n+    std::unique_ptr<CScheduler> m_scheduler;\n+    std::future<void> m_result;\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_H"
      },
      {
        "sha": "b382c25e737784fcc23cc636b7b4993cd0f423d1",
        "filename": "src/ipc/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/context.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_CONTEXT_H\n #define BITCOIN_IPC_CONTEXT_H\n \n+#include <functional>\n+\n namespace ipc {\n //! Context struct used to give IPC protocol implementations or implementation\n //! hooks access to application state, in case they need to run extra code that\n@@ -13,6 +15,9 @@ namespace ipc {\n //! with shared objects that are created or destroyed remotely.\n struct Context\n {\n+    //! Callback to initialize spawned process after receiving ArgsManager\n+    //! configuration from parent.\n+    std::function<void()> init_process;\n };\n } // namespace ipc\n "
      },
      {
        "sha": "16135b21ad671b8e688c1fffb5baa187125f17d4",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -28,8 +28,8 @@ namespace {\n class IpcImpl : public interfaces::Ipc\n {\n public:\n-    IpcImpl(const char* exe_name, const char* process_argv0, interfaces::Init& init)\n-        : m_exe_name(exe_name), m_process_argv0(process_argv0), m_init(init),\n+    IpcImpl(const char* exe_name, const char* log_suffix, const char* process_argv0, interfaces::Init& init)\n+        : m_exe_name(exe_name), m_log_suffix(log_suffix), m_process_argv0(process_argv0), m_init(init),\n           m_protocol(ipc::capnp::MakeCapnpProtocol()), m_process(ipc::MakeProcess())\n     {\n     }\n@@ -61,7 +61,9 @@ class IpcImpl : public interfaces::Ipc\n         m_protocol->addCleanup(type, iface, std::move(cleanup));\n     }\n     Context& context() override { return m_protocol->context(); }\n+    const char* logSuffix() override { return m_log_suffix; }\n     const char* m_exe_name;\n+    const char* m_log_suffix;\n     const char* m_process_argv0;\n     interfaces::Init& m_init;\n     std::unique_ptr<Protocol> m_protocol;\n@@ -71,8 +73,8 @@ class IpcImpl : public interfaces::Ipc\n } // namespace ipc\n \n namespace interfaces {\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init)\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init)\n {\n-    return std::make_unique<ipc::IpcImpl>(exe_name, process_argv0, init);\n+    return std::make_unique<ipc::IpcImpl>(exe_name, log_suffix, process_argv0, init);\n }\n } // namespace interfaces"
      },
      {
        "sha": "563198f13e49a113de6746ebb8d2dc63258fa49c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -272,6 +272,9 @@ class CNodeStats\n     Network m_network;\n     uint32_t m_mapped_as;\n     ConnectionType m_conn_type;\n+    // Note: If you add fields to this class, you should also consider updating\n+    // the CNode::copyStats() method, the getpeerinfo RPC (in rpc/net.cpp), and\n+    // the IPC serialization (in ipc/capnp/node.capnp).\n };\n \n "
      },
      {
        "sha": "62742aa691cc91158b2b9fffef46064047431419",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -32,6 +32,9 @@ struct CNodeStateStats {\n     uint64_t m_addr_processed = 0;\n     uint64_t m_addr_rate_limited = 0;\n     bool m_addr_relay_enabled{false};\n+    // Note: If you add fields to this struct, you should also consider updating\n+    // the getpeerinfo RPC (in rpc/net.cpp), and the IPC serialization code (in\n+    // ipc/capnp/node.cpp and ipc/capnp/node.capnp).\n };\n \n class PeerManager : public CValidationInterface, public NetEventsInterface"
      },
      {
        "sha": "f13edd96967c6bfd4498714573a05e507e0caa47",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -55,6 +55,8 @@ class proxyType\n \n     CService proxy;\n     bool randomize_credentials;\n+    // Note: If you add fields to this class, you should also update the IPC\n+    // serialization code (in ipc/capnp/node.capnp).\n };\n \n /** Credentials for proxy authentication */"
      },
      {
        "sha": "e161b006c5f0a297d48c6a279a10218f532a1664",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 4,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -11,6 +11,8 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n #include <mapport.h>\n@@ -67,13 +69,28 @@ using interfaces::WalletClient;\n \n namespace node {\n namespace {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+class ExternalSignerImpl : public interfaces::ExternalSigner\n+{\n+public:\n+    ExternalSignerImpl(::ExternalSigner signer) : m_signer(std::move(signer)) {}\n+    std::string getName() override { return m_signer.m_name; }\n+private:\n+    ::ExternalSigner m_signer;\n+};\n+#endif\n+\n class NodeImpl : public Node\n {\n private:\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n     explicit NodeImpl(NodeContext& context) { setContext(&context); }\n-    void initLogging() override { InitLogging(*Assert(m_context->args)); }\n+    void initLogging() override\n+    {\n+        interfaces::Ipc* ipc = m_context->init->ipc();\n+        InitLogging(*Assert(m_context->args), ipc ? ipc->logSuffix() : nullptr);\n+    }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n@@ -172,14 +189,18 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    std::vector<ExternalSigner> externalSigners() override\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> listExternalSigners() override\n     {\n #ifdef ENABLE_EXTERNAL_SIGNER\n         std::vector<ExternalSigner> signers = {};\n         const std::string command = gArgs.GetArg(\"-signer\", \"\");\n-        if (command == \"\") return signers;\n+        if (command == \"\") return {};\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n-        return signers;\n+        std::vector<std::unique_ptr<interfaces::ExternalSigner>> result;\n+        for (auto& signer : signers) {\n+            result.emplace_back(std::make_unique<ExternalSignerImpl>(std::move(signer)));\n+        }\n+        return result;\n #else\n         // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet\n@@ -281,6 +302,10 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n+    std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.InitWallet_connect(fn));\n+    }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));"
      },
      {
        "sha": "29fa16d8be26dd55817c4ddadd9849a1b07b8a13",
        "filename": "src/node/ui_interface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/node/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/node/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -15,6 +15,7 @@ struct UISignals {\n     boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::optional_last_value<bool>> ThreadSafeMessageBox;\n     boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::optional_last_value<bool>> ThreadSafeQuestion;\n     boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n+    boost::signals2::signal<CClientUIInterface::InitWalletSig> InitWallet;\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n@@ -34,6 +35,7 @@ static UISignals g_ui_signals;\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n+ADD_SIGNALS_IMPL_WRAPPER(InitWallet);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n@@ -45,6 +47,7 @@ ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n bool CClientUIInterface::ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style).value_or(false);}\n bool CClientUIInterface::ThreadSafeQuestion(const bilingual_str& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style).value_or(false);}\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n+void CClientUIInterface::InitWallet() { return g_ui_signals.InitWallet(); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }"
      },
      {
        "sha": "f969bcde2179c24022015f242ec3c539af923851",
        "filename": "src/node/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/node/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/node/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -82,6 +82,9 @@ class CClientUIInterface\n     /** Progress message during initialization. */\n     ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);\n \n+    /** Wallet client created. */\n+    ADD_SIGNALS_DECL_WRAPPER(InitWallet, void, );\n+\n     /** Number of network connections changed. */\n     ADD_SIGNALS_DECL_WRAPPER(NotifyNumConnectionsChanged, void, int newNumConnections);\n "
      },
      {
        "sha": "f865f00aa7c8eeea6dbb2810ed9e024a357c4dea",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -10,8 +10,10 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <init/common.h>\n #include <interfaces/handler.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -273,7 +275,6 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n-    connect(this, &BitcoinApplication::requestedInitialize, m_splash, &SplashScreen::handleLoadWallet);\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }\n@@ -282,6 +283,18 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n     m_node = init.makeNode();\n+    if (!m_node) {\n+        // If node is not part of current process, need to initialize logging.\n+        if (!init::StartLogging(gArgs)) {\n+            throw std::runtime_error(\"StartLogging failed\");\n+        }\n+\n+        // If node is not part of current process, spawn new bitcoin-node\n+        // process.\n+        auto node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        m_node = node_init->makeNode();\n+        init.ipc()->addCleanup(*m_node, [node_init = node_init.release()] { delete node_init; });\n+    }\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }\n@@ -304,13 +317,14 @@ void BitcoinApplication::startThread()\n     connect(this, &BitcoinApplication::requestedShutdown, &m_executor.value(), &InitExecutor::shutdown);\n }\n \n-void BitcoinApplication::parameterSetup()\n+void BitcoinApplication::parameterSetup(interfaces::Init& init)\n {\n     // Default printtoconsole to false for the GUI. GUI programs should not\n     // print to the console unnecessarily.\n     gArgs.SoftSetBoolArg(\"-printtoconsole\", false);\n \n-    InitLogging(gArgs);\n+    interfaces::Ipc* ipc = init.ipc();\n+    InitLogging(gArgs, ipc ? ipc->logSuffix() : nullptr);\n     InitParameterInteraction(gArgs);\n }\n \n@@ -611,7 +625,7 @@ int GuiMain(int argc, char* argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n     // Allow parameter interaction before we create the options model\n-    app.parameterSetup();\n+    app.parameterSetup(*init);\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));"
      },
      {
        "sha": "bcc61817a4e393077910d5e7274c5b65f8729158",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -45,7 +45,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// parameter interaction/setup based on rules\n-    void parameterSetup();\n+    void parameterSetup(interfaces::Init& init);\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Initialize prune setting"
      },
      {
        "sha": "eba70331f815910444c2866967143ccf05a01c65",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -6,7 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <external_signer.h>\n+#include <interfaces/node.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n \n@@ -113,7 +113,7 @@ CreateWalletDialog::~CreateWalletDialog()\n     delete ui;\n }\n \n-void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n+void CreateWalletDialog::setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers)\n {\n     m_has_signers = !signers.empty();\n     if (m_has_signers) {\n@@ -126,7 +126,7 @@ void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n         ui->blank_wallet_checkbox->setChecked(false);\n         ui->disable_privkeys_checkbox->setEnabled(false);\n         ui->disable_privkeys_checkbox->setChecked(true);\n-        const std::string label = signers[0].m_name;\n+        const std::string label = signers[0]->getName();\n         ui->wallet_name_line_edit->setText(QString::fromStdString(label));\n         ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n     } else {"
      },
      {
        "sha": "63a5e012d8ce6eda1a543909c51f17206cb13e94",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -7,7 +7,12 @@\n \n #include <QDialog>\n \n+#include <memory>\n+\n+namespace interfaces {\n class ExternalSigner;\n+} // namespace interfaces\n+\n class WalletModel;\n \n namespace Ui {\n@@ -24,7 +29,7 @@ class CreateWalletDialog : public QDialog\n     explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n-    void setSigners(const std::vector<ExternalSigner>& signers);\n+    void setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers);\n \n     QString walletName() const;\n     bool isEncryptWalletChecked() const;"
      },
      {
        "sha": "85703b3350e7ed12a50e2aa2b5d49980b73b6be9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -194,6 +194,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n     m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_init_wallet = m_node->handleInitWallet([this]() { handleLoadWallet(); });\n }\n \n void SplashScreen::handleLoadWallet()"
      },
      {
        "sha": "8a5875d2a6e2b10eab47a65bf909d1eef5a2fc6b",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -66,6 +66,7 @@ public Q_SLOTS:\n     bool m_shutdown = false;\n     std::unique_ptr<interfaces::Handler> m_handler_init_message;\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\n+    std::unique_ptr<interfaces::Handler> m_handler_init_wallet;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n     std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;\n     std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;"
      },
      {
        "sha": "81f6711b831591c5231517d08572d5cba9ca31b9",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -56,7 +56,7 @@ void TestRpcCommand(RPCConsole* console)\n } // namespace\n \n //! Entry point for BitcoinApplication tests.\n-void AppTests::appTests()\n+void AppTests::appTests(interfaces::Init& init)\n {\n #ifdef Q_OS_MAC\n     if (QApplication::platformName() == \"minimal\") {\n@@ -76,7 +76,7 @@ void AppTests::appTests()\n     }());\n \n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n-    m_app.parameterSetup();\n+    m_app.parameterSetup(init);\n     m_app.createOptionsModel(true /* reset settings */);\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();"
      },
      {
        "sha": "deab018ccbd9e6beb2d012fa135ff4fdd58838ee",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -14,14 +14,18 @@ class BitcoinApplication;\n class BitcoinGUI;\n class RPCConsole;\n \n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n+\n class AppTests : public QObject\n {\n     Q_OBJECT\n public:\n     explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n \n private Q_SLOTS:\n-    void appTests();\n+    void appTests(interfaces::Init& init);\n     void guiTests(BitcoinGUI* window);\n     void consoleTests(RPCConsole* console);\n "
      },
      {
        "sha": "b9a9fcf3d18572fd70893343d4368b91c7aa3e9d",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -280,9 +280,9 @@ void CreateWalletActivity::create()\n {\n     m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n \n-    std::vector<ExternalSigner> signers;\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> signers;\n     try {\n-        signers = node().externalSigners();\n+        signers = node().listExternalSigners();\n     } catch (const std::runtime_error& e) {\n         QMessageBox::critical(nullptr, tr(\"Can't list signers\"), e.what());\n     }"
      },
      {
        "sha": "8d7b7f992cdc2aa9bb8f30ea270b906bf5564d44",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -104,7 +104,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SelectParams(chainName);\n     SeedInsecureRand();\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n-    InitLogging(*m_node.args);\n+    InitLogging(*m_node.args, /* log_suffix= */ nullptr);\n     AppInitParameterInteraction(*m_node.args);\n     LogInstance().StartLogging();\n     SHA256AutoDetect();"
      },
      {
        "sha": "450bb968f165f91980725768fa794f31ca11e9ae",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -60,6 +60,9 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet-types.cpp and\n+    // ipc/capnp/wallet.capnp).\n \n     CCoinControl();\n "
      },
      {
        "sha": "741b4ebebf9d4f5966c2973b948d66299fd50cd8",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -6,6 +6,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -131,6 +132,13 @@ void WalletInit::Construct(NodeContext& node) const\n         return;\n     }\n     auto wallet_client = node.init->makeWalletClient(*node.chain);\n+    if (!wallet_client) {\n+        // If the current process doesn't have wallet support linked in, spawn\n+        // a new wallet process.\n+        auto init = node.init->ipc()->spawnProcess(\"bitcoin-wallet\");\n+        wallet_client = init->makeWalletClient(*node.chain);\n+        node.init->ipc()->addCleanup(*wallet_client, [init = init.release()] { delete init; });\n+    }\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "edf71276c938d39a77ebba33133fbd15a9805f71",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -219,6 +219,8 @@ struct CRecipient\n     CScript scriptPubKey;\n     CAmount nAmount;\n     bool fSubtractFeeFromAmount;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet.capnp).\n };\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime"
      },
      {
        "sha": "2af54970406a93a3b8484e9fa487fb2586a6d53f",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -62,6 +62,10 @@ def main():\n         colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n         colors[\"node2\"] = \"\\033[0;31m\"  # RED\n         colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+        colors[\"wall0\"] = \"\\033[0;34;1m\"  # BLUE\n+        colors[\"wall1\"] = \"\\033[0;32;1m\"  # GREEN\n+        colors[\"wall2\"] = \"\\033[0;31;1m\"  # RED\n+        colors[\"wall3\"] = \"\\033[0;33;1m\"  # YELLOW\n         colors[\"reset\"] = \"\\033[0m\"  # Reset font color\n \n     log_events = read_logs(testdir)\n@@ -95,6 +99,10 @@ def read_logs(tmp_dir):\n             break\n         files.append((\"node%d\" % i, logfile))\n \n+        wallet_logfile = \"{}/node{}/regtest/debug.log.wallet\".format(tmp_dir, i)\n+        if os.path.isfile(wallet_logfile):\n+            files.append((\"wall%d\" % i, wallet_logfile))\n+\n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n "
      },
      {
        "sha": "b7e900def751f0d004d697e59df22d9876c84fe2",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -86,6 +86,7 @@ def set_test_params(self):\n             '-acceptnonstdtxn=1',  # This is a consensus block test, we don't care about tx policy\n             '-testactivationheight=bip34@2',\n         ]]\n+        self.rpc_timeout = 1920\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n@@ -1293,7 +1294,7 @@ def run_test(self):\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i)))\n-        self.send_blocks(blocks2, False, force_send=True)\n+        self.send_blocks(blocks2, False, force_send=True, timeout=1920)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1))\n@@ -1302,7 +1303,7 @@ def run_test(self):\n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1)\n-        self.send_blocks([block], False, force_send=True)\n+        self.send_blocks([block], False, force_send=True, timeout=1920)\n         block = self.next_block(chain1_tip + 2)\n         self.send_blocks([block], True, timeout=2440)\n \n@@ -1318,6 +1319,13 @@ def run_test(self):\n         b_cb34.solve()\n         self.send_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n \n+        # Flush the notification queue before shutting down, so the\n+        # FlushBackgroundCallbacks call made during shutdown won't exceed the\n+        # test framework's 60 second shutdown timeout on slow systems, due to\n+        # all the BlockConnected notifications generated during the test.\n+        self.log.info(\"Wait for BlockConnected notifications to be processed before shutdown\")\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n+\n     # Helper methods\n     ################\n "
      },
      {
        "sha": "e4c5ddc53ebcaa0afa63ae80f1d7a07f65418312",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -115,6 +115,7 @@ def test_args_log(self):\n                     'secret-torpassword',\n                 ]):\n             self.start_node(0, extra_args=[\n+                '-debugexclude=ipc',\n                 '-addnode=some.node',\n                 '-rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n                 '-rpcbind=127.1.1.1',"
      },
      {
        "sha": "4e8d1a499e4f829b662170e9e9757ba3b4734be2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -1212,6 +1212,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n         self.extra_args = [[\"-par=1\"], [\"-par=1\"]]\n+        self.rpc_timeout = 120\n         if self.options.previous_release:\n             self.wallet_names = [None, self.default_wallet_name]\n         else:"
      },
      {
        "sha": "b58b23e142525f33d6a79151114aa689ca2a853b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -381,11 +381,13 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\n \n     @contextlib.contextmanager\n-    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2, wallet=False):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n         time_end = time.time() + timeout * self.timeout_factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n+        if wallet and os.path.exists(debug_log + \".wallet\"):\n+            debug_log += \".wallet\"\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()"
      },
      {
        "sha": "181cf0aa254276541f57203aa7b0fe17a895536e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         assert result['ismine']\n \n         self.log.info('Check that wallet is flushed')\n-        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n+        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20, wallet=True):\n             self.nodes[0].getnewaddress()\n \n         # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded"
      },
      {
        "sha": "a03830c4c5288a9fb1fb4e2923c89f5d1e2f9a7b",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped'], wallet=True):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n         # tx4 should have 2 inputs and 2 outputs although one output would\n@@ -127,7 +127,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped'], wallet=True):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n         # tx5 should have 3 inputs (1.0, 1.0, 1.0) and 2 outputs\n@@ -141,7 +141,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n+        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped'], wallet=True):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n         # tx6 should have 5 inputs and 2 outputs"
      },
      {
        "sha": "ac42c32cee5e21da6f501464f02e14dd84414359",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -130,7 +130,7 @@ def wallet_file(name):\n         os.mkdir(wallet_dir('no_access'))\n         os.chmod(wallet_dir('no_access'), 0)\n         try:\n-            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning']):\n+            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning'], wallet=True):\n                 walletlist = self.nodes[0].listwalletdir()['wallets']\n         finally:\n             # Need to ensure access is restored for cleanup"
      },
      {
        "sha": "134609cc669a66d489babfa60754529ecb55b7be",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5a24ee305a1089454d237412e7432eac1152fed/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=f5a24ee305a1089454d237412e7432eac1152fed",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n         self.log.info(\"Bump time & check that transaction is rebroadcast\")\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n-        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions']):\n+        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions'], wallet=True):\n             node.setmocktime(now + 36 * 60 * 60)\n             # Tell scheduler to call MaybeResendWalletTxn now.\n             node.mockscheduler(1)"
      }
    ]
  },
  {
    "sha": "dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
    "node_id": "C_kwDOABII59oAKGRkNWJiZThjZGNmNzliOWVhMGUxMjYyZjA3ZDUwZjRkZTFlOTQ0MjQ",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-23T17:42:31Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "multiprocess: Add -ipcconnect and -ipcbind options\n\nAdd `-ipcbind` option to `bitcoin-node`, and an `-ipcconnect` option to\n`bitcoin-wallet` to allow running a node that listens on an IPC socket and\naccepts connections from wallet processes.\n\nExample usage:\n\n    src/bitcoin-node -regtest -debug -ipcbind=unix\n    src/bitcoin-wallet -regtest -ipcconnect=unix info\n\n`bitcoin-wallet` tool doesn't really do anything with its connection to the\nnode yet, but it could potentially run or serve RPCs that require being online.",
      "tree": {
        "sha": "3b1289185dde38021032c78c58618189cebdea59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b1289185dde38021032c78c58618189cebdea59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a24ee305a1089454d237412e7432eac1152fed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a24ee305a1089454d237412e7432eac1152fed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a24ee305a1089454d237412e7432eac1152fed"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 242,
      "deletions": 15
    },
    "files": [
      {
        "sha": "51c9f80184bba5190c8cd181e85b4d4782888813",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -9,6 +9,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <logging.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -20,7 +21,7 @@\n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n UrlDecodeFn* const URL_DECODE = urlDecode;\n \n-static void SetupWalletToolArgs(ArgsManager& argsman)\n+static void SetupWalletToolArgs(ArgsManager& argsman, bool can_connect_ipc)\n {\n     SetupHelpOptions(argsman);\n     SetupChainParamsBaseOptions(argsman);\n@@ -34,6 +35,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-legacy\", \"Create legacy wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    if (can_connect_ipc) {\n+        argsman.AddArg(\"-ipcconnect=<address>\", \"Connect to bitcoin-node process in the background to perform online operations. Valid <address> values are 'auto' to try connecting to default socket in <datadir>/sockets/node.sock, but proceed offline if it isn't available, 'unix' to connect to the default socket and fail if it isn't available, 'unix:<socket path>' to connect to a socket at a nonstandard path, and -noipcconnect to not connect. Default value: auto\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n+    }\n \n     argsman.AddCommand(\"info\", \"Get wallet info\");\n     argsman.AddCommand(\"create\", \"Create new wallet file\");\n@@ -44,7 +48,6 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])\n {\n-    SetupWalletToolArgs(args);\n     std::string error_message;\n     if (!args.ParseParameters(argc, argv, error_message)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message);\n@@ -95,6 +98,7 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n     RandomInit();\n     try {\n+        SetupWalletToolArgs(args, init->canConnectIpc());\n         if (!WalletAppInit(args, argc, argv)) return EXIT_FAILURE;\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"WalletAppInit()\");\n@@ -116,7 +120,18 @@ int main(int argc, char* argv[])\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(args, command->command)) {\n+\n+    std::unique_ptr<interfaces::Chain> chain;\n+    if (interfaces::Ipc* ipc = init->ipc()) {\n+        std::string address = args.GetArg(\"-ipcconnect\", \"auto\");\n+        if (auto init = ipc->connectAddress(address)) {\n+            tfm::format(std::cout, \"Connected to IPC address %s\\n\", address);\n+            chain = init->makeChain();\n+            ipc->addCleanup(*chain, [init = init.release()] { delete init; });\n+        }\n+    }\n+\n+    if (!WalletTool::ExecuteWalletToolFunc(args, chain.get(), command->command)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      },
      {
        "sha": "aa7ef57b66ae1bfb21a1a535adc0ccb869cdb437",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -115,7 +115,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n \n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     ArgsManager& args = *Assert(node.args);\n-    SetupServerArgs(args);\n+    SetupServerArgs(args, node.init->canListenIpc());\n     std::string error;\n     if (!args.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));"
      },
      {
        "sha": "f6772aa77797fdd3471c90e53ee5292555d1f750",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -27,6 +27,7 @@\n #include <init/common.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <mapport.h>\n #include <miner.h>\n@@ -349,7 +350,7 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-void SetupServerArgs(ArgsManager& argsman)\n+void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n {\n     SetupHelpOptions(argsman);\n     argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n@@ -554,6 +555,9 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    if (can_listen_ipc) {\n+        argsman.AddArg(\"-ipcbind=<address>\", \"Bind bitcoin-node process to tcp or unix socket address.\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n+    }\n \n #if HAVE_DECL_FORK\n     argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n@@ -1171,6 +1175,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     g_wallet_init_interface.Construct(node);\n     uiInterface.InitWallet();\n \n+    if (interfaces::Ipc* ipc = node.init->ipc()) {\n+        for (std::string address : gArgs.GetArgs(\"-ipcbind\")) {\n+            std::string error;\n+            if (!ipc->listenAddress(address, error)) {\n+                return InitError(strprintf(Untranslated(\"Unable to bind to IPC address '%s'. %s\"), address, error));\n+            }\n+            LogPrintf(\"Listening for IPC requests on address %s\\n\", address);\n+        }\n+    }\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "bab0b0c4dcb794e91ed9b6c55499fd332d9a6248",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -66,7 +66,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info\n /**\n  * Register all arguments with the ArgsManager\n  */\n-void SetupServerArgs(ArgsManager& argsman);\n+void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc=false);\n \n /** Returns licensing information (for -version) */\n std::string LicenseInfo();"
      },
      {
        "sha": "95b4283b3ea55dc7950cd219504aba113016aa6a",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -25,6 +25,7 @@ class BitcoinGuiInit : public interfaces::Init\n         ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canListenIpc() override { return true; }\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "c33a4befbed96ba085c013efbac0191a23e8e7bf",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -52,6 +52,7 @@ class BitcoinNodeInit : public interfaces::Init\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canListenIpc() override { return true; }\n     NodeContext& m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };"
      },
      {
        "sha": "20bf29627a4325e0fd4e491c4338dbf577563be4",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -65,6 +65,7 @@ class BitcoinWalletInit : public interfaces::Init\n         return MakeWalletClient(chain, gArgs);\n     }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canConnectIpc() override { return true; }\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "9ba8a3765eff8908a333231a7839b4557e10102c",
        "filename": "src/interfaces/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -14,4 +14,6 @@ std::unique_ptr<Chain> Init::makeChain() { return {}; }\n std::unique_ptr<WalletClient> Init::makeWalletClient(Chain& chain) { return {}; }\n std::unique_ptr<Echo> Init::makeEcho() { return {}; }\n Ipc* Init::ipc() { return nullptr; }\n+bool Init::canConnectIpc() { return false; }\n+bool Init::canListenIpc() { return false; }\n } // namespace interfaces"
      },
      {
        "sha": "8ee61a6bcfc64b1c26710f10f3ef1f729174b522",
        "filename": "src/interfaces/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -32,6 +32,8 @@ class Init\n     virtual std::unique_ptr<WalletClient> makeWalletClient(Chain& chain);\n     virtual std::unique_ptr<Echo> makeEcho();\n     virtual Ipc* ipc();\n+    virtual bool canConnectIpc();\n+    virtual bool canListenIpc();\n };\n \n //! Return implementation of Init interface for the node process. If the argv"
      },
      {
        "sha": "5a8e8820df1f250c904c131f60495b101e6b47ee",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -41,6 +41,11 @@ class Init;\n //!    to make other proxy objects calling other remote interfaces. It can also\n //!    destroy the initial interfaces::Init object to close the connection and\n //!    shut down the spawned process.\n+//!\n+//! When connecting to an existing process, the steps are similar to spawning a\n+//! new process, except a socket is created instead of a socketpair, and\n+//! destroying an Init interface doesn't end the process, since there can be\n+//! multiple connections.\n class Ipc\n {\n public:\n@@ -54,6 +59,17 @@ class Ipc\n     //! true. If this is not a spawned child process, return false.\n     virtual bool startSpawnedProcess(int argc, char* argv[], int& exit_status) = 0;\n \n+    //! Connect to a socket address and make a client interface proxy object\n+    //! using provided callback. connectAddress returns true if a connection was\n+    //! established, returns false if a connection was refused but not required\n+    //! (\"auto\" address), and throws an exception if there was an unexpected\n+    //! error.\n+    virtual std::unique_ptr<Init> connectAddress(std::string& address) = 0;\n+\n+    //! Connect to a socket address and make a client interface proxy object\n+    //! using provided callback.\n+    virtual bool listenAddress(std::string& address, std::string& error) = 0;\n+\n     //! Add cleanup callback to remote interface that will run when the\n     //! interface is deleted.\n     template<typename Interface>"
      },
      {
        "sha": "ff78c059b7989752b13f7c9866ea3c46d479e379",
        "filename": "src/ipc/capnp/protocol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/capnp/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/capnp/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/protocol.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -23,6 +23,8 @@\n #include <mutex>\n #include <optional>\n #include <string>\n+#include <sys/socket.h>\n+#include <system_error>\n #include <thread>\n \n namespace ipc {\n@@ -51,6 +53,14 @@ class CapnpProtocol : public Protocol\n         startLoop(exe_name);\n         return mp::ConnectStream<messages::Init>(*m_loop, fd);\n     }\n+    void listen(int listen_fd, const char* exe_name, interfaces::Init& init) override\n+    {\n+        startLoop(exe_name);\n+        if (::listen(listen_fd, 5 /* backlog */) != 0) {\n+            throw std::system_error(errno, std::system_category());\n+        }\n+        mp::ListenConnections<messages::Init>(*m_loop, listen_fd, init);\n+    }\n     void serve(int fd, const char* exe_name, interfaces::Init& init) override\n     {\n         assert(!m_loop);"
      },
      {
        "sha": "03071d968b5926c5b75bb20a276a3b1c0ae47f64",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -56,6 +56,32 @@ class IpcImpl : public interfaces::Ipc\n         exit_status = EXIT_SUCCESS;\n         return true;\n     }\n+    std::unique_ptr<interfaces::Init> connectAddress(std::string& address) override\n+    {\n+        if (address.empty() || address == \"0\") return nullptr;\n+        int fd = -1;\n+        std::string error;\n+        if (address == \"auto\") {\n+            // failure to connect with \"auto\" isn't an error. Caller can spawn a child process or just work offline.\n+            address = \"unix\";\n+            fd = m_process->connect(gArgs.GetDataDirNet(), \"bitcoin-node\", address, error);\n+            if (fd < 0) return nullptr;\n+        } else {\n+            fd = m_process->connect(gArgs.GetDataDirNet(), \"bitcoin-node\", address, error);\n+        }\n+        if (fd < 0) {\n+            throw std::runtime_error(\n+                strprintf(\"Could not connect to bitcoin-node IPC address '%s'. %s\", address, error));\n+        }\n+        return m_protocol->connect(fd, m_exe_name);\n+    }\n+    bool listenAddress(std::string& address, std::string& error) override\n+    {\n+        int fd = m_process->bind(gArgs.GetDataDirNet(), m_exe_name, address, error);\n+        if (fd < 0) return false;\n+        m_protocol->listen(fd, m_exe_name, m_init);\n+        return true;\n+    }\n     void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) override\n     {\n         m_protocol->addCleanup(type, iface, std::move(cleanup));"
      },
      {
        "sha": "a53bc28bae00b4304205e8cbbf25be50241c88ba",
        "filename": "src/ipc/process.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/process.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/process.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -5,16 +5,20 @@\n #include <fs.h>\n #include <ipc/process.h>\n #include <ipc/protocol.h>\n+#include <logging.h>\n #include <mp/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n #include <cstdint>\n+#include <errno.h>\n #include <exception>\n #include <iostream>\n #include <stdexcept>\n #include <stdlib.h>\n #include <string.h>\n+#include <sys/socket.h>\n+#include <sys/un.h>\n #include <system_error>\n #include <unistd.h>\n #include <utility>\n@@ -54,7 +58,101 @@ class ProcessImpl : public Process\n         }\n         return true;\n     }\n+    int connect(const fs::path& data_dir,\n+                const std::string& dest_exe_name,\n+                std::string& address,\n+                std::string& error) override;\n+    int bind(const fs::path& data_dir, const std::string& exe_name, std::string& address, std::string& error) override;\n };\n+\n+bool ParseAddress(std::string& address,\n+                  const fs::path& data_dir,\n+                  const std::string& dest_exe_name,\n+                  struct sockaddr_un& addr,\n+                  std::string& error)\n+{\n+    if (address.compare(0, 4, \"unix\") == 0 && (address.size() == 4 || address[4] == ':')) {\n+        fs::path socket_dir = data_dir / \"sockets\";\n+        fs::path path;\n+        if (address.size() <= 5) {\n+            path = socket_dir / strprintf(\"%s.sock\", dest_exe_name);\n+        } else {\n+            path = fs::absolute(address.substr(5), socket_dir);\n+        }\n+        std::string path_str = fs::PathToString(path);\n+        if (path_str.size() >= sizeof(addr.sun_path)) {\n+            error = strprintf(\"Address '%s' path '%s' exceeded maximum socket path length\", address, fs::quoted(fs::PathToString(path)));\n+            return false;\n+        }\n+        memset(&addr, 0, sizeof(addr));\n+        addr.sun_family = AF_UNIX;\n+        strncpy(addr.sun_path, path_str.c_str(), sizeof(addr.sun_path)-1);\n+        address = strprintf(\"unix:%s\", path_str);\n+        return true;\n+    }\n+\n+    error = strprintf(\"Unrecognized address '%s'\", address);\n+    return false;\n+}\n+\n+int ProcessImpl::connect(const fs::path& data_dir,\n+                         const std::string& dest_exe_name,\n+                         std::string& address,\n+                         std::string& error)\n+{\n+    struct sockaddr_un addr;\n+    if (!ParseAddress(address, data_dir, dest_exe_name, addr, error)) {\n+        return -1;\n+    }\n+\n+    int fd;\n+    if ((fd = ::socket(addr.sun_family, SOCK_STREAM, 0)) == -1) {\n+        throw std::system_error(errno, std::system_category());\n+    }\n+    if (::connect(fd, (struct sockaddr*)&addr, sizeof(addr)) == 0) {\n+        return fd;\n+    }\n+    int connect_error = errno;\n+    if (::close(fd) != 0) {\n+        LogPrintf(\"Error closing file descriptor %i '%s': %s\\n\", fd, address, strerror(errno));\n+    }\n+    if (connect_error == ECONNREFUSED || connect_error == ENOENT) {\n+        error = strprintf(\"Error connecting to '%s': %s\\n\", address, strerror(connect_error));\n+        return -1;\n+    }\n+    LogPrintf(\"Error connecting to '%s': %s\\n\", address, strerror(connect_error));\n+    throw std::system_error(connect_error, std::system_category());\n+}\n+\n+int ProcessImpl::bind(const fs::path& data_dir, const std::string& exe_name, std::string& address, std::string& error)\n+{\n+    struct sockaddr_un addr;\n+    if (!ParseAddress(address, data_dir, exe_name, addr, error)) {\n+        return -1;\n+    }\n+\n+    if (addr.sun_family == AF_UNIX) {\n+        fs::path path = addr.sun_path;\n+        fs::create_directories(path.parent_path());\n+        if (fs::symlink_status(path).type() == fs::socket_file) {\n+            fs::remove(path);\n+        }\n+    }\n+\n+    int fd;\n+    if ((fd = ::socket(addr.sun_family, SOCK_STREAM, 0)) == -1) {\n+        throw std::system_error(errno, std::system_category());\n+    }\n+\n+    if (::bind(fd, (struct sockaddr*)&addr, sizeof(addr)) == 0) {\n+        return fd;\n+    }\n+    int bind_error = errno;\n+    if (::close(fd) != 0) {\n+        LogPrintf(\"Error closing file descriptor %i: %s\\n\", fd, strerror(errno));\n+    }\n+    throw std::system_error(bind_error, std::system_category());\n+}\n } // namespace\n \n std::unique_ptr<Process> MakeProcess() { return std::make_unique<ProcessImpl>(); }"
      },
      {
        "sha": "0d7403c358287c3069f50c1df7212b7f02d9f7a1",
        "filename": "src/ipc/process.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/process.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/process.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_PROCESS_H\n #define BITCOIN_IPC_PROCESS_H\n \n+#include <fs.h>\n+\n #include <memory>\n #include <string>\n \n@@ -32,6 +34,18 @@ class Process\n     //! process. If so, return true and a file descriptor for communicating\n     //! with the parent process.\n     virtual bool checkSpawned(int argc, char* argv[], int& fd) = 0;\n+\n+    //! Canonicalize and connect to address, returning socket descriptor.\n+    virtual int connect(const fs::path& data_dir,\n+                        const std::string& dest_exe_name,\n+                        std::string& address,\n+                        std::string& error) = 0;\n+\n+    //! Create listening socket, bind and canonicalize address, and return socket descriptor.\n+    virtual int bind(const fs::path& data_dir,\n+                     const std::string& exe_name,\n+                     std::string& address,\n+                     std::string& error) = 0;\n };\n \n //! Constructor for Process interface. Implementation will vary depending on"
      },
      {
        "sha": "1e355784ade26af010fbf966e57d57caceea92ee",
        "filename": "src/ipc/protocol.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/ipc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/protocol.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -25,11 +25,31 @@ class Protocol\n \n     //! Return Init interface that forwards requests over given socket descriptor.\n     //! Socket communication is handled on a background thread.\n+    //!\n+    //! @note It could be potentially useful in the future to add\n+    //! std::function<void()> on_disconnect callback argument here. But there\n+    //! isn't an immediate need, because the protocol implementation can clean\n+    //! up its own state (calling ProxyServer destructors, etc) on disconnect,\n+    //! and any client calls will just throw ipc::Exception errors after a\n+    //! disconnect.\n     virtual std::unique_ptr<interfaces::Init> connect(int fd, const char* exe_name) = 0;\n \n+    //! Listen for connections on provided socket descriptor, accept them, and\n+    //! handle requests on accepted connections. This method doesn't block, and\n+    //! performs I/O on a background thread.\n+    virtual void listen(int listen_fd, const char* exe_name, interfaces::Init& init) = 0;\n+\n     //! Handle requests on provided socket descriptor, forwarding them to the\n     //! provided Init interface. Socket communication is handled on the\n     //! current thread, and this call blocks until the socket is closed.\n+    //!\n+    //! @note: If this method is called, it needs be called before connect() or\n+    //! listen() methods, because for ease of implementation it's inflexible and\n+    //! always runs the event loop in the foreground thread. It can share its\n+    //! event loop with the other methods but can't share an event loop that was\n+    //! created by them. This isn't really a problem because serve() is only\n+    //! called by spawned child processes that call it immediately to\n+    //! communicate back with parent processes.\n     virtual void serve(int fd, const char* exe_name, interfaces::Init& init) = 0;\n \n     //! Add cleanup callback to interface that will run when the interface is"
      },
      {
        "sha": "3380b351673fdaf061c5291e5fe11e92a14a0d5b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -508,7 +508,7 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    SetupServerArgs(gArgs);\n+    SetupServerArgs(gArgs, init->canListenIpc());\n     SetupUIArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {"
      },
      {
        "sha": "3a2933673d33bd01462dcce3c1b4d486186334e0",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -692,6 +692,9 @@ std::string ArgsManager::GetHelpMessage() const\n             case OptionsCategory::RPC:\n                 usage += HelpMessageGroup(\"RPC server options:\");\n                 break;\n+            case OptionsCategory::IPC:\n+                usage += HelpMessageGroup(\"IPC interprocess connection options:\");\n+                break;\n             case OptionsCategory::WALLET:\n                 usage += HelpMessageGroup(\"Wallet options:\");\n                 break;"
      },
      {
        "sha": "f53bd679549a0f6a3478028bc4ed90fe0b833e3a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -144,6 +144,7 @@ enum class OptionsCategory {\n     GUI,\n     COMMANDS,\n     REGISTER_COMMANDS,\n+    IPC,\n \n     HIDDEN // Always the last option to avoid printing these in the help\n };"
      },
      {
        "sha": "99d983356f927edde807261c562e0ff308b52102",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -40,7 +40,7 @@ static void WalletCreate(CWallet* wallet_instance, uint64_t wallet_creation_flag\n     wallet_instance->TopUpKeyPool();\n }\n \n-static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n+static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options, interfaces::Chain* chain)\n {\n     DatabaseStatus status;\n     bilingual_str error;\n@@ -50,8 +50,7 @@ static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const\n         return nullptr;\n     }\n \n-    // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet};\n+    std::shared_ptr<CWallet> wallet_instance{new CWallet(chain, name, std::move(database)), WalletToolReleaseWallet};\n     DBErrors load_wallet_ret;\n     try {\n         load_wallet_ret = wallet_instance->LoadWallet();\n@@ -106,7 +105,7 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n+bool ExecuteWalletToolFunc(const ArgsManager& args, interfaces::Chain* chain, const std::string& command)\n {\n     if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n@@ -151,15 +150,15 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n             options.require_format = DatabaseFormat::SQLITE;\n         }\n \n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Close();\n@@ -184,7 +183,7 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n     } else if (command == \"dump\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (!wallet_instance) return false;\n         bilingual_str error;\n         bool ret = DumpWallet(*wallet_instance, error);"
      },
      {
        "sha": "3a4455a40102057c3876cd6b5742dc54f1669928",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "patch": "@@ -7,10 +7,14 @@\n \n #include <wallet/wallet.h>\n \n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n namespace WalletTool {\n \n void WalletShowInfo(CWallet* wallet_instance);\n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command);\n+bool ExecuteWalletToolFunc(const ArgsManager& args, interfaces::Chain* chain, const std::string& command);\n \n } // namespace WalletTool\n "
      }
    ]
  },
  {
    "sha": "faae1f4aa485d58c91186d284dccd687c52b9680",
    "node_id": "C_kwDOABII59oAKGZhYWUxZjRhYTQ4NWQ1OGM5MTE4NmQyODRkY2NkNjg3YzUyYjk2ODA",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/19460/head'",
      "tree": {
        "sha": "3b1289185dde38021032c78c58618189cebdea59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b1289185dde38021032c78c58618189cebdea59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faae1f4aa485d58c91186d284dccd687c52b9680",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faae1f4aa485d58c91186d284dccd687c52b9680",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faae1f4aa485d58c91186d284dccd687c52b9680",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faae1f4aa485d58c91186d284dccd687c52b9680/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5574881ce329f91cc5bbc2b9585860a45fde7c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5574881ce329f91cc5bbc2b9585860a45fde7c3c"
      },
      {
        "sha": "dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5bbe8cdcf79b9ea0e1262f07d50f4de1e94424"
      }
    ],
    "stats": {
      "total": 2652,
      "additions": 2552,
      "deletions": 100
    },
    "files": [
      {
        "sha": "9cee2ab6820387eeb05355e4957a5770a83e9df1",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -16,7 +16,7 @@\n # define functions and variables declared in corresponding .h files is\n # incorrect.\n HEADER_MODULE_PATHS = [\n-    'interfaces/'\n+    'ipc/'\n ]\n \n def module_name(path):"
      },
      {
        "sha": "e03c0a6f6790c6e6e6918115a298c57b3699a893",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -82,7 +82,7 @@ These dependencies represent the packages required to get a barebones installati\n To install, run the following from your terminal:\n \n ``` bash\n-brew install automake libtool boost pkg-config libevent\n+brew install automake libtool boost pkg-config libevent capnp\n ```\n \n ### 4. Clone Bitcoin repository"
      },
      {
        "sha": "7c8817e8bfb070565b4aef244729c0c6aa1cbf9d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -120,7 +120,7 @@ To build without GUI pass `--without-gui`.\n \n To build with Qt 5 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libcapnp-dev capnproto\n \n Additionally, to support Wayland protocol for modern desktop environments:\n "
      },
      {
        "sha": "8ea7422ad6cdf5b858628dfd60749a725dbfe2f8",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -7,6 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.71.0](https://www.boost.org/users/download/) | [1.64.0](https://github.com/bitcoin/bitcoin/pull/22320) | No |  |  |\n+| Cap'n Proto | [0.6.1](https://capnproto.org/install.html) | 0.5.3 | Yes |  |  |\n | Clang<sup>[ \\* ](#note1)</sup> |  | [7.0](https://releases.llvm.org/download.html) (C++17 & std::filesystem support) |  |  |  |\n | Expat | [2.2.7](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |"
      },
      {
        "sha": "6338d2ca5ce88b8619af825f7655758934ccfd6b",
        "filename": "doc/multiprocess.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -2,12 +2,10 @@\n \n On unix systems, the `--enable-multiprocess` build option can be passed to `./configure` to build new `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables alongside existing `bitcoind` and `bitcoin-qt` executables.\n \n-`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally (after [#10102](https://github.com/bitcoin/bitcoin/pull/10102)), `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This will let node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n+`bitcoin-node` is a drop-in replacement for `bitcoind`, and `bitcoin-gui` is a drop-in replacement for `bitcoin-qt`, and there are no differences in use or external behavior between the new and old executables. But internally `bitcoin-gui` will spawn a `bitcoin-node` process to run P2P and RPC code, communicating with it across a socket pair, and `bitcoin-node` will spawn `bitcoin-wallet` to run wallet code, also communicating over a socket pair. This lets node, wallet, and GUI code run in separate address spaces for better isolation, and allow future improvements like being able to start and stop components independently on different machines and environments.\n \n ## Next steps\n \n-Specific next steps after [#10102](https://github.com/bitcoin/bitcoin/pull/10102) will be:\n-\n - [ ] Adding `-ipcbind` and `-ipcconnect` options to `bitcoin-node`, `bitcoin-wallet`, and `bitcoin-gui` executables so they can listen and connect to TCP ports and unix socket paths. This will allow separate processes to be started and stopped any time and connect to each other.\n - [ ] Adding `-server` and `-rpcbind` options to the `bitcoin-wallet` executable so wallet processes can handle RPC requests directly without going through the node.\n - [ ] Supporting windows, not just unix systems. The existing socket code is already cross-platform, so the only windows-specific code that needs to be written is code spawning a process and passing a socket descriptor. This can be implemented with `CreateProcess` and `WSADuplicateSocket`. Example: https://memset.wordpress.com/2010/10/13/win32-api-passing-socket-with-ipc-method/.\n@@ -34,6 +32,12 @@ The configure script will pick up settings and library locations from the depend\n \n Alternately, you can install [Cap'n Proto](https://capnproto.org/) and [libmultiprocess](https://github.com/chaincodelabs/libmultiprocess) packages on your system, and just run `./configure --enable-multiprocess` without using the depends system. The configure script will be able to locate the installed packages via [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/). See [Installation](https://github.com/chaincodelabs/libmultiprocess#installation) section of the libmultiprocess readme for install steps. See [build-unix.md](build-unix.md) and [build-osx.md](build-osx.md) for information about installing dependencies in general.\n \n+## Known issues\n+\n+- Unexpected socket disconnects aren't handled cleanly many places. Interface calls that used to never throw can now throw exceptions if a socket is disconnected (typically because a process on the other side of the connection has crashed or been killed), leading to errors.\n+\n+- Internally spawned bitcoin-node and bitcoin-wallet processes don't currently install signal handlers and so won't shut down cleanly if terminated with [CTRL-C](https://github.com/bitcoin/bitcoin/pull/10102#issuecomment-595353238). Shutting down with `bitcoin-cli stop` should still shut down cleanly, and is a suggested alternative.\n+\n ## IPC implementation details\n \n Cross process Node, Wallet, and Chain interfaces are defined in"
      },
      {
        "sha": "c6754d833fc37d71f17a0a4a9f96db4f7b553782",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -305,7 +305,10 @@ obj/build.h: FORCE\n \t  \"$(abs_top_srcdir)\"\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n+# Explicitly list dependencies on generated headers as described\n+# https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n ipc/capnp/libbitcoin_ipc_a-ipc.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n+ipc/capnp/libbitcoin_ipc_a-chain.$(OBJEXT): $(libbitcoin_ipc_mpgen_input:=.h)\n \n # server: shared between bitcoind and bitcoin-qt\n # Contains code accessing mempool and chain state that is meant to be separated\n@@ -343,7 +346,6 @@ libbitcoin_server_a_SOURCES = \\\n   node/interfaces.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n-  node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n   policy/packages.cpp \\\n@@ -545,6 +547,7 @@ libbitcoin_common_a_SOURCES = \\\n   netaddress.cpp \\\n   netbase.cpp \\\n   net_permissions.cpp \\\n+  node/ui_interface.cpp \\\n   outputtype.cpp \\\n   policy/feerate.cpp \\\n   policy/policy.cpp \\\n@@ -659,7 +662,7 @@ bitcoin_node_SOURCES = $(bitcoin_daemon_sources) init/bitcoin-node.cpp\n bitcoin_node_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_node_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_node_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS)\n+bitcoin_node_LDADD = $(LIBBITCOIN_SERVER) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBMULTIPROCESS_LIBS) $(LIBBITCOIN_WALLET)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -703,11 +706,15 @@ bitcoin_tx_LDADD += $(BOOST_LIBS)\n \n # bitcoin-wallet binary #\n bitcoin_wallet_SOURCES = bitcoin-wallet.cpp\n+if BUILD_MULTIPROCESS\n+bitcoin_wallet_SOURCES += init/bitcoin-wallet-ipc.cpp\n+else\n bitcoin_wallet_SOURCES += init/bitcoin-wallet.cpp\n+endif\n bitcoin_wallet_CPPFLAGS = $(bitcoin_bin_cppflags)\n bitcoin_wallet_CXXFLAGS = $(bitcoin_bin_cxxflags)\n bitcoin_wallet_LDFLAGS = $(bitcoin_bin_ldflags)\n-bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd)\n+bitcoin_wallet_LDADD = $(LIBBITCOIN_WALLET_TOOL) $(bitcoin_bin_ldadd) $(LIBBITCOIN_IPC) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UTIL) $(LIBMULTIPROCESS_LIBS)\n \n if TARGET_WINDOWS\n bitcoin_wallet_SOURCES += bitcoin-wallet-res.rc\n@@ -808,18 +815,35 @@ if HARDEN\n endif\n \n libbitcoin_ipc_mpgen_input = \\\n+  ipc/capnp/chain.capnp \\\n+  ipc/capnp/common.capnp \\\n   ipc/capnp/echo.capnp \\\n-  ipc/capnp/init.capnp\n+  ipc/capnp/handler.capnp \\\n+  ipc/capnp/init.capnp \\\n+  ipc/capnp/node.capnp \\\n+  ipc/capnp/wallet.capnp\n EXTRA_DIST += $(libbitcoin_ipc_mpgen_input)\n %.capnp:\n \n if BUILD_MULTIPROCESS\n LIBBITCOIN_IPC=libbitcoin_ipc.a\n libbitcoin_ipc_a_SOURCES = \\\n+  ipc/capnp/chain-types.h \\\n+  ipc/capnp/chain.cpp \\\n+  ipc/capnp/common-types.h \\\n+  ipc/capnp/common.cpp \\\n+  ipc/capnp/common.h \\\n   ipc/capnp/context.h \\\n   ipc/capnp/init-types.h \\\n+  ipc/capnp/init.cpp \\\n+  ipc/capnp/node-types.h \\\n+  ipc/capnp/node.cpp \\\n+  ipc/capnp/node.h \\\n   ipc/capnp/protocol.cpp \\\n   ipc/capnp/protocol.h \\\n+  ipc/capnp/wallet-types.h \\\n+  ipc/capnp/wallet.cpp \\\n+  ipc/capnp/wallet.h \\\n   ipc/context.h \\\n   ipc/exception.h \\\n   ipc/interfaces.cpp \\"
      },
      {
        "sha": "51c9f80184bba5190c8cd181e85b4d4782888813",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -9,6 +9,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <logging.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -18,9 +19,9 @@\n #include <functional>\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-UrlDecodeFn* const URL_DECODE = nullptr;\n+UrlDecodeFn* const URL_DECODE = urlDecode;\n \n-static void SetupWalletToolArgs(ArgsManager& argsman)\n+static void SetupWalletToolArgs(ArgsManager& argsman, bool can_connect_ipc)\n {\n     SetupHelpOptions(argsman);\n     SetupChainParamsBaseOptions(argsman);\n@@ -34,6 +35,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-legacy\", \"Create legacy wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    if (can_connect_ipc) {\n+        argsman.AddArg(\"-ipcconnect=<address>\", \"Connect to bitcoin-node process in the background to perform online operations. Valid <address> values are 'auto' to try connecting to default socket in <datadir>/sockets/node.sock, but proceed offline if it isn't available, 'unix' to connect to the default socket and fail if it isn't available, 'unix:<socket path>' to connect to a socket at a nonstandard path, and -noipcconnect to not connect. Default value: auto\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n+    }\n \n     argsman.AddCommand(\"info\", \"Get wallet info\");\n     argsman.AddCommand(\"create\", \"Create new wallet file\");\n@@ -44,7 +48,6 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n static bool WalletAppInit(ArgsManager& args, int argc, char* argv[])\n {\n-    SetupWalletToolArgs(args);\n     std::string error_message;\n     if (!args.ParseParameters(argc, argv, error_message)) {\n         tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message);\n@@ -95,6 +98,7 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n     RandomInit();\n     try {\n+        SetupWalletToolArgs(args, init->canConnectIpc());\n         if (!WalletAppInit(args, argc, argv)) return EXIT_FAILURE;\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"WalletAppInit()\");\n@@ -116,7 +120,18 @@ int main(int argc, char* argv[])\n \n     ECCVerifyHandle globalVerifyHandle;\n     ECC_Start();\n-    if (!WalletTool::ExecuteWalletToolFunc(args, command->command)) {\n+\n+    std::unique_ptr<interfaces::Chain> chain;\n+    if (interfaces::Ipc* ipc = init->ipc()) {\n+        std::string address = args.GetArg(\"-ipcconnect\", \"auto\");\n+        if (auto init = ipc->connectAddress(address)) {\n+            tfm::format(std::cout, \"Connected to IPC address %s\\n\", address);\n+            chain = init->makeChain();\n+            ipc->addCleanup(*chain, [init = init.release()] { delete init; });\n+        }\n+    }\n+\n+    if (!WalletTool::ExecuteWalletToolFunc(args, chain.get(), command->command)) {\n         return EXIT_FAILURE;\n     }\n     ECC_Stop();"
      },
      {
        "sha": "aa7ef57b66ae1bfb21a1a535adc0ccb869cdb437",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -13,6 +13,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -114,7 +115,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n \n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     ArgsManager& args = *Assert(node.args);\n-    SetupServerArgs(args);\n+    SetupServerArgs(args, node.init->canListenIpc());\n     std::string error;\n     if (!args.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));\n@@ -174,7 +175,8 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n         // -server defaults to true for bitcoind but not for the GUI so do this here\n         args.SoftSetBoolArg(\"-server\", true);\n         // Set this early so that parameter interactions go to console\n-        InitLogging(args);\n+        interfaces::Ipc* ipc = node.init->ipc();\n+        InitLogging(args, ipc ? ipc->logSuffix() : nullptr);\n         InitParameterInteraction(args);\n         if (!AppInitBasicSetup(args)) {\n             // InitError will have been called with detailed error, which ends up on console"
      },
      {
        "sha": "f6772aa77797fdd3471c90e53ee5292555d1f750",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 8,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -27,6 +27,7 @@\n #include <init/common.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <mapport.h>\n #include <miner.h>\n@@ -349,7 +350,7 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-void SetupServerArgs(ArgsManager& argsman)\n+void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n {\n     SetupHelpOptions(argsman);\n     argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n@@ -554,6 +555,9 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    if (can_listen_ipc) {\n+        argsman.AddArg(\"-ipcbind=<address>\", \"Bind bitcoin-node process to tcp or unix socket address.\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n+    }\n \n #if HAVE_DECL_FORK\n     argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n@@ -711,9 +715,9 @@ void InitParameterInteraction(ArgsManager& args)\n  * Note that this is called very early in the process lifetime, so you should be\n  * careful about what global state you rely on here.\n  */\n-void InitLogging(const ArgsManager& args)\n+void InitLogging(const ArgsManager& args, const char* log_suffix)\n {\n-    init::SetLoggingOptions(args);\n+    init::SetLoggingOptions(args, log_suffix);\n     init::LogPackageVersion();\n }\n \n@@ -1101,11 +1105,6 @@ bool AppInitLockDataDirectory()\n bool AppInitInterfaces(NodeContext& node)\n {\n     node.chain = node.init->makeChain();\n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(node);\n     return true;\n }\n \n@@ -1169,6 +1168,23 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n+    // Create client interfaces for wallets that are supposed to be loaded\n+    // according to -wallet and -disablewallet options. This only constructs\n+    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n+    // when load() and start() interface methods are called below.\n+    g_wallet_init_interface.Construct(node);\n+    uiInterface.InitWallet();\n+\n+    if (interfaces::Ipc* ipc = node.init->ipc()) {\n+        for (std::string address : gArgs.GetArgs(\"-ipcbind\")) {\n+            std::string error;\n+            if (!ipc->listenAddress(address, error)) {\n+                return InitError(strprintf(Untranslated(\"Unable to bind to IPC address '%s'. %s\"), address, error));\n+            }\n+            LogPrintf(\"Listening for IPC requests on address %s\\n\", address);\n+        }\n+    }\n+\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */"
      },
      {
        "sha": "bab0b0c4dcb794e91ed9b6c55499fd332d9a6248",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -25,7 +25,7 @@ struct BlockAndHeaderTipInfo;\n void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n-void InitLogging(const ArgsManager& args);\n+void InitLogging(const ArgsManager& args, const char* log_suffix);\n //!Parameter interaction: change current parameters depending on various rules\n void InitParameterInteraction(ArgsManager& args);\n \n@@ -66,7 +66,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info\n /**\n  * Register all arguments with the ArgsManager\n  */\n-void SetupServerArgs(ArgsManager& argsman);\n+void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc=false);\n \n /** Returns licensing information (for -version) */\n std::string LicenseInfo();"
      },
      {
        "sha": "95b4283b3ea55dc7950cd219504aba113016aa6a",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 17,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -2,38 +2,30 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <interfaces/chain.h>\n-#include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n-#include <interfaces/node.h>\n-#include <interfaces/wallet.h>\n-#include <node/context.h>\n-#include <util/system.h>\n \n #include <memory>\n \n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context);\n+} // namespace capnp\n+} // namespace ipc\n+\n namespace init {\n namespace {\n const char* EXE_NAME = \"bitcoin-gui\";\n \n class BitcoinGuiInit : public interfaces::Init\n {\n public:\n-    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n-    {\n-        m_node.args = &gArgs;\n-        m_node.init = this;\n-    }\n-    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n-    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    BitcoinGuiInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".gui\", arg0, *this))\n     {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n+        ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n-    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n-    NodeContext m_node;\n+    bool canListenIpc() override { return true; }\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n } // namespace"
      },
      {
        "sha": "c33a4befbed96ba085c013efbac0191a23e8e7bf",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 9,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -2,16 +2,29 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n+#include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n+#include <ipc/context.h>\n #include <node/context.h>\n #include <util/system.h>\n \n+#include <functional>\n #include <memory>\n+#include <string>\n+#include <utility>\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeServer(ipc::Context& context);\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n \n namespace init {\n namespace {\n@@ -21,20 +34,25 @@ class BitcoinNodeInit : public interfaces::Init\n {\n public:\n     BitcoinNodeInit(NodeContext& node, const char* arg0)\n-        : m_node(node),\n-          m_ipc(interfaces::MakeIpc(EXE_NAME, arg0, *this))\n+        : m_node(node), m_ipc(interfaces::MakeIpc(EXE_NAME, \"\", arg0, *this))\n     {\n         m_node.args = &gArgs;\n         m_node.init = this;\n+        // Extra initialization code that runs when a bitcoin-node process is\n+        // spawned by a bitcoin-gui process, after the ArgsManager configuration\n+        // is transferred from the parent process to the child process.\n+        m_ipc->context().init_process = [this] {\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            InitLogging(*Assert(m_node.args), m_ipc->logSuffix());\n+            InitParameterInteraction(*Assert(m_node.args));\n+        };\n+        ipc::capnp::SetupNodeServer(m_ipc->context());\n     }\n     std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n     std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n-    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n-    {\n-        return MakeWalletClient(chain, *Assert(m_node.args));\n-    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canListenIpc() override { return true; }\n     NodeContext& m_node;\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };\n@@ -45,9 +63,9 @@ namespace interfaces {\n std::unique_ptr<Init> MakeNodeInit(NodeContext& node, int argc, char* argv[], int& exit_status)\n {\n     auto init = std::make_unique<init::BitcoinNodeInit>(node, argc > 0 ? argv[0] : \"\");\n-    // Check if bitcoin-node is being invoked as an IPC server. If so, then\n-    // bypass normal execution and just respond to requests over the IPC\n-    // channel and return null.\n+    // Check if bitcoin-node is being invoked as an IPC server by the gui. If\n+    // so, then bypass normal execution and just respond to requests over the\n+    // IPC channel and return null.\n     if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n         return nullptr;\n     }"
      },
      {
        "sha": "20bf29627a4325e0fd4e491c4338dbf577563be4",
        "filename": "src/init/bitcoin-wallet-ipc.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-wallet-ipc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/bitcoin-wallet-ipc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-wallet-ipc.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <fs.h>\n+#include <init/common.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/context.h>\n+#include <key.h>\n+#include <logging.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <util/system.h>\n+#include <util/translation.h>\n+\n+#include <algorithm>\n+#include <functional>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n+namespace ipc {\n+namespace capnp {\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace init {\n+namespace {\n+const char* EXE_NAME = \"bitcoin-wallet\";\n+\n+class BitcoinWalletInit : public interfaces::Init\n+{\n+public:\n+    BitcoinWalletInit(const char* arg0) : m_ipc(interfaces::MakeIpc(EXE_NAME, \".wallet\", arg0, *this))\n+    {\n+        // Extra initialization code that runs when a bitcoin-wallet process is\n+        // spawned by a bitcoin-node process, after the ArgsManager\n+        // configuration is transferred from the parent process to the child\n+        // process.\n+        m_ipc->context().init_process = [this] {\n+            init::SetGlobals();\n+            if (!init::SanityChecks()) {\n+                throw std::runtime_error(\"Initial sanity checks failure\");\n+            }\n+            SelectParams(ipc::capnp::GlobalArgsNetwork());\n+            init::SetLoggingOptions(gArgs, m_ipc->logSuffix());\n+            init::SetLoggingCategories(gArgs);\n+            if (!init::StartLogging(gArgs)) {\n+                throw std::runtime_error(\"Logging start failure\");\n+            }\n+        };\n+    }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, gArgs);\n+    }\n+    interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canConnectIpc() override { return true; }\n+    std::unique_ptr<interfaces::Ipc> m_ipc;\n+};\n+} // namespace\n+} // namespace init\n+\n+namespace interfaces {\n+std::unique_ptr<Init> MakeWalletInit(int argc, char* argv[], int& exit_status)\n+{\n+    auto init = std::make_unique<init::BitcoinWalletInit>(argc > 0 ? argv[0] : \"\");\n+    // Check if bitcoin-wallet is being invoked as an IPC server. If so, then\n+    // bypass normal execution and just respond to requests over the IPC\n+    // channel and finally return null.\n+    if (init->m_ipc->startSpawnedProcess(argc, argv, exit_status)) {\n+        return nullptr;\n+    }\n+    return init;\n+}\n+} // namespace interfaces"
      },
      {
        "sha": "04547e90672cb624f6cf2036d74ae928ab946a72",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -78,10 +78,11 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n }\n \n-void SetLoggingOptions(const ArgsManager& args)\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix)\n {\n     LogInstance().m_print_to_file = !args.IsArgNegated(\"-debuglogfile\");\n     LogInstance().m_file_path = AbsPathForConfigVal(fs::PathFromString(args.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n+    if (log_suffix && LogInstance().m_file_path != \"/dev/null\") LogInstance().m_file_path += log_suffix;\n     LogInstance().m_print_to_console = args.GetBoolArg(\"-printtoconsole\", !args.GetBoolArg(\"-daemon\", false));\n     LogInstance().m_log_timestamps = args.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n     LogInstance().m_log_time_micros = args.GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);"
      },
      {
        "sha": "a10b8330afa08b4be7d82a88863282c5a6dee55e",
        "filename": "src/init/common.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/init/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -19,7 +19,7 @@ void UnsetGlobals();\n  */\n bool SanityChecks();\n void AddLoggingArgs(ArgsManager& args);\n-void SetLoggingOptions(const ArgsManager& args);\n+void SetLoggingOptions(const ArgsManager& args, const char* log_suffix);\n void SetLoggingCategories(const ArgsManager& args);\n bool StartLogging(const ArgsManager& args);\n void LogPackageVersion();"
      },
      {
        "sha": "5fdfb0a63c8c9af096735f4aa170fa027c405436",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -308,7 +308,8 @@ class ChainClient\n     //! Load saved state.\n     virtual bool load() = 0;\n \n-    //! Start client execution and provide a scheduler.\n+    //! Start client execution and provide a scheduler. (Scheduler is\n+    //! ignored if client is out-of-process).\n     virtual void start(CScheduler& scheduler) = 0;\n \n     //! Save state to disk."
      },
      {
        "sha": "9ba8a3765eff8908a333231a7839b4557e10102c",
        "filename": "src/interfaces/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -14,4 +14,6 @@ std::unique_ptr<Chain> Init::makeChain() { return {}; }\n std::unique_ptr<WalletClient> Init::makeWalletClient(Chain& chain) { return {}; }\n std::unique_ptr<Echo> Init::makeEcho() { return {}; }\n Ipc* Init::ipc() { return nullptr; }\n+bool Init::canConnectIpc() { return false; }\n+bool Init::canListenIpc() { return false; }\n } // namespace interfaces"
      },
      {
        "sha": "8ee61a6bcfc64b1c26710f10f3ef1f729174b522",
        "filename": "src/interfaces/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/init.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -32,6 +32,8 @@ class Init\n     virtual std::unique_ptr<WalletClient> makeWalletClient(Chain& chain);\n     virtual std::unique_ptr<Echo> makeEcho();\n     virtual Ipc* ipc();\n+    virtual bool canConnectIpc();\n+    virtual bool canListenIpc();\n };\n \n //! Return implementation of Init interface for the node process. If the argv"
      },
      {
        "sha": "5a8e8820df1f250c904c131f60495b101e6b47ee",
        "filename": "src/interfaces/ipc.h",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/ipc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/ipc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/ipc.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -41,6 +41,11 @@ class Init;\n //!    to make other proxy objects calling other remote interfaces. It can also\n //!    destroy the initial interfaces::Init object to close the connection and\n //!    shut down the spawned process.\n+//!\n+//! When connecting to an existing process, the steps are similar to spawning a\n+//! new process, except a socket is created instead of a socketpair, and\n+//! destroying an Init interface doesn't end the process, since there can be\n+//! multiple connections.\n class Ipc\n {\n public:\n@@ -54,6 +59,17 @@ class Ipc\n     //! true. If this is not a spawned child process, return false.\n     virtual bool startSpawnedProcess(int argc, char* argv[], int& exit_status) = 0;\n \n+    //! Connect to a socket address and make a client interface proxy object\n+    //! using provided callback. connectAddress returns true if a connection was\n+    //! established, returns false if a connection was refused but not required\n+    //! (\"auto\" address), and throws an exception if there was an unexpected\n+    //! error.\n+    virtual std::unique_ptr<Init> connectAddress(std::string& address) = 0;\n+\n+    //! Connect to a socket address and make a client interface proxy object\n+    //! using provided callback.\n+    virtual bool listenAddress(std::string& address, std::string& error) = 0;\n+\n     //! Add cleanup callback to remote interface that will run when the\n     //! interface is deleted.\n     template<typename Interface>\n@@ -65,14 +81,17 @@ class Ipc\n     //! IPC context struct accessor (see struct definition for more description).\n     virtual ipc::Context& context() = 0;\n \n+    //! Suffix for debug.log to avoid output clashes from different processes.\n+    virtual const char* logSuffix() = 0;\n+\n protected:\n     //! Internal implementation of public addCleanup method (above) as a\n     //! type-erased virtual function, since template functions can't be virtual.\n     virtual void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) = 0;\n };\n \n //! Return implementation of Ipc interface.\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init);\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init);\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_IPC_H"
      },
      {
        "sha": "ea1cb5ed723b73d07ae5ae54a504f7552aa7e51b",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -6,7 +6,6 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <consensus/amount.h>\n-#include <external_signer.h>\n #include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n@@ -50,6 +49,16 @@ struct BlockAndHeaderTipInfo\n     double verification_progress;\n };\n \n+//! External signer interface used by the GUI.\n+class ExternalSigner\n+{\n+public:\n+    virtual ~ExternalSigner() {};\n+\n+    //! Get signer display name\n+    virtual std::string getName() = 0;\n+};\n+\n //! Top-level interface for a bitcoin node (bitcoind process).\n class Node\n {\n@@ -111,8 +120,8 @@ class Node\n     //! Disconnect node by id.\n     virtual bool disconnectById(NodeId id) = 0;\n \n-    //! List external signers\n-    virtual std::vector<ExternalSigner> externalSigners() = 0;\n+    //! Return list of external signers (attached devices which can sign transactions).\n+    virtual std::vector<std::unique_ptr<ExternalSigner>> listExternalSigners() = 0;\n \n     //! Get total bytes recv.\n     virtual int64_t getTotalBytesRecv() = 0;\n@@ -197,6 +206,10 @@ class Node\n     using ShowProgressFn = std::function<void(const std::string& title, int progress, bool resume_possible)>;\n     virtual std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) = 0;\n \n+    //! Register handler for wallet client constructed messages.\n+    using InitWalletFn = std::function<void()>;\n+    virtual std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) = 0;\n+\n     //! Register handler for number of connections changed messages.\n     using NotifyNumConnectionsChangedFn = std::function<void(int new_num_connections)>;\n     virtual std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) = 0;"
      },
      {
        "sha": "4414763e3f1e8a96a8f7316e6ce7cff1d69ec4ee",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -345,6 +345,8 @@ struct WalletAddress\n     std::string name;\n     std::string purpose;\n \n+    WalletAddress() = default;\n+\n     WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n         : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n     {"
      },
      {
        "sha": "75a467230b7c02efe18392a450fef2b89ae0240f",
        "filename": "src/ipc/capnp/chain-types.h",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain-types.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+#define BITCOIN_IPC_CAPNP_CHAIN_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/handler.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <rpc/server.h>\n+\n+#include <any>\n+\n+//! Specialization of handleRpc needed because it takes a CRPCCommand& reference\n+//! argument, so a manual cleanup callback is needed to free the passed\n+//! CRPCCommand struct and proxy ActorCallback object.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Chain,\n+                                  ipc::capnp::messages::Chain::HandleRpcParams,\n+                                  ipc::capnp::messages::Chain::HandleRpcResults>;\n+    static ::capnp::Void invoke(Context& context);\n+};\n+\n+//! Specialization of start method needed to provide CScheduler& reference\n+//! argument.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>\n+{\n+    using ChainContext = ServerContext<ipc::capnp::messages::ChainClient,\n+                                       ipc::capnp::messages::ChainClient::StartParams,\n+                                       ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(ChainContext& context);\n+    using WalletContext = ServerContext<ipc::capnp::messages::WalletClient,\n+                                        ipc::capnp::messages::ChainClient::StartParams,\n+                                        ipc::capnp::messages::ChainClient::StartResults>;\n+    static void invoke(WalletContext& context);\n+};\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder);\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest);\n+\n+\n+//! CScheduler& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<CScheduler&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! CRPCCommand& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<const CRPCCommand&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+//! Override to avoid assert failures that would happen trying to serialize\n+//! spent coins. Probably it would be best for Coin serialization code not\n+//! to assert, but avoiding serialization in this case is harmless.\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin);\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_CHAIN_TYPES_H"
      },
      {
        "sha": "7c57ad99b38b4d32fe95d52495f2e656b0f630cf",
        "filename": "src/ipc/capnp/chain.capnp",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,163 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x94f21a4864bd2c65;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n+$Proxy.include(\"rpc/server.h\");\n+$Proxy.includeTypes(\"ipc/capnp/chain-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Chain $Proxy.wrap(\"interfaces::Chain\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getHeight @1 (context :Proxy.Context) -> (result :Int32, hasResult :Bool);\n+    getBlockHash @2 (context :Proxy.Context, height :Int32) -> (result :Data);\n+    haveBlockOnDisk @3 (context :Proxy.Context, height :Int32) -> (result :Bool);\n+    getTipLocator @4 (context :Proxy.Context) -> (result :Data);\n+    findLocatorFork @5 (context :Proxy.Context, locator :Data) -> (result :Int32, hasResult :Bool);\n+    checkFinalTx @6 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    findBlock @7 (context :Proxy.Context, hash :Data, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findFirstBlockWithTimeAndHeight @8 (context :Proxy.Context, minTime :Int64, minHeight :Int32, block :FoundBlockParam) -> (block :FoundBlockResult, result :Bool);\n+    findAncestorByHeight @9 (context :Proxy.Context, blockHash :Data, ancestorHeight :Int32, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findAncestorByHash @10 (context :Proxy.Context, blockHash :Data, ancestorHash :Data, ancestor :FoundBlockParam) -> (ancestor :FoundBlockResult, result :Bool);\n+    findCommonAncestor @11 (context :Proxy.Context, blockHash1 :Data, blockHash2 :Data, ancestor :FoundBlockParam, block1 :FoundBlockParam, block2 :FoundBlockParam) -> (ancestor :FoundBlockResult, block1 :FoundBlockResult, block2 :FoundBlockResult, result :Bool);\n+    findCoins @12 (context :Proxy.Context, coins :List(Common.Pair(Data, Data))) -> (coins :List(Common.Pair(Data, Data)));\n+    guessVerificationProgress @13 (context :Proxy.Context, blockHash :Data) -> (result :Float64);\n+    hasBlocks @14 (context :Proxy.Context, blockHash :Data, minHeight :Int32, maxHeight: Int32, hasMaxHeight :Bool) -> (result :Bool);\n+    isRBFOptIn @15 (context :Proxy.Context, tx :Data) -> (result :Int32);\n+    isInMempool @16 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    hasDescendantsInMempool @17 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    broadcastTransaction @18 (context :Proxy.Context, tx: Data, maxTxFee :Int64, relay :Bool) -> (error: Text, result :Bool);\n+    getTransactionAncestry @19 (context :Proxy.Context, txid :Data) -> (ancestors :UInt64, descendants :UInt64, ancestorsize :UInt64, ancestorfees :Int64);\n+    getPackageLimits @20 (context :Proxy.Context) -> (ancestors :UInt64, descendants :UInt64);\n+    checkChainLimits @21 (context :Proxy.Context, tx :Data) -> (result :Bool);\n+    estimateSmartFee @22 (context :Proxy.Context, numBlocks :Int32, conservative :Bool, wantCalc :Bool) -> (calc :FeeCalculation, result :Data);\n+    estimateMaxBlocks @23 (context :Proxy.Context) -> (result :UInt32);\n+    mempoolMinFee @24 (context :Proxy.Context) -> (result :Data);\n+    relayMinFee @25 (context :Proxy.Context) -> (result :Data);\n+    relayIncrementalFee @26 (context :Proxy.Context) -> (result :Data);\n+    relayDustFee @27 (context :Proxy.Context) -> (result :Data);\n+    havePruned @28 (context :Proxy.Context) -> (result :Bool);\n+    isReadyToBroadcast @29 (context :Proxy.Context) -> (result :Bool);\n+    isInitialBlockDownload @30 (context :Proxy.Context) -> (result :Bool);\n+    shutdownRequested @31 (context :Proxy.Context) -> (result :Bool);\n+    getAdjustedTime @32 (context :Proxy.Context) -> (result :Int64);\n+    initMessage @33 (context :Proxy.Context, message :Text) -> ();\n+    initWarning @34 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    initError @35 (context :Proxy.Context, message :Common.BilingualStr) -> ();\n+    showProgress @36 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+    handleNotifications @37 (context :Proxy.Context, notifications :ChainNotifications) -> (result :Handler.Handler);\n+    waitForNotificationsIfTipChanged @38 (context :Proxy.Context, oldTip :Data) -> ();\n+    handleRpc @39 (context :Proxy.Context, command :RPCCommand) -> (result :Handler.Handler);\n+    rpcEnableDeprecated @40 (context :Proxy.Context, method :Text) -> (result :Bool);\n+    rpcRunLater @41 (context :Proxy.Context, name :Text, fn: RunLaterCallback, seconds: Int64) -> ();\n+    rpcSerializationFlags @42 (context :Proxy.Context) -> (result :Int32);\n+    getSetting @43 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    getSettingsList @44 (context :Proxy.Context, name :Text) -> (result :List(Common.UniValue));\n+    getRwSetting @45 (context :Proxy.Context, name :Text) -> (result :Common.UniValue);\n+    updateRwSetting @46 (context :Proxy.Context, name :Text, value :Common.UniValue, write :Bool) -> (result :Bool);\n+    requestMempoolTransactions @47 (context :Proxy.Context, notifications :ChainNotifications) -> ();\n+    isTaprootActive @48 (context :Proxy.Context) -> (result :Bool);\n+}\n+\n+interface ChainNotifications $Proxy.wrap(\"interfaces::Chain::Notifications\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    transactionAddedToMempool @1 (context :Proxy.Context, tx :Data, mempoolSequence :UInt64) -> ();\n+    transactionRemovedFromMempool @2 (context :Proxy.Context, tx :Data, reason :Int32, mempoolSequence :UInt64) -> ();\n+    blockConnected @3 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    blockDisconnected @4 (context :Proxy.Context, block :Data, height :Int32) -> ();\n+    updatedBlockTip @5 (context :Proxy.Context) -> ();\n+    chainStateFlushed @6 (context :Proxy.Context, locator :Data) -> ();\n+}\n+\n+interface ChainClient $Proxy.wrap(\"interfaces::ChainClient\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    registerRpcs @1 (context :Proxy.Context) -> ();\n+    verify @2 (context :Proxy.Context) -> (result :Bool);\n+    load @3 (context :Proxy.Context) -> (result :Bool);\n+    start @4 (context :Proxy.Context, scheduler :Void) -> ();\n+    flush @5 (context :Proxy.Context) -> ();\n+    stop @6 (context :Proxy.Context) -> ();\n+    setMockTime @7 (context :Proxy.Context, time :Int64) -> ();\n+}\n+\n+struct FeeCalculation $Proxy.wrap(\"FeeCalculation\") {\n+    est @0 :EstimationResult;\n+    reason @1 :Int32;\n+    desiredTarget @2 :Int32;\n+    returnedTarget @3 :Int32;\n+}\n+\n+struct EstimationResult $Proxy.wrap(\"EstimationResult\")\n+{\n+    pass @0 :EstimatorBucket;\n+    fail @1 :EstimatorBucket;\n+    decay @2 :Float64;\n+    scale @3 :UInt32;\n+}\n+\n+struct EstimatorBucket $Proxy.wrap(\"EstimatorBucket\")\n+{\n+    start @0 :Float64;\n+    end @1 :Float64;\n+    withinTarget @2 :Float64;\n+    totalConfirmed @3 :Float64;\n+    inMempool @4 :Float64;\n+    leftMempool @5 :Float64;\n+}\n+\n+struct RPCCommand $Proxy.wrap(\"CRPCCommand\") {\n+   category @0 :Text;\n+   name @1 :Text;\n+   actor @2 :ActorCallback;\n+   argNames @3 :List(Text);\n+   uniqueId @4 :Int64 $Proxy.name(\"unique_id\");\n+}\n+\n+interface ActorCallback $Proxy.wrap(\"ProxyCallback<CRPCCommand::Actor>\") {\n+    call @0 (context :Proxy.Context, request :JSONRPCRequest, response :Common.UniValue, lastCallback :Bool) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), response :Common.UniValue, result: Bool);\n+}\n+\n+struct JSONRPCRequest $Proxy.wrap(\"JSONRPCRequest\") {\n+    id @0 :Common.UniValue;\n+    method @1 :Text $Proxy.name(\"strMethod\");\n+    params @2 :Common.UniValue;\n+    mode @3 :Int32;\n+    uri @4 :Text $Proxy.name(\"URI\");\n+    authUser @5 :Text;\n+}\n+\n+interface RunLaterCallback $Proxy.wrap(\"ProxyCallback<std::function<void()>>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+struct FoundBlockParam {\n+    wantHash @0 :Bool;\n+    wantHeight @1 :Bool;\n+    wantTime @2 :Bool;\n+    wantMaxTime @3 :Bool;\n+    wantMtpTime @4 :Bool;\n+    wantInActiveChain @5 :Bool;\n+    nextBlock @6: FoundBlockParam;\n+    wantData @7 :Bool;\n+}\n+\n+struct FoundBlockResult {\n+    hash @0 :Data;\n+    height @1 :Int32;\n+    time @2 :Int64;\n+    maxTime @3 :Int64;\n+    mtpTime @4 :Int64;\n+    inActiveChain @5 :Int64;\n+    nextBlock @6: FoundBlockResult;\n+    data @7 :Data;\n+    found @8 :Bool;\n+}"
      },
      {
        "sha": "a5d36d597708e09fc2c2b6b6ffb13fde4a8946e0",
        "filename": "src/ipc/capnp/chain.cpp",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/chain.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/capability.h>\n+#include <capnp/list.h>\n+#include <coins.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/handler.h>\n+#include <interfaces/ipc.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/handler.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <primitives/block.h>\n+#include <rpc/server.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const interfaces::FoundBlock& dest,\n+                        ipc::capnp::messages::FoundBlockParam::Builder&& builder)\n+{\n+    if (dest.m_hash) builder.setWantHash(true);\n+    if (dest.m_height) builder.setWantHeight(true);\n+    if (dest.m_time) builder.setWantTime(true);\n+    if (dest.m_max_time) builder.setWantMaxTime(true);\n+    if (dest.m_mtp_time) builder.setWantMtpTime(true);\n+    if (dest.m_in_active_chain) builder.setWantInActiveChain(true);\n+    if (dest.m_next_block) CustomBuildMessage(invoke_context, *dest.m_next_block, builder.initNextBlock());\n+    if (dest.m_data) builder.setWantData(true);\n+}\n+\n+void FindBlock(const std::function<void()>& find,\n+               const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+               ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+               interfaces::FoundBlock& found_block)\n+{\n+    uint256 hash;\n+    int height = -1;\n+    int64_t time = -1;\n+    int64_t max_time = -1;\n+    int64_t mtp_time = -1;\n+    bool in_active_chain = -1;\n+    CBlock data;\n+    if (reader.getWantHash()) found_block.hash(hash);\n+    if (reader.getWantHeight()) found_block.height(height);\n+    if (reader.getWantTime()) found_block.time(time);\n+    if (reader.getWantMaxTime()) found_block.maxTime(max_time);\n+    if (reader.getWantMtpTime()) found_block.mtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) found_block.inActiveChain(in_active_chain);\n+    if (reader.getWantData()) found_block.data(data);\n+    if (reader.hasNextBlock()) {\n+        interfaces::FoundBlock next_block;\n+        found_block.nextBlock(next_block);\n+        FindBlock(find, reader.getNextBlock(), builder.initNextBlock(), next_block);\n+    } else {\n+        find();\n+    }\n+    if (!found_block.found) return;\n+    if (reader.getWantHash()) builder.setHash(ipc::capnp::ToArray(ipc::capnp::Serialize(hash)));\n+    if (reader.getWantHeight()) builder.setHeight(height);\n+    if (reader.getWantTime()) builder.setTime(time);\n+    if (reader.getWantMaxTime()) builder.setMaxTime(max_time);\n+    if (reader.getWantMtpTime()) builder.setMtpTime(mtp_time);\n+    if (reader.getWantInActiveChain()) builder.setInActiveChain(in_active_chain);\n+    if (reader.getWantData()) builder.setData(ipc::capnp::ToArray(ipc::capnp::Serialize(data)));\n+    builder.setFound(true);\n+}\n+\n+void CustomPassMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockParam::Reader& reader,\n+                       ipc::capnp::messages::FoundBlockResult::Builder&& builder,\n+                       std::function<void(const interfaces::FoundBlock&)>&& fn)\n+{\n+    interfaces::FoundBlock found_block;\n+    FindBlock([&] { fn(found_block); }, reader, std::move(builder), found_block);\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::FoundBlockResult::Reader& reader,\n+                       const interfaces::FoundBlock& dest)\n+{\n+    if (!reader.getFound()) return;\n+    if (dest.m_hash) *dest.m_hash = ipc::capnp::Unserialize<uint256>(reader.getHash());\n+    if (dest.m_height) *dest.m_height = reader.getHeight();\n+    if (dest.m_time) *dest.m_time = reader.getTime();\n+    if (dest.m_max_time) *dest.m_max_time = reader.getMaxTime();\n+    if (dest.m_mtp_time) *dest.m_mtp_time = reader.getMtpTime();\n+    if (dest.m_in_active_chain) *dest.m_in_active_chain = reader.getInActiveChain();\n+    if (dest.m_next_block) CustomReadMessage(invoke_context, reader.getNextBlock(), *dest.m_next_block);\n+    if (dest.m_data) *dest.m_data = ipc::capnp::Unserialize<CBlock>(reader.getData());\n+}\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Chain::HandleRpcParams>::invoke(\n+    Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto command = params.getCommand();\n+\n+    CRPCCommand::Actor actor;\n+    ReadField(TypeList<decltype(actor)>(), context, Make<ValueField>(command.getActor()), ReadDestValue(actor));\n+    std::vector<std::string> args;\n+    ReadField(TypeList<decltype(args)>(), context, Make<ValueField>(command.getArgNames()), ReadDestValue(args));\n+\n+    auto rpc_command = std::make_unique<CRPCCommand>(command.getCategory(), command.getName(), std::move(actor),\n+                                               std::move(args), command.getUniqueId());\n+    auto handler = context.proxy_server.m_impl->handleRpc(*rpc_command);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::Handler>>(std::shared_ptr<interfaces::Handler>(handler.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([rpc_command = rpc_command.release()] { delete rpc_command; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(ChainContext& context)\n+{\n+    // This method is never called because ChainClient::Start is overridden by\n+    // WalletClient::Start. The custom implementation is needed just because\n+    // the CScheduler& argument this is supposed to pass is not serializable.\n+    assert(0);\n+}\n+\n+bool CustomHasValue(InvokeContext& invoke_context, const Coin& coin)\n+{\n+    // Spent coins cannot be serialized due to an assert in Coin::Serialize.\n+    return !coin.IsSpent();\n+}\n+} // namespace mp"
      },
      {
        "sha": "f181ffd09e311133b3260a4987cc0449cd424e6a",
        "filename": "src/ipc/capnp/common-types.h",
        "status": "added",
        "additions": 292,
        "deletions": 0,
        "changes": 292,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common-types.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,292 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+#define BITCOIN_IPC_CAPNP_COMMON_TYPES_H\n+\n+#include <chainparams.h>\n+#include <consensus/validation.h>\n+#include <ipc/capnp/common.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy-types.h>\n+#include <net_processing.h>\n+#include <net_types.h>\n+#include <netbase.h>\n+#include <util/translation.h>\n+#include <validation.h>\n+#include <wallet/coincontrol.h>\n+\n+namespace ipc {\n+namespace capnp {\n+//! Convert kj::StringPtr to std::string.\n+inline std::string ToString(const kj::StringPtr& str) { return {str.cStr(), str.size()}; }\n+\n+//! Convert kj::ArrayPtr to std::string.\n+inline std::string ToString(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    return {reinterpret_cast<const char*>(data.begin()), data.size()};\n+}\n+\n+//! Convert array object to kj::ArrayPtr.\n+template <typename Array>\n+inline kj::ArrayPtr<const kj::byte> ToArray(const Array& array)\n+{\n+    return {reinterpret_cast<const kj::byte*>(array.data()), array.size()};\n+}\n+\n+//! Convert base_blob to kj::ArrayPtr.\n+template <typename Blob>\n+inline kj::ArrayPtr<const kj::byte> FromBlob(const Blob& blob)\n+{\n+    return {blob.begin(), blob.size()};\n+}\n+\n+//! Convert kj::ArrayPtr to base_blob\n+template <typename Blob>\n+inline Blob ToBlob(kj::ArrayPtr<const kj::byte> data)\n+{\n+    // TODO: Avoid temp vector.\n+    return Blob(std::vector<unsigned char>(data.begin(), data.begin() + data.size()));\n+}\n+\n+//! Serialize bitcoin value.\n+template <typename T>\n+CDataStream Serialize(const T& value)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    return stream;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(T& value, const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    // Could optimize, it unnecessarily copies the data into a temporary vector.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    value.Unserialize(stream);\n+    return value;\n+}\n+\n+//! Deserialize bitcoin value.\n+template <typename T>\n+T Unserialize(const kj::ArrayPtr<const kj::byte>& data)\n+{\n+    T value;\n+    Unserialize(value, data);\n+    return value;\n+}\n+\n+template <typename T>\n+using Deserializable = std::is_constructible<T, ::deserialize_type, ::CDataStream&>;\n+\n+template <typename T>\n+struct Unserializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Unserialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+\n+template <typename T>\n+struct Serializable\n+{\n+private:\n+    template <typename C>\n+    static std::true_type test(decltype(std::declval<C>().Serialize(std::declval<C&>()))*);\n+    template <typename>\n+    static std::false_type test(...);\n+\n+public:\n+    static constexpr bool value = decltype(test<T>(nullptr))::value;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+//!@{\n+//! Functions to serialize / deserialize bitcoin objects that don't\n+//! already provide their own serialization.\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap);\n+//!@}\n+\n+template <typename LocalType, typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Reader&& reader,\n+    ReadDest&& read_dest,\n+    decltype(CustomReadMessage(invoke_context, reader.get(), std::declval<LocalType&>()))* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) { CustomReadMessage(invoke_context, reader.get(), value); });\n+}\n+\n+template <typename Accessor, typename LocalType, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<LocalType>, ServerContext& server_context, Fn&& fn, Args&&... args)\n+    -> decltype(CustomPassMessage(server_context,\n+                                  Accessor::get(server_context.call_context.getParams()),\n+                                  Accessor::init(server_context.call_context.getResults()),\n+                                  nullptr))\n+{\n+    CustomPassMessage(server_context, Accessor::get(server_context.call_context.getParams()),\n+                      Accessor::init(server_context.call_context.getResults()),\n+                      [&](LocalType param) { fn.invoke(server_context, std::forward<Args>(args)..., param); });\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    typename std::enable_if<ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    assert(input.has());\n+    auto data = input.get();\n+    // Note: stream copy here is unnecessary, and can be avoided in the future\n+    // when `VectorReader` from #12254 is added.\n+    CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+    return read_dest.construct(deserialize, stream);\n+}\n+\n+template <typename LocalType, typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Input&& input,\n+    ReadDest&& read_dest,\n+    // FIXME instead of always preferring Deserialize implementation over Unserialize should prefer Deserializing when\n+    // emplacing, unserialize when updating\n+    typename std::enable_if<ipc::capnp::Unserializable<LocalType>::value &&\n+                            !ipc::capnp::Deserializable<LocalType>::value>::type* enable = nullptr)\n+{\n+    return read_dest.update([&](auto& value) {\n+        if (!input.has()) return;\n+        auto data = input.get();\n+        // Note: stream copy here is unnecessary, and can be avoided in the future\n+        // when `VectorReader` from #12254 is added.\n+        CDataStream stream({data.begin(), data.end()}, SER_NETWORK, CLIENT_VERSION);\n+        value.Unserialize(stream);\n+    });\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(input.get());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::chrono::microseconds>, Priority<1>, InvokeContext& invoke_context, Value&& value, Output&& output)\n+{\n+    output.set(value.count());\n+}\n+\n+template <typename Input, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Input&& input, ReadDest&& read_dest)\n+{\n+    auto data = input.get();\n+    // Copy input into SecureString. Caller needs to be responsible for calling\n+    // memory_cleanse on the input.\n+    return read_dest.construct(CharCast(data.begin()), data.size());\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<SecureString>, Priority<1>, InvokeContext& invoke_context, Value&& str, Output&& output)\n+{\n+    auto result = output.init(str.size());\n+    // Copy SecureString into output. Caller needs to be responsible for calling\n+    // memory_cleanse later on the output after it is sent.\n+    memcpy(result.begin(), str.data(), str.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<2>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init(value.size())), ::capnp::Data::Builder>::value>::type*\n+        enable_output = nullptr,\n+    decltype(memcpy(output.init(value.size()).begin(), value.data(), value.size()))* enable_value = nullptr)\n+{\n+    auto result = output.init(value.size());\n+    memcpy(result.begin(), value.data(), value.size());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(TypeList<LocalType>,\n+                      Priority<2>,\n+                      InvokeContext& invoke_context,\n+                      Value&& value,\n+                      Output&& output,\n+                      decltype(CustomBuildMessage(invoke_context, value, output.init()))* enable = nullptr)\n+{\n+    CustomBuildMessage(invoke_context, value, output.init());\n+}\n+\n+template <typename LocalType, typename Value, typename Output>\n+void CustomBuildField(\n+    TypeList<LocalType>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Value&& value,\n+    Output&& output,\n+    typename std::enable_if<ipc::capnp::Serializable<\n+        typename std::remove_cv<typename std::remove_reference<Value>::type>::type>::value>::type* enable = nullptr)\n+{\n+    CDataStream stream(SER_NETWORK, CLIENT_VERSION);\n+    value.Serialize(stream);\n+    auto result = output.init(stream.size());\n+    memcpy(result.begin(), stream.data(), stream.size());\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+auto CustomPassField(TypeList<>, ServerContext& server_context, const Fn& fn, Args&&... args) ->\n+    typename std::enable_if<std::is_same<decltype(Accessor::get(server_context.call_context.getParams())),\n+                                         ipc::capnp::messages::GlobalArgs::Reader>::value>::type\n+{\n+    ipc::capnp::ReadGlobalArgs(server_context, Accessor::get(server_context.call_context.getParams()));\n+    return fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Output>\n+void CustomBuildField(\n+    TypeList<>,\n+    Priority<1>,\n+    InvokeContext& invoke_context,\n+    Output&& output,\n+    typename std::enable_if<std::is_same<decltype(output.init()),\n+                                         ipc::capnp::messages::GlobalArgs::Builder>::value>::type* enable = nullptr)\n+{\n+    ipc::capnp::BuildGlobalArgs(invoke_context, output.init());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_TYPES_H"
      },
      {
        "sha": "3dfe39f87db666a95053a9c6180945d4eb212212",
        "filename": "src/ipc/capnp/common.capnp",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,51 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xcd2c6232cb484a28;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/common.h\");\n+$Proxy.includeTypes(\"ipc/capnp/common-types.h\");\n+\n+struct UniValue {\n+    # The current version of UniValue included in bitcoin doesn't support\n+    # round-trip serialization of raw values. After it gets updated, and\n+    # https://github.com/jgarzik/univalue/pull/31 is merged, this struct\n+    # can go away and UniValues can just be serialized as text using\n+    # UniValue::read() and UniValue::write() methods.\n+\n+    type @0 :Int32;\n+    value @1 :Text;\n+}\n+\n+struct Settings $Proxy.wrap(\"util::Settings\") {\n+   forcedSettings @0 :List(Pair(Text, UniValue)) $Proxy.name(\"forced_settings\");\n+   commandLineOptions @1 :List(Pair(Text, List(UniValue))) $Proxy.name(\"command_line_options\");\n+   rwSettings @2 :List(Pair(Text, UniValue)) $Proxy.name(\"rw_settings\");\n+   roConfig @3 :List(Pair(Text, List(Pair(Text, List(UniValue))))) $Proxy.name(\"ro_config\");\n+}\n+\n+struct GlobalArgs $Proxy.wrap(\"ipc::capnp::GlobalArgs\") $Proxy.count(0) {\n+   settings @0 :Settings $Proxy.name(\"m_settings\");\n+   network @1 :Text $Proxy.name(\"m_network\");\n+   networkOnlyArgs @2 :List(Text) $Proxy.name(\"m_network_only_args\");\n+}\n+\n+struct BilingualStr $Proxy.wrap(\"bilingual_str\") {\n+    original @0 :Text;\n+    translated @1 :Text;\n+}\n+\n+struct Pair(Key, Value) {\n+    key @0 :Key;\n+    value @1 :Value;\n+}\n+\n+struct PairStr64 {\n+    key @0 :Text;\n+    value @1 :UInt64;\n+}"
      },
      {
        "sha": "7a0252858172e5cc4a1f4eb288231d8b5c449f78",
        "filename": "src/ipc/capnp/common.cpp",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/common.h>\n+#include <capnp/list.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/common.capnp.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/common.h>\n+#include <ipc/capnp/context.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <sync.h>\n+#include <univalue.h>\n+#include <util/system.h>\n+\n+#include <functional>\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const UniValue& univalue,\n+                        ipc::capnp::messages::UniValue::Builder&& builder)\n+{\n+    builder.setType(univalue.getType());\n+    if (univalue.getType() == UniValue::VARR || univalue.getType() == UniValue::VOBJ) {\n+        builder.setValue(univalue.write());\n+    } else {\n+        builder.setValue(univalue.getValStr());\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::UniValue::Reader& reader,\n+                       UniValue& univalue)\n+{\n+    if (reader.getType() == UniValue::VARR || reader.getType() == UniValue::VOBJ) {\n+        if (!univalue.read(ipc::capnp::ToString(reader.getValue()))) {\n+            throw std::runtime_error(\"Could not parse UniValue\");\n+        }\n+    } else {\n+        univalue = UniValue(UniValue::VType(reader.getType()), ipc::capnp::ToString(reader.getValue()));\n+    }\n+}\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder)\n+{\n+    const auto& args = static_cast<const GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    mp::BuildField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(builder), args);\n+}\n+\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader)\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    {\n+        LOCK(args.cs_args);\n+        mp::ReadField(mp::TypeList<GlobalArgs>(), invoke_context, mp::Make<mp::ValueField>(reader),\n+                      mp::ReadDestValue(args));\n+    }\n+    Context& ipc_context = *static_cast<Context*>(invoke_context.connection.m_loop.m_context);\n+    ipc_context.init_process();\n+}\n+\n+std::string GlobalArgsNetwork()\n+{\n+    auto& args = static_cast<GlobalArgs&>(::gArgs);\n+    LOCK(args.cs_args);\n+    return args.m_network;\n+}\n+} // namespace capnp\n+} // namespace ipc"
      },
      {
        "sha": "7e92364769ae2b37d6ef6b2f7e8a38e71ed46a59",
        "filename": "src/ipc/capnp/common.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/common.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_COMMON_H\n+#define BITCOIN_IPC_CAPNP_COMMON_H\n+\n+#include <ipc/capnp/common.capnp.h>\n+#include <util/system.h>\n+\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n+namespace ipc {\n+namespace capnp {\n+//! Wrapper around GlobalArgs struct to expose public members.\n+struct GlobalArgs : public ArgsManager\n+{\n+    using ArgsManager::cs_args;\n+    using ArgsManager::m_network;\n+    using ArgsManager::m_network_only_args;\n+    using ArgsManager::m_settings;\n+};\n+\n+//! GlobalArgs client-side argument handling. Builds message from ::gArgs variable.\n+void BuildGlobalArgs(mp::InvokeContext& invoke_context, messages::GlobalArgs::Builder&& builder);\n+\n+//! GlobalArgs server-side argument handling. Reads message into ::gArgs variable.\n+void ReadGlobalArgs(mp::InvokeContext& invoke_context, const messages::GlobalArgs::Reader& reader);\n+\n+//! GlobalArgs network string accessor.\n+std::string GlobalArgsNetwork();\n+} // namespace capnp\n+} // namespace ipc\n+\n+#endif // BITCOIN_IPC_CAPNP_COMMON_H"
      },
      {
        "sha": "2676b1eef7e3e994f3d847584b9bddbc05803ced",
        "filename": "src/ipc/capnp/context.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/context.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -5,8 +5,16 @@\n #ifndef BITCOIN_IPC_CAPNP_CONTEXT_H\n #define BITCOIN_IPC_CAPNP_CONTEXT_H\n \n+#include <ipc/capnp/node.capnp.h>\n #include <ipc/context.h>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+namespace mp {\n+struct InvokeContext;\n+} // namespace mp\n+\n namespace ipc {\n namespace capnp {\n //! Cap'n Proto context struct. Generally the parent ipc::Context struct should\n@@ -16,6 +24,12 @@ namespace capnp {\n //! function and object types to capnp hooks.\n struct Context : ipc::Context\n {\n+    using MakeNodeClient = std::unique_ptr<interfaces::Node>(mp::InvokeContext& context,\n+                                                             messages::Node::Client&& client);\n+    using MakeNodeServer = kj::Own<messages::Node::Server>(mp::InvokeContext& context,\n+                                                           std::shared_ptr<interfaces::Node> impl);\n+    MakeNodeClient* make_node_client = nullptr;\n+    MakeNodeServer* make_node_server = nullptr;\n };\n } // namespace capnp\n } // namespace ipc"
      },
      {
        "sha": "3c1fadbac894e88513c1d9347526c9ca4806b98e",
        "filename": "src/ipc/capnp/handler.capnp",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/handler.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/handler.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/handler.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,16 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xebd8f46e2f369076;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/handler.h\");\n+\n+interface Handler $Proxy.wrap(\"interfaces::Handler\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    disconnect @1 (context :Proxy.Context) -> ();\n+}"
      },
      {
        "sha": "8c444add4b35d8af7b604c245a8c9920bb150c59",
        "filename": "src/ipc/capnp/init-types.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init-types.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -5,6 +5,31 @@\n #ifndef BITCOIN_IPC_CAPNP_INIT_TYPES_H\n #define BITCOIN_IPC_CAPNP_INIT_TYPES_H\n \n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n #include <ipc/capnp/echo.capnp.proxy-types.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+\n+namespace mp {\n+//! Specialization of makeWalletClient needed because it takes a Chain& reference\n+//! argument, not a unique_ptr<Chain> argument, so a manual cleanup\n+//! callback is needed to clean up the ProxyServer<messages::Chain> proxy object.\n+template <>\n+struct ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Init,\n+                                  ipc::capnp::messages::Init::MakeWalletClientParams,\n+                                  ipc::capnp::messages::Init::MakeWalletClientResults>;\n+    static capnp::Void invoke(Context& context);\n+};\n+\n+//! Chain& server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<interfaces::Chain&>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+} // namespace mp\n \n #endif // BITCOIN_IPC_CAPNP_INIT_TYPES_H"
      },
      {
        "sha": "e2fa768db654cbc7fa870a173cc2c11a07e2324c",
        "filename": "src/ipc/capnp/init.capnp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -8,13 +8,22 @@ using Cxx = import \"/capnp/c++.capnp\";\n $Cxx.namespace(\"ipc::capnp::messages\");\n \n using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"interfaces/chain.h\");\n $Proxy.include(\"interfaces/echo.h\");\n $Proxy.include(\"interfaces/init.h\");\n+$Proxy.include(\"interfaces/node.h\");\n $Proxy.includeTypes(\"ipc/capnp/init-types.h\");\n \n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n using Echo = import \"echo.capnp\";\n+using Node = import \"node.capnp\";\n+using Wallet = import \"wallet.capnp\";\n \n interface Init $Proxy.wrap(\"interfaces::Init\") {\n     construct @0 (threadMap: Proxy.ThreadMap) -> (threadMap :Proxy.ThreadMap);\n     makeEcho @1 (context :Proxy.Context) -> (result :Echo.Echo);\n+    makeNode @2 (context :Proxy.Context) -> (result :Node.Node);\n+    makeChain @3 (context :Proxy.Context) -> (result :Chain.Chain);\n+    makeWalletClient @4 (context :Proxy.Context, globalArgs :Common.GlobalArgs, chain :Chain.Chain) -> (result :Wallet.WalletClient);\n }"
      },
      {
        "sha": "47f2bcc9f1050741a80878cd81a9a62932e269f6",
        "filename": "src/ipc/capnp/init.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/init.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/capability.h>\n+#include <interfaces/chain.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/init-types.h>\n+#include <ipc/capnp/init.capnp.h>\n+#include <ipc/capnp/init.capnp.proxy.h>\n+#include <mp/proxy-io.h>\n+\n+#include <memory>\n+#include <utility>\n+\n+namespace mp {\n+template <typename Interface> struct ProxyClient;\n+\n+::capnp::Void ProxyServerMethodTraits<ipc::capnp::messages::Init::MakeWalletClientParams>::invoke(Context& context)\n+{\n+    auto params = context.call_context.getParams();\n+    auto chain = std::make_unique<ProxyClient<ipc::capnp::messages::Chain>>(\n+        params.getChain(), context.proxy_server.m_context.connection, /* destroy_connection= */ false);\n+    auto wallet_client = context.proxy_server.m_impl->makeWalletClient(*chain);\n+    auto results = context.call_context.getResults();\n+    auto result = kj::heap<ProxyServer<ipc::capnp::messages::WalletClient>>(std::shared_ptr<interfaces::WalletClient>(wallet_client.release()), *context.proxy_server.m_context.connection);\n+    result->m_context.cleanup.emplace_back([chain = chain.release()] { delete chain; });\n+    results.setResult(kj::mv(result));\n+    return {};\n+}\n+} // namespace mp"
      },
      {
        "sha": "151820b51187e883fb5592ecd3e42a869c728c68",
        "filename": "src/ipc/capnp/node-types.h",
        "status": "added",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node-types.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,139 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+#define BITCOIN_IPC_CAPNP_NODE_TYPES_H\n+\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+//! Specialization of rpcSetTimerInterfaceIfUnset needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams,\n+                                  ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetResults>;\n+    static void invoke(Context& context);\n+};\n+\n+//! Specialization of rpcUnsetTimerInterface needed because it takes a\n+//! RPCTimerInterface* argument, which requires custom code to provide a\n+//! compatible timer.\n+template <>\n+struct mp::ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>\n+{\n+    using Context = ServerContext<ipc::capnp::messages::Node,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams,\n+                                  ipc::capnp::messages::Node::RpcUnsetTimerInterfaceResults>;\n+    static void invoke(Context& context);\n+};\n+\n+namespace mp {\n+//! Specialization of MakeProxyClient for Node to that constructs a client\n+//! object through a function pointer so client object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline std::unique_ptr<interfaces::Node> CustomMakeProxyClient<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, ipc::capnp::messages::Node::Client&& client)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_client(context, kj::mv(client));\n+}\n+\n+//! Specialization of MakeProxyServer for Node to that constructs a server\n+//! object through a function pointer so server object code relying on\n+//! net_processing types doesn't need to get linked into the bitcoin-wallet\n+//! executable.\n+template <>\n+inline kj::Own<ipc::capnp::messages::Node::Server> CustomMakeProxyServer<ipc::capnp::messages::Node, interfaces::Node>(\n+    InvokeContext& context, std::shared_ptr<interfaces::Node>&& impl)\n+{\n+    ipc::capnp::Context& ipc_context = *static_cast<ipc::capnp::Context*>(context.connection.m_loop.m_context);\n+    return ipc_context.make_node_server(context, std::move(impl));\n+}\n+\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<int, const char* const*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    const auto& params = server_context.call_context.getParams();\n+    const auto& value = Accessor::get(params);\n+    std::vector<const char*> argv(value.size());\n+    size_t i = 0;\n+    for (const auto arg : value) {\n+        argv[i] = arg.cStr();\n+        ++i;\n+    }\n+    return fn.invoke(server_context, std::forward<Args>(args)..., argv.size(), argv.data());\n+}\n+\n+template <typename Output>\n+void CustomBuildField(TypeList<int, const char* const*>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      int argc,\n+                      const char* const* argv,\n+                      Output&& output)\n+{\n+    auto args = output.init(argc);\n+    for (int i = 0; i < argc; ++i) {\n+        args.set(i, argv[i]);\n+    }\n+}\n+\n+template <typename InvokeContext>\n+static inline ::capnp::Void BuildPrimitive(InvokeContext& invoke_context, RPCTimerInterface*, TypeList<::capnp::Void>)\n+{\n+    return {};\n+}\n+\n+//! RPCTimerInterface* server-side argument handling. Skips argument so it can\n+//! be handled by ProxyServerCustom code.\n+template <typename Accessor, typename ServerContext, typename Fn, typename... Args>\n+void CustomPassField(TypeList<RPCTimerInterface*>, ServerContext& server_context, const Fn& fn, Args&&... args)\n+{\n+    fn.invoke(server_context, std::forward<Args>(args)...);\n+}\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<std::tuple<CNodeStats, bool, CNodeStateStats>>,\n+                      Priority<1>,\n+                      InvokeContext& invoke_context,\n+                      Value&& stats,\n+                      Output&& output)\n+{\n+    // FIXME should pass message_builder instead of builder below to avoid\n+    // calling output.set twice Need ValueBuilder class analogous to\n+    // ValueReader for this\n+    BuildField(TypeList<CNodeStats>(), invoke_context, output, std::get<0>(stats));\n+    if (std::get<1>(stats)) {\n+        auto message_builder = output.init();\n+        using Accessor = ProxyStruct<ipc::capnp::messages::NodeStats>::StateStatsAccessor;\n+        StructField<Accessor, ipc::capnp::messages::NodeStats::Builder> field_output{message_builder};\n+        BuildField(TypeList<CNodeStateStats>(), invoke_context, field_output, std::get<2>(stats));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats);\n+\n+template <typename Value, typename Output>\n+void CustomBuildField(TypeList<CSubNet>, Priority<1>, InvokeContext& invoke_context, Value&& subnet, Output&& output)\n+{\n+    std::string subnet_str = subnet.ToString();\n+    auto result = output.init(subnet_str.size());\n+    memcpy(result.begin(), subnet_str.data(), subnet_str.size());\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_TYPES_H"
      },
      {
        "sha": "0b347c143eeba7520d086ce4baa6527a81b7a839",
        "filename": "src/ipc/capnp/node.capnp",
        "status": "added",
        "additions": 199,
        "deletions": 0,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,199 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0x92546c47dc734b2e;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/node.h\");\n+$Proxy.includeTypes(\"ipc/capnp/node-types.h\");\n+\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+using Wallet = import \"wallet.capnp\";\n+\n+interface Node $Proxy.wrap(\"interfaces::Node\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    initLogging @1 (context :Proxy.Context) -> ();\n+    initParameterInteraction @2 (context :Proxy.Context) -> ();\n+    getWarnings @3 (context :Proxy.Context) -> (result :Common.BilingualStr);\n+    getLogCategories @4 (context :Proxy.Context) -> (result :UInt32);\n+    baseInitialize @5 (context :Proxy.Context, globalArgs :Common.GlobalArgs) -> (error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appInitMain @6 (context :Proxy.Context) -> (tipInfo :BlockAndHeaderTipInfo, error :Text $Proxy.exception(\"std::exception\"), result :Bool);\n+    appShutdown @7 (context :Proxy.Context) -> ();\n+    startShutdown @8 (context :Proxy.Context) -> ();\n+    shutdownRequested @9 (context :Proxy.Context) -> (result :Bool);\n+    mapPort @10 (context :Proxy.Context, useUPnP :Bool, useNatPnP :Bool) -> ();\n+    getProxy @11 (context :Proxy.Context, net :Int32) -> (proxyInfo :ProxyType, result :Bool);\n+    getNodeCount @12 (context :Proxy.Context, flags :Int32) -> (result :UInt64);\n+    getNodesStats @13 (context :Proxy.Context) -> (stats :List(NodeStats), result :Bool);\n+    getBanned @14 (context :Proxy.Context) -> (banmap :Banmap, result :Bool);\n+    ban @15 (context :Proxy.Context, netAddr :Data, banTimeOffset :Int64) -> (result :Bool);\n+    unban @16 (context :Proxy.Context, ip :Data) -> (result :Bool);\n+    disconnectByAddress @17 (context :Proxy.Context, address :Data) -> (result :Bool);\n+    disconnectById @18 (context :Proxy.Context, id :Int64) -> (result :Bool);\n+    listExternalSigners @19 (context :Proxy.Context) -> (result :List(ExternalSigner));\n+    getTotalBytesRecv @20 (context :Proxy.Context) -> (result :Int64);\n+    getTotalBytesSent @21 (context :Proxy.Context) -> (result :Int64);\n+    getMempoolSize @22 (context :Proxy.Context) -> (result :UInt64);\n+    getMempoolDynamicUsage @23 (context :Proxy.Context) -> (result :UInt64);\n+    getHeaderTip @24 (context :Proxy.Context) -> (height :Int32, blockTime :Int64, result :Bool);\n+    getNumBlocks @25 (context :Proxy.Context) -> (result :Int32);\n+    getBestBlockHash @26 (context :Proxy.Context) -> (result :Data);\n+    getLastBlockTime @27 (context :Proxy.Context) -> (result :Int64);\n+    getVerificationProgress @28 (context :Proxy.Context) -> (result :Float64);\n+    isInitialBlockDownload @29 (context :Proxy.Context) -> (result :Bool);\n+    getReindex @30 (context :Proxy.Context) -> (result :Bool);\n+    getImporting @31 (context :Proxy.Context) -> (result :Bool);\n+    setNetworkActive @32 (context :Proxy.Context, active :Bool) -> ();\n+    getNetworkActive @33 (context :Proxy.Context) -> (result :Bool);\n+    getDustRelayFee @34 (context :Proxy.Context) -> (result :Data);\n+    executeRpc @35 (context :Proxy.Context, command :Text, params :Common.UniValue, uri :Text) -> (error :Text $Proxy.exception(\"std::exception\"), rpcError :Common.UniValue $Proxy.exception(\"UniValue\"), result :Common.UniValue);\n+    listRpcCommands @36 (context :Proxy.Context) -> (result :List(Text));\n+    rpcSetTimerInterfaceIfUnset @37 (context :Proxy.Context, iface :Void) -> ();\n+    rpcUnsetTimerInterface @38 (context :Proxy.Context, iface :Void) -> ();\n+    getUnspentOutput @39 (context :Proxy.Context, output :Data) -> (coin :Data, result :Bool);\n+    customWalletClient @40 (context :Proxy.Context) -> (result :Wallet.WalletClient) $Proxy.name(\"walletClient\");\n+    handleInitMessage @41 (context :Proxy.Context, callback :InitMessageCallback) -> (result :Handler.Handler);\n+    handleMessageBox @42 (context :Proxy.Context, callback :MessageBoxCallback) -> (result :Handler.Handler);\n+    handleQuestion @43 (context :Proxy.Context, callback :QuestionCallback) -> (result :Handler.Handler);\n+    handleShowProgress @44 (context :Proxy.Context, callback :ShowNodeProgressCallback) -> (result :Handler.Handler);\n+    handleInitWallet @45 (context :Proxy.Context, callback :InitWalletCallback) -> (result :Handler.Handler);\n+    handleNotifyNumConnectionsChanged @46 (context :Proxy.Context, callback :NotifyNumConnectionsChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyNetworkActiveChanged @47 (context :Proxy.Context, callback :NotifyNetworkActiveChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyAlertChanged @48 (context :Proxy.Context, callback :NotifyAlertChangedCallback) -> (result :Handler.Handler);\n+    handleBannedListChanged @49 (context :Proxy.Context, callback :BannedListChangedCallback) -> (result :Handler.Handler);\n+    handleNotifyBlockTip @50 (context :Proxy.Context, callback :NotifyBlockTipCallback) -> (result :Handler.Handler);\n+    handleNotifyHeaderTip @51 (context :Proxy.Context, callback :NotifyHeaderTipCallback) -> (result :Handler.Handler);\n+}\n+\n+interface ExternalSigner $Proxy.wrap(\"interfaces::ExternalSigner\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    getName @1 (context :Proxy.Context) -> (result :Text);\n+}\n+\n+interface InitMessageCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitMessageFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Text) -> ();\n+}\n+\n+interface MessageBoxCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::MessageBoxFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface QuestionCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::QuestionFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, message :Common.BilingualStr, nonInteractiveMessage :Text, caption :Text, style :UInt32) -> (result :Bool);\n+}\n+\n+interface ShowNodeProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32, resumePossible :Bool) -> ();\n+}\n+\n+interface InitWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::InitWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyNumConnectionsChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNumConnectionsChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, newNumConnections :Int32) -> ();\n+}\n+\n+interface NotifyNetworkActiveChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyNetworkActiveChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, networkActive :Bool) -> ();\n+}\n+\n+interface NotifyAlertChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyAlertChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface BannedListChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::BannedListChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface NotifyBlockTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyBlockTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+interface NotifyHeaderTipCallback $Proxy.wrap(\"ProxyCallback<interfaces::Node::NotifyHeaderTipFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, syncState: Int32, tip: BlockTip, verificationProgress :Float64) -> ();\n+}\n+\n+struct ProxyType $Proxy.wrap(\"proxyType\") {\n+    proxy @0 :Data;\n+    randomizeCredentials @1 :Bool $Proxy.name(\"randomize_credentials\");\n+}\n+\n+struct NodeStats $Proxy.wrap(\"CNodeStats\") {\n+    nodeid @0 :Int64 $Proxy.name(\"nodeid\");\n+    services @1 :UInt64 $Proxy.name(\"nServices\");\n+    relayTxes @2 :Bool $Proxy.name(\"fRelayTxes\");\n+    lastSend @3 :Int64 $Proxy.name(\"nLastSend\");\n+    lastRecv @4 :Int64 $Proxy.name(\"nLastRecv\");\n+    lastTXTime @5 :Int64 $Proxy.name(\"nLastTXTime\");\n+    lastBlockTime @6 :Int64 $Proxy.name(\"nLastBlockTime\");\n+    timeConnected @7 :Int64 $Proxy.name(\"nTimeConnected\");\n+    timeOffset @8 :Int64 $Proxy.name(\"nTimeOffset\");\n+    addrName @9 :Text $Proxy.name(\"m_addr_name\");\n+    version @10 :Int32 $Proxy.name(\"nVersion\");\n+    cleanSubVer @11 :Text $Proxy.name(\"cleanSubVer\");\n+    inbound @12 :Bool $Proxy.name(\"fInbound\");\n+    bip152HighbandwidthTo @13 :Bool $Proxy.name(\"m_bip152_highbandwidth_to\");\n+    bip152HighbandwidthFrom @14 :Bool $Proxy.name(\"m_bip152_highbandwidth_from\");\n+    startingHeight @15 :Int32 $Proxy.name(\"m_starting_height\");\n+    sendBytes @16 :UInt64 $Proxy.name(\"nSendBytes\");\n+    sendBytesPerMsgCmd @17 :List(Common.PairStr64) $Proxy.name(\"mapSendBytesPerMsgCmd\");\n+    recvBytes @18 :UInt64 $Proxy.name(\"nRecvBytes\");\n+    recvBytesPerMsgCmd @19 :List(Common.PairStr64) $Proxy.name(\"mapRecvBytesPerMsgCmd\");\n+    permissionFlags @20 :Int32 $Proxy.name(\"m_permissionFlags\");\n+    pingTime @21 :Int64 $Proxy.name(\"m_last_ping_time\");\n+    minPingTime @22 :Int64 $Proxy.name(\"m_min_ping_time\");\n+    minFeeFilter @23 :Int64 $Proxy.name(\"minFeeFilter\");\n+    addrLocal @24 :Text $Proxy.name(\"addrLocal\");\n+    addr @25 :Data $Proxy.name(\"addr\");\n+    addrBind @26 :Data $Proxy.name(\"addrBind\");\n+    network @27 :Int32 $Proxy.name(\"m_network\");\n+    mappedAs @28 :UInt32 $Proxy.name(\"m_mapped_as\");\n+    connType @29 :Int32 $Proxy.name(\"m_conn_type\");\n+    stateStats @30 :NodeStateStats $Proxy.skip;\n+}\n+\n+struct NodeStateStats $Proxy.wrap(\"CNodeStateStats\") {\n+    syncHeight @0 :Int32 $Proxy.name(\"nSyncHeight\");\n+    commonHeight @1 :Int32 $Proxy.name(\"nCommonHeight\");\n+    startingHeight @2 :Int32 $Proxy.name(\"m_starting_height\");\n+    pingWait @3 :Int64 $Proxy.name(\"m_ping_wait\");\n+    heightInFlight @4 :List(Int32) $Proxy.name(\"vHeightInFlight\");\n+    addressesProcessed @5 :UInt64 $Proxy.name(\"m_addr_processed\");\n+    addressesRateLimited @6 :UInt64 $Proxy.name(\"m_addr_rate_limited\");\n+    addressRelayEnabled @7 :Bool $Proxy.name(\"m_addr_relay_enabled\");\n+}\n+\n+struct Banmap {\n+    json @0 :Text;\n+}\n+\n+struct BlockTip $Proxy.wrap(\"interfaces::BlockTip\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    blockHash @2 :Data $Proxy.name(\"block_hash\");\n+}\n+\n+struct BlockAndHeaderTipInfo $Proxy.wrap(\"interfaces::BlockAndHeaderTipInfo\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blockTime @1 :Int64 $Proxy.name(\"block_time\");\n+    headerHeight @2 :Int32 $Proxy.name(\"header_height\");\n+    headerTime @3 :Int64 $Proxy.name(\"header_time\");\n+    verificationProgress @4 :Float64 $Proxy.name(\"verification_progress\");\n+}"
      },
      {
        "sha": "a32125009c90fff11e9cea32c2f1f6f870af95ce",
        "filename": "src/ipc/capnp/node.cpp",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/list.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/context.h>\n+#include <ipc/capnp/node-types.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <ipc/capnp/node.capnp.proxy-types.h>\n+#include <ipc/capnp/node.capnp.proxy.h>\n+#include <ipc/capnp/node.h>\n+#include <kj/async-io.h>\n+#include <kj/async-prelude.h>\n+#include <kj/async.h>\n+#include <kj/memory.h>\n+#include <kj/time.h>\n+#include <kj/timer.h>\n+#include <kj/units.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/util.h>\n+#include <rpc/server.h>\n+#include <sys/types.h>\n+\n+#include <cstdint>\n+#include <functional>\n+#include <memory>\n+#include <tuple>\n+#include <utility>\n+\n+class CNodeStats;\n+struct CNodeStateStats;\n+\n+namespace ipc {\n+namespace capnp {\n+void SetupNodeClient(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_client = mp::MakeProxyClient<messages::Node, interfaces::Node>;\n+}\n+\n+void SetupNodeServer(ipc::Context& context)\n+{\n+    static_cast<Context&>(context).make_node_server = mp::MakeProxyServer<messages::Node, interfaces::Node>;\n+}\n+\n+class RpcTimer : public ::RPCTimerBase\n+{\n+public:\n+    RpcTimer(mp::EventLoop& loop, std::function<void(void)>& fn, int64_t millis)\n+        : m_fn(fn), m_promise(loop.m_io_context.provider->getTimer()\n+                                  .afterDelay(millis * kj::MILLISECONDS)\n+                                  .then([this]() { m_fn(); })\n+                                  .eagerlyEvaluate(nullptr))\n+    {\n+    }\n+    ~RpcTimer() noexcept override {}\n+\n+    std::function<void(void)> m_fn;\n+    kj::Promise<void> m_promise;\n+};\n+\n+class RpcTimerInterface : public ::RPCTimerInterface\n+{\n+public:\n+    RpcTimerInterface(mp::EventLoop& loop) : m_loop(loop) {}\n+    const char* Name() override { return \"Cap'n Proto\"; }\n+    RPCTimerBase* NewTimer(std::function<void(void)>& fn, int64_t millis) override\n+    {\n+        RPCTimerBase* result;\n+        m_loop.sync([&] { result = new RpcTimer(m_loop, fn, millis); });\n+        return result;\n+    }\n+    mp::EventLoop& m_loop;\n+};\n+} // namespace capnp\n+} // namespace ipc\n+\n+namespace mp {\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcSetTimerInterfaceIfUnsetParams>::invoke(Context& context)\n+{\n+    if (!context.proxy_server.m_timer_interface) {\n+        auto timer = std::make_unique<ipc::capnp::RpcTimerInterface>(context.proxy_server.m_context.connection->m_loop);\n+        context.proxy_server.m_timer_interface = std::move(timer);\n+    }\n+    context.proxy_server.m_impl->rpcSetTimerInterfaceIfUnset(context.proxy_server.m_timer_interface.get());\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::Node::RpcUnsetTimerInterfaceParams>::invoke(Context& context)\n+{\n+    context.proxy_server.m_impl->rpcUnsetTimerInterface(context.proxy_server.m_timer_interface.get());\n+    context.proxy_server.m_timer_interface.reset();\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       ipc::capnp::messages::NodeStats::Reader const& reader,\n+                       std::tuple<CNodeStats, bool, CNodeStateStats>& node_stats)\n+{\n+    CNodeStats& node = std::get<0>(node_stats);\n+    ReadField(TypeList<CNodeStats>(), invoke_context, Make<ValueField>(reader), ReadDestValue(node));\n+    if ((std::get<1>(node_stats) = reader.hasStateStats())) {\n+        CNodeStateStats& state = std::get<2>(node_stats);\n+        ReadField(TypeList<CNodeStateStats>(), invoke_context, Make<ValueField>(reader.getStateStats()),\n+                  ReadDestValue(state));\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const capnp::Data::Reader& reader,\n+                       CSubNet& subnet)\n+{\n+    std::string subnet_str = ipc::capnp::ToString(reader);\n+    if (!LookupSubNet(subnet_str, subnet)) {\n+        throw std::runtime_error(\n+            strprintf(\"Cannot parse banned address or subnet: %s\", subnet_str));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const banmap_t& banmap,\n+                        ipc::capnp::messages::Banmap::Builder&& builder)\n+{\n+    builder.setJson(BanMapToJson(banmap).write());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::Banmap::Reader& reader,\n+                       banmap_t& banmap)\n+{\n+    UniValue banmap_json;\n+    if (!banmap_json.read(ipc::capnp::ToString(reader.getJson()))) {\n+        throw std::runtime_error(\"Could not parse banmap json\");\n+    }\n+    BanMapFromJson(banmap_json, banmap);\n+}\n+\n+interfaces::WalletClient& ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>::walletClient()\n+{\n+    if (!m_wallet_client) {\n+        m_wallet_client = self().customWalletClient();\n+    }\n+    return *m_wallet_client;\n+}\n+} // namespace mp"
      },
      {
        "sha": "65c87113018e7dbe13b7a4d8ca42f370555e5764",
        "filename": "src/ipc/capnp/node.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/node.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_NODE_H\n+#define BITCOIN_IPC_CAPNP_NODE_H\n+\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/node.capnp.h>\n+#include <mp/proxy.h>\n+#include <rpc/server.h>\n+#include <scheduler.h>\n+\n+#include <memory>\n+#include <string>\n+\n+class RPCTimerInterface;\n+\n+//! Specialization of Node proxy server needed to add m_timer_interface\n+//! member used by rpcSetTimerInterfaceIfUnset and rpcUnsetTimerInterface\n+//! methods.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    std::unique_ptr<RPCTimerInterface> m_timer_interface;\n+};\n+\n+//! Specialization of Node client to manage memory of WalletClient& reference\n+//! returned by walletClient().\n+template <>\n+class mp::ProxyClientCustom<ipc::capnp::messages::Node, interfaces::Node>\n+    : public mp::ProxyClientBase<ipc::capnp::messages::Node, interfaces::Node>\n+{\n+public:\n+    using ProxyClientBase::ProxyClientBase;\n+    interfaces::WalletClient& walletClient() override;\n+\n+private:\n+    std::unique_ptr<interfaces::WalletClient> m_wallet_client;\n+};\n+\n+//! Specialization of Node::walletClient client code to manage memory of\n+//! WalletClient& reference returned by walletClient().\n+template <>\n+struct mp::ProxyClientMethodTraits<ipc::capnp::messages::Node::CustomWalletClientParams>\n+    : public FunctionTraits<std::unique_ptr<interfaces::WalletClient> (interfaces::Node::*const)()>\n+{\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_NODE_H"
      },
      {
        "sha": "ff78c059b7989752b13f7c9866ea3c46d479e379",
        "filename": "src/ipc/capnp/protocol.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/protocol.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -23,6 +23,8 @@\n #include <mutex>\n #include <optional>\n #include <string>\n+#include <sys/socket.h>\n+#include <system_error>\n #include <thread>\n \n namespace ipc {\n@@ -51,6 +53,14 @@ class CapnpProtocol : public Protocol\n         startLoop(exe_name);\n         return mp::ConnectStream<messages::Init>(*m_loop, fd);\n     }\n+    void listen(int listen_fd, const char* exe_name, interfaces::Init& init) override\n+    {\n+        startLoop(exe_name);\n+        if (::listen(listen_fd, 5 /* backlog */) != 0) {\n+            throw std::system_error(errno, std::system_category());\n+        }\n+        mp::ListenConnections<messages::Init>(*m_loop, listen_fd, init);\n+    }\n     void serve(int fd, const char* exe_name, interfaces::Init& init) override\n     {\n         assert(!m_loop);"
      },
      {
        "sha": "25026e0d66bc4c1ae7daa13dd989aeeaee3de9ec",
        "filename": "src/ipc/capnp/wallet-types.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet-types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet-types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet-types.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+#define BITCOIN_IPC_CAPNP_WALLET_TYPES_H\n+\n+#include <ipc/capnp/chain.capnp.proxy-types.h>\n+#include <ipc/capnp/common.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <scheduler.h>\n+#include <wallet/wallet.h>\n+\n+class CCoinControl;\n+class CKey;\n+\n+namespace mp {\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest);\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key);\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder);\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control);\n+\n+template <typename Reader, typename ReadDest>\n+decltype(auto) CustomReadField(\n+    TypeList<PKHash>, Priority<1>, InvokeContext& invoke_context, Reader&& reader, ReadDest&& read_dest)\n+{\n+    return read_dest.construct(ipc::capnp::ToBlob<uint160>(reader.get()));\n+}\n+} // namespace mp\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_TYPES_H"
      },
      {
        "sha": "9f3312fb0a9ba149c3668c8680b5a1d90078a4c0",
        "filename": "src/ipc/capnp/wallet.capnp",
        "status": "added",
        "additions": 231,
        "deletions": 0,
        "changes": 231,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.capnp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.capnp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.capnp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,231 @@\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+@0xe234cce74feea00c;\n+\n+using Cxx = import \"/capnp/c++.capnp\";\n+$Cxx.namespace(\"ipc::capnp::messages\");\n+\n+using Proxy = import \"/mp/proxy.capnp\";\n+$Proxy.include(\"ipc/capnp/wallet.h\");\n+$Proxy.includeTypes(\"ipc/capnp/wallet-types.h\");\n+\n+using Chain = import \"chain.capnp\";\n+using Common = import \"common.capnp\";\n+using Handler = import \"handler.capnp\";\n+\n+interface Wallet $Proxy.wrap(\"interfaces::Wallet\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    encryptWallet @1 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isCrypted @2 (context :Proxy.Context) -> (result :Bool);\n+    lock @3 (context :Proxy.Context) -> (result :Bool);\n+    unlock @4 (context :Proxy.Context, walletPassphrase :Data) -> (result :Bool);\n+    isLocked @5 (context :Proxy.Context) -> (result :Bool);\n+    changeWalletPassphrase @6 (context :Proxy.Context, oldWalletPassphrase :Data, newWalletPassphrase :Data) -> (result :Bool);\n+    abortRescan @7 (context :Proxy.Context) -> ();\n+    backupWallet @8 (context :Proxy.Context, filename :Text) -> (result :Bool);\n+    getWalletName @9 (context :Proxy.Context) -> (result :Text);\n+    getNewDestination @10 (context :Proxy.Context, outputType :Int32, label :Text) -> (dest :TxDestination, result :Bool);\n+    getPubKey @11 (context :Proxy.Context, script :Data, address :Data) -> (pubKey :Data, result :Bool);\n+    signMessage @12 (context :Proxy.Context, message :Text, pkhash :Data) -> (signature :Text, result :Int32);\n+    isSpendable @13 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    haveWatchOnly @14 (context :Proxy.Context) -> (result :Bool);\n+    setAddressBook @15 (context :Proxy.Context, dest :TxDestination, name :Text, purpose :Text) -> (result :Bool);\n+    delAddressBook @16 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    getAddress @17 (context :Proxy.Context, dest :TxDestination, wantName :Bool, wantIsMine :Bool, wantPurpose :Bool) -> (name :Text, isMine :Int32, purpose :Text, result :Bool);\n+    getAddresses @18 (context :Proxy.Context) -> (result :List(WalletAddress));\n+    getAddressReceiveRequests @19 (context :Proxy.Context) -> (result :List(Data));\n+    setAddressReceiveRequest @20 (context :Proxy.Context, dest :TxDestination, id :Data, value :Data) -> (result :Bool);\n+    displayAddress @21 (context :Proxy.Context, dest :TxDestination) -> (result :Bool);\n+    lockCoin @22 (context :Proxy.Context, output :Data, writeToDb :Bool) -> (result :Bool);\n+    unlockCoin @23 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    isLockedCoin @24 (context :Proxy.Context, output :Data) -> (result :Bool);\n+    listLockedCoins @25 (context :Proxy.Context) -> (outputs :List(Data));\n+    createTransaction @26 (context :Proxy.Context, recipients :List(Recipient), coinControl :CoinControl, sign :Bool, changePos :Int32) -> (changePos :Int32, fee :Int64, failReason :Common.BilingualStr, result :Data);\n+    commitTransaction @27 (context :Proxy.Context, tx :Data, valueMap :List(Common.Pair(Text, Text)), orderForm :List(Common.Pair(Text, Text))) -> ();\n+    transactionCanBeAbandoned @28 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    abandonTransaction @29 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    transactionCanBeBumped @30 (context :Proxy.Context, txid :Data) -> (result :Bool);\n+    createBumpTransaction @31 (context :Proxy.Context, txid :Data, coinControl :CoinControl) -> (errors :List(Common.BilingualStr), oldFee :Int64, newFee :Int64, mtx :Data, result :Bool);\n+    signBumpTransaction @32 (context :Proxy.Context, mtx :Data) -> (mtx :Data, result :Bool);\n+    commitBumpTransaction @33 (context :Proxy.Context, txid :Data, mtx :Data) -> (errors :List(Common.BilingualStr), bumpedTxid :Data, result :Bool);\n+    getTx @34 (context :Proxy.Context, txid :Data) -> (result :Data);\n+    getWalletTx @35 (context :Proxy.Context, txid :Data) -> (result :WalletTx);\n+    getWalletTxs @36 (context :Proxy.Context) -> (result :List(WalletTx));\n+    tryGetTxStatus @37 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, numBlocks :Int32, blockTime :Int64, result :Bool);\n+    getWalletTxDetails @38 (context :Proxy.Context, txid :Data) -> (txStatus :WalletTxStatus, orderForm :List(Common.Pair(Text, Text)), inMempool :Bool, numBlocks :Int32, result :WalletTx);\n+    getBalances @39 (context :Proxy.Context) -> (result :WalletBalances);\n+    fillPSBT @40 (context :Proxy.Context, sighashType :Int32, sign :Bool, bip32derivs :Bool, wantNSigned :Bool) -> (nSigned: UInt64, psbt :Data, complete :Bool, result :Int32);\n+    tryGetBalances @41 (context :Proxy.Context) -> (balances :WalletBalances, blockHash :Data, result :Bool);\n+    getBalance @42 (context :Proxy.Context) -> (result :Int64);\n+    getAvailableBalance @43 (context :Proxy.Context, coinControl :CoinControl) -> (result :Int64);\n+    txinIsMine @44 (context :Proxy.Context, txin :Data) -> (result :Int32);\n+    txoutIsMine @45 (context :Proxy.Context, txout :Data) -> (result :Int32);\n+    getDebit @46 (context :Proxy.Context, txin :Data, filter :Int32) -> (result :Int64);\n+    getCredit @47 (context :Proxy.Context, txout :Data, filter :Int32) -> (result :Int64);\n+    listCoins @48 (context :Proxy.Context) -> (result :List(Common.Pair(TxDestination, List(Common.Pair(Data, WalletTxOut)))));\n+    getCoins @49 (context :Proxy.Context, outputs :List(Data)) -> (result :List(WalletTxOut));\n+    getRequiredFee @50 (context :Proxy.Context, txBytes :UInt32) -> (result :Int64);\n+    getMinimumFee @51 (context :Proxy.Context, txBytes :UInt32, coinControl :CoinControl, wantReturnedTarget :Bool, wantReason :Bool) -> (returnedTarget :Int32, reason :Int32, result :Int64);\n+    getConfirmTarget @52 (context :Proxy.Context) -> (result :UInt32);\n+    hdEnabled @53 (context :Proxy.Context) -> (result :Bool);\n+    canGetAddresses @54 (context :Proxy.Context) -> (result :Bool);\n+    privateKeysDisabled @55 (context :Proxy.Context) -> (result :Bool);\n+    hasExternalSigner @56 (context :Proxy.Context) -> (result :Bool);\n+    getDefaultAddressType @57 (context :Proxy.Context) -> (result :Int32);\n+    getDefaultMaxTxFee @58 (context :Proxy.Context) -> (result :Int64);\n+    remove @59 (context :Proxy.Context) -> ();\n+    isLegacy @60 (context :Proxy.Context) -> (result :Bool);\n+    handleUnload @61 (context :Proxy.Context, callback :UnloadWalletCallback) -> (result :Handler.Handler);\n+    handleShowProgress @62 (context :Proxy.Context, callback :ShowWalletProgressCallback) -> (result :Handler.Handler);\n+    handleStatusChanged @63 (context :Proxy.Context, callback :StatusChangedCallback) -> (result :Handler.Handler);\n+    handleAddressBookChanged @64 (context :Proxy.Context, callback :AddressBookChangedCallback) -> (result :Handler.Handler);\n+    handleTransactionChanged @65 (context :Proxy.Context, callback :TransactionChangedCallback) -> (result :Handler.Handler);\n+    handleWatchOnlyChanged @66 (context :Proxy.Context, callback :WatchOnlyChangedCallback) -> (result :Handler.Handler);\n+    handleCanGetAddressesChanged @67 (context :Proxy.Context, callback :CanGetAddressesChangedCallback) -> (result :Handler.Handler);\n+}\n+\n+interface UnloadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::UnloadFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface ShowWalletProgressCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::ShowProgressFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, title :Text, progress :Int32) -> ();\n+}\n+\n+interface StatusChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::StatusChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface AddressBookChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::AddressBookChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, address :TxDestination, label :Text, isMine :Bool, purpose :Text, status :Int32) -> ();\n+}\n+\n+interface TransactionChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::TransactionChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, txid :Data, status :Int32) -> ();\n+}\n+\n+interface WatchOnlyChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::WatchOnlyChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, haveWatchOnly :Bool) -> ();\n+}\n+\n+interface CanGetAddressesChangedCallback $Proxy.wrap(\"ProxyCallback<interfaces::Wallet::CanGetAddressesChangedFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context) -> ();\n+}\n+\n+interface WalletClient extends(Chain.ChainClient) $Proxy.wrap(\"interfaces::WalletClient\") {\n+    createWallet @0 (context :Proxy.Context, name :Text, passphrase :Text, flags :UInt64) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    loadWallet @1 (context :Proxy.Context, name :Text) -> (error :Common.BilingualStr, warning :List(Common.BilingualStr), result :Wallet);\n+    getWalletDir @2 (context :Proxy.Context) -> (result :Text);\n+    listWalletDir @3 (context :Proxy.Context) -> (result :List(Text));\n+    getWallets @4 (context :Proxy.Context) -> (result :List(Wallet));\n+    handleLoadWallet @5 (context :Proxy.Context, callback :LoadWalletCallback) -> (result :Handler.Handler);\n+}\n+\n+interface LoadWalletCallback $Proxy.wrap(\"ProxyCallback<interfaces::WalletClient::LoadWalletFn>\") {\n+    destroy @0 (context :Proxy.Context) -> ();\n+    call @1 (context :Proxy.Context, wallet :Wallet) -> ();\n+}\n+\n+struct Key {\n+    secret @0 :Data;\n+    isCompressed @1 :Bool;\n+}\n+\n+struct TxDestination {\n+    pkHash @0 :Data;\n+    scriptHash @1 :Data;\n+    witnessV0ScriptHash @2 :Data;\n+    witnessV0KeyHash @3 :Data;\n+    witnessUnknown @4 :WitnessUnknown;\n+}\n+\n+struct WitnessUnknown $Proxy.wrap(\"WitnessUnknown\")\n+{\n+    version @0 :UInt32;\n+    length @1 :UInt32;\n+    program @2 :Data;\n+}\n+\n+struct WalletAddress $Proxy.wrap(\"interfaces::WalletAddress\") {\n+    dest @0 :TxDestination;\n+    isMine @1 :Int32 $Proxy.name(\"is_mine\");\n+    name @2 :Text;\n+    purpose @3 :Text;\n+}\n+\n+struct Recipient $Proxy.wrap(\"CRecipient\") {\n+    scriptPubKey @0 :Data;\n+    amount @1 :Int64 $Proxy.name(\"nAmount\");\n+    subtractFeeFromAmount @2 :Bool $Proxy.name(\"fSubtractFeeFromAmount\");\n+}\n+\n+struct CoinControl {\n+    destChange @0 :TxDestination;\n+    hasChangeType @1 :Bool;\n+    changeType @2 :Int32;\n+    allowOtherInputs @3 :Bool;\n+    allowWatchOnly @4 :Bool;\n+    overrideFeeRate @5 :Bool;\n+    hasFeeRate @6 :Bool;\n+    feeRate @7 :Data;\n+    hasConfirmTarget @8 :Bool;\n+    confirmTarget @9 :Int32;\n+    hasSignalRbf @10 :Bool;\n+    signalRbf @11 :Bool;\n+    feeMode @12 :Int32;\n+    minDepth @13 :Int32;\n+    setSelected @14 :List(Data);\n+}\n+\n+struct WalletTx $Proxy.wrap(\"interfaces::WalletTx\") {\n+    tx @0 :Data;\n+    txinIsMine @1 :List(Int32) $Proxy.name(\"txin_is_mine\");\n+    txoutIsMine @2 :List(Int32) $Proxy.name(\"txout_is_mine\");\n+    txoutAddress @3 :List(TxDestination) $Proxy.name(\"txout_address\");\n+    txoutAddressIsMine @4 :List(Int32) $Proxy.name(\"txout_address_is_mine\");\n+    credit @5 :Int64;\n+    debit @6 :Int64;\n+    change @7 :Int64;\n+    time @8 :Int64;\n+    valueMap @9 :List(Common.Pair(Text, Text)) $Proxy.name(\"value_map\");\n+    isCoinbase @10 :Bool $Proxy.name(\"is_coinbase\");\n+}\n+\n+struct WalletTxOut $Proxy.wrap(\"interfaces::WalletTxOut\") {\n+    txout @0 :Data;\n+    time @1 :Int64;\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    isSpent @3 :Bool $Proxy.name(\"is_spent\");\n+}\n+\n+struct WalletTxStatus $Proxy.wrap(\"interfaces::WalletTxStatus\") {\n+    blockHeight @0 :Int32 $Proxy.name(\"block_height\");\n+    blocksToMaturity @1 :Int32 $Proxy.name(\"blocks_to_maturity\");\n+    depthInMainChain @2 :Int32 $Proxy.name(\"depth_in_main_chain\");\n+    timeReceived @3 :UInt32 $Proxy.name(\"time_received\");\n+    lockTime @4 :UInt32 $Proxy.name(\"lock_time\");\n+    isFinal @5 :Bool $Proxy.name(\"is_final\");\n+    isTrusted @6 :Bool $Proxy.name(\"is_trusted\");\n+    isAbandoned @7 :Bool $Proxy.name(\"is_abandoned\");\n+    isCoinbase @8 :Bool $Proxy.name(\"is_coinbase\");\n+    isInMainChain @9 :Bool $Proxy.name(\"is_in_main_chain\");\n+}\n+\n+struct WalletBalances $Proxy.wrap(\"interfaces::WalletBalances\") {\n+    balance @0 :Int64;\n+    unconfirmedBalance @1 :Int64 $Proxy.name(\"unconfirmed_balance\");\n+    immatureBalance @2 :Int64 $Proxy.name(\"immature_balance\");\n+    haveWatchOnly @3 :Bool $Proxy.name(\"have_watch_only\");\n+    watchOnlyBalance @4 :Int64 $Proxy.name(\"watch_only_balance\");\n+    unconfirmedWatchOnlyBalance @5 :Int64 $Proxy.name(\"unconfirmed_watch_only_balance\");\n+    immatureWatchOnlyBalance @6 :Int64 $Proxy.name(\"immature_watch_only_balance\");\n+}"
      },
      {
        "sha": "941cc4c06267a16f4c5450757e13313367215c48",
        "filename": "src/ipc/capnp/wallet.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <capnp/blob.h>\n+#include <capnp/list.h>\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain-types.h>\n+#include <ipc/capnp/chain.capnp.h>\n+#include <ipc/capnp/common-types.h>\n+#include <ipc/capnp/wallet-types.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <ipc/capnp/wallet.capnp.proxy-types.h>\n+#include <ipc/capnp/wallet.capnp.proxy.h>\n+#include <ipc/capnp/wallet.h>\n+#include <key.h>\n+#include <mp/proxy-io.h>\n+#include <mp/proxy-types.h>\n+#include <mp/proxy.h>\n+#include <mp/util.h>\n+#include <outputtype.h>\n+#include <policy/feerate.h>\n+#include <primitives/transaction.h>\n+#include <scheduler.h>\n+#include <script/standard.h>\n+#include <streams.h>\n+#include <uint256.h>\n+#include <util/threadnames.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/context.h>\n+\n+#include <cstdint>\n+#include <future>\n+#include <memory>\n+#include <optional>\n+#include <string.h>\n+#include <system_error>\n+#include <variant>\n+#include <vector>\n+\n+namespace mp {\n+void ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>::invokeDestroy()\n+{\n+    if (m_scheduler) {\n+        m_scheduler->stop();\n+        m_result.get();\n+        m_scheduler.reset();\n+    }\n+    ProxyServerBase::invokeDestroy();\n+}\n+\n+void ProxyServerMethodTraits<ipc::capnp::messages::ChainClient::StartParams>::invoke(WalletContext& context)\n+{\n+    if (!context.proxy_server.m_scheduler) {\n+        context.proxy_server.m_scheduler = std::make_unique<CScheduler>();\n+        CScheduler* scheduler = context.proxy_server.m_scheduler.get();\n+        context.proxy_server.m_result = std::async([scheduler]() {\n+            util::ThreadRename(\"schedqueue\");\n+            scheduler->serviceQueue();\n+        });\n+    }\n+    context.proxy_server.m_impl->start(*context.proxy_server.m_scheduler);\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CTxDestination& dest,\n+                        ipc::capnp::messages::TxDestination::Builder&& builder)\n+{\n+    if (const PKHash* pkHash = std::get_if<PKHash>(&dest)) {\n+        builder.setPkHash(ipc::capnp::ToArray(*pkHash));\n+    } else if (const ScriptHash* scriptHash = std::get_if<ScriptHash>(&dest)) {\n+        builder.setScriptHash(ipc::capnp::ToArray(*scriptHash));\n+    } else if (const WitnessV0ScriptHash* witnessV0ScriptHash = std::get_if<WitnessV0ScriptHash>(&dest)) {\n+        builder.setWitnessV0ScriptHash(ipc::capnp::ToArray(*witnessV0ScriptHash));\n+    } else if (const WitnessV0KeyHash* witnessV0KeyHash = std::get_if<WitnessV0KeyHash>(&dest)) {\n+        builder.setWitnessV0KeyHash(ipc::capnp::ToArray(*witnessV0KeyHash));\n+    } else if (const WitnessUnknown* witnessUnknown = std::get_if<WitnessUnknown>(&dest)) {\n+        BuildField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(builder.initWitnessUnknown()),\n+                   *witnessUnknown);\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::TxDestination::Reader& reader,\n+                       CTxDestination& dest)\n+{\n+    if (reader.hasPkHash()) {\n+        dest = PKHash(ipc::capnp::ToBlob<uint160>(reader.getPkHash()));\n+    } else if (reader.hasScriptHash()) {\n+        dest = ScriptHash(ipc::capnp::ToBlob<uint160>(reader.getScriptHash()));\n+    } else if (reader.hasWitnessV0ScriptHash()) {\n+        dest = WitnessV0ScriptHash(ipc::capnp::ToBlob<uint256>(reader.getWitnessV0ScriptHash()));\n+    } else if (reader.hasWitnessV0KeyHash()) {\n+        dest = WitnessV0KeyHash(ipc::capnp::ToBlob<uint160>(reader.getWitnessV0KeyHash()));\n+    } else if (reader.hasWitnessUnknown()) {\n+        ReadField(TypeList<WitnessUnknown>(), invoke_context, Make<ValueField>(reader.getWitnessUnknown()),\n+                  ReadDestValue(std::get<WitnessUnknown>(dest)));\n+    }\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context, const CKey& key, ipc::capnp::messages::Key::Builder&& builder)\n+{\n+    builder.setSecret(ipc::capnp::FromBlob(key));\n+    builder.setIsCompressed(key.IsCompressed());\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context, const ipc::capnp::messages::Key::Reader& reader, CKey& key)\n+{\n+    auto secret = reader.getSecret();\n+    key.Set(secret.begin(), secret.end(), reader.getIsCompressed());\n+}\n+\n+void CustomBuildMessage(InvokeContext& invoke_context,\n+                        const CCoinControl& coin_control,\n+                        ipc::capnp::messages::CoinControl::Builder&& builder)\n+{\n+    CustomBuildMessage(invoke_context, coin_control.destChange, builder.initDestChange());\n+    if (coin_control.m_change_type) {\n+        builder.setHasChangeType(true);\n+        builder.setChangeType(static_cast<int>(*coin_control.m_change_type));\n+    }\n+    builder.setAllowOtherInputs(coin_control.fAllowOtherInputs);\n+    builder.setAllowWatchOnly(coin_control.fAllowWatchOnly);\n+    builder.setOverrideFeeRate(coin_control.fOverrideFeeRate);\n+    if (coin_control.m_feerate) {\n+        builder.setFeeRate(ipc::capnp::ToArray(ipc::capnp::Serialize(*coin_control.m_feerate)));\n+    }\n+    if (coin_control.m_confirm_target) {\n+        builder.setHasConfirmTarget(true);\n+        builder.setConfirmTarget(*coin_control.m_confirm_target);\n+    }\n+    if (coin_control.m_signal_bip125_rbf) {\n+        builder.setHasSignalRbf(true);\n+        builder.setSignalRbf(*coin_control.m_signal_bip125_rbf);\n+    }\n+    builder.setFeeMode(int32_t(coin_control.m_fee_mode));\n+    builder.setMinDepth(coin_control.m_min_depth);\n+    std::vector<COutPoint> selected;\n+    coin_control.ListSelected(selected);\n+    auto builder_selected = builder.initSetSelected(selected.size());\n+    size_t i = 0;\n+    for (const COutPoint& output : selected) {\n+        builder_selected.set(i, ipc::capnp::ToArray(ipc::capnp::Serialize(output)));\n+        ++i;\n+    }\n+}\n+\n+void CustomReadMessage(InvokeContext& invoke_context,\n+                       const ipc::capnp::messages::CoinControl::Reader& reader,\n+                       CCoinControl& coin_control)\n+{\n+    CustomReadMessage(invoke_context, reader.getDestChange(), coin_control.destChange);\n+    if (reader.getHasChangeType()) {\n+        coin_control.m_change_type = OutputType(reader.getChangeType());\n+    }\n+    coin_control.fAllowOtherInputs = reader.getAllowOtherInputs();\n+    coin_control.fAllowWatchOnly = reader.getAllowWatchOnly();\n+    coin_control.fOverrideFeeRate = reader.getOverrideFeeRate();\n+    if (reader.hasFeeRate()) {\n+        coin_control.m_feerate = ipc::capnp::Unserialize<CFeeRate>(reader.getFeeRate());\n+    }\n+    if (reader.getHasConfirmTarget()) {\n+        coin_control.m_confirm_target = reader.getConfirmTarget();\n+    }\n+    if (reader.getHasSignalRbf()) {\n+        coin_control.m_signal_bip125_rbf = reader.getSignalRbf();\n+    }\n+    coin_control.m_fee_mode = FeeEstimateMode(reader.getFeeMode());\n+    coin_control.m_min_depth = reader.getMinDepth();\n+    for (const auto output : reader.getSetSelected()) {\n+        coin_control.Select(ipc::capnp::Unserialize<COutPoint>(output));\n+    }\n+}\n+} // namespace mp"
      },
      {
        "sha": "6c161933cd480746e3f30d1b4e1a9a6098a48f4f",
        "filename": "src/ipc/capnp/wallet.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/capnp/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/capnp/wallet.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_IPC_CAPNP_WALLET_H\n+#define BITCOIN_IPC_CAPNP_WALLET_H\n+\n+#include <interfaces/wallet.h>\n+#include <ipc/capnp/chain.capnp.proxy.h>\n+#include <ipc/capnp/wallet.capnp.h>\n+#include <mp/proxy.h>\n+\n+#include <future>\n+#include <memory>\n+\n+class CScheduler;\n+namespace interfaces {\n+class WalletClient;\n+} // namespace interfaces\n+namespace ipc {\n+namespace capnp {\n+namespace messages {\n+struct WalletClient;\n+} // namespace messages\n+} // namespace capnp\n+} // namespace ipc\n+\n+//! Specialization of WalletClient proxy server needed hold a CSCheduler instance.\n+template <>\n+struct mp::ProxyServerCustom<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+    : public mp::ProxyServerBase<ipc::capnp::messages::WalletClient, interfaces::WalletClient>\n+{\n+public:\n+    using ProxyServerBase::ProxyServerBase;\n+    void invokeDestroy();\n+\n+    std::unique_ptr<CScheduler> m_scheduler;\n+    std::future<void> m_result;\n+};\n+\n+#endif // BITCOIN_IPC_CAPNP_WALLET_H"
      },
      {
        "sha": "b382c25e737784fcc23cc636b7b4993cd0f423d1",
        "filename": "src/ipc/context.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/context.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_CONTEXT_H\n #define BITCOIN_IPC_CONTEXT_H\n \n+#include <functional>\n+\n namespace ipc {\n //! Context struct used to give IPC protocol implementations or implementation\n //! hooks access to application state, in case they need to run extra code that\n@@ -13,6 +15,9 @@ namespace ipc {\n //! with shared objects that are created or destroyed remotely.\n struct Context\n {\n+    //! Callback to initialize spawned process after receiving ArgsManager\n+    //! configuration from parent.\n+    std::function<void()> init_process;\n };\n } // namespace ipc\n "
      },
      {
        "sha": "03071d968b5926c5b75bb20a276a3b1c0ae47f64",
        "filename": "src/ipc/interfaces.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/interfaces.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -28,8 +28,8 @@ namespace {\n class IpcImpl : public interfaces::Ipc\n {\n public:\n-    IpcImpl(const char* exe_name, const char* process_argv0, interfaces::Init& init)\n-        : m_exe_name(exe_name), m_process_argv0(process_argv0), m_init(init),\n+    IpcImpl(const char* exe_name, const char* log_suffix, const char* process_argv0, interfaces::Init& init)\n+        : m_exe_name(exe_name), m_log_suffix(log_suffix), m_process_argv0(process_argv0), m_init(init),\n           m_protocol(ipc::capnp::MakeCapnpProtocol()), m_process(ipc::MakeProcess())\n     {\n     }\n@@ -56,12 +56,40 @@ class IpcImpl : public interfaces::Ipc\n         exit_status = EXIT_SUCCESS;\n         return true;\n     }\n+    std::unique_ptr<interfaces::Init> connectAddress(std::string& address) override\n+    {\n+        if (address.empty() || address == \"0\") return nullptr;\n+        int fd = -1;\n+        std::string error;\n+        if (address == \"auto\") {\n+            // failure to connect with \"auto\" isn't an error. Caller can spawn a child process or just work offline.\n+            address = \"unix\";\n+            fd = m_process->connect(gArgs.GetDataDirNet(), \"bitcoin-node\", address, error);\n+            if (fd < 0) return nullptr;\n+        } else {\n+            fd = m_process->connect(gArgs.GetDataDirNet(), \"bitcoin-node\", address, error);\n+        }\n+        if (fd < 0) {\n+            throw std::runtime_error(\n+                strprintf(\"Could not connect to bitcoin-node IPC address '%s'. %s\", address, error));\n+        }\n+        return m_protocol->connect(fd, m_exe_name);\n+    }\n+    bool listenAddress(std::string& address, std::string& error) override\n+    {\n+        int fd = m_process->bind(gArgs.GetDataDirNet(), m_exe_name, address, error);\n+        if (fd < 0) return false;\n+        m_protocol->listen(fd, m_exe_name, m_init);\n+        return true;\n+    }\n     void addCleanup(std::type_index type, void* iface, std::function<void()> cleanup) override\n     {\n         m_protocol->addCleanup(type, iface, std::move(cleanup));\n     }\n     Context& context() override { return m_protocol->context(); }\n+    const char* logSuffix() override { return m_log_suffix; }\n     const char* m_exe_name;\n+    const char* m_log_suffix;\n     const char* m_process_argv0;\n     interfaces::Init& m_init;\n     std::unique_ptr<Protocol> m_protocol;\n@@ -71,8 +99,8 @@ class IpcImpl : public interfaces::Ipc\n } // namespace ipc\n \n namespace interfaces {\n-std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* process_argv0, Init& init)\n+std::unique_ptr<Ipc> MakeIpc(const char* exe_name, const char* log_suffix, const char* process_argv0, Init& init)\n {\n-    return std::make_unique<ipc::IpcImpl>(exe_name, process_argv0, init);\n+    return std::make_unique<ipc::IpcImpl>(exe_name, log_suffix, process_argv0, init);\n }\n } // namespace interfaces"
      },
      {
        "sha": "a53bc28bae00b4304205e8cbbf25be50241c88ba",
        "filename": "src/ipc/process.cpp",
        "status": "modified",
        "additions": 98,
        "deletions": 0,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/process.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/process.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -5,16 +5,20 @@\n #include <fs.h>\n #include <ipc/process.h>\n #include <ipc/protocol.h>\n+#include <logging.h>\n #include <mp/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n #include <cstdint>\n+#include <errno.h>\n #include <exception>\n #include <iostream>\n #include <stdexcept>\n #include <stdlib.h>\n #include <string.h>\n+#include <sys/socket.h>\n+#include <sys/un.h>\n #include <system_error>\n #include <unistd.h>\n #include <utility>\n@@ -54,7 +58,101 @@ class ProcessImpl : public Process\n         }\n         return true;\n     }\n+    int connect(const fs::path& data_dir,\n+                const std::string& dest_exe_name,\n+                std::string& address,\n+                std::string& error) override;\n+    int bind(const fs::path& data_dir, const std::string& exe_name, std::string& address, std::string& error) override;\n };\n+\n+bool ParseAddress(std::string& address,\n+                  const fs::path& data_dir,\n+                  const std::string& dest_exe_name,\n+                  struct sockaddr_un& addr,\n+                  std::string& error)\n+{\n+    if (address.compare(0, 4, \"unix\") == 0 && (address.size() == 4 || address[4] == ':')) {\n+        fs::path socket_dir = data_dir / \"sockets\";\n+        fs::path path;\n+        if (address.size() <= 5) {\n+            path = socket_dir / strprintf(\"%s.sock\", dest_exe_name);\n+        } else {\n+            path = fs::absolute(address.substr(5), socket_dir);\n+        }\n+        std::string path_str = fs::PathToString(path);\n+        if (path_str.size() >= sizeof(addr.sun_path)) {\n+            error = strprintf(\"Address '%s' path '%s' exceeded maximum socket path length\", address, fs::quoted(fs::PathToString(path)));\n+            return false;\n+        }\n+        memset(&addr, 0, sizeof(addr));\n+        addr.sun_family = AF_UNIX;\n+        strncpy(addr.sun_path, path_str.c_str(), sizeof(addr.sun_path)-1);\n+        address = strprintf(\"unix:%s\", path_str);\n+        return true;\n+    }\n+\n+    error = strprintf(\"Unrecognized address '%s'\", address);\n+    return false;\n+}\n+\n+int ProcessImpl::connect(const fs::path& data_dir,\n+                         const std::string& dest_exe_name,\n+                         std::string& address,\n+                         std::string& error)\n+{\n+    struct sockaddr_un addr;\n+    if (!ParseAddress(address, data_dir, dest_exe_name, addr, error)) {\n+        return -1;\n+    }\n+\n+    int fd;\n+    if ((fd = ::socket(addr.sun_family, SOCK_STREAM, 0)) == -1) {\n+        throw std::system_error(errno, std::system_category());\n+    }\n+    if (::connect(fd, (struct sockaddr*)&addr, sizeof(addr)) == 0) {\n+        return fd;\n+    }\n+    int connect_error = errno;\n+    if (::close(fd) != 0) {\n+        LogPrintf(\"Error closing file descriptor %i '%s': %s\\n\", fd, address, strerror(errno));\n+    }\n+    if (connect_error == ECONNREFUSED || connect_error == ENOENT) {\n+        error = strprintf(\"Error connecting to '%s': %s\\n\", address, strerror(connect_error));\n+        return -1;\n+    }\n+    LogPrintf(\"Error connecting to '%s': %s\\n\", address, strerror(connect_error));\n+    throw std::system_error(connect_error, std::system_category());\n+}\n+\n+int ProcessImpl::bind(const fs::path& data_dir, const std::string& exe_name, std::string& address, std::string& error)\n+{\n+    struct sockaddr_un addr;\n+    if (!ParseAddress(address, data_dir, exe_name, addr, error)) {\n+        return -1;\n+    }\n+\n+    if (addr.sun_family == AF_UNIX) {\n+        fs::path path = addr.sun_path;\n+        fs::create_directories(path.parent_path());\n+        if (fs::symlink_status(path).type() == fs::socket_file) {\n+            fs::remove(path);\n+        }\n+    }\n+\n+    int fd;\n+    if ((fd = ::socket(addr.sun_family, SOCK_STREAM, 0)) == -1) {\n+        throw std::system_error(errno, std::system_category());\n+    }\n+\n+    if (::bind(fd, (struct sockaddr*)&addr, sizeof(addr)) == 0) {\n+        return fd;\n+    }\n+    int bind_error = errno;\n+    if (::close(fd) != 0) {\n+        LogPrintf(\"Error closing file descriptor %i: %s\\n\", fd, strerror(errno));\n+    }\n+    throw std::system_error(bind_error, std::system_category());\n+}\n } // namespace\n \n std::unique_ptr<Process> MakeProcess() { return std::make_unique<ProcessImpl>(); }"
      },
      {
        "sha": "0d7403c358287c3069f50c1df7212b7f02d9f7a1",
        "filename": "src/ipc/process.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/process.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/process.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/process.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_IPC_PROCESS_H\n #define BITCOIN_IPC_PROCESS_H\n \n+#include <fs.h>\n+\n #include <memory>\n #include <string>\n \n@@ -32,6 +34,18 @@ class Process\n     //! process. If so, return true and a file descriptor for communicating\n     //! with the parent process.\n     virtual bool checkSpawned(int argc, char* argv[], int& fd) = 0;\n+\n+    //! Canonicalize and connect to address, returning socket descriptor.\n+    virtual int connect(const fs::path& data_dir,\n+                        const std::string& dest_exe_name,\n+                        std::string& address,\n+                        std::string& error) = 0;\n+\n+    //! Create listening socket, bind and canonicalize address, and return socket descriptor.\n+    virtual int bind(const fs::path& data_dir,\n+                     const std::string& exe_name,\n+                     std::string& address,\n+                     std::string& error) = 0;\n };\n \n //! Constructor for Process interface. Implementation will vary depending on"
      },
      {
        "sha": "1e355784ade26af010fbf966e57d57caceea92ee",
        "filename": "src/ipc/protocol.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/ipc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ipc/protocol.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -25,11 +25,31 @@ class Protocol\n \n     //! Return Init interface that forwards requests over given socket descriptor.\n     //! Socket communication is handled on a background thread.\n+    //!\n+    //! @note It could be potentially useful in the future to add\n+    //! std::function<void()> on_disconnect callback argument here. But there\n+    //! isn't an immediate need, because the protocol implementation can clean\n+    //! up its own state (calling ProxyServer destructors, etc) on disconnect,\n+    //! and any client calls will just throw ipc::Exception errors after a\n+    //! disconnect.\n     virtual std::unique_ptr<interfaces::Init> connect(int fd, const char* exe_name) = 0;\n \n+    //! Listen for connections on provided socket descriptor, accept them, and\n+    //! handle requests on accepted connections. This method doesn't block, and\n+    //! performs I/O on a background thread.\n+    virtual void listen(int listen_fd, const char* exe_name, interfaces::Init& init) = 0;\n+\n     //! Handle requests on provided socket descriptor, forwarding them to the\n     //! provided Init interface. Socket communication is handled on the\n     //! current thread, and this call blocks until the socket is closed.\n+    //!\n+    //! @note: If this method is called, it needs be called before connect() or\n+    //! listen() methods, because for ease of implementation it's inflexible and\n+    //! always runs the event loop in the foreground thread. It can share its\n+    //! event loop with the other methods but can't share an event loop that was\n+    //! created by them. This isn't really a problem because serve() is only\n+    //! called by spawned child processes that call it immediately to\n+    //! communicate back with parent processes.\n     virtual void serve(int fd, const char* exe_name, interfaces::Init& init) = 0;\n \n     //! Add cleanup callback to interface that will run when the interface is"
      },
      {
        "sha": "563198f13e49a113de6746ebb8d2dc63258fa49c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -272,6 +272,9 @@ class CNodeStats\n     Network m_network;\n     uint32_t m_mapped_as;\n     ConnectionType m_conn_type;\n+    // Note: If you add fields to this class, you should also consider updating\n+    // the CNode::copyStats() method, the getpeerinfo RPC (in rpc/net.cpp), and\n+    // the IPC serialization (in ipc/capnp/node.capnp).\n };\n \n "
      },
      {
        "sha": "62742aa691cc91158b2b9fffef46064047431419",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -32,6 +32,9 @@ struct CNodeStateStats {\n     uint64_t m_addr_processed = 0;\n     uint64_t m_addr_rate_limited = 0;\n     bool m_addr_relay_enabled{false};\n+    // Note: If you add fields to this struct, you should also consider updating\n+    // the getpeerinfo RPC (in rpc/net.cpp), and the IPC serialization code (in\n+    // ipc/capnp/node.cpp and ipc/capnp/node.capnp).\n };\n \n class PeerManager : public CValidationInterface, public NetEventsInterface"
      },
      {
        "sha": "f13edd96967c6bfd4498714573a05e507e0caa47",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -55,6 +55,8 @@ class proxyType\n \n     CService proxy;\n     bool randomize_credentials;\n+    // Note: If you add fields to this class, you should also update the IPC\n+    // serialization code (in ipc/capnp/node.capnp).\n };\n \n /** Credentials for proxy authentication */"
      },
      {
        "sha": "e161b006c5f0a297d48c6a279a10218f532a1664",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 4,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -11,6 +11,8 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <interfaces/wallet.h>\n #include <mapport.h>\n@@ -67,13 +69,28 @@ using interfaces::WalletClient;\n \n namespace node {\n namespace {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+class ExternalSignerImpl : public interfaces::ExternalSigner\n+{\n+public:\n+    ExternalSignerImpl(::ExternalSigner signer) : m_signer(std::move(signer)) {}\n+    std::string getName() override { return m_signer.m_name; }\n+private:\n+    ::ExternalSigner m_signer;\n+};\n+#endif\n+\n class NodeImpl : public Node\n {\n private:\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n     explicit NodeImpl(NodeContext& context) { setContext(&context); }\n-    void initLogging() override { InitLogging(*Assert(m_context->args)); }\n+    void initLogging() override\n+    {\n+        interfaces::Ipc* ipc = m_context->init->ipc();\n+        InitLogging(*Assert(m_context->args), ipc ? ipc->logSuffix() : nullptr);\n+    }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n     uint32_t getLogCategories() override { return LogInstance().GetCategoryMask(); }\n@@ -172,14 +189,18 @@ class NodeImpl : public Node\n         }\n         return false;\n     }\n-    std::vector<ExternalSigner> externalSigners() override\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> listExternalSigners() override\n     {\n #ifdef ENABLE_EXTERNAL_SIGNER\n         std::vector<ExternalSigner> signers = {};\n         const std::string command = gArgs.GetArg(\"-signer\", \"\");\n-        if (command == \"\") return signers;\n+        if (command == \"\") return {};\n         ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n-        return signers;\n+        std::vector<std::unique_ptr<interfaces::ExternalSigner>> result;\n+        for (auto& signer : signers) {\n+            result.emplace_back(std::make_unique<ExternalSignerImpl>(std::move(signer)));\n+        }\n+        return result;\n #else\n         // This result is indistinguishable from a successful call that returns\n         // no signers. For the current GUI this doesn't matter, because the wallet\n@@ -281,6 +302,10 @@ class NodeImpl : public Node\n     {\n         return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n+    std::unique_ptr<Handler> handleInitWallet(InitWalletFn fn) override\n+    {\n+        return MakeHandler(::uiInterface.InitWallet_connect(fn));\n+    }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n         return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));"
      },
      {
        "sha": "29fa16d8be26dd55817c4ddadd9849a1b07b8a13",
        "filename": "src/node/ui_interface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -15,6 +15,7 @@ struct UISignals {\n     boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::optional_last_value<bool>> ThreadSafeMessageBox;\n     boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::optional_last_value<bool>> ThreadSafeQuestion;\n     boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n+    boost::signals2::signal<CClientUIInterface::InitWalletSig> InitWallet;\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n@@ -34,6 +35,7 @@ static UISignals g_ui_signals;\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n+ADD_SIGNALS_IMPL_WRAPPER(InitWallet);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n@@ -45,6 +47,7 @@ ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n bool CClientUIInterface::ThreadSafeMessageBox(const bilingual_str& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style).value_or(false);}\n bool CClientUIInterface::ThreadSafeQuestion(const bilingual_str& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style).value_or(false);}\n void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n+void CClientUIInterface::InitWallet() { return g_ui_signals.InitWallet(); }\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }"
      },
      {
        "sha": "f969bcde2179c24022015f242ec3c539af923851",
        "filename": "src/node/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/node/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/ui_interface.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -82,6 +82,9 @@ class CClientUIInterface\n     /** Progress message during initialization. */\n     ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);\n \n+    /** Wallet client created. */\n+    ADD_SIGNALS_DECL_WRAPPER(InitWallet, void, );\n+\n     /** Number of network connections changed. */\n     ADD_SIGNALS_DECL_WRAPPER(NotifyNumConnectionsChanged, void, int newNumConnections);\n "
      },
      {
        "sha": "3380b351673fdaf061c5291e5fe11e92a14a0d5b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -10,8 +10,10 @@\n \n #include <chainparams.h>\n #include <init.h>\n+#include <init/common.h>\n #include <interfaces/handler.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/node.h>\n #include <node/ui_interface.h>\n #include <noui.h>\n@@ -273,7 +275,6 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\n     // screen will take care of deleting itself when finish() happens.\n     m_splash->show();\n-    connect(this, &BitcoinApplication::requestedInitialize, m_splash, &SplashScreen::handleLoadWallet);\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }\n@@ -282,6 +283,18 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n     m_node = init.makeNode();\n+    if (!m_node) {\n+        // If node is not part of current process, need to initialize logging.\n+        if (!init::StartLogging(gArgs)) {\n+            throw std::runtime_error(\"StartLogging failed\");\n+        }\n+\n+        // If node is not part of current process, spawn new bitcoin-node\n+        // process.\n+        auto node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        m_node = node_init->makeNode();\n+        init.ipc()->addCleanup(*m_node, [node_init = node_init.release()] { delete node_init; });\n+    }\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }\n@@ -304,13 +317,14 @@ void BitcoinApplication::startThread()\n     connect(this, &BitcoinApplication::requestedShutdown, &m_executor.value(), &InitExecutor::shutdown);\n }\n \n-void BitcoinApplication::parameterSetup()\n+void BitcoinApplication::parameterSetup(interfaces::Init& init)\n {\n     // Default printtoconsole to false for the GUI. GUI programs should not\n     // print to the console unnecessarily.\n     gArgs.SoftSetBoolArg(\"-printtoconsole\", false);\n \n-    InitLogging(gArgs);\n+    interfaces::Ipc* ipc = init.ipc();\n+    InitLogging(gArgs, ipc ? ipc->logSuffix() : nullptr);\n     InitParameterInteraction(gArgs);\n }\n \n@@ -494,7 +508,7 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    SetupServerArgs(gArgs);\n+    SetupServerArgs(gArgs, init->canListenIpc());\n     SetupUIArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n@@ -611,7 +625,7 @@ int GuiMain(int argc, char* argv[])\n     // Install qDebug() message handler to route to debug.log\n     qInstallMessageHandler(DebugMessageHandler);\n     // Allow parameter interaction before we create the options model\n-    app.parameterSetup();\n+    app.parameterSetup(*init);\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));"
      },
      {
        "sha": "bcc61817a4e393077910d5e7274c5b65f8729158",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -45,7 +45,7 @@ class BitcoinApplication: public QApplication\n     void createPaymentServer();\n #endif\n     /// parameter interaction/setup based on rules\n-    void parameterSetup();\n+    void parameterSetup(interfaces::Init& init);\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n     /// Initialize prune setting"
      },
      {
        "sha": "eba70331f815910444c2866967143ccf05a01c65",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -6,7 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <external_signer.h>\n+#include <interfaces/node.h>\n #include <qt/createwalletdialog.h>\n #include <qt/forms/ui_createwalletdialog.h>\n \n@@ -113,7 +113,7 @@ CreateWalletDialog::~CreateWalletDialog()\n     delete ui;\n }\n \n-void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n+void CreateWalletDialog::setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers)\n {\n     m_has_signers = !signers.empty();\n     if (m_has_signers) {\n@@ -126,7 +126,7 @@ void CreateWalletDialog::setSigners(const std::vector<ExternalSigner>& signers)\n         ui->blank_wallet_checkbox->setChecked(false);\n         ui->disable_privkeys_checkbox->setEnabled(false);\n         ui->disable_privkeys_checkbox->setChecked(true);\n-        const std::string label = signers[0].m_name;\n+        const std::string label = signers[0]->getName();\n         ui->wallet_name_line_edit->setText(QString::fromStdString(label));\n         ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(true);\n     } else {"
      },
      {
        "sha": "63a5e012d8ce6eda1a543909c51f17206cb13e94",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -7,7 +7,12 @@\n \n #include <QDialog>\n \n+#include <memory>\n+\n+namespace interfaces {\n class ExternalSigner;\n+} // namespace interfaces\n+\n class WalletModel;\n \n namespace Ui {\n@@ -24,7 +29,7 @@ class CreateWalletDialog : public QDialog\n     explicit CreateWalletDialog(QWidget* parent);\n     virtual ~CreateWalletDialog();\n \n-    void setSigners(const std::vector<ExternalSigner>& signers);\n+    void setSigners(const std::vector<std::unique_ptr<interfaces::ExternalSigner>>& signers);\n \n     QString walletName() const;\n     bool isEncryptWalletChecked() const;"
      },
      {
        "sha": "85703b3350e7ed12a50e2aa2b5d49980b73b6be9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -194,6 +194,7 @@ void SplashScreen::subscribeToCoreSignals()\n     // Connect signals to client\n     m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\n     m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\n+    m_handler_init_wallet = m_node->handleInitWallet([this]() { handleLoadWallet(); });\n }\n \n void SplashScreen::handleLoadWallet()"
      },
      {
        "sha": "8a5875d2a6e2b10eab47a65bf909d1eef5a2fc6b",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -66,6 +66,7 @@ public Q_SLOTS:\n     bool m_shutdown = false;\n     std::unique_ptr<interfaces::Handler> m_handler_init_message;\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\n+    std::unique_ptr<interfaces::Handler> m_handler_init_wallet;\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\n     std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;\n     std::list<std::unique_ptr<interfaces::Handler>> m_connected_wallet_handlers;"
      },
      {
        "sha": "81f6711b831591c5231517d08572d5cba9ca31b9",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -56,7 +56,7 @@ void TestRpcCommand(RPCConsole* console)\n } // namespace\n \n //! Entry point for BitcoinApplication tests.\n-void AppTests::appTests()\n+void AppTests::appTests(interfaces::Init& init)\n {\n #ifdef Q_OS_MAC\n     if (QApplication::platformName() == \"minimal\") {\n@@ -76,7 +76,7 @@ void AppTests::appTests()\n     }());\n \n     qRegisterMetaType<interfaces::BlockAndHeaderTipInfo>(\"interfaces::BlockAndHeaderTipInfo\");\n-    m_app.parameterSetup();\n+    m_app.parameterSetup(init);\n     m_app.createOptionsModel(true /* reset settings */);\n     QScopedPointer<const NetworkStyle> style(NetworkStyle::instantiate(Params().NetworkIDString()));\n     m_app.setupPlatformStyle();"
      },
      {
        "sha": "deab018ccbd9e6beb2d012fa135ff4fdd58838ee",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -14,14 +14,18 @@ class BitcoinApplication;\n class BitcoinGUI;\n class RPCConsole;\n \n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n+\n class AppTests : public QObject\n {\n     Q_OBJECT\n public:\n     explicit AppTests(BitcoinApplication& app) : m_app(app) {}\n \n private Q_SLOTS:\n-    void appTests();\n+    void appTests(interfaces::Init& init);\n     void guiTests(BitcoinGUI* window);\n     void consoleTests(RPCConsole* console);\n "
      },
      {
        "sha": "b9a9fcf3d18572fd70893343d4368b91c7aa3e9d",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -280,9 +280,9 @@ void CreateWalletActivity::create()\n {\n     m_create_wallet_dialog = new CreateWalletDialog(m_parent_widget);\n \n-    std::vector<ExternalSigner> signers;\n+    std::vector<std::unique_ptr<interfaces::ExternalSigner>> signers;\n     try {\n-        signers = node().externalSigners();\n+        signers = node().listExternalSigners();\n     } catch (const std::runtime_error& e) {\n         QMessageBox::critical(nullptr, tr(\"Can't list signers\"), e.what());\n     }"
      },
      {
        "sha": "8d7b7f992cdc2aa9bb8f30ea270b906bf5564d44",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -104,7 +104,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     SelectParams(chainName);\n     SeedInsecureRand();\n     if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n-    InitLogging(*m_node.args);\n+    InitLogging(*m_node.args, /* log_suffix= */ nullptr);\n     AppInitParameterInteraction(*m_node.args);\n     LogInstance().StartLogging();\n     SHA256AutoDetect();"
      },
      {
        "sha": "3a2933673d33bd01462dcce3c1b4d486186334e0",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -692,6 +692,9 @@ std::string ArgsManager::GetHelpMessage() const\n             case OptionsCategory::RPC:\n                 usage += HelpMessageGroup(\"RPC server options:\");\n                 break;\n+            case OptionsCategory::IPC:\n+                usage += HelpMessageGroup(\"IPC interprocess connection options:\");\n+                break;\n             case OptionsCategory::WALLET:\n                 usage += HelpMessageGroup(\"Wallet options:\");\n                 break;"
      },
      {
        "sha": "f53bd679549a0f6a3478028bc4ed90fe0b833e3a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -144,6 +144,7 @@ enum class OptionsCategory {\n     GUI,\n     COMMANDS,\n     REGISTER_COMMANDS,\n+    IPC,\n \n     HIDDEN // Always the last option to avoid printing these in the help\n };"
      },
      {
        "sha": "450bb968f165f91980725768fa794f31ca11e9ae",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -60,6 +60,9 @@ class CCoinControl\n     int m_max_depth = DEFAULT_MAX_DEPTH;\n     //! SigningProvider that has pubkeys and scripts to do spend size estimation for external inputs\n     FlatSigningProvider m_external_provider;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet-types.cpp and\n+    // ipc/capnp/wallet.capnp).\n \n     CCoinControl();\n "
      },
      {
        "sha": "741b4ebebf9d4f5966c2973b948d66299fd50cd8",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -6,6 +6,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <interfaces/init.h>\n+#include <interfaces/ipc.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -131,6 +132,13 @@ void WalletInit::Construct(NodeContext& node) const\n         return;\n     }\n     auto wallet_client = node.init->makeWalletClient(*node.chain);\n+    if (!wallet_client) {\n+        // If the current process doesn't have wallet support linked in, spawn\n+        // a new wallet process.\n+        auto init = node.init->ipc()->spawnProcess(\"bitcoin-wallet\");\n+        wallet_client = init->makeWalletClient(*node.chain);\n+        node.init->ipc()->addCleanup(*wallet_client, [init = init.release()] { delete init; });\n+    }\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      },
      {
        "sha": "edf71276c938d39a77ebba33133fbd15a9805f71",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -219,6 +219,8 @@ struct CRecipient\n     CScript scriptPubKey;\n     CAmount nAmount;\n     bool fSubtractFeeFromAmount;\n+    // Note: If you add fields to this struct, you should also update the IPC\n+    // serialization code (in ipc/capnp/wallet.capnp).\n };\n \n class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime"
      },
      {
        "sha": "99d983356f927edde807261c562e0ff308b52102",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -40,7 +40,7 @@ static void WalletCreate(CWallet* wallet_instance, uint64_t wallet_creation_flag\n     wallet_instance->TopUpKeyPool();\n }\n \n-static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n+static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options, interfaces::Chain* chain)\n {\n     DatabaseStatus status;\n     bilingual_str error;\n@@ -50,8 +50,7 @@ static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const\n         return nullptr;\n     }\n \n-    // dummy chain interface\n-    std::shared_ptr<CWallet> wallet_instance{new CWallet(nullptr /* chain */, name, std::move(database)), WalletToolReleaseWallet};\n+    std::shared_ptr<CWallet> wallet_instance{new CWallet(chain, name, std::move(database)), WalletToolReleaseWallet};\n     DBErrors load_wallet_ret;\n     try {\n         load_wallet_ret = wallet_instance->LoadWallet();\n@@ -106,7 +105,7 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n+bool ExecuteWalletToolFunc(const ArgsManager& args, interfaces::Chain* chain, const std::string& command)\n {\n     if (args.IsArgSet(\"-format\") && command != \"createfromdump\") {\n         tfm::format(std::cerr, \"The -format option can only be used with the \\\"createfromdump\\\" command.\\n\");\n@@ -151,15 +150,15 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n             options.require_format = DatabaseFormat::SQLITE;\n         }\n \n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Close();\n@@ -184,7 +183,7 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n     } else if (command == \"dump\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options, chain);\n         if (!wallet_instance) return false;\n         bilingual_str error;\n         bool ret = DumpWallet(*wallet_instance, error);"
      },
      {
        "sha": "3a4455a40102057c3876cd6b5742dc54f1669928",
        "filename": "src/wallet/wallettool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallettool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/src/wallet/wallettool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.h?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -7,10 +7,14 @@\n \n #include <wallet/wallet.h>\n \n+namespace interfaces {\n+class Chain;\n+} // namespace interfaces\n+\n namespace WalletTool {\n \n void WalletShowInfo(CWallet* wallet_instance);\n-bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command);\n+bool ExecuteWalletToolFunc(const ArgsManager& args, interfaces::Chain* chain, const std::string& command);\n \n } // namespace WalletTool\n "
      },
      {
        "sha": "2af54970406a93a3b8484e9fa487fb2586a6d53f",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -62,6 +62,10 @@ def main():\n         colors[\"node1\"] = \"\\033[0;32m\"  # GREEN\n         colors[\"node2\"] = \"\\033[0;31m\"  # RED\n         colors[\"node3\"] = \"\\033[0;33m\"  # YELLOW\n+        colors[\"wall0\"] = \"\\033[0;34;1m\"  # BLUE\n+        colors[\"wall1\"] = \"\\033[0;32;1m\"  # GREEN\n+        colors[\"wall2\"] = \"\\033[0;31;1m\"  # RED\n+        colors[\"wall3\"] = \"\\033[0;33;1m\"  # YELLOW\n         colors[\"reset\"] = \"\\033[0m\"  # Reset font color\n \n     log_events = read_logs(testdir)\n@@ -95,6 +99,10 @@ def read_logs(tmp_dir):\n             break\n         files.append((\"node%d\" % i, logfile))\n \n+        wallet_logfile = \"{}/node{}/regtest/debug.log.wallet\".format(tmp_dir, i)\n+        if os.path.isfile(wallet_logfile):\n+            files.append((\"wall%d\" % i, wallet_logfile))\n+\n     return heapq.merge(*[get_log_events(source, f) for source, f in files])\n \n "
      },
      {
        "sha": "b7e900def751f0d004d697e59df22d9876c84fe2",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -86,6 +86,7 @@ def set_test_params(self):\n             '-acceptnonstdtxn=1',  # This is a consensus block test, we don't care about tx policy\n             '-testactivationheight=bip34@2',\n         ]]\n+        self.rpc_timeout = 1920\n \n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n@@ -1293,7 +1294,7 @@ def run_test(self):\n         blocks2 = []\n         for i in range(89, LARGE_REORG_SIZE + 89):\n             blocks2.append(self.next_block(\"alt\" + str(i)))\n-        self.send_blocks(blocks2, False, force_send=True)\n+        self.send_blocks(blocks2, False, force_send=True, timeout=1920)\n \n         # extend alt chain to trigger re-org\n         block = self.next_block(\"alt\" + str(chain1_tip + 1))\n@@ -1302,7 +1303,7 @@ def run_test(self):\n         # ... and re-org back to the first chain\n         self.move_tip(chain1_tip)\n         block = self.next_block(chain1_tip + 1)\n-        self.send_blocks([block], False, force_send=True)\n+        self.send_blocks([block], False, force_send=True, timeout=1920)\n         block = self.next_block(chain1_tip + 2)\n         self.send_blocks([block], True, timeout=2440)\n \n@@ -1318,6 +1319,13 @@ def run_test(self):\n         b_cb34.solve()\n         self.send_blocks([b_cb34], success=False, reject_reason='bad-cb-height', reconnect=True)\n \n+        # Flush the notification queue before shutting down, so the\n+        # FlushBackgroundCallbacks call made during shutdown won't exceed the\n+        # test framework's 60 second shutdown timeout on slow systems, due to\n+        # all the BlockConnected notifications generated during the test.\n+        self.log.info(\"Wait for BlockConnected notifications to be processed before shutdown\")\n+        self.nodes[0].syncwithvalidationinterfacequeue()\n+\n     # Helper methods\n     ################\n "
      },
      {
        "sha": "e4c5ddc53ebcaa0afa63ae80f1d7a07f65418312",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -115,6 +115,7 @@ def test_args_log(self):\n                     'secret-torpassword',\n                 ]):\n             self.start_node(0, extra_args=[\n+                '-debugexclude=ipc',\n                 '-addnode=some.node',\n                 '-rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc0',\n                 '-rpcbind=127.1.1.1',"
      },
      {
        "sha": "4e8d1a499e4f829b662170e9e9757ba3b4734be2",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -1212,6 +1212,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n         self.extra_args = [[\"-par=1\"], [\"-par=1\"]]\n+        self.rpc_timeout = 120\n         if self.options.previous_release:\n             self.wallet_names = [None, self.default_wallet_name]\n         else:"
      },
      {
        "sha": "b58b23e142525f33d6a79151114aa689ca2a853b",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -381,11 +381,13 @@ def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until_helper(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\n \n     @contextlib.contextmanager\n-    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+    def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2, wallet=False):\n         if unexpected_msgs is None:\n             unexpected_msgs = []\n         time_end = time.time() + timeout * self.timeout_factor\n         debug_log = os.path.join(self.datadir, self.chain, 'debug.log')\n+        if wallet and os.path.exists(debug_log + \".wallet\"):\n+            debug_log += \".wallet\"\n         with open(debug_log, encoding='utf-8') as dl:\n             dl.seek(0, 2)\n             prev_size = dl.tell()"
      },
      {
        "sha": "181cf0aa254276541f57203aa7b0fe17a895536e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         assert result['ismine']\n \n         self.log.info('Check that wallet is flushed')\n-        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n+        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20, wallet=True):\n             self.nodes[0].getnewaddress()\n \n         # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded"
      },
      {
        "sha": "a03830c4c5288a9fb1fb4e2923c89f5d1e2f9a7b",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_aps, 1.0)\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 2820, grouped = 4160, using grouped'], wallet=True):\n             txid4 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 0.1)\n         tx4 = self.nodes[3].getrawtransaction(txid4, True)\n         # tx4 should have 2 inputs and 2 outputs although one output would\n@@ -127,7 +127,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps2, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped']):\n+        with self.nodes[3].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using non-grouped'], wallet=True):\n             txid5 = self.nodes[3].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx5 = self.nodes[3].getrawtransaction(txid5, True)\n         # tx5 should have 3 inputs (1.0, 1.0, 1.0) and 2 outputs\n@@ -141,7 +141,7 @@ def run_test(self):\n         [self.nodes[0].sendtoaddress(addr_aps3, 1.0) for _ in range(5)]\n         self.generate(self.nodes[0], 1)\n         self.sync_all()\n-        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped']):\n+        with self.nodes[4].assert_debug_log(['Fee non-grouped = 5520, grouped = 8240, using grouped'], wallet=True):\n             txid6 = self.nodes[4].sendtoaddress(self.nodes[0].getnewaddress(), 2.95)\n         tx6 = self.nodes[4].getrawtransaction(txid6, True)\n         # tx6 should have 5 inputs and 2 outputs"
      },
      {
        "sha": "ac42c32cee5e21da6f501464f02e14dd84414359",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -130,7 +130,7 @@ def wallet_file(name):\n         os.mkdir(wallet_dir('no_access'))\n         os.chmod(wallet_dir('no_access'), 0)\n         try:\n-            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning']):\n+            with self.nodes[0].assert_debug_log(expected_msgs=['Error scanning'], wallet=True):\n                 walletlist = self.nodes[0].listwalletdir()['wallets']\n         finally:\n             # Need to ensure access is restored for cleanup"
      },
      {
        "sha": "134609cc669a66d489babfa60754529ecb55b7be",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faae1f4aa485d58c91186d284dccd687c52b9680/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=faae1f4aa485d58c91186d284dccd687c52b9680",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n         self.log.info(\"Bump time & check that transaction is rebroadcast\")\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n-        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions']):\n+        with node.assert_debug_log(['ResendWalletTransactions: resubmit 1 unconfirmed transactions'], wallet=True):\n             node.setmocktime(now + 36 * 60 * 60)\n             # Tell scheduler to call MaybeResendWalletTxn now.\n             node.mockscheduler(1)"
      }
    ]
  },
  {
    "sha": "f2f33658dddd45477e43bcad749833f6fd336bb2",
    "node_id": "C_kwDOABII59oAKGYyZjMzNjU4ZGRkZDQ1NDc3ZTQzYmNhZDc0OTgzM2Y2ZmQzMzZiYjI",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-07-06T20:17:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-10-29T11:13:03Z"
      },
      "message": "multiprocess: Add bitcoin-gui -ipcconnect option\n\nAdd `-ipcconnect` option to `bitcoin-gui` to allow connecting gui to an\nexisting node instead of starting a new node process, so it is possible to\nstart and stop the gui independently of the node.\n\nThis change doesn't add an -ipcbind option to the bitcoin-wallet (which would\nallow the gui to control wallet processes without going through the node), but\nthis would be a logical extension to add in the future.",
      "tree": {
        "sha": "7014c3a0eb1d31bdf6052f6ac1fa205a89a91bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7014c3a0eb1d31bdf6052f6ac1fa205a89a91bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2f33658dddd45477e43bcad749833f6fd336bb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f33658dddd45477e43bcad749833f6fd336bb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2f33658dddd45477e43bcad749833f6fd336bb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2f33658dddd45477e43bcad749833f6fd336bb2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faae1f4aa485d58c91186d284dccd687c52b9680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faae1f4aa485d58c91186d284dccd687c52b9680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faae1f4aa485d58c91186d284dccd687c52b9680"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 41,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8fc202f9095e21ee820cd22b4fc573274b5192a8",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -115,7 +115,7 @@ static bool AppInit(NodeContext& node, int argc, char* argv[])\n \n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     ArgsManager& args = *Assert(node.args);\n-    SetupServerArgs(args, node.init->canListenIpc());\n+    SetupServerArgs(args, node.init->canConnectIpc(), node.init->canListenIpc());\n     std::string error;\n     if (!args.ParseParameters(argc, argv, error)) {\n         return InitError(Untranslated(strprintf(\"Error parsing command line arguments: %s\\n\", error)));"
      },
      {
        "sha": "62868b5f298cfd49aedc6057ac90648d15a70d37",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -350,7 +350,7 @@ static void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n+void SetupServerArgs(ArgsManager& argsman, bool can_connect_ipc, bool can_listen_ipc)\n {\n     SetupHelpOptions(argsman);\n     argsman.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST); // server-only for now\n@@ -555,6 +555,9 @@ void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc)\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    if (can_connect_ipc) {\n+        argsman.AddArg(\"-ipcconnect=<address>\", \"Instead of starting a bitcoin-node process in the background, connect to the an existing process listening at the specified address. Valid <address> values are 'auto' to try connecting to default socket in <datadir>/sockets/node.sock, but start a bitcoin-node process if it isn't available, 'unix' to connect to the default socket and fail if it isn't available, 'unix:<socket path>' to connect to a socket at a nonstandard path, and -noipcconnect to not try to connect. Default value: auto\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n+    }\n     if (can_listen_ipc) {\n         argsman.AddArg(\"-ipcbind=<address>\", \"Bind bitcoin-node process to tcp or unix socket address.\", ArgsManager::ALLOW_ANY, OptionsCategory::IPC);\n     }"
      },
      {
        "sha": "5cf5c1e47670b5b9feda3450a94fe8198257f6a8",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -66,7 +66,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info\n /**\n  * Register all arguments with the ArgsManager\n  */\n-void SetupServerArgs(ArgsManager& argsman, bool can_listen_ipc=false);\n+void SetupServerArgs(ArgsManager& argsman, bool can_connect_ipc=false, bool can_listen_ipc=false);\n \n /** Returns licensing information (for -version) */\n std::string LicenseInfo();"
      },
      {
        "sha": "bb66c4422bec437eb7ac5ff6b47c2f77076799d0",
        "filename": "src/init/bitcoin-gui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init/bitcoin-gui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/init/bitcoin-gui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-gui.cpp?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -25,6 +25,7 @@ class BitcoinGuiInit : public interfaces::Init\n         ipc::capnp::SetupNodeClient(m_ipc->context());\n     }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n+    bool canConnectIpc() override { return true; }\n     bool canListenIpc() override { return true; }\n     std::unique_ptr<interfaces::Ipc> m_ipc;\n };"
      },
      {
        "sha": "a76a413fe44cd1f32064206b96f21b91e6f15a13",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -42,11 +42,11 @@ struct BlockTip;\n //! Block and header tip information\n struct BlockAndHeaderTipInfo\n {\n-    int block_height;\n-    int64_t block_time;\n-    int header_height;\n-    int64_t header_time;\n-    double verification_progress;\n+    int block_height = -1;\n+    int64_t block_time = -1;\n+    int header_height = -1;\n+    int64_t header_time = -1;\n+    double verification_progress = -1;\n };\n \n //! External signer interface used by the GUI."
      },
      {
        "sha": "2ccbaf23adfdc467e44a00abdee68ba29a9e0372",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -290,8 +290,14 @@ void BitcoinApplication::createNode(interfaces::Init& init)\n         }\n \n         // If node is not part of current process, spawn new bitcoin-node\n-        // process.\n-        auto node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        // process or connect to an existing one.\n+        std::string address = gArgs.GetArg(\"-ipcconnect\", \"auto\");\n+        auto node_init = init.ipc()->connectAddress(address);\n+        if (node_init) {\n+            m_node_external = true;\n+        } else {\n+            node_init = init.ipc()->spawnProcess(\"bitcoin-node\");\n+        }\n         m_node = node_init->makeNode();\n         init.ipc()->addCleanup(*m_node, [node_init = node_init.release()] { delete node_init; });\n     }\n@@ -337,7 +343,13 @@ void BitcoinApplication::requestInitialize()\n {\n     qDebug() << __func__ << \": Requesting initialize\";\n     startThread();\n-    Q_EMIT requestedInitialize();\n+    if (m_node_external) {\n+        interfaces::BlockAndHeaderTipInfo tip_info;\n+        initializeResult(true, tip_info);\n+    } else {\n+        Q_EMIT requestedInitialize();\n+    }\n+\n }\n \n void BitcoinApplication::requestShutdown()\n@@ -358,7 +370,7 @@ void BitcoinApplication::requestShutdown()\n     window->unsubscribeFromCoreSignals();\n     // Request node shutdown, which can interrupt long operations, like\n     // rescanning a wallet.\n-    node().startShutdown();\n+    if (!m_node_external) node().startShutdown();\n     // Unsetting the client model can cause the current thread to wait for node\n     // to complete an operation, like wait for a RPC execution to complete.\n     window->setClientModel(nullptr);\n@@ -379,7 +391,7 @@ void BitcoinApplication::requestShutdown()\n     clientModel = nullptr;\n \n     // Request shutdown from core thread\n-    Q_EMIT requestedShutdown();\n+    Q_EMIT requestedShutdown(!m_node_external);\n }\n \n void BitcoinApplication::initializeResult(bool success, interfaces::BlockAndHeaderTipInfo tip_info)\n@@ -508,7 +520,7 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    SetupServerArgs(gArgs, init->canListenIpc());\n+    SetupServerArgs(gArgs, init->canConnectIpc(), init->canListenIpc());\n     SetupUIArgs(gArgs);\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n@@ -647,7 +659,7 @@ int GuiMain(int argc, char* argv[])\n         // Perform base initialization before spinning up initialization/shutdown thread\n         // This is acceptable because this function only contains steps that are quick to execute,\n         // so the GUI thread won't be held up.\n-        if (app.baseInitialize()) {\n+        if (app.nodeExternal() || app.baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN)\n             WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely\u2026\").arg(PACKAGE_NAME), (HWND)app.getMainWinId());"
      },
      {
        "sha": "9f9b34b67f508b4c1306b589b5ba391752364ff9",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -72,6 +72,7 @@ class BitcoinApplication: public QApplication\n     void setupPlatformStyle();\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n+    bool nodeExternal() const { return m_node_external; }\n \n public Q_SLOTS:\n     void initializeResult(bool success, interfaces::BlockAndHeaderTipInfo tip_info);\n@@ -88,7 +89,7 @@ public Q_SLOTS:\n \n Q_SIGNALS:\n     void requestedInitialize();\n-    void requestedShutdown();\n+    void requestedShutdown(bool node_shutdown);\n     void splashFinished();\n     void windowShown(BitcoinGUI* window);\n \n@@ -107,6 +108,10 @@ public Q_SLOTS:\n     std::unique_ptr<QWidget> shutdownWindow;\n     SplashScreen* m_splash = nullptr;\n     std::unique_ptr<interfaces::Node> m_node;\n+    //! Whether node is external to the application and running in a\n+    //! pre-existing process, or internal and initialized and shutdown when the\n+    //! application is.\n+    bool m_node_external = false;\n \n     void startThread();\n };"
      },
      {
        "sha": "2b80397fe47fbffb9ad513d062ee58432aff8bcf",
        "filename": "src/qt/initexecutor.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/initexecutor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/initexecutor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/initexecutor.cpp?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -54,12 +54,12 @@ void InitExecutor::initialize()\n     });\n }\n \n-void InitExecutor::shutdown()\n+void InitExecutor::shutdown(bool node_shutdown)\n {\n-    GUIUtil::ObjectInvoke(&m_context, [this] {\n+    GUIUtil::ObjectInvoke(&m_context, [this, node_shutdown] {\n         try {\n             qDebug() << \"Running Shutdown in thread\";\n-            m_node.appShutdown();\n+            if (node_shutdown) m_node.appShutdown();\n             qDebug() << \"Shutdown finished\";\n             Q_EMIT shutdownResult();\n         } catch (const std::exception& e) {"
      },
      {
        "sha": "e48e23e43fe616f92eea89017075915279c77280",
        "filename": "src/qt/initexecutor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/initexecutor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2f33658dddd45477e43bcad749833f6fd336bb2/src/qt/initexecutor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/initexecutor.h?ref=f2f33658dddd45477e43bcad749833f6fd336bb2",
        "patch": "@@ -28,7 +28,7 @@ class InitExecutor : public QObject\n \n public Q_SLOTS:\n     void initialize();\n-    void shutdown();\n+    void shutdown(bool node_shutdown);\n \n Q_SIGNALS:\n     void initializeResult(bool success, interfaces::BlockAndHeaderTipInfo tip_info);"
      }
    ]
  }
]