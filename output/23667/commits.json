[
  {
    "sha": "2221968c229a1e6b714527ecdfd33b13d2cb72e2",
    "node_id": "C_kwDOABII59oAKDIyMjE5NjhjMjI5YTFlNmI3MTQ1MjdlY2RmZDMzYjEzZDJjYjcyZTI",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T02:06:45Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:43:16Z"
      },
      "message": "MOVEONLY: Move transaction related wallet RPCs to transactions.cpp",
      "tree": {
        "sha": "74d59bd9773da883c306a0f67b89684750d41b1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74d59bd9773da883c306a0f67b89684750d41b1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2221968c229a1e6b714527ecdfd33b13d2cb72e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2221968c229a1e6b714527ecdfd33b13d2cb72e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2221968c229a1e6b714527ecdfd33b13d2cb72e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2221968c229a1e6b714527ecdfd33b13d2cb72e2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57982f419e36d0023c83af2dd0d683ca3160dc2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57982f419e36d0023c83af2dd0d683ca3160dc2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57982f419e36d0023c83af2dd0d683ca3160dc2a"
      }
    ],
    "stats": {
      "total": 1817,
      "additions": 920,
      "deletions": 897
    },
    "files": [
      {
        "sha": "5c6b872e96b3a8f7ef48f6ba80a956014654cc16",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2221968c229a1e6b714527ecdfd33b13d2cb72e2",
        "patch": "@@ -413,6 +413,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpc/backup.cpp \\\n   wallet/rpc/encrypt.cpp \\\n   wallet/rpc/signmessage.cpp \\\n+  wallet/rpc/transactions.cpp \\\n   wallet/rpc/util.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\"
      },
      {
        "sha": "299695df658bedc798681e4df4bdbbaf61b0d240",
        "filename": "src/wallet/rpc/transactions.cpp",
        "status": "added",
        "additions": 910,
        "deletions": 0,
        "changes": 910,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/wallet/rpc/transactions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/wallet/rpc/transactions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/transactions.cpp?ref=2221968c229a1e6b714527ecdfd33b13d2cb72e2",
        "patch": "@@ -0,0 +1,910 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/rbf.h>\n+#include <rpc/util.h>\n+#include <util/vector.h>\n+#include <wallet/receive.h>\n+#include <wallet/rpc/util.h>\n+#include <wallet/wallet.h>\n+\n+using interfaces::FoundBlock;\n+\n+static void WalletTxToJSON(const CWallet& wallet, const CWalletTx& wtx, UniValue& entry)\n+{\n+    interfaces::Chain& chain = wallet.chain();\n+    int confirms = wallet.GetTxDepthInMainChain(wtx);\n+    entry.pushKV(\"confirmations\", confirms);\n+    if (wtx.IsCoinBase())\n+        entry.pushKV(\"generated\", true);\n+    if (auto* conf = wtx.state<TxStateConfirmed>())\n+    {\n+        entry.pushKV(\"blockhash\", conf->confirmed_block_hash.GetHex());\n+        entry.pushKV(\"blockheight\", conf->confirmed_block_height);\n+        entry.pushKV(\"blockindex\", conf->position_in_block);\n+        int64_t block_time;\n+        CHECK_NONFATAL(chain.findBlock(conf->confirmed_block_hash, FoundBlock().time(block_time)));\n+        entry.pushKV(\"blocktime\", block_time);\n+    } else {\n+        entry.pushKV(\"trusted\", CachedTxIsTrusted(wallet, wtx));\n+    }\n+    uint256 hash = wtx.GetHash();\n+    entry.pushKV(\"txid\", hash.GetHex());\n+    UniValue conflicts(UniValue::VARR);\n+    for (const uint256& conflict : wallet.GetTxConflicts(wtx))\n+        conflicts.push_back(conflict.GetHex());\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n+\n+    // Add opt-in RBF status\n+    std::string rbfStatus = \"no\";\n+    if (confirms <= 0) {\n+        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n+        if (rbfState == RBFTransactionState::UNKNOWN)\n+            rbfStatus = \"unknown\";\n+        else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n+            rbfStatus = \"yes\";\n+    }\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n+\n+    for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n+        entry.pushKV(item.first, item.second);\n+}\n+\n+struct tallyitem\n+{\n+    CAmount nAmount{0};\n+    int nConf{std::numeric_limits<int>::max()};\n+    std::vector<uint256> txids;\n+    bool fIsWatchonly{false};\n+    tallyitem()\n+    {\n+    }\n+};\n+\n+static UniValue ListReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    // Minimum confirmations\n+    int nMinDepth = 1;\n+    if (!params[0].isNull())\n+        nMinDepth = params[0].get_int();\n+\n+    // Whether to include empty labels\n+    bool fIncludeEmpty = false;\n+    if (!params[1].isNull())\n+        fIncludeEmpty = params[1].get_bool();\n+\n+    isminefilter filter = ISMINE_SPENDABLE;\n+\n+    if (ParseIncludeWatchonly(params[2], wallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n+\n+    bool has_filtered_address = false;\n+    CTxDestination filtered_address = CNoDestination();\n+    if (!by_label && params.size() > 3) {\n+        if (!IsValidDestinationString(params[3].get_str())) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"address_filter parameter was invalid\");\n+        }\n+        filtered_address = DecodeDestination(params[3].get_str());\n+        has_filtered_address = true;\n+    }\n+\n+    // Tally\n+    std::map<CTxDestination, tallyitem> mapTally;\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n+        const CWalletTx& wtx = pairWtx.second;\n+\n+        if (wtx.IsCoinBase() || !wallet.chain().checkFinalTx(*wtx.tx)) {\n+            continue;\n+        }\n+\n+        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n+        if (nDepth < nMinDepth)\n+            continue;\n+\n+        for (const CTxOut& txout : wtx.tx->vout)\n+        {\n+            CTxDestination address;\n+            if (!ExtractDestination(txout.scriptPubKey, address))\n+                continue;\n+\n+            if (has_filtered_address && !(filtered_address == address)) {\n+                continue;\n+            }\n+\n+            isminefilter mine = wallet.IsMine(address);\n+            if(!(mine & filter))\n+                continue;\n+\n+            tallyitem& item = mapTally[address];\n+            item.nAmount += txout.nValue;\n+            item.nConf = std::min(item.nConf, nDepth);\n+            item.txids.push_back(wtx.GetHash());\n+            if (mine & ISMINE_WATCH_ONLY)\n+                item.fIsWatchonly = true;\n+        }\n+    }\n+\n+    // Reply\n+    UniValue ret(UniValue::VARR);\n+    std::map<std::string, tallyitem> label_tally;\n+\n+    // Create m_address_book iterator\n+    // If we aren't filtering, go from begin() to end()\n+    auto start = wallet.m_address_book.begin();\n+    auto end = wallet.m_address_book.end();\n+    // If we are filtering, find() the applicable entry\n+    if (has_filtered_address) {\n+        start = wallet.m_address_book.find(filtered_address);\n+        if (start != end) {\n+            end = std::next(start);\n+        }\n+    }\n+\n+    for (auto item_it = start; item_it != end; ++item_it)\n+    {\n+        if (item_it->second.IsChange()) continue;\n+        const CTxDestination& address = item_it->first;\n+        const std::string& label = item_it->second.GetLabel();\n+        auto it = mapTally.find(address);\n+        if (it == mapTally.end() && !fIncludeEmpty)\n+            continue;\n+\n+        CAmount nAmount = 0;\n+        int nConf = std::numeric_limits<int>::max();\n+        bool fIsWatchonly = false;\n+        if (it != mapTally.end())\n+        {\n+            nAmount = (*it).second.nAmount;\n+            nConf = (*it).second.nConf;\n+            fIsWatchonly = (*it).second.fIsWatchonly;\n+        }\n+\n+        if (by_label)\n+        {\n+            tallyitem& _item = label_tally[label];\n+            _item.nAmount += nAmount;\n+            _item.nConf = std::min(_item.nConf, nConf);\n+            _item.fIsWatchonly = fIsWatchonly;\n+        }\n+        else\n+        {\n+            UniValue obj(UniValue::VOBJ);\n+            if(fIsWatchonly)\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(address));\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n+            obj.pushKV(\"label\", label);\n+            UniValue transactions(UniValue::VARR);\n+            if (it != mapTally.end())\n+            {\n+                for (const uint256& _item : (*it).second.txids)\n+                {\n+                    transactions.push_back(_item.GetHex());\n+                }\n+            }\n+            obj.pushKV(\"txids\", transactions);\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    if (by_label)\n+    {\n+        for (const auto& entry : label_tally)\n+        {\n+            CAmount nAmount = entry.second.nAmount;\n+            int nConf = entry.second.nConf;\n+            UniValue obj(UniValue::VOBJ);\n+            if (entry.second.fIsWatchonly)\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n+            obj.pushKV(\"label\",         entry.first);\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+RPCHelpMan listreceivedbyaddress()\n+{\n+    return RPCHelpMan{\"listreceivedbyaddress\",\n+                \"\\nList balances by receiving address.\\n\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include addresses that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n+                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::STR, \"address\", \"The receiving address\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received by the address\"},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n+                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n+                            {RPCResult::Type::ARR, \"txids\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The ids of transactions received with the address\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listreceivedbyaddress\", \"\")\n+            + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    return ListReceived(*pwallet, request.params, false);\n+},\n+    };\n+}\n+\n+RPCHelpMan listreceivedbylabel()\n+{\n+    return RPCHelpMan{\"listreceivedbylabel\",\n+                \"\\nList received transactions by label.\\n\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n+                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include labels that haven't received any payments.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount received by addresses with this label\"},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n+                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listreceivedbylabel\", \"\")\n+            + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n+            + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    return ListReceived(*pwallet, request.params, true);\n+},\n+    };\n+}\n+\n+static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n+{\n+    if (IsValidDestination(dest)) {\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n+    }\n+}\n+\n+/**\n+ * List transactions based on the given criteria.\n+ *\n+ * @param  wallet         The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ */\n+static void ListTransactions(const CWallet& wallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    CachedTxGetAmounts(wallet, wtx, listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = CachedTxIsFromMe(wallet, wtx, ISMINE_WATCH_ONLY);\n+\n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (wallet.IsMine(s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            const auto* address_book_entry = wallet.FindAddressBookEntry(s.destination);\n+            if (address_book_entry) {\n+                entry.pushKV(\"label\", address_book_entry->GetLabel());\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(wallet, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wallet.GetTxDepthInMainChain(wtx) >= nMinDepth) {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            const auto* address_book_entry = wallet.FindAddressBookEntry(r.destination);\n+            if (address_book_entry) {\n+                label = address_book_entry->GetLabel();\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (wallet.IsMine(r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wallet.GetTxDepthInMainChain(wtx) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wallet.IsTxImmatureCoinBase(wtx))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (address_book_entry) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(wallet, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+}\n+\n+\n+static const std::vector<RPCResult> TransactionDescriptionString()\n+{\n+    return{{RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations for the transaction. Negative confirmations means the\\n\"\n+               \"transaction conflicted that many blocks ago.\"},\n+           {RPCResult::Type::BOOL, \"generated\", /* optional */ true, \"Only present if the transaction's only input is a coinbase one.\"},\n+           {RPCResult::Type::BOOL, \"trusted\", /* optional */ true, \"Whether we consider the transaction to be trusted and safe to spend from.\\n\"\n+                \"Only present when the transaction has 0 confirmations (or negative confirmations, if conflicted).\"},\n+           {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockheight\", /* optional */ true, \"The block height containing the transaction.\"},\n+           {RPCResult::Type::NUM, \"blockindex\", /* optional */ true, \"The index of the transaction in the block that includes it.\"},\n+           {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+           {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n+           {\n+               {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+           }},\n+           {RPCResult::Type::STR_HEX, \"replaced_by_txid\", /* optional */ true, \"The txid if this tx was replaced.\"},\n+           {RPCResult::Type::STR_HEX, \"replaces_txid\", /* optional */ true, \"The txid if the tx replaces one.\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"\"},\n+           {RPCResult::Type::STR, \"to\", /* optional */ true, \"If a comment to is associated with the transaction.\"},\n+           {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"If a comment is associated with the transaction, only present if not empty.\"},\n+           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+               \"may be unknown for unconfirmed transactions not in the mempool.\"}};\n+}\n+\n+RPCHelpMan listtransactions()\n+{\n+    return RPCHelpMan{\"listtransactions\",\n+                \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+                \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n+                {\n+                    {\"label|dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n+                          \"with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n+                    {\"count\", RPCArg::Type::NUM, RPCArg::Default{10}, \"The number of transactions to return\"},\n+                    {\"skip\", RPCArg::Type::NUM, RPCArg::Default{0}, \"The number of transactions to skip\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                        {\n+                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n+                            {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n+                            {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+                                \"for all other categories\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                 \"'send' category of transactions.\"},\n+                        },\n+                        TransactionDescriptionString()),\n+                        {\n+                            {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                 \"'send' category of transactions.\"},\n+                        })},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nList the most recent 10 transactions in the systems\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\") +\n+            \"\\nList transactions 100 to 120\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    const std::string* filter_label = nullptr;\n+    if (!request.params[0].isNull() && request.params[0].get_str() != \"*\") {\n+        filter_label = &request.params[0].get_str();\n+        if (filter_label->empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n+        }\n+    }\n+    int nCount = 10;\n+    if (!request.params[1].isNull())\n+        nCount = request.params[1].get_int();\n+    int nFrom = 0;\n+    if (!request.params[2].isNull())\n+        nFrom = request.params[2].get_int();\n+    isminefilter filter = ISMINE_SPENDABLE;\n+\n+    if (ParseIncludeWatchonly(request.params[3], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n+\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    if (nFrom < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+\n+    UniValue ret(UniValue::VARR);\n+\n+    {\n+        LOCK(pwallet->cs_wallet);\n+\n+        const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n+\n+        // iterate backwards until we have nCount items to return:\n+        for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n+        {\n+            CWalletTx *const pwtx = (*it).second;\n+            ListTransactions(*pwallet, *pwtx, 0, true, ret, filter, filter_label);\n+            if ((int)ret.size() >= (nCount+nFrom)) break;\n+        }\n+    }\n+\n+    // ret is newest to oldest\n+\n+    if (nFrom > (int)ret.size())\n+        nFrom = ret.size();\n+    if ((nFrom + nCount) > (int)ret.size())\n+        nCount = ret.size() - nFrom;\n+\n+    const std::vector<UniValue>& txs = ret.getValues();\n+    UniValue result{UniValue::VARR};\n+    result.push_backV({ txs.rend() - nFrom - nCount, txs.rend() - nFrom }); // Return oldest to newest\n+    return result;\n+},\n+    };\n+}\n+\n+RPCHelpMan listsinceblock()\n+{\n+    return RPCHelpMan{\"listsinceblock\",\n+                \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n+                \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n+                \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n+                    {\"target_confirmations\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n+                    {\"include_removed\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n+                                                                       \"(not guaranteed to work on pruned nodes)\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"transactions\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                            {\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n+                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+                                    \"for all other categories\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                     \"'send' category of transactions.\"},\n+                            },\n+                            TransactionDescriptionString()),\n+                            {\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                     \"'send' category of transactions.\"},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n+                            })},\n+                        }},\n+                        {RPCResult::Type::ARR, \"removed\", /* optional */ true, \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n+                            \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n+                        , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n+                        {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain, or the genesis hash if the referenced block does not exist yet. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listsinceblock\", \"\")\n+            + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n+            + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    const CWallet& wallet = *pwallet;\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    std::optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n+    std::optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n+    int target_confirms = 1;\n+    isminefilter filter = ISMINE_SPENDABLE;\n+\n+    uint256 blockId;\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n+        blockId = ParseHashV(request.params[0], \"blockhash\");\n+        height = int{};\n+        altheight = int{};\n+        if (!wallet.chain().findCommonAncestor(blockId, wallet.GetLastBlockHash(), /* ancestor out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        target_confirms = request.params[1].get_int();\n+\n+        if (target_confirms < 1) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n+        }\n+    }\n+\n+    if (ParseIncludeWatchonly(request.params[2], wallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n+\n+    bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n+\n+    int depth = height ? wallet.GetLastBlockHeight() + 1 - *height : -1;\n+\n+    UniValue transactions(UniValue::VARR);\n+\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n+        const CWalletTx& tx = pairWtx.second;\n+\n+        if (depth == -1 || abs(wallet.GetTxDepthInMainChain(tx)) < depth) {\n+            ListTransactions(wallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n+        }\n+    }\n+\n+    // when a reorg'd block is requested, we also list any relevant transactions\n+    // in the blocks of the chain that was detached\n+    UniValue removed(UniValue::VARR);\n+    while (include_removed && altheight && *altheight > *height) {\n+        CBlock block;\n+        if (!wallet.chain().findBlock(blockId, FoundBlock().data(block)) || block.IsNull()) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+        }\n+        for (const CTransactionRef& tx : block.vtx) {\n+            auto it = wallet.mapWallet.find(tx->GetHash());\n+            if (it != wallet.mapWallet.end()) {\n+                // We want all transactions regardless of confirmation count to appear here,\n+                // even negative confirmation ones, hence the big negative.\n+                ListTransactions(wallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n+            }\n+        }\n+        blockId = block.hashPrevBlock;\n+        --*altheight;\n+    }\n+\n+    uint256 lastblock;\n+    target_confirms = std::min(target_confirms, wallet.GetLastBlockHeight() + 1);\n+    CHECK_NONFATAL(wallet.chain().findAncestorByHeight(wallet.GetLastBlockHash(), wallet.GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n+\n+    return ret;\n+},\n+    };\n+}\n+\n+RPCHelpMan gettransaction()\n+{\n+    return RPCHelpMan{\"gettransaction\",\n+                \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"},\n+                            \"Whether to include watch-only addresses in balance calculation and details[]\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false},\n+                            \"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                    {\n+                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n+                                     \"'send' category of transactions.\"},\n+                    },\n+                    TransactionDescriptionString()),\n+                    {\n+                        {RPCResult::Type::ARR, \"details\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n+                                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address involved in the transaction.\"},\n+                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n+                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n+                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n+                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n+                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n+                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+                                    \"'send' category of transactions.\"},\n+                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+                                     \"'send' category of transactions.\"},\n+                            }},\n+                        }},\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"Raw data for transaction\"},\n+                        {RPCResult::Type::OBJ, \"decoded\", /* optional */ true, \"The decoded transaction (only present when `verbose` is passed)\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n+                        }},\n+                    })\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n+            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" false true\")\n+            + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+\n+    isminefilter filter = ISMINE_SPENDABLE;\n+\n+    if (ParseIncludeWatchonly(request.params[1], *pwallet)) {\n+        filter |= ISMINE_WATCH_ONLY;\n+    }\n+\n+    bool verbose = request.params[2].isNull() ? false : request.params[2].get_bool();\n+\n+    UniValue entry(UniValue::VOBJ);\n+    auto it = pwallet->mapWallet.find(hash);\n+    if (it == pwallet->mapWallet.end()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    const CWalletTx& wtx = it->second;\n+\n+    CAmount nCredit = CachedTxGetCredit(*pwallet, wtx, filter);\n+    CAmount nDebit = CachedTxGetDebit(*pwallet, wtx, filter);\n+    CAmount nNet = nCredit - nDebit;\n+    CAmount nFee = (CachedTxIsFromMe(*pwallet, wtx, filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n+\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n+    if (CachedTxIsFromMe(*pwallet, wtx, filter))\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n+\n+    WalletTxToJSON(*pwallet, wtx, entry);\n+\n+    UniValue details(UniValue::VARR);\n+    ListTransactions(*pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n+    entry.pushKV(\"details\", details);\n+\n+    std::string strHex = EncodeHexTx(*wtx.tx, pwallet->chain().rpcSerializationFlags());\n+    entry.pushKV(\"hex\", strHex);\n+\n+    if (verbose) {\n+        UniValue decoded(UniValue::VOBJ);\n+        TxToUniv(*wtx.tx, uint256(), decoded, false);\n+        entry.pushKV(\"decoded\", decoded);\n+    }\n+\n+    return entry;\n+},\n+    };\n+}\n+\n+RPCHelpMan abandontransaction()\n+{\n+    return RPCHelpMan{\"abandontransaction\",\n+                \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n+                \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n+                \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n+                \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n+                \"It has no effect on transactions which are already abandoned.\\n\",\n+                {\n+                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                },\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCExamples{\n+                    HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+\n+    if (!pwallet->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    if (!pwallet->AbandonTransaction(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n+    }\n+\n+    return NullUniValue;\n+},\n+    };\n+}\n+\n+RPCHelpMan rescanblockchain()\n+{\n+    return RPCHelpMan{\"rescanblockchain\",\n+                \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n+                \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n+                {\n+                    {\"start_height\", RPCArg::Type::NUM, RPCArg::Default{0}, \"block height where the rescan should start\"},\n+                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"start_height\", \"The block height where the rescan started (the requested height or 0)\"},\n+                        {RPCResult::Type::NUM, \"stop_height\", \"The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.\"},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n+            + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    WalletRescanReserver reserver(*pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    int start_height = 0;\n+    std::optional<int> stop_height;\n+    uint256 start_block;\n+    {\n+        LOCK(pwallet->cs_wallet);\n+        int tip_height = pwallet->GetLastBlockHeight();\n+\n+        if (!request.params[0].isNull()) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || start_height > tip_height) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+            }\n+        }\n+\n+        if (!request.params[1].isNull()) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || *stop_height > tip_height) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+            } else if (*stop_height < start_height) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n+            }\n+        }\n+\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (!pwallet->chain().hasBlocks(pwallet->GetLastBlockHash(), start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), start_height, FoundBlock().hash(start_block)));\n+    }\n+\n+    CWallet::ScanResult result =\n+        pwallet->ScanForWalletTransactions(start_block, start_height, stop_height, reserver, true /* fUpdate */);\n+    switch (result.status) {\n+    case CWallet::ScanResult::SUCCESS:\n+        break;\n+    case CWallet::ScanResult::FAILURE:\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+    case CWallet::ScanResult::USER_ABORT:\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+        // no default case, so the compiler can warn about missing cases\n+    }\n+    UniValue response(UniValue::VOBJ);\n+    response.pushKV(\"start_height\", start_height);\n+    response.pushKV(\"stop_height\", result.last_scanned_height ? *result.last_scanned_height : UniValue());\n+    return response;\n+},\n+    };\n+}"
      },
      {
        "sha": "a84111cfbfb6f8b9b1abbcd8ce6fd283f64719ed",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 897,
        "changes": 906,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2221968c229a1e6b714527ecdfd33b13d2cb72e2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2221968c229a1e6b714527ecdfd33b13d2cb72e2",
        "patch": "@@ -45,8 +45,6 @@\n \n #include <map>\n \n-using interfaces::FoundBlock;\n-\n \n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n bool HaveKey(const SigningProvider& wallet, const CKey& key)\n@@ -56,48 +54,6 @@ bool HaveKey(const SigningProvider& wallet, const CKey& key)\n     return wallet.HaveKey(key.GetPubKey().GetID()) || wallet.HaveKey(key2.GetPubKey().GetID());\n }\n \n-static void WalletTxToJSON(const CWallet& wallet, const CWalletTx& wtx, UniValue& entry)\n-{\n-    interfaces::Chain& chain = wallet.chain();\n-    int confirms = wallet.GetTxDepthInMainChain(wtx);\n-    entry.pushKV(\"confirmations\", confirms);\n-    if (wtx.IsCoinBase())\n-        entry.pushKV(\"generated\", true);\n-    if (auto* conf = wtx.state<TxStateConfirmed>())\n-    {\n-        entry.pushKV(\"blockhash\", conf->confirmed_block_hash.GetHex());\n-        entry.pushKV(\"blockheight\", conf->confirmed_block_height);\n-        entry.pushKV(\"blockindex\", conf->position_in_block);\n-        int64_t block_time;\n-        CHECK_NONFATAL(chain.findBlock(conf->confirmed_block_hash, FoundBlock().time(block_time)));\n-        entry.pushKV(\"blocktime\", block_time);\n-    } else {\n-        entry.pushKV(\"trusted\", CachedTxIsTrusted(wallet, wtx));\n-    }\n-    uint256 hash = wtx.GetHash();\n-    entry.pushKV(\"txid\", hash.GetHex());\n-    UniValue conflicts(UniValue::VARR);\n-    for (const uint256& conflict : wallet.GetTxConflicts(wtx))\n-        conflicts.push_back(conflict.GetHex());\n-    entry.pushKV(\"walletconflicts\", conflicts);\n-    entry.pushKV(\"time\", wtx.GetTxTime());\n-    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n-\n-    // Add opt-in RBF status\n-    std::string rbfStatus = \"no\";\n-    if (confirms <= 0) {\n-        RBFTransactionState rbfState = chain.isRBFOptIn(*wtx.tx);\n-        if (rbfState == RBFTransactionState::UNKNOWN)\n-            rbfStatus = \"unknown\";\n-        else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125)\n-            rbfStatus = \"yes\";\n-    }\n-    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n-\n-    for (const std::pair<const std::string, std::string>& item : wtx.mapValue)\n-        entry.pushKV(item.first, item.second);\n-}\n-\n \n /**\n  * Update coin control with fee estimation based on the given parameters\n@@ -883,779 +839,6 @@ static RPCHelpMan addmultisigaddress()\n     };\n }\n \n-struct tallyitem\n-{\n-    CAmount nAmount{0};\n-    int nConf{std::numeric_limits<int>::max()};\n-    std::vector<uint256> txids;\n-    bool fIsWatchonly{false};\n-    tallyitem()\n-    {\n-    }\n-};\n-\n-static UniValue ListReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n-{\n-    // Minimum confirmations\n-    int nMinDepth = 1;\n-    if (!params[0].isNull())\n-        nMinDepth = params[0].get_int();\n-\n-    // Whether to include empty labels\n-    bool fIncludeEmpty = false;\n-    if (!params[1].isNull())\n-        fIncludeEmpty = params[1].get_bool();\n-\n-    isminefilter filter = ISMINE_SPENDABLE;\n-\n-    if (ParseIncludeWatchonly(params[2], wallet)) {\n-        filter |= ISMINE_WATCH_ONLY;\n-    }\n-\n-    bool has_filtered_address = false;\n-    CTxDestination filtered_address = CNoDestination();\n-    if (!by_label && params.size() > 3) {\n-        if (!IsValidDestinationString(params[3].get_str())) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"address_filter parameter was invalid\");\n-        }\n-        filtered_address = DecodeDestination(params[3].get_str());\n-        has_filtered_address = true;\n-    }\n-\n-    // Tally\n-    std::map<CTxDestination, tallyitem> mapTally;\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n-        const CWalletTx& wtx = pairWtx.second;\n-\n-        if (wtx.IsCoinBase() || !wallet.chain().checkFinalTx(*wtx.tx)) {\n-            continue;\n-        }\n-\n-        int nDepth = wallet.GetTxDepthInMainChain(wtx);\n-        if (nDepth < nMinDepth)\n-            continue;\n-\n-        for (const CTxOut& txout : wtx.tx->vout)\n-        {\n-            CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address))\n-                continue;\n-\n-            if (has_filtered_address && !(filtered_address == address)) {\n-                continue;\n-            }\n-\n-            isminefilter mine = wallet.IsMine(address);\n-            if(!(mine & filter))\n-                continue;\n-\n-            tallyitem& item = mapTally[address];\n-            item.nAmount += txout.nValue;\n-            item.nConf = std::min(item.nConf, nDepth);\n-            item.txids.push_back(wtx.GetHash());\n-            if (mine & ISMINE_WATCH_ONLY)\n-                item.fIsWatchonly = true;\n-        }\n-    }\n-\n-    // Reply\n-    UniValue ret(UniValue::VARR);\n-    std::map<std::string, tallyitem> label_tally;\n-\n-    // Create m_address_book iterator\n-    // If we aren't filtering, go from begin() to end()\n-    auto start = wallet.m_address_book.begin();\n-    auto end = wallet.m_address_book.end();\n-    // If we are filtering, find() the applicable entry\n-    if (has_filtered_address) {\n-        start = wallet.m_address_book.find(filtered_address);\n-        if (start != end) {\n-            end = std::next(start);\n-        }\n-    }\n-\n-    for (auto item_it = start; item_it != end; ++item_it)\n-    {\n-        if (item_it->second.IsChange()) continue;\n-        const CTxDestination& address = item_it->first;\n-        const std::string& label = item_it->second.GetLabel();\n-        auto it = mapTally.find(address);\n-        if (it == mapTally.end() && !fIncludeEmpty)\n-            continue;\n-\n-        CAmount nAmount = 0;\n-        int nConf = std::numeric_limits<int>::max();\n-        bool fIsWatchonly = false;\n-        if (it != mapTally.end())\n-        {\n-            nAmount = (*it).second.nAmount;\n-            nConf = (*it).second.nConf;\n-            fIsWatchonly = (*it).second.fIsWatchonly;\n-        }\n-\n-        if (by_label)\n-        {\n-            tallyitem& _item = label_tally[label];\n-            _item.nAmount += nAmount;\n-            _item.nConf = std::min(_item.nConf, nConf);\n-            _item.fIsWatchonly = fIsWatchonly;\n-        }\n-        else\n-        {\n-            UniValue obj(UniValue::VOBJ);\n-            if(fIsWatchonly)\n-                obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"address\",       EncodeDestination(address));\n-            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n-            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n-            obj.pushKV(\"label\", label);\n-            UniValue transactions(UniValue::VARR);\n-            if (it != mapTally.end())\n-            {\n-                for (const uint256& _item : (*it).second.txids)\n-                {\n-                    transactions.push_back(_item.GetHex());\n-                }\n-            }\n-            obj.pushKV(\"txids\", transactions);\n-            ret.push_back(obj);\n-        }\n-    }\n-\n-    if (by_label)\n-    {\n-        for (const auto& entry : label_tally)\n-        {\n-            CAmount nAmount = entry.second.nAmount;\n-            int nConf = entry.second.nConf;\n-            UniValue obj(UniValue::VOBJ);\n-            if (entry.second.fIsWatchonly)\n-                obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n-            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n-            obj.pushKV(\"label\",         entry.first);\n-            ret.push_back(obj);\n-        }\n-    }\n-\n-    return ret;\n-}\n-\n-static RPCHelpMan listreceivedbyaddress()\n-{\n-    return RPCHelpMan{\"listreceivedbyaddress\",\n-                \"\\nList balances by receiving address.\\n\",\n-                {\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include addresses that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n-                    {\"address_filter\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If present, only return information on this address.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n-                            {RPCResult::Type::STR, \"address\", \"The receiving address\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received by the address\"},\n-                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n-                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n-                            {RPCResult::Type::ARR, \"txids\", \"\",\n-                            {\n-                                {RPCResult::Type::STR_HEX, \"txid\", \"The ids of transactions received with the address\"},\n-                            }},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"listreceivedbyaddress\", \"\")\n-            + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n-            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n-            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    return ListReceived(*pwallet, request.params, false);\n-},\n-    };\n-}\n-\n-static RPCHelpMan listreceivedbylabel()\n-{\n-    return RPCHelpMan{\"listreceivedbylabel\",\n-                \"\\nList received transactions by label.\\n\",\n-                {\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum number of confirmations before payments are included.\"},\n-                    {\"include_empty\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to include labels that haven't received any payments.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Whether to include watch-only addresses (see 'importaddress')\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount received by addresses with this label\"},\n-                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations of the most recent transaction included\"},\n-                            {RPCResult::Type::STR, \"label\", \"The label of the receiving address. The default label is \\\"\\\"\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"listreceivedbylabel\", \"\")\n-            + HelpExampleCli(\"listreceivedbylabel\", \"6 true\")\n-            + HelpExampleRpc(\"listreceivedbylabel\", \"6, true, true\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    return ListReceived(*pwallet, request.params, true);\n-},\n-    };\n-}\n-\n-static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n-{\n-    if (IsValidDestination(dest)) {\n-        entry.pushKV(\"address\", EncodeDestination(dest));\n-    }\n-}\n-\n-/**\n- * List transactions based on the given criteria.\n- *\n- * @param  wallet         The wallet.\n- * @param  wtx            The wallet transaction.\n- * @param  nMinDepth      The minimum confirmation depth.\n- * @param  fLong          Whether to include the JSON version of the transaction.\n- * @param  ret            The UniValue into which the result is stored.\n- * @param  filter_ismine  The \"is mine\" filter flags.\n- * @param  filter_label   Optional label string to filter incoming transactions.\n- */\n-static void ListTransactions(const CWallet& wallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n-{\n-    CAmount nFee;\n-    std::list<COutputEntry> listReceived;\n-    std::list<COutputEntry> listSent;\n-\n-    CachedTxGetAmounts(wallet, wtx, listReceived, listSent, nFee, filter_ismine);\n-\n-    bool involvesWatchonly = CachedTxIsFromMe(wallet, wtx, ISMINE_WATCH_ONLY);\n-\n-    // Sent\n-    if (!filter_label)\n-    {\n-        for (const COutputEntry& s : listSent)\n-        {\n-            UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (wallet.IsMine(s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.pushKV(\"involvesWatchonly\", true);\n-            }\n-            MaybePushAddress(entry, s.destination);\n-            entry.pushKV(\"category\", \"send\");\n-            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n-            const auto* address_book_entry = wallet.FindAddressBookEntry(s.destination);\n-            if (address_book_entry) {\n-                entry.pushKV(\"label\", address_book_entry->GetLabel());\n-            }\n-            entry.pushKV(\"vout\", s.vout);\n-            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n-            if (fLong)\n-                WalletTxToJSON(wallet, wtx, entry);\n-            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n-            ret.push_back(entry);\n-        }\n-    }\n-\n-    // Received\n-    if (listReceived.size() > 0 && wallet.GetTxDepthInMainChain(wtx) >= nMinDepth) {\n-        for (const COutputEntry& r : listReceived)\n-        {\n-            std::string label;\n-            const auto* address_book_entry = wallet.FindAddressBookEntry(r.destination);\n-            if (address_book_entry) {\n-                label = address_book_entry->GetLabel();\n-            }\n-            if (filter_label && label != *filter_label) {\n-                continue;\n-            }\n-            UniValue entry(UniValue::VOBJ);\n-            if (involvesWatchonly || (wallet.IsMine(r.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.pushKV(\"involvesWatchonly\", true);\n-            }\n-            MaybePushAddress(entry, r.destination);\n-            if (wtx.IsCoinBase())\n-            {\n-                if (wallet.GetTxDepthInMainChain(wtx) < 1)\n-                    entry.pushKV(\"category\", \"orphan\");\n-                else if (wallet.IsTxImmatureCoinBase(wtx))\n-                    entry.pushKV(\"category\", \"immature\");\n-                else\n-                    entry.pushKV(\"category\", \"generate\");\n-            }\n-            else\n-            {\n-                entry.pushKV(\"category\", \"receive\");\n-            }\n-            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n-            if (address_book_entry) {\n-                entry.pushKV(\"label\", label);\n-            }\n-            entry.pushKV(\"vout\", r.vout);\n-            if (fLong)\n-                WalletTxToJSON(wallet, wtx, entry);\n-            ret.push_back(entry);\n-        }\n-    }\n-}\n-\n-static const std::vector<RPCResult> TransactionDescriptionString()\n-{\n-    return{{RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations for the transaction. Negative confirmations means the\\n\"\n-               \"transaction conflicted that many blocks ago.\"},\n-           {RPCResult::Type::BOOL, \"generated\", /* optional */ true, \"Only present if the transaction's only input is a coinbase one.\"},\n-           {RPCResult::Type::BOOL, \"trusted\", /* optional */ true, \"Whether we consider the transaction to be trusted and safe to spend from.\\n\"\n-                \"Only present when the transaction has 0 confirmations (or negative confirmations, if conflicted).\"},\n-           {RPCResult::Type::STR_HEX, \"blockhash\", /* optional */ true, \"The block hash containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockheight\", /* optional */ true, \"The block height containing the transaction.\"},\n-           {RPCResult::Type::NUM, \"blockindex\", /* optional */ true, \"The index of the transaction in the block that includes it.\"},\n-           {RPCResult::Type::NUM_TIME, \"blocktime\", /* optional */ true, \"The block time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-           {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n-           {RPCResult::Type::ARR, \"walletconflicts\", \"Conflicting transaction ids.\",\n-           {\n-               {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n-           }},\n-           {RPCResult::Type::STR_HEX, \"replaced_by_txid\", /* optional */ true, \"The txid if this tx was replaced.\"},\n-           {RPCResult::Type::STR_HEX, \"replaces_txid\", /* optional */ true, \"The txid if the tx replaces one.\"},\n-           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"\"},\n-           {RPCResult::Type::STR, \"to\", /* optional */ true, \"If a comment to is associated with the transaction.\"},\n-           {RPCResult::Type::NUM_TIME, \"time\", \"The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-           {RPCResult::Type::NUM_TIME, \"timereceived\", \"The time received expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-           {RPCResult::Type::STR, \"comment\", /* optional */ true, \"If a comment is associated with the transaction, only present if not empty.\"},\n-           {RPCResult::Type::STR, \"bip125-replaceable\", \"(\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n-               \"may be unknown for unconfirmed transactions not in the mempool.\"}};\n-}\n-\n-static RPCHelpMan listtransactions()\n-{\n-    return RPCHelpMan{\"listtransactions\",\n-                \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n-                \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n-                {\n-                    {\"label|dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, should be a valid label name to return only incoming transactions\\n\"\n-                          \"with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\"},\n-                    {\"count\", RPCArg::Type::NUM, RPCArg::Default{10}, \"The number of transactions to return\"},\n-                    {\"skip\", RPCArg::Type::NUM, RPCArg::Default{0}, \"The number of transactions to skip\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n-                        {\n-                            {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n-                            {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n-                            {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n-                                \"\\\"send\\\"                  Transactions sent.\\n\"\n-                                \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-                                \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-                                \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-                                \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n-                                \"for all other categories\"},\n-                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n-                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n-                                 \"'send' category of transactions.\"},\n-                        },\n-                        TransactionDescriptionString()),\n-                        {\n-                            {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-                                 \"'send' category of transactions.\"},\n-                        })},\n-                    }\n-                },\n-                RPCExamples{\n-            \"\\nList the most recent 10 transactions in the systems\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\") +\n-            \"\\nList transactions 100 to 120\\n\"\n-            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 20 100\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    const std::string* filter_label = nullptr;\n-    if (!request.params[0].isNull() && request.params[0].get_str() != \"*\") {\n-        filter_label = &request.params[0].get_str();\n-        if (filter_label->empty()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n-        }\n-    }\n-    int nCount = 10;\n-    if (!request.params[1].isNull())\n-        nCount = request.params[1].get_int();\n-    int nFrom = 0;\n-    if (!request.params[2].isNull())\n-        nFrom = request.params[2].get_int();\n-    isminefilter filter = ISMINE_SPENDABLE;\n-\n-    if (ParseIncludeWatchonly(request.params[3], *pwallet)) {\n-        filter |= ISMINE_WATCH_ONLY;\n-    }\n-\n-    if (nCount < 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n-    if (nFrom < 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n-\n-    UniValue ret(UniValue::VARR);\n-\n-    {\n-        LOCK(pwallet->cs_wallet);\n-\n-        const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n-\n-        // iterate backwards until we have nCount items to return:\n-        for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n-        {\n-            CWalletTx *const pwtx = (*it).second;\n-            ListTransactions(*pwallet, *pwtx, 0, true, ret, filter, filter_label);\n-            if ((int)ret.size() >= (nCount+nFrom)) break;\n-        }\n-    }\n-\n-    // ret is newest to oldest\n-\n-    if (nFrom > (int)ret.size())\n-        nFrom = ret.size();\n-    if ((nFrom + nCount) > (int)ret.size())\n-        nCount = ret.size() - nFrom;\n-\n-    const std::vector<UniValue>& txs = ret.getValues();\n-    UniValue result{UniValue::VARR};\n-    result.push_backV({ txs.rend() - nFrom - nCount, txs.rend() - nFrom }); // Return oldest to newest\n-    return result;\n-},\n-    };\n-}\n-\n-static RPCHelpMan listsinceblock()\n-{\n-    return RPCHelpMan{\"listsinceblock\",\n-                \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n-                \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n-                \"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \\\"removed\\\" array.\\n\",\n-                {\n-                    {\"blockhash\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"If set, the block hash to list transactions since, otherwise list all transactions.\"},\n-                    {\"target_confirmations\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Include transactions to watch-only addresses (see 'importaddress')\"},\n-                    {\"include_removed\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Show transactions that were removed due to a reorg in the \\\"removed\\\" array\\n\"\n-                                                                       \"(not guaranteed to work on pruned nodes)\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::ARR, \"transactions\", \"\",\n-                        {\n-                            {RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n-                            {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n-                                {RPCResult::Type::STR, \"address\", \"The bitcoin address of the transaction.\"},\n-                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n-                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n-                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n-                                    \"for all other categories\"},\n-                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n-                                     \"'send' category of transactions.\"},\n-                            },\n-                            TransactionDescriptionString()),\n-                            {\n-                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-                                     \"'send' category of transactions.\"},\n-                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n-                            })},\n-                        }},\n-                        {RPCResult::Type::ARR, \"removed\", /* optional */ true, \"<structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n-                            \"Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\"\n-                        , {{RPCResult::Type::ELISION, \"\", \"\"},}},\n-                        {RPCResult::Type::STR_HEX, \"lastblock\", \"The hash of the block (target_confirmations-1) from the best block on the main chain, or the genesis hash if the referenced block does not exist yet. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\"},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"listsinceblock\", \"\")\n-            + HelpExampleCli(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\" 6\")\n-            + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    const CWallet& wallet = *pwallet;\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(wallet.cs_wallet);\n-\n-    std::optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    std::optional<int> altheight; // Height of the specified block, even if it's in a deactivated chain.\n-    int target_confirms = 1;\n-    isminefilter filter = ISMINE_SPENDABLE;\n-\n-    uint256 blockId;\n-    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n-        blockId = ParseHashV(request.params[0], \"blockhash\");\n-        height = int{};\n-        altheight = int{};\n-        if (!wallet.chain().findCommonAncestor(blockId, wallet.GetLastBlockHash(), /* ancestor out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-    }\n-\n-    if (!request.params[1].isNull()) {\n-        target_confirms = request.params[1].get_int();\n-\n-        if (target_confirms < 1) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n-        }\n-    }\n-\n-    if (ParseIncludeWatchonly(request.params[2], wallet)) {\n-        filter |= ISMINE_WATCH_ONLY;\n-    }\n-\n-    bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n-\n-    int depth = height ? wallet.GetLastBlockHeight() + 1 - *height : -1;\n-\n-    UniValue transactions(UniValue::VARR);\n-\n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n-        const CWalletTx& tx = pairWtx.second;\n-\n-        if (depth == -1 || abs(wallet.GetTxDepthInMainChain(tx)) < depth) {\n-            ListTransactions(wallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n-        }\n-    }\n-\n-    // when a reorg'd block is requested, we also list any relevant transactions\n-    // in the blocks of the chain that was detached\n-    UniValue removed(UniValue::VARR);\n-    while (include_removed && altheight && *altheight > *height) {\n-        CBlock block;\n-        if (!wallet.chain().findBlock(blockId, FoundBlock().data(block)) || block.IsNull()) {\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n-        }\n-        for (const CTransactionRef& tx : block.vtx) {\n-            auto it = wallet.mapWallet.find(tx->GetHash());\n-            if (it != wallet.mapWallet.end()) {\n-                // We want all transactions regardless of confirmation count to appear here,\n-                // even negative confirmation ones, hence the big negative.\n-                ListTransactions(wallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n-            }\n-        }\n-        blockId = block.hashPrevBlock;\n-        --*altheight;\n-    }\n-\n-    uint256 lastblock;\n-    target_confirms = std::min(target_confirms, wallet.GetLastBlockHeight() + 1);\n-    CHECK_NONFATAL(wallet.chain().findAncestorByHeight(wallet.GetLastBlockHash(), wallet.GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n-\n-    UniValue ret(UniValue::VOBJ);\n-    ret.pushKV(\"transactions\", transactions);\n-    if (include_removed) ret.pushKV(\"removed\", removed);\n-    ret.pushKV(\"lastblock\", lastblock.GetHex());\n-\n-    return ret;\n-},\n-    };\n-}\n-\n-static RPCHelpMan gettransaction()\n-{\n-    return RPCHelpMan{\"gettransaction\",\n-                \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n-                {\n-                    {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"},\n-                            \"Whether to include watch-only addresses in balance calculation and details[]\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false},\n-                            \"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n-                    {\n-                        {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the\\n\"\n-                                     \"'send' category of transactions.\"},\n-                    },\n-                    TransactionDescriptionString()),\n-                    {\n-                        {RPCResult::Type::ARR, \"details\", \"\",\n-                        {\n-                            {RPCResult::Type::OBJ, \"\", \"\",\n-                            {\n-                                {RPCResult::Type::BOOL, \"involvesWatchonly\", /* optional */ true, \"Only returns true if imported addresses were involved in transaction.\"},\n-                                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address involved in the transaction.\"},\n-                                {RPCResult::Type::STR, \"category\", \"The transaction category.\\n\"\n-                                    \"\\\"send\\\"                  Transactions sent.\\n\"\n-                                    \"\\\"receive\\\"               Non-coinbase transactions received.\\n\"\n-                                    \"\\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n-                                    \"\\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n-                                    \"\\\"orphan\\\"                Orphaned coinbase transactions received.\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"A comment for the address/transaction, if any\"},\n-                                {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n-                                    \"'send' category of transactions.\"},\n-                                {RPCResult::Type::BOOL, \"abandoned\", /* optional */ true, \"'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n-                                     \"'send' category of transactions.\"},\n-                            }},\n-                        }},\n-                        {RPCResult::Type::STR_HEX, \"hex\", \"Raw data for transaction\"},\n-                        {RPCResult::Type::OBJ, \"decoded\", /* optional */ true, \"The decoded transaction (only present when `verbose` is passed)\",\n-                        {\n-                            {RPCResult::Type::ELISION, \"\", \"Equivalent to the RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\"},\n-                        }},\n-                    })\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n-            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" false true\")\n-            + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n-\n-    isminefilter filter = ISMINE_SPENDABLE;\n-\n-    if (ParseIncludeWatchonly(request.params[1], *pwallet)) {\n-        filter |= ISMINE_WATCH_ONLY;\n-    }\n-\n-    bool verbose = request.params[2].isNull() ? false : request.params[2].get_bool();\n-\n-    UniValue entry(UniValue::VOBJ);\n-    auto it = pwallet->mapWallet.find(hash);\n-    if (it == pwallet->mapWallet.end()) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    }\n-    const CWalletTx& wtx = it->second;\n-\n-    CAmount nCredit = CachedTxGetCredit(*pwallet, wtx, filter);\n-    CAmount nDebit = CachedTxGetDebit(*pwallet, wtx, filter);\n-    CAmount nNet = nCredit - nDebit;\n-    CAmount nFee = (CachedTxIsFromMe(*pwallet, wtx, filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n-\n-    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n-    if (CachedTxIsFromMe(*pwallet, wtx, filter))\n-        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n-\n-    WalletTxToJSON(*pwallet, wtx, entry);\n-\n-    UniValue details(UniValue::VARR);\n-    ListTransactions(*pwallet, wtx, 0, false, details, filter, nullptr /* filter_label */);\n-    entry.pushKV(\"details\", details);\n-\n-    std::string strHex = EncodeHexTx(*wtx.tx, pwallet->chain().rpcSerializationFlags());\n-    entry.pushKV(\"hex\", strHex);\n-\n-    if (verbose) {\n-        UniValue decoded(UniValue::VOBJ);\n-        TxToUniv(*wtx.tx, uint256(), decoded, false);\n-        entry.pushKV(\"decoded\", decoded);\n-    }\n-\n-    return entry;\n-},\n-    };\n-}\n-\n-static RPCHelpMan abandontransaction()\n-{\n-    return RPCHelpMan{\"abandontransaction\",\n-                \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n-                \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n-                \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n-                \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-                \"It has no effect on transactions which are already abandoned.\\n\",\n-                {\n-                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\n-                    HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-            + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n-\n-    if (!pwallet->mapWallet.count(hash)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    }\n-    if (!pwallet->AbandonTransaction(hash)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n-    }\n-\n-    return NullUniValue;\n-},\n-    };\n-}\n-\n static RPCHelpMan keypoolrefill()\n {\n     return RPCHelpMan{\"keypoolrefill\",\n@@ -3280,86 +2463,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n static RPCHelpMan bumpfee() { return bumpfee_helper(\"bumpfee\"); }\n static RPCHelpMan psbtbumpfee() { return bumpfee_helper(\"psbtbumpfee\"); }\n \n-static RPCHelpMan rescanblockchain()\n-{\n-    return RPCHelpMan{\"rescanblockchain\",\n-                \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n-                \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n-                {\n-                    {\"start_height\", RPCArg::Type::NUM, RPCArg::Default{0}, \"block height where the rescan should start\"},\n-                    {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::NUM, \"start_height\", \"The block height where the rescan started (the requested height or 0)\"},\n-                        {RPCResult::Type::NUM, \"stop_height\", \"The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.\"},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"rescanblockchain\", \"100000 120000\")\n-            + HelpExampleRpc(\"rescanblockchain\", \"100000, 120000\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    WalletRescanReserver reserver(*pwallet);\n-    if (!reserver.reserve()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n-    }\n-\n-    int start_height = 0;\n-    std::optional<int> stop_height;\n-    uint256 start_block;\n-    {\n-        LOCK(pwallet->cs_wallet);\n-        int tip_height = pwallet->GetLastBlockHeight();\n-\n-        if (!request.params[0].isNull()) {\n-            start_height = request.params[0].get_int();\n-            if (start_height < 0 || start_height > tip_height) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n-            }\n-        }\n-\n-        if (!request.params[1].isNull()) {\n-            stop_height = request.params[1].get_int();\n-            if (*stop_height < 0 || *stop_height > tip_height) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n-            } else if (*stop_height < start_height) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n-            }\n-        }\n-\n-        // We can't rescan beyond non-pruned blocks, stop and throw an error\n-        if (!pwallet->chain().hasBlocks(pwallet->GetLastBlockHash(), start_height, stop_height)) {\n-            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-        }\n-\n-        CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), start_height, FoundBlock().hash(start_block)));\n-    }\n-\n-    CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(start_block, start_height, stop_height, reserver, true /* fUpdate */);\n-    switch (result.status) {\n-    case CWallet::ScanResult::SUCCESS:\n-        break;\n-    case CWallet::ScanResult::FAILURE:\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n-    case CWallet::ScanResult::USER_ABORT:\n-        throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n-        // no default case, so the compiler can warn about missing cases\n-    }\n-    UniValue response(UniValue::VOBJ);\n-    response.pushKV(\"start_height\", start_height);\n-    response.pushKV(\"stop_height\", result.last_scanned_height ? *result.last_scanned_height : UniValue());\n-    return response;\n-},\n-    };\n-}\n-\n class DescribeWalletAddressVisitor\n {\n public:\n@@ -4339,6 +3442,15 @@ RPCHelpMan walletpassphrasechange();\n RPCHelpMan walletlock();\n RPCHelpMan encryptwallet();\n \n+// transactions\n+RPCHelpMan listreceivedbyaddress();\n+RPCHelpMan listreceivedbylabel();\n+RPCHelpMan listtransactions();\n+RPCHelpMan listsinceblock();\n+RPCHelpMan gettransaction();\n+RPCHelpMan abandontransaction();\n+RPCHelpMan rescanblockchain();\n+\n Span<const CRPCCommand> GetWalletRPCCommands()\n {\n // clang-format off"
      }
    ]
  },
  {
    "sha": "a487239c7698a5063908c3c5f00dc1e2f16e7cec",
    "node_id": "C_kwDOABII59oAKGE0ODcyMzljNzY5OGE1MDYzOTA4YzNjNWYwMGRjMWUyZjE2ZTdjZWM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T02:40:40Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:50:56Z"
      },
      "message": "MOVEONLY: Move address related functions from rpcwallet to addresses.cpp",
      "tree": {
        "sha": "e484ef67bf78965aa8df5277411830b1703438a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e484ef67bf78965aa8df5277411830b1703438a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a487239c7698a5063908c3c5f00dc1e2f16e7cec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a487239c7698a5063908c3c5f00dc1e2f16e7cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a487239c7698a5063908c3c5f00dc1e2f16e7cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a487239c7698a5063908c3c5f00dc1e2f16e7cec/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2221968c229a1e6b714527ecdfd33b13d2cb72e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2221968c229a1e6b714527ecdfd33b13d2cb72e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2221968c229a1e6b714527ecdfd33b13d2cb72e2"
      }
    ],
    "stats": {
      "total": 1577,
      "additions": 802,
      "deletions": 775
    },
    "files": [
      {
        "sha": "b1483e3b3fb1239e6604c1566dc10f51b8fa55b5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a487239c7698a5063908c3c5f00dc1e2f16e7cec",
        "patch": "@@ -410,6 +410,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/interfaces.cpp \\\n   wallet/load.cpp \\\n   wallet/receive.cpp \\\n+  wallet/rpc/addresses.cpp \\\n   wallet/rpc/backup.cpp \\\n   wallet/rpc/encrypt.cpp \\\n   wallet/rpc/signmessage.cpp \\"
      },
      {
        "sha": "8e75bc56d3529b49f58f85adb7e5d94f53d79e99",
        "filename": "src/wallet/rpc/addresses.cpp",
        "status": "added",
        "additions": 787,
        "deletions": 0,
        "changes": 787,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/wallet/rpc/addresses.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/wallet/rpc/addresses.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/addresses.cpp?ref=a487239c7698a5063908c3c5f00dc1e2f16e7cec",
        "patch": "@@ -0,0 +1,787 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/util.h>\n+#include <util/bip32.h>\n+#include <util/translation.h>\n+#include <wallet/receive.h>\n+#include <wallet/rpc/util.h>\n+#include <wallet/wallet.h>\n+\n+#include <univalue.h>\n+\n+RPCHelpMan getnewaddress()\n+{\n+    return RPCHelpMan{\"getnewaddress\",\n+                \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n+                \"If 'label' is specified, it is added to the address book \\n\"\n+                \"so payments received with the address will be associated with 'label'.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR, \"address\", \"The new bitcoin address\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getnewaddress\", \"\")\n+            + HelpExampleRpc(\"getnewaddress\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    if (!pwallet->CanGetAddresses()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string label;\n+    if (!request.params[0].isNull())\n+        label = LabelFromValue(request.params[0]);\n+\n+    OutputType output_type = pwallet->m_default_address_type;\n+    if (!request.params[1].isNull()) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[1].get_str());\n+        if (!parsed) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n+        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n+        output_type = parsed.value();\n+    }\n+\n+    CTxDestination dest;\n+    bilingual_str error;\n+    if (!pwallet->GetNewDestination(output_type, label, dest, error)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n+    }\n+\n+    return EncodeDestination(dest);\n+},\n+    };\n+}\n+\n+RPCHelpMan getrawchangeaddress()\n+{\n+    return RPCHelpMan{\"getrawchangeaddress\",\n+                \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n+                \"This is for use with raw transactions, NOT normal use.\\n\",\n+                {\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR, \"address\", \"The address\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrawchangeaddress\", \"\")\n+            + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    if (!pwallet->CanGetAddresses(true)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+    OutputType output_type = pwallet->m_default_change_type.value_or(pwallet->m_default_address_type);\n+    if (!request.params[0].isNull()) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[0].get_str());\n+        if (!parsed) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n+        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n+        }\n+        output_type = parsed.value();\n+    }\n+\n+    CTxDestination dest;\n+    bilingual_str error;\n+    if (!pwallet->GetNewChangeDestination(output_type, dest, error)) {\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n+    }\n+    return EncodeDestination(dest);\n+},\n+    };\n+}\n+\n+\n+RPCHelpMan setlabel()\n+{\n+    return RPCHelpMan{\"setlabel\",\n+                \"\\nSets the label associated with the given address.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n+                },\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCExamples{\n+                    HelpExampleCli(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"tabby\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::string label = LabelFromValue(request.params[1]);\n+\n+    if (pwallet->IsMine(dest)) {\n+        pwallet->SetAddressBook(dest, label, \"receive\");\n+    } else {\n+        pwallet->SetAddressBook(dest, label, \"send\");\n+    }\n+\n+    return NullUniValue;\n+},\n+    };\n+}\n+\n+RPCHelpMan listaddressgroupings()\n+{\n+    return RPCHelpMan{\"listaddressgroupings\",\n+                \"\\nLists groups of addresses which have had their common ownership\\n\"\n+                \"made public by common use as inputs or as the resulting change\\n\"\n+                \"in past transactions\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::ARR_FIXED, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"address\", \"The bitcoin address\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n+                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"The label\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listaddressgroupings\", \"\")\n+            + HelpExampleRpc(\"listaddressgroupings\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue jsonGroupings(UniValue::VARR);\n+    std::map<CTxDestination, CAmount> balances = GetAddressBalances(*pwallet);\n+    for (const std::set<CTxDestination>& grouping : GetAddressGroupings(*pwallet)) {\n+        UniValue jsonGrouping(UniValue::VARR);\n+        for (const CTxDestination& address : grouping)\n+        {\n+            UniValue addressInfo(UniValue::VARR);\n+            addressInfo.push_back(EncodeDestination(address));\n+            addressInfo.push_back(ValueFromAmount(balances[address]));\n+            {\n+                const auto* address_book_entry = pwallet->FindAddressBookEntry(address);\n+                if (address_book_entry) {\n+                    addressInfo.push_back(address_book_entry->GetLabel());\n+                }\n+            }\n+            jsonGrouping.push_back(addressInfo);\n+        }\n+        jsonGroupings.push_back(jsonGrouping);\n+    }\n+    return jsonGroupings;\n+},\n+    };\n+}\n+\n+RPCHelpMan addmultisigaddress()\n+{\n+    return RPCHelpMan{\"addmultisigaddress\",\n+                \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n+                \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n+                \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n+                \"See `importaddress` for watchonly p2sh address support.\\n\"\n+                \"If 'label' is specified, assign address to that label.\\n\",\n+                {\n+                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n+                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The bitcoin addresses or hex-encoded public keys\",\n+                        {\n+                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n+                        },\n+                        },\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n+                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The value of the new multisig address\"},\n+                        {RPCResult::Type::STR_HEX, \"redeemScript\", \"The string value of the hex-encoded redemption script\"},\n+                        {RPCResult::Type::STR, \"descriptor\", \"The descriptor for this multisig\"},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nAdd a multisig address from 2 addresses\\n\"\n+            + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n+\n+    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n+\n+    std::string label;\n+    if (!request.params[2].isNull())\n+        label = LabelFromValue(request.params[2]);\n+\n+    int required = request.params[0].get_int();\n+\n+    // Get the public keys\n+    const UniValue& keys_or_addrs = request.params[1].get_array();\n+    std::vector<CPubKey> pubkeys;\n+    for (unsigned int i = 0; i < keys_or_addrs.size(); ++i) {\n+        if (IsHex(keys_or_addrs[i].get_str()) && (keys_or_addrs[i].get_str().length() == 66 || keys_or_addrs[i].get_str().length() == 130)) {\n+            pubkeys.push_back(HexToPubKey(keys_or_addrs[i].get_str()));\n+        } else {\n+            pubkeys.push_back(AddrToPubKey(spk_man, keys_or_addrs[i].get_str()));\n+        }\n+    }\n+\n+    OutputType output_type = pwallet->m_default_address_type;\n+    if (!request.params[3].isNull()) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[3].get_str());\n+        if (!parsed) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n+        } else if (parsed.value() == OutputType::BECH32M) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n+        }\n+        output_type = parsed.value();\n+    }\n+\n+    // Construct using pay-to-script-hash:\n+    CScript inner;\n+    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, spk_man, inner);\n+    pwallet->SetAddressBook(dest, label, \"send\");\n+\n+    // Make the descriptor\n+    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), spk_man);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"address\", EncodeDestination(dest));\n+    result.pushKV(\"redeemScript\", HexStr(inner));\n+    result.pushKV(\"descriptor\", descriptor->ToString());\n+    return result;\n+},\n+    };\n+}\n+\n+RPCHelpMan keypoolrefill()\n+{\n+    return RPCHelpMan{\"keypoolrefill\",\n+                \"\\nFills the keypool.\"+\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"newsize\", RPCArg::Type::NUM, RPCArg::DefaultHint{strprintf(\"%u, or as set by -keypool\", DEFAULT_KEYPOOL_SIZE)}, \"The new keypool size\"},\n+                },\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCExamples{\n+                    HelpExampleCli(\"keypoolrefill\", \"\")\n+            + HelpExampleRpc(\"keypoolrefill\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    if (pwallet->IsLegacy() && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n+    unsigned int kpSize = 0;\n+    if (!request.params[0].isNull()) {\n+        if (request.params[0].get_int() < 0)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n+        kpSize = (unsigned int)request.params[0].get_int();\n+    }\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+    pwallet->TopUpKeyPool(kpSize);\n+\n+    if (pwallet->GetKeyPoolSize() < kpSize) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n+    }\n+\n+    return NullUniValue;\n+},\n+    };\n+}\n+\n+RPCHelpMan newkeypool()\n+{\n+    return RPCHelpMan{\"newkeypool\",\n+                \"\\nEntirely clears and refills the keypool.\"+\n+            HELP_REQUIRING_PASSPHRASE,\n+                {},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCExamples{\n+            HelpExampleCli(\"newkeypool\", \"\")\n+            + HelpExampleRpc(\"newkeypool\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet, true);\n+    spk_man.NewKeyPool();\n+\n+    return NullUniValue;\n+},\n+    };\n+}\n+\n+\n+class DescribeWalletAddressVisitor\n+{\n+public:\n+    const SigningProvider * const provider;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n+    {\n+        // Always present: script type and redeemscript\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        TxoutType which_type = Solver(subscript, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript));\n+\n+        CTxDestination embedded;\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = std::visit(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+        } else if (which_type == TxoutType::MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                pubkeys.push_back(HexStr(key));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(const SigningProvider* _provider) : provider(_provider) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const PKHash& pkhash) const\n+    {\n+        CKeyID keyID{ToKeyID(pkhash)};\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (provider && provider->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const ScriptHash& scripthash) const\n+    {\n+        CScriptID scriptID(scripthash);\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (provider && provider->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (provider && provider->GetPubKey(ToKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (provider && provider->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV1Taproot& id) const { return UniValue(UniValue::VOBJ); }\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+static UniValue DescribeWalletAddress(const CWallet& wallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    CScript script = GetScriptForDestination(dest);\n+    std::unique_ptr<SigningProvider> provider = nullptr;\n+    provider = wallet.GetSolvingProvider(script);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(std::visit(DescribeWalletAddressVisitor(provider.get()), dest));\n+    return ret;\n+}\n+\n+RPCHelpMan getaddressinfo()\n+{\n+    return RPCHelpMan{\"getaddressinfo\",\n+                \"\\nReturn information about the given bitcoin address.\\n\"\n+                \"Some of the information will only be present if the address is in the active wallet.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated.\"},\n+                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address.\"},\n+                        {RPCResult::Type::BOOL, \"ismine\", \"If the address is yours.\"},\n+                        {RPCResult::Type::BOOL, \"iswatchonly\", \"If the address is watchonly.\"},\n+                        {RPCResult::Type::BOOL, \"solvable\", \"If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\"},\n+                        {RPCResult::Type::STR, \"desc\", /* optional */ true, \"A descriptor for spending coins sent to this address (only when solvable).\"},\n+                        {RPCResult::Type::STR, \"parent_desc\", /* optional */ true, \"The descriptor used to derive this address if this is a descriptor wallet\"},\n+                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script.\"},\n+                        {RPCResult::Type::BOOL, \"ischange\", \"If the address was used for change output.\"},\n+                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address.\"},\n+                        {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program.\"},\n+                        {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program.\"},\n+                        {RPCResult::Type::STR, \"script\", /* optional */ true, \"The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n+                                                                     \"types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n+                            \"witness_v0_scripthash, witness_unknown.\"},\n+                        {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The redeemscript for the p2sh address.\"},\n+                        {RPCResult::Type::ARR, \"pubkeys\", /* optional */ true, \"Array of pubkeys associated with the known redeemscript (only if script is multisig).\",\n+                        {\n+                            {RPCResult::Type::STR, \"pubkey\", \"\"},\n+                        }},\n+                        {RPCResult::Type::NUM, \"sigsrequired\", /* optional */ true, \"The number of signatures required to spend multisig output (only if script is multisig).\"},\n+                        {RPCResult::Type::STR_HEX, \"pubkey\", /* optional */ true, \"The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\"},\n+                        {RPCResult::Type::OBJ, \"embedded\", /* optional */ true, \"Information about the address embedded in P2SH or P2WSH, if relevant and known.\",\n+                        {\n+                            {RPCResult::Type::ELISION, \"\", \"Includes all getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath, hdseedid)\\n\"\n+                            \"and relation to the wallet (ismine, iswatchonly).\"},\n+                        }},\n+                        {RPCResult::Type::BOOL, \"iscompressed\", /* optional */ true, \"If the pubkey is compressed.\"},\n+                        {RPCResult::Type::NUM_TIME, \"timestamp\", /* optional */ true, \"The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\"},\n+                        {RPCResult::Type::STR, \"hdkeypath\", /* optional */ true, \"The HD keypath, if the key is HD and available.\"},\n+                        {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"The Hash160 of the HD seed.\"},\n+                        {RPCResult::Type::STR_HEX, \"hdmasterfingerprint\", /* optional */ true, \"The fingerprint of the master key.\"},\n+                        {RPCResult::Type::ARR, \"labels\", \"Array of labels associated with the address. Currently limited to one label but returned\\n\"\n+                            \"as an array to keep the API stable if multiple labels are enabled in the future.\",\n+                        {\n+                            {RPCResult::Type::STR, \"label name\", \"Label name (defaults to \\\"\\\").\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n+                    HelpExampleRpc(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string error_msg;\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        // Set generic error message in case 'DecodeDestination' didn't set it\n+        if (error_msg.empty()) error_msg = \"Invalid address\";\n+\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error_msg);\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n+\n+    std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n+\n+    isminetype mine = pwallet->IsMine(dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+\n+    if (provider) {\n+        auto inferred = InferDescriptor(scriptPubKey, *provider);\n+        bool solvable = inferred->IsSolvable() || IsSolvable(*provider, scriptPubKey);\n+        ret.pushKV(\"solvable\", solvable);\n+        if (solvable) {\n+            ret.pushKV(\"desc\", inferred->ToString());\n+        }\n+    } else {\n+        ret.pushKV(\"solvable\", false);\n+    }\n+\n+    const auto& spk_mans = pwallet->GetScriptPubKeyMans(scriptPubKey);\n+    // In most cases there is only one matching ScriptPubKey manager and we can't resolve ambiguity in a better way\n+    ScriptPubKeyMan* spk_man{nullptr};\n+    if (spk_mans.size()) spk_man = *spk_mans.begin();\n+\n+    DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man);\n+    if (desc_spk_man) {\n+        std::string desc_str;\n+        if (desc_spk_man->GetDescriptorString(desc_str, /* priv */ false)) {\n+            ret.pushKV(\"parent_desc\", desc_str);\n+        }\n+    }\n+\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+\n+    UniValue detail = DescribeWalletAddress(*pwallet, dest);\n+    ret.pushKVs(detail);\n+\n+    ret.pushKV(\"ischange\", ScriptIsChange(*pwallet, scriptPubKey));\n+\n+    if (spk_man) {\n+        if (const std::unique_ptr<CKeyMetadata> meta = spk_man->GetMetadata(dest)) {\n+            ret.pushKV(\"timestamp\", meta->nCreateTime);\n+            if (meta->has_key_origin) {\n+                ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n+                ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n+                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint));\n+            }\n+        }\n+    }\n+\n+    // Return a `labels` array containing the label associated with the address,\n+    // equivalent to the `label` field above. Currently only one label can be\n+    // associated with an address, but we return an array so the API remains\n+    // stable if we allow multiple labels to be associated with an address in\n+    // the future.\n+    UniValue labels(UniValue::VARR);\n+    const auto* address_book_entry = pwallet->FindAddressBookEntry(dest);\n+    if (address_book_entry) {\n+        labels.push_back(address_book_entry->GetLabel());\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+},\n+    };\n+}\n+\n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.pushKV(\"name\", data.GetLabel());\n+    }\n+    ret.pushKV(\"purpose\", data.purpose);\n+    return ret;\n+}\n+\n+RPCHelpMan getaddressesbylabel()\n+{\n+    return RPCHelpMan{\"getaddressesbylabel\",\n+                \"\\nReturns the list of addresses assigned the specified label.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ_DYN, \"\", \"json object with addresses as keys\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"address\", \"json object with information about address\",\n+                        {\n+                            {RPCResult::Type::STR, \"purpose\", \"Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    std::set<std::string> addresses;\n+    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->m_address_book) {\n+        if (item.second.IsChange()) continue;\n+        if (item.second.GetLabel() == label) {\n+            std::string address = EncodeDestination(item.first);\n+            // CWallet::m_address_book is not expected to contain duplicate\n+            // address strings, but build a separate set as a precaution just in\n+            // case it does.\n+            bool unique = addresses.emplace(address).second;\n+            CHECK_NONFATAL(unique);\n+            // UniValue::pushKV checks if the key exists in O(N)\n+            // and since duplicate addresses are unexpected (checked with\n+            // std::set in O(log(N))), UniValue::__pushKV is used instead,\n+            // which currently is O(1).\n+            ret.__pushKV(address, AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+},\n+    };\n+}\n+\n+RPCHelpMan listlabels()\n+{\n+    return RPCHelpMan{\"listlabels\",\n+                \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n+                {\n+                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"label\", \"Label name\"},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    // Add to a set to sort by label name, then insert into Univalue array\n+    std::set<std::string> label_set;\n+    for (const std::pair<const CTxDestination, CAddressBookData>& entry : pwallet->m_address_book) {\n+        if (entry.second.IsChange()) continue;\n+        if (purpose.empty() || entry.second.purpose == purpose) {\n+            label_set.insert(entry.second.GetLabel());\n+        }\n+    }\n+\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string& name : label_set) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+},\n+    };\n+}\n+\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+RPCHelpMan walletdisplayaddress()\n+{\n+    return RPCHelpMan{\n+        \"walletdisplayaddress\",\n+        \"Display address on an external signer for verification.\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"bitcoin address to display\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ,\"\",\"\",\n+            {\n+                {RPCResult::Type::STR, \"address\", \"The address as confirmed by the signer\"},\n+            }\n+        },\n+        RPCExamples{\"\"},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            LOCK(pwallet->cs_wallet);\n+\n+            CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+            // Make sure the destination is valid\n+            if (!IsValidDestination(dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n+\n+            if (!pwallet->DisplayAddress(dest)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Failed to display address\");\n+            }\n+\n+            UniValue result(UniValue::VOBJ);\n+            result.pushKV(\"address\", request.params[0].get_str());\n+            return result;\n+        }\n+    };\n+}\n+#endif // ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "2cc0054eb0f1a2c58035292110a557d1102b2a08",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 775,
        "changes": 789,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a487239c7698a5063908c3c5f00dc1e2f16e7cec/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a487239c7698a5063908c3c5f00dc1e2f16e7cec",
        "patch": "@@ -18,7 +18,6 @@\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/sign.h>\n-#include <util/bip32.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n #include <util/string.h>\n@@ -54,7 +53,6 @@ bool HaveKey(const SigningProvider& wallet, const CKey& key)\n     return wallet.HaveKey(key.GetPubKey().GetID()) || wallet.HaveKey(key2.GetPubKey().GetID());\n }\n \n-\n /**\n  * Update coin control with fee estimation based on the given parameters\n  *\n@@ -92,147 +90,6 @@ static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const Un\n     }\n }\n \n-static RPCHelpMan getnewaddress()\n-{\n-    return RPCHelpMan{\"getnewaddress\",\n-                \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n-                \"If 'label' is specified, it is added to the address book \\n\"\n-                \"so payments received with the address will be associated with 'label'.\\n\",\n-                {\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n-                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR, \"address\", \"The new bitcoin address\"\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getnewaddress\", \"\")\n-            + HelpExampleRpc(\"getnewaddress\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->CanGetAddresses()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n-    }\n-\n-    // Parse the label first so we don't generate a key if there's an error\n-    std::string label;\n-    if (!request.params[0].isNull())\n-        label = LabelFromValue(request.params[0]);\n-\n-    OutputType output_type = pwallet->m_default_address_type;\n-    if (!request.params[1].isNull()) {\n-        std::optional<OutputType> parsed = ParseOutputType(request.params[1].get_str());\n-        if (!parsed) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n-        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n-        }\n-        output_type = parsed.value();\n-    }\n-\n-    CTxDestination dest;\n-    bilingual_str error;\n-    if (!pwallet->GetNewDestination(output_type, label, dest, error)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n-    }\n-\n-    return EncodeDestination(dest);\n-},\n-    };\n-}\n-\n-static RPCHelpMan getrawchangeaddress()\n-{\n-    return RPCHelpMan{\"getrawchangeaddress\",\n-                \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n-                \"This is for use with raw transactions, NOT normal use.\\n\",\n-                {\n-                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR, \"address\", \"The address\"\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getrawchangeaddress\", \"\")\n-            + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->CanGetAddresses(true)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n-    }\n-\n-    OutputType output_type = pwallet->m_default_change_type.value_or(pwallet->m_default_address_type);\n-    if (!request.params[0].isNull()) {\n-        std::optional<OutputType> parsed = ParseOutputType(request.params[0].get_str());\n-        if (!parsed) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n-        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n-        }\n-        output_type = parsed.value();\n-    }\n-\n-    CTxDestination dest;\n-    bilingual_str error;\n-    if (!pwallet->GetNewChangeDestination(output_type, dest, error)) {\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, error.original);\n-    }\n-    return EncodeDestination(dest);\n-},\n-    };\n-}\n-\n-\n-static RPCHelpMan setlabel()\n-{\n-    return RPCHelpMan{\"setlabel\",\n-                \"\\nSets the label associated with the given address.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\n-                    HelpExampleCli(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"tabby\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    }\n-\n-    std::string label = LabelFromValue(request.params[1]);\n-\n-    if (pwallet->IsMine(dest)) {\n-        pwallet->SetAddressBook(dest, label, \"receive\");\n-    } else {\n-        pwallet->SetAddressBook(dest, label, \"send\");\n-    }\n-\n-    return NullUniValue;\n-},\n-    };\n-}\n-\n void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n     std::set<CTxDestination> destinations;\n     int i = 0;\n@@ -398,66 +255,6 @@ static RPCHelpMan sendtoaddress()\n     };\n }\n \n-static RPCHelpMan listaddressgroupings()\n-{\n-    return RPCHelpMan{\"listaddressgroupings\",\n-                \"\\nLists groups of addresses which have had their common ownership\\n\"\n-                \"made public by common use as inputs or as the resulting change\\n\"\n-                \"in past transactions\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::ARR, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::ARR_FIXED, \"\", \"\",\n-                            {\n-                                {RPCResult::Type::STR, \"address\", \"The bitcoin address\"},\n-                                {RPCResult::Type::STR_AMOUNT, \"amount\", \"The amount in \" + CURRENCY_UNIT},\n-                                {RPCResult::Type::STR, \"label\", /* optional */ true, \"The label\"},\n-                            }},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"listaddressgroupings\", \"\")\n-            + HelpExampleRpc(\"listaddressgroupings\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    UniValue jsonGroupings(UniValue::VARR);\n-    std::map<CTxDestination, CAmount> balances = GetAddressBalances(*pwallet);\n-    for (const std::set<CTxDestination>& grouping : GetAddressGroupings(*pwallet)) {\n-        UniValue jsonGrouping(UniValue::VARR);\n-        for (const CTxDestination& address : grouping)\n-        {\n-            UniValue addressInfo(UniValue::VARR);\n-            addressInfo.push_back(EncodeDestination(address));\n-            addressInfo.push_back(ValueFromAmount(balances[address]));\n-            {\n-                const auto* address_book_entry = pwallet->FindAddressBookEntry(address);\n-                if (address_book_entry) {\n-                    addressInfo.push_back(address_book_entry->GetLabel());\n-                }\n-            }\n-            jsonGrouping.push_back(addressInfo);\n-        }\n-        jsonGroupings.push_back(jsonGrouping);\n-    }\n-    return jsonGroupings;\n-},\n-    };\n-}\n-\n static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     std::set<CTxDestination> address_set;\n@@ -752,164 +549,6 @@ static RPCHelpMan sendmany()\n     };\n }\n \n-\n-static RPCHelpMan addmultisigaddress()\n-{\n-    return RPCHelpMan{\"addmultisigaddress\",\n-                \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n-                \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n-                \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n-                \"See `importaddress` for watchonly p2sh address support.\\n\"\n-                \"If 'label' is specified, assign address to that label.\\n\",\n-                {\n-                    {\"nrequired\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The number of required signatures out of the n keys or addresses.\"},\n-                    {\"keys\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The bitcoin addresses or hex-encoded public keys\",\n-                        {\n-                            {\"key\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address or hex-encoded public key\"},\n-                        },\n-                        },\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A label to assign the addresses to.\"},\n-                    {\"address_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -addresstype\"}, \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"address\", \"The value of the new multisig address\"},\n-                        {RPCResult::Type::STR_HEX, \"redeemScript\", \"The string value of the hex-encoded redemption script\"},\n-                        {RPCResult::Type::STR, \"descriptor\", \"The descriptor for this multisig\"},\n-                    }\n-                },\n-                RPCExamples{\n-            \"\\nAdd a multisig address from 2 addresses\\n\"\n-            + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"addmultisigaddress\", \"2, \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n-\n-    LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n-\n-    std::string label;\n-    if (!request.params[2].isNull())\n-        label = LabelFromValue(request.params[2]);\n-\n-    int required = request.params[0].get_int();\n-\n-    // Get the public keys\n-    const UniValue& keys_or_addrs = request.params[1].get_array();\n-    std::vector<CPubKey> pubkeys;\n-    for (unsigned int i = 0; i < keys_or_addrs.size(); ++i) {\n-        if (IsHex(keys_or_addrs[i].get_str()) && (keys_or_addrs[i].get_str().length() == 66 || keys_or_addrs[i].get_str().length() == 130)) {\n-            pubkeys.push_back(HexToPubKey(keys_or_addrs[i].get_str()));\n-        } else {\n-            pubkeys.push_back(AddrToPubKey(spk_man, keys_or_addrs[i].get_str()));\n-        }\n-    }\n-\n-    OutputType output_type = pwallet->m_default_address_type;\n-    if (!request.params[3].isNull()) {\n-        std::optional<OutputType> parsed = ParseOutputType(request.params[3].get_str());\n-        if (!parsed) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n-        } else if (parsed.value() == OutputType::BECH32M) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n-        }\n-        output_type = parsed.value();\n-    }\n-\n-    // Construct using pay-to-script-hash:\n-    CScript inner;\n-    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, spk_man, inner);\n-    pwallet->SetAddressBook(dest, label, \"send\");\n-\n-    // Make the descriptor\n-    std::unique_ptr<Descriptor> descriptor = InferDescriptor(GetScriptForDestination(dest), spk_man);\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"address\", EncodeDestination(dest));\n-    result.pushKV(\"redeemScript\", HexStr(inner));\n-    result.pushKV(\"descriptor\", descriptor->ToString());\n-    return result;\n-},\n-    };\n-}\n-\n-static RPCHelpMan keypoolrefill()\n-{\n-    return RPCHelpMan{\"keypoolrefill\",\n-                \"\\nFills the keypool.\"+\n-        HELP_REQUIRING_PASSPHRASE,\n-                {\n-                    {\"newsize\", RPCArg::Type::NUM, RPCArg::DefaultHint{strprintf(\"%u, or as set by -keypool\", DEFAULT_KEYPOOL_SIZE)}, \"The new keypool size\"},\n-                },\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\n-                    HelpExampleCli(\"keypoolrefill\", \"\")\n-            + HelpExampleRpc(\"keypoolrefill\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    if (pwallet->IsLegacy() && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n-    unsigned int kpSize = 0;\n-    if (!request.params[0].isNull()) {\n-        if (request.params[0].get_int() < 0)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)request.params[0].get_int();\n-    }\n-\n-    EnsureWalletIsUnlocked(*pwallet);\n-    pwallet->TopUpKeyPool(kpSize);\n-\n-    if (pwallet->GetKeyPoolSize() < kpSize) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n-    }\n-\n-    return NullUniValue;\n-},\n-    };\n-}\n-\n-\n-static RPCHelpMan newkeypool()\n-{\n-    return RPCHelpMan{\"newkeypool\",\n-                \"\\nEntirely clears and refills the keypool.\"+\n-            HELP_REQUIRING_PASSPHRASE,\n-                {},\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\n-            HelpExampleCli(\"newkeypool\", \"\")\n-            + HelpExampleRpc(\"newkeypool\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet, true);\n-    spk_man.NewKeyPool();\n-\n-    return NullUniValue;\n-},\n-    };\n-}\n-\n static RPCHelpMan lockunspent()\n {\n     return RPCHelpMan{\"lockunspent\",\n@@ -2463,377 +2102,6 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n static RPCHelpMan bumpfee() { return bumpfee_helper(\"bumpfee\"); }\n static RPCHelpMan psbtbumpfee() { return bumpfee_helper(\"psbtbumpfee\"); }\n \n-class DescribeWalletAddressVisitor\n-{\n-public:\n-    const SigningProvider * const provider;\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj) const\n-    {\n-        // Always present: script type and redeemscript\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        TxoutType which_type = Solver(subscript, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript));\n-\n-        CTxDestination embedded;\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj(UniValue::VOBJ);\n-            UniValue detail = DescribeAddress(embedded);\n-            subobj.pushKVs(detail);\n-            UniValue wallet_detail = std::visit(*this, embedded);\n-            subobj.pushKVs(wallet_detail);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-        } else if (which_type == TxoutType::MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                pubkeys.push_back(HexStr(key));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-    }\n-\n-    explicit DescribeWalletAddressVisitor(const SigningProvider* _provider) : provider(_provider) {}\n-\n-    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const PKHash& pkhash) const\n-    {\n-        CKeyID keyID{ToKeyID(pkhash)};\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        if (provider && provider->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const ScriptHash& scripthash) const\n-    {\n-        CScriptID scriptID(scripthash);\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        if (provider && provider->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        if (provider && provider->GetPubKey(ToKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (provider && provider->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV1Taproot& id) const { return UniValue(UniValue::VOBJ); }\n-    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n-};\n-\n-static UniValue DescribeWalletAddress(const CWallet& wallet, const CTxDestination& dest)\n-{\n-    UniValue ret(UniValue::VOBJ);\n-    UniValue detail = DescribeAddress(dest);\n-    CScript script = GetScriptForDestination(dest);\n-    std::unique_ptr<SigningProvider> provider = nullptr;\n-    provider = wallet.GetSolvingProvider(script);\n-    ret.pushKVs(detail);\n-    ret.pushKVs(std::visit(DescribeWalletAddressVisitor(provider.get()), dest));\n-    return ret;\n-}\n-\n-/** Convert CAddressBookData to JSON record.  */\n-static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n-{\n-    UniValue ret(UniValue::VOBJ);\n-    if (verbose) {\n-        ret.pushKV(\"name\", data.GetLabel());\n-    }\n-    ret.pushKV(\"purpose\", data.purpose);\n-    return ret;\n-}\n-\n-RPCHelpMan getaddressinfo()\n-{\n-    return RPCHelpMan{\"getaddressinfo\",\n-                \"\\nReturn information about the given bitcoin address.\\n\"\n-                \"Some of the information will only be present if the address is in the active wallet.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for which to get information.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"address\", \"The bitcoin address validated.\"},\n-                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address.\"},\n-                        {RPCResult::Type::BOOL, \"ismine\", \"If the address is yours.\"},\n-                        {RPCResult::Type::BOOL, \"iswatchonly\", \"If the address is watchonly.\"},\n-                        {RPCResult::Type::BOOL, \"solvable\", \"If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\"},\n-                        {RPCResult::Type::STR, \"desc\", /* optional */ true, \"A descriptor for spending coins sent to this address (only when solvable).\"},\n-                        {RPCResult::Type::STR, \"parent_desc\", /* optional */ true, \"The descriptor used to derive this address if this is a descriptor wallet\"},\n-                        {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script.\"},\n-                        {RPCResult::Type::BOOL, \"ischange\", \"If the address was used for change output.\"},\n-                        {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address.\"},\n-                        {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program.\"},\n-                        {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program.\"},\n-                        {RPCResult::Type::STR, \"script\", /* optional */ true, \"The output script type. Only if isscript is true and the redeemscript is known. Possible\\n\"\n-                                                                     \"types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\\n\"\n-                            \"witness_v0_scripthash, witness_unknown.\"},\n-                        {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"The redeemscript for the p2sh address.\"},\n-                        {RPCResult::Type::ARR, \"pubkeys\", /* optional */ true, \"Array of pubkeys associated with the known redeemscript (only if script is multisig).\",\n-                        {\n-                            {RPCResult::Type::STR, \"pubkey\", \"\"},\n-                        }},\n-                        {RPCResult::Type::NUM, \"sigsrequired\", /* optional */ true, \"The number of signatures required to spend multisig output (only if script is multisig).\"},\n-                        {RPCResult::Type::STR_HEX, \"pubkey\", /* optional */ true, \"The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\"},\n-                        {RPCResult::Type::OBJ, \"embedded\", /* optional */ true, \"Information about the address embedded in P2SH or P2WSH, if relevant and known.\",\n-                        {\n-                            {RPCResult::Type::ELISION, \"\", \"Includes all getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath, hdseedid)\\n\"\n-                            \"and relation to the wallet (ismine, iswatchonly).\"},\n-                        }},\n-                        {RPCResult::Type::BOOL, \"iscompressed\", /* optional */ true, \"If the pubkey is compressed.\"},\n-                        {RPCResult::Type::NUM_TIME, \"timestamp\", /* optional */ true, \"The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\"},\n-                        {RPCResult::Type::STR, \"hdkeypath\", /* optional */ true, \"The HD keypath, if the key is HD and available.\"},\n-                        {RPCResult::Type::STR_HEX, \"hdseedid\", /* optional */ true, \"The Hash160 of the HD seed.\"},\n-                        {RPCResult::Type::STR_HEX, \"hdmasterfingerprint\", /* optional */ true, \"The fingerprint of the master key.\"},\n-                        {RPCResult::Type::ARR, \"labels\", \"Array of labels associated with the address. Currently limited to one label but returned\\n\"\n-                            \"as an array to keep the API stable if multiple labels are enabled in the future.\",\n-                        {\n-                            {RPCResult::Type::STR, \"label name\", \"Label name (defaults to \\\"\\\").\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n-                    HelpExampleRpc(\"getaddressinfo\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    std::string error_msg;\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n-\n-    // Make sure the destination is valid\n-    if (!IsValidDestination(dest)) {\n-        // Set generic error message in case 'DecodeDestination' didn't set it\n-        if (error_msg.empty()) error_msg = \"Invalid address\";\n-\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error_msg);\n-    }\n-\n-    UniValue ret(UniValue::VOBJ);\n-\n-    std::string currentAddress = EncodeDestination(dest);\n-    ret.pushKV(\"address\", currentAddress);\n-\n-    CScript scriptPubKey = GetScriptForDestination(dest);\n-    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n-\n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n-\n-    isminetype mine = pwallet->IsMine(dest);\n-    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-\n-    if (provider) {\n-        auto inferred = InferDescriptor(scriptPubKey, *provider);\n-        bool solvable = inferred->IsSolvable() || IsSolvable(*provider, scriptPubKey);\n-        ret.pushKV(\"solvable\", solvable);\n-        if (solvable) {\n-            ret.pushKV(\"desc\", inferred->ToString());\n-        }\n-    } else {\n-        ret.pushKV(\"solvable\", false);\n-    }\n-\n-    const auto& spk_mans = pwallet->GetScriptPubKeyMans(scriptPubKey);\n-    // In most cases there is only one matching ScriptPubKey manager and we can't resolve ambiguity in a better way\n-    ScriptPubKeyMan* spk_man{nullptr};\n-    if (spk_mans.size()) spk_man = *spk_mans.begin();\n-\n-    DescriptorScriptPubKeyMan* desc_spk_man = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man);\n-    if (desc_spk_man) {\n-        std::string desc_str;\n-        if (desc_spk_man->GetDescriptorString(desc_str, /* priv */ false)) {\n-            ret.pushKV(\"parent_desc\", desc_str);\n-        }\n-    }\n-\n-    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-\n-    UniValue detail = DescribeWalletAddress(*pwallet, dest);\n-    ret.pushKVs(detail);\n-\n-    ret.pushKV(\"ischange\", ScriptIsChange(*pwallet, scriptPubKey));\n-\n-    if (spk_man) {\n-        if (const std::unique_ptr<CKeyMetadata> meta = spk_man->GetMetadata(dest)) {\n-            ret.pushKV(\"timestamp\", meta->nCreateTime);\n-            if (meta->has_key_origin) {\n-                ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));\n-                ret.pushKV(\"hdseedid\", meta->hd_seed_id.GetHex());\n-                ret.pushKV(\"hdmasterfingerprint\", HexStr(meta->key_origin.fingerprint));\n-            }\n-        }\n-    }\n-\n-    // Return a `labels` array containing the label associated with the address,\n-    // equivalent to the `label` field above. Currently only one label can be\n-    // associated with an address, but we return an array so the API remains\n-    // stable if we allow multiple labels to be associated with an address in\n-    // the future.\n-    UniValue labels(UniValue::VARR);\n-    const auto* address_book_entry = pwallet->FindAddressBookEntry(dest);\n-    if (address_book_entry) {\n-        labels.push_back(address_book_entry->GetLabel());\n-    }\n-    ret.pushKV(\"labels\", std::move(labels));\n-\n-    return ret;\n-},\n-    };\n-}\n-\n-static RPCHelpMan getaddressesbylabel()\n-{\n-    return RPCHelpMan{\"getaddressesbylabel\",\n-                \"\\nReturns the list of addresses assigned the specified label.\\n\",\n-                {\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ_DYN, \"\", \"json object with addresses as keys\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"address\", \"json object with information about address\",\n-                        {\n-                            {RPCResult::Type::STR, \"purpose\", \"Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n-            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    std::string label = LabelFromValue(request.params[0]);\n-\n-    // Find all addresses that have the given label\n-    UniValue ret(UniValue::VOBJ);\n-    std::set<std::string> addresses;\n-    for (const std::pair<const CTxDestination, CAddressBookData>& item : pwallet->m_address_book) {\n-        if (item.second.IsChange()) continue;\n-        if (item.second.GetLabel() == label) {\n-            std::string address = EncodeDestination(item.first);\n-            // CWallet::m_address_book is not expected to contain duplicate\n-            // address strings, but build a separate set as a precaution just in\n-            // case it does.\n-            bool unique = addresses.emplace(address).second;\n-            CHECK_NONFATAL(unique);\n-            // UniValue::pushKV checks if the key exists in O(N)\n-            // and since duplicate addresses are unexpected (checked with\n-            // std::set in O(log(N))), UniValue::__pushKV is used instead,\n-            // which currently is O(1).\n-            ret.__pushKV(address, AddressBookDataToJSON(item.second, false));\n-        }\n-    }\n-\n-    if (ret.empty()) {\n-        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n-    }\n-\n-    return ret;\n-},\n-    };\n-}\n-\n-static RPCHelpMan listlabels()\n-{\n-    return RPCHelpMan{\"listlabels\",\n-                \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n-                {\n-                    {\"purpose\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"label\", \"Label name\"},\n-                    }\n-                },\n-                RPCExamples{\n-            \"\\nList all labels\\n\"\n-            + HelpExampleCli(\"listlabels\", \"\") +\n-            \"\\nList labels that have receiving addresses\\n\"\n-            + HelpExampleCli(\"listlabels\", \"receive\") +\n-            \"\\nList labels that have sending addresses\\n\"\n-            + HelpExampleCli(\"listlabels\", \"send\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"listlabels\", \"receive\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    std::string purpose;\n-    if (!request.params[0].isNull()) {\n-        purpose = request.params[0].get_str();\n-    }\n-\n-    // Add to a set to sort by label name, then insert into Univalue array\n-    std::set<std::string> label_set;\n-    for (const std::pair<const CTxDestination, CAddressBookData>& entry : pwallet->m_address_book) {\n-        if (entry.second.IsChange()) continue;\n-        if (purpose.empty() || entry.second.purpose == purpose) {\n-            label_set.insert(entry.second.GetLabel());\n-        }\n-    }\n-\n-    UniValue ret(UniValue::VARR);\n-    for (const std::string& name : label_set) {\n-        ret.push_back(name);\n-    }\n-\n-    return ret;\n-},\n-    };\n-}\n-\n static RPCHelpMan send()\n {\n     return RPCHelpMan{\"send\",\n@@ -3377,49 +2645,6 @@ static RPCHelpMan upgradewallet()\n     };\n }\n \n-#ifdef ENABLE_EXTERNAL_SIGNER\n-static RPCHelpMan walletdisplayaddress()\n-{\n-    return RPCHelpMan{\n-        \"walletdisplayaddress\",\n-        \"Display address on an external signer for verification.\",\n-        {\n-            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"bitcoin address to display\"},\n-        },\n-        RPCResult{\n-            RPCResult::Type::OBJ,\"\",\"\",\n-            {\n-                {RPCResult::Type::STR, \"address\", \"The address as confirmed by the signer\"},\n-            }\n-        },\n-        RPCExamples{\"\"},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-        {\n-            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-            if (!wallet) return NullUniValue;\n-            CWallet* const pwallet = wallet.get();\n-\n-            LOCK(pwallet->cs_wallet);\n-\n-            CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-\n-            // Make sure the destination is valid\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-            }\n-\n-            if (!pwallet->DisplayAddress(dest)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Failed to display address\");\n-            }\n-\n-            UniValue result(UniValue::VOBJ);\n-            result.pushKV(\"address\", request.params[0].get_str());\n-            return result;\n-        }\n-    };\n-}\n-#endif // ENABLE_EXTERNAL_SIGNER\n-\n RPCHelpMan abortrescan();\n RPCHelpMan dumpprivkey();\n RPCHelpMan importprivkey();\n@@ -3436,6 +2661,20 @@ RPCHelpMan signmessage();\n RPCHelpMan backupwallet();\n RPCHelpMan restorewallet();\n \n+// addresses\n+RPCHelpMan getnewaddress();\n+RPCHelpMan getrawchangeaddress();\n+RPCHelpMan setlabel();\n+RPCHelpMan listaddressgroupings();\n+RPCHelpMan addmultisigaddress();\n+RPCHelpMan keypoolrefill();\n+RPCHelpMan newkeypool();\n+RPCHelpMan getaddressesbylabel();\n+RPCHelpMan listlabels();\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+RPCHelpMan walletdisplayaddress();\n+#endif // ENABLE_EXTERNAL_SIGNER\n+\n // encryption\n RPCHelpMan walletpassphrase();\n RPCHelpMan walletpassphrasechange();"
      }
    ]
  },
  {
    "sha": "3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
    "node_id": "C_kwDOABII59oAKDNlYzVmNWM3ZDIyYjNiYTUwZmMyOWEwYWI0MTFiYTkyY2RlNTk5YTY",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T03:09:30Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:50:58Z"
      },
      "message": "MOVEONLY: Move balance and utxo RPCs to coins.cpp",
      "tree": {
        "sha": "548be8881a2f7c017f5e0cad6a3ee1bc5bb176cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/548be8881a2f7c017f5e0cad6a3ee1bc5bb176cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a487239c7698a5063908c3c5f00dc1e2f16e7cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a487239c7698a5063908c3c5f00dc1e2f16e7cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a487239c7698a5063908c3c5f00dc1e2f16e7cec"
      }
    ],
    "stats": {
      "total": 1421,
      "additions": 723,
      "deletions": 698
    },
    "files": [
      {
        "sha": "272848ddaa7899c99584ba7829bc58bded802445",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
        "patch": "@@ -412,6 +412,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/receive.cpp \\\n   wallet/rpc/addresses.cpp \\\n   wallet/rpc/backup.cpp \\\n+  wallet/rpc/coins.cpp \\\n   wallet/rpc/encrypt.cpp \\\n   wallet/rpc/signmessage.cpp \\\n   wallet/rpc/transactions.cpp \\"
      },
      {
        "sha": "954093d650782842ea4a73ad73bd482b07178c68",
        "filename": "src/wallet/rpc/coins.cpp",
        "status": "added",
        "additions": 712,
        "deletions": 0,
        "changes": 712,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/wallet/rpc/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/wallet/rpc/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/coins.cpp?ref=3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
        "patch": "@@ -0,0 +1,712 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/util.h>\n+#include <util/moneystr.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/receive.h>\n+#include <wallet/rpc/util.h>\n+#include <wallet/spend.h>\n+#include <wallet/wallet.h>\n+\n+#include <univalue.h>\n+\n+\n+static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+{\n+    std::set<CTxDestination> address_set;\n+\n+    if (by_label) {\n+        // Get the set of addresses assigned to label\n+        std::string label = LabelFromValue(params[0]);\n+        address_set = wallet.GetLabelAddresses(label);\n+    } else {\n+        // Get the address\n+        CTxDestination dest = DecodeDestination(params[0].get_str());\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+        }\n+        CScript script_pub_key = GetScriptForDestination(dest);\n+        if (!wallet.IsMine(script_pub_key)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n+        }\n+        address_set.insert(dest);\n+    }\n+\n+    // Minimum confirmations\n+    int min_depth = 1;\n+    if (!params[1].isNull())\n+        min_depth = params[1].get_int();\n+\n+    // Tally\n+    CAmount amount = 0;\n+    for (const std::pair<const uint256, CWalletTx>& wtx_pair : wallet.mapWallet) {\n+        const CWalletTx& wtx = wtx_pair.second;\n+        if (wtx.IsCoinBase() || !wallet.chain().checkFinalTx(*wtx.tx) || wallet.GetTxDepthInMainChain(wtx) < min_depth) {\n+            continue;\n+        }\n+\n+        for (const CTxOut& txout : wtx.tx->vout) {\n+            CTxDestination address;\n+            if (ExtractDestination(txout.scriptPubKey, address) && wallet.IsMine(address) && address_set.count(address)) {\n+                amount += txout.nValue;\n+            }\n+        }\n+    }\n+\n+    return amount;\n+}\n+\n+\n+RPCHelpMan getreceivedbyaddress()\n+{\n+    return RPCHelpMan{\"getreceivedbyaddress\",\n+                \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received at this address.\"\n+                },\n+                RPCExamples{\n+            \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n+            \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0\") +\n+            \"\\nThe amount with at least 6 confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 6\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 6\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ false));\n+},\n+    };\n+}\n+\n+\n+RPCHelpMan getreceivedbylabel()\n+{\n+    return RPCHelpMan{\"getreceivedbylabel\",\n+                \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this label.\"\n+                },\n+                RPCExamples{\n+            \"\\nAmount received by the default label with at least 1 confirmation\\n\"\n+            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"\\\"\") +\n+            \"\\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 0\") +\n+            \"\\nThe amount with at least 6 confirmations\\n\"\n+            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 6\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ true));\n+},\n+    };\n+}\n+\n+\n+RPCHelpMan getbalance()\n+{\n+    return RPCHelpMan{\"getbalance\",\n+                \"\\nReturns the total available balance.\\n\"\n+                \"The available balance is what the wallet considers currently spendable, and is\\n\"\n+                \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n+                {\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Only include transactions confirmed at least this many times.\"},\n+                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also include balance in watch-only addresses (see 'importaddress')\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\"\n+                },\n+                RPCExamples{\n+            \"\\nThe total amount in the wallet with 0 or more confirmations\\n\"\n+            + HelpExampleCli(\"getbalance\", \"\") +\n+            \"\\nThe total amount in the wallet with at least 6 confirmations\\n\"\n+            + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    const UniValue& dummy_value = request.params[0];\n+    if (!dummy_value.isNull() && dummy_value.get_str() != \"*\") {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"dummy first argument must be excluded or set to \\\"*\\\".\");\n+    }\n+\n+    int min_depth = 0;\n+    if (!request.params[1].isNull()) {\n+        min_depth = request.params[1].get_int();\n+    }\n+\n+    bool include_watchonly = ParseIncludeWatchonly(request.params[2], *pwallet);\n+\n+    bool avoid_reuse = GetAvoidReuseFlag(*pwallet, request.params[3]);\n+\n+    const auto bal = GetBalance(*pwallet, min_depth, avoid_reuse);\n+\n+    return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n+},\n+    };\n+}\n+\n+RPCHelpMan getunconfirmedbalance()\n+{\n+    return RPCHelpMan{\"getunconfirmedbalance\",\n+                \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n+                {},\n+                RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n+                RPCExamples{\"\"},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    return ValueFromAmount(GetBalance(*pwallet).m_mine_untrusted_pending);\n+},\n+    };\n+}\n+\n+RPCHelpMan lockunspent()\n+{\n+    return RPCHelpMan{\"lockunspent\",\n+                \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n+                \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n+                \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n+                \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n+                \"Manually selected coins are automatically unlocked.\\n\"\n+                \"Locks are stored in memory only, unless persistent=true, in which case they will be written to the\\n\"\n+                \"wallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\\n\"\n+                \"(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\\n\"\n+                \"Also see the listunspent call\\n\",\n+                {\n+                    {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n+                    {\"transactions\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The transaction outputs and within each, the txid (string) vout (numeric).\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                },\n+                            },\n+                        },\n+                    },\n+                    {\"persistent\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::BOOL, \"\", \"Whether the command was successful or not\"\n+                },\n+                RPCExamples{\n+            \"\\nList the unspent transactions\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\") +\n+            \"\\nLock an unspent transaction\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nList the locked transactions\\n\"\n+            + HelpExampleCli(\"listlockunspent\", \"\") +\n+            \"\\nUnlock the transaction again\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nLock the transaction persistently in the wallet database\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\" true\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n+\n+    bool fUnlock = request.params[0].get_bool();\n+\n+    const bool persistent{request.params[2].isNull() ? false : request.params[2].get_bool()};\n+\n+    if (request.params[1].isNull()) {\n+        if (fUnlock) {\n+            if (!pwallet->UnlockAllCoins())\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coins failed\");\n+        }\n+        return true;\n+    }\n+\n+    RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n+\n+    const UniValue& output_params = request.params[1];\n+\n+    // Create and validate the COutPoints first.\n+\n+    std::vector<COutPoint> outputs;\n+    outputs.reserve(output_params.size());\n+\n+    for (unsigned int idx = 0; idx < output_params.size(); idx++) {\n+        const UniValue& o = output_params[idx].get_obj();\n+\n+        RPCTypeCheckObj(o,\n+            {\n+                {\"txid\", UniValueType(UniValue::VSTR)},\n+                {\"vout\", UniValueType(UniValue::VNUM)},\n+            });\n+\n+        const uint256 txid(ParseHashO(o, \"txid\"));\n+        const int nOutput = find_value(o, \"vout\").get_int();\n+        if (nOutput < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout cannot be negative\");\n+        }\n+\n+        const COutPoint outpt(txid, nOutput);\n+\n+        const auto it = pwallet->mapWallet.find(outpt.hash);\n+        if (it == pwallet->mapWallet.end()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n+        }\n+\n+        const CWalletTx& trans = it->second;\n+\n+        if (outpt.n >= trans.tx->vout.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n+        }\n+\n+        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n+        }\n+\n+        const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);\n+\n+        if (fUnlock && !is_locked) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n+        }\n+\n+        if (!fUnlock && is_locked && !persistent) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n+        }\n+\n+        outputs.push_back(outpt);\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = nullptr;\n+    // Unlock is always persistent\n+    if (fUnlock || persistent) batch = std::make_unique<WalletBatch>(pwallet->GetDatabase());\n+\n+    // Atomically set (un)locked status for the outputs.\n+    for (const COutPoint& outpt : outputs) {\n+        if (fUnlock) {\n+            if (!pwallet->UnlockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coin failed\");\n+        } else {\n+            if (!pwallet->LockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Locking coin failed\");\n+        }\n+    }\n+\n+    return true;\n+},\n+    };\n+}\n+\n+RPCHelpMan listlockunspent()\n+{\n+    return RPCHelpMan{\"listlockunspent\",\n+                \"\\nReturns list of temporarily unspendable outputs.\\n\"\n+                \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id locked\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+            \"\\nList the unspent transactions\\n\"\n+            + HelpExampleCli(\"listunspent\", \"\") +\n+            \"\\nLock an unspent transaction\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nList the locked transactions\\n\"\n+            + HelpExampleCli(\"listlockunspent\", \"\") +\n+            \"\\nUnlock the transaction again\\n\"\n+            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"listlockunspent\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::vector<COutPoint> vOutpts;\n+    pwallet->ListLockedCoins(vOutpts);\n+\n+    UniValue ret(UniValue::VARR);\n+\n+    for (const COutPoint& outpt : vOutpts) {\n+        UniValue o(UniValue::VOBJ);\n+\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n+        ret.push_back(o);\n+    }\n+\n+    return ret;\n+},\n+    };\n+}\n+\n+RPCHelpMan getbalances()\n+{\n+    return RPCHelpMan{\n+        \"getbalances\",\n+        \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"mine\", \"balances from outputs that the wallet can sign\",\n+                {\n+                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"used\", /* optional */ true, \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n+                }},\n+                {RPCResult::Type::OBJ, \"watchonly\", /* optional */ true, \"watchonly balances (not present if wallet does not watch anything)\",\n+                {\n+                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n+                }},\n+            }\n+            },\n+        RPCExamples{\n+            HelpExampleCli(\"getbalances\", \"\") +\n+            HelpExampleRpc(\"getbalances\", \"\")},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> rpc_wallet = GetWalletForJSONRPCRequest(request);\n+    if (!rpc_wallet) return NullUniValue;\n+    const CWallet& wallet = *rpc_wallet;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(wallet.cs_wallet);\n+\n+    const auto bal = GetBalance(wallet);\n+    UniValue balances{UniValue::VOBJ};\n+    {\n+        UniValue balances_mine{UniValue::VOBJ};\n+        balances_mine.pushKV(\"trusted\", ValueFromAmount(bal.m_mine_trusted));\n+        balances_mine.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_mine_untrusted_pending));\n+        balances_mine.pushKV(\"immature\", ValueFromAmount(bal.m_mine_immature));\n+        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n+            // If the AVOID_REUSE flag is set, bal has been set to just the un-reused address balance. Get\n+            // the total balance, and then subtract bal to get the reused address balance.\n+            const auto full_bal = GetBalance(wallet, 0, false);\n+            balances_mine.pushKV(\"used\", ValueFromAmount(full_bal.m_mine_trusted + full_bal.m_mine_untrusted_pending - bal.m_mine_trusted - bal.m_mine_untrusted_pending));\n+        }\n+        balances.pushKV(\"mine\", balances_mine);\n+    }\n+    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n+    if (spk_man && spk_man->HaveWatchOnly()) {\n+        UniValue balances_watchonly{UniValue::VOBJ};\n+        balances_watchonly.pushKV(\"trusted\", ValueFromAmount(bal.m_watchonly_trusted));\n+        balances_watchonly.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_watchonly_untrusted_pending));\n+        balances_watchonly.pushKV(\"immature\", ValueFromAmount(bal.m_watchonly_immature));\n+        balances.pushKV(\"watchonly\", balances_watchonly);\n+    }\n+    return balances;\n+},\n+    };\n+}\n+\n+RPCHelpMan listunspent()\n+{\n+    return RPCHelpMan{\n+                \"listunspent\",\n+                \"\\nReturns array of unspent transaction outputs\\n\"\n+                \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n+                \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n+                {\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum confirmations to filter\"},\n+                    {\"maxconf\", RPCArg::Type::NUM, RPCArg::Default{9999999}, \"The maximum confirmations to filter\"},\n+                    {\"addresses\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The bitcoin addresses to filter\",\n+                        {\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n+                        },\n+                    },\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include outputs that are not safe to spend\\n\"\n+                              \"See description of \\\"safe\\\" attribute below.\"},\n+                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n+                        {\n+                            {\"minimumAmount\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(0)}, \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n+                            {\"maximumCount\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum number of UTXOs\"},\n+                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        \"query_options\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"the transaction id\"},\n+                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n+                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"the bitcoin address\"},\n+                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"The associated label, or \\\"\\\" for the default label\"},\n+                            {RPCResult::Type::STR, \"scriptPubKey\", \"the script key\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"the transaction output amount in \" + CURRENCY_UNIT},\n+                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n+                            {RPCResult::Type::NUM, \"ancestorcount\", /* optional */ true, \"The number of in-mempool ancestor transactions, including this one (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::NUM, \"ancestorsize\", /* optional */ true, \"The virtual transaction size of in-mempool ancestors, including this one (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"ancestorfees\", /* optional */ true, \"The total fees of in-mempool ancestors (including this one) with fee deltas used for mining priority in \" + CURRENCY_ATOM + \" (if transaction is in the mempool)\"},\n+                            {RPCResult::Type::STR_HEX, \"redeemScript\", /* optional */ true, \"The redeemScript if scriptPubKey is P2SH\"},\n+                            {RPCResult::Type::STR, \"witnessScript\", /* optional */ true, \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n+                            {RPCResult::Type::BOOL, \"spendable\", \"Whether we have the private keys to spend this output\"},\n+                            {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n+                            {RPCResult::Type::BOOL, \"reused\", /* optional */ true, \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n+                            {RPCResult::Type::STR, \"desc\", /* optional */ true, \"(only when solvable) A descriptor for spending this output\"},\n+                            {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+                                                            \"from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n+                                                            \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"listunspent\", \"\")\n+            + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n+            + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n+            + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n+            + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    int nMinDepth = 1;\n+    if (!request.params[0].isNull()) {\n+        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+        nMinDepth = request.params[0].get_int();\n+    }\n+\n+    int nMaxDepth = 9999999;\n+    if (!request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n+        nMaxDepth = request.params[1].get_int();\n+    }\n+\n+    std::set<CTxDestination> destinations;\n+    if (!request.params[2].isNull()) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n+        UniValue inputs = request.params[2].get_array();\n+        for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+            const UniValue& input = inputs[idx];\n+            CTxDestination dest = DecodeDestination(input.get_str());\n+            if (!IsValidDestination(dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + input.get_str());\n+            }\n+            if (!destinations.insert(dest).second) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + input.get_str());\n+            }\n+        }\n+    }\n+\n+    bool include_unsafe = true;\n+    if (!request.params[3].isNull()) {\n+        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n+        include_unsafe = request.params[3].get_bool();\n+    }\n+\n+    CAmount nMinimumAmount = 0;\n+    CAmount nMaximumAmount = MAX_MONEY;\n+    CAmount nMinimumSumAmount = MAX_MONEY;\n+    uint64_t nMaximumCount = 0;\n+\n+    if (!request.params[4].isNull()) {\n+        const UniValue& options = request.params[4].get_obj();\n+\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"minimumAmount\", UniValueType()},\n+                {\"maximumAmount\", UniValueType()},\n+                {\"minimumSumAmount\", UniValueType()},\n+                {\"maximumCount\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"minimumAmount\"))\n+            nMinimumAmount = AmountFromValue(options[\"minimumAmount\"]);\n+\n+        if (options.exists(\"maximumAmount\"))\n+            nMaximumAmount = AmountFromValue(options[\"maximumAmount\"]);\n+\n+        if (options.exists(\"minimumSumAmount\"))\n+            nMinimumSumAmount = AmountFromValue(options[\"minimumSumAmount\"]);\n+\n+        if (options.exists(\"maximumCount\"))\n+            nMaximumCount = options[\"maximumCount\"].get_int64();\n+    }\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue results(UniValue::VARR);\n+    std::vector<COutput> vecOutputs;\n+    {\n+        CCoinControl cctl;\n+        cctl.m_avoid_address_reuse = false;\n+        cctl.m_min_depth = nMinDepth;\n+        cctl.m_max_depth = nMaxDepth;\n+        cctl.m_include_unsafe_inputs = include_unsafe;\n+        LOCK(pwallet->cs_wallet);\n+        AvailableCoins(*pwallet, vecOutputs, &cctl, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount);\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    const bool avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n+\n+    for (const COutput& out : vecOutputs) {\n+        CTxDestination address;\n+        const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n+        bool fValidAddress = ExtractDestination(scriptPubKey, address);\n+        bool reused = avoid_reuse && pwallet->IsSpentKey(out.tx->GetHash(), out.i);\n+\n+        if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n+            continue;\n+\n+        UniValue entry(UniValue::VOBJ);\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n+\n+        if (fValidAddress) {\n+            entry.pushKV(\"address\", EncodeDestination(address));\n+\n+            const auto* address_book_entry = pwallet->FindAddressBookEntry(address);\n+            if (address_book_entry) {\n+                entry.pushKV(\"label\", address_book_entry->GetLabel());\n+            }\n+\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n+            if (provider) {\n+                if (scriptPubKey.IsPayToScriptHash()) {\n+                    const CScriptID& hash = CScriptID(std::get<ScriptHash>(address));\n+                    CScript redeemScript;\n+                    if (provider->GetCScript(hash, redeemScript)) {\n+                        entry.pushKV(\"redeemScript\", HexStr(redeemScript));\n+                        // Now check if the redeemScript is actually a P2WSH script\n+                        CTxDestination witness_destination;\n+                        if (redeemScript.IsPayToWitnessScriptHash()) {\n+                            bool extracted = ExtractDestination(redeemScript, witness_destination);\n+                            CHECK_NONFATAL(extracted);\n+                            // Also return the witness script\n+                            const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(witness_destination);\n+                            CScriptID id;\n+                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                            CScript witnessScript;\n+                            if (provider->GetCScript(id, witnessScript)) {\n+                                entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n+                            }\n+                        }\n+                    }\n+                } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                    const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(address);\n+                    CScriptID id;\n+                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                    CScript witnessScript;\n+                    if (provider->GetCScript(id, witnessScript)) {\n+                        entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n+                    }\n+                }\n+            }\n+        }\n+\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        if (!out.nDepth) {\n+            size_t ancestor_count, descendant_count, ancestor_size;\n+            CAmount ancestor_fees;\n+            pwallet->chain().getTransactionAncestry(out.tx->GetHash(), ancestor_count, descendant_count, &ancestor_size, &ancestor_fees);\n+            if (ancestor_count) {\n+                entry.pushKV(\"ancestorcount\", uint64_t(ancestor_count));\n+                entry.pushKV(\"ancestorsize\", uint64_t(ancestor_size));\n+                entry.pushKV(\"ancestorfees\", uint64_t(ancestor_fees));\n+            }\n+        }\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        if (out.fSolvable) {\n+            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n+            if (provider) {\n+                auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+                entry.pushKV(\"desc\", descriptor->ToString());\n+            }\n+        }\n+        if (avoid_reuse) entry.pushKV(\"reused\", reused);\n+        entry.pushKV(\"safe\", out.fSafe);\n+        results.push_back(entry);\n+    }\n+\n+    return results;\n+},\n+    };\n+}"
      },
      {
        "sha": "7ce01955681631a998169061ab42c8a6a3829f08",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 698,
        "changes": 708,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
        "patch": "@@ -19,7 +19,6 @@\n #include <script/descriptor.h>\n #include <script/sign.h>\n #include <util/fees.h>\n-#include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -255,207 +254,6 @@ static RPCHelpMan sendtoaddress()\n     };\n }\n \n-static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n-{\n-    std::set<CTxDestination> address_set;\n-\n-    if (by_label) {\n-        // Get the set of addresses assigned to label\n-        std::string label = LabelFromValue(params[0]);\n-        address_set = wallet.GetLabelAddresses(label);\n-    } else {\n-        // Get the address\n-        CTxDestination dest = DecodeDestination(params[0].get_str());\n-        if (!IsValidDestination(dest)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-        }\n-        CScript script_pub_key = GetScriptForDestination(dest);\n-        if (!wallet.IsMine(script_pub_key)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Address not found in wallet\");\n-        }\n-        address_set.insert(dest);\n-    }\n-\n-    // Minimum confirmations\n-    int min_depth = 1;\n-    if (!params[1].isNull())\n-        min_depth = params[1].get_int();\n-\n-    // Tally\n-    CAmount amount = 0;\n-    for (const std::pair<const uint256, CWalletTx>& wtx_pair : wallet.mapWallet) {\n-        const CWalletTx& wtx = wtx_pair.second;\n-        if (wtx.IsCoinBase() || !wallet.chain().checkFinalTx(*wtx.tx) || wallet.GetTxDepthInMainChain(wtx) < min_depth) {\n-            continue;\n-        }\n-\n-        for (const CTxOut& txout : wtx.tx->vout) {\n-            CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && wallet.IsMine(address) && address_set.count(address)) {\n-                amount += txout.nValue;\n-            }\n-        }\n-    }\n-\n-    return amount;\n-}\n-\n-\n-static RPCHelpMan getreceivedbyaddress()\n-{\n-    return RPCHelpMan{\"getreceivedbyaddress\",\n-                \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address for transactions.\"},\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received at this address.\"\n-                },\n-                RPCExamples{\n-            \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n-            \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0\") +\n-            \"\\nThe amount with at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 6\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", 6\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ false));\n-},\n-    };\n-}\n-\n-\n-static RPCHelpMan getreceivedbylabel()\n-{\n-    return RPCHelpMan{\"getreceivedbylabel\",\n-                \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n-                {\n-                    {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The selected label, may be the default label using \\\"\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"Only include transactions confirmed at least this many times.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this label.\"\n-                },\n-                RPCExamples{\n-            \"\\nAmount received by the default label with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"\\\"\") +\n-            \"\\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 0\") +\n-            \"\\nThe amount with at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbylabel\", \"\\\"tabby\\\" 6\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"getreceivedbylabel\", \"\\\"tabby\\\", 6\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    return ValueFromAmount(GetReceived(*pwallet, request.params, /* by_label */ true));\n-},\n-    };\n-}\n-\n-\n-static RPCHelpMan getbalance()\n-{\n-    return RPCHelpMan{\"getbalance\",\n-                \"\\nReturns the total available balance.\\n\"\n-                \"The available balance is what the wallet considers currently spendable, and is\\n\"\n-                \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\",\n-                {\n-                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\"},\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Only include transactions confirmed at least this many times.\"},\n-                    {\"include_watchonly\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also include balance in watch-only addresses (see 'importaddress')\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::STR_AMOUNT, \"amount\", \"The total amount in \" + CURRENCY_UNIT + \" received for this wallet.\"\n-                },\n-                RPCExamples{\n-            \"\\nThe total amount in the wallet with 0 or more confirmations\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\") +\n-            \"\\nThe total amount in the wallet with at least 6 confirmations\\n\"\n-            + HelpExampleCli(\"getbalance\", \"\\\"*\\\" 6\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    const UniValue& dummy_value = request.params[0];\n-    if (!dummy_value.isNull() && dummy_value.get_str() != \"*\") {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"dummy first argument must be excluded or set to \\\"*\\\".\");\n-    }\n-\n-    int min_depth = 0;\n-    if (!request.params[1].isNull()) {\n-        min_depth = request.params[1].get_int();\n-    }\n-\n-    bool include_watchonly = ParseIncludeWatchonly(request.params[2], *pwallet);\n-\n-    bool avoid_reuse = GetAvoidReuseFlag(*pwallet, request.params[3]);\n-\n-    const auto bal = GetBalance(*pwallet, min_depth, avoid_reuse);\n-\n-    return ValueFromAmount(bal.m_mine_trusted + (include_watchonly ? bal.m_watchonly_trusted : 0));\n-},\n-    };\n-}\n-\n-static RPCHelpMan getunconfirmedbalance()\n-{\n-    return RPCHelpMan{\"getunconfirmedbalance\",\n-                \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n-                {},\n-                RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n-                RPCExamples{\"\"},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    return ValueFromAmount(GetBalance(*pwallet).m_mine_untrusted_pending);\n-},\n-    };\n-}\n-\n-\n static RPCHelpMan sendmany()\n {\n     return RPCHelpMan{\"sendmany\",\n@@ -549,199 +347,6 @@ static RPCHelpMan sendmany()\n     };\n }\n \n-static RPCHelpMan lockunspent()\n-{\n-    return RPCHelpMan{\"lockunspent\",\n-                \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n-                \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n-                \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n-                \"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\\n\"\n-                \"Manually selected coins are automatically unlocked.\\n\"\n-                \"Locks are stored in memory only, unless persistent=true, in which case they will be written to the\\n\"\n-                \"wallet database and loaded on node start. Unwritten (persistent=false) locks are always cleared\\n\"\n-                \"(by virtue of process exit) when a node stops or fails. Unlocking will clear both persistent and not.\\n\"\n-                \"Also see the listunspent call\\n\",\n-                {\n-                    {\"unlock\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"Whether to unlock (true) or lock (false) the specified transactions\"},\n-                    {\"transactions\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The transaction outputs and within each, the txid (string) vout (numeric).\",\n-                        {\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n-                                {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                },\n-                            },\n-                        },\n-                    },\n-                    {\"persistent\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Whether to write/erase this lock in the wallet database, or keep the change in memory only. Ignored for unlocking.\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::BOOL, \"\", \"Whether the command was successful or not\"\n-                },\n-                RPCExamples{\n-            \"\\nList the unspent transactions\\n\"\n-            + HelpExampleCli(\"listunspent\", \"\") +\n-            \"\\nLock an unspent transaction\\n\"\n-            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nList the locked transactions\\n\"\n-            + HelpExampleCli(\"listlockunspent\", \"\") +\n-            \"\\nUnlock the transaction again\\n\"\n-            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nLock the transaction persistently in the wallet database\\n\"\n-            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\" true\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n-\n-    bool fUnlock = request.params[0].get_bool();\n-\n-    const bool persistent{request.params[2].isNull() ? false : request.params[2].get_bool()};\n-\n-    if (request.params[1].isNull()) {\n-        if (fUnlock) {\n-            if (!pwallet->UnlockAllCoins())\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coins failed\");\n-        }\n-        return true;\n-    }\n-\n-    RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n-\n-    const UniValue& output_params = request.params[1];\n-\n-    // Create and validate the COutPoints first.\n-\n-    std::vector<COutPoint> outputs;\n-    outputs.reserve(output_params.size());\n-\n-    for (unsigned int idx = 0; idx < output_params.size(); idx++) {\n-        const UniValue& o = output_params[idx].get_obj();\n-\n-        RPCTypeCheckObj(o,\n-            {\n-                {\"txid\", UniValueType(UniValue::VSTR)},\n-                {\"vout\", UniValueType(UniValue::VNUM)},\n-            });\n-\n-        const uint256 txid(ParseHashO(o, \"txid\"));\n-        const int nOutput = find_value(o, \"vout\").get_int();\n-        if (nOutput < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout cannot be negative\");\n-        }\n-\n-        const COutPoint outpt(txid, nOutput);\n-\n-        const auto it = pwallet->mapWallet.find(outpt.hash);\n-        if (it == pwallet->mapWallet.end()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, unknown transaction\");\n-        }\n-\n-        const CWalletTx& trans = it->second;\n-\n-        if (outpt.n >= trans.tx->vout.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout index out of bounds\");\n-        }\n-\n-        if (pwallet->IsSpent(outpt.hash, outpt.n)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected unspent output\");\n-        }\n-\n-        const bool is_locked = pwallet->IsLockedCoin(outpt.hash, outpt.n);\n-\n-        if (fUnlock && !is_locked) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected locked output\");\n-        }\n-\n-        if (!fUnlock && is_locked && !persistent) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, output already locked\");\n-        }\n-\n-        outputs.push_back(outpt);\n-    }\n-\n-    std::unique_ptr<WalletBatch> batch = nullptr;\n-    // Unlock is always persistent\n-    if (fUnlock || persistent) batch = std::make_unique<WalletBatch>(pwallet->GetDatabase());\n-\n-    // Atomically set (un)locked status for the outputs.\n-    for (const COutPoint& outpt : outputs) {\n-        if (fUnlock) {\n-            if (!pwallet->UnlockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Unlocking coin failed\");\n-        } else {\n-            if (!pwallet->LockCoin(outpt, batch.get())) throw JSONRPCError(RPC_WALLET_ERROR, \"Locking coin failed\");\n-        }\n-    }\n-\n-    return true;\n-},\n-    };\n-}\n-\n-static RPCHelpMan listlockunspent()\n-{\n-    return RPCHelpMan{\"listlockunspent\",\n-                \"\\nReturns list of temporarily unspendable outputs.\\n\"\n-                \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id locked\"},\n-                            {RPCResult::Type::NUM, \"vout\", \"The vout value\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-            \"\\nList the unspent transactions\\n\"\n-            + HelpExampleCli(\"listunspent\", \"\") +\n-            \"\\nLock an unspent transaction\\n\"\n-            + HelpExampleCli(\"lockunspent\", \"false \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nList the locked transactions\\n\"\n-            + HelpExampleCli(\"listlockunspent\", \"\") +\n-            \"\\nUnlock the transaction again\\n\"\n-            + HelpExampleCli(\"lockunspent\", \"true \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"listlockunspent\", \"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    std::vector<COutPoint> vOutpts;\n-    pwallet->ListLockedCoins(vOutpts);\n-\n-    UniValue ret(UniValue::VARR);\n-\n-    for (const COutPoint& outpt : vOutpts) {\n-        UniValue o(UniValue::VOBJ);\n-\n-        o.pushKV(\"txid\", outpt.hash.GetHex());\n-        o.pushKV(\"vout\", (int)outpt.n);\n-        ret.push_back(o);\n-    }\n-\n-    return ret;\n-},\n-    };\n-}\n-\n static RPCHelpMan settxfee()\n {\n     return RPCHelpMan{\"settxfee\",\n@@ -783,73 +388,6 @@ static RPCHelpMan settxfee()\n     };\n }\n \n-static RPCHelpMan getbalances()\n-{\n-    return RPCHelpMan{\n-        \"getbalances\",\n-        \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n-        {},\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-            {\n-                {RPCResult::Type::OBJ, \"mine\", \"balances from outputs that the wallet can sign\",\n-                {\n-                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"used\", /* optional */ true, \"(only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\"},\n-                }},\n-                {RPCResult::Type::OBJ, \"watchonly\", /* optional */ true, \"watchonly balances (not present if wallet does not watch anything)\",\n-                {\n-                    {RPCResult::Type::STR_AMOUNT, \"trusted\", \"trusted balance (outputs created by the wallet or confirmed outputs)\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"untrusted_pending\", \"untrusted pending balance (outputs created by others that are in the mempool)\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"immature\", \"balance from immature coinbase outputs\"},\n-                }},\n-            }\n-            },\n-        RPCExamples{\n-            HelpExampleCli(\"getbalances\", \"\") +\n-            HelpExampleRpc(\"getbalances\", \"\")},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> rpc_wallet = GetWalletForJSONRPCRequest(request);\n-    if (!rpc_wallet) return NullUniValue;\n-    const CWallet& wallet = *rpc_wallet;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(wallet.cs_wallet);\n-\n-    const auto bal = GetBalance(wallet);\n-    UniValue balances{UniValue::VOBJ};\n-    {\n-        UniValue balances_mine{UniValue::VOBJ};\n-        balances_mine.pushKV(\"trusted\", ValueFromAmount(bal.m_mine_trusted));\n-        balances_mine.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_mine_untrusted_pending));\n-        balances_mine.pushKV(\"immature\", ValueFromAmount(bal.m_mine_immature));\n-        if (wallet.IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n-            // If the AVOID_REUSE flag is set, bal has been set to just the un-reused address balance. Get\n-            // the total balance, and then subtract bal to get the reused address balance.\n-            const auto full_bal = GetBalance(wallet, 0, false);\n-            balances_mine.pushKV(\"used\", ValueFromAmount(full_bal.m_mine_trusted + full_bal.m_mine_untrusted_pending - bal.m_mine_trusted - bal.m_mine_untrusted_pending));\n-        }\n-        balances.pushKV(\"mine\", balances_mine);\n-    }\n-    auto spk_man = wallet.GetLegacyScriptPubKeyMan();\n-    if (spk_man && spk_man->HaveWatchOnly()) {\n-        UniValue balances_watchonly{UniValue::VOBJ};\n-        balances_watchonly.pushKV(\"trusted\", ValueFromAmount(bal.m_watchonly_trusted));\n-        balances_watchonly.pushKV(\"untrusted_pending\", ValueFromAmount(bal.m_watchonly_untrusted_pending));\n-        balances_watchonly.pushKV(\"immature\", ValueFromAmount(bal.m_watchonly_immature));\n-        balances.pushKV(\"watchonly\", balances_watchonly);\n-    }\n-    return balances;\n-},\n-    };\n-}\n-\n static RPCHelpMan getwalletinfo()\n {\n     return RPCHelpMan{\"getwalletinfo\",\n@@ -1263,242 +801,6 @@ static RPCHelpMan unloadwallet()\n     };\n }\n \n-static RPCHelpMan listunspent()\n-{\n-    return RPCHelpMan{\n-                \"listunspent\",\n-                \"\\nReturns array of unspent transaction outputs\\n\"\n-                \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n-                \"Optionally filter to only include txouts paid to specified addresses.\\n\",\n-                {\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Default{1}, \"The minimum confirmations to filter\"},\n-                    {\"maxconf\", RPCArg::Type::NUM, RPCArg::Default{9999999}, \"The maximum confirmations to filter\"},\n-                    {\"addresses\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The bitcoin addresses to filter\",\n-                        {\n-                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"bitcoin address\"},\n-                        },\n-                    },\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include outputs that are not safe to spend\\n\"\n-                              \"See description of \\\"safe\\\" attribute below.\"},\n-                    {\"query_options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"JSON with query options\",\n-                        {\n-                            {\"minimumAmount\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(0)}, \"Minimum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum value of each UTXO in \" + CURRENCY_UNIT + \"\"},\n-                            {\"maximumCount\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"unlimited\"}, \"Maximum number of UTXOs\"},\n-                            {\"minimumSumAmount\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"unlimited\"}, \"Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\"},\n-                        },\n-                        \"query_options\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::STR_HEX, \"txid\", \"the transaction id\"},\n-                            {RPCResult::Type::NUM, \"vout\", \"the vout value\"},\n-                            {RPCResult::Type::STR, \"address\", /* optional */ true, \"the bitcoin address\"},\n-                            {RPCResult::Type::STR, \"label\", /* optional */ true, \"The associated label, or \\\"\\\" for the default label\"},\n-                            {RPCResult::Type::STR, \"scriptPubKey\", \"the script key\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"amount\", \"the transaction output amount in \" + CURRENCY_UNIT},\n-                            {RPCResult::Type::NUM, \"confirmations\", \"The number of confirmations\"},\n-                            {RPCResult::Type::NUM, \"ancestorcount\", /* optional */ true, \"The number of in-mempool ancestor transactions, including this one (if transaction is in the mempool)\"},\n-                            {RPCResult::Type::NUM, \"ancestorsize\", /* optional */ true, \"The virtual transaction size of in-mempool ancestors, including this one (if transaction is in the mempool)\"},\n-                            {RPCResult::Type::STR_AMOUNT, \"ancestorfees\", /* optional */ true, \"The total fees of in-mempool ancestors (including this one) with fee deltas used for mining priority in \" + CURRENCY_ATOM + \" (if transaction is in the mempool)\"},\n-                            {RPCResult::Type::STR_HEX, \"redeemScript\", /* optional */ true, \"The redeemScript if scriptPubKey is P2SH\"},\n-                            {RPCResult::Type::STR, \"witnessScript\", /* optional */ true, \"witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\"},\n-                            {RPCResult::Type::BOOL, \"spendable\", \"Whether we have the private keys to spend this output\"},\n-                            {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n-                            {RPCResult::Type::BOOL, \"reused\", /* optional */ true, \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n-                            {RPCResult::Type::STR, \"desc\", /* optional */ true, \"(only when solvable) A descriptor for spending this output\"},\n-                            {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n-                                                            \"from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n-                                                            \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"listunspent\", \"\")\n-            + HelpExampleCli(\"listunspent\", \"6 9999999 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n-            + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\")\n-            + HelpExampleCli(\"listunspent\", \"6 9999999 '[]' true '{ \\\"minimumAmount\\\": 0.005 }'\")\n-            + HelpExampleRpc(\"listunspent\", \"6, 9999999, [] , true, { \\\"minimumAmount\\\": 0.005 } \")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    int nMinDepth = 1;\n-    if (!request.params[0].isNull()) {\n-        RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-        nMinDepth = request.params[0].get_int();\n-    }\n-\n-    int nMaxDepth = 9999999;\n-    if (!request.params[1].isNull()) {\n-        RPCTypeCheckArgument(request.params[1], UniValue::VNUM);\n-        nMaxDepth = request.params[1].get_int();\n-    }\n-\n-    std::set<CTxDestination> destinations;\n-    if (!request.params[2].isNull()) {\n-        RPCTypeCheckArgument(request.params[2], UniValue::VARR);\n-        UniValue inputs = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n-            const UniValue& input = inputs[idx];\n-            CTxDestination dest = DecodeDestination(input.get_str());\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + input.get_str());\n-            }\n-            if (!destinations.insert(dest).second) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + input.get_str());\n-            }\n-        }\n-    }\n-\n-    bool include_unsafe = true;\n-    if (!request.params[3].isNull()) {\n-        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n-        include_unsafe = request.params[3].get_bool();\n-    }\n-\n-    CAmount nMinimumAmount = 0;\n-    CAmount nMaximumAmount = MAX_MONEY;\n-    CAmount nMinimumSumAmount = MAX_MONEY;\n-    uint64_t nMaximumCount = 0;\n-\n-    if (!request.params[4].isNull()) {\n-        const UniValue& options = request.params[4].get_obj();\n-\n-        RPCTypeCheckObj(options,\n-            {\n-                {\"minimumAmount\", UniValueType()},\n-                {\"maximumAmount\", UniValueType()},\n-                {\"minimumSumAmount\", UniValueType()},\n-                {\"maximumCount\", UniValueType(UniValue::VNUM)},\n-            },\n-            true, true);\n-\n-        if (options.exists(\"minimumAmount\"))\n-            nMinimumAmount = AmountFromValue(options[\"minimumAmount\"]);\n-\n-        if (options.exists(\"maximumAmount\"))\n-            nMaximumAmount = AmountFromValue(options[\"maximumAmount\"]);\n-\n-        if (options.exists(\"minimumSumAmount\"))\n-            nMinimumSumAmount = AmountFromValue(options[\"minimumSumAmount\"]);\n-\n-        if (options.exists(\"maximumCount\"))\n-            nMaximumCount = options[\"maximumCount\"].get_int64();\n-    }\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    UniValue results(UniValue::VARR);\n-    std::vector<COutput> vecOutputs;\n-    {\n-        CCoinControl cctl;\n-        cctl.m_avoid_address_reuse = false;\n-        cctl.m_min_depth = nMinDepth;\n-        cctl.m_max_depth = nMaxDepth;\n-        cctl.m_include_unsafe_inputs = include_unsafe;\n-        LOCK(pwallet->cs_wallet);\n-        AvailableCoins(*pwallet, vecOutputs, &cctl, nMinimumAmount, nMaximumAmount, nMinimumSumAmount, nMaximumCount);\n-    }\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    const bool avoid_reuse = pwallet->IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE);\n-\n-    for (const COutput& out : vecOutputs) {\n-        CTxDestination address;\n-        const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n-        bool fValidAddress = ExtractDestination(scriptPubKey, address);\n-        bool reused = avoid_reuse && pwallet->IsSpentKey(out.tx->GetHash(), out.i);\n-\n-        if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n-            continue;\n-\n-        UniValue entry(UniValue::VOBJ);\n-        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n-        entry.pushKV(\"vout\", out.i);\n-\n-        if (fValidAddress) {\n-            entry.pushKV(\"address\", EncodeDestination(address));\n-\n-            const auto* address_book_entry = pwallet->FindAddressBookEntry(address);\n-            if (address_book_entry) {\n-                entry.pushKV(\"label\", address_book_entry->GetLabel());\n-            }\n-\n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n-            if (provider) {\n-                if (scriptPubKey.IsPayToScriptHash()) {\n-                    const CScriptID& hash = CScriptID(std::get<ScriptHash>(address));\n-                    CScript redeemScript;\n-                    if (provider->GetCScript(hash, redeemScript)) {\n-                        entry.pushKV(\"redeemScript\", HexStr(redeemScript));\n-                        // Now check if the redeemScript is actually a P2WSH script\n-                        CTxDestination witness_destination;\n-                        if (redeemScript.IsPayToWitnessScriptHash()) {\n-                            bool extracted = ExtractDestination(redeemScript, witness_destination);\n-                            CHECK_NONFATAL(extracted);\n-                            // Also return the witness script\n-                            const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(witness_destination);\n-                            CScriptID id;\n-                            CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                            CScript witnessScript;\n-                            if (provider->GetCScript(id, witnessScript)) {\n-                                entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n-                            }\n-                        }\n-                    }\n-                } else if (scriptPubKey.IsPayToWitnessScriptHash()) {\n-                    const WitnessV0ScriptHash& whash = std::get<WitnessV0ScriptHash>(address);\n-                    CScriptID id;\n-                    CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n-                    CScript witnessScript;\n-                    if (provider->GetCScript(id, witnessScript)) {\n-                        entry.pushKV(\"witnessScript\", HexStr(witnessScript));\n-                    }\n-                }\n-            }\n-        }\n-\n-        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey));\n-        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n-        entry.pushKV(\"confirmations\", out.nDepth);\n-        if (!out.nDepth) {\n-            size_t ancestor_count, descendant_count, ancestor_size;\n-            CAmount ancestor_fees;\n-            pwallet->chain().getTransactionAncestry(out.tx->GetHash(), ancestor_count, descendant_count, &ancestor_size, &ancestor_fees);\n-            if (ancestor_count) {\n-                entry.pushKV(\"ancestorcount\", uint64_t(ancestor_count));\n-                entry.pushKV(\"ancestorsize\", uint64_t(ancestor_size));\n-                entry.pushKV(\"ancestorfees\", uint64_t(ancestor_fees));\n-            }\n-        }\n-        entry.pushKV(\"spendable\", out.fSpendable);\n-        entry.pushKV(\"solvable\", out.fSolvable);\n-        if (out.fSolvable) {\n-            std::unique_ptr<SigningProvider> provider = pwallet->GetSolvingProvider(scriptPubKey);\n-            if (provider) {\n-                auto descriptor = InferDescriptor(scriptPubKey, *provider);\n-                entry.pushKV(\"desc\", descriptor->ToString());\n-            }\n-        }\n-        if (avoid_reuse) entry.pushKV(\"reused\", reused);\n-        entry.pushKV(\"safe\", out.fSafe);\n-        results.push_back(entry);\n-    }\n-\n-    return results;\n-},\n-    };\n-}\n-\n // Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n static std::vector<RPCArg> FundTxDoc()\n {\n@@ -2675,6 +1977,16 @@ RPCHelpMan listlabels();\n RPCHelpMan walletdisplayaddress();\n #endif // ENABLE_EXTERNAL_SIGNER\n \n+// coins\n+RPCHelpMan getreceivedbyaddress();\n+RPCHelpMan getreceivedbylabel();\n+RPCHelpMan getbalance();\n+RPCHelpMan getunconfirmedbalance();\n+RPCHelpMan lockunspent();\n+RPCHelpMan listlockunspent();\n+RPCHelpMan getbalances();\n+RPCHelpMan listunspent();\n+\n // encryption\n RPCHelpMan walletpassphrase();\n RPCHelpMan walletpassphrasechange();"
      }
    ]
  },
  {
    "sha": "f60b38d62b98e5a3c372938b6751aab68cfb7a13",
    "node_id": "C_kwDOABII59oAKGY2MGIzOGQ2MmI5OGU1YTNjMzcyOTM4YjY3NTFhYWI2OGNmYjdhMTM",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T03:40:55Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:50:58Z"
      },
      "message": "MOVEONLY: Move spending RPCs to spend.cpp",
      "tree": {
        "sha": "6f80b998a0bd02d81eefb3d333fd17168b84ef01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f80b998a0bd02d81eefb3d333fd17168b84ef01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60b38d62b98e5a3c372938b6751aab68cfb7a13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b38d62b98e5a3c372938b6751aab68cfb7a13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b38d62b98e5a3c372938b6751aab68cfb7a13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b38d62b98e5a3c372938b6751aab68cfb7a13/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec5f5c7d22b3ba50fc29a0ab411ba92cde599a6"
      }
    ],
    "stats": {
      "total": 2736,
      "additions": 1381,
      "deletions": 1355
    },
    "files": [
      {
        "sha": "23e8c93df016d0c06088e2785f3631331fe6499a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f60b38d62b98e5a3c372938b6751aab68cfb7a13",
        "patch": "@@ -414,6 +414,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpc/backup.cpp \\\n   wallet/rpc/coins.cpp \\\n   wallet/rpc/encrypt.cpp \\\n+  wallet/rpc/spend.cpp \\\n   wallet/rpc/signmessage.cpp \\\n   wallet/rpc/transactions.cpp \\\n   wallet/rpc/util.cpp \\"
      },
      {
        "sha": "a22c1750329aec0c78e1dda022cbfb056bc6d654",
        "filename": "src/wallet/rpc/spend.cpp",
        "status": "added",
        "additions": 1369,
        "deletions": 0,
        "changes": 1369,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/wallet/rpc/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/wallet/rpc/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/spend.cpp?ref=f60b38d62b98e5a3c372938b6751aab68cfb7a13",
        "patch": "@@ -0,0 +1,1369 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <policy/policy.h>\n+#include <rpc/rawtransaction_util.h>\n+#include <rpc/util.h>\n+#include <util/fees.h>\n+#include <util/translation.h>\n+#include <util/vector.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/rpc/util.h>\n+#include <wallet/spend.h>\n+#include <wallet/wallet.h>\n+\n+#include <univalue.h>\n+\n+\n+static void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n+    std::set<CTxDestination> destinations;\n+    int i = 0;\n+    for (const std::string& address: address_amounts.getKeys()) {\n+        CTxDestination dest = DecodeDestination(address);\n+        if (!IsValidDestination(dest)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + address);\n+        }\n+\n+        if (destinations.count(dest)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + address);\n+        }\n+        destinations.insert(dest);\n+\n+        CScript script_pub_key = GetScriptForDestination(dest);\n+        CAmount amount = AmountFromValue(address_amounts[i++]);\n+\n+        bool subtract_fee = false;\n+        for (unsigned int idx = 0; idx < subtract_fee_outputs.size(); idx++) {\n+            const UniValue& addr = subtract_fee_outputs[idx];\n+            if (addr.get_str() == address) {\n+                subtract_fee = true;\n+            }\n+        }\n+\n+        CRecipient recipient = {script_pub_key, amount, subtract_fee};\n+        recipients.push_back(recipient);\n+    }\n+}\n+\n+UniValue SendMoney(CWallet& wallet, const CCoinControl &coin_control, std::vector<CRecipient> &recipients, mapValue_t map_value, bool verbose)\n+{\n+    EnsureWalletIsUnlocked(wallet);\n+\n+    // This function is only used by sendtoaddress and sendmany.\n+    // This should always try to sign, if we don't have private keys, don't try to do anything here.\n+    if (wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n+    }\n+\n+    // Shuffle recipient list\n+    std::shuffle(recipients.begin(), recipients.end(), FastRandomContext());\n+\n+    // Send\n+    CAmount nFeeRequired = 0;\n+    int nChangePosRet = -1;\n+    bilingual_str error;\n+    CTransactionRef tx;\n+    FeeCalculation fee_calc_out;\n+    const bool fCreated = CreateTransaction(wallet, recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, true);\n+    if (!fCreated) {\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n+    }\n+    wallet.CommitTransaction(tx, std::move(map_value), {} /* orderForm */);\n+    if (verbose) {\n+        UniValue entry(UniValue::VOBJ);\n+        entry.pushKV(\"txid\", tx->GetHash().GetHex());\n+        entry.pushKV(\"fee_reason\", StringForFeeReason(fee_calc_out.reason));\n+        return entry;\n+    }\n+    return tx->GetHash().GetHex();\n+}\n+\n+\n+/**\n+ * Update coin control with fee estimation based on the given parameters\n+ *\n+ * @param[in]     wallet            Wallet reference\n+ * @param[in,out] cc                Coin control to be updated\n+ * @param[in]     conf_target       UniValue integer; confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n+ * @param[in]     estimate_mode     UniValue string; fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n+ * @param[in]     fee_rate          UniValue real; fee rate in sat/vB;\n+ *                                      if present, both conf_target and estimate_mode must either be null, or \"unset\"\n+ * @param[in]     override_min_fee  bool; whether to set fOverrideFeeRate to true to disable minimum fee rate checks and instead\n+ *                                      verify only that fee_rate is greater than 0\n+ * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n+ */\n+static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n+{\n+    if (!fee_rate.isNull()) {\n+        if (!conf_target.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n+        }\n+        if (!estimate_mode.isNull() && estimate_mode.get_str() != \"unset\") {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n+        }\n+        // Fee rates in sat/vB cannot represent more than 3 significant digits.\n+        cc.m_feerate = CFeeRate{AmountFromValue(fee_rate, /* decimals */ 3)};\n+        if (override_min_fee) cc.fOverrideFeeRate = true;\n+        // Default RBF to true for explicit fee_rate, if unset.\n+        if (!cc.m_signal_bip125_rbf) cc.m_signal_bip125_rbf = true;\n+        return;\n+    }\n+    if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, InvalidEstimateModeErrorMessage());\n+    }\n+    if (!conf_target.isNull()) {\n+        cc.m_confirm_target = ParseConfirmTarget(conf_target, wallet.chain().estimateMaxBlocks());\n+    }\n+}\n+\n+RPCHelpMan sendtoaddress()\n+{\n+    return RPCHelpMan{\"sendtoaddress\",\n+                \"\\nSend an amount to a given address.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n+                                         \"This is not part of the transaction, just kept in your wallet.\"},\n+                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n+                                         \"to which you're sending the transaction. This is not part of the \\n\"\n+                                         \"transaction, just kept in your wallet.\"},\n+                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"The fee will be deducted from the amount being sent.\\n\"\n+                                         \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n+                                         \"dirty if they have previously been used in a transaction. If true, this also activates avoidpartialspends, grouping outputs by their addresses.\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra information about the transaction.\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"\n+                    },\n+                    RPCResult{\"if verbose is set to true\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n+                        },\n+                    },\n+                },\n+                RPCExamples{\n+                    \"\\nSend 0.1 BTC\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n+                    \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"sean's outpost\\\" false true 6 economical\") +\n+                    \"\\nSend 0.1 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\\n\"\n+                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"drinks\\\" \\\"room77\\\" true true null \\\"unset\\\" null 1.1\") +\n+                    \"\\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\\n\"\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.2 conf_target=6 estimate_mode=\\\"economical\\\"\") +\n+                    \"\\nSend 0.5 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25\")\n+                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25 subtractfeefromamount=false replaceable=true avoid_reuse=true comment=\\\"2 pizzas\\\" comment_to=\\\"jeremy\\\" verbose=true\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    // Wallet comments\n+    mapValue_t mapValue;\n+    if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n+        mapValue[\"comment\"] = request.params[2].get_str();\n+    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n+        mapValue[\"to\"] = request.params[3].get_str();\n+\n+    bool fSubtractFeeFromAmount = false;\n+    if (!request.params[4].isNull()) {\n+        fSubtractFeeFromAmount = request.params[4].get_bool();\n+    }\n+\n+    CCoinControl coin_control;\n+    if (!request.params[5].isNull()) {\n+        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n+    }\n+\n+    coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(*pwallet, request.params[8]);\n+    // We also enable partial spend avoidance if reuse avoidance is set.\n+    coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n+\n+    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9], /* override_min_fee */ false);\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+    UniValue address_amounts(UniValue::VOBJ);\n+    const std::string address = request.params[0].get_str();\n+    address_amounts.pushKV(address, request.params[1]);\n+    UniValue subtractFeeFromAmount(UniValue::VARR);\n+    if (fSubtractFeeFromAmount) {\n+        subtractFeeFromAmount.push_back(address);\n+    }\n+\n+    std::vector<CRecipient> recipients;\n+    ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n+    const bool verbose{request.params[10].isNull() ? false : request.params[10].get_bool()};\n+\n+    return SendMoney(*pwallet, coin_control, recipients, mapValue, verbose);\n+},\n+    };\n+}\n+\n+RPCHelpMan sendmany()\n+{\n+    return RPCHelpMan{\"sendmany\",\n+                \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n+                    {\"amounts\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::NO, \"The addresses and amounts\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n+                        },\n+                    },\n+                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n+                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n+                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The addresses.\\n\"\n+                                       \"The fee will be equally deducted from the amount of each selected address.\\n\"\n+                                       \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                       \"If no addresses are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra infomration about the transaction.\"},\n+                },\n+                {\n+                    RPCResult{\"if verbose is not set or set to false\",\n+                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n+                \"the number of addresses.\"\n+                    },\n+                    RPCResult{\"if verbose is set to true\",\n+                        RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n+                \"the number of addresses.\"},\n+                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n+                        },\n+                    },\n+                },\n+                RPCExamples{\n+            \"\\nSend two amounts to two different addresses:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\"\") +\n+            \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\":0.01,\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\":0.02}, 6, \\\"testing\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n+    }\n+    UniValue sendTo = request.params[1].get_obj();\n+\n+    mapValue_t mapValue;\n+    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n+        mapValue[\"comment\"] = request.params[3].get_str();\n+\n+    UniValue subtractFeeFromAmount(UniValue::VARR);\n+    if (!request.params[4].isNull())\n+        subtractFeeFromAmount = request.params[4].get_array();\n+\n+    CCoinControl coin_control;\n+    if (!request.params[5].isNull()) {\n+        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n+    }\n+\n+    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8], /* override_min_fee */ false);\n+\n+    std::vector<CRecipient> recipients;\n+    ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n+    const bool verbose{request.params[9].isNull() ? false : request.params[9].get_bool()};\n+\n+    return SendMoney(*pwallet, coin_control, recipients, std::move(mapValue), verbose);\n+},\n+    };\n+}\n+\n+RPCHelpMan settxfee()\n+{\n+    return RPCHelpMan{\"settxfee\",\n+                \"\\nSet the transaction fee rate in \" + CURRENCY_UNIT + \"/kvB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n+                \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n+                {\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::BOOL, \"\", \"Returns true if successful\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"settxfee\", \"0.00001\")\n+            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    CAmount nAmount = AmountFromValue(request.params[0]);\n+    CFeeRate tx_fee_rate(nAmount, 1000);\n+    CFeeRate max_tx_fee_rate(pwallet->m_default_max_tx_fee, 1000);\n+    if (tx_fee_rate == CFeeRate(0)) {\n+        // automatic selection\n+    } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than min relay tx fee (%s)\", pwallet->chain().relayMinFee().ToString()));\n+    } else if (tx_fee_rate < pwallet->m_min_fee) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than wallet min fee (%s)\", pwallet->m_min_fee.ToString()));\n+    } else if (tx_fee_rate > max_tx_fee_rate) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be more than wallet max tx fee (%s)\", max_tx_fee_rate.ToString()));\n+    }\n+\n+    pwallet->m_pay_tx_fee = tx_fee_rate;\n+    return true;\n+},\n+    };\n+}\n+\n+\n+// Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n+static std::vector<RPCArg> FundTxDoc()\n+{\n+    return {\n+        {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+        {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+        {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125-replaceable.\\n\"\n+            \"Allows this transaction to be replaced by a transaction with higher fees\"},\n+        {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n+            \"Used for fee estimation during coin selection.\",\n+         {\n+             {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n+             {\n+                 {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n+             }},\n+             {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n+             {\n+                 {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n+             }},\n+             {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n+             {\n+                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n+             }},\n+         }},\n+    };\n+}\n+\n+void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl, bool override_min_fee)\n+{\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n+    change_position = -1;\n+    bool lockUnspents = false;\n+    UniValue subtractFeeFromOutputs;\n+    std::set<int> setSubtractFeeFromOutputs;\n+\n+    if (!options.isNull()) {\n+      if (options.type() == UniValue::VBOOL) {\n+        // backward compatibility bool only fallback\n+        coinControl.fAllowWatchOnly = options.get_bool();\n+      }\n+      else {\n+        RPCTypeCheckArgument(options, UniValue::VOBJ);\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n+                {\"include_unsafe\", UniValueType(UniValue::VBOOL)},\n+                {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n+                {\"changeAddress\", UniValueType(UniValue::VSTR)},\n+                {\"change_address\", UniValueType(UniValue::VSTR)},\n+                {\"changePosition\", UniValueType(UniValue::VNUM)},\n+                {\"change_position\", UniValueType(UniValue::VNUM)},\n+                {\"change_type\", UniValueType(UniValue::VSTR)},\n+                {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n+                {\"include_watching\", UniValueType(UniValue::VBOOL)},\n+                {\"inputs\", UniValueType(UniValue::VARR)},\n+                {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n+                {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n+                {\"locktime\", UniValueType(UniValue::VNUM)},\n+                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                {\"feeRate\", UniValueType()}, // will be checked by AmountFromValue() below\n+                {\"psbt\", UniValueType(UniValue::VBOOL)},\n+                {\"solving_data\", UniValueType(UniValue::VOBJ)},\n+                {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n+                {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"add_inputs\") ) {\n+            coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n+        }\n+\n+        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n+            const std::string change_address_str = (options.exists(\"change_address\") ? options[\"change_address\"] : options[\"changeAddress\"]).get_str();\n+            CTxDestination dest = DecodeDestination(change_address_str);\n+\n+            if (!IsValidDestination(dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Change address must be a valid bitcoin address\");\n+            }\n+\n+            coinControl.destChange = dest;\n+        }\n+\n+        if (options.exists(\"changePosition\") || options.exists(\"change_position\")) {\n+            change_position = (options.exists(\"change_position\") ? options[\"change_position\"] : options[\"changePosition\"]).get_int();\n+        }\n+\n+        if (options.exists(\"change_type\")) {\n+            if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both change address and address type options\");\n+            }\n+            if (std::optional<OutputType> parsed = ParseOutputType(options[\"change_type\"].get_str())) {\n+                coinControl.m_change_type.emplace(parsed.value());\n+            } else {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n+            }\n+        }\n+\n+        const UniValue include_watching_option = options.exists(\"include_watching\") ? options[\"include_watching\"] : options[\"includeWatching\"];\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(include_watching_option, wallet);\n+\n+        if (options.exists(\"lockUnspents\") || options.exists(\"lock_unspents\")) {\n+            lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n+        }\n+\n+        if (options.exists(\"include_unsafe\")) {\n+            coinControl.m_include_unsafe_inputs = options[\"include_unsafe\"].get_bool();\n+        }\n+\n+        if (options.exists(\"feeRate\")) {\n+            if (options.exists(\"fee_rate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");\n+            }\n+            if (options.exists(\"conf_target\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n+            }\n+            if (options.exists(\"estimate_mode\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n+            }\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n+            coinControl.fOverrideFeeRate = true;\n+        }\n+\n+        if (options.exists(\"subtractFeeFromOutputs\") || options.exists(\"subtract_fee_from_outputs\") )\n+            subtractFeeFromOutputs = (options.exists(\"subtract_fee_from_outputs\") ? options[\"subtract_fee_from_outputs\"] : options[\"subtractFeeFromOutputs\"]).get_array();\n+\n+        if (options.exists(\"replaceable\")) {\n+            coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n+        }\n+        SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n+      }\n+    } else {\n+        // if options is null and not a bool\n+        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, wallet);\n+    }\n+\n+    if (options.exists(\"solving_data\")) {\n+        const UniValue solving_data = options[\"solving_data\"].get_obj();\n+        if (solving_data.exists(\"pubkeys\")) {\n+            for (const UniValue& pk_univ : solving_data[\"pubkeys\"].get_array().getValues()) {\n+                const std::string& pk_str = pk_univ.get_str();\n+                if (!IsHex(pk_str)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", pk_str));\n+                }\n+                const std::vector<unsigned char> data(ParseHex(pk_str));\n+                const CPubKey pubkey(data.begin(), data.end());\n+                if (!pubkey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not a valid public key\", pk_str));\n+                }\n+                coinControl.m_external_provider.pubkeys.emplace(pubkey.GetID(), pubkey);\n+                // Add witness script for pubkeys\n+                const CScript wit_script = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n+                coinControl.m_external_provider.scripts.emplace(CScriptID(wit_script), wit_script);\n+            }\n+        }\n+\n+        if (solving_data.exists(\"scripts\")) {\n+            for (const UniValue& script_univ : solving_data[\"scripts\"].get_array().getValues()) {\n+                const std::string& script_str = script_univ.get_str();\n+                if (!IsHex(script_str)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", script_str));\n+                }\n+                std::vector<unsigned char> script_data(ParseHex(script_str));\n+                const CScript script(script_data.begin(), script_data.end());\n+                coinControl.m_external_provider.scripts.emplace(CScriptID(script), script);\n+            }\n+        }\n+\n+        if (solving_data.exists(\"descriptors\")) {\n+            for (const UniValue& desc_univ : solving_data[\"descriptors\"].get_array().getValues()) {\n+                const std::string& desc_str  = desc_univ.get_str();\n+                FlatSigningProvider desc_out;\n+                std::string error;\n+                std::vector<CScript> scripts_temp;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, desc_out, error, true);\n+                if (!desc) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unable to parse descriptor '%s': %s\", desc_str, error));\n+                }\n+                desc->Expand(0, desc_out, scripts_temp, desc_out);\n+                coinControl.m_external_provider = Merge(coinControl.m_external_provider, desc_out);\n+            }\n+        }\n+    }\n+\n+    if (tx.vout.size() == 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n+\n+    if (change_position != -1 && (change_position < 0 || (unsigned int)change_position > tx.vout.size()))\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n+\n+    for (unsigned int idx = 0; idx < subtractFeeFromOutputs.size(); idx++) {\n+        int pos = subtractFeeFromOutputs[idx].get_int();\n+        if (setSubtractFeeFromOutputs.count(pos))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, duplicated position: %d\", pos));\n+        if (pos < 0)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, negative position: %d\", pos));\n+        if (pos >= int(tx.vout.size()))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, position too large: %d\", pos));\n+        setSubtractFeeFromOutputs.insert(pos);\n+    }\n+\n+    // Fetch specified UTXOs from the UTXO set to get the scriptPubKeys and values of the outputs being selected\n+    // and to match with the given solving_data. Only used for non-wallet outputs.\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : tx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    wallet.chain().findCoins(coins);\n+    for (const auto& coin : coins) {\n+        if (!coin.second.out.IsNull()) {\n+            coinControl.SelectExternal(coin.first, coin.second.out);\n+        }\n+    }\n+\n+    bilingual_str error;\n+\n+    if (!FundTransaction(wallet, tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n+    }\n+}\n+\n+RPCHelpMan fundrawtransaction()\n+{\n+    return RPCHelpMan{\"fundrawtransaction\",\n+                \"\\nIf the transaction has no inputs, they will be automatically selected to meet its out value.\\n\"\n+                \"It will add at most one change output to the outputs.\\n\"\n+                \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n+                \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n+                \"The inputs added will not be signed, use signrawtransactionwithkey\\n\"\n+                \"or signrawtransactionwithwallet for that.\\n\"\n+                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n+                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\"\n+                \"Note that all inputs selected must be of standard form and P2SH scripts must be\\n\"\n+                \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n+                \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n+                        Cat<std::vector<RPCArg>>(\n+                        {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n+                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                            {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The integers.\\n\"\n+                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                                          \"If no outputs are specified here, the sender pays the fee.\",\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                                },\n+                            },\n+                        },\n+                        FundTxDoc()),\n+                        \"options\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The resulting raw transaction (hex-encoded string)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n+                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n+                    }\n+                                },\n+                                RPCExamples{\n+                            \"\\nCreate a transaction with no inputs\\n\"\n+                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+                            \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n+                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"rawtransactionhex\\\"\") +\n+                            \"\\nSign the transaction\\n\"\n+                            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"fundedtransactionhex\\\"\") +\n+                            \"\\nSend the transaction\\n\"\n+                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n+                                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n+\n+    // parse hex string from parameter\n+    CMutableTransaction tx;\n+    bool try_witness = request.params[2].isNull() ? true : request.params[2].get_bool();\n+    bool try_no_witness = request.params[2].isNull() ? true : !request.params[2].get_bool();\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CAmount fee;\n+    int change_position;\n+    CCoinControl coin_control;\n+    // Automatically select (additional) coins. Can be overridden by options.add_inputs.\n+    coin_control.m_add_inputs = true;\n+    FundTransaction(*pwallet, tx, fee, change_position, request.params[1], coin_control, /* override_min_fee */ true);\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n+    result.pushKV(\"fee\", ValueFromAmount(fee));\n+    result.pushKV(\"changepos\", change_position);\n+\n+    return result;\n+},\n+    };\n+}\n+\n+RPCHelpMan signrawtransactionwithwallet()\n+{\n+    return RPCHelpMan{\"signrawtransactionwithwallet\",\n+                \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+                \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+                \"this transaction depends on but may not yet be in the block chain.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n+                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The previous dependent transaction outputs\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n+                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n+                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n+                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::OMITTED, \"(required for Segwit inputs) the amount spent\"},\n+                                },\n+                            },\n+                        },\n+                    },\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type. Must be one of\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                        {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n+                                {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n+                                {RPCResult::Type::ARR, \"witness\", \"\",\n+                                {\n+                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n+                                }},\n+                                {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n+                                {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n+                                {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK(pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+    // Fetch previous transactions (inputs):\n+    std::map<COutPoint, Coin> coins;\n+    for (const CTxIn& txin : mtx.vin) {\n+        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n+    }\n+    pwallet->chain().findCoins(coins);\n+\n+    // Parse the prevtxs array\n+    ParsePrevouts(request.params[1], nullptr, coins);\n+\n+    int nHashType = ParseSighashString(request.params[2]);\n+\n+    // Script verification errors\n+    std::map<int, bilingual_str> input_errors;\n+\n+    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n+    UniValue result(UniValue::VOBJ);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+    return result;\n+},\n+    };\n+}\n+\n+static RPCHelpMan bumpfee_helper(std::string method_name)\n+{\n+    const bool want_psbt = method_name == \"psbtbumpfee\";\n+    const std::string incremental_fee{CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE).ToString(FeeEstimateMode::SAT_VB)};\n+\n+    return RPCHelpMan{method_name,\n+        \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+        + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n+        \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+        \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary.\\n\"\n+        \"It may add a new change output if one does not already exist.\\n\"\n+        \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n+        \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+        \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n+        \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n+        \"Alternatively, the user can specify a fee rate in \" + CURRENCY_ATOM + \"/vB for the new transaction.\\n\"\n+        \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+        \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n+        \"* WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB. *\\n\",\n+        {\n+            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\\n\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"},\n+                             \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n+                             \"Must be at least \" + incremental_fee + \" higher than the current transaction fee rate.\\n\"\n+                             \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether the new transaction should still be\\n\"\n+                             \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+                             \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+                             \"original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+                             \"so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+                             \"still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n+                             \"are replaceable).\\n\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                             \"\\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", Cat(\n+                want_psbt ?\n+                std::vector<RPCResult>{{RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\"}} :\n+                std::vector<RPCResult>{{RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction.\"}},\n+            {\n+                {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n+                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n+                {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n+                {\n+                    {RPCResult::Type::STR, \"\", \"\"},\n+                }},\n+            })\n+        },\n+        RPCExamples{\n+    \"\\nBump the fee, get the new transaction\\'s \" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n+            HelpExampleCli(method_name, \"<txid>\")\n+        },\n+        [want_psbt](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !want_psbt) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"bumpfee is not available with wallets that have private keys disabled. Use psbtbumpfee instead.\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n+\n+    CCoinControl coin_control;\n+    coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    // optional parameters\n+    coin_control.m_signal_bip125_rbf = true;\n+\n+    if (!request.params[1].isNull()) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"conf_target\", UniValueType(UniValue::VNUM)},\n+                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"conf_target\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and conf_target options should not both be set. Use conf_target (confTarget is deprecated).\");\n+        }\n+\n+        auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n+\n+        if (options.exists(\"replaceable\")) {\n+            coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n+        }\n+        SetFeeEstimateMode(*pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+    }\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+\n+    std::vector<bilingual_str> errors;\n+    CAmount old_fee;\n+    CAmount new_fee;\n+    CMutableTransaction mtx;\n+    feebumper::Result res;\n+    // Targeting feerate bump.\n+    res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+    if (res != feebumper::Result::OK) {\n+        switch(res) {\n+            case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0].original);\n+                break;\n+            case feebumper::Result::INVALID_REQUEST:\n+                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0].original);\n+                break;\n+            case feebumper::Result::INVALID_PARAMETER:\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0].original);\n+                break;\n+            case feebumper::Result::WALLET_ERROR:\n+                throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n+                break;\n+            default:\n+                throw JSONRPCError(RPC_MISC_ERROR, errors[0].original);\n+                break;\n+        }\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    // For bumpfee, return the new transaction id.\n+    // For psbtbumpfee, return the base64-encoded unsigned PSBT of the new transaction.\n+    if (!want_psbt) {\n+        if (!feebumper::SignTransaction(*pwallet, mtx)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        }\n+\n+        uint256 txid;\n+        if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n+        }\n+\n+        result.pushKV(\"txid\", txid.GetHex());\n+    } else {\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool complete = false;\n+        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false /* sign */, true /* bip32derivs */);\n+        CHECK_NONFATAL(err == TransactionError::OK);\n+        CHECK_NONFATAL(!complete);\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n+    UniValue result_errors(UniValue::VARR);\n+    for (const bilingual_str& error : errors) {\n+        result_errors.push_back(error.original);\n+    }\n+    result.pushKV(\"errors\", result_errors);\n+\n+    return result;\n+},\n+    };\n+}\n+\n+RPCHelpMan bumpfee() { return bumpfee_helper(\"bumpfee\"); }\n+RPCHelpMan psbtbumpfee() { return bumpfee_helper(\"psbtbumpfee\"); }\n+\n+RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Specify inputs instead of adding them automatically. A JSON array of JSON objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                },\n+                FundTxDoc()),\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 6 economical\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" 1.1\\n\") +\n+        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1}'\\n\") +\n+        \"Send 0.3 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named send\", \"outputs='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.3}' fee_rate=25\\n\") +\n+        \"Create a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValueType(), // outputs (ARR or OBJ, checked later)\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+            }\n+            if (options.exists(\"feeRate\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n+            }\n+            if (options.exists(\"changeAddress\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n+            }\n+            if (options.exists(\"changePosition\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n+            }\n+            if (options.exists(\"includeWatching\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n+            }\n+            if (options.exists(\"lockUnspents\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n+            }\n+            if (options.exists(\"subtractFeeFromOutputs\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            CAmount fee;\n+            int change_position;\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CCoinControl coin_control;\n+            // Automatically select coins, unless at least one is manually selected. Can\n+            // be overridden by options.add_inputs.\n+            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+            FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                // Serialize the PSBT\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << psbtx;\n+                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            }\n+\n+            if (complete) {\n+                std::string err_string;\n+                std::string hex = EncodeHexTx(CTransaction(mtx));\n+                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+                result.pushKV(\"txid\", tx->GetHash().GetHex());\n+                if (add_to_wallet && !psbt_opt_in) {\n+                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+                } else {\n+                    result.pushKV(\"hex\", hex);\n+                }\n+            }\n+            result.pushKV(\"complete\", complete);\n+\n+            return result;\n+        }\n+    };\n+}\n+\n+RPCHelpMan walletprocesspsbt()\n+{\n+    return RPCHelpMan{\"walletprocesspsbt\",\n+                \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n+                \"that we can sign for.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n+                    {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating (requires wallet to be unlocked)\"},\n+                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n+            \"       \\\"DEFAULT\\\"\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"finalize\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also finalize inputs if possible\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction\"},\n+                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    const CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    // Unserialize the transaction\n+    PartiallySignedTransaction psbtx;\n+    std::string error;\n+    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n+    }\n+\n+    // Get the sighash type\n+    int nHashType = ParseSighashString(request.params[2]);\n+\n+    // Fill transaction with our data and also sign\n+    bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n+    bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n+    bool finalize = request.params[4].isNull() ? true : request.params[4].get_bool();\n+    bool complete = true;\n+\n+    if (sign) EnsureWalletIsUnlocked(*pwallet);\n+\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs, nullptr, finalize)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+},\n+    };\n+}\n+\n+RPCHelpMan walletcreatefundedpsbt()\n+{\n+    return RPCHelpMan{\"walletcreatefundedpsbt\",\n+                \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n+                \"Implements the Creator and Updater roles.\\n\"\n+                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n+                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\",\n+                {\n+                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. See add_inputs option.\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'locktime' and 'options.replaceable' arguments\"}, \"The sequence number\"},\n+                                },\n+                            },\n+                        },\n+                        },\n+                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n+                            \"accepted as second parameter.\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                                },\n+                                },\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                                },\n+                            },\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                        Cat<std::vector<RPCArg>>(\n+                        {\n+                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n+                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n+                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n+                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n+                            {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n+                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n+                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only\"},\n+                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n+                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The outputs to subtract the fee from.\\n\"\n+                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                                                          \"If no outputs are specified here, the sender pays the fee.\",\n+                                {\n+                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                                },\n+                            },\n+                        },\n+                        FundTxDoc()),\n+                        \"options\"},\n+                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The resulting raw transaction (base64-encoded string)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n+                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n+                    }\n+                                },\n+                                RPCExamples{\n+                            \"\\nCreate a transaction with no inputs\\n\"\n+                            + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n+                                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    CWallet& wallet{*pwallet};\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n+\n+    RPCTypeCheck(request.params, {\n+        UniValue::VARR,\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VOBJ,\n+        UniValue::VBOOL\n+        }, true\n+    );\n+\n+    CAmount fee;\n+    int change_position;\n+    bool rbf{wallet.m_signal_rbf};\n+    const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n+    if (!replaceable_arg.isNull()) {\n+        RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n+        rbf = replaceable_arg.isTrue();\n+    }\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n+    CCoinControl coin_control;\n+    // Automatically select coins, unless at least one is manually selected. Can\n+    // be overridden by options.add_inputs.\n+    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // Fill transaction with out data but don't sign\n+    bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n+    bool complete = true;\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, 1, false, bip32derivs)};\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    result.pushKV(\"fee\", ValueFromAmount(fee));\n+    result.pushKV(\"changepos\", change_position);\n+    return result;\n+},\n+    };\n+}"
      },
      {
        "sha": "c02dc248605f1a2a4dec97a2a0ba2df6a5a59bfb",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1355,
        "changes": 1366,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b38d62b98e5a3c372938b6751aab68cfb7a13/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f60b38d62b98e5a3c372938b6751aab68cfb7a13",
        "patch": "@@ -11,27 +11,19 @@\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n-#include <policy/policy.h>\n #include <policy/rbf.h>\n-#include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n #include <script/sign.h>\n-#include <util/fees.h>\n #include <util/string.h>\n #include <util/system.h>\n #include <util/translation.h>\n-#include <util/url.h>\n-#include <util/vector.h>\n #include <wallet/coincontrol.h>\n-#include <wallet/context.h>\n-#include <wallet/feebumper.h>\n #include <wallet/load.h>\n #include <wallet/receive.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/rpc/util.h>\n-#include <wallet/spend.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -52,342 +44,6 @@ bool HaveKey(const SigningProvider& wallet, const CKey& key)\n     return wallet.HaveKey(key.GetPubKey().GetID()) || wallet.HaveKey(key2.GetPubKey().GetID());\n }\n \n-/**\n- * Update coin control with fee estimation based on the given parameters\n- *\n- * @param[in]     wallet            Wallet reference\n- * @param[in,out] cc                Coin control to be updated\n- * @param[in]     conf_target       UniValue integer; confirmation target in blocks, values between 1 and 1008 are valid per policy/fees.h;\n- * @param[in]     estimate_mode     UniValue string; fee estimation mode, valid values are \"unset\", \"economical\" or \"conservative\";\n- * @param[in]     fee_rate          UniValue real; fee rate in sat/vB;\n- *                                      if present, both conf_target and estimate_mode must either be null, or \"unset\"\n- * @param[in]     override_min_fee  bool; whether to set fOverrideFeeRate to true to disable minimum fee rate checks and instead\n- *                                      verify only that fee_rate is greater than 0\n- * @throws a JSONRPCError if conf_target, estimate_mode, or fee_rate contain invalid values or are in conflict\n- */\n-static void SetFeeEstimateMode(const CWallet& wallet, CCoinControl& cc, const UniValue& conf_target, const UniValue& estimate_mode, const UniValue& fee_rate, bool override_min_fee)\n-{\n-    if (!fee_rate.isNull()) {\n-        if (!conf_target.isNull()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-        }\n-        if (!estimate_mode.isNull() && estimate_mode.get_str() != \"unset\") {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n-        }\n-        // Fee rates in sat/vB cannot represent more than 3 significant digits.\n-        cc.m_feerate = CFeeRate{AmountFromValue(fee_rate, /* decimals */ 3)};\n-        if (override_min_fee) cc.fOverrideFeeRate = true;\n-        // Default RBF to true for explicit fee_rate, if unset.\n-        if (!cc.m_signal_bip125_rbf) cc.m_signal_bip125_rbf = true;\n-        return;\n-    }\n-    if (!estimate_mode.isNull() && !FeeModeFromString(estimate_mode.get_str(), cc.m_fee_mode)) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, InvalidEstimateModeErrorMessage());\n-    }\n-    if (!conf_target.isNull()) {\n-        cc.m_confirm_target = ParseConfirmTarget(conf_target, wallet.chain().estimateMaxBlocks());\n-    }\n-}\n-\n-void ParseRecipients(const UniValue& address_amounts, const UniValue& subtract_fee_outputs, std::vector<CRecipient> &recipients) {\n-    std::set<CTxDestination> destinations;\n-    int i = 0;\n-    for (const std::string& address: address_amounts.getKeys()) {\n-        CTxDestination dest = DecodeDestination(address);\n-        if (!IsValidDestination(dest)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + address);\n-        }\n-\n-        if (destinations.count(dest)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, std::string(\"Invalid parameter, duplicated address: \") + address);\n-        }\n-        destinations.insert(dest);\n-\n-        CScript script_pub_key = GetScriptForDestination(dest);\n-        CAmount amount = AmountFromValue(address_amounts[i++]);\n-\n-        bool subtract_fee = false;\n-        for (unsigned int idx = 0; idx < subtract_fee_outputs.size(); idx++) {\n-            const UniValue& addr = subtract_fee_outputs[idx];\n-            if (addr.get_str() == address) {\n-                subtract_fee = true;\n-            }\n-        }\n-\n-        CRecipient recipient = {script_pub_key, amount, subtract_fee};\n-        recipients.push_back(recipient);\n-    }\n-}\n-\n-UniValue SendMoney(CWallet& wallet, const CCoinControl &coin_control, std::vector<CRecipient> &recipients, mapValue_t map_value, bool verbose)\n-{\n-    EnsureWalletIsUnlocked(wallet);\n-\n-    // This function is only used by sendtoaddress and sendmany.\n-    // This should always try to sign, if we don't have private keys, don't try to do anything here.\n-    if (wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n-    // Shuffle recipient list\n-    std::shuffle(recipients.begin(), recipients.end(), FastRandomContext());\n-\n-    // Send\n-    CAmount nFeeRequired = 0;\n-    int nChangePosRet = -1;\n-    bilingual_str error;\n-    CTransactionRef tx;\n-    FeeCalculation fee_calc_out;\n-    const bool fCreated = CreateTransaction(wallet, recipients, tx, nFeeRequired, nChangePosRet, error, coin_control, fee_calc_out, true);\n-    if (!fCreated) {\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n-    }\n-    wallet.CommitTransaction(tx, std::move(map_value), {} /* orderForm */);\n-    if (verbose) {\n-        UniValue entry(UniValue::VOBJ);\n-        entry.pushKV(\"txid\", tx->GetHash().GetHex());\n-        entry.pushKV(\"fee_reason\", StringForFeeReason(fee_calc_out.reason));\n-        return entry;\n-    }\n-    return tx->GetHash().GetHex();\n-}\n-\n-static RPCHelpMan sendtoaddress()\n-{\n-    return RPCHelpMan{\"sendtoaddress\",\n-                \"\\nSend an amount to a given address.\" +\n-        HELP_REQUIRING_PASSPHRASE,\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to send to.\"},\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\"},\n-                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment used to store what the transaction is for.\\n\"\n-                                         \"This is not part of the transaction, just kept in your wallet.\"},\n-                    {\"comment_to\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n-                                         \"to which you're sending the transaction. This is not part of the \\n\"\n-                                         \"transaction, just kept in your wallet.\"},\n-                    {\"subtractfeefromamount\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"The fee will be deducted from the amount being sent.\\n\"\n-                                         \"The recipient will receive less bitcoins than you enter in the amount field.\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                    {\"avoid_reuse\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\\n\"\n-                                         \"dirty if they have previously been used in a transaction. If true, this also activates avoidpartialspends, grouping outputs by their addresses.\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra information about the transaction.\"},\n-                },\n-                {\n-                    RPCResult{\"if verbose is not set or set to false\",\n-                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"\n-                    },\n-                    RPCResult{\"if verbose is set to true\",\n-                        RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id.\"},\n-                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n-                        },\n-                    },\n-                },\n-                RPCExamples{\n-                    \"\\nSend 0.1 BTC\\n\"\n-                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1\") +\n-                    \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode using positional arguments\\n\"\n-                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"donation\\\" \\\"sean's outpost\\\" false true 6 economical\") +\n-                    \"\\nSend 0.1 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB, subtract fee from amount, BIP125-replaceable, using positional arguments\\n\"\n-                    + HelpExampleCli(\"sendtoaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" 0.1 \\\"drinks\\\" \\\"room77\\\" true true null \\\"unset\\\" null 1.1\") +\n-                    \"\\nSend 0.2 BTC with a confirmation target of 6 blocks in economical fee estimate mode using named arguments\\n\"\n-                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.2 conf_target=6 estimate_mode=\\\"economical\\\"\") +\n-                    \"\\nSend 0.5 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n-                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25\")\n-                    + HelpExampleCli(\"-named sendtoaddress\", \"address=\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" amount=0.5 fee_rate=25 subtractfeefromamount=false replaceable=true avoid_reuse=true comment=\\\"2 pizzas\\\" comment_to=\\\"jeremy\\\" verbose=true\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    // Wallet comments\n-    mapValue_t mapValue;\n-    if (!request.params[2].isNull() && !request.params[2].get_str().empty())\n-        mapValue[\"comment\"] = request.params[2].get_str();\n-    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n-        mapValue[\"to\"] = request.params[3].get_str();\n-\n-    bool fSubtractFeeFromAmount = false;\n-    if (!request.params[4].isNull()) {\n-        fSubtractFeeFromAmount = request.params[4].get_bool();\n-    }\n-\n-    CCoinControl coin_control;\n-    if (!request.params[5].isNull()) {\n-        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n-    }\n-\n-    coin_control.m_avoid_address_reuse = GetAvoidReuseFlag(*pwallet, request.params[8]);\n-    // We also enable partial spend avoidance if reuse avoidance is set.\n-    coin_control.m_avoid_partial_spends |= coin_control.m_avoid_address_reuse;\n-\n-    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[9], /* override_min_fee */ false);\n-\n-    EnsureWalletIsUnlocked(*pwallet);\n-\n-    UniValue address_amounts(UniValue::VOBJ);\n-    const std::string address = request.params[0].get_str();\n-    address_amounts.pushKV(address, request.params[1]);\n-    UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (fSubtractFeeFromAmount) {\n-        subtractFeeFromAmount.push_back(address);\n-    }\n-\n-    std::vector<CRecipient> recipients;\n-    ParseRecipients(address_amounts, subtractFeeFromAmount, recipients);\n-    const bool verbose{request.params[10].isNull() ? false : request.params[10].get_bool()};\n-\n-    return SendMoney(*pwallet, coin_control, recipients, mapValue, verbose);\n-},\n-    };\n-}\n-\n-static RPCHelpMan sendmany()\n-{\n-    return RPCHelpMan{\"sendmany\",\n-                \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n-        HELP_REQUIRING_PASSPHRASE,\n-                {\n-                    {\"dummy\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Must be set to \\\"\\\" for backwards compatibility.\", \"\\\"\\\"\"},\n-                    {\"amounts\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::NO, \"The addresses and amounts\",\n-                        {\n-                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The bitcoin address is the key, the numeric amount (can be string) in \" + CURRENCY_UNIT + \" is the value\"},\n-                        },\n-                    },\n-                    {\"minconf\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"Ignored dummy value\"},\n-                    {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment\"},\n-                    {\"subtractfeefrom\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The addresses.\\n\"\n-                                       \"The fee will be equally deducted from the amount of each selected address.\\n\"\n-                                       \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                                       \"If no addresses are specified here, the sender pays the fee.\",\n-                        {\n-                            {\"address\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Subtract fee from this address\"},\n-                        },\n-                    },\n-                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Allow this transaction to be replaced by a transaction with higher fees via BIP 125\"},\n-                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"verbose\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If true, return extra infomration about the transaction.\"},\n-                },\n-                {\n-                    RPCResult{\"if verbose is not set or set to false\",\n-                        RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n-                \"the number of addresses.\"\n-                    },\n-                    RPCResult{\"if verbose is set to true\",\n-                        RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of\\n\"\n-                \"the number of addresses.\"},\n-                            {RPCResult::Type::STR, \"fee_reason\", \"The transaction fee reason.\"}\n-                        },\n-                    },\n-                },\n-                RPCExamples{\n-            \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\"\") +\n-            \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n-            \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\":0.01,\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\\\\\",\\\\\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\\\\\"]\\\"\") +\n-            \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", {\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\":0.01,\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\":0.02}, 6, \\\"testing\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"\\\"\");\n-    }\n-    UniValue sendTo = request.params[1].get_obj();\n-\n-    mapValue_t mapValue;\n-    if (!request.params[3].isNull() && !request.params[3].get_str().empty())\n-        mapValue[\"comment\"] = request.params[3].get_str();\n-\n-    UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (!request.params[4].isNull())\n-        subtractFeeFromAmount = request.params[4].get_array();\n-\n-    CCoinControl coin_control;\n-    if (!request.params[5].isNull()) {\n-        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n-    }\n-\n-    SetFeeEstimateMode(*pwallet, coin_control, /* conf_target */ request.params[6], /* estimate_mode */ request.params[7], /* fee_rate */ request.params[8], /* override_min_fee */ false);\n-\n-    std::vector<CRecipient> recipients;\n-    ParseRecipients(sendTo, subtractFeeFromAmount, recipients);\n-    const bool verbose{request.params[9].isNull() ? false : request.params[9].get_bool()};\n-\n-    return SendMoney(*pwallet, coin_control, recipients, std::move(mapValue), verbose);\n-},\n-    };\n-}\n-\n-static RPCHelpMan settxfee()\n-{\n-    return RPCHelpMan{\"settxfee\",\n-                \"\\nSet the transaction fee rate in \" + CURRENCY_UNIT + \"/kvB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n-                \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n-                {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::BOOL, \"\", \"Returns true if successful\"\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"settxfee\", \"0.00001\")\n-            + HelpExampleRpc(\"settxfee\", \"0.00001\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    CAmount nAmount = AmountFromValue(request.params[0]);\n-    CFeeRate tx_fee_rate(nAmount, 1000);\n-    CFeeRate max_tx_fee_rate(pwallet->m_default_max_tx_fee, 1000);\n-    if (tx_fee_rate == CFeeRate(0)) {\n-        // automatic selection\n-    } else if (tx_fee_rate < pwallet->chain().relayMinFee()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than min relay tx fee (%s)\", pwallet->chain().relayMinFee().ToString()));\n-    } else if (tx_fee_rate < pwallet->m_min_fee) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be less than wallet min fee (%s)\", pwallet->m_min_fee.ToString()));\n-    } else if (tx_fee_rate > max_tx_fee_rate) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"txfee cannot be more than wallet max tx fee (%s)\", max_tx_fee_rate.ToString()));\n-    }\n-\n-    pwallet->m_pay_tx_fee = tx_fee_rate;\n-    return true;\n-},\n-    };\n-}\n-\n static RPCHelpMan getwalletinfo()\n {\n     return RPCHelpMan{\"getwalletinfo\",\n@@ -801,807 +457,6 @@ static RPCHelpMan unloadwallet()\n     };\n }\n \n-// Only includes key documentation where the key is snake_case in all RPC methods. MixedCase keys can be added later.\n-static std::vector<RPCArg> FundTxDoc()\n-{\n-    return {\n-        {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-        {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-        {\"replaceable\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"wallet default\"}, \"Marks this transaction as BIP125-replaceable.\\n\"\n-            \"Allows this transaction to be replaced by a transaction with higher fees\"},\n-        {\"solving_data\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"Keys and scripts needed for producing a final transaction with a dummy signature.\\n\"\n-            \"Used for fee estimation during coin selection.\",\n-         {\n-             {\"pubkeys\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Public keys involved in this transaction.\",\n-             {\n-                 {\"pubkey\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A public key\"},\n-             }},\n-             {\"scripts\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Scripts involved in this transaction.\",\n-             {\n-                 {\"script\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"A script\"},\n-             }},\n-             {\"descriptors\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Descriptors that provide solving data for this transaction.\",\n-             {\n-                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"A descriptor\"},\n-             }},\n-         }},\n-    };\n-}\n-\n-void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl, bool override_min_fee)\n-{\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n-\n-    change_position = -1;\n-    bool lockUnspents = false;\n-    UniValue subtractFeeFromOutputs;\n-    std::set<int> setSubtractFeeFromOutputs;\n-\n-    if (!options.isNull()) {\n-      if (options.type() == UniValue::VBOOL) {\n-        // backward compatibility bool only fallback\n-        coinControl.fAllowWatchOnly = options.get_bool();\n-      }\n-      else {\n-        RPCTypeCheckArgument(options, UniValue::VOBJ);\n-        RPCTypeCheckObj(options,\n-            {\n-                {\"add_inputs\", UniValueType(UniValue::VBOOL)},\n-                {\"include_unsafe\", UniValueType(UniValue::VBOOL)},\n-                {\"add_to_wallet\", UniValueType(UniValue::VBOOL)},\n-                {\"changeAddress\", UniValueType(UniValue::VSTR)},\n-                {\"change_address\", UniValueType(UniValue::VSTR)},\n-                {\"changePosition\", UniValueType(UniValue::VNUM)},\n-                {\"change_position\", UniValueType(UniValue::VNUM)},\n-                {\"change_type\", UniValueType(UniValue::VSTR)},\n-                {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n-                {\"include_watching\", UniValueType(UniValue::VBOOL)},\n-                {\"inputs\", UniValueType(UniValue::VARR)},\n-                {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"lock_unspents\", UniValueType(UniValue::VBOOL)},\n-                {\"locktime\", UniValueType(UniValue::VNUM)},\n-                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n-                {\"feeRate\", UniValueType()}, // will be checked by AmountFromValue() below\n-                {\"psbt\", UniValueType(UniValue::VBOOL)},\n-                {\"solving_data\", UniValueType(UniValue::VOBJ)},\n-                {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n-                {\"subtract_fee_from_outputs\", UniValueType(UniValue::VARR)},\n-                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n-                {\"conf_target\", UniValueType(UniValue::VNUM)},\n-                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n-            },\n-            true, true);\n-\n-        if (options.exists(\"add_inputs\") ) {\n-            coinControl.m_add_inputs = options[\"add_inputs\"].get_bool();\n-        }\n-\n-        if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n-            const std::string change_address_str = (options.exists(\"change_address\") ? options[\"change_address\"] : options[\"changeAddress\"]).get_str();\n-            CTxDestination dest = DecodeDestination(change_address_str);\n-\n-            if (!IsValidDestination(dest)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Change address must be a valid bitcoin address\");\n-            }\n-\n-            coinControl.destChange = dest;\n-        }\n-\n-        if (options.exists(\"changePosition\") || options.exists(\"change_position\")) {\n-            change_position = (options.exists(\"change_position\") ? options[\"change_position\"] : options[\"changePosition\"]).get_int();\n-        }\n-\n-        if (options.exists(\"change_type\")) {\n-            if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both change address and address type options\");\n-            }\n-            if (std::optional<OutputType> parsed = ParseOutputType(options[\"change_type\"].get_str())) {\n-                coinControl.m_change_type.emplace(parsed.value());\n-            } else {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n-            }\n-        }\n-\n-        const UniValue include_watching_option = options.exists(\"include_watching\") ? options[\"include_watching\"] : options[\"includeWatching\"];\n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(include_watching_option, wallet);\n-\n-        if (options.exists(\"lockUnspents\") || options.exists(\"lock_unspents\")) {\n-            lockUnspents = (options.exists(\"lock_unspents\") ? options[\"lock_unspents\"] : options[\"lockUnspents\"]).get_bool();\n-        }\n-\n-        if (options.exists(\"include_unsafe\")) {\n-            coinControl.m_include_unsafe_inputs = options[\"include_unsafe\"].get_bool();\n-        }\n-\n-        if (options.exists(\"feeRate\")) {\n-            if (options.exists(\"fee_rate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both fee_rate (\" + CURRENCY_ATOM + \"/vB) and feeRate (\" + CURRENCY_UNIT + \"/kvB)\");\n-            }\n-            if (options.exists(\"conf_target\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both conf_target and feeRate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-            }\n-            if (options.exists(\"estimate_mode\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n-            }\n-            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n-            coinControl.fOverrideFeeRate = true;\n-        }\n-\n-        if (options.exists(\"subtractFeeFromOutputs\") || options.exists(\"subtract_fee_from_outputs\") )\n-            subtractFeeFromOutputs = (options.exists(\"subtract_fee_from_outputs\") ? options[\"subtract_fee_from_outputs\"] : options[\"subtractFeeFromOutputs\"]).get_array();\n-\n-        if (options.exists(\"replaceable\")) {\n-            coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n-        }\n-        SetFeeEstimateMode(wallet, coinControl, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], override_min_fee);\n-      }\n-    } else {\n-        // if options is null and not a bool\n-        coinControl.fAllowWatchOnly = ParseIncludeWatchonly(NullUniValue, wallet);\n-    }\n-\n-    if (options.exists(\"solving_data\")) {\n-        const UniValue solving_data = options[\"solving_data\"].get_obj();\n-        if (solving_data.exists(\"pubkeys\")) {\n-            for (const UniValue& pk_univ : solving_data[\"pubkeys\"].get_array().getValues()) {\n-                const std::string& pk_str = pk_univ.get_str();\n-                if (!IsHex(pk_str)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", pk_str));\n-                }\n-                const std::vector<unsigned char> data(ParseHex(pk_str));\n-                const CPubKey pubkey(data.begin(), data.end());\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not a valid public key\", pk_str));\n-                }\n-                coinControl.m_external_provider.pubkeys.emplace(pubkey.GetID(), pubkey);\n-                // Add witness script for pubkeys\n-                const CScript wit_script = GetScriptForDestination(WitnessV0KeyHash(pubkey));\n-                coinControl.m_external_provider.scripts.emplace(CScriptID(wit_script), wit_script);\n-            }\n-        }\n-\n-        if (solving_data.exists(\"scripts\")) {\n-            for (const UniValue& script_univ : solving_data[\"scripts\"].get_array().getValues()) {\n-                const std::string& script_str = script_univ.get_str();\n-                if (!IsHex(script_str)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"'%s' is not hex\", script_str));\n-                }\n-                std::vector<unsigned char> script_data(ParseHex(script_str));\n-                const CScript script(script_data.begin(), script_data.end());\n-                coinControl.m_external_provider.scripts.emplace(CScriptID(script), script);\n-            }\n-        }\n-\n-        if (solving_data.exists(\"descriptors\")) {\n-            for (const UniValue& desc_univ : solving_data[\"descriptors\"].get_array().getValues()) {\n-                const std::string& desc_str  = desc_univ.get_str();\n-                FlatSigningProvider desc_out;\n-                std::string error;\n-                std::vector<CScript> scripts_temp;\n-                std::unique_ptr<Descriptor> desc = Parse(desc_str, desc_out, error, true);\n-                if (!desc) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Unable to parse descriptor '%s': %s\", desc_str, error));\n-                }\n-                desc->Expand(0, desc_out, scripts_temp, desc_out);\n-                coinControl.m_external_provider = Merge(coinControl.m_external_provider, desc_out);\n-            }\n-        }\n-    }\n-\n-    if (tx.vout.size() == 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"TX must have at least one output\");\n-\n-    if (change_position != -1 && (change_position < 0 || (unsigned int)change_position > tx.vout.size()))\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n-\n-    for (unsigned int idx = 0; idx < subtractFeeFromOutputs.size(); idx++) {\n-        int pos = subtractFeeFromOutputs[idx].get_int();\n-        if (setSubtractFeeFromOutputs.count(pos))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, duplicated position: %d\", pos));\n-        if (pos < 0)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, negative position: %d\", pos));\n-        if (pos >= int(tx.vout.size()))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, position too large: %d\", pos));\n-        setSubtractFeeFromOutputs.insert(pos);\n-    }\n-\n-    // Fetch specified UTXOs from the UTXO set to get the scriptPubKeys and values of the outputs being selected\n-    // and to match with the given solving_data. Only used for non-wallet outputs.\n-    std::map<COutPoint, Coin> coins;\n-    for (const CTxIn& txin : tx.vin) {\n-        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n-    }\n-    wallet.chain().findCoins(coins);\n-    for (const auto& coin : coins) {\n-        if (!coin.second.out.IsNull()) {\n-            coinControl.SelectExternal(coin.first, coin.second.out);\n-        }\n-    }\n-\n-    bilingual_str error;\n-\n-    if (!FundTransaction(wallet, tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n-    }\n-}\n-\n-static RPCHelpMan fundrawtransaction()\n-{\n-    return RPCHelpMan{\"fundrawtransaction\",\n-                \"\\nIf the transaction has no inputs, they will be automatically selected to meet its out value.\\n\"\n-                \"It will add at most one change output to the outputs.\\n\"\n-                \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n-                \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n-                \"The inputs added will not be signed, use signrawtransactionwithkey\\n\"\n-                \"or signrawtransactionwithwallet for that.\\n\"\n-                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n-                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\"\n-                \"Note that all inputs selected must be of standard form and P2SH scripts must be\\n\"\n-                \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n-                \"You can see whether this is the case by checking the \\\"solvable\\\" field in the listunspent output.\\n\"\n-                \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\",\n-                {\n-                    {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\",\n-                        Cat<std::vector<RPCArg>>(\n-                        {\n-                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"For a transaction with existing inputs, automatically include more if they are not enough.\"},\n-                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n-                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n-                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"changeAddress\", RPCArg::Type::STR, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n-                                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n-                                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n-                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The integers.\\n\"\n-                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n-                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                                                          \"If no outputs are specified here, the sender pays the fee.\",\n-                                {\n-                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n-                                },\n-                            },\n-                        },\n-                        FundTxDoc()),\n-                        \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"depends on heuristic tests\"}, \"Whether the transaction hex is a serialized witness transaction.\\n\"\n-                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n-                        \"If true, only witness deserialization will be tried.\\n\"\n-                        \"If false, only non-witness deserialization will be tried.\\n\"\n-                        \"This boolean should reflect whether the transaction has inputs\\n\"\n-                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n-                    },\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR_HEX, \"hex\", \"The resulting raw transaction (hex-encoded string)\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n-                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n-                    }\n-                                },\n-                                RPCExamples{\n-                            \"\\nCreate a transaction with no inputs\\n\"\n-                            + HelpExampleCli(\"createrawtransaction\", \"\\\"[]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n-                            \"\\nAdd sufficient unsigned inputs to meet the output value\\n\"\n-                            + HelpExampleCli(\"fundrawtransaction\", \"\\\"rawtransactionhex\\\"\") +\n-                            \"\\nSign the transaction\\n\"\n-                            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"fundedtransactionhex\\\"\") +\n-                            \"\\nSend the transaction\\n\"\n-                            + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n-                                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n-\n-    // parse hex string from parameter\n-    CMutableTransaction tx;\n-    bool try_witness = request.params[2].isNull() ? true : request.params[2].get_bool();\n-    bool try_no_witness = request.params[2].isNull() ? true : !request.params[2].get_bool();\n-    if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-    }\n-\n-    CAmount fee;\n-    int change_position;\n-    CCoinControl coin_control;\n-    // Automatically select (additional) coins. Can be overridden by options.add_inputs.\n-    coin_control.m_add_inputs = true;\n-    FundTransaction(*pwallet, tx, fee, change_position, request.params[1], coin_control, /* override_min_fee */ true);\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"hex\", EncodeHexTx(CTransaction(tx)));\n-    result.pushKV(\"fee\", ValueFromAmount(fee));\n-    result.pushKV(\"changepos\", change_position);\n-\n-    return result;\n-},\n-    };\n-}\n-\n-RPCHelpMan signrawtransactionwithwallet()\n-{\n-    return RPCHelpMan{\"signrawtransactionwithwallet\",\n-                \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-                \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-                \"this transaction depends on but may not yet be in the block chain.\" +\n-        HELP_REQUIRING_PASSPHRASE,\n-                {\n-                    {\"hexstring\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"prevtxs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"The previous dependent transaction outputs\",\n-                        {\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n-                                {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                    {\"scriptPubKey\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"script key\"},\n-                                    {\"redeemScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2SH) redeem script\"},\n-                                    {\"witnessScript\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"(required for P2WSH or P2SH-P2WSH) witness script\"},\n-                                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::OMITTED, \"(required for Segwit inputs) the amount spent\"},\n-                                },\n-                            },\n-                        },\n-                    },\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type. Must be one of\\n\"\n-            \"       \\\"DEFAULT\\\"\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n-                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n-                        {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n-                        {\n-                            {RPCResult::Type::OBJ, \"\", \"\",\n-                            {\n-                                {RPCResult::Type::STR_HEX, \"txid\", \"The hash of the referenced, previous transaction\"},\n-                                {RPCResult::Type::NUM, \"vout\", \"The index of the output to spent and used as input\"},\n-                                {RPCResult::Type::ARR, \"witness\", \"\",\n-                                {\n-                                    {RPCResult::Type::STR_HEX, \"witness\", \"\"},\n-                                }},\n-                                {RPCResult::Type::STR_HEX, \"scriptSig\", \"The hex-encoded signature script\"},\n-                                {RPCResult::Type::NUM, \"sequence\", \"Script sequence number\"},\n-                                {RPCResult::Type::STR, \"error\", \"Verification or signing error related to the input\"},\n-                            }},\n-                        }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-\n-    // Sign the transaction\n-    LOCK(pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(*pwallet);\n-\n-    // Fetch previous transactions (inputs):\n-    std::map<COutPoint, Coin> coins;\n-    for (const CTxIn& txin : mtx.vin) {\n-        coins[txin.prevout]; // Create empty map entry keyed by prevout.\n-    }\n-    pwallet->chain().findCoins(coins);\n-\n-    // Parse the prevtxs array\n-    ParsePrevouts(request.params[1], nullptr, coins);\n-\n-    int nHashType = ParseSighashString(request.params[2]);\n-\n-    // Script verification errors\n-    std::map<int, bilingual_str> input_errors;\n-\n-    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n-    UniValue result(UniValue::VOBJ);\n-    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n-    return result;\n-},\n-    };\n-}\n-\n-static RPCHelpMan bumpfee_helper(std::string method_name)\n-{\n-    const bool want_psbt = method_name == \"psbtbumpfee\";\n-    const std::string incremental_fee{CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE).ToString(FeeEstimateMode::SAT_VB)};\n-\n-    return RPCHelpMan{method_name,\n-        \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n-        + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n-        \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-        \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary.\\n\"\n-        \"It may add a new change output if one does not already exist.\\n\"\n-        \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n-        \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-        \"By default, the new fee will be calculated automatically using the estimatesmartfee RPC.\\n\"\n-        \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-        \"Alternatively, the user can specify a fee rate in \" + CURRENCY_ATOM + \"/vB for the new transaction.\\n\"\n-        \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-        \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n-        \"* WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB. *\\n\",\n-        {\n-            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n-            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n-                {\n-                    {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\\n\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"},\n-                             \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least \" + incremental_fee + \" higher than the current transaction fee rate.\\n\"\n-                             \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n-                    {\"replaceable\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Whether the new transaction should still be\\n\"\n-                             \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n-                             \"be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n-                             \"original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n-                             \"so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-                             \"still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-                             \"are replaceable).\\n\"},\n-                    {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                             \"\\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                },\n-                \"options\"},\n-        },\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\", Cat(\n-                want_psbt ?\n-                std::vector<RPCResult>{{RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\"}} :\n-                std::vector<RPCResult>{{RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction.\"}},\n-            {\n-                {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n-                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n-                {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n-                {\n-                    {RPCResult::Type::STR, \"\", \"\"},\n-                }},\n-            })\n-        },\n-        RPCExamples{\n-    \"\\nBump the fee, get the new transaction\\'s \" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n-            HelpExampleCli(method_name, \"<txid>\")\n-        },\n-        [want_psbt](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !want_psbt) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"bumpfee is not available with wallets that have private keys disabled. Use psbtbumpfee instead.\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n-    uint256 hash(ParseHashV(request.params[0], \"txid\"));\n-\n-    CCoinControl coin_control;\n-    coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n-    // optional parameters\n-    coin_control.m_signal_bip125_rbf = true;\n-\n-    if (!request.params[1].isNull()) {\n-        UniValue options = request.params[1];\n-        RPCTypeCheckObj(options,\n-            {\n-                {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"conf_target\", UniValueType(UniValue::VNUM)},\n-                {\"fee_rate\", UniValueType()}, // will be checked by AmountFromValue() in SetFeeEstimateMode()\n-                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n-                {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n-            },\n-            true, true);\n-\n-        if (options.exists(\"confTarget\") && options.exists(\"conf_target\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and conf_target options should not both be set. Use conf_target (confTarget is deprecated).\");\n-        }\n-\n-        auto conf_target = options.exists(\"confTarget\") ? options[\"confTarget\"] : options[\"conf_target\"];\n-\n-        if (options.exists(\"replaceable\")) {\n-            coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n-        }\n-        SetFeeEstimateMode(*pwallet, coin_control, conf_target, options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n-    }\n-\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n-\n-    LOCK(pwallet->cs_wallet);\n-\n-    EnsureWalletIsUnlocked(*pwallet);\n-\n-\n-    std::vector<bilingual_str> errors;\n-    CAmount old_fee;\n-    CAmount new_fee;\n-    CMutableTransaction mtx;\n-    feebumper::Result res;\n-    // Targeting feerate bump.\n-    res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n-    if (res != feebumper::Result::OK) {\n-        switch(res) {\n-            case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0].original);\n-                break;\n-            case feebumper::Result::INVALID_REQUEST:\n-                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0].original);\n-                break;\n-            case feebumper::Result::INVALID_PARAMETER:\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0].original);\n-                break;\n-            case feebumper::Result::WALLET_ERROR:\n-                throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n-                break;\n-            default:\n-                throw JSONRPCError(RPC_MISC_ERROR, errors[0].original);\n-                break;\n-        }\n-    }\n-\n-    UniValue result(UniValue::VOBJ);\n-\n-    // For bumpfee, return the new transaction id.\n-    // For psbtbumpfee, return the base64-encoded unsigned PSBT of the new transaction.\n-    if (!want_psbt) {\n-        if (!feebumper::SignTransaction(*pwallet, mtx)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n-        }\n-\n-        uint256 txid;\n-        if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n-        }\n-\n-        result.pushKV(\"txid\", txid.GetHex());\n-    } else {\n-        PartiallySignedTransaction psbtx(mtx);\n-        bool complete = false;\n-        const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false /* sign */, true /* bip32derivs */);\n-        CHECK_NONFATAL(err == TransactionError::OK);\n-        CHECK_NONFATAL(!complete);\n-        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-        ssTx << psbtx;\n-        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n-    }\n-\n-    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n-    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n-    UniValue result_errors(UniValue::VARR);\n-    for (const bilingual_str& error : errors) {\n-        result_errors.push_back(error.original);\n-    }\n-    result.pushKV(\"errors\", result_errors);\n-\n-    return result;\n-},\n-    };\n-}\n-\n-static RPCHelpMan bumpfee() { return bumpfee_helper(\"bumpfee\"); }\n-static RPCHelpMan psbtbumpfee() { return bumpfee_helper(\"psbtbumpfee\"); }\n-\n-static RPCHelpMan send()\n-{\n-    return RPCHelpMan{\"send\",\n-        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n-        \"\\nSend a transaction.\\n\",\n-        {\n-            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n-                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n-                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n-                {\n-                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n-                        {\n-                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n-                        },\n-                        },\n-                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n-                        {\n-                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n-                        },\n-                    },\n-                },\n-            },\n-            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n-            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n-                Cat<std::vector<RPCArg>>(\n-                {\n-                    {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n-                    {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n-                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n-                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n-                    {\"change_address\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n-                    {\"change_position\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n-                    {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n-                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n-                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Specify inputs instead of adding them automatically. A JSON array of JSON objects\",\n-                        {\n-                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n-                        },\n-                    },\n-                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n-                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n-                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Outputs to subtract the fee from, specified as integer indices.\\n\"\n-                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n-                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                    \"If no outputs are specified here, the sender pays the fee.\",\n-                        {\n-                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n-                        },\n-                    },\n-                },\n-                FundTxDoc()),\n-                \"options\"},\n-        },\n-        RPCResult{\n-            RPCResult::Type::OBJ, \"\", \"\",\n-                {\n-                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n-                    {RPCResult::Type::STR_HEX, \"txid\", /* optional */ true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n-                    {RPCResult::Type::STR_HEX, \"hex\", /* optional */ true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n-                    {RPCResult::Type::STR, \"psbt\", /* optional */ true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n-                }\n-        },\n-        RPCExamples{\"\"\n-        \"\\nSend 0.1 BTC with a confirmation target of 6 blocks in economical fee estimate mode\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 6 economical\\n\") +\n-        \"Send 0.2 BTC with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" 1.1\\n\") +\n-        \"Send 0.2 BTC with a fee rate of 1 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.2}' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1}'\\n\") +\n-        \"Send 0.3 BTC with a fee rate of 25 \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n-        + HelpExampleCli(\"-named send\", \"outputs='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.3}' fee_rate=25\\n\") +\n-        \"Create a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\"\n-        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n-        },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-        {\n-            RPCTypeCheck(request.params, {\n-                UniValueType(), // outputs (ARR or OBJ, checked later)\n-                UniValue::VNUM, // conf_target\n-                UniValue::VSTR, // estimate_mode\n-                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n-                UniValue::VOBJ, // options\n-                }, true\n-            );\n-\n-            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-            if (!pwallet) return NullUniValue;\n-\n-            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n-\n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n-\n-            CAmount fee;\n-            int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n-            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n-            CCoinControl coin_control;\n-            // Automatically select coins, unless at least one is manually selected. Can\n-            // be overridden by options.add_inputs.\n-            coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-            FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n-\n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n-            }\n-\n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n-\n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n-            }\n-\n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n-\n-            UniValue result(UniValue::VOBJ);\n-\n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n-            }\n-\n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n-                } else {\n-                    result.pushKV(\"hex\", hex);\n-                }\n-            }\n-            result.pushKV(\"complete\", complete);\n-\n-            return result;\n-        }\n-    };\n-}\n-\n static RPCHelpMan sethdseed()\n {\n     return RPCHelpMan{\"sethdseed\",\n@@ -1673,216 +528,6 @@ static RPCHelpMan sethdseed()\n     };\n }\n \n-static RPCHelpMan walletprocesspsbt()\n-{\n-    return RPCHelpMan{\"walletprocesspsbt\",\n-                \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n-                \"that we can sign for.\" +\n-        HELP_REQUIRING_PASSPHRASE,\n-                {\n-                    {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction base64 string\"},\n-                    {\"sign\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also sign the transaction when updating (requires wallet to be unlocked)\"},\n-                    {\"sighashtype\", RPCArg::Type::STR, RPCArg::Default{\"DEFAULT\"}, \"The signature hash type to sign with if not specified by the PSBT. Must be one of\\n\"\n-            \"       \\\"DEFAULT\\\"\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n-                    {\"finalize\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also finalize inputs if possible\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded partially signed transaction\"},\n-                        {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"walletprocesspsbt\", \"\\\"psbt\\\"\")\n-                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    const CWallet& wallet{*pwallet};\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n-\n-    RPCTypeCheck(request.params, {UniValue::VSTR});\n-\n-    // Unserialize the transaction\n-    PartiallySignedTransaction psbtx;\n-    std::string error;\n-    if (!DecodeBase64PSBT(psbtx, request.params[0].get_str(), error)) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n-    }\n-\n-    // Get the sighash type\n-    int nHashType = ParseSighashString(request.params[2]);\n-\n-    // Fill transaction with our data and also sign\n-    bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n-    bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n-    bool finalize = request.params[4].isNull() ? true : request.params[4].get_bool();\n-    bool complete = true;\n-\n-    if (sign) EnsureWalletIsUnlocked(*pwallet);\n-\n-    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs, nullptr, finalize)};\n-    if (err != TransactionError::OK) {\n-        throw JSONRPCTransactionError(err);\n-    }\n-\n-    UniValue result(UniValue::VOBJ);\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    ssTx << psbtx;\n-    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n-    result.pushKV(\"complete\", complete);\n-\n-    return result;\n-},\n-    };\n-}\n-\n-static RPCHelpMan walletcreatefundedpsbt()\n-{\n-    return RPCHelpMan{\"walletcreatefundedpsbt\",\n-                \"\\nCreates and funds a transaction in the Partially Signed Transaction format.\\n\"\n-                \"Implements the Creator and Updater roles.\\n\"\n-                \"All existing inputs must either have their previous output transaction be in the wallet\\n\"\n-                \"or be in the UTXO set. Solving data must be provided for non-wallet inputs.\\n\",\n-                {\n-                    {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. See add_inputs option.\",\n-                        {\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n-                                {\n-                                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n-                                    {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n-                                    {\"sequence\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"depends on the value of the 'locktime' and 'options.replaceable' arguments\"}, \"The sequence number\"},\n-                                },\n-                            },\n-                        },\n-                        },\n-                    {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n-                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n-                            \"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\\n\"\n-                            \"accepted as second parameter.\",\n-                        {\n-                            {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n-                                {\n-                                    {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n-                                },\n-                                },\n-                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n-                                {\n-                                    {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n-                                },\n-                            },\n-                        },\n-                    },\n-                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n-                        Cat<std::vector<RPCArg>>(\n-                        {\n-                            {\"add_inputs\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"If inputs are specified, automatically include more if they are not enough.\"},\n-                            {\"include_unsafe\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Include inputs that are not safe to spend (unconfirmed transactions from outside keys and unconfirmed replacement transactions).\\n\"\n-                                                          \"Warning: the resulting transaction may become invalid if one of the unsafe inputs disappears.\\n\"\n-                                                          \"If that happens, you will need to fund the transaction with different inputs and republish it.\"},\n-                            {\"changeAddress\", RPCArg::Type::STR_HEX, RPCArg::DefaultHint{\"pool address\"}, \"The bitcoin address to receive the change\"},\n-                            {\"changePosition\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"random\"}, \"The index of the change output\"},\n-                            {\"change_type\", RPCArg::Type::STR, RPCArg::DefaultHint{\"set by -changetype\"}, \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n-                            {\"includeWatching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only\"},\n-                            {\"lockUnspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n-                            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n-                            {\"feeRate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_UNIT + \"/kvB.\"},\n-                            {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"The outputs to subtract the fee from.\\n\"\n-                                                          \"The fee will be equally deducted from the amount of each specified output.\\n\"\n-                                                          \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n-                                                          \"If no outputs are specified here, the sender pays the fee.\",\n-                                {\n-                                    {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n-                                },\n-                            },\n-                        },\n-                        FundTxDoc()),\n-                        \"options\"},\n-                    {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n-                    {\n-                        {RPCResult::Type::STR, \"psbt\", \"The resulting raw transaction (base64-encoded string)\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\"},\n-                        {RPCResult::Type::NUM, \"changepos\", \"The position of the added change output, or -1\"},\n-                    }\n-                                },\n-                                RPCExamples{\n-                            \"\\nCreate a transaction with no inputs\\n\"\n-                            + HelpExampleCli(\"walletcreatefundedpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n-                                },\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n-    CWallet& wallet{*pwallet};\n-    // Make sure the results are valid at least up to the most recent block\n-    // the user could have gotten from another RPC command prior to now\n-    wallet.BlockUntilSyncedToCurrentChain();\n-\n-    RPCTypeCheck(request.params, {\n-        UniValue::VARR,\n-        UniValueType(), // ARR or OBJ, checked later\n-        UniValue::VNUM,\n-        UniValue::VOBJ,\n-        UniValue::VBOOL\n-        }, true\n-    );\n-\n-    CAmount fee;\n-    int change_position;\n-    bool rbf{wallet.m_signal_rbf};\n-    const UniValue &replaceable_arg = request.params[3][\"replaceable\"];\n-    if (!replaceable_arg.isNull()) {\n-        RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n-        rbf = replaceable_arg.isTrue();\n-    }\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n-    CCoinControl coin_control;\n-    // Automatically select coins, unless at least one is manually selected. Can\n-    // be overridden by options.add_inputs.\n-    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n-    FundTransaction(wallet, rawTx, fee, change_position, request.params[3], coin_control, /* override_min_fee */ true);\n-\n-    // Make a blank psbt\n-    PartiallySignedTransaction psbtx(rawTx);\n-\n-    // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[4].isNull() ? true : request.params[4].get_bool();\n-    bool complete = true;\n-    const TransactionError err{wallet.FillPSBT(psbtx, complete, 1, false, bip32derivs)};\n-    if (err != TransactionError::OK) {\n-        throw JSONRPCTransactionError(err);\n-    }\n-\n-    // Serialize the PSBT\n-    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-    ssTx << psbtx;\n-\n-    UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n-    result.pushKV(\"fee\", ValueFromAmount(fee));\n-    result.pushKV(\"changepos\", change_position);\n-    return result;\n-},\n-    };\n-}\n-\n static RPCHelpMan upgradewallet()\n {\n     return RPCHelpMan{\"upgradewallet\",\n@@ -1993,6 +638,17 @@ RPCHelpMan walletpassphrasechange();\n RPCHelpMan walletlock();\n RPCHelpMan encryptwallet();\n \n+// spend\n+RPCHelpMan sendtoaddress();\n+RPCHelpMan sendmany();\n+RPCHelpMan settxfee();\n+RPCHelpMan fundrawtransaction();\n+RPCHelpMan bumpfee();\n+RPCHelpMan psbtbumpfee();\n+RPCHelpMan send();\n+RPCHelpMan walletprocesspsbt();\n+RPCHelpMan walletcreatefundedpsbt();\n+\n // transactions\n RPCHelpMan listreceivedbyaddress();\n RPCHelpMan listreceivedbylabel();"
      }
    ]
  },
  {
    "sha": "a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
    "node_id": "C_kwDOABII59oAKGEwOGUyNTY4ZDJmY2IxYTg1ODdkZGEwYTJiMWYzZTQzZWRlNDViYjI",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T03:43:31Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:51:47Z"
      },
      "message": "MOVEONLY: Move rpcwallet to rpc/wallet",
      "tree": {
        "sha": "797f68f95801a6eba0bf91cffb3e5dcc31529a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/797f68f95801a6eba0bf91cffb3e5dcc31529a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60b38d62b98e5a3c372938b6751aab68cfb7a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b38d62b98e5a3c372938b6751aab68cfb7a13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b38d62b98e5a3c372938b6751aab68cfb7a13"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "36da079674507e768ea113525fcde510617c682e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "patch": "@@ -282,8 +282,8 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/receive.h \\\n-  wallet/rpcwallet.h \\\n   wallet/rpc/util.h \\\n+  wallet/rpc/wallet.h \\\n   wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/spend.h \\\n@@ -418,7 +418,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpc/signmessage.cpp \\\n   wallet/rpc/transactions.cpp \\\n   wallet/rpc/util.cpp \\\n-  wallet/rpcwallet.cpp \\\n+  wallet/rpc/wallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/spend.cpp \\\n   wallet/transaction.cpp \\"
      },
      {
        "sha": "6c9d0ca132654978958b8edb2db8f6ce78b1b859",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "patch": "@@ -24,7 +24,7 @@\n #include <wallet/ismine.h>\n #include <wallet/load.h>\n #include <wallet/receive.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/rpc/wallet.h>\n #include <wallet/spend.h>\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "b0b586c41c0aa6114bb76ee88facc2b7f31c5619",
        "filename": "src/wallet/rpc/wallet.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/rpc/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/rpc/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/wallet.cpp?ref=a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "patch": "@@ -22,7 +22,7 @@\n #include <wallet/coincontrol.h>\n #include <wallet/load.h>\n #include <wallet/receive.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/rpc/wallet.h>\n #include <wallet/rpc/util.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>",
        "previous_filename": "src/wallet/rpcwallet.cpp"
      },
      {
        "sha": "59abe90d55cc439abd6bdd450aa107fdf6f54290",
        "filename": "src/wallet/rpc/wallet.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/rpc/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2/src/wallet/rpc/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/wallet.h?ref=a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_WALLET_RPCWALLET_H\n-#define BITCOIN_WALLET_RPCWALLET_H\n+#ifndef BITCOIN_WALLET_RPC_WALLET_H\n+#define BITCOIN_WALLET_RPC_WALLET_H\n \n #include <span.h>\n \n@@ -13,4 +13,4 @@ Span<const CRPCCommand> GetWalletRPCCommands();\n \n RPCHelpMan getaddressinfo();\n RPCHelpMan signrawtransactionwithwallet();\n-#endif // BITCOIN_WALLET_RPCWALLET_H\n+#endif // BITCOIN_WALLET_RPC_WALLET_H",
        "previous_filename": "src/wallet/rpcwallet.h"
      }
    ]
  },
  {
    "sha": "889d32f7f2b6577d6ef367efecfc2f55916c3070",
    "node_id": "C_kwDOABII59oAKDg4OWQzMmY3ZjJiNjU3N2Q2ZWYzNjdlZmVjZmMyZjU1OTE2YzMwNzA",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-01T03:52:29Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-12-03T20:52:27Z"
      },
      "message": "Remove unused imports from rpc/wallet and reorder RPCs",
      "tree": {
        "sha": "6d366f293838635f77d2addb61ad3d283672f896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d366f293838635f77d2addb61ad3d283672f896"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/889d32f7f2b6577d6ef367efecfc2f55916c3070",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/889d32f7f2b6577d6ef367efecfc2f55916c3070",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/889d32f7f2b6577d6ef367efecfc2f55916c3070",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/889d32f7f2b6577d6ef367efecfc2f55916c3070/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a08e2568d2fcb1a8587dda0a2b1f3e43ede45bb2"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 20,
      "deletions": 35
    },
    "files": [
      {
        "sha": "a4f300019e1d45fbe706fbb0499dd377eb1177cb",
        "filename": "src/wallet/rpc/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 33,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/889d32f7f2b6577d6ef367efecfc2f55916c3070/src/wallet/rpc/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/889d32f7f2b6577d6ef367efecfc2f55916c3070/src/wallet/rpc/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/wallet.cpp?ref=889d32f7f2b6577d6ef367efecfc2f55916c3070",
        "patch": "@@ -3,38 +3,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <consensus/amount.h>\n #include <core_io.h>\n-#include <interfaces/chain.h>\n #include <key_io.h>\n-#include <node/context.h>\n-#include <outputtype.h>\n-#include <policy/feerate.h>\n-#include <policy/fees.h>\n-#include <policy/rbf.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n-#include <script/descriptor.h>\n-#include <script/sign.h>\n-#include <util/string.h>\n-#include <util/system.h>\n #include <util/translation.h>\n-#include <wallet/coincontrol.h>\n-#include <wallet/load.h>\n #include <wallet/receive.h>\n #include <wallet/rpc/wallet.h>\n #include <wallet/rpc/util.h>\n #include <wallet/wallet.h>\n-#include <wallet/walletdb.h>\n-#include <wallet/walletutil.h>\n \n #include <optional>\n-#include <stdint.h>\n \n #include <univalue.h>\n \n-#include <map>\n-\n \n /** Checks if a CKey is in the given CWallet compressed or otherwise*/\n bool HaveKey(const SigningProvider& wallet, const CKey& key)\n@@ -592,6 +574,22 @@ static RPCHelpMan upgradewallet()\n     };\n }\n \n+// addresses\n+RPCHelpMan getaddressinfo();\n+RPCHelpMan getnewaddress();\n+RPCHelpMan getrawchangeaddress();\n+RPCHelpMan setlabel();\n+RPCHelpMan listaddressgroupings();\n+RPCHelpMan addmultisigaddress();\n+RPCHelpMan keypoolrefill();\n+RPCHelpMan newkeypool();\n+RPCHelpMan getaddressesbylabel();\n+RPCHelpMan listlabels();\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+RPCHelpMan walletdisplayaddress();\n+#endif // ENABLE_EXTERNAL_SIGNER\n+\n+// backup\n RPCHelpMan abortrescan();\n RPCHelpMan dumpprivkey();\n RPCHelpMan importprivkey();\n@@ -604,24 +602,9 @@ RPCHelpMan removeprunedfunds();\n RPCHelpMan importmulti();\n RPCHelpMan importdescriptors();\n RPCHelpMan listdescriptors();\n-RPCHelpMan signmessage();\n RPCHelpMan backupwallet();\n RPCHelpMan restorewallet();\n \n-// addresses\n-RPCHelpMan getnewaddress();\n-RPCHelpMan getrawchangeaddress();\n-RPCHelpMan setlabel();\n-RPCHelpMan listaddressgroupings();\n-RPCHelpMan addmultisigaddress();\n-RPCHelpMan keypoolrefill();\n-RPCHelpMan newkeypool();\n-RPCHelpMan getaddressesbylabel();\n-RPCHelpMan listlabels();\n-#ifdef ENABLE_EXTERNAL_SIGNER\n-RPCHelpMan walletdisplayaddress();\n-#endif // ENABLE_EXTERNAL_SIGNER\n-\n // coins\n RPCHelpMan getreceivedbyaddress();\n RPCHelpMan getreceivedbylabel();\n@@ -648,6 +631,10 @@ RPCHelpMan psbtbumpfee();\n RPCHelpMan send();\n RPCHelpMan walletprocesspsbt();\n RPCHelpMan walletcreatefundedpsbt();\n+RPCHelpMan signrawtransactionwithwallet();\n+\n+// signmessage\n+RPCHelpMan signmessage();\n \n // transactions\n RPCHelpMan listreceivedbyaddress();"
      },
      {
        "sha": "cdc9a8cc92001c0522e607b868fa36244cbb2a73",
        "filename": "src/wallet/rpc/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/889d32f7f2b6577d6ef367efecfc2f55916c3070/src/wallet/rpc/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/889d32f7f2b6577d6ef367efecfc2f55916c3070/src/wallet/rpc/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpc/wallet.h?ref=889d32f7f2b6577d6ef367efecfc2f55916c3070",
        "patch": "@@ -11,6 +11,4 @@ class CRPCCommand;\n \n Span<const CRPCCommand> GetWalletRPCCommands();\n \n-RPCHelpMan getaddressinfo();\n-RPCHelpMan signrawtransactionwithwallet();\n #endif // BITCOIN_WALLET_RPC_WALLET_H"
      }
    ]
  }
]