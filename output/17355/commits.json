[
  {
    "sha": "71587f4f43a08e49e9348f576447c92a72000c22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTU4N2Y0ZjQzYTA4ZTQ5ZTkzNDhmNTc2NDQ3YzkyYTcyMDAwYzIy",
    "commit": {
      "author": {
        "name": "Zakk",
        "email": "zakklakin@outlook.com",
        "date": "2021-05-31T20:37:18Z"
      },
      "committer": {
        "name": "za-kk",
        "email": "zakklakin@outlook.com",
        "date": "2021-07-04T22:32:54Z"
      },
      "message": "grey out used addresses in address book if avoid_reuse flag has been set on wallet",
      "tree": {
        "sha": "9359115be8f2f20752c95d0dccd58ed887b1dd24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9359115be8f2f20752c95d0dccd58ed887b1dd24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71587f4f43a08e49e9348f576447c92a72000c22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71587f4f43a08e49e9348f576447c92a72000c22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71587f4f43a08e49e9348f576447c92a72000c22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71587f4f43a08e49e9348f576447c92a72000c22/comments",
    "author": {
      "login": "za-kk",
      "id": 31032215,
      "node_id": "MDQ6VXNlcjMxMDMyMjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/za-kk",
      "html_url": "https://github.com/za-kk",
      "followers_url": "https://api.github.com/users/za-kk/followers",
      "following_url": "https://api.github.com/users/za-kk/following{/other_user}",
      "gists_url": "https://api.github.com/users/za-kk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/za-kk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
      "organizations_url": "https://api.github.com/users/za-kk/orgs",
      "repos_url": "https://api.github.com/users/za-kk/repos",
      "events_url": "https://api.github.com/users/za-kk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/za-kk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "za-kk",
      "id": 31032215,
      "node_id": "MDQ6VXNlcjMxMDMyMjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/za-kk",
      "html_url": "https://github.com/za-kk",
      "followers_url": "https://api.github.com/users/za-kk/followers",
      "following_url": "https://api.github.com/users/za-kk/following{/other_user}",
      "gists_url": "https://api.github.com/users/za-kk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/za-kk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
      "organizations_url": "https://api.github.com/users/za-kk/orgs",
      "repos_url": "https://api.github.com/users/za-kk/repos",
      "events_url": "https://api.github.com/users/za-kk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/za-kk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a49fdc58115845ece3a9890bf9498bee6b559de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a49fdc58115845ece3a9890bf9498bee6b559de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a49fdc58115845ece3a9890bf9498bee6b559de"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 60,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1d6bcd38e4022ca690e02b321bbb012609adc7a2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -133,6 +133,9 @@ class Wallet\n     //! List locked coins.\n     virtual void listLockedCoins(std::vector<COutPoint>& outputs) = 0;\n \n+    //! Whether this address has been used.\n+    virtual bool isUsedAddress(const CTxDestination& dst) = 0;\n+\n     //! Create transaction.\n     virtual CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n@@ -341,9 +344,10 @@ struct WalletAddress\n     isminetype is_mine;\n     std::string name;\n     std::string purpose;\n+    bool is_used;\n \n-    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose)\n-        : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose))\n+    WalletAddress(CTxDestination dest, isminetype is_mine, std::string name, std::string purpose, bool is_used)\n+        : dest(std::move(dest)), is_mine(is_mine), name(std::move(name)), purpose(std::move(purpose)), is_used(is_used)\n     {\n     }\n };"
      },
      {
        "sha": "f955f3e1afd0f037d5fbd10e158e5f40c021bc98",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -29,10 +29,11 @@ struct AddressTableEntry\n     Type type;\n     QString label;\n     QString address;\n+    bool is_used;\n \n     AddressTableEntry() {}\n-    AddressTableEntry(Type _type, const QString &_label, const QString &_address):\n-        type(_type), label(_label), address(_address) {}\n+    AddressTableEntry(Type _type, const QString &_label, const QString &_address, bool _is_used = false):\n+        type(_type), label(_label), address(_address), is_used(_is_used) {}\n };\n \n struct AddressTableEntryLessThan\n@@ -88,7 +89,8 @@ class AddressTablePriv\n                         QString::fromStdString(address.purpose), address.is_mine);\n                 cachedAddressTable.append(AddressTableEntry(addressType,\n                                   QString::fromStdString(address.name),\n-                                  QString::fromStdString(EncodeDestination(address.dest))));\n+                                  QString::fromStdString(EncodeDestination(address.dest)),\n+                                  address.is_used));\n             }\n         }\n         // std::lower_bound() and std::upper_bound() require our cachedAddressTable list to be sorted in asc order\n@@ -97,7 +99,7 @@ class AddressTablePriv\n         std::sort(cachedAddressTable.begin(), cachedAddressTable.end(), AddressTableEntryLessThan());\n     }\n \n-    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status)\n+    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status, bool is_used)\n     {\n         // Find address / label in model\n         QList<AddressTableEntry>::iterator lower = std::lower_bound(\n@@ -129,6 +131,7 @@ class AddressTablePriv\n             }\n             lower->type = newEntryType;\n             lower->label = label;\n+            lower->is_used = is_used;\n             parent->emitDataChanged(lowerIndex);\n             break;\n         case CT_DELETED:\n@@ -231,6 +234,16 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n         } // no default case, so the compiler can warn about missing cases\n         assert(false);\n     }\n+    else if (role == Qt::ForegroundRole) {\n+        if (rec->is_used == true) {\n+            return QColor(Qt::gray);\n+        }\n+    }\n+    else if (role == Qt::ToolTipRole) {\n+        if (rec->is_used == true) {\n+            return tr(\"This address has been used (Right-click to edit address or label)\");\n+        }\n+    }\n     return QVariant();\n }\n \n@@ -334,10 +347,10 @@ QModelIndex AddressTableModel::index(int row, int column, const QModelIndex &par\n }\n \n void AddressTableModel::updateEntry(const QString &address,\n-        const QString &label, bool isMine, const QString &purpose, int status)\n+        const QString &label, bool isMine, const QString &purpose, int status, bool is_used)\n {\n     // Update address book model from Bitcoin core\n-    priv->updateEntry(address, label, isMine, purpose, status);\n+    priv->updateEntry(address, label, isMine, purpose, status, is_used);\n }\n \n QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address, const OutputType address_type)"
      },
      {
        "sha": "edb8dc2a3acc0c2ed6d6017c8361f70869780602",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -97,7 +97,7 @@ class AddressTableModel : public QAbstractTableModel\n public Q_SLOTS:\n     /* Update address list from core.\n      */\n-    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n+    void updateEntry(const QString &address, const QString &label, bool isMine, const QString &purpose, int status, bool is_used);\n \n     friend class AddressTablePriv;\n };"
      },
      {
        "sha": "e1bc5dc1f82ad946e3673456fec11d6302061688",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -130,10 +130,10 @@ void WalletModel::updateTransaction()\n }\n \n void WalletModel::updateAddressBook(const QString &address, const QString &label,\n-        bool isMine, const QString &purpose, int status)\n+        bool isMine, const QString &purpose, int status, bool is_used)\n {\n     if(addressTableModel)\n-        addressTableModel->updateEntry(address, label, isMine, purpose, status);\n+        addressTableModel->updateEntry(address, label, isMine, purpose, status, is_used);\n }\n \n void WalletModel::updateWatchOnlyFlag(bool fHaveWatchonly)\n@@ -371,7 +371,8 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel,\n                               Q_ARG(QString, strLabel),\n                               Q_ARG(bool, isMine),\n                               Q_ARG(QString, strPurpose),\n-                              Q_ARG(int, status));\n+                              Q_ARG(int, status),\n+                              Q_ARG(bool, walletmodel->wallet().isUsedAddress(address)));\n     assert(invoked);\n }\n "
      },
      {
        "sha": "f003dfddd56180cef571720079b33b7c64c52cc2",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -232,7 +232,7 @@ public Q_SLOTS:\n     /* New transaction, or transaction changed status */\n     void updateTransaction();\n     /* New, updated or removed address book entry */\n-    void updateAddressBook(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n+    void updateAddressBook(const QString &address, const QString &label, bool isMine, const QString &purpose, int status, bool is_used);\n     /* Watch-only added */\n     void updateWatchOnlyFlag(bool fHaveWatchonly);\n     /* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */"
      },
      {
        "sha": "d286426129e3292b685a5c6d370f556aab23e0ee",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -193,7 +193,7 @@ class WalletImpl : public Wallet\n         std::vector<WalletAddress> result;\n         for (const auto& item : m_wallet->m_address_book) {\n             if (item.second.IsChange()) continue;\n-            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.GetLabel(), item.second.purpose);\n+            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.GetLabel(), item.second.purpose, m_wallet->IsUsedAddress(item.first));\n         }\n         return result;\n     }\n@@ -231,6 +231,11 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->ListLockedCoins(outputs);\n     }\n+    bool isUsedAddress(const CTxDestination& dst) override\n+    {\n+        LOCK(m_wallet->cs_wallet);\n+        return m_wallet->IsUsedAddress(dst);\n+    }\n     CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,\n         bool sign,"
      },
      {
        "sha": "f568c23a50a87558ed292e722a6e03be42ab720e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -875,6 +875,22 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n+void CWallet::SetUsedAddressState(WalletBatch& batch, const CTxOut& cout, uint256 hash)\n+{\n+    AssertLockHeld(cs_wallet);\n+    CTxDestination dst;\n+    if (ExtractDestination(cout.scriptPubKey, dst) && IsMine(dst)) {\n+        AddDestData(batch, dst, \"first_txid\", hash.ToString());\n+        NotifyAddressBookChanged(this, dst, m_address_book[dst].GetLabel(), IsMine(dst) != ISMINE_NO, \"receive\", CT_UPDATED );\n+    }\n+}\n+\n+bool CWallet::IsUsedAddress(const CTxDestination& dst) const\n+{\n+    AssertLockHeld(cs_wallet);\n+    return GetDestData(dst, \"first_txid\", nullptr);\n+}\n+\n CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n@@ -892,6 +908,10 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n             SetSpentKeyState(batch, op.hash, op.n, true, tx_destinations);\n         }\n \n+        for (const CTxOut& txout : tx->vout) {\n+            SetUsedAddressState(batch, txout, hash);\n+        }\n+\n         MarkDestinationsDirty(tx_destinations);\n     }\n "
      },
      {
        "sha": "3ab2a790226f81aa659a28d94b386bec00e4c2e4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71587f4f43a08e49e9348f576447c92a72000c22/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=71587f4f43a08e49e9348f576447c92a72000c22",
        "patch": "@@ -456,6 +456,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, const CoinSelectionParams& coin_sel_params, const CoinEligibilityFilter& filter, bool positive_only) const;\n+    //! Whether this address has been used.\n+    void SetUsedAddressState(WalletBatch& batch, const CTxOut& cout, uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsUsedAddress(const CTxDestination& dst) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Display address on an external signer. Returns false if external signer support is not compiled */\n     bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "bb4790816d84f850367c99134ea6a16659fbb180",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjQ3OTA4MTZkODRmODUwMzY3Yzk5MTM0ZWE2YTE2NjU5ZmJiMTgw",
    "commit": {
      "author": {
        "name": "za-kk",
        "email": "zakklakin@outlook.com",
        "date": "2021-07-05T11:37:07Z"
      },
      "committer": {
        "name": "za-kk",
        "email": "zakklakin@outlook.com",
        "date": "2021-07-05T11:37:07Z"
      },
      "message": "rework to avoid using AddDestData so it builds",
      "tree": {
        "sha": "a059727fe9a32e56cee158ca343b30249e45e46a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a059727fe9a32e56cee158ca343b30249e45e46a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4790816d84f850367c99134ea6a16659fbb180",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4790816d84f850367c99134ea6a16659fbb180",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4790816d84f850367c99134ea6a16659fbb180",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4790816d84f850367c99134ea6a16659fbb180/comments",
    "author": {
      "login": "za-kk",
      "id": 31032215,
      "node_id": "MDQ6VXNlcjMxMDMyMjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/za-kk",
      "html_url": "https://github.com/za-kk",
      "followers_url": "https://api.github.com/users/za-kk/followers",
      "following_url": "https://api.github.com/users/za-kk/following{/other_user}",
      "gists_url": "https://api.github.com/users/za-kk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/za-kk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
      "organizations_url": "https://api.github.com/users/za-kk/orgs",
      "repos_url": "https://api.github.com/users/za-kk/repos",
      "events_url": "https://api.github.com/users/za-kk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/za-kk/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "za-kk",
      "id": 31032215,
      "node_id": "MDQ6VXNlcjMxMDMyMjE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31032215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/za-kk",
      "html_url": "https://github.com/za-kk",
      "followers_url": "https://api.github.com/users/za-kk/followers",
      "following_url": "https://api.github.com/users/za-kk/following{/other_user}",
      "gists_url": "https://api.github.com/users/za-kk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/za-kk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/za-kk/subscriptions",
      "organizations_url": "https://api.github.com/users/za-kk/orgs",
      "repos_url": "https://api.github.com/users/za-kk/repos",
      "events_url": "https://api.github.com/users/za-kk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/za-kk/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71587f4f43a08e49e9348f576447c92a72000c22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71587f4f43a08e49e9348f576447c92a72000c22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71587f4f43a08e49e9348f576447c92a72000c22"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 27,
      "deletions": 16
    },
    "files": [
      {
        "sha": "578d52463930128fc9429ee62fe0331b02352ca1",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4790816d84f850367c99134ea6a16659fbb180/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4790816d84f850367c99134ea6a16659fbb180/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=bb4790816d84f850367c99134ea6a16659fbb180",
        "patch": "@@ -133,8 +133,8 @@ class Wallet\n     //! List locked coins.\n     virtual void listLockedCoins(std::vector<COutPoint>& outputs) = 0;\n \n-    //! Whether this address has been used.\n-    virtual bool isUsedAddress(const CTxDestination& dst) = 0;\n+    //! Whether this address has been used (has received).\n+    virtual bool hasAddressReceived(const CTxDestination& dst) = 0;\n \n     //! Create transaction.\n     virtual CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,"
      },
      {
        "sha": "9c582445b685a6ff711235e7cae7962440775d1d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4790816d84f850367c99134ea6a16659fbb180/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4790816d84f850367c99134ea6a16659fbb180/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bb4790816d84f850367c99134ea6a16659fbb180",
        "patch": "@@ -372,7 +372,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel,\n                               Q_ARG(bool, isMine),\n                               Q_ARG(QString, strPurpose),\n                               Q_ARG(int, status),\n-                              Q_ARG(bool, walletmodel->wallet().isUsedAddress(address)));\n+                              Q_ARG(bool, walletmodel->wallet().hasAddressReceived(address)));\n     assert(invoked);\n }\n "
      },
      {
        "sha": "da29a87023275b9f778a6318b0e31e91ed7d08cd",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=bb4790816d84f850367c99134ea6a16659fbb180",
        "patch": "@@ -193,7 +193,7 @@ class WalletImpl : public Wallet\n         std::vector<WalletAddress> result;\n         for (const auto& item : m_wallet->m_address_book) {\n             if (item.second.IsChange()) continue;\n-            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.GetLabel(), item.second.purpose, m_wallet->IsUsedAddress(item.first));\n+            result.emplace_back(item.first, m_wallet->IsMine(item.first), item.second.GetLabel(), item.second.purpose, m_wallet->HasAddressReceived(item.first));\n         }\n         return result;\n     }\n@@ -231,10 +231,10 @@ class WalletImpl : public Wallet\n         LOCK(m_wallet->cs_wallet);\n         return m_wallet->ListLockedCoins(outputs);\n     }\n-    bool isUsedAddress(const CTxDestination& dst) override\n+    bool hasAddressReceived(const CTxDestination& dst) override\n     {\n         LOCK(m_wallet->cs_wallet);\n-        return m_wallet->IsUsedAddress(dst);\n+        return m_wallet->HasAddressReceived(dst);\n     }\n     CTransactionRef createTransaction(const std::vector<CRecipient>& recipients,\n         const CCoinControl& coin_control,"
      },
      {
        "sha": "1c22bd272f28da1e0a2eacbc52ae0ff2149313e2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb4790816d84f850367c99134ea6a16659fbb180",
        "patch": "@@ -875,20 +875,31 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     return false;\n }\n \n-void CWallet::SetUsedAddressState(WalletBatch& batch, const CTxOut& cout, uint256 hash)\n+void CWallet::SetAddressReceivedState(WalletBatch& batch, const CTxOut& cout, const uint256& hash)\n {\n     AssertLockHeld(cs_wallet);\n     CTxDestination dst;\n     if (ExtractDestination(cout.scriptPubKey, dst) && IsMine(dst)) {\n-        AddDestData(batch, dst, \"first_txid\", hash.ToString());\n-        NotifyAddressBookChanged(this, dst, m_address_book[dst].GetLabel(), IsMine(dst) != ISMINE_NO, \"receive\", CT_UPDATED );\n+\n+        m_address_book[dst].destdata.insert(std::make_pair(\"first_txid\", hash.ToString()));\n+        NotifyAddressBookChanged(dst, m_address_book[dst].GetLabel(), IsMine(dst) != ISMINE_NO, \"receive\", CT_UPDATED);\n     }\n }\n \n-bool CWallet::IsUsedAddress(const CTxDestination& dst) const\n+bool CWallet::HasAddressReceived(const CTxDestination& dst) const\n {\n-    AssertLockHeld(cs_wallet);\n-    return GetDestData(dst, \"first_txid\", nullptr);\n+\n+    const std::string key{\"first_txid\"};\n+    std::map<CTxDestination, CAddressBookData>::const_iterator i = m_address_book.find(dst);\n+    if(i != m_address_book.end())\n+    {\n+        CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n+        if(j != i->second.destdata.end())\n+        {\n+            return true;\n+        }\n+    }\n+    return false;\n }\n \n CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmation& confirm, const UpdateWalletTxFn& update_wtx, bool fFlushOnClose)\n@@ -909,7 +920,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n         }\n \n         for (const CTxOut& txout : tx->vout) {\n-            SetUsedAddressState(batch, txout, hash);\n+            SetAddressReceivedState(batch, txout, hash);\n         }\n \n         MarkDestinationsDirty(tx_destinations);"
      },
      {
        "sha": "2eb817f133e94c7fab86e79117b9c0422ecffe9b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4790816d84f850367c99134ea6a16659fbb180/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bb4790816d84f850367c99134ea6a16659fbb180",
        "patch": "@@ -456,9 +456,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, const CoinSelectionParams& coin_sel_params, const CoinEligibilityFilter& filter, bool positive_only) const;\n-    //! Whether this address has been used.\n-    void SetUsedAddressState(WalletBatch& batch, const CTxOut& cout, uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    bool IsUsedAddress(const CTxDestination& dst) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    //! Whether this address has been used (has received).\n+    void SetAddressReceivedState(WalletBatch& batch, const CTxOut& cout, const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool HasAddressReceived(const CTxDestination& dst) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Display address on an external signer. Returns false if external signer support is not compiled */\n     bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  }
]