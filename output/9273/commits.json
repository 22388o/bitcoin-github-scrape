[
  {
    "sha": "a13fa4c80f792ffba8a77737754506aa849929af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNmYTRjODBmNzkyZmZiYThhNzc3Mzc3NTQ1MDZhYTg0OTkyOWFm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:23:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-04T08:23:17Z"
      },
      "message": "Remove unused CDiskBlockPos* argument from ProcessNewBlock",
      "tree": {
        "sha": "48ed3e70b0770472932cb6ae8cb532fd9c1d8bfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48ed3e70b0770472932cb6ae8cb532fd9c1d8bfc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13fa4c80f792ffba8a77737754506aa849929af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13fa4c80f792ffba8a77737754506aa849929af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13fa4c80f792ffba8a77737754506aa849929af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13fa4c80f792ffba8a77737754506aa849929af/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd0df81ebdbf705f7ad386c7229bf1bbc3125f62"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5a7f6aa750d75148c8a4b10f63696bc14f1bb851",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -1951,7 +1951,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, NULL, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n             if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n         }\n@@ -2133,7 +2133,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, NULL, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n     }"
      },
      {
        "sha": "73797e2019812da882952ab3c37133ede1414f9a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -132,7 +132,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, NULL, NULL))\n+        if (!ProcessNewBlock(Params(), shared_pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -760,7 +760,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(Params(), blockptr, true, NULL, NULL);\n+    bool fAccepted = ProcessNewBlock(Params(), blockptr, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "892e731a7a7bd1feb7068413464ffefba2c265bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -224,7 +224,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL, NULL));\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "dc459bed0d2c4122a989cf5aeccdcd89773dc087",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -128,7 +128,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, NULL, NULL);\n+    ProcessNewBlock(chainparams, shared_pblock, true, NULL);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "46a8803c0c5ff5481467885ff55a548276a727d5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -3127,7 +3127,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n         LOCK(cs_main);\n@@ -3136,7 +3136,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, fNewBlock);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      },
      {
        "sha": "c284c2fc188add50af2996cf230cd08b4c6ba3a1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13fa4c80f792ffba8a77737754506aa849929af/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13fa4c80f792ffba8a77737754506aa849929af/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a13fa4c80f792ffba8a77737754506aa849929af",
        "patch": "@@ -229,11 +229,10 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n \n /**\n  * Process incoming block headers."
      }
    ]
  }
]