[
  {
    "sha": "72c233650a20b6220e08d75f61a946b14ab0ec92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmMyMzM2NTBhMjBiNjIyMGUwOGQ3NWY2MWE5NDZiMTRhYjBlYzky",
    "commit": {
      "author": {
        "name": "Ekene Madu",
        "email": "EkeneMadu@protonmail.com",
        "date": "2019-04-05T18:04:27Z"
      },
      "committer": {
        "name": "Ekene Madu",
        "email": "EkeneMadu@protonmail.com",
        "date": "2019-04-05T18:04:27Z"
      },
      "message": "Lift the wallet shuffle from SelectCoinsMinConf to SelectCoins\n\nThat way it's only done once",
      "tree": {
        "sha": "acf13c840d7fda4ef4d00b70c38f01e94b69eed8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf13c840d7fda4ef4d00b70c38f01e94b69eed8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72c233650a20b6220e08d75f61a946b14ab0ec92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c233650a20b6220e08d75f61a946b14ab0ec92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72c233650a20b6220e08d75f61a946b14ab0ec92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72c233650a20b6220e08d75f61a946b14ab0ec92/comments",
    "author": {
      "login": "madeken",
      "id": 36307021,
      "node_id": "MDQ6VXNlcjM2MzA3MDIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/36307021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madeken",
      "html_url": "https://github.com/madeken",
      "followers_url": "https://api.github.com/users/madeken/followers",
      "following_url": "https://api.github.com/users/madeken/following{/other_user}",
      "gists_url": "https://api.github.com/users/madeken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madeken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madeken/subscriptions",
      "organizations_url": "https://api.github.com/users/madeken/orgs",
      "repos_url": "https://api.github.com/users/madeken/repos",
      "events_url": "https://api.github.com/users/madeken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madeken/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "madeken",
      "id": 36307021,
      "node_id": "MDQ6VXNlcjM2MzA3MDIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/36307021?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madeken",
      "html_url": "https://github.com/madeken",
      "followers_url": "https://api.github.com/users/madeken/followers",
      "following_url": "https://api.github.com/users/madeken/following{/other_user}",
      "gists_url": "https://api.github.com/users/madeken/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madeken/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madeken/subscriptions",
      "organizations_url": "https://api.github.com/users/madeken/orgs",
      "repos_url": "https://api.github.com/users/madeken/repos",
      "events_url": "https://api.github.com/users/madeken/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madeken/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c83442e17412b96f00bc29d30763b28184c95f1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c83442e17412b96f00bc29d30763b28184c95f1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c83442e17412b96f00bc29d30763b28184c95f1e"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 4,
      "deletions": 59
    },
    "files": [
      {
        "sha": "9b75791f41f1a432030135de8aa7892f98cc1a66",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=72c233650a20b6220e08d75f61a946b14ab0ec92",
        "patch": "@@ -223,8 +223,6 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     std::vector<OutputGroup> applicable_groups;\n     CAmount nTotalLower = 0;\n \n-    Shuffle(groups.begin(), groups.end(), FastRandomContext());\n-\n     for (const OutputGroup& group : groups) {\n         if (group.m_value == nTargetValue) {\n             util::insert(setCoinsRet, group.m_outputs);"
      },
      {
        "sha": "f36c6ed00394fe832f9e1963941f74f501bb03e5",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=72c233650a20b6220e08d75f61a946b14ab0ec92",
        "patch": "@@ -490,57 +490,6 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n            }\n       }\n \n-      // test randomness\n-      {\n-          empty_wallet();\n-          for (int i2 = 0; i2 < 100; i2++)\n-              add_coin(COIN);\n-\n-          // Again, we only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n-          for (int i = 0; i < RUN_TESTS; i++) {\n-            // picking 50 from 100 coins doesn't depend on the shuffle,\n-            // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(testWallet.SelectCoinsMinConf(50 * COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n-            BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n-\n-            int fails = 0;\n-            for (int j = 0; j < RANDOM_REPEATS; j++)\n-            {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(COIN, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n-                    fails++;\n-            }\n-            BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-          }\n-\n-          // add 75 cents in small change.  not enough to make 90 cents,\n-          // then try making 90 cents.  there are multiple competing \"smallest bigger\" coins,\n-          // one of which should be picked at random\n-          add_coin(5 * CENT);\n-          add_coin(10 * CENT);\n-          add_coin(15 * CENT);\n-          add_coin(20 * CENT);\n-          add_coin(25 * CENT);\n-\n-          for (int i = 0; i < RUN_TESTS; i++) {\n-            int fails = 0;\n-            for (int j = 0; j < RANDOM_REPEATS; j++)\n-            {\n-                // selecting 1 from 100 identical coins depends on the shuffle; this test will fail 1% of the time\n-                // run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, GroupCoins(vCoins), setCoinsRet , nValueRet, coin_selection_params, bnb_used));\n-                BOOST_CHECK(testWallet.SelectCoinsMinConf(90*CENT, filter_standard, GroupCoins(vCoins), setCoinsRet2, nValueRet, coin_selection_params, bnb_used));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n-                    fails++;\n-            }\n-            BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n-          }\n-      }\n-\n     empty_wallet();\n }\n "
      },
      {
        "sha": "6ac7b3d3a90bbebc9a04f5ddfd47d2a7e485facf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72c233650a20b6220e08d75f61a946b14ab0ec92/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=72c233650a20b6220e08d75f61a946b14ab0ec92",
        "patch": "@@ -2524,12 +2524,10 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n \n     // form groups from remaining coins; note that preset coins will not\n     // automatically have their associated (same address) coins included\n-    if (coin_control.m_avoid_partial_spends && vCoins.size() > OUTPUT_GROUP_MAX_ENTRIES) {\n-        // Cases where we have 11+ outputs all pointing to the same destination may result in\n-        // privacy leaks as they will potentially be deterministically sorted. We solve that by\n-        // explicitly shuffling the outputs before processing\n-        Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n-    }\n+    // Cases where groups have the amount amount may result in\n+    // privacy leaks as they will potentially be deterministically sorted. We solve that by\n+    // explicitly shuffling the outputs before processing\n+    Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n     std::vector<OutputGroup> groups = GroupOutputs(vCoins, !coin_control.m_avoid_partial_spends);\n \n     size_t max_ancestors = (size_t)std::max<int64_t>(1, gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT));"
      }
    ]
  }
]