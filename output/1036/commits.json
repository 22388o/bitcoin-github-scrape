[
  {
    "sha": "f487746ded64dc472342ae876a2cded79ec1e338",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDg3NzQ2ZGVkNjRkYzQ3MjM0MmFlODc2YTJjZGVkNzllYzFlMzM4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-04-04T19:56:00Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-04-04T19:56:00Z"
      },
      "message": "Remove half-implemented publish/subscribe system",
      "tree": {
        "sha": "3e01f9df9febc91e5fa748fd690c4c75673e624e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e01f9df9febc91e5fa748fd690c4c75673e624e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f487746ded64dc472342ae876a2cded79ec1e338",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f487746ded64dc472342ae876a2cded79ec1e338",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f487746ded64dc472342ae876a2cded79ec1e338",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f487746ded64dc472342ae876a2cded79ec1e338/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0a7e05a45a925d78efd00ecca6dce9b7a9530f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a7e05a45a925d78efd00ecca6dce9b7a9530f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a7e05a45a925d78efd00ecca6dce9b7a9530f9"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 0,
      "deletions": 167
    },
    "files": [
      {
        "sha": "7dc2d4c22ab2b4f0388f8a1a095e7a70899d59e0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 106,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f487746ded64dc472342ae876a2cded79ec1e338/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f487746ded64dc472342ae876a2cded79ec1e338/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f487746ded64dc472342ae876a2cded79ec1e338",
        "patch": "@@ -289,105 +289,6 @@ void AddressCurrentlyConnected(const CService& addr)\n \n \n \n-void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1)\n-{\n-    // If the dialog might get closed before the reply comes back,\n-    // call this in the destructor so it doesn't get called after it's deleted.\n-    CRITICAL_BLOCK(cs_vNodes)\n-    {\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-        {\n-            CRITICAL_BLOCK(pnode->cs_mapRequests)\n-            {\n-                for (map<uint256, CRequestTracker>::iterator mi = pnode->mapRequests.begin(); mi != pnode->mapRequests.end();)\n-                {\n-                    CRequestTracker& tracker = (*mi).second;\n-                    if (tracker.fn == fn && tracker.param1 == param1)\n-                        pnode->mapRequests.erase(mi++);\n-                    else\n-                        mi++;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-\n-\n-\n-\n-\n-\n-//\n-// Subscription methods for the broadcast and subscription system.\n-// Channel numbers are message numbers, i.e. MSG_TABLE and MSG_PRODUCT.\n-//\n-// The subscription system uses a meet-in-the-middle strategy.\n-// With 100,000 nodes, if senders broadcast to 1000 random nodes and receivers\n-// subscribe to 1000 random nodes, 99.995% (1 - 0.99^1000) of messages will get through.\n-//\n-\n-bool AnySubscribed(unsigned int nChannel)\n-{\n-    if (pnodeLocalHost->IsSubscribed(nChannel))\n-        return true;\n-    CRITICAL_BLOCK(cs_vNodes)\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (pnode->IsSubscribed(nChannel))\n-                return true;\n-    return false;\n-}\n-\n-bool CNode::IsSubscribed(unsigned int nChannel)\n-{\n-    if (nChannel >= vfSubscribe.size())\n-        return false;\n-    return vfSubscribe[nChannel];\n-}\n-\n-void CNode::Subscribe(unsigned int nChannel, unsigned int nHops)\n-{\n-    if (nChannel >= vfSubscribe.size())\n-        return;\n-\n-    if (!AnySubscribed(nChannel))\n-    {\n-        // Relay subscribe\n-        CRITICAL_BLOCK(cs_vNodes)\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-                if (pnode != this)\n-                    pnode->PushMessage(\"subscribe\", nChannel, nHops);\n-    }\n-\n-    vfSubscribe[nChannel] = true;\n-}\n-\n-void CNode::CancelSubscribe(unsigned int nChannel)\n-{\n-    if (nChannel >= vfSubscribe.size())\n-        return;\n-\n-    // Prevent from relaying cancel if wasn't subscribed\n-    if (!vfSubscribe[nChannel])\n-        return;\n-    vfSubscribe[nChannel] = false;\n-\n-    if (!AnySubscribed(nChannel))\n-    {\n-        // Relay subscription cancel\n-        CRITICAL_BLOCK(cs_vNodes)\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-                if (pnode != this)\n-                    pnode->PushMessage(\"sub-cancel\", nChannel);\n-    }\n-}\n-\n-\n-\n-\n-\n-\n-\n \n \n CNode* FindNode(const CNetAddr& ip)\n@@ -486,13 +387,6 @@ void CNode::CloseSocketDisconnect()\n \n void CNode::Cleanup()\n {\n-    // All of a nodes broadcasts and subscriptions are automatically torn down\n-    // when it goes down, so a node has to stay up to keep its broadcast going.\n-\n-    // Cancel subscriptions\n-    for (unsigned int nChannel = 0; nChannel < vfSubscribe.size(); nChannel++)\n-        if (vfSubscribe[nChannel])\n-            CancelSubscribe(nChannel);\n }\n \n "
      },
      {
        "sha": "cd707e73adbf77915d22446a5dbbd818c84b1b21",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 61,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f487746ded64dc472342ae876a2cded79ec1e338/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f487746ded64dc472342ae876a2cded79ec1e338/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f487746ded64dc472342ae876a2cded79ec1e338",
        "patch": "@@ -29,16 +29,13 @@ extern int nBestHeight;\n \n inline unsigned int ReceiveBufferSize() { return 1000*GetArg(\"-maxreceivebuffer\", 10*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 10*1000); }\n-static const unsigned int PUBLISH_HOPS = 5;\n \n bool RecvLine(SOCKET hSocket, std::string& strLine);\n bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, int64 nTimeout=0);\n-void AbandonRequests(void (*fn)(void*, CDataStream&), void* param1);\n-bool AnySubscribed(unsigned int nChannel);\n void MapPort(bool fMapPort);\n bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n@@ -160,9 +157,6 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n \n-    // publish and subscription\n-    std::vector<char> vfSubscribe;\n-\n     CNode(SOCKET hSocketIn, CAddress addrIn, bool fInboundIn=false)\n     {\n         nServices = 0;\n@@ -192,7 +186,6 @@ class CNode\n         hashLastGetBlocksEnd = 0;\n         nStartingHeight = -1;\n         fGetAddr = false;\n-        vfSubscribe.assign(256, false);\n         nMisbehavior = 0;\n         setInventoryKnown.max_size(SendBufferSize() / 1000);\n \n@@ -634,58 +627,4 @@ inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)\n }\n \n \n-\n-\n-\n-\n-\n-\n-//\n-// Templates for the publish and subscription system.\n-// The object being published as T& obj needs to have:\n-//   a set<unsigned int> setSources member\n-//   specializations of AdvertInsert and AdvertErase\n-// Currently implemented for CTable and CProduct.\n-//\n-\n-template<typename T>\n-void AdvertStartPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)\n-{\n-    // Add to sources\n-    obj.setSources.insert(pfrom->addr.ip);\n-\n-    if (!AdvertInsert(obj))\n-        return;\n-\n-    // Relay\n-    CRITICAL_BLOCK(cs_vNodes)\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (pnode != pfrom && (nHops < PUBLISH_HOPS || pnode->IsSubscribed(nChannel)))\n-                pnode->PushMessage(\"publish\", nChannel, nHops, obj);\n-}\n-\n-template<typename T>\n-void AdvertStopPublish(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)\n-{\n-    uint256 hash = obj.GetHash();\n-\n-    CRITICAL_BLOCK(cs_vNodes)\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (pnode != pfrom && (nHops < PUBLISH_HOPS || pnode->IsSubscribed(nChannel)))\n-                pnode->PushMessage(\"pub-cancel\", nChannel, nHops, hash);\n-\n-    AdvertErase(obj);\n-}\n-\n-template<typename T>\n-void AdvertRemoveSource(CNode* pfrom, unsigned int nChannel, unsigned int nHops, T& obj)\n-{\n-    // Remove a source\n-    obj.setSources.erase(pfrom->addr.ip);\n-\n-    // If no longer supported by any sources, cancel it\n-    if (obj.setSources.empty())\n-        AdvertStopPublish(pfrom, nChannel, nHops, obj);\n-}\n-\n #endif"
      }
    ]
  }
]