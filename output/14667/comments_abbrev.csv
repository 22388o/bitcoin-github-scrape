laanwj,2018-11-06T14:30:22Z,"I know, this comes up every time—see for example https://github.com/bitcoin/bitcoin/pull/14476#issuecomment-430526327 —wasn't the idea to not add more pure-utility RPC calls?\nWe really need a clear stance on this.",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436271763,436271763,
DrahtBot,2018-11-06T14:44:35Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436276740,436276740,
Sjors,2018-11-06T15:23:36Z,I created an issue to discuss a tool that could replace pure utility RPC calls: #14671,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436291363,436291363,
Sjors,2018-11-19T18:58:55Z,"Rebased. Result is now an array of addresses, so combo() and ranges can be used. Added range arguments.",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440003913,440003913,
Sjors,2018-11-19T19:15:01Z,"Getting a rather cryptic linter error: @MarcoFalke?\n<img width=""1185"" alt=""schermafbeelding 2018-11-19 om 20 11 42"" src=""https://user-images.githubusercontent.com/10217/48729225-66643600-ec37-11e8-8548-f0be7be032c1.png"">\n\n_Update_: #14718 was merged right before I pushed this. I rebased again and now I'm able to reproduce the linter error. It happens on master too.",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440008947,440008947,
Sjors,2018-11-20T13:33:10Z,Rebased so CI works again. Renamed to plural `deriveaddresses`. Simplified the range arguments (must provide `start` and `end`).,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440274685,440274685,
meshcollider,2018-11-22T02:22:54Z,"utACK https://github.com/bitcoin/bitcoin/pull/14667/commits/82d2a8fc19e6d4c00fcb4af4032ebfdcdd457991\n\nOne last nit, I would add a comment about the default behavior of 0 for ranged descriptors if start and end aren't provided.\n\nEDIT: Actually, I think the helptext needs to be switched to RPCHelpMan",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440892946,440892946,
Sjors,2018-11-23T11:53:35Z,"@MeshCollider alternatively I could make the range argument mandatory for ranged descriptors.\n\nWhat do you mean with RPCHelpMan? ",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-441222506,441222506,
meshcollider,2018-11-24T10:48:56Z,@Sjors see #14726,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-441358934,441358934,
Sjors,2018-11-27T15:31:52Z,"Rebased due to #14726 and using RPCHelpMan now.\n\nRange argument is now mandatory for ranged descriptors (typing `0` instead of `*` is trivial).",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-442101472,442101472,
laanwj,2019-01-08T15:58:43Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452350748,452350748,
sipa,2019-01-08T16:04:43Z,utACK with a small nit.,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452353097,452353097,
jonasschnelli,2019-01-08T23:29:57Z,Needs non conflict rebase to fix the new `RPCHelpMan()` argument section (default and comments).,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452489748,452489748,
Sjors,2019-01-09T19:28:04Z,Rebased for `RPCHelpMan` and addressed some of the nits. Will continue later.,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452825769,452825769,
Sjors,2019-01-15T18:18:09Z,"Rebased for no particular reason, all feedback should be addressed now.",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-454495770,454495770,
FrancisPouliot,2019-01-22T21:30:25Z,"Concept ack. Many web services (including mine) derive receiving addresses from external xpub and need to run some other utility like pycoin to do this, and then import adresses in Bitcoin Core to watch them. \n\n\n\n",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-456570874,456570874,
sipa,2019-01-25T03:55:01Z,utACK f8f115da64f18e3b81e6cbaa0f26d96156acfc3c,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-457447075,457447075,
meshcollider,2019-01-26T20:03:54Z,utACK https://github.com/bitcoin/bitcoin/commit/f8f115da64f18e3b81e6cbaa0f26d96156acfc3c,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-457861671,457861671,
fanquake,2019-01-27T03:56:50Z,"testing f8f115d. `bitcoind` will abort if you pass a range begin < 0; \n\ni.e `src/bitcoin-cli deriveaddresses ""wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)"" -1 0`\n\n```\n2019-01-27T03:47:50Z UpdateTip: new best=0000000000000000002d802cf5fdbbfa94926be7f03b40be75eb6c3c13cbc8e4 height=560180 versio",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-457887001,457887001,
Sjors,2019-01-29T15:53:53Z,"> bitcoind will abort if you pass a range begin < 0;\n\nPff, don't do that! :-) Fixed (with test).\n\n@MarcoFalke maybe we can expand `RPCTypeCheck` to also enforce constraints like minimum value?",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-458593353,458593353,
MarcoFalke,2019-01-29T15:58:41Z,"Indeed, we could pass a lambda into the RPCHelpMan to validate the value and use the passed in type to validate the type (and thus get rid of `RPCTypeCheck` completely)",https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-458595397,458595397,
Sjors,2019-01-29T16:37:53Z,Rebased due to somewhat [inexplicable Travis failure](https://travis-ci.org/bitcoin/bitcoin/jobs/485972567).,https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-458611334,458611334,
practicalswift,2018-11-07T09:06:33Z,Nit: `request.params.empty()` instead of `request.params.size() < 1` :-),https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426065,231426065,src/rpc/misc.cpp
practicalswift,2018-11-07T09:07:10Z,Remove this unused variable :-),https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426262,231426262,src/rpc/misc.cpp
meshcollider,2018-11-09T02:20:06Z,"It would be easy enough to add support for picking a specific index from a ranged descriptor, is there a reason you chose to disallow it? Just add a second parameter which specifies the index.\nEDIT: thinking about it, it would be just as easy to not use a ranged descriptor if we're only using a single key, don't worry.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232125638,232125638,src/rpc/misc.cpp
sipa,2018-11-10T04:02:47Z,"It seems a weird anti-feature to me. I don't understand why you're adding extra complexity to the function just to prevent a range. If you only want one, you can still do so.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232440632,232440632,src/rpc/misc.cpp
Sjors,2018-11-10T08:24:29Z,"I initially did that to prevent extra complexity, but I've actually encountered a situation where allowing ranges would be very useful. Will change this to return an array.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232445912,232445912,src/rpc/misc.cpp
meshcollider,2018-11-10T10:49:08Z,@Sjors I assume that also includes allowing `combo` right? Sounds good 👍 ,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232448996,232448996,src/rpc/misc.cpp
Sjors,2018-11-10T16:22:30Z,"@MeshCollider yes, no reason anymore to exclude `combo()`",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232457338,232457338,src/rpc/misc.cpp
sipa,2018-11-11T03:05:05Z,This doesn't seem to belong in this file (the file is specific per PR).,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232473043,232473043,doc/release-notes-13152.md
Sjors,2018-11-11T13:04:44Z,"listwalletdir was already hijacking that file, so I joined, but I can add a new one.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232487197,232487197,doc/release-notes-13152.md
MarcoFalke,2018-11-14T15:32:21Z,In which case we could add them to the main file in the first place.,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r233495555,233495555,doc/release-notes-13152.md
Sjors,2018-11-19T13:26:36Z,"I thought the point of these extra files was mainly to prevent constant rebasing, which seemed mostly a result of different sections interfering, and less when you're just adding one line an existing entry. Though I'm not sure exactly what trips up git.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234616490,234616490,doc/release-notes-13152.md
MarcoFalke,2018-11-19T14:50:27Z,"This file was removed in master. Also, if another patch added a line in the meantime, git(hub) would also report a merge conflict.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234646424,234646424,doc/release-notes-13152.md
meshcollider,2018-11-19T19:12:21Z,Should be plural now :),https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234745960,234745960,src/rpc/misc.cpp
meshcollider,2018-11-19T19:15:14Z,"I feel like this is unnecessarily complicated, I'd prefer just start and end parameters without the ""n"" parameter",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234746802,234746802,src/rpc/misc.cpp
sipa,2019-01-08T16:03:49Z,"Nit: This condition would appear when the scriptPubKey does not have a corresponding address (I think this is only currently possible through ""raw"" or through bare multisig). Perhaps a better error message is possible?",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246053284,246053284,src/rpc/misc.cpp
promag,2019-01-08T23:25:35Z,bad indentation?,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246197219,246197219,src/rpc/misc.cpp
promag,2019-01-08T23:27:23Z,indentation.,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246198490,246198490,src/rpc/misc.cpp
promag,2019-01-08T23:28:10Z,validate range_start < range_end?,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199058,246199058,src/rpc/misc.cpp
promag,2019-01-08T23:28:44Z,"micronit, s/start/begin?",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199475,246199475,src/rpc/misc.cpp
promag,2019-01-08T23:30:44Z,missing test for this error.,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246200765,246200765,src/rpc/misc.cpp
promag,2019-01-08T23:31:30Z,Could also have a test for this error?,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201276,246201276,src/rpc/misc.cpp
promag,2019-01-08T23:32:24Z,Is it possible to return empty?,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201874,246201874,src/rpc/misc.cpp
Sjors,2019-01-09T18:51:04Z,"If anyone has an example (raw) descriptor that triggers this error, I can add it, and think of a better message.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246498068,246498068,src/rpc/misc.cpp
Sjors,2019-01-09T18:59:49Z,"Addresses can be an empty UniValue array in theory: `UniValue addresses(UniValue::VARR);`\n\nI guess not in practice, do you want an error check?",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246500830,246500830,src/rpc/misc.cpp
sipa,2019-01-09T19:55:05Z,"Try ""multi(1,key1,key2)"" for some public keys.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246517887,246517887,src/rpc/misc.cpp
Sjors,2019-01-15T18:05:42Z,"Added the bare multisig example and reworded error to ""Descriptor does not have a corresponding address"".",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248002214,248002214,src/rpc/misc.cpp
Sjors,2019-01-15T18:09:59Z,Added check and test.,https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248003602,248003602,src/rpc/misc.cpp
Sjors,2019-01-15T18:14:22Z,"I added an RPC error in case the result is empty. I don't know how to produce that, so there's no test.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248005175,248005175,src/rpc/misc.cpp
MarcoFalke,2019-01-29T16:58:41Z,"Compile failure can be fixed with (large diff due to whitespace fixes)\n\n```diff\ndiff --git a/src/rpc/misc.cpp b/src/rpc/misc.cpp\nindex 12d165fff7..e9ff8a8040 100644\n--- a/src/rpc/misc.cpp\n+++ b/src/rpc/misc.cpp\n@@ -145,30 +145,29 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n \n UniValue deriveaddresses(const JSONRPCRequest& request)\n {\n-    if (request.fHel",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r251924258,251924258,src/rpc/misc.cpp
Sjors,2019-01-29T17:14:41Z,"Thanks, done.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r251931106,251931106,src/rpc/misc.cpp
instagibbs,2019-02-06T14:29:24Z,"grammar nit: ""Range should be greater than or equal to 0""",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r254291800,254291800,src/rpc/misc.cpp
instagibbs,2019-02-06T14:30:35Z,"meta-nit: #14491 uses ""start"", not ""begin"". Would be nice to sync these.",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r254292293,254292293,src/rpc/misc.cpp
instagibbs,2019-02-06T14:39:56Z,"I'd add a wallet roundtrip test like:\n\n```\nwpkh_info = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress("""", ""bech32""))\n# Trim the witness part of descriptor off, check pkh entry in wallet, match descriptor\npkh_desc = wpkh_info[""desc""][1:]\npkh_addr = self.nodes[0].deriveaddresses(pkh_desc)\npkh_info = self.nodes[0].getaddressinfo(pkh_addr)\nassert_equal(wpkh_info[""hdkeypath""],",https://github.com/bitcoin/bitcoin/pull/14667#discussion_r254296291,254296291,test/functional/rpc_deriveaddresses.py
