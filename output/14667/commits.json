[
  {
    "sha": "595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTUyODM4NTFkOGZlM2UxODU1M2ZkYjJhZDZlNzczZTFhOWMxYTIy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-01-09T19:16:46Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-01-29T17:14:23Z"
      },
      "message": "[rpc] util: add deriveaddresses method",
      "tree": {
        "sha": "0a6109e58288b2d4ba192f580e287ba72c890bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a6109e58288b2d4ba192f580e287ba72c890bef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlxQifAACgkQV/+b28ww\nEAn6OA//adHuMrxIVO98Yuk/hKTqvDpSQXr4P61d8cTytYbFbhIZ9+93nV3Msj+E\nzJic6V+cdwOgLviHlAnwfJCMdhX9HENGv9I8vJVzRbCRk3VyslJdcHm31/jpgOAB\nHy+dWbqOW3CJivZ3HmfDJ8yxZcRhtAVE+QUiJu20PKD/oUAJqrGtzuIdzk5Qul8t\nnKWvtn2PxV73cHAmepU0MT5BCmegA2pTqfJpFsWAW8FgetJJsWwXp1IcEaDvDOBW\nqKLLXDxqotp91KmQqLY0jdmzkrN+8gafI1IhdyTw4SOCm7/VAwcob61d4aLIOaM3\nOpMbCcUFvBLVnKdTcqFKESD50fJUkeMwHSXmUuWUB5/YoHvdAXvQGiu+XxH2X3pm\nMfcoadvDIEQ4CYZeUuXa7rE3ASTz7mfCpYQ8tbA/xCIJpKG3AaAw72qn5KXX8luD\nk1PNFGjNjmw0WF5Y1fz5h0Q3p+YFECeaJzMIK8T3Q7HAguWPs2jKgnbJEmarRmci\ntgMkzhPP4a5/WcxadwMswOb6BZ/7dpjb2EAlWNWvw7VnP9by94OVyTIZiSP6fJ2K\nJFk7hN8kN+Z+Jq7G81iUHDPSJeyZGyCVK2iFV7AOFYFFC/eBb1Gqj0cpDE3drhU4\n3QvWEV8zNRE6ZVQWUwnDeoQZeXrIt6/WNNMFPZXH+a3RVhVb0bw=\n=sgTh\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a6109e58288b2d4ba192f580e287ba72c890bef\nparent 7275365c9bc7e7ebd6bbf7dcb251946aac44b5de\nauthor Sjors Provoost <sjors@sprovoost.nl> 1547061406 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1548782063 +0100\n\n[rpc] util: add deriveaddresses method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7275365c9bc7e7ebd6bbf7dcb251946aac44b5de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7275365c9bc7e7ebd6bbf7dcb251946aac44b5de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7275365c9bc7e7ebd6bbf7dcb251946aac44b5de"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5cb1d0aee77ce9678850b37252ee191329fb500f",
        "filename": "doc/release-notes-14667.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/doc/release-notes-14667.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/doc/release-notes-14667.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14667.md?ref=595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "patch": "@@ -0,0 +1,4 @@\n+New RPC methods\n+------------\n+\n+- `deriveaddresses` returns one or more addresses corresponding to an [output descriptor](/doc/descriptors.md)."
      },
      {
        "sha": "3d0a165122ddb51f20a202560f8122f1b8ae43cb",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "patch": "@@ -68,6 +68,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 4, \"subtractfeefrom\" },\n     { \"sendmany\", 5 , \"replaceable\" },\n     { \"sendmany\", 6 , \"conf_target\" },\n+    { \"deriveaddresses\", 1, \"begin\" },\n+    { \"deriveaddresses\", 2, \"end\" },\n     { \"scantxoutset\", 1, \"scanobjects\" },\n     { \"addmultisigaddress\", 0, \"nrequired\" },\n     { \"addmultisigaddress\", 1, \"keys\" },"
      },
      {
        "sha": "70cc96c405c49031c186a279d679d17ee7a47968",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 0,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "patch": "@@ -16,6 +16,7 @@\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n #include <timedata.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n@@ -142,6 +143,95 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+            {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"},\n+            {\n+                {\"descriptor\", RPCArg::Type::STR, /* opt */ false, /* default_val */ \"\", \"The descriptor.\"},\n+                {\"begin\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the beginning of the range to import.\"},\n+                {\"end\", RPCArg::Type::NUM, /* opt */ true, /* default_val */ \"\", \"If a ranged descriptor is used, this specifies the end of the range to import.\"}\n+            },\n+            RPCResult{\n+                \"[ address ] (array) the derived addresses\\n\"\n+            },\n+            RPCExamples{\n+                \"First three native segwit receive addresses\\n\" +\n+                HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\")\n+            }}.ToString()\n+        );\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_begin = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_begin = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+        if (range_begin < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should be greater or equal than 0\");\n+        }\n+        if (range_begin > range_end) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range end should be equal to or greater than begin\");\n+        }\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_begin; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor does not have a corresponding address\"));\n+            }\n+\n+            addresses.push_back(EncodeDestination(dest));\n+        }\n+    }\n+\n+    // This should not be possible, but an assert seems overkill:\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Unexpected empty result\");\n+    }\n+\n+    return addresses;\n+}\n+\n static UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n@@ -473,6 +563,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} },\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n+    { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"begin\", \"end\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "2cc5bc974bb60c95d951812ae25b00d50a85b7a3",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the deriveaddresses rpc call.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class DeriveaddressesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.supports_cli = 1\n+\n+    def run_test(self):\n+        assert_raises_rpc_error(-5, \"Invalid descriptor\", self.nodes[0].deriveaddresses, \"a\")\n+\n+        descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+\n+        assert_equal(self.nodes[0].deriveaddresses(descriptor), [address])\n+\n+        descriptor_pubkey = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"\n+        address = \"bcrt1qjqmxmkpmxt80xz4y3746zgt0q3u3ferr34acd5\"\n+\n+        assert_equal(self.nodes[0].deriveaddresses(descriptor_pubkey), [address])\n+\n+        ranged_descriptor = \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\"\n+        assert_equal(self.nodes[0].deriveaddresses(ranged_descriptor, 0, 2), [address, \"bcrt1qhku5rq7jz8ulufe2y6fkcpnlvpsta7rq4442dy\", \"bcrt1qpgptk2gvshyl0s9lqshsmx932l9ccsv265tvaq\"])\n+\n+        assert_raises_rpc_error(-8, \"Range should not be specified for an un-ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\", 0, 2)\n+\n+        assert_raises_rpc_error(-8, \"Range must be specified for a ranged descriptor\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\")\n+\n+        assert_raises_rpc_error(-8, \"Missing range end parameter\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 0)\n+\n+        assert_raises_rpc_error(-8, \"Range end should be equal to or greater than begin\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", 2, 0)\n+\n+        assert_raises_rpc_error(-8, \"Range should be greater or equal than 0\", self.nodes[0].deriveaddresses, \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", -1, 0)\n+\n+        combo_descriptor = \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"\n+        assert_equal(self.nodes[0].deriveaddresses(combo_descriptor), [\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", \"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", address, \"2NDvEwGfpEqJWfybzpKPHF2XH3jwoQV3D7x\"])\n+\n+        hardened_without_privkey_descriptor = \"wpkh(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1'/1/0)\"\n+        assert_raises_rpc_error(-5, \"Cannot derive script without private keys\", self.nodes[0].deriveaddresses, hardened_without_privkey_descriptor)\n+\n+        bare_multisig_descriptor = \"multi(1, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0, tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"\n+        assert_raises_rpc_error(-5, \"Descriptor does not have a corresponding address\", self.nodes[0].deriveaddresses, bare_multisig_descriptor)\n+\n+if __name__ == '__main__':\n+    DeriveaddressesTest().main()"
      },
      {
        "sha": "3ddd5a299a04593b83c287956629bb6bc74f9121",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/595283851d8fe3e18553fdb2ad6e773e1a9c1a22/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=595283851d8fe3e18553fdb2ad6e773e1a9c1a22",
        "patch": "@@ -181,6 +181,8 @@\n     'feature_filelock.py',\n     'p2p_unrequested_blocks.py',\n     'feature_includeconf.py',\n+    'rpc_deriveaddresses.py',\n+    'rpc_deriveaddresses.py --usecli',\n     'rpc_scantxoutset.py',\n     'feature_logging.py',\n     'p2p_node_network_limited.py',"
      }
    ]
  }
]