[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360259589",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360259589",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264",
    "id": 360259589,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDI1OTU4OQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-24T20:15:18Z",
    "updated_at": "2018-01-24T20:15:18Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360259589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360427994",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360427994",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264",
    "id": 360427994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQyNzk5NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T10:37:39Z",
    "updated_at": "2018-01-25T10:37:39Z",
    "author_association": "MEMBER",
    "body": "Seems to need rebase (already?).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360427994/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360445267",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360445267",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264",
    "id": 360445267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ0NTI2Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T11:53:28Z",
    "updated_at": "2018-01-25T11:53:28Z",
    "author_association": "MEMBER",
    "body": "utACK f36607eb8c Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360445267/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360460221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#issuecomment-360460221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12264",
    "id": 360460221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MDQ2MDIyMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-25T13:01:55Z",
    "updated_at": "2018-01-25T13:01:55Z",
    "author_association": "MEMBER",
    "body": "rebased (test file name change)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360460221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163662410",
    "pull_request_review_id": 91312035,
    "id": 163662410,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2MjQxMA==",
    "diff_hunk": "@@ -59,47 +60,42 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         peer.sync_with_ping()\n \n     def test_versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\n+\n+        Note that this is only called after the node is shutdown, so doesn't need\n+        a wait_until wrapper.\"\"\"\n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n         assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-\n         network_thread_start()\n-\n-        # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()\n \n-        # 1. Have the node mine one period worth of blocks\n+        # Mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n \n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n-\n-        # Fill rest of period with regular version blocks\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n+\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 71,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "f96b1eca3bf4dd0b4b06e0cd7e3b43c28c6dc5f2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should say more than 50, not less than",
    "created_at": "2018-01-24T20:02:55Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163662410",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163662410"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163662410"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163662410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163663927",
    "pull_request_review_id": 91313867,
    "id": 163663927,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2MzkyNw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: 60 seconds seems overkill, what about 5 or 10?",
    "created_at": "2018-01-24T20:09:15Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163663927",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163663927"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163663927"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163663927/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163665254",
    "pull_request_review_id": 91315353,
    "id": 163665254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY2NTI1NA==",
    "diff_hunk": "@@ -35,87 +34,79 @@ def set_test_params(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with nVersionToUse set.\n-    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+    def send_blocks_with_version(self, peer, numblocks, version):\n+        \"\"\"Send numblocks blocks to peer with version set\"\"\"\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n-        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height+1), block_time)\n-            block.nVersion = nVersionToUse\n+            block = create_block(tip, create_coinbase(height + 1), block_time)\n+            block.nVersion = version\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1\n             height += 1\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n-\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n+        node.p2p.wait_for_verack()\n \n-        # Test logic begins here\n-        self.nodes[0].p2p.wait_for_verack()\n-\n-        # 1. Have the node mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n-\n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD-1, nVersion)\n-\n-        # Fill rest of period with regular version blocks\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n-\n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, nVersion)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        # Mine one period worth of blocks\n+        node.generate(VB_PERIOD)\n \n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This should move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n-            pass\n-        self.start_nodes()\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n+        self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 163,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Generating that block will not help to get us out of ibd any sooner. Am I mistaken?",
    "created_at": "2018-01-24T20:14:35Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163665254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163665254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163665254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163665254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 101,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680166",
    "pull_request_review_id": 91333271,
    "id": 163680166,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDE2Ng==",
    "diff_hunk": "@@ -59,47 +60,42 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         peer.sync_with_ping()\n \n     def test_versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\n+\n+        Note that this is only called after the node is shutdown, so doesn't need\n+        a wait_until wrapper.\"\"\"\n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n         assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-\n         network_thread_start()\n-\n-        # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()\n \n-        # 1. Have the node mine one period worth of blocks\n+        # Mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n \n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n-\n-        # Fill rest of period with regular version blocks\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n+\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 71,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "f96b1eca3bf4dd0b4b06e0cd7e3b43c28c6dc5f2",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, fixed",
    "created_at": "2018-01-24T21:16:28Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680166",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680166"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680166"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680166/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 92,
    "side": "RIGHT",
    "in_reply_to_id": 163662410
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680243",
    "pull_request_review_id": 91333357,
    "id": 163680243,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDI0Mw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "no harm in having it longer",
    "created_at": "2018-01-24T21:16:45Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680243",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680243"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680243"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 163663927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680400",
    "pull_request_review_id": 91333520,
    "id": 163680400,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzY4MDQwMA==",
    "diff_hunk": "@@ -35,87 +34,79 @@ def set_test_params(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with nVersionToUse set.\n-    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+    def send_blocks_with_version(self, peer, numblocks, version):\n+        \"\"\"Send numblocks blocks to peer with version set\"\"\"\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n-        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height+1), block_time)\n-            block.nVersion = nVersionToUse\n+            block = create_block(tip, create_coinbase(height + 1), block_time)\n+            block.nVersion = version\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1\n             height += 1\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n-        self.nodes[0].add_p2p_connection(TestNode())\n-\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n+        node.p2p.wait_for_verack()\n \n-        # Test logic begins here\n-        self.nodes[0].p2p.wait_for_verack()\n-\n-        # 1. Have the node mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n-\n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD-1, nVersion)\n-\n-        # Fill rest of period with regular version blocks\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n-\n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, nVersion)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n+        # Mine one period worth of blocks\n+        node.generate(VB_PERIOD)\n \n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This should move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n-            pass\n-        self.start_nodes()\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Check that get*info() shows the 51/100 unknown block version error.\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n+\n+        self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 163,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "generating a block *guarantees* that we'll get out of IBD. I've updated the comment.",
    "created_at": "2018-01-24T21:17:20Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680400",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680400"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163680400"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163680400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 101,
    "side": "RIGHT",
    "in_reply_to_id": 163665254
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717827",
    "pull_request_review_id": 91376395,
    "id": 163717827,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxNzgyNw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I sometimes make tests fail on purpose, so having to wait a minute (or going into the test each time and having to modify it) is somewhat inconvenient.",
    "created_at": "2018-01-25T00:10:52Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163717827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163717827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163717827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 163663927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718077",
    "pull_request_review_id": 91376714,
    "id": 163718077,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxODA3Nw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Also, should the test fail for some reason, the earlier you know the better. As a rule of thumb, I estimate the time it would take to fulfill the predicate, double that for travis, then double again just to be safe.",
    "created_at": "2018-01-25T00:12:46Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718077",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718077"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718077"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 163663927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718203",
    "pull_request_review_id": 91376856,
    "id": 163718203,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzcxODIwMw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can change the timeout on your failure-triggering case \ud83d\ude42 \r\n\r\nIn my opinion it's better to have this too long than too short, to avoid spurious Travis failures.",
    "created_at": "2018-01-25T00:13:33Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718203",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718203"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163718203"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163718203/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 163663927
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163805033",
    "pull_request_review_id": 91476017,
    "id": 163805033,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgwNTAzMw==",
    "diff_hunk": "@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block will get us out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)",
    "path": "test/functional/p2p-versionbits-warning.py",
    "position": null,
    "original_position": 117,
    "commit_id": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "original_commit_id": "9100159ddd3bb01b5703e1ef43fa2563e656f38b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I also prefer waiting on the long side, if it doesn't slow down the test in the passing case. Travis can be really slow when the servers are contended.",
    "created_at": "2018-01-25T10:37:29Z",
    "updated_at": "2018-01-25T13:01:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163805033",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163805033"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12264#discussion_r163805033"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12264"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/163805033/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 109,
    "side": "RIGHT",
    "in_reply_to_id": 163663927
  }
]