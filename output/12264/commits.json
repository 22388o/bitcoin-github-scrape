[
  {
    "sha": "ef2beb2c1300b0725cf06ac9309c35a8046936f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjJiZWIyYzEzMDBiMDcyNWNmMDZhYzkzMDljMzVhODA0NjkzNmYz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T17:45:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "message": "Fix flake8 warnings in p2p-versionbits-warning.py",
      "tree": {
        "sha": "7f7249a90a3cb13b2950c63b9bc104138ffe6db5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7249a90a3cb13b2950c63b9bc104138ffe6db5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6970b30c6f1d2be7947295fe18f2390649b17a4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6970b30c6f1d2be7947295fe18f2390649b17a4b"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "8ae78898d02405ab50a40db266ff224a9789fa56",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef2beb2c1300b0725cf06ac9309c35a8046936f3/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef2beb2c1300b0725cf06ac9309c35a8046936f3/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=ef2beb2c1300b0725cf06ac9309c35a8046936f3",
        "patch": "@@ -7,17 +7,18 @@\n Generate chains with block versions that appear to be signalling unknown\n soft-forks, and test that warning alerts are generated.\n \"\"\"\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+import os\n import re\n+\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import msg_block\n+from test_framework.mininode import P2PInterface, network_thread_start\n+from test_framework.test_framework import BitcoinTestFramework\n \n-VB_PERIOD = 144 # versionbits period length for regtest\n-VB_THRESHOLD = 108 # versionbits activation threshold for regtest\n+VB_PERIOD = 144           # versionbits period length for regtest\n+VB_THRESHOLD = 108        # versionbits activation threshold for regtest\n VB_TOP_BITS = 0x20000000\n-VB_UNKNOWN_BIT = 27 # Choose a bit unassigned to any deployment\n+VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n \n WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n@@ -35,21 +36,21 @@ def set_test_params(self):\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with nVersionToUse set.\n-    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+    # Send numblocks blocks via peer with version set.\n+    def send_blocks_with_version(self, peer, numblocks, version):\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n-        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height+1), block_time)\n-            block.nVersion = nVersionToUse\n+            block = create_block(tip, create_coinbase(height + 1), block_time)\n+            block.nVersion = version\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1\n@@ -76,8 +77,8 @@ def run_test(self):\n \n         # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n         # blocks signaling some unknown bit.\n-        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD-1, nVersion)\n+        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n \n         # Fill rest of period with regular version blocks\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n@@ -88,7 +89,7 @@ def run_test(self):\n \n         # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n         # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, nVersion)\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n         # Might not get a versionbits-related alert yet, as we should\n         # have gotten a different alert due to more than 51/100 blocks\n@@ -103,7 +104,7 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD)\n         self.stop_nodes()\n         # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8') as _:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass\n         self.start_nodes()\n "
      }
    ]
  },
  {
    "sha": "3bbd8437089bfd3c7fe336a1f685894a314ea98e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmJkODQzNzA4OWJmZDNjN2ZlMzM2YTFmNjg1ODk0YTMxNGVhOThl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T17:57:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "message": "Improve comments/logging in p2p-versionbits-warning.py",
      "tree": {
        "sha": "57bdf9c2e539521374aa3cc7fbfbda38c089156d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57bdf9c2e539521374aa3cc7fbfbda38c089156d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef2beb2c1300b0725cf06ac9309c35a8046936f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef2beb2c1300b0725cf06ac9309c35a8046936f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef2beb2c1300b0725cf06ac9309c35a8046936f3"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 19,
      "deletions": 22
    },
    "files": [
      {
        "sha": "9fe6270ea7d1b75aa448c9fb26f11e938eb4f6aa",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 19,
        "deletions": 22,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bbd8437089bfd3c7fe336a1f685894a314ea98e/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bbd8437089bfd3c7fe336a1f685894a314ea98e/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=3bbd8437089bfd3c7fe336a1f685894a314ea98e",
        "patch": "@@ -19,6 +19,7 @@\n VB_THRESHOLD = 108        # versionbits activation threshold for regtest\n VB_TOP_BITS = 0x20000000\n VB_UNKNOWN_BIT = 27       # Choose a bit unassigned to any deployment\n+VB_UNKNOWN_VERSION = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n \n WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n@@ -41,8 +42,8 @@ def setup_network(self):\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n         self.setup_nodes()\n \n-    # Send numblocks blocks via peer with version set.\n     def send_blocks_with_version(self, peer, numblocks, version):\n+        \"\"\"Send numblocks blocks to peer with version set\"\"\"\n         tip = self.nodes[0].getbestblockhash()\n         height = self.nodes[0].getblockcount()\n         block_time = self.nodes[0].getblockheader(tip)[\"time\"] + 1\n@@ -59,47 +60,42 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         peer.sync_with_ping()\n \n     def test_versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\n+\n+        Note that this is only called after the node is shutdown, so doesn't need\n+        a wait_until wrapper.\"\"\"\n         with open(self.alert_filename, 'r', encoding='utf8') as f:\n             alert_text = f.read()\n         assert(VB_PATTERN.match(alert_text))\n \n     def run_test(self):\n-        # Setup the p2p connection and start up the network thread.\n         self.nodes[0].add_p2p_connection(TestNode())\n-\n         network_thread_start()\n-\n-        # Test logic begins here\n         self.nodes[0].p2p.wait_for_verack()\n \n-        # 1. Have the node mine one period worth of blocks\n+        # Mine one period worth of blocks\n         self.nodes[0].generate(VB_PERIOD)\n \n-        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n-        # blocks signaling some unknown bit.\n-        version = VB_TOP_BITS | (1 << VB_UNKNOWN_BIT)\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, version)\n-\n-        # Fill rest of period with regular version blocks\n+        self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n+        # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n-        # Check that we're not getting any versionbit-related errors in\n-        # get*info()\n+\n+        # Check that we're not getting any versionbit-related errors in get*info()\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n-        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n-        # some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, version)\n+        # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n+        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n-        # Might not get a versionbits-related alert yet, as we should\n-        # have gotten a different alert due to more than 51/100 blocks\n-        # being of unexpected version.\n-        # Check that get*info() shows some kind of error.\n+\n+        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n+        # Check that get*info() shows the 51/100 unknown block version error.\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n         # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This should move the versionbit state\n+        # is cleared, and restart the node. This will move the versionbit state\n         # to ACTIVE.\n         self.nodes[0].generate(VB_PERIOD)\n         self.stop_nodes()\n@@ -108,6 +104,7 @@ def run_test(self):\n             pass\n         self.start_nodes()\n \n+        self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])"
      }
    ]
  },
  {
    "sha": "1e2e09e2f6382ed239d974720126c642c3e3690c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTJlMDllMmY2MzgyZWQyMzlkOTc0NzIwMTI2YzY0MmMzZTM2OTBj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-24T18:29:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-01-25T12:34:58Z"
      },
      "message": "Fix intermittent failure in p2p-versionbits-warning.py\n\nMakes following changes to fix and tidy up p2p-versionbits-warning.py:\n- add node alias in the run() method\n- call versionbits_in_alert_file() in a wait_until loop.\n- don't clear out the alert.txt file\n- explicitly comment why the node needs to be stop-started\n- Verify that the node is out of IBD after stop-start (nodes in IBD do\nnot generate alert messages)\n- no need to subclass P2PInterface",
      "tree": {
        "sha": "737acedfd3ef3f5e3a9c2ba96276e7b8c2cb4f14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737acedfd3ef3f5e3a9c2ba96276e7b8c2cb4f14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e2e09e2f6382ed239d974720126c642c3e3690c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2e09e2f6382ed239d974720126c642c3e3690c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e2e09e2f6382ed239d974720126c642c3e3690c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e2e09e2f6382ed239d974720126c642c3e3690c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bbd8437089bfd3c7fe336a1f685894a314ea98e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bbd8437089bfd3c7fe336a1f685894a314ea98e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bbd8437089bfd3c7fe336a1f685894a314ea98e"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 38,
      "deletions": 45
    },
    "files": [
      {
        "sha": "2985569a8fca3ee037afc2403dc44f472a92f211",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 38,
        "deletions": 45,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e2e09e2f6382ed239d974720126c642c3e3690c/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e2e09e2f6382ed239d974720126c642c3e3690c/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=1e2e09e2f6382ed239d974720126c642c3e3690c",
        "patch": "@@ -12,8 +12,9 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import msg_block\n-from test_framework.mininode import P2PInterface, network_thread_start\n+from test_framework.mininode import P2PInterface, network_thread_start, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import wait_until\n \n VB_PERIOD = 144           # versionbits period length for regtest\n VB_THRESHOLD = 108        # versionbits activation threshold for regtest\n@@ -23,11 +24,7 @@\n \n WARN_UNKNOWN_RULES_MINED = \"Unknown block versions being mined! It's possible unknown rules are in effect\"\n WARN_UNKNOWN_RULES_ACTIVE = \"unknown new rules activated (versionbit {})\".format(VB_UNKNOWN_BIT)\n-VB_PATTERN = re.compile(\"^Warning.*versionbit\")\n-\n-class TestNode(P2PInterface):\n-    def on_inv(self, message):\n-        pass\n+VB_PATTERN = re.compile(\"Warning: unknown new rules activated.*versionbit\")\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -59,61 +56,57 @@ def send_blocks_with_version(self, peer, numblocks, version):\n             tip = block.sha256\n         peer.sync_with_ping()\n \n-    def test_versionbits_in_alert_file(self):\n-        \"\"\"Test that the versionbits warning has been written to the alert file.\n-\n-        Note that this is only called after the node is shutdown, so doesn't need\n-        a wait_until wrapper.\"\"\"\n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n-        assert(VB_PATTERN.match(alert_text))\n+    def versionbits_in_alert_file(self):\n+        \"\"\"Test that the versionbits warning has been written to the alert file.\"\"\"\n+        alert_text = open(self.alert_filename, 'r', encoding='utf8').read()\n+        return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        self.nodes[0].add_p2p_connection(TestNode())\n+        # Handy alias\n+        node = self.nodes[0]\n+        node.add_p2p_connection(P2PInterface())\n         network_thread_start()\n-        self.nodes[0].p2p.wait_for_verack()\n+        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n-        self.nodes[0].generate(VB_PERIOD)\n+        node.generate(VB_PERIOD)\n \n         self.log.info(\"Check that there is no warning if previous VB_BLOCKS have <VB_THRESHOLD blocks with unknown versionbits version.\")\n         # Build one period of blocks with < VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD - 1, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD + 1)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n+        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n \n+        self.log.info(\"Check that there is a warning if >50 blocks in the last 100 were an unknown version\")\n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n-        self.send_blocks_with_version(self.nodes[0].p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n-        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n+        node.generate(VB_PERIOD - VB_THRESHOLD)\n \n-        self.log.info(\"Check that there is a warning if <50 blocks in the last 100 were an unknown version\")\n         # Check that get*info() shows the 51/100 unknown block version error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-\n-        # Mine a period worth of expected blocks so the generic block-version warning\n-        # is cleared, and restart the node. This will move the versionbit state\n-        # to ACTIVE.\n-        self.nodes[0].generate(VB_PERIOD)\n-        self.stop_nodes()\n-        # Empty out the alert file\n-        with open(self.alert_filename, 'w', encoding='utf8'):\n-            pass\n-        self.start_nodes()\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_MINED in node.getnetworkinfo()[\"warnings\"])\n \n         self.log.info(\"Check that there is a warning if previous VB_BLOCKS have >=VB_THRESHOLD blocks with unknown versionbits version.\")\n-        # Connecting one block should be enough to generate an error.\n-        self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        self.stop_nodes()\n-        self.test_versionbits_in_alert_file()\n-\n-        # Test framework expects the node to still be running...\n-        self.start_nodes()\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared. This will move the versionbit state to ACTIVE.\n+        node.generate(VB_PERIOD)\n+\n+        # Stop-start the node. This is required because bitcoind will only warn once about unknown versions or unknown rules activating.\n+        self.restart_node(0)\n+\n+        # Generating one block guarantees that we'll get out of IBD\n+        node.generate(1)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        # Generating one more block will be enough to generate an error.\n+        node.generate(1)\n+        # Check that get*info() shows the versionbits unknown rules warning\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n+        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        # Check that the alert file shows the versionbits unknown rules warning\n+        wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      }
    ]
  }
]