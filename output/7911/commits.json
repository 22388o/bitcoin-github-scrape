[
  {
    "sha": "a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDYyNWFjYmY4YWZiZTNmNjk4ZThkYzc5MzYzMTJjOWQyYjY1ZDIy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-02-17T19:35:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T18:37:15Z"
      },
      "message": "leveldb: integrate leveldb into our buildsystem\n\nleveldb's buildsystem causes us a few problems:\n- breaks out-of-tree builds\n- forces flags used for some tools\n- limits cross builds\n\nRather than continuing to add wrappers around it, simply integrate it into our\nbuild.",
      "tree": {
        "sha": "0b9f648869425e3d5443c384f6cd134f9d211d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b9f648869425e3d5443c384f6cd134f9d211d47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04a29373571d44be36bd099c3b3ec3cda89e99d1"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 106,
      "deletions": 19
    },
    "files": [
      {
        "sha": "03b90521045edb2a1c9b50c69235ed2039edbf03",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
        "patch": "@@ -267,7 +267,7 @@ case $host in\n      fi\n \n      CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_WINDOWS\"\n      if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n        CXXFLAGS=\"$CXXFLAGS -w\"\n      fi\n@@ -289,7 +289,7 @@ case $host in\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"\n+     LEVELDB_TARGET_FLAGS=\"-DOS_MACOSX\"\n      if  test x$cross_compiling != xyes; then\n        BUILD_OS=darwin\n        AC_CHECK_PROG([PORT],port, port)\n@@ -354,9 +354,11 @@ case $host in\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n    *linux*)\n-     TARGET_OS=linux\n+     LEVELDB_TARGET_FLAGS=\"-DOS_LINUX\"\n      ;;\n    *)\n+     OTHER_OS=`echo ${host_os} | awk '{print toupper($0)}'`\n+     LEVELDB_TARGET_FLAGS=\"-DOS_${OTHER_OS}\"\n      ;;\n esac\n \n@@ -541,6 +543,18 @@ if test x$use_reduce_exports = xyes; then\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n fi\n \n+dnl This can go away when we require c++11\n+TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\n+AC_MSG_CHECKING(for c++11 atomics)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+  #include <atomic>\n+  ]],[[]])],\n+  [ AC_MSG_RESULT(yes); LEVELDB_ATOMIC_CPPFLAGS=\"-DLEVELDB_ATOMIC_PRESENT\"; LEVELDB_ATOMIC_CXXFLAGS=\"-std=c++0x\"],\n+  [ AC_MSG_RESULT(no)]\n+)\n+CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+\n LEVELDB_CPPFLAGS=\n LIBLEVELDB=\n LIBMEMENV=\n@@ -1043,6 +1057,8 @@ AC_SUBST(TESTDEFS)\n AC_SUBST(LEVELDB_TARGET_FLAGS)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n+AC_SUBST(LEVELDB_ATOMIC_CPPFLAGS)\n+AC_SUBST(LEVELDB_ATOMIC_CXXFLAGS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])"
      },
      {
        "sha": "3c056386fac7b416375f1cc5ef37f2bc2554b7a0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 6,
        "deletions": 16,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
        "patch": "@@ -3,6 +3,7 @@ DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n+EXTRA_LIBRARIES =\n \n if EMBEDDED_UNIVALUE\n LIBUNIVALUE = univalue/libunivalue.la\n@@ -13,21 +14,6 @@ else\n LIBUNIVALUE = $(UNIVALUE_LIBS)\n endif\n \n-if EMBEDDED_LEVELDB\n-LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n-LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv\n-LIBLEVELDB += $(builddir)/leveldb/libleveldb.a\n-LIBMEMENV  += $(builddir)/leveldb/libmemenv.a\n-\n-# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race\n-$(LIBLEVELDB): $(LIBMEMENV)\n-\n-$(LIBLEVELDB) $(LIBMEMENV):\n-\t@echo \"Building LevelDB ...\" && $(MAKE) -C $(@D) $(@F) CXX=\"$(CXX)\" \\\n-\t  CC=\"$(CC)\" PLATFORM=$(TARGET_OS) AR=\"$(AR)\" $(LEVELDB_TARGET_FLAGS) \\\n-          OPT=\"$(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) -D__STDC_LIMIT_MACROS\"\n-endif\n-\n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n@@ -49,7 +35,7 @@ $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n-EXTRA_LIBRARIES = \\\n+EXTRA_LIBRARIES += \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n@@ -482,6 +468,10 @@ endif\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n \n+if EMBEDDED_LEVELDB\n+include Makefile.leveldb.include\n+endif\n+\n if ENABLE_TESTS\n include Makefile.test.include\n endif"
      },
      {
        "sha": "36a6bc4095ad0d102dee19954606449776183dca",
        "filename": "src/Makefile.leveldb.include",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4625acbf8afbe3f698e8dc7936312c9d2b65d22/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=a4625acbf8afbe3f698e8dc7936312c9d2b65d22",
        "patch": "@@ -0,0 +1,81 @@\n+LIBLEVELDB_INT = leveldb/libleveldb.a\n+LIBMEMENV_INT  = leveldb/libmemenv.a\n+\n+EXTRA_LIBRARIES += $(LIBLEVELDB_INT)\n+EXTRA_LIBRARIES += $(LIBMEMENV_INT)\n+\n+LIBLEVELDB += $(LIBLEVELDB_INT)\n+LIBMEMENV += $(LIBMEMENV_INT)\n+\n+LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n+LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/helpers/memenv\n+\n+LEVELDB_CPPFLAGS_INT =\n+LEVELDB_CPPFLAGS_INT += -I$(srcdir)/leveldb\n+LEVELDB_CPPFLAGS_INT += $(LEVELDB_TARGET_FLAGS)\n+LEVELDB_CPPFLAGS_INT += $(LEVELDB_ATOMIC_CPPFLAGS)\n+LEVELDB_CPPFLAGS_INT += -D__STDC_LIMIT_MACROS\n+\n+if TARGET_WINDOWS\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_WINDOWS -DWINVER=0x0500 -D__USE_MINGW_ANSI_STDIO=1\n+else\n+LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_POSIX\n+endif\n+\n+LEVELDB_CXXFLAGS_INT =\n+LEVELDB_CXXFLAGS_INT += $(LEVELDB_ATOMIC_CXXFLAGS)\n+\n+leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)\n+leveldb_libleveldb_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS) $(LEVELDB_CXXFLAGS_INT)\n+\n+leveldb_libleveldb_a_SOURCES=\n+leveldb_libleveldb_a_SOURCES += leveldb/db/builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/c.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/dbformat.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_impl.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/db_iter.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/dumpfile.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/filename.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_reader.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/log_writer.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/memtable.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/repair.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/table_cache.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_edit.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/version_set.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/db/write_batch.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block_builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/block.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/filter_block.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/format.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/iterator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/merger.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/table_builder.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/table.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/table/two_level_iterator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/arena.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/bloom.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/cache.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/coding.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/comparator.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/crc32c.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_posix.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_win.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/filter_policy.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/hash.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/histogram.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/logging.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/options.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/util/status.cc\n+\n+if TARGET_WINDOWS\n+leveldb_libleveldb_a_SOURCES += leveldb/util/env_win.cc\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_win.cc\n+else\n+leveldb_libleveldb_a_SOURCES += leveldb/port/port_posix.cc\n+endif\n+\n+leveldb_libmemenv_a_CPPFLAGS = $(leveldb_libleveldb_a_CPPFLAGS)\n+leveldb_libmemenv_a_CXXFLAGS = $(leveldb_libleveldb_a_CXXFLAGS)\n+leveldb_libmemenv_a_SOURCES =  leveldb/helpers/memenv/memenv.cc"
      }
    ]
  }
]