[
  {
    "sha": "ecc6cf1a3b097b9b5b047282063a0b6779631b83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2M2Y2YxYTNiMDk3YjliNWIwNDcyODIwNjNhMGI2Nzc5NjMxYjgz",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-09-23T06:40:38Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2020-10-31T15:02:49Z"
      },
      "message": "test: fix creation of std::string objects with \\0s\n\nA string literal `\"abc\"` contains a terminating `\\0`, so that is 4\nbytes. There is no need to write `\"abc\\0\"` unless two terminating\n`\\0`s are necessary.\n\n`std::string` objects do not internally contain a terminating `\\0`, so\n`std::string(\"abc\")` creates a string with size 3 and is the same as\n`std::string(\"abc\", 3)`.\n\nIn `\"\\01\"` the `01` part is interpreted as one number (1) and that is\nthe same as `\"\\1\"` which is a string like `{1, 0}` whereas `\"\\0z\"` is a\nstring like `{0, 'z', 0}`. To create a string like `{0, '1', 0}` one\nmust use `\"\\0\" \"1\"`.\n\nAdjust the tests accordingly.",
      "tree": {
        "sha": "742e8def9e830937968e79dcdb6cefc270dbf67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/742e8def9e830937968e79dcdb6cefc270dbf67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecc6cf1a3b097b9b5b047282063a0b6779631b83",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAl+dfZsACgkQVN8G9ktV\ny7/BfiAAodNKcvAmv2ItKTKq0dqjA6wzf100Rucxdn74xOczn0W48jo3XCMmQPi9\niBbRhP1PJaC76raPGXvexDCer5aROJ3Z2g9+iB99kEoTz7D9bQLcvuYBM7Tb9tIN\no+ieRGEhmJE4GzEhWDL83R/iRq8qmBS8d+ADkTjpq8IehJ7O7lsam8lx7cUNYuDp\ndPzG7SBZnTq7QhAnNoLSbmBVYf8Phy6w8B1QirGAZk5GtqADkNujOHUo7G1WV3u2\nA+cWxXQGhTFsfIubGAvSGI+9LbbkZs9sV9bcni978NUqQ/YFIRgr0cmjxjrENyUD\n2MBUB4/s1yCvwQkWmSQQB8QzbJQCKkYuJ/yRIn0HNSLKFNyYl0G6B34DHxDKrabd\nV2V6RwoVQT825q5cObff0i/uDWs0v0d29LAom+NT4snebDu3yVvD5pgTolyCl1eA\ngk0SuWmPq2OljrFa8TLPud4bjbMAzS7f9LfraW8xEbg3iI7szs7noHmEVhOqUbWN\nmwjmfCFPmxaaR0xL4agQAzcoE5bxzZ5An8PnV4KwWvxNN/NHBfxBIXqVN06j0ycT\n9RCDBNq2GU0nBGTDYZHFvt7XDZo9Wx4H0kccNNAaFdE5QuS2+9VXJnO3afLw+dwf\npy4W9z+6qktWT/Dl2gZ/Ab6EA+k929q228mxbrJAEkxa08QiL0lq3YofEf9nSjNK\ndwFOH4gpNhuoGzZo5uFjH8dSaP/krl1vUVisc9OLKLDYuy0gwzaqGK4Bi+/DVWsZ\nDcJi/MiaOYMNTztP+XYswWxQ8CxLN5n5RkXbWi5MyKOZ+qTzEkpNp24pVB05Kz4D\nW2pFAQOcIIxhiklNpQpHblz0bqpXzFJipPbvzw+0ks0gvWHPLGHUIRqrg+x0M/Ne\n5gmq5Igjf2eqdOEWJ43aE0LHRcMjfueukBRjcui627H3jk2Xn3e0IdjoSrPa/UMB\nKjMZbk6hVub0Uqmb11qaLJzTxVz1c5+eR5CJjK1TTALU2io0z7dk8iKxZml5iyjd\nV0ClkOXRvYu7TjO0hHMSmXAv8B11h+7pQhU9jrN8rZunJsxuzqA4871Ar0FxkHYN\nf44kwnmBXycw/9HOE8pQWnX1mG4LF4YbLqEdwFTSlrtrbXPJDYFBiYbsWOnSil5x\nD5rkwROf9NHTr9xuKgvBMjfuqIbSKJsKX+bGE2+J1M4bDFpp/Aq2Gu9jeuMTbRab\nI4Jv/a3mZFC8ot5CnM2cmrjLAZuBug8YlEcAc4+1tEua+ey79brEXOY0RRy/6Wt0\nCIt/wHWkG9DcGrwCWwdOAzDckM/ZF4kT5A9YaBDBL9pbgjV1GX5S0kEq5Bev3qTe\nNfEfw1vwSHlyQB7h6Gt67JmOsRhHQg==\n=dO2k\n-----END PGP SIGNATURE-----",
        "payload": "tree 742e8def9e830937968e79dcdb6cefc270dbf67e\nparent b1291b2e8fc39b366765d905200f022823e3d50b\nauthor Vasil Dimov <vd@FreeBSD.org> 1600843238 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1604156569 +0100\n\ntest: fix creation of std::string objects with \\0s\n\nA string literal `\"abc\"` contains a terminating `\\0`, so that is 4\nbytes. There is no need to write `\"abc\\0\"` unless two terminating\n`\\0`s are necessary.\n\n`std::string` objects do not internally contain a terminating `\\0`, so\n`std::string(\"abc\")` creates a string with size 3 and is the same as\n`std::string(\"abc\", 3)`.\n\nIn `\"\\01\"` the `01` part is interpreted as one number (1) and that is\nthe same as `\"\\1\"` which is a string like `{1, 0}` whereas `\"\\0z\"` is a\nstring like `{0, 'z', 0}`. To create a string like `{0, '1', 0}` one\nmust use `\"\\0\" \"1\"`.\n\nAdjust the tests accordingly.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc6cf1a3b097b9b5b047282063a0b6779631b83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecc6cf1a3b097b9b5b047282063a0b6779631b83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecc6cf1a3b097b9b5b047282063a0b6779631b83/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1291b2e8fc39b366765d905200f022823e3d50b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1291b2e8fc39b366765d905200f022823e3d50b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1291b2e8fc39b366765d905200f022823e3d50b"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 59,
      "deletions": 44
    },
    "files": [
      {
        "sha": "a734219f2c118870b0399d0820a8f88a7e325b91",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -6,6 +6,9 @@\n #include <util/strencodings.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <string>\n+\n+using namespace std::literals;\n \n BOOST_FIXTURE_TEST_SUITE(base32_tests, BasicTestingSetup)\n \n@@ -23,14 +26,14 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n \n     // Decoding strings with embedded NUL characters should fail\n     bool failure;\n-    (void)DecodeBase32(std::string(\"invalid\", 7), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n-    (void)DecodeBase32(std::string(\"AWSX3VPP\", 8), &failure);\n-    BOOST_CHECK_EQUAL(failure, false);\n-    (void)DecodeBase32(std::string(\"AWSX3VPP\\0invalid\", 16), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n-    (void)DecodeBase32(std::string(\"AWSX3VPPinvalid\", 15), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase32(\"invalid\\0\"s, &failure); // correct size, invalid due to \\0\n+    BOOST_CHECK(failure);\n+    (void)DecodeBase32(\"AWSX3VPP\"s, &failure); // valid\n+    BOOST_CHECK(!failure);\n+    (void)DecodeBase32(\"AWSX3VPP\\0invalid\"s, &failure); // correct size, invalid due to \\0\n+    BOOST_CHECK(failure);\n+    (void)DecodeBase32(\"AWSX3VPPinvalid\"s, &failure); // invalid size\n+    BOOST_CHECK(failure);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e55d6b3b194bea81104af11cc7e07c8254c14a9f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -12,7 +12,9 @@\n #include <univalue.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <string>\n \n+using namespace std::literals;\n \n extern UniValue read_json(const std::string& jsondata);\n \n@@ -58,25 +60,25 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n         BOOST_CHECK_MESSAGE(result.size() == expected.size() && std::equal(result.begin(), result.end(), expected.begin()), strTest);\n     }\n \n-    BOOST_CHECK(!DecodeBase58(\"invalid\", result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"invalid\"), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"\\0invalid\", 8), result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"invalid\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"invalid\\0\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"\\0invalid\"s, result, 100));\n \n-    BOOST_CHECK(DecodeBase58(std::string(\"good\", 4), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"bad0IOl\", 7), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"goodbad0IOl\", 11), result, 100));\n-    BOOST_CHECK(!DecodeBase58(std::string(\"good\\0bad0IOl\", 12), result, 100));\n+    BOOST_CHECK(DecodeBase58(\"good\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"bad0IOl\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"goodbad0IOl\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58(\"good\\0bad0IOl\"s, result, 100));\n \n     // check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.\n     BOOST_CHECK(!DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t a\", result, 3));\n     BOOST_CHECK( DecodeBase58(\" \\t\\n\\v\\f\\r skip \\r\\f\\v\\n\\t \", result, 3));\n     std::vector<unsigned char> expected = ParseHex(\"971a55\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n \n-    BOOST_CHECK(DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\", 21), result, 100));\n-    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oi\", 21), result, 100));\n-    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh0IOl\", 25), result, 100));\n-    BOOST_CHECK(!DecodeBase58Check(std::string(\"3vQB7B6MrGQZaxCuFg4oh\\00IOl\", 26), result, 100));\n+    BOOST_CHECK(DecodeBase58Check(\"3vQB7B6MrGQZaxCuFg4oh\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(\"3vQB7B6MrGQZaxCuFg4oi\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(\"3vQB7B6MrGQZaxCuFg4oh0IOl\"s, result, 100));\n+    BOOST_CHECK(!DecodeBase58Check(\"3vQB7B6MrGQZaxCuFg4oh\\0\" \"0IOl\"s, result, 100));\n }\n \n BOOST_AUTO_TEST_CASE(base58_random_encode_decode)"
      },
      {
        "sha": "bb8d102bd035370e42f9042091824f96eee0613b",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -6,6 +6,9 @@\n #include <util/strencodings.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <string>\n+\n+using namespace std::literals;\n \n BOOST_FIXTURE_TEST_SUITE(base64_tests, BasicTestingSetup)\n \n@@ -23,14 +26,14 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n \n     // Decoding strings with embedded NUL characters should fail\n     bool failure;\n-    (void)DecodeBase64(std::string(\"invalid\", 7), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n-    (void)DecodeBase64(std::string(\"nQB/pZw=\", 8), &failure);\n-    BOOST_CHECK_EQUAL(failure, false);\n-    (void)DecodeBase64(std::string(\"nQB/pZw=\\0invalid\", 16), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n-    (void)DecodeBase64(std::string(\"nQB/pZw=invalid\", 15), &failure);\n-    BOOST_CHECK_EQUAL(failure, true);\n+    (void)DecodeBase64(\"invalid\\0\"s, &failure);\n+    BOOST_CHECK(failure);\n+    (void)DecodeBase64(\"nQB/pZw=\"s, &failure);\n+    BOOST_CHECK(!failure);\n+    (void)DecodeBase64(\"nQB/pZw=\\0invalid\"s, &failure);\n+    BOOST_CHECK(failure);\n+    (void)DecodeBase64(\"nQB/pZw=invalid\\0\"s, &failure);\n+    BOOST_CHECK(failure);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "de4a2d5b60849b841be75ee1d3343536a9b6df9c",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -23,6 +23,8 @@\n #include <memory>\n #include <string>\n \n+using namespace std::literals;\n+\n class CAddrManSerializationMock : public CAddrMan\n {\n public:\n@@ -104,8 +106,8 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n     BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n     BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n-    BOOST_CHECK(Lookup(std::string(\"250.7.3.3\", 9), addr3, 9999, false));\n-    BOOST_CHECK(!Lookup(std::string(\"250.7.3.3\\0example.com\", 21), addr3, 9999, false));\n+    BOOST_CHECK(Lookup(\"250.7.3.3\"s, addr3, 9999, false));\n+    BOOST_CHECK(!Lookup(\"250.7.3.3\\0example.com\"s, addr3, 9999, false));\n \n     // Add three addresses to new table.\n     CService source;"
      },
      {
        "sha": "5c69f5f1efae227cab2f6aea1613d6f9de69d657",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -12,6 +12,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using namespace std::literals;\n+\n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n static CNetAddr ResolveIP(const std::string& ip)\n@@ -427,20 +429,20 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n {\n     CNetAddr addr;\n-    BOOST_CHECK(LookupHost(std::string(\"127.0.0.1\", 9), addr, false));\n-    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0\", 10), addr, false));\n-    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\", 21), addr, false));\n-    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\\0\", 22), addr, false));\n+    BOOST_CHECK(LookupHost(\"127.0.0.1\"s, addr, false));\n+    BOOST_CHECK(!LookupHost(\"127.0.0.1\\0\"s, addr, false));\n+    BOOST_CHECK(!LookupHost(\"127.0.0.1\\0example.com\"s, addr, false));\n+    BOOST_CHECK(!LookupHost(\"127.0.0.1\\0example.com\\0\"s, addr, false));\n     CSubNet ret;\n-    BOOST_CHECK(LookupSubNet(std::string(\"1.2.3.0/24\", 10), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0\", 11), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\", 22), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\\0\", 23), ret));\n+    BOOST_CHECK(LookupSubNet(\"1.2.3.0/24\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"1.2.3.0/24\\0example.com\\0\"s, ret));\n     // We only do subnetting for IPv4 and IPv6\n-    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\", 22), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0\", 23), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\", 34), ret));\n-    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\", 35), ret));\n+    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\"s, ret));\n+    BOOST_CHECK(!LookupSubNet(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\"s, ret));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "43d550f82bc4e1b0833d150989b39246c91c6fb2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecc6cf1a3b097b9b5b047282063a0b6779631b83/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ecc6cf1a3b097b9b5b047282063a0b6779631b83",
        "patch": "@@ -23,6 +23,7 @@\n \n #include <array>\n #include <stdint.h>\n+#include <string.h>\n #include <thread>\n #include <univalue.h>\n #include <utility>\n@@ -35,6 +36,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n+using namespace std::literals;\n+\n /* defined in logging.cpp */\n namespace BCLog {\n     std::string LogEscapeMessage(const std::string& str);\n@@ -1235,9 +1238,9 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n     BOOST_CHECK(!ParseMoney(\"-1\", ret));\n \n     // Parsing strings with embedded NUL characters should fail\n-    BOOST_CHECK(!ParseMoney(std::string(\"\\0-1\", 3), ret));\n-    BOOST_CHECK(!ParseMoney(std::string(\"\\01\", 2), ret));\n-    BOOST_CHECK(!ParseMoney(std::string(\"1\\0\", 2), ret));\n+    BOOST_CHECK(!ParseMoney(\"\\0-1\"s, ret));\n+    BOOST_CHECK(!ParseMoney(\"\\0\" \"1\"s, ret));\n+    BOOST_CHECK(!ParseMoney(\"1\\0\"s, ret));\n }\n \n BOOST_AUTO_TEST_CASE(util_IsHex)"
      }
    ]
  }
]