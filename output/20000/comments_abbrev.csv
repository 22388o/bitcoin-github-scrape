eriknylund,2020-09-23 07:14:51,Concept ACK. I browsed over these decode tests when extending the Base32 encoding tests with support for no padding for #19845 and I found them hard to comprehend. I think this is an improvement.,https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-697180637,697180637,
vasild,2020-09-23 07:26:52,"This is actually mode widespread. I checked all tests and fixed some others too.\n\n@eriknylund, this is how stumbled on that too! :)",https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-697185892,697185892,
eriknylund,2020-10-06 16:25:04,ACK b7f1cc6c911b8c18d1181e6ede8e1b7ed3c6ea14 I've reviewed the changes and I think they are an improvement. I would consider renaming the issue to better reflect that changes that are not only base32 related.,https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-704395762,704395762,
vasild,2020-10-31 15:09:42,Changed to use `s`-suffix strings. Tested with `--enable-c++17`.,https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-719946522,719946522,
laanwj,2020-11-19 10:23:51,"ACK ecc6cf1a3b097b9b5b047282063a0b6779631b83\n\nThis very much clarifies the code and works locally for me. I don't know what the travis and CI failures are about.",https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-730276759,730276759,
practicalswift,2020-11-19 10:48:24,"ACK ecc6cf1a3b097b9b5b047282063a0b6779631b83 modulo happily green CI\n\nNeeds rebase to pull in C++17 switch?",https://github.com/bitcoin/bitcoin/pull/20000#issuecomment-730289455,730289455,
MarcoFalke,2020-09-23 10:21:46,"This fails before and after, indicating that the failure has nothing to do with NUL, no?",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r493417198,493417198,src/test/base32_tests.cpp
eriknylund,2020-09-23 12:24:41,"Good point. I also don't fully understand what any of these tests are trying to achieve? Wouldn't something like\n```\ndiff --git a/src/test/base32_tests.cpp b/src/test/base32_tests.cpp\nindex 26ed78e2c2..4a5af0fd4d 100644\n--- a/src/test/base32_tests.cpp\n+++ b/src/test/base32_tests.cpp\n@@ -23,13 +23,13 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n \n     // Decoding strings with embedde",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r493526223,493526223,src/test/base32_tests.cpp
vasild,2020-09-23 19:30:34,"> no?\n\nno :-)\n\nBefore this PR `DecodeBase32(std::string(""invalid"", 7), &failure)` fails because the supplied input has invalid length (7) and is not padded to a proper length (8) with `=`.\n\nWith this PR the same call fails due to the `ValidAsCString()` check early in `DecodeBase32()` (this check passes before this PR). The trailing `\0` upsets the `ValidAsCString()` check which I think",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r493844122,493844122,src/test/base32_tests.cpp
vasild,2020-09-24 12:49:03,"Sorry, with this PR it is not ""the same call"", but `DecodeBase32(std::string(""invalid"", 8), &failure)`.",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r494289235,494289235,src/test/base32_tests.cpp
MarcoFalke,2020-09-24 13:21:39,"Because the failure reason is not returned, it might be good to use a valid Base32 string, which properly decodes and then make it an invalid cstr, which fails. Otherwise it is harder to guess which failure reason was the intent from just reading the test code.",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r494311376,494311376,src/test/base32_tests.cpp
laanwj,2020-09-30 12:44:12,"Maybe we can wait with making this change for the C++17 switch? We'll have the s-suffix strings, so don't need to worry about specifying the length explicitly at all anymore even when there are trailing '\0' characters.\n```c++\n#include <iostream>\n#include <string>\n\nint main()\n{\n    using namespace std::string_literals;\n\n    std::string x = ""test\x00\x00\x00\x00""s;\n    std::cout",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r497478575,497478575,src/test/base32_tests.cpp
vasild,2020-10-06 14:09:44,"> it might be good to use a valid Base32 string, which properly decodes and then make it an invalid cstr, which fails\n\nThe tests below already do that with `AWSX3VPP` (length 8, valid) and `AWSX3VPP\0invalid` (length 16, invalid due to embedded `\0`).",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r500314838,500314838,src/test/base32_tests.cpp
vasild,2020-10-06 14:12:05,"I think this PR is good as is, but if it is still unmerged when we start allowing C++17, then I will update it to use `""...""s`;",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r500317147,500317147,src/test/base32_tests.cpp
eriknylund,2020-10-06 14:36:04,"To my understanding `AWSX3VPP` is not a valid base32 encoded string, but perhaps I'm missing something obvious?",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r500340423,500340423,src/test/base32_tests.cpp
vasild,2020-10-06 15:19:27,Why not? It has proper length (8) and no embedded `\0`s. `DecodeBase32()` decodes is successfully.,https://github.com/bitcoin/bitcoin/pull/20000#discussion_r500381760,500381760,src/test/base32_tests.cpp
eriknylund,2020-10-06 16:00:11,"Thanks, I see your point and why I misunderstood the test in this case. To me the value `AWXS3VPP` looks like a magic string chosen on purpose and not on random, and I expected it to actually decode into something more human readable, like the other test values in the file on L14-15. ",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r500416231,500416231,src/test/base32_tests.cpp
fanquake,2020-10-31 12:35:11,"> then I will update it to use ""...""s;\n\nEven though this has a few ACKs, I think you can go ahead and update it to use the s-suffix strings. We'll merge this post branch off when requiring C++17.",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r515492949,515492949,src/test/base32_tests.cpp
vasild,2020-10-31 15:10:05,Done,https://github.com/bitcoin/bitcoin/pull/20000#discussion_r515506339,515506339,src/test/base32_tests.cpp
vasild,2020-10-31 15:11:40,Added some comments to make it clearer.,https://github.com/bitcoin/bitcoin/pull/20000#discussion_r515506505,515506505,src/test/base32_tests.cpp
eriknylund,2020-10-31 17:26:27,"This change strikes me as odd, shouldn't it be `""\01""s` or did you intentionally want the other approach here to improve the test?",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r515519265,515519265,src/test/util_tests.cpp
vasild,2020-11-01 13:42:25,"I guess the intention of `std::string(""\01"", 2)` was to test the string `{0, 49}` (ASCII code of `'1'` is `49`). But this is not what it did because `""\01""` is the same as `""\1""` and so the resulting string is `{1, 0}` (`1` from `\1` and the terminating nul).",https://github.com/bitcoin/bitcoin/pull/20000#discussion_r515623885,515623885,src/test/util_tests.cpp
