[
  {
    "sha": "316b8b2339efa131fc39f050ee0c9fe5291572b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTZiOGIyMzM5ZWZhMTMxZmMzOWYwNTBlZTBjOWZlNTI5MTU3MmI3",
    "commit": {
      "author": {
        "name": "Emil",
        "email": "emu@emuadmin.com",
        "date": "2019-04-17T17:32:05Z"
      },
      "committer": {
        "name": "Emil",
        "email": "emu@emuadmin.com",
        "date": "2019-04-17T17:32:05Z"
      },
      "message": "Filter IPv6 by ASN",
      "tree": {
        "sha": "51e75826056b3a4d8b7e45545ec4ea7e672ff735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51e75826056b3a4d8b7e45545ec4ea7e672ff735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316b8b2339efa131fc39f050ee0c9fe5291572b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316b8b2339efa131fc39f050ee0c9fe5291572b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/316b8b2339efa131fc39f050ee0c9fe5291572b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316b8b2339efa131fc39f050ee0c9fe5291572b7/comments",
    "author": {
      "login": "abitfan",
      "id": 10046315,
      "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abitfan",
      "html_url": "https://github.com/abitfan",
      "followers_url": "https://api.github.com/users/abitfan/followers",
      "following_url": "https://api.github.com/users/abitfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/abitfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abitfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
      "organizations_url": "https://api.github.com/users/abitfan/orgs",
      "repos_url": "https://api.github.com/users/abitfan/repos",
      "events_url": "https://api.github.com/users/abitfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abitfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "abitfan",
      "id": 10046315,
      "node_id": "MDQ6VXNlcjEwMDQ2MzE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10046315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abitfan",
      "html_url": "https://github.com/abitfan",
      "followers_url": "https://api.github.com/users/abitfan/followers",
      "following_url": "https://api.github.com/users/abitfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/abitfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abitfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abitfan/subscriptions",
      "organizations_url": "https://api.github.com/users/abitfan/orgs",
      "repos_url": "https://api.github.com/users/abitfan/repos",
      "events_url": "https://api.github.com/users/abitfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abitfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c9de67f343c0e740a7f488e85270d519a352119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9de67f343c0e740a7f488e85270d519a352119",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9de67f343c0e740a7f488e85270d519a352119"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "523386e3931ea8890e2deb11305f61dfd4089815",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316b8b2339efa131fc39f050ee0c9fe5291572b7/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316b8b2339efa131fc39f050ee0c9fe5291572b7/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=316b8b2339efa131fc39f050ee0c9fe5291572b7",
        "patch": "@@ -109,18 +109,30 @@ def filtermultiport(ips):\n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n     # Sift out ips by type\n-    ips_ipv4 = [ip for ip in ips if ip['net'] == 'ipv4']\n-    ips_ipv6 = [ip for ip in ips if ip['net'] == 'ipv6']\n+    ips_ipv46 = [ip for ip in ips if ip['net'] in ['ipv4', 'ipv6']]\n     ips_onion = [ip for ip in ips if ip['net'] == 'onion']\n \n-    # Filter IPv4 by ASN\n+    # Filter IPv46 by ASN\n     result = []\n     asn_count = {}\n-    for ip in ips_ipv4:\n+    for ip in ips_ipv46:\n         if len(result) == max_total:\n             break\n         try:\n-            asn = int([x.to_text() for x in dns.resolver.query('.'.join(reversed(ip['ip'].split('.'))) + '.origin.asn.cymru.com', 'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n+            if ip['net'] == 'ipv4':\n+                ipaddr = ip['ip']\n+                prefix = '.origin'\n+            else:                  # http://www.team-cymru.com/IP-ASN-mapping.html\n+                res = str()                         # 2001:4860:b002:23::68\n+                for nb in ip['ip'].split(':')[:4]:  # pick the first 4 nibbles\n+                    for c in nb.zfill(4):           # right padded with '0'\n+                        res += c + '.'              # 2001 4860 b002 0023\n+                ipaddr = res.rstrip('.')            # 2.0.0.1.4.8.6.0.b.0.0.2.0.0.2.3\n+                prefix = '.origin6'\n+\n+            asn = int([x.to_text() for x in dns.resolver.query('.'.join(\n+                       reversed(ipaddr.split('.'))) + prefix + '.asn.cymru.com',\n+                       'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n             if asn not in asn_count:\n                 asn_count[asn] = 0\n             if asn_count[asn] == max_per_asn:\n@@ -130,10 +142,7 @@ def filterbyasn(ips, max_per_asn, max_total):\n         except:\n             sys.stderr.write('ERR: Could not resolve ASN for \"' + ip['ip'] + '\"\\n')\n \n-    # TODO: filter IPv6 by ASN\n-\n-    # Add back non-IPv4\n-    result.extend(ips_ipv6)\n+    # Add back Onions\n     result.extend(ips_onion)\n     return result\n "
      }
    ]
  }
]