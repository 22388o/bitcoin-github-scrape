[
  {
    "sha": "4a2edf2bf708b6044562995e35f2dbbd2b26c364",
    "node_id": "C_kwDOABII59oAKDRhMmVkZjJiZjcwOGI2MDQ0NTYyOTk1ZTM1ZjJkYmJkMmIyNmMzNjQ",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-27T11:25:28Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-09T11:24:48Z"
      },
      "message": "test: generate blocks to MiniWallet address in rpc_blockchain.py",
      "tree": {
        "sha": "22906b99fcac685ecc28ba40d60ec1aa8ba815b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22906b99fcac685ecc28ba40d60ec1aa8ba815b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a2edf2bf708b6044562995e35f2dbbd2b26c364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2edf2bf708b6044562995e35f2dbbd2b26c364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2edf2bf708b6044562995e35f2dbbd2b26c364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2edf2bf708b6044562995e35f2dbbd2b26c364/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94db963de501e4aba6e5d8150a01ceb85753dee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94db963de501e4aba6e5d8150a01ceb85753dee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94db963de501e4aba6e5d8150a01ceb85753dee1"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "14e17bada6e1f5ded0bf1cfc86645be7de5670dd",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2edf2bf708b6044562995e35f2dbbd2b26c364/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2edf2bf708b6044562995e35f2dbbd2b26c364/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=4a2edf2bf708b6044562995e35f2dbbd2b26c364",
        "patch": "@@ -25,7 +25,6 @@\n import os\n import subprocess\n \n-from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n@@ -64,6 +63,7 @@ def set_test_params(self):\n         self.supports_cli = False\n \n     def run_test(self):\n+        self.wallet = MiniWallet(self.nodes[0])\n         self.mine_chain()\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n@@ -82,7 +82,7 @@ def mine_chain(self):\n         self.log.info(f\"Generate {HEIGHT} blocks after the genesis block in ten-minute steps\")\n         for t in range(TIME_GENESIS_BLOCK, TIME_RANGE_END, TIME_RANGE_STEP):\n             self.nodes[0].setmocktime(t)\n-            self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+            self.generate(self.wallet, 1)\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], HEIGHT)\n \n     def _test_getblockchaininfo(self):\n@@ -371,12 +371,12 @@ def _test_getnetworkhashps(self):\n     def _test_stopatheight(self):\n         self.log.info(\"Test stopping at height\")\n         assert_equal(self.nodes[0].getblockcount(), HEIGHT)\n-        self.generatetoaddress(self.nodes[0], 6, ADDRESS_BCRT1_P2WSH_OP_TRUE)\n+        self.generate(self.wallet, 6)\n         assert_equal(self.nodes[0].getblockcount(), HEIGHT + 6)\n         self.log.debug('Node should not stop at this height')\n         assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n-            self.generatetoaddress(self.nodes[0], 1, ADDRESS_BCRT1_P2WSH_OP_TRUE, sync_fun=self.no_op)\n+            self.generatetoaddress(self.nodes[0], 1, self.wallet.get_address(), sync_fun=self.no_op)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n@@ -424,14 +424,10 @@ def assert_waitforheight(height, timeout=2):\n \n     def _test_getblock(self):\n         node = self.nodes[0]\n-\n-        miniwallet = MiniWallet(node)\n-        miniwallet.rescan_utxos()\n-\n         fee_per_byte = Decimal('0.00000010')\n         fee_per_kb = 1000 * fee_per_byte\n \n-        miniwallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n+        self.wallet.send_self_transfer(fee_rate=fee_per_kb, from_node=node)\n         blockhash = self.generate(node, 1)[0]\n \n         def assert_fee_not_in_block(verbosity):"
      }
    ]
  },
  {
    "sha": "041abfebe49ae5e3e882c00cc5caea1365a27a49",
    "node_id": "C_kwDOABII59oAKDA0MWFiZmViZTQ5YWU1ZTNlODgyYzAwY2M1Y2FlYTEzNjVhMjdhNDk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-27T09:18:57Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-09T11:25:48Z"
      },
      "message": "test: MiniWallet: add P2TR support and use it per default",
      "tree": {
        "sha": "55cf10c35d6cb27081e718b198c4a97a3ce3ca65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55cf10c35d6cb27081e718b198c4a97a3ce3ca65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/041abfebe49ae5e3e882c00cc5caea1365a27a49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/041abfebe49ae5e3e882c00cc5caea1365a27a49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/041abfebe49ae5e3e882c00cc5caea1365a27a49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/041abfebe49ae5e3e882c00cc5caea1365a27a49/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a2edf2bf708b6044562995e35f2dbbd2b26c364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2edf2bf708b6044562995e35f2dbbd2b26c364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2edf2bf708b6044562995e35f2dbbd2b26c364"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 47,
      "deletions": 19
    },
    "files": [
      {
        "sha": "39859d015126f5ae9b8cb8d0759768879fbe8cf3",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -47,8 +47,8 @@ def set_test_params(self):\n     def run_test(self):\n         self.wallet = MiniWallet(self.nodes[0])\n         # the pre-mined test framework chain contains coinbase outputs to the\n-        # MiniWallet's default address ADDRESS_BCRT1_P2WSH_OP_TRUE in blocks\n-        # 76-100 (see method BitcoinTestFramework._initialize_chain())\n+        # MiniWallet's default address in blocks 76-100 (see method\n+        # BitcoinTestFramework._initialize_chain())\n         self.wallet.rescan_utxos()\n \n         self.log.info(\"Running test simple doublespend...\")"
      },
      {
        "sha": "33b7615aeafa233da460e9d2ea305263358adc58",
        "filename": "test/functional/feature_utxo_set_hash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/feature_utxo_set_hash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/feature_utxo_set_hash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_utxo_set_hash.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -69,8 +69,8 @@ def test_muhash_implementation(self):\n         assert_equal(finalized[::-1].hex(), node_muhash)\n \n         self.log.info(\"Test deterministic UTXO set hash results\")\n-        assert_equal(node.gettxoutsetinfo()['hash_serialized_2'], \"5b1b44097406226c0eb8e1362cd17a1f346522cf9390a8175a57a5262cb1963f\")\n-        assert_equal(node.gettxoutsetinfo(\"muhash\")['muhash'], \"4b8803075d7151d06fad3e88b68ba726886794873fbfa841d12aefb2cc2b881b\")\n+        assert_equal(node.gettxoutsetinfo()['hash_serialized_2'], \"221f245cf4c9010eeb7f5183d342c002ae6c1c27e98aa357dccb788c21d98049\")\n+        assert_equal(node.gettxoutsetinfo(\"muhash\")['muhash'], \"7c0890c68501f7630d36aeb3999dc924e63af084ae1bbfba11dd462144637635\")\n \n     def run_test(self):\n         self.test_muhash_implementation()"
      },
      {
        "sha": "d450b40582eadf6de7a099038d46b75e99953fa0",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -7,14 +7,17 @@\n NOTE: The test is designed to prevent cases when compatibility is broken accidentally.\n In case we need to break mempool compatibility we can continue to use the test by just bumping the version number.\n \n-The previous release v0.15.2 is required by this test, see test/README.md.\n+The previous release v0.19.1 is required by this test, see test/README.md.\n \"\"\"\n \n import os\n \n from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.wallet import MiniWallet\n+from test_framework.wallet import (\n+    MiniWallet,\n+    MiniWalletMode,\n+)\n \n \n class MempoolCompatibilityTest(BitcoinTestFramework):\n@@ -37,7 +40,7 @@ def run_test(self):\n         self.log.info(\"Test that mempool.dat is compatible between versions\")\n \n         old_node, new_node = self.nodes\n-        new_wallet = MiniWallet(new_node)\n+        new_wallet = MiniWallet(new_node, mode=MiniWalletMode.RAW_P2PK)\n         self.generate(new_wallet, 1, sync_fun=self.no_op)\n         self.generate(new_node, COINBASE_MATURITY, sync_fun=self.no_op)\n         # Sync the nodes to ensure old_node has the block that contains the coinbase that new_wallet will spend."
      },
      {
        "sha": "89839c9bab35103087546c455472a7086df8511e",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -5,12 +5,21 @@\n \"\"\"Encode and decode Bitcoin addresses.\n \n - base58 P2PKH and P2SH addresses.\n-- bech32 segwit v0 P2WPKH and P2WSH addresses.\"\"\"\n+- bech32 segwit v0 P2WPKH and P2WSH addresses.\n+- bech32m segwit v1 P2TR addresses.\"\"\"\n \n import enum\n import unittest\n \n-from .script import hash256, hash160, sha256, CScript, OP_0\n+from .script import (\n+    CScript,\n+    OP_0,\n+    OP_TRUE,\n+    hash160,\n+    hash256,\n+    sha256,\n+    taproot_construct,\n+)\n from .segwit_addr import encode_segwit_address\n from .util import assert_equal\n \n@@ -29,6 +38,21 @@ class AddressType(enum.Enum):\n chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n \n \n+def create_deterministic_address_bcrt1_p2tr_op_true():\n+    \"\"\"\n+    Generates a deterministic bech32m address (segwit v1 output) that\n+    can be spent with a witness stack of OP_TRUE and the control block\n+    with internal public key (script-path spending).\n+\n+    Returns a tuple with the generated address and the internal key.\n+    \"\"\"\n+    internal_key = (1).to_bytes(32, 'big')\n+    scriptPubKey = taproot_construct(internal_key, [(None, CScript([OP_TRUE]))]).scriptPubKey\n+    address = encode_segwit_address(\"bcrt\", 1, scriptPubKey[2:])\n+    assert_equal(address, 'bcrt1p9yfmy5h72durp7zrhlw9lf7jpwjgvwdg0jr0lqmmjtgg83266lqsekaqka')\n+    return (address, internal_key)\n+\n+\n def byte_to_base58(b, version):\n     result = ''\n     str = b.hex()"
      },
      {
        "sha": "b18c050e0ac96d244298a1cf381cbbbab663012f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -19,7 +19,7 @@\n import time\n \n from typing import List\n-from .address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from .address import create_deterministic_address_bcrt1_p2tr_op_true\n from .authproxy import JSONRPCException\n from . import coverage\n from .p2p import NetworkThread\n@@ -777,7 +777,7 @@ def _initialize_chain(self):\n             # block in the cache does not age too much (have an old tip age).\n             # This is needed so that we are out of IBD when the test starts,\n             # see the tip age check in IsInitialBlockDownload().\n-            gen_addresses = [k.address for k in TestNode.PRIV_KEYS][:3] + [ADDRESS_BCRT1_P2WSH_OP_TRUE]\n+            gen_addresses = [k.address for k in TestNode.PRIV_KEYS][:3] + [create_deterministic_address_bcrt1_p2tr_op_true()[0]]\n             assert_equal(len(gen_addresses), 4)\n             for i in range(8):\n                 self.generatetoaddress("
      },
      {
        "sha": "7de69947358c802915bac8c113665323e2a7607f",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/041abfebe49ae5e3e882c00cc5caea1365a27a49/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=041abfebe49ae5e3e882c00cc5caea1365a27a49",
        "patch": "@@ -9,7 +9,7 @@\n from enum import Enum\n from random import choice\n from typing import Optional\n-from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.address import create_deterministic_address_bcrt1_p2tr_op_true\n from test_framework.descriptors import descsum_create\n from test_framework.key import ECKey\n from test_framework.messages import (\n@@ -24,8 +24,9 @@\n from test_framework.script import (\n     CScript,\n     LegacySignatureHash,\n-    OP_TRUE,\n+    LEAF_VERSION_TAPSCRIPT,\n     OP_NOP,\n+    OP_TRUE,\n     SIGHASH_ALL,\n )\n from test_framework.script_util import (\n@@ -43,7 +44,7 @@ class MiniWalletMode(Enum):\n     \"\"\"Determines the transaction type the MiniWallet is creating and spending.\n \n     For most purposes, the default mode ADDRESS_OP_TRUE should be sufficient;\n-    it simply uses a fixed bech32 P2WSH address whose coins are spent with a\n+    it simply uses a fixed bech32m P2TR address whose coins are spent with a\n     witness stack of OP_TRUE, i.e. following an anyone-can-spend policy.\n     However, if the transactions need to be modified by the user (e.g. prepending\n     scriptSig for testing opcodes that are activated by a soft-fork), or the txs\n@@ -53,7 +54,7 @@ class MiniWalletMode(Enum):\n                     |      output       |           |  tx is   | can modify |  needs\n          mode       |    description    |  address  | standard | scriptSig  | signing\n     ----------------+-------------------+-----------+----------+------------+----------\n-    ADDRESS_OP_TRUE | anyone-can-spend  |  bech32   |   yes    |    no      |   no\n+    ADDRESS_OP_TRUE | anyone-can-spend  |  bech32m  |   yes    |    no      |   no\n     RAW_OP_TRUE     | anyone-can-spend  |  - (raw)  |   no     |    yes     |   no\n     RAW_P2PK        | pay-to-public-key |  - (raw)  |   yes    |    yes     |   yes\n     \"\"\"\n@@ -79,7 +80,7 @@ def __init__(self, test_node, *, mode=MiniWalletMode.ADDRESS_OP_TRUE):\n             pub_key = self._priv_key.get_pubkey()\n             self._scriptPubKey = key_to_p2pk_script(pub_key.get_bytes())\n         elif mode == MiniWalletMode.ADDRESS_OP_TRUE:\n-            self._address = ADDRESS_BCRT1_P2WSH_OP_TRUE\n+            self._address, self._internal_key = create_deterministic_address_bcrt1_p2tr_op_true()\n             self._scriptPubKey = bytes.fromhex(self._test_node.validateaddress(self._address)['scriptPubKey'])\n \n     def rescan_utxos(self):\n@@ -174,7 +175,7 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n         self._utxos = sorted(self._utxos, key=lambda k: (k['value'], -k['height']))\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n         if self._priv_key is None:\n-            vsize = Decimal(96)  # anyone-can-spend\n+            vsize = Decimal(104)  # anyone-can-spend\n         else:\n             vsize = Decimal(168)  # P2PK (73 bytes scriptSig + 35 bytes scriptPubKey + 60 bytes other)\n         send_value = int(COIN * (utxo_to_spend['value'] - fee_rate * (vsize / 1000)))\n@@ -191,10 +192,10 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n                 self.sign_tx(tx)\n             else:\n                 # anyone-can-spend\n-                tx.vin[0].scriptSig = CScript([OP_NOP] * 35)  # pad to identical size\n+                tx.vin[0].scriptSig = CScript([OP_NOP] * 43)  # pad to identical size\n         else:\n             tx.wit.vtxinwit = [CTxInWitness()]\n-            tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+            tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), bytes([LEAF_VERSION_TAPSCRIPT]) + self._internal_key]\n         tx_hex = tx.serialize().hex()\n \n         tx_info = from_node.testmempoolaccept([tx_hex])[0]"
      }
    ]
  }
]