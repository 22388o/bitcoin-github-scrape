[
  {
    "sha": "6a62da92144bcf483953ee438cbae68d2a73ace0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTYyZGE5MjE0NGJjZjQ4Mzk1M2VlNDM4Y2JhZTY4ZDJhNzNhY2Uw",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-12-24T14:36:57Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-07-12T18:28:31Z"
      },
      "message": "Relay double-spends, subject to anti-DOS\n\nAs an alert, relay at most one transaction that respends a prevout already\nspent in an unconfirmed transaction in this node's mempool.\n\nAs before, respends are not added to the mempool.\n\nAnti-Denial-of-Service-Attack provisions:\n - Use a bloom filter to relay only one respend per mempool prevout\n - Rate-limit respend relays to a default of 100 thousand bytes/minute\n - Define tx2.IsEquivalentTo(tx1): equality when scriptSigs are not considered\n - Do not relay these equivalent transactions\n - Do not allow relayed respends into our wallet unless they conflict with it,\n   even if they pay us.  This addresses a resource exhaustion attack\n\nCWallet::SyncMetaData is changed to sync only to equivalent transactions.\n\nRemove an unused variable declaration in txmempool.cpp.",
      "tree": {
        "sha": "0ffe37f7f05057707e9c56537c66063f9ea36157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ffe37f7f05057707e9c56537c66063f9ea36157"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a62da92144bcf483953ee438cbae68d2a73ace0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62da92144bcf483953ee438cbae68d2a73ace0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a62da92144bcf483953ee438cbae68d2a73ace0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62da92144bcf483953ee438cbae68d2a73ace0/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cdefb927e928780cdbbb3a9b2ffe37716eebae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cdefb927e928780cdbbb3a9b2ffe37716eebae1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cdefb927e928780cdbbb3a9b2ffe37716eebae1"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 153,
      "deletions": 46
    },
    "files": [
      {
        "sha": "b60f40f8460a00d018ff163c67879f3962a1c696",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -1470,6 +1470,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n+    InitRespendFilter();\n     StartNode(threadGroup, scheduler);\n \n     // Monitor the chain, and alert if we get blocks much quicker or slower than expected"
      },
      {
        "sha": "f9db27c5c683b500fb93d62a5df2627119e3180f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 21,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -177,6 +177,14 @@ namespace {\n     set<int> setDirtyFileInfo;\n } // anon namespace\n \n+// Bloom filter to limit respend relays to one\n+static const unsigned int MAX_DOUBLESPEND_BLOOM = 100000;\n+static CBloomFilter doubleSpendFilter;\n+void InitRespendFilter() {\n+    seed_insecure_rand();\n+    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Registration of network node signals.\n@@ -747,6 +755,40 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+// Exponentially limit the rate of nSize flow to nLimit.  nLimit unit is thousands-per-minute.\n+bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsigned int nSize)\n+{\n+    static CCriticalSection csLimiter;\n+    int64_t nNow = GetTime();\n+\n+    LOCK(csLimiter);\n+\n+    dCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+    nLastTime = nNow;\n+    if (dCount >= nLimit*10*1000)\n+        return true;\n+    dCount += nSize;\n+    return false;\n+}\n+\n+static bool RespendRelayExceeded(const CTransaction& doubleSpend)\n+{\n+    // Apply an independent rate limit to double-spend relays\n+    static double dRespendCount;\n+    static int64_t nLastRespendTime;\n+    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n+    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n+    {\n+        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n+        return true;\n+    }\n+\n+    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n+\n+    return false;\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n@@ -783,17 +825,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n+    bool fRespend = false;\n+    COutPoint relayForOutpoint;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n+        // A respend is a tx that conflicts with a member of the pool\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            fRespend = true;\n+            // Relay only one tx per respent outpoint, but not if tx is equivalent to pool member\n+            if (!doubleSpendFilter.contains(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n+            {\n+                relayForOutpoint = outpoint;\n+                break;\n+            }\n         }\n     }\n+    if (fRespend && (relayForOutpoint.IsNull() || RespendRelayExceeded(tx)))\n+        return false;\n     }\n \n     {\n@@ -876,23 +928,16 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // be annoying or make others' transactions take longer to confirm.\n         if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n         {\n-            static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n+            static int64_t nLastFreeTime;\n+            static int64_t nFreeLimit = GetArg(\"-limitfreerelay\", 15);\n \n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n+            if (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n+                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n@@ -921,13 +966,24 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n-        // Store transaction in memory\n-        pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+        if (fRespend)\n+        {\n+            // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM insertions\n+            if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+                doubleSpendFilter.clear();\n+            doubleSpendFilter.insert(relayForOutpoint);\n+            RelayTransaction(tx);\n+        }\n+        else\n+        {\n+            // Store transaction in memory\n+            pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+        }\n     }\n \n-    SyncWithWallets(tx, NULL);\n+    SyncWithWallets(tx, NULL, fRespend);\n \n-    return true;\n+    return !fRespend;\n }\n \n /** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n@@ -2027,7 +2083,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, NULL, false);\n     }\n     return true;\n }\n@@ -2088,11 +2144,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx, NULL);\n+        SyncWithWallets(tx, NULL, false);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n-        SyncWithWallets(tx, pblock);\n+        SyncWithWallets(tx, pblock, false);\n     }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;"
      },
      {
        "sha": "e7233644ae3052de9ecbef182aa3daa6b5c08fc5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -112,6 +112,9 @@ extern CBlockIndex *pindexBestHeader;\n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n \n+/** Initialize respend bloom filter **/\n+void InitRespendFilter();\n+\n /** Pruning-related variables and constants */\n /** True if any block files have ever been pruned. */\n extern bool fHavePruned;"
      },
      {
        "sha": "bfeebb912916fc1cc78d3734bfca0c44263cb44c",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -92,6 +92,15 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n+bool CTransaction::IsEquivalentTo(const CTransaction& tx) const\n+{\n+\tCMutableTransaction tx1 = *this;\n+\tCMutableTransaction tx2 = tx;\n+\tfor (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n+\tfor (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+\treturn CTransaction(tx1) == CTransaction(tx2);\n+}\n+\n CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;"
      },
      {
        "sha": "2232e615962f8bf61de3b544ff760fff6992443a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -229,6 +229,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // True if only scriptSigs are different\n+    bool IsEquivalentTo(const CTransaction& tx) const;\n+\n     // Return sum of txouts.\n     CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because"
      },
      {
        "sha": "ba6cc7c244602222bbca1b9d3191fe74923ed185",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -184,7 +184,6 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);"
      },
      {
        "sha": "8d3c6edd2d1a8f629775ea6f92357139811346df",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -21,7 +21,8 @@ enum ChangeType\n {\n     CT_NEW,\n     CT_UPDATED,\n-    CT_DELETED\n+    CT_DELETED,\n+    CT_GOT_CONFLICT\n };\n \n /** Signals for UI communication. */"
      },
      {
        "sha": "d717d0c33fa9eb1540442d7653f0ee010385e823",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -13,7 +13,7 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -31,7 +31,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n }\n \n void UnregisterAllValidationInterfaces() {\n@@ -45,6 +45,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock, bool fRespend) {\n+    g_signals.SyncTransaction(tx, pblock, fRespend);\n }"
      },
      {
        "sha": "0a814d24ada7168fa66d681921e11c62b256c963",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -26,11 +26,11 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL, bool fRespend = false);\n \n class CValidationInterface {\n protected:\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {}\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock, bool fRespend) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -44,8 +44,8 @@ class CValidationInterface {\n };\n \n struct CMainSignals {\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    /** Notifies listeners of updated transaction data (transaction, optionally the block it is found in, and whether this is a known respend. */\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *, bool)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "5305a395fbda8e54391c325b6989050310d03bb1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -321,7 +321,7 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n-set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+set<uint256> CWallet::GetConflicts(const uint256& txid, bool includeEquivalent) const\n {\n     set<uint256> result;\n     AssertLockHeld(cs_wallet);\n@@ -339,7 +339,8 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n             continue;  // No conflict if zero or one spends\n         range = mapTxSpends.equal_range(txin.prevout);\n         for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n-            result.insert(it->second);\n+            if (includeEquivalent || !wtx.IsEquivalentTo(mapWallet.at(it->second)))\n+                result.insert(it->second);\n     }\n     return result;\n }\n@@ -720,6 +721,20 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n         // Notify UI of new or updated transaction\n         NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n+        // Notifications for existing transactions that now have conflicts with this one\n+        if (fInsertedNew)\n+        {\n+            BOOST_FOREACH(const uint256& conflictHash, wtxIn.GetConflicts(false))\n+            {\n+                CWalletTx& txConflict = mapWallet[conflictHash];\n+                NotifyTransactionChanged(this, conflictHash, CT_UPDATED); //Updates UI table\n+                if (IsFromMe(txConflict) || IsMine(txConflict))\n+                {\n+                    NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n+                }\n+            }\n+        }\n+\n         // notify an external script when a wallet transaction comes in or is updated\n         std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n@@ -738,13 +753,21 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n  * pblock is optional, but should be provided if the transaction is known to be in a block.\n  * If fUpdate is true, existing transactions will be updated.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fRespend)\n {\n     {\n         AssertLockHeld(cs_wallet);\n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+\n+        bool fIsConflicting = IsConflicting(tx);\n+        // Don't add respends that pay us, unless they conflict with us.  Prevents resource exhaustion.\n+        if (!fIsConflicting && fRespend) return false;\n+\n+        if (fIsConflicting)\n+            nConflictsReceived++;\n+\n+        if (fExisted || IsMine(tx) || IsFromMe(tx) || fIsConflicting)\n         {\n             CWalletTx wtx(this,tx);\n \n@@ -762,10 +785,10 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock, bool fRespend)\n {\n     LOCK2(cs_main, cs_wallet);\n-    if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pblock, true, fRespend))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -864,6 +887,14 @@ bool CWallet::IsFromMe(const CTransaction& tx) const\n     return (GetDebit(tx, ISMINE_ALL) > 0);\n }\n \n+bool CWallet::IsConflicting(const CTransaction& tx) const\n+{\n+\t    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+\t    if (mapTxSpends.count(txin.prevout))\n+\t        return true;\n+\t    return false;\n+}\n+\n CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const\n {\n     CAmount nDebit = 0;\n@@ -1073,7 +1104,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate, false))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);\n@@ -1104,7 +1135,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0) {\n+        if (!wtx.IsCoinBase() && nDepth < 0 && (IsMine(wtx) || IsFromMe(wtx))) {\n             mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx));\n         }\n     }\n@@ -1133,13 +1164,13 @@ bool CWalletTx::RelayWalletTransaction()\n     return false;\n }\n \n-set<uint256> CWalletTx::GetConflicts() const\n+set<uint256> CWalletTx::GetConflicts(bool includeEquivalent) const\n {\n     set<uint256> result;\n     if (pwallet != NULL)\n     {\n         uint256 myHash = GetHash();\n-        result = pwallet->GetConflicts(myHash);\n+        result = pwallet->GetConflicts(myHash, includeEquivalent);\n         result.erase(myHash);\n     }\n     return result;"
      },
      {
        "sha": "448f23264006549bc258af235d2eeb1e21b14768",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62da92144bcf483953ee438cbae68d2a73ace0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62da92144bcf483953ee438cbae68d2a73ace0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a62da92144bcf483953ee438cbae68d2a73ace0",
        "patch": "@@ -160,7 +160,6 @@ class CMerkleTx : public CTransaction\n     // memory only\n     mutable bool fMerkleVerified;\n \n-\n     CMerkleTx()\n     {\n         Init();\n@@ -390,7 +389,7 @@ class CWalletTx : public CMerkleTx\n \n     bool RelayWalletTransaction();\n \n-    std::set<uint256> GetConflicts() const;\n+    std::set<uint256> GetConflicts(bool includeEquivalent=true) const;\n };\n \n \n@@ -496,6 +495,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n+    // Increment to cause UI refresh, similar to new block\n+    int64_t nConflictsReceived;\n+\n     CWallet()\n     {\n         SetNull();\n@@ -527,6 +529,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n+        nConflictsReceived = 0;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -618,8 +621,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n-    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock, bool fRespend);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fRespend);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime);\n@@ -661,6 +664,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsMine(const CTransaction& tx) const;\n     /** should probably be renamed to IsRelevantToMe */\n     bool IsFromMe(const CTransaction& tx) const;\n+    bool IsConflicting(const CTransaction& tx) const;\n     CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n@@ -710,7 +714,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n+    std::set<uint256> GetConflicts(const uint256& txid, bool includeEquivalent) const;\n \n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);"
      }
    ]
  },
  {
    "sha": "58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGM1YmI3OTFjMzJmNTdjMDYxNGM1NTUwZDQ4YzhlOWZlMTFjM2E4",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-22T04:54:43Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-07-12T18:29:42Z"
      },
      "message": "UI to alert of respend attempt affecting wallet.\n\nRespend transactions that conflict with transactions already in the\nwallet are added to it.  They are not displayed unless they also involve\nthe wallet, or get into a block.  If they do not involve the wallet,\nthey continue not to affect balance.\n\nTransactions that involve the wallet, and have conflicting non-equivalent\ntransactions, are highlighted in red.  When the conflict first occurs, a\nmodal dialog is thrown.\n\nWhen a conflict is added to the wallet, counter nConflictsReceived is\nincremented.  This acts like a change in active block height for the\npurpose of triggering UI updates.",
      "tree": {
        "sha": "fd28bd833e3e2a518b1753241d4b31bf71f0fe29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd28bd833e3e2a518b1753241d4b31bf71f0fe29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a62da92144bcf483953ee438cbae68d2a73ace0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62da92144bcf483953ee438cbae68d2a73ace0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a62da92144bcf483953ee438cbae68d2a73ace0"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 56,
      "deletions": 14
    },
    "files": [
      {
        "sha": "1f3562df057b6e18a62aaaf333ccc2c2210da308",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -29,6 +29,10 @@ static const int STATUSBAR_ICONSIZE = 16;\n #define COLOR_TX_STATUS_OFFLINE QColor(192, 192, 192)\n /* Transaction list -- TX status decoration - default color */\n #define COLOR_BLACK QColor(0, 0, 0)\n+/* Transaction list -- has conflicting transactions */\n+#define COLOR_HASCONFLICTING QColor(255, 255, 255)\n+/* Transaction list -- has conflicting transactions - background */\n+#define COLOR_HASCONFLICTING_BG QColor(192, 0, 0)\n \n /* Tooltips longer than this (in characters) are converted into rich text,\n    so that they can be word-wrapped."
      },
      {
        "sha": "fca95eecee34c33f9fa8cfb8aa347ba60bc83e14",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -25,7 +25,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     watchOnlyFilter(WatchOnlyFilter_All),\n     minAmount(0),\n     limitRows(-1),\n-    showInactive(true)\n+    showInactive(false)\n {\n }\n \n@@ -41,7 +41,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n-    if(!showInactive && status == TransactionStatus::Conflicted)\n+    if(!showInactive && status == TransactionStatus::Conflicted && type == TransactionRecord::Other)\n         return false;\n     if(!(TYPE(type) & typeFilter))\n         return false;"
      },
      {
        "sha": "42641322b51f09a80b0e8779d0e4979864e94a3c",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -188,6 +188,8 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n+    status.hasConflicting = false;\n+\n     if (!CheckFinalTx(wtx))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n@@ -231,6 +233,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         if (status.depth < 0)\n         {\n             status.status = TransactionStatus::Conflicted;\n+            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n         {\n@@ -239,6 +242,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         else if (status.depth == 0)\n         {\n             status.status = TransactionStatus::Unconfirmed;\n+            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (status.depth < RecommendedNumConfirmations)\n         {\n@@ -249,13 +253,13 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n             status.status = TransactionStatus::Confirmed;\n         }\n     }\n-\n }\n \n-bool TransactionRecord::statusUpdateNeeded()\n+bool TransactionRecord::statusUpdateNeeded(int64_t nConflictsReceived)\n {\n     AssertLockHeld(cs_main);\n-    return status.cur_num_blocks != chainActive.Height();\n+    return (status.cur_num_blocks != chainActive.Height() ||\n+            status.cur_num_conflicts != nConflictsReceived);\n }\n \n QString TransactionRecord::getTxID() const"
      },
      {
        "sha": "3c53ca0305738db4b214e112c99ebb5d76fff1f9",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -20,9 +20,17 @@ class TransactionStatus\n {\n public:\n     TransactionStatus():\n-        countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Offline), depth(0), open_for(0), cur_num_blocks(-1)\n-    { }\n+        countsForBalance(false),\n+        sortKey(\"\"),\n+        matures_in(0),\n+        status(Offline),\n+        hasConflicting(false),\n+        depth(0),\n+        open_for(0),\n+        cur_num_blocks(-1),\n+        cur_num_conflicts(-1)\n+    {\n+    }\n \n     enum Status {\n         Confirmed,          /**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/\n@@ -52,6 +60,10 @@ class TransactionStatus\n     /** @name Reported status\n        @{*/\n     Status status;\n+\n+    // Has conflicting transactions spending same prevout\n+    bool hasConflicting;\n+\n     qint64 depth;\n     qint64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number\n                       of additional blocks that need to be mined before\n@@ -60,6 +72,10 @@ class TransactionStatus\n \n     /** Current number of blocks (to know whether cached status is still valid) */\n     int cur_num_blocks;\n+\n+    /** Number of conflicts received into wallet as of last status update */\n+    int64_t cur_num_conflicts;\n+\n };\n \n /** UI model for a transaction. A core transaction can be represented by multiple UI transactions if it has\n@@ -137,7 +153,7 @@ class TransactionRecord\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded();\n+    bool statusUpdateNeeded(int64_t nConflictsReceived);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONRECORD_H"
      },
      {
        "sha": "e1e135aa23da69e5854bc0d2c9912bc42b83259c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -163,8 +163,12 @@ class TransactionTablePriv\n             parent->endRemoveRows();\n             break;\n         case CT_UPDATED:\n-            // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n-            // visible transactions.\n+            emit parent->dataChanged(parent->index(lowerIndex, parent->Status), parent->index(upperIndex-1, parent->Amount));\n+            break;\n+        case CT_GOT_CONFLICT:\n+            emit parent->message(parent->tr(\"Conflict Received\"),\n+                                 parent->tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network.\"),\n+                                 CClientUIInterface::MSG_WARNING);\n             break;\n         }\n     }\n@@ -184,20 +188,21 @@ class TransactionTablePriv\n             // stuck if the core is holding the locks for a longer time - for\n             // example, during a wallet rescan.\n             //\n-            // If a status update is needed (blocks came in since last check),\n-            //  update the status of this transaction from the wallet. Otherwise,\n+            // If a status update is needed (blocks or conflicts came in since last check),\n+            // update the status of this transaction from the wallet. Otherwise,\n             // simply re-use the cached status.\n             TRY_LOCK(cs_main, lockMain);\n             if(lockMain)\n             {\n                 TRY_LOCK(wallet->cs_wallet, lockWallet);\n-                if(lockWallet && rec->statusUpdateNeeded())\n+                if(lockWallet && rec->statusUpdateNeeded(wallet->nConflictsReceived))\n                 {\n                     std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n \n                     if(mi != wallet->mapWallet.end())\n                     {\n                         rec->updateStatus(mi->second);\n+                        rec->status.cur_num_conflicts = wallet->nConflictsReceived;\n                     }\n                 }\n             }\n@@ -231,6 +236,7 @@ TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *paren\n     priv->refreshWallet();\n \n     connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+    connect(this, SIGNAL(message(QString,QString,unsigned int)), walletModel, SIGNAL(message(QString,QString,unsigned int)));\n \n     subscribeToCoreSignals();\n }\n@@ -361,6 +367,8 @@ QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n         return tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n         return tr(\"Mined\");\n+    case TransactionRecord::Other:\n+        return tr(\"Other\");\n     default:\n         return QString();\n     }\n@@ -556,7 +564,13 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return formatTooltip(rec);\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n+    case Qt::BackgroundColorRole:\n+        if (rec->status.hasConflicting)\n+            return COLOR_HASCONFLICTING_BG;\n+        break;\n     case Qt::ForegroundRole:\n+        if (rec->status.hasConflicting)\n+            return COLOR_HASCONFLICTING;\n         // Non-confirmed (but not immature) as transactions are grey\n         if(!rec->status.countsForBalance && rec->status.status != TransactionStatus::Immature)\n         {"
      },
      {
        "sha": "b81a4b91ba0f943286ef618ddbb22351985ec315",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "patch": "@@ -98,6 +98,10 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txWatchonlyDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n+signals:\n+    // Fired when a message should be reported to the user\n+    void message(const QString &title, const QString &message, unsigned int style);\n+\n public slots:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status, bool showTransaction);"
      }
    ]
  },
  {
    "sha": "2439d0a4244f2077fc3643dc00ed9577e76d2e10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDM5ZDBhNDI0NGYyMDc3ZmMzNjQzZGMwMGVkOTU3N2U3NmQyZTEw",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-22T05:02:24Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-07-13T00:38:30Z"
      },
      "message": "Add -respendnotify option, new RPC data, reg tests\n\n-respendnotify=<cmd> Execute command when a network tx respends wallet\ntx input (%s=respend TxID, %t=wallet TxID)\n\nAdd respendsobserved array to gettransaction, listtransactions, and\nlistsinceblock RPCs.  This omits the malleability clones that are included\nin the walletconflicts array.\n\nAdd RPC help for respendsobserved and walletconflicts (help was missing\nfor the latter).\n\nNew test txn_doublespendrelay.py uses a 4-node network to test 5 relay\nscenarios.\n\nNew test txn_clone does what the old txnmall.sh test did. It creates\nan equivalent malleated clone and tests that SyncMetaData syncs the\naccounting effects from the original transaction to the confirmed clone.\n\nExisting test txn_doublespend.py is changed to remove reliance on\naccounting \"move\" ledger entries and on broken SyncMetaData.  Instead,\nexpect double-spend amount to be debited from the default \"\" account.",
      "tree": {
        "sha": "73d6b8d85f72cd57f972b1543a2a3226a0938648",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73d6b8d85f72cd57f972b1543a2a3226a0938648"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2439d0a4244f2077fc3643dc00ed9577e76d2e10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2439d0a4244f2077fc3643dc00ed9577e76d2e10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2439d0a4244f2077fc3643dc00ed9577e76d2e10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2439d0a4244f2077fc3643dc00ed9577e76d2e10/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58c5bb791c32f57c0614c5550d48c8e9fe11c3a8"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 174,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eefcc6ea55b9978a05d95f04d97ff212b96e19f1",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -136,6 +136,9 @@ Execute command when the best block changes (%s in cmd is replaced by block hash\n \\fB\\-walletnotify=\\fR<cmd>\n Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\n .TP\n+\\fB\\-respendnotify=\\fR<cmd>\n+Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\n+.TP\n \\fB\\-alertnotify=\\fR<cmd>\n Execute command when a relevant alert is received (%s in cmd is replaced by message)\n .TP"
      },
      {
        "sha": "73143d6f9c712e7d970c6108c844e66270d5add8",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -21,6 +21,7 @@ testScripts=(\n     'mempool_resurrect_test.py'\n     'txn_doublespend.py --mineblock'\n     'txn_clone.py'\n+    'txn_doublespendrelay.py'\n     'getchaintips.py'\n     'rawtransactions.py'\n     'rest.py'"
      },
      {
        "sha": "4c12044afba084cc1d82af0b14b142329bfffa2b",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -8,9 +8,8 @@\n #\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import AuthServiceProxy, JSONRPCException\n-from decimal import Decimal\n from test_framework.util import *\n+from decimal import Decimal\n import os\n import shutil\n "
      },
      {
        "sha": "f349c53c0aa2f3def630c4a0f29bc5af887ea048",
        "filename": "qa/rpc-tests/txn_doublespendrelay.py",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/rpc-tests/txn_doublespendrelay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/qa/rpc-tests/txn_doublespendrelay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespendrelay.py?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -0,0 +1,138 @@\n+#!/usr/bin/env python\n+\n+#\n+# Test double-spend-relay and notification code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from decimal import Decimal\n+\n+class DoubleSpendRelay(BitcoinTestFramework):\n+\n+    #\n+    # Create a 4-node network; roles for the nodes are:\n+    # [0] : transaction creator\n+    # [1] : respend sender\n+    # [2] : relay node\n+    # [3] : receiver, should detect/notify of double-spends\n+    #\n+    # Node connectivity is:\n+    # [0,1] <--> [2] <--> [3]\n+    #\n+    def setup_network(self):\n+        self.is_network_split = False\n+        self.nodes = []\n+        for i in range(0,4):\n+            self.nodes.append(start_node(i, self.options.tmpdir))\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[3], 2)\n+        return self.nodes\n+\n+    def run_test(self):\n+        fee = Decimal(\"0.01\")\n+\n+        nodes = self.nodes\n+        # Test 1: First spend\n+        # shutdown nodes[1] so it is not aware of the first spend\n+        # and will be willing to broadcast a respend\n+        stop_node(nodes[1], 1)\n+        # First spend: nodes[0] -> nodes[3]\n+        amount = Decimal(\"144\") # We rely on this requiring 3 50-BTC inputs\n+        (total_in, tx1_inputs) = gather_inputs(nodes[0], amount+fee)\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[3].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(tx1_inputs, outputs))\n+        txid1 = nodes[0].sendrawtransaction(signed[\"hex\"], True)\n+        sync_mempools([nodes[0], nodes[3]])\n+        \n+        txid1_info = nodes[3].gettransaction(txid1)\n+        assert_equal(txid1_info[\"respendsobserved\"], [])\n+\n+        # Test 2: Is double-spend of tx1_inputs[0] relayed?\n+        # Restart nodes[1]\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Second spend: nodes[0] -> nodes[0]\n+        amount = Decimal(\"40\")\n+        total_in = Decimal(\"50\")\n+        inputs2 = [tx1_inputs[0]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs2, outputs))\n+        txid2 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid2 is relayed to nodes[3] (but don't wait forever):\n+        # Note we can't use sync_mempools, because the respend isn't added to\n+        # the mempool.\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if txid1_info[\"respendsobserved\"] != []:\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(txid1_info[\"respendsobserved\"], [txid2])\n+\n+        # Test 3: Is triple-spend of tx1_inputs[0] not relayed?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Third spend: nodes[0] -> nodes[0]\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs2, outputs))\n+        txid3 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Ensure txid3 not relayed to nodes[3]:\n+        time.sleep(9.1)\n+        txid1_info = nodes[3].gettransaction(txid1)\n+        assert_equal(txid1_info[\"respendsobserved\"], [txid2])\n+\n+        # Test 4: Is double-spend of tx1_inputs[1] relayed when triple-spend of tx1_inputs[0] precedes it?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Inputs are third spend, second spend\n+        amount = Decimal(\"89\")\n+        total_in = Decimal(\"100\")\n+        inputs4 = [tx1_inputs[0],tx1_inputs[1]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs4, outputs))\n+        txid4 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid4 is relayed to nodes[3] (but don't wait forever):\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if txid1_info[\"respendsobserved\"] != [txid2]:\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(sorted(txid1_info[\"respendsobserved\"]), sorted([txid2,txid4]))\n+\n+        # Test 5: Is double-spend of tx1_inputs[2] relayed when triple-spend of tx1_inputs[0] follows it?\n+        # Clear node1 mempool\n+        stop_node(nodes[1], 1)\n+        nodes[1] = start_node(1, self.options.tmpdir)\n+        connect_nodes(nodes[1], 2)\n+        # Inputs are second spend, third spend\n+        amount = Decimal(\"88\")\n+        total_in = Decimal(\"100\")\n+        inputs5 = [tx1_inputs[2],tx1_inputs[0]]\n+        change_outputs = make_change(nodes[0], total_in, amount, fee)\n+        outputs = dict(change_outputs)\n+        outputs[nodes[0].getnewaddress()] = amount\n+        signed = nodes[0].signrawtransaction(nodes[0].createrawtransaction(inputs5, outputs))\n+        txid5 = nodes[1].sendrawtransaction(signed[\"hex\"], True)\n+        # Wait until txid5 is relayed to nodes[3] (but don't wait forever):\n+        for i in range(1,7):\n+            txid1_info = nodes[3].gettransaction(txid1)\n+            if sorted(txid1_info[\"respendsobserved\"]) != sorted([txid2,txid4]):\n+                break\n+            time.sleep(0.1 * i**2) # geometric back-off\n+        assert_equal(sorted(txid1_info[\"respendsobserved\"]), sorted([txid2,txid4,txid5]))\n+\n+if __name__ == '__main__':\n+    DoubleSpendRelay().main()\n+"
      },
      {
        "sha": "a73d903920cbc54ed176ae944b7aea93c4247c4f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -351,6 +351,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-respendnotify=<cmd>\", _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n #endif"
      },
      {
        "sha": "917d2ba3c667ad8bdd8085b6c3ae23973bcfaedf",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -71,6 +71,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n+    UniValue respends(UniValue::VARR);\n+    BOOST_FOREACH(const uint256& respend, wtx.GetConflicts(false))\n+        respends.push_back(respend.GetHex());\n+    entry.push_back(Pair(\"respendsobserved\", respends));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -1418,6 +1422,12 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"walletconflicts\\\" : [\\n\"\n+            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"respendsobserved\\\" : [\\n\"\n+            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n@@ -1609,6 +1619,12 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"walletconflicts\\\" : [\\n\"\n+            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"respendsobserved\\\" : [\\n\"\n+            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n@@ -1692,6 +1708,12 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n             \"  \\\"blocktime\\\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n+            \"  \\\"walletconflicts\\\" : [\\n\"\n+            \"      \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"respendsobserved\\\" : [\\n\"\n+            \"      \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"  ],\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"details\\\" : [\\n\""
      },
      {
        "sha": "351c24b0b6c81c824207b24f28da21b0a4de6f95",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2439d0a4244f2077fc3643dc00ed9577e76d2e10/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "patch": "@@ -731,6 +731,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                 if (IsFromMe(txConflict) || IsMine(txConflict))\n                 {\n                     NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n+                    // external respend notify\n+                    std::string strCmd = GetArg(\"-respendnotify\", \"\");\n+                    if (!strCmd.empty())\n+                    {\n+                        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+                        boost::replace_all(strCmd, \"%t\", conflictHash.GetHex());\n+                        boost::thread t(runCommand, strCmd); // thread runs free\n+                    }\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "d9351eee747b2477021fc7b98ff45696f0d59896",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTM1MWVlZTc0N2IyNDc3MDIxZmM3Yjk4ZmY0NTY5NmYwZDU5ODk2",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-07-22T05:07:02Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2015-07-13T00:38:31Z"
      },
      "message": "Release notes",
      "tree": {
        "sha": "26135e9d2e45dbdfcf197471ff4fc1317364730e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26135e9d2e45dbdfcf197471ff4fc1317364730e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9351eee747b2477021fc7b98ff45696f0d59896",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9351eee747b2477021fc7b98ff45696f0d59896",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9351eee747b2477021fc7b98ff45696f0d59896",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9351eee747b2477021fc7b98ff45696f0d59896/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2439d0a4244f2077fc3643dc00ed9577e76d2e10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2439d0a4244f2077fc3643dc00ed9577e76d2e10"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "74ead78d808413143a300c906c371fc85ccd8cff",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9351eee747b2477021fc7b98ff45696f0d59896/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9351eee747b2477021fc7b98ff45696f0d59896/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d9351eee747b2477021fc7b98ff45696f0d59896",
        "patch": "@@ -25,6 +25,52 @@ git merge commit are mentioned.\n \n ### P2P protocol and network code\n \n+Double-Spend Relay and Alerts\n+=============================\n+VERY IMPORTANT: *It has never been safe, and remains unsafe, to rely*\n+*on unconfirmed transactions.*\n+\n+Relay\n+-----\n+When an attempt is seen on the network to spend the same unspent funds\n+more than once, it is no longer ignored.  Instead, it is broadcast, to\n+serve as an alert.  This broadcast is subject to protections against\n+denial-of-service attacks.\n+\n+Wallets and other bitcoin services should alert their users to\n+double-spends that affect them.  Merchants and other users may have\n+enough time to withhold goods or services when payment becomes\n+uncertain, until confirmation.\n+\n+Bitcoin Core Wallet Alerts\n+--------------------------\n+The Bitcoin Core wallet now makes respend attempts visible in several\n+ways.\n+\n+If you are online, and a respend affecting one of your wallet\n+transactions is seen, a notification is immediately issued to the\n+command registered with `-respendnotify=<cmd>`.  Additionally, if\n+using the GUI:\n+ - An alert box is immediately displayed.\n+ - The affected wallet transaction is highlighted in red until it is\n+   confirmed (and it may never be confirmed).\n+\n+A `respendsobserved` array is added to `gettransaction`, `listtransactions`,\n+and `listsinceblock` RPC results.\n+\n+Warning\n+-------\n+*If you rely on an unconfirmed transaction, these changes do VERY*\n+*LITTLE to protect you from a malicious double-spend, because:*\n+\n+ - You may learn about the respend too late to avoid doing whatever\n+   you were being paid for.\n+ - Using other relay rules, a double-spender can craft the double- \n+   spend to resist broadcast.\n+ - Miners can choose which conflicting spend to confirm, and some\n+   miners may not confirm the first acceptable spend they see.\n+\n+\n ### Validation\n \n ### Build system"
      }
    ]
  }
]