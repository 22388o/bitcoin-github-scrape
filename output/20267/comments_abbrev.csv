DrahtBot,2020-10-30 01:15:06,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21008 (test: fix zmq test flakiness, improve speed by theStack)\n* #20892 (tests: Run both descriptor and legacy tests wi",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-719111613,719111613,
MarcoFalke,2020-11-04 07:52:34,"```\nlibbitcoin_wallet.lib(wallet_walletutil.obj) : error LNK2001: unresolved external symbol ""bool __cdecl ExistsSQLiteDatabase(class boost::filesystem::path const &)"" (?ExistsSQLiteDatabase@@YA_NAEBVpath@filesystem@boost@@@Z) [C:\projects\bitcoin\build_msvc\bench_bitcoin\bench_bitcoin.vcxproj]\n```\n\n```\nThe subject line of commit hash 8ea48f202d800895abea798385ac0e67f7f3034d is followed ",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-721570837,721570837,
achow101,2020-11-04 17:36:08,"Fixed the linter error.\n\nI'm not sure what is causing the appveyor failure, nor how to fix it.",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-721873303,721873303,
ryanofsky,2020-11-04 18:21:03,"> I'm not sure what is causing the appveyor failure, nor how to fix it.\n\nI dug up the old link https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/36097732 and the link errors for unresolved symbols just come from removing wallet/bdb.cpp and wallet/salvage.cpp from original libbitcoin_wallet_a_SOURCES setting in Makefile.am. You might need to add these explicitly to build_msvc/libbitcoin_w",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-721895698,721895698,
ryanofsky,2020-11-04 18:23:52,"> Example of how to do this: [9eaeb7f](https://github.com/bitcoin/bitcoin/commit/9eaeb7fb8d4ab0d4493849e6c17e314fd75fea9c)\n\nBetter simpler example: 0660119ac372c2863d14060ac1bc9bc243771f94",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-721897050,721897050,
achow101,2020-11-04 18:52:19,"> > I'm not sure what is causing the appveyor failure, nor how to fix it.\n> \n> I dug up the old link https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/36097732 and the link errors for unresolved symbols just come from removing wallet/bdb.cpp and wallet/salvage.cpp from original libbitcoin_wallet_a_SOURCES setting in Makefile.am. You might need to add these explicitly to build_msvc/libbit",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-721910807,721910807,
achow101,2020-11-06 21:30:41,"Changed to automatically switch to using descriptor wallets if BDB is not compiled and `--legacy-wallet` is not compiled. This requires that several tests have `--legacy-wallet` be added in `test_runner.py`. Additionally, this broke `wallet_send.py` so those tests have to be updated to work with descriptor wallets. `wallet_upgradewallet.py` also had to be restricted to just a legacy wallet test.\",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-723308687,723308687,
ryanofsky,2020-12-02 15:49:48,"re: https://github.com/bitcoin/bitcoin/pull/20267#issue-512655353\n\n> Fixes the tests for #20202. When BDB is not compiled, the wallet tests that rely on the legacy wallet will be disabled. Other tests not necessarily requiring the wallet, but can optionally test behavior with the wallet, are updated to handle the different wallet types. One test, `rpc_net.py`, which only uses the wallet to set",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-737317034,737317034,
achow101,2020-12-02 17:37:00,"> Starting to look at this but can the description be updated to maybe strip out the references to old PRs and say what behavior change this PR is implementing? What happens with test runner currently, and what happens after this PR? What happens running individual BDB tests currently, and what happens after?\n\nUpdated the OP.\n\n> I'm used to test runner showing a table of all tests `Passed`",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-737384240,737384240,
laanwj,2020-12-10 13:36:14,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-742525058,742525058,
ryanofsky,2020-12-16 01:13:28,"Thanks for updates. Init sequence still seems too complicated. I don't see a reason options can't be set once simply in the constructor. In the current implementation cf5de8ec59ac6e2a49c728b886eb5d46d9705d1e:\n\n- self.options.descriptors value changes over time and is set to the return value of a function which circularly reads self.options.descriptors\n- default_wallet_name can't be read/writ",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-745698726,745698726,
achow101,2021-01-09 00:33:07,Included @ryanofsky's suggestions. Also rebased to fix two silent merge conflicts.,https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-757062331,757062331,
achow101,2021-01-26 01:15:21,"Rebased. I think there are improvements that can be done in followup PRs. For example, #20892 implements running a test twice. But for now, I would like for this to be merged so that we can get more test coverage of descriptor wallets.",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-767216062,767216062,
laanwj,2021-01-27 13:16:11,"CI fail looks like an actual issue:\n```\n.........Traceback (most recent call last):\n  File ""/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/create_cache.py"", line 27, in <module>\n    CreateCache().main()\n  File ""/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py"", line 105, in __init__\n   ",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-768278128,768278128,
achow101,2021-01-27 17:53:39,"> CI fail looks like an actual issue:\n\nShould be resolved now.",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-768462368,768462368,
S3RK,2021-02-04 10:04:08,"Started doing review. Have only one small question, but I'll get back with more detailed feedback later",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-773187283,773187283,
laanwj,2021-02-05 13:21:12,"> IMO, handling of sqlite/bdb test variants is moving in a bad direction here and in followup #20892. I think individual test invocations should be as small and fast as possible, \n\nYes, I think so too. And agree it's good if skipping tests is reported explicitly. However I don't think this PR makes this much worse. But yes it does add some `if self.is_wallet_compiled():`.\n\nACK 49797c3ccfbb",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-774029261,774029261,
laanwj,2021-02-05 13:23:58,"UBsan error in the CI (https://github.com/bitcoin/bitcoin/pull/20267/checks?check_run_id=1832884065) is:\n```\ntest/fuzz/system.cpp:57:159: runtime error: implicit conversion from type 'int' of value -2049 (32-bit, signed) to type 'unsigned int' changed the value to 4294965247 (32-bit, unsigned)\n```\nduring the fuzz tests. As these are not touched here, I don't think it needs to block merge.",https://github.com/bitcoin/bitcoin/pull/20267#issuecomment-774030686,774030686,
mjdietzx,2020-10-30 17:28:54,I'm having trouble figuring out the logic here. Is there a more clear and concise way to determine `descriptors`?,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515261141,515261141,test/functional/test_framework/test_framework.py
mjdietzx,2020-10-30 17:30:44,Are you able to use `self. get_use_descriptors()` here? To me it seems like logic might be getting duplicated,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515262567,515262567,test/functional/test_framework/test_framework.py
mjdietzx,2020-10-30 17:35:11,nit: in places like these would  `err_code = -4 if self.options.descriptors else -1` be easier to follow?,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515268074,515268074,test/functional/wallet_multiwallet.py
mjdietzx,2020-10-30 17:44:14,"It seems like usually you're doing: `#ifdef USE_BDB ... #elif USE_SQLITE`, but here you're doing  `#ifdef USE_BDB ... #ifdef USE_SQLITE`\n\nShould this be consistent, or does it matter? I'm guessing `USE_BDB` and `USE_SQLITE` can never both be set?",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515274175,515274175,src/wallet/walletdb.cpp
mjdietzx,2020-10-30 17:46:52,"same, should it be `#elif USE_SQLITE` here?",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515275934,515275934,src/wallet/walletdb.cpp
mjdietzx,2020-10-30 17:49:07,Can this be condensed to a one-liner: `check_wallet_filelock(self.is_sqlite_compiled())`,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515277183,515277183,test/functional/feature_filelock.py
achow101,2020-10-30 18:34:47,"No, `get_use_descriptors()` is used to switch between legacy and descriptors for the tests where the type is not explicitly being set. This is different from the wallet tests (that will call this `skip_if_no_wallet()`) which are testing specific descriptor and legacy behavior.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515303197,515303197,test/functional/test_framework/test_framework.py
achow101,2020-10-30 18:35:49,"Not really.\n\nThe purpose of this function is to enable or disable features depending on whether support is compiled and the current settings, for those tests where the descriptors setting is not important to the test and only need to just work.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515303762,515303762,test/functional/test_framework/test_framework.py
achow101,2020-10-30 18:40:16,"No, it's supposed to `#ifdef ... #ifdef` because both `USE_BDB` and `USE_SQLITE` can both be set, and in fact, is the default.\n\nThe instances where `#ifdef...#elif` is used is only because one wallet type must be defaulted to, and for now, we default to BDB.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515305897,515305897,src/wallet/walletdb.cpp
achow101,2020-10-30 18:40:49,"When both are compiled, we want to test both cases.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515306142,515306142,test/functional/feature_filelock.py
achow101,2020-10-30 18:41:04,"No, if both are compiled, then we need both headers.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515306249,515306249,src/wallet/walletdb.cpp
achow101,2020-10-30 18:41:49,Done in upstream PR #18788,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r515306633,515306633,test/functional/wallet_multiwallet.py
ryanofsky,2020-11-05 22:04:46,"In commit ""Do not compile BDB things when USE_BDB is defined"" (0cbff9303729dddaad781a4d285c141a86053687)\n\nI doubt it matters, but for consistency with the enable wallet option, it might make sense to add these arguments `argsman.AddHiddenArgs` when use_bdb is disabled, so configuation files specifying these options aren't rejected",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518397745,518397745,src/wallet/init.cpp
ryanofsky,2020-11-05 22:39:41,"In commit ""Do not compile BDB things when USE_BDB is defined"" (0cbff9303729dddaad781a4d285c141a86053687)\n\nIn `MakeDatabase`:\n\n- It doesn't seem ideal to return null with success status and no error message if bdb isn't available.\n- It also doesn't seem ideal to assert false above if sqlite isn't available.\n- It also puts an unnecessary burden on callers that don't care which database b",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518413477,518413477,src/wallet/walletdb.cpp
ryanofsky,2020-11-05 22:45:23,"In commit ""Do not compile BDB things when USE_BDB is defined"" (0cbff9303729dddaad781a4d285c141a86053687)\n\nThis new code can be deleted with the suggested change to `MakeDatabase` above. The `MakeDatabase` function can figure out what formats are available without putting the burden on callers.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518415945,518415945,src/wallet/test/wallet_tests.cpp
ryanofsky,2020-11-05 22:57:58,"In commit ""Add a helper to determine whether descriptors should be used"" (d97e22f5244cb913ef84953309a3eaee07f54c1c)\n\nI haven't looked yet at how this function is used, but it seem dangerous if it will be used to silently override `--descriptors` or `--legacy-wallet` options that were specified. This would be bad because it would give the impression that requested tests passed when in reality t",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518420893,518420893,test/functional/test_framework/test_framework.py
achow101,2020-11-06 18:37:18,Done in upstream #20202 ,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518934010,518934010,src/wallet/init.cpp
achow101,2020-11-06 18:37:22,Done in upstream #20202 ,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518934067,518934067,src/wallet/walletdb.cpp
achow101,2020-11-06 18:37:27,Done in upstream #20202 ,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r518934105,518934105,src/wallet/test/wallet_tests.cpp
achow101,2020-11-06 21:29:03,"This isn't used to skip tests.\n\nI've made a change that somewhat incorporates what you suggest.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r519014238,519014238,test/functional/test_framework/test_framework.py
luke-jr,2020-11-13 15:04:35,Should we be adding this for 0.21?,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523007716,523007716,build_msvc/bitcoin_config.h
ryanofsky,2020-11-13 15:15:21,"> Should we be adding this for 0.21?\n\nNo opinion (seems fine, not necessary), but `#define USE_SQLITE 1` is part of base PR #20202. @achow101, PR description could be clearer and say ***This is based on #20202.*** or something along those lines since it seems like I'm not the only person to not realize this PR contains changes from another PR",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523014805,523014805,build_msvc/bitcoin_config.h
luke-jr,2020-11-13 15:15:52,Is this another bugfix we should put in 0.21?,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523015180,523015180,src/wallet/salvage.cpp
achow101,2020-11-13 16:55:22,It's not strictly necessary. Other stuff later like trying to actually open the wallet file if it isn't BDB will still fail and we won't do anything to the file. It will just have a slightly worse error message.,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523079050,523079050,src/wallet/salvage.cpp
ysangkok,2020-11-13 20:59:00,"@mjdietzx , you can use [Quine-McCluskey](https://github.com/ysangkok/py-kmap/blob/master/newqm.py) to derive a minimal function:\n\n```\n>>> from newqm import QM\n>>> qm = QM(['A','B','C'])\n>>> def aj(a,b,c): # a is self.options.descriptors, b is bdb, c is sqlite compilation\n...      descriptors = a\n...      if not b and c and not a:\n...          descriptors = True\n...      elif b a",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523229115,523229115,test/functional/test_framework/test_framework.py
ysangkok,2020-11-13 21:42:47,"the sentence makes it sound like it is optional because the wallet can be disabled. wouldn't it be better to say ""Optional. Needed to open legacy wallets.""",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523247602,523247602,doc/build-unix.md
luke-jr,2020-11-13 22:39:59,"Probably shouldn't use the word ""legacy"" (at least user-facing) while it isn't actually legacy yet.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r523269815,523269815,doc/build-unix.md
ryanofsky,2021-01-13 20:46:46,"In commit ""tests: Set descriptors default based on compilation"" (86b3c3d84bd57dffb3b5e47cd1a076bec62c7e92)\n\nWould be good to move this to the bottom of the function so it is better organized. Set self.options then self.config instead of options then config then options again",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556817748,556817748,test/functional/test_framework/test_framework.py
ryanofsky,2021-01-13 20:48:29,"In commit ""tests: Set descriptors default based on compilation"" (86b3c3d84bd57dffb3b5e47cd1a076bec62c7e92)\n\nIf this comment is true, could maybe write:\n\n```python\nelse:\n   del self.options.descriptors\n```\n\nTo be sure the value is not used",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556818716,556818716,test/functional/test_framework/test_framework.py
ryanofsky,2021-01-13 20:57:20,"In commit ""tests: Don't make any wallets unless wallet is required"" (972c9cf8a4e2e27bd28a33630690404a1d3078d4)\n\nIf possible, it would seem clearer to just not call `init_wallet()` when `requires_wallet` is false than to call it and have it succeed without doing anything",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556823298,556823298,test/functional/test_framework/test_framework.py
ryanofsky,2021-01-13 21:12:29,"In commit ""Disable wallet_descriptor.py bdb format check if BDB is not compiled"" (297ab0e699b26f9742dc6ebf75be1dd857d1e531)\n\nWhat is the long term plan for these skipped checks? Personally I think it is bad to report that tests pass when parts of them are just being skipped. Do you disagree? I can think of two different ways we might address this in future PRs:\n\n1. Add a ""partially skipped",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556831353,556831353,test/functional/wallet_descriptor.py
ryanofsky,2021-01-13 22:05:39,"In commit ""Have feature_filelock.py test both bdb and sqlite, depending on compiled"" (49500debf06842ad0ee1499003c232c9a1c16597)\n\nIt seems like this is adding an unnecessary level of complexity. We already have a mechanism for running the same test without and without descriptors: we make the test respect the `--descriptors` option, and list the test twice in `test_runner` with and without the ",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556885832,556885832,test/functional/feature_filelock.py
ryanofsky,2021-01-13 22:27:14,"In commit ""Setup wallets with descriptors for feature_notifications"" (7c60f35da3117af7d6a0b8a1e4756c5df907bd1c)\n\nComment below ""Give node 0 same wallet seed as node 1"" should be moved here to reflect what this code is doing (and what the previous code is no longer doing)",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556908988,556908988,test/functional/feature_notifications.py
ryanofsky,2021-01-13 22:45:04,"In commit ""Setup wallets with descriptors for feature_notifications"" (7c60f35da3117af7d6a0b8a1e4756c5df907bd1c)\n\nIs there any way this test setup can be simplified, or do we have any ideas about how this might be simplified in the future if it is not worth simplifying now? The old setup was trivial: there were two wallets and one wallet had a `sethdseed` call to use the same seed as the other ",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556927365,556927365,test/functional/feature_notifications.py
ryanofsky,2021-01-13 23:39:13,"In commit ""Setup wallets for interface_bitcoin_cli.py"" (02b69ded2f8d2fe8276b63a9faa134623fc82ed5)\n\nCorrect if I'm wrong, but this seems like a workaround to deal with  `init_wallet` setup now being skipped because this test does not call `skip_if_no_wallet()`.\n\nI think ideally it would be better to split this test up so wallet and non-wallet parts are in separate tests and skipped checks a",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556948674,556948674,test/functional/interface_bitcoin_cli.py
ryanofsky,2021-01-14 00:05:20,"In commit ""Have feature_filelock.py test both bdb and sqlite, depending on compiled"" (49500debf06842ad0ee1499003c232c9a1c16597)\n\nThis is great! Hope to see more of usage of MiniWallet. But it would be good to have a comment below where the miniwallet is used, saying what it is testing. I can't figure it out. If the test never required a wallet and would pass whether or not `sendtoaddress` was ",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556957641,556957641,test/functional/rpc_net.py
ryanofsky,2021-01-14 00:16:02,"In commit ""Setup wallets for interface_zmq.py"" (c8a809bd3bc22707d336b16dc883ae7f35ab8fd3)\n\nIs this another workaround for `init_wallet` setup now being skipped? Could this simply do `if self.is_wallet_compiled(): self.requires_wallet = True` in `set_test_params` as suggested previously? (Or divided into wallet/nonwallet tests using `skip_if_no_wallet`)",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556961263,556961263,test/functional/interface_zmq.py
ryanofsky,2021-01-14 00:22:37,"In commit ""tests: Disable bdb dump test when no bdb"" (c191614587f138c00277c99a9709dedaf8bbcfd7)\n\nI guess this is another place where future test splitting or test runner improvements could provide feedback that test didn't fully pass and checks were skipped.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556963654,556963654,test/functional/tool_wallet.py
ryanofsky,2021-01-14 00:35:35,"In commit ""tests: mempool_compatibility needs requires_wallet set"" (5a985cd6656afe976f73b3276017e22055a8050c)\n\nMaybe it would be good to rename `requires_wallet` to something like `init_default_wallet` to more accurately reflect what the variable does. Also, `requires_wallet = False` seems basically equivalent to `default_wallet_name = False` and maybe the two variables should be combined at s",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556968003,556968003,test/functional/mempool_compatibility.py
ryanofsky,2021-01-14 00:47:55,"In commit ""Fix wallet_send.py wallet setup to work with descriptors"" (1fa9bbdb4076944272d5246d1140d29ba3ecb3a3)\n\nCan comment be expanded to say why? My understanding is something like ""Unlike legacy wallets, descriptor wallets don't allow watch-only keys and spendable keys in the same wallet."" If this is the case, it'd be helpful to say explicitly. It would also be good to say whether or not i",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556972270,556972270,test/functional/wallet_send.py
ryanofsky,2021-01-14 00:53:31,"In commit ""Fix wallet_send.py wallet setup to work with descriptors"" (1fa9bbdb4076944272d5246d1140d29ba3ecb3a3)\n\nWould be good to clarify with a reason like ""Descriptor wallets do not allow spendable keys and watch only keys in the same wallet"" (if this is the case).",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556974169,556974169,test/functional/wallet_send.py
ryanofsky,2021-01-14 01:05:15,"In commit ""Fix wallet_send.py wallet setup to work with descriptors"" (1fa9bbdb4076944272d5246d1140d29ba3ecb3a3)\n\nThis seems like the same code earlier copied from the feature_notifications test. You can see earlier comment, but I think it would be better to have a framework or util function that can easily create wallets with the same seed. (It would also seem better not to hard code that seed",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r556977983,556977983,test/functional/wallet_send.py
achow101,2021-01-25 23:57:55,"I think that the optimal solution for these is to split them into separate tests for wallet and non-wallet components.\n\nThere are some other tests, notable `feature_notifications.py` and `interface_zmq.py` which have a significant portion of tests specifically for the wallet.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564123336,564123336,test/functional/wallet_descriptor.py
achow101,2021-01-26 00:02:40,#20892 runs such tests twice. It also seems like this should be one of those tests that the wallet portion is split into a separate test.,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564124955,564124955,test/functional/feature_filelock.py
achow101,2021-01-26 00:30:18,"Until we implement private descriptor export, that won't be possible.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564134115,564134115,test/functional/feature_notifications.py
achow101,2021-01-26 01:09:33,"The `is_*_compiled` checks require self.config to already exist, so it must come before them and can't be at the bottom of the function.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146582,564146582,test/functional/test_framework/test_framework.py
achow101,2021-01-26 01:09:38,Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146615,564146615,test/functional/test_framework/test_framework.py
achow101,2021-01-26 01:09:56,Done.,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146729,564146729,test/functional/test_framework/test_framework.py
achow101,2021-01-26 01:10:07,Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146786,564146786,test/functional/feature_notifications.py
achow101,2021-01-26 01:10:14,Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146843,564146843,test/functional/interface_bitcoin_cli.py
achow101,2021-01-26 01:10:40,Added a comment. It is only used to generate a transaction so that `last_transaction` in `getpeerinfo` can be checked.,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564146964,564146964,test/functional/rpc_net.py
achow101,2021-01-26 01:10:50,Yes. Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564147031,564147031,test/functional/interface_zmq.py
achow101,2021-01-26 01:12:38,"Perhaps, but that's a bit more complicated.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564147547,564147547,test/functional/mempool_compatibility.py
achow101,2021-01-26 01:12:46,Added a comment.,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564147580,564147580,test/functional/wallet_send.py
achow101,2021-01-26 01:12:53,Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564147612,564147612,test/functional/wallet_send.py
achow101,2021-01-26 01:12:56,Done,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r564147634,564147634,test/functional/wallet_send.py
achow101,2021-01-27 17:53:21,Reverted this since it is causing problems when configured with `--disable-wallet`,https://github.com/bitcoin/bitcoin/pull/20267#discussion_r565514302,565514302,test/functional/test_framework/test_framework.py
S3RK,2021-02-04 10:03:25,"I can't understand why do we need ""the old versions have their wallets' setup"". I've tried to run this test with the flag set to False and it makes no difference",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r570095626,570095626,test/functional/mempool_compatibility.py
achow101,2021-02-04 17:39:49,"It's redundant now. Previously this variable was checked inside of `init_wallet()` which was called by `import_deterministic_coinbase_privkeys()` so we needed to set it to `True` to allow our call of that to work. But since checking `requires_wallet` is moved outside of that, it is no longer needed.\n\nRemoved and dropped the commit.",https://github.com/bitcoin/bitcoin/pull/20267#discussion_r570417408,570417408,test/functional/mempool_compatibility.py
