[
  {
    "sha": "97bcd36811b5f3cd1ff8ede379fe2744ef456c2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2JjZDM2ODExYjVmM2NkMWZmOGVkZTM3OWZlMjc0NGVmNDU2YzJh",
    "commit": {
      "author": {
        "name": "Jeff Rade",
        "email": "jeffrade@gmail.com",
        "date": "2018-02-15T01:24:42Z"
      },
      "committer": {
        "name": "Jeff Rade",
        "email": "jeffrade@gmail.com",
        "date": "2018-03-16T18:52:00Z"
      },
      "message": "[Trivial] Simplify if-else blocks and more descriptive variable naming",
      "tree": {
        "sha": "3b4a3317b78813842f5f2f15ba0adc7593ca8119",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b4a3317b78813842f5f2f15ba0adc7593ca8119"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a/comments",
    "author": {
      "login": "jeffrade",
      "id": 1307806,
      "node_id": "MDQ6VXNlcjEzMDc4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1307806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffrade",
      "html_url": "https://github.com/jeffrade",
      "followers_url": "https://api.github.com/users/jeffrade/followers",
      "following_url": "https://api.github.com/users/jeffrade/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffrade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffrade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffrade/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffrade/orgs",
      "repos_url": "https://api.github.com/users/jeffrade/repos",
      "events_url": "https://api.github.com/users/jeffrade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffrade/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jeffrade",
      "id": 1307806,
      "node_id": "MDQ6VXNlcjEzMDc4MDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1307806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jeffrade",
      "html_url": "https://github.com/jeffrade",
      "followers_url": "https://api.github.com/users/jeffrade/followers",
      "following_url": "https://api.github.com/users/jeffrade/following{/other_user}",
      "gists_url": "https://api.github.com/users/jeffrade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jeffrade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jeffrade/subscriptions",
      "organizations_url": "https://api.github.com/users/jeffrade/orgs",
      "repos_url": "https://api.github.com/users/jeffrade/repos",
      "events_url": "https://api.github.com/users/jeffrade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jeffrade/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be9a9a570c1140048f8781ced1111e1d930e517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be9a9a570c1140048f8781ced1111e1d930e517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be9a9a570c1140048f8781ced1111e1d930e517"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f5d160f21faf4619d54f4cdbe691203dcf7bcb0a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bcd36811b5f3cd1ff8ede379fe2744ef456c2a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=97bcd36811b5f3cd1ff8ede379fe2744ef456c2a",
        "patch": "@@ -52,6 +52,9 @@\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n+# 20 minutes represented in seconds\n+TRAVIS_TIMEOUT_DURATION = 20 * 60\n+\n BASE_SCRIPTS= [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n@@ -236,26 +239,24 @@ def main():\n     if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n-        tests = [re.sub(\"\\.py$\", \"\", t) + \".py\" for t in tests]\n+        tests = [re.sub(\"\\.py$\", \"\", test) + \".py\" for test in tests]\n         test_list = []\n-        for t in tests:\n-            if t in ALL_SCRIPTS:\n-                test_list.append(t)\n+        for test in tests:\n+            if test in ALL_SCRIPTS:\n+                test_list.append(test)\n             else:\n-                print(\"{}WARNING!{} Test '{}' not found in full test list.\".format(BOLD[1], BOLD[0], t))\n+                print(\"{}WARNING!{} Test '{}' not found in full test list.\".format(BOLD[1], BOLD[0], test))\n+    elif args.extended:\n+        # Include extended tests\n+        test_list = ALL_SCRIPTS\n     else:\n-        # No individual tests have been specified.\n-        # Run all base tests, and optionally run extended tests.\n+        # Run base tests only\n         test_list = BASE_SCRIPTS\n-        if args.extended:\n-            # place the EXTENDED_SCRIPTS first since the three longest ones\n-            # are there and the list is shorter\n-            test_list = EXTENDED_SCRIPTS + test_list\n \n     # Remove the test cases that the user has explicitly asked to exclude.\n     if args.exclude:\n-        tests_excl = [re.sub(\"\\.py$\", \"\", t) + \".py\" for t in args.exclude.split(',')]\n-        for exclude_test in tests_excl:\n+        exclude_tests = [re.sub(\"\\.py$\", \"\", test) + \".py\" for test in args.exclude.split(',')]\n+        for exclude_test in exclude_tests:\n             if exclude_test in test_list:\n                 test_list.remove(exclude_test)\n             else:\n@@ -320,7 +321,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n \n     #Run Tests\n     job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)\n-    time0 = time.time()\n+    start_time = time.time()\n     test_results = []\n \n     max_len_name = len(max(test_list, key=len))\n@@ -346,7 +347,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n-    print_results(test_results, max_len_name, (int(time.time() - time0)))\n+    print_results(test_results, max_len_name, (int(time.time() - start_time)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n@@ -403,15 +404,15 @@ def get_next(self):\n         while self.num_running < self.num_jobs and self.test_list:\n             # Add tests\n             self.num_running += 1\n-            t = self.test_list.pop(0)\n+            test = self.test_list.pop(0)\n             portseed = len(self.test_list) + self.portseed_offset\n             portseed_arg = [\"--portseed={}\".format(portseed)]\n             log_stdout = tempfile.SpooledTemporaryFile(max_size=2**16)\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n-            test_argv = t.split()\n+            test_argv = test.split()\n             testdir = \"{}/{}_{}\".format(self.tmpdir, re.sub(\".py$\", \"\", test_argv[0]), portseed)\n             tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n-            self.jobs.append((t,\n+            self.jobs.append((test,\n                               time.time(),\n                               subprocess.Popen([sys.executable, self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n@@ -425,15 +426,14 @@ def get_next(self):\n         while True:\n             # Return first proc that finishes\n             time.sleep(.5)\n-            for j in self.jobs:\n-                (name, time0, proc, testdir, log_out, log_err) = j\n-                if os.getenv('TRAVIS') == 'true' and int(time.time() - time0) > 20 * 60:\n-                    # In travis, timeout individual tests after 20 minutes (to stop tests hanging and not\n-                    # providing useful output.\n+            for job in self.jobs:\n+                (name, start_time, proc, testdir, log_out, log_err) = job\n+                if os.getenv('TRAVIS') == 'true' and int(time.time() - start_time) > TRAVIS_TIMEOUT_DURATION:\n+                    # In travis, timeout individual tests (to stop tests hanging and not providing useful output).\n                     proc.send_signal(signal.SIGINT)\n                 if proc.poll() is not None:\n                     log_out.seek(0), log_err.seek(0)\n-                    [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n+                    [stdout, stderr] = [file.read().decode('utf-8') for file in (log_out, log_err)]\n                     log_out.close(), log_err.close()\n                     if proc.returncode == TEST_EXIT_PASSED and stderr == \"\":\n                         status = \"Passed\"\n@@ -442,9 +442,9 @@ def get_next(self):\n                     else:\n                         status = \"Failed\"\n                     self.num_running -= 1\n-                    self.jobs.remove(j)\n+                    self.jobs.remove(job)\n \n-                    return TestResult(name, status, int(time.time() - time0)), testdir, stdout, stderr\n+                    return TestResult(name, status, int(time.time() - start_time)), testdir, stdout, stderr\n             print('.', end='', flush=True)\n \n class TestResult():\n@@ -490,7 +490,7 @@ def check_script_list(src_dir):\n     Check that there are no scripts in the functional tests directory which are\n     not being run by pull-tester.py.\"\"\"\n     script_dir = src_dir + '/test/functional/'\n-    python_files = set([t for t in os.listdir(script_dir) if t[-3:] == \".py\"])\n+    python_files = set([file for file in os.listdir(script_dir) if file.endswith(\".py\")])\n     missed_tests = list(python_files - set(map(lambda x: x.split()[0], ALL_SCRIPTS + NON_SCRIPTS)))\n     if len(missed_tests) != 0:\n         print(\"%sWARNING!%s The following scripts are not being run: %s. Check the test lists in test_runner.py.\" % (BOLD[1], BOLD[0], str(missed_tests)))\n@@ -526,7 +526,7 @@ def report_rpc_coverage(self):\n \n         if uncovered:\n             print(\"Uncovered RPC commands:\")\n-            print(\"\".join((\"  - %s\\n\" % i) for i in sorted(uncovered)))\n+            print(\"\".join((\"  - %s\\n\" % command) for command in sorted(uncovered)))\n         else:\n             print(\"All RPC commands covered.\")\n \n@@ -550,17 +550,17 @@ def _get_uncovered_rpc_commands(self):\n         if not os.path.isfile(coverage_ref_filename):\n             raise RuntimeError(\"No coverage reference found\")\n \n-        with open(coverage_ref_filename, 'r') as f:\n-            all_cmds.update([i.strip() for i in f.readlines()])\n+        with open(coverage_ref_filename, 'r') as file:\n+            all_cmds.update([line.strip() for line in file.readlines()])\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n                 if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n-            with open(filename, 'r') as f:\n-                covered_cmds.update([i.strip() for i in f.readlines()])\n+            with open(filename, 'r') as file:\n+                covered_cmds.update([line.strip() for line in file.readlines()])\n \n         return all_cmds - covered_cmds\n "
      }
    ]
  }
]