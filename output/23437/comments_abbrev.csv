DrahtBot,2021-11-04 08:23:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23546](https://github.com/bitcoin/bitcoin/pull/23546) (scripted-diff: Use clang-tidy syntax for C++ named arguments (tes",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-960544686,960544686,
lsilva01,2021-11-05 04:01:04,"@jnewbery and @glozow  thanks for reviews.\nI addressed your suggestions in 034e827.\n\nAs these changes are already implemented in another branch, with more other commits, I can close this PR if it's better. ",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-961610204,961610204,
theStack,2021-11-05 14:48:26,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-961955952,961955952,
theStack,2021-11-07 01:31:09,"Possible follow-up idea that came to my mind while reviewing this PR: couldn't we simplify the interface of `AcceptToMemoryPool` by getting rid of both the `CChainParams` and `CTxMemPool` parameters, since those can be deduced from the chainstate anyway? The change would look something like\n```diff\n-MempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n-  ",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-962536149,962536149,
lsilva01,2021-11-08 06:19:23,"Thanks for the review @theStack . I opened PR #23465 to test your suggestion.\nIt seems to work fine.",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-962845977,962845977,
jnewbery,2021-11-10 13:55:33,#23173 is merged. Please rebase and I'll review.,https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-965199458,965199458,
jnewbery,2021-11-11 12:11:04,Please update the PR description now that #23173 is merged.,https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-966252205,966252205,
lsilva01,2021-11-12 02:46:31,"Thanks for review @jnewbery . New commits were added to address the suggestions.\n",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-966776268,966776268,
lsilva01,2021-11-22 19:15:53,"@theStack  and @stratospher thanks for the review.\nThe commit were squashed, as suggested.",https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-975840356,975840356,
jnewbery,2021-11-04 08:27:27,"I don't think this description ""Tweakable parameters of this instance."" is very illuminating. Tweakable suggests to me that the user can modify these parameters, but that isn't the case here.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r742621253,742621253,src/validation.h
glozow,2021-11-04 14:46:43,"prefer snake case `accept_time`. Doxygen comment should be more descriptice, e.g. that this is the time that the mempool entry will record and will be used to determine when the entry expires.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r742908559,742908559,src/validation.h
lsilva01,2021-11-05 03:55:27,Changed the description in 034e827 .,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743375240,743375240,src/validation.h
lsilva01,2021-11-05 03:56:36,Changed `nAcceptTime` to `accept_time` and improved the field description in 034e827,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743375527,743375527,src/validation.h
jnewbery,2021-11-05 07:32:06,"""with a specified acceptance time"" is redundant with the parameter documentation below.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743437227,743437227,src/validation.h
jnewbery,2021-11-05 07:34:27,"Please align arguments on new lines after the opening parens:\n\n```suggestion\nMempoolAcceptResult AcceptToMemoryPool(const CChainParams& chainparams, CTxMemPool& pool,\n                                       CChainState& active_chainstate, const CTransactionRef &tx,\n                                       int64_t accept_time, bool bypass_limits, bool test_accept)\n```\n\n(We use clang-st",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743438207,743438207,src/validation.h
jnewbery,2021-11-05 07:35:32,"Please use clang-tidy style [bugprone-argument-comment](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html):\n\n```suggestion\n        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(Params(), tx_pool, chainstate, tx, GetTime(), bypass_limits, /*test_accept=*/false));\n```\n\nSee also https://github.com/bitcoin/bitcoin/pull/22981\n\n(same comment ",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743438724,743438724,src/test/fuzz/tx_pool.cpp
jnewbery,2021-11-05 07:36:43,"Again, please align new lines with the opening parens.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743439230,743439230,src/validation.cpp
jnewbery,2021-11-05 07:47:13,"Consider using the global namespace operator `::Params()` to explicitly show that you're calling a global function. I think the long-term goal is to remove these global calls to make it easier to unit test.\n\nSame comment for the ATMP calls below.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743444205,743444205,src/validation.cpp
lsilva01,2021-11-05 20:25:21,Removed in 9a0b0fc,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743957358,743957358,src/validation.h
lsilva01,2021-11-05 20:25:34,Done in 9a0b0fc,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743957460,743957460,src/validation.h
lsilva01,2021-11-05 20:25:53,Done in 9a0b0fc,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743957613,743957613,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-05 20:27:21,Removed calls to global Params() in ATMP and in the tx_pool test file ( aac6548 ),https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743958323,743958323,src/validation.cpp
lsilva01,2021-11-05 20:27:50,Done in 9a0b0fc,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r743958602,743958602,src/validation.cpp
jnewbery,2021-11-11 12:03:25,"Its seems odd to change this to:\n\n```\n        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(::Params(), tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n```\n\nin the first commit, and then update it again to use `chainstate.m_params` in the second commit. You can just go straight to using `chainstate.m_params` in the first commit.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747442614,747442614,src/test/fuzz/tx_pool.cpp
jnewbery,2021-11-11 12:03:46,"```suggestion\n        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate.m_params, tx_pool, chainstate, tx, GetTime(), bypass_limits, /* test_accept= */false));\n```",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747442858,747442858,src/test/fuzz/tx_pool.cpp
jnewbery,2021-11-11 12:09:02,This argument could be removed. `AcceptToMemoryPool()` could just take the `m_params` from the `active_chainstate` that's passed in.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747446157,747446157,src/validation.h
jnewbery,2021-11-11 12:09:50,"It's generally not a good idea to document how the function is called in the function comment (since that may change over time, and this comment would be out of date:\n\n```suggestion\n *                                the current system time, but may be different.\n```",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747446663,747446663,src/validation.h
lsilva01,2021-11-12 02:31:12,Agreed. Changed it to the first commit.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747939403,747939403,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-12 02:31:57,Done.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747939668,747939668,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-12 02:32:43,Makes sense. Comment removed.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747939926,747939926,src/validation.h
lsilva01,2021-11-12 02:44:24,"Done.\nAs this PR is removing the `CChainParams& chainparams` from ATMP (commit 863703c),  I also added a new commit to remove `CTxMemPool& pool` as suggested in https://github.com/bitcoin/bitcoin/pull/23437#issuecomment-962536149.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r747943465,747943465,src/validation.h
jnewbery,2021-11-12 11:25:08,"This causes the tx_pool fuzz test to fail since it operates on a mempool that isn't referenced by the `CChainState` object. See https://github.com/bitcoin/bitcoin/pull/23173#discussion_r731895386.\n\nThat should probably be fixed in the fuzz test, but it can be left for a future PR. For now, I suggest you just remove the final commit.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r748180643,748180643,src/validation.h
MarcoFalke,2021-11-12 11:35:47,"For reference, this can trivially be fixed by something like:\n\n```cpp\nstruct MockedChainstate:public CChainstate{\nSwapTxPool(CTxMempool*tx_pool){m_mempool=tx_pool;}\n}\n\n...\n\n   CTxMempool fuzzed_pool;\n   (MockedChainstate*)(&chainstate)->SwapTxPool(&fuzzed_pool);",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r748193161,748193161,src/validation.h
lsilva01,2021-11-13 04:46:19,Final commit removed. ,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r748681538,748681538,src/validation.h
lsilva01,2021-11-13 14:50:55,"I also addressed the `tx_pool.cpp` issue using a different approach in #23465.\nThe fuzz test performed successfully on local machine and CI.\n\n```diff\n- const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+ CChainState& chainstate{node.chainman->ActiveChainstate()};\n+ chainstate.m_mempool = &tx_pool;\n\n+ const auto res = WITH_LOCK",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r748730930,748730930,src/validation.h
mjdietzx,2021-11-15 17:35:22,can this be `const`?,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749544102,749544102,src/validation.cpp
mjdietzx,2021-11-15 17:35:59,Curious why you removed default `false` value for `test_accept`?,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749544540,749544540,src/validation.h
mjdietzx,2021-11-15 17:39:36,"nit: sometimes throughout your changes you don't have a space between the last `*/` and the value, ie: `/* test_accept= */false` => `/* test_accept= */ false`",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749547128,749547128,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-15 21:25:44,Refers to the `args` variable?,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749692936,749692936,src/validation.cpp
lsilva01,2021-11-15 21:25:59,"Since this PR removes `AcceptToMemoryPoolWithTime` where `bool test_accept` has no default value, I think making it explicit is better.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749693073,749693073,src/validation.h
lsilva01,2021-11-15 21:26:05,Thanks. I will fix it.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r749693123,749693123,src/test/fuzz/tx_pool.cpp
glozow,2021-11-22 19:08:40,"No - contrary to what the name `args` suggests, it cannot be const because it contains `coins_to_uncache`, which is populated with coins and returned. If `coins_to_uncache` were removed from `ATMPArgs` then it could be const.\n\nAs a side thought, I personally think it would be nice/more RAII-like if uncaching would be handled by `MemPoolAccept` (see #21146), which is one approach to removing it",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r754562067,754562067,src/validation.cpp
lsilva01,2021-11-22 19:12:21,Fixed.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r754564443,754564443,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-22 19:14:30,It seems this change also implies changing `MemPoolAccept::AcceptSingleTransaction`. Maybe it can be a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r754565713,754565713,src/validation.cpp
glozow,2021-11-22 19:29:01,"Just to clarify, I didn't mean to suggest that you change it - out of scope for this PR. Marking resolved.",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r754574997,754574997,src/validation.cpp
theStack,2021-11-23 14:19:01,"I think this line could simply be removed, as it is merely shadowing another reference with the same name and content on top of the fuzz test?",https://github.com/bitcoin/bitcoin/pull/23437#discussion_r755168379,755168379,src/test/fuzz/tx_pool.cpp
lsilva01,2021-11-24 04:43:56,Good catch. Line removed in 4ec8b96.,https://github.com/bitcoin/bitcoin/pull/23437#discussion_r755697715,755697715,src/test/fuzz/tx_pool.cpp
